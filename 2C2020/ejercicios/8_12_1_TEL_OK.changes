

TestSuite subclass: #TerniLapilliTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTests category: 'TerniLapilli' stamp: 'EMI 10/29/2020 17:22:11'!
TestSuite subclass: #TerniLapilliTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTests methodsFor: 'nil' stamp: 'EMI 10/29/2020 17:23:34'!
test01! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:23:37'!
test02! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:23:39'!
test03! !

Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 10/29/2020 17:28:37'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:30:38'!
test01TerniLapilliNewGameNotOver! !

!methodRemoval: TerniLapilliTests #test01 stamp: 'EMI 10/29/2020 17:30:38'!
test01!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:32:18' prior: 50875581!
test01TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self deny: partida isOver.
	self deny: partida isTied.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.! !
!TerniLapilli class methodsFor: 'nil' stamp: 'EMI 10/29/2020 17:32:54'!
newGame
	^self new.! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:33:48'!
test02TerniLapilliXPlaysFirst! !

!methodRemoval: TerniLapilliTests #test02 stamp: 'EMI 10/29/2020 17:33:48'!
test02!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:34:06' prior: 50875602!
test02TerniLapilliXPlaysFirst
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:34:13' prior: 50875588!
test01TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
	self deny: partida isTied.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:35:28'!
test03TerniLapilliNewGameHasNoWinner! !

!methodRemoval: TerniLapilliTests #test03 stamp: 'EMI 10/29/2020 17:35:28'!
test03!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:35:46' prior: 50875626!
test03TerniLapilliNewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:35:56' prior: 50875617!
test01TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
	self deny: partida isTied.! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:36:08' prior: 50875641!
test01TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:36:17' prior: 50875633!
test03TerniLapilliNewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self deny: partida isTied.! !
!TerniLapilli methodsFor: 'nil' stamp: 'EMI 10/29/2020 17:36:37'!
isPlayingX! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:36:45'!
isPlayingO! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:36:56'!
isOver! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:36:59'!
isTied! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:37:09'!
hasPlayerXWon! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:37:12'!
hasPlayerOWon! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:37:34'!
putXAt: aPosition! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 17:37:37'!
putOAt: aPosition! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:49:42'!
test04TerniLapilliNewGamePlaxerXCanPutPiece
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self deny: partida isTied.! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:50:04'!
test05TerniLapilliNewGamePlayerOCantPutPiece
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self deny: partida isTied.! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:50:13'!
test04TerniLapilliNewGamePlayerXCanPutPiece
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self deny: partida isTied.! !

!methodRemoval: TerniLapilliTests #test04TerniLapilliNewGamePlaxerXCanPutPiece stamp: 'EMI 10/29/2020 17:50:14'!
test04TerniLapilliNewGamePlaxerXCanPutPiece
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self deny: partida isTied.!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:51:55' prior: 50875709!
test04TerniLapilliNewGamePlayerXCanPutPiece
	| partida |
	partida _ TerniLapilli newGame.
	 ! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:52:03' prior: 50875700!
test05TerniLapilliNewGamePlayerOCantPutPiece
	| partida |
	partida _ TerniLapilli newGame.
! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 17:59:59'!
test06TerniLapilliPlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:00:09'!
test07TerniLapilliPlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
! !

!methodRemoval: TerniLapilliTests #test05TerniLapilliNewGamePlayerOCantPutPiece stamp: 'EMI 10/29/2020 18:00:20'!
test05TerniLapilliNewGamePlayerOCantPutPiece
	| partida |
	partida _ TerniLapilli newGame.
!

!methodRemoval: TerniLapilliTests #test04TerniLapilliNewGamePlayerXCanPutPiece stamp: 'EMI 10/29/2020 18:00:24'!
test04TerniLapilliNewGamePlayerXCanPutPiece
	| partida |
	partida _ TerniLapilli newGame.
	 !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:00:36'!
test04TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
! !

!methodRemoval: TerniLapilliTests #test01TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:00:36'!
test01TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:00:43'!
test05TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
! !

!methodRemoval: TerniLapilliTests #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:00:43'!
test04TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:00:51'!
test01TerniLapilliXPlaysFirst
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.! !

!methodRemoval: TerniLapilliTests #test02TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:00:51'!
test02TerniLapilliXPlaysFirst
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:01:01'!
test02TerniLapilliPlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
! !

!methodRemoval: TerniLapilliTests #test06TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:01:01'!
test06TerniLapilliPlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:01:11'!
test04TerniLapilliNewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self deny: partida isTied.! !

!methodRemoval: TerniLapilliTests #test03TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:01:11'!
test03TerniLapilliNewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self deny: partida isTied.!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:01:18'!
test03TerniLapilliPlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
! !

!methodRemoval: TerniLapilliTests #test07TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:01:18'!
test07TerniLapilliPlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:01:40' prior: 50875804!
test02TerniLapilliPlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:02:30' prior: 50875845!
test02TerniLapilliPlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	self assert: partida isPlayingO.
! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:02:50' prior: 50875833!
test03TerniLapilliPlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
	partida putOAt: 0@0.
	self assert: partida isPlayingX.
! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:03:13' prior: 50875859!
test03TerniLapilliPlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	self assert: partida isPlayingX.
! !
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:08:26' prior: 50875815!
test04TerniLapilliNewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.! !

!methodRemoval: TerniLapilli #isTied stamp: 'EMI 10/29/2020 18:08:35'!
isTied!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:12:29'!
test04TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
! !

!methodRemoval: TerniLapilliTests #test05TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:12:29'!
test05TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
!
!TerniLapilliTests methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:12:41'!
test05TerniLapilliNewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.! !

!methodRemoval: TerniLapilliTests #test04TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:12:41'!
test04TerniLapilliNewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.!
!TerniLapilli methodsFor: 'nil' stamp: 'EMI 10/29/2020 18:14:32' overrides: 16896425!
initialize! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 10/29/2020 18:17:02' prior: 50875914 overrides: 16896425!
initialize! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:17:32' prior: 50875664!
isPlayingX
	^true.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:17:59' prior: 50875667!
isPlayingO
	^false.! !

!classRenamed: #TerniLapilliTests as: #TerniLapilliTest stamp: 'EMI 10/29/2020 18:18:35'!
Smalltalk renameClassNamed: #TerniLapilliTests as: #TerniLapilliTest!

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'EMI 10/29/2020 18:21:07'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:21:14'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:21:14'!
FAILURE!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:21:14'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:21:14'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:21:14'!
ERROR!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:22:06' prior: 50875867!
test03TerniLapilliPlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:25:50' prior: 50875851!
test02TerniLapilliPlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	self assert: partida isPlayingO.
	self deny: partida isPlayingX.
! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:27:33'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:27:33'!
FAILURE!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:27:33'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:27:33'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:27:33'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:29:28'!
countPiecesPlayed! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:30:04' prior: 50875972!
test02TerniLapilliPlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	self assert: partida isPlayingO.
	self deny: partida isPlayingX.
	self assert: partida countPiecesPlayed equals: 1.
! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:30:14' prior: 50875963!
test03TerniLapilliPlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 2.
! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:31:12'!
test06TerniLapilliNewGameHasNoPieces
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:31:19' prior: 50876021!
test06TerniLapilliNewGameHasNoPieces
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida countPiecesPlayed equals: 0.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:31:24'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:31:24'!
FAILURE!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:31:24'!
FAILURE!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:31:24'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:31:24'!
ERROR!

!testRun: #TerniLapilliTest #test06TerniLapilliNewGameHasNoPieces stamp: 'EMI 10/29/2020 18:31:24'!
FAILURE!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:32:00'!
FAILURE!

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 10/29/2020 18:33:26'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:33:35' prior: 50875922!
isPlayingX
	^isXTurn.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:33:46' prior: 50875926!
isPlayingO
	^isXTurn not.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'EMI 10/29/2020 18:33:58' prior: 50875599!
newGame
	^self new initialize .! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 10/29/2020 18:34:09' prior: 50875918 overrides: 16896425!
initialize
	isXTurn _ true.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:34:29' prior: 50875997!
countPiecesPlayed
	^1.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:34:32'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:34:32'!
FAILURE!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:34:32'!
FAILURE!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:34:32'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:34:32'!
ERROR!

!testRun: #TerniLapilliTest #test06TerniLapilliNewGameHasNoPieces stamp: 'EMI 10/29/2020 18:34:32'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:35:06' prior: 50875684!
putXAt: aPosition
	isXTurn _ false.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:35:12'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:35:12'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:35:12'!
FAILURE!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:35:12'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:35:12'!
ERROR!

!testRun: #TerniLapilliTest #test06TerniLapilliNewGameHasNoPieces stamp: 'EMI 10/29/2020 18:35:12'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:36:07' prior: 50875688!
putOAt: aPosition
	isXTurn _ true.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 10/29/2020 18:36:32'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn countPieces'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:36:30' prior: 50876139!
putOAt: aPosition
	isXTurn _ true.
	countPieces _ countPieces + 1.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:36:45' prior: 50876114!
putXAt: aPosition
	isXTurn _ false.
	countPieces _ countPieces + 1.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 10/29/2020 18:37:02' prior: 50876086 overrides: 16896425!
initialize
	isXTurn _ true.
	countPieces _ 0.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:37:06'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:37:06'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:37:06'!
FAILURE!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:37:06'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:37:06'!
ERROR!

!testRun: #TerniLapilliTest #test06TerniLapilliNewGameHasNoPieces stamp: 'EMI 10/29/2020 18:37:06'!
FAILURE!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:37:17'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:37:50' prior: 50876090!
countPiecesPlayed
	^countPieces .! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:37:53' prior: 50876191!
countPiecesPlayed
	^countPieces.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:37:58'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:37:58'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:37:58'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:37:58'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:37:58'!
ERROR!

!testRun: #TerniLapilliTest #test06TerniLapilliNewGameHasNoPieces stamp: 'EMI 10/29/2020 18:37:58'!
PASSED!

!methodRemoval: TerniLapilliTest #test06TerniLapilliNewGameHasNoPieces stamp: 'EMI 10/29/2020 18:39:17'!
test06TerniLapilliNewGameHasNoPieces
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida countPiecesPlayed equals: 0.!

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:39:21'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:39:21'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:39:21'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:39:21'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:39:21'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:39:37' prior: 50875670!
isOver
	^false.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:39:40'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:39:40'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:39:40'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:39:40'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:39:40'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:39:40'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:40:09'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:40:48' prior: 50875676!
hasPlayerXWon
	^false.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 18:40:55' prior: 50875680!
hasPlayerOWon
	^false.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:40:58'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:40:58'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:40:58'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:40:58'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:40:58'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:42:33'!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:45:30' prior: 50876294!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | ].
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:45:54' prior: 50876302!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | ].
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | ].
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:47:01' prior: 50876315!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli class cannotPlaceMoreThan3PiecesError].
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli class cannotPlaceMoreThan3PiecesError].
	! !
!TerniLapilli class methodsFor: 'nil' stamp: 'EMI 10/29/2020 18:48:51'!
cannotPlaceMoreThan3PiecesError
	^'Cannot place more than 3 pieces per player'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:49:33'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:49:33'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:49:33'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:49:33'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:49:33'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 18:49:33'!
FAILURE!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 18:49:33'!
FAILURE!

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn countPieces piecesX piecesO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 10/29/2020 18:50:40'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn countPieces piecesX piecesO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:50:56' prior: 50876157!
putXAt: aPosition
	isXTurn _ false.
	countPieces _ countPieces + 1.
	piecesX _ piecesX + 1.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:51:10' prior: 50876151!
putOAt: aPosition
	isXTurn _ true.
	countPieces _ countPieces + 1.
	piecesO _ piecesO + 1.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 10/29/2020 18:51:35' prior: 50876163 overrides: 16896425!
initialize
	isXTurn _ true.
	countPieces _ 0.
	piecesX _ 0.
	piecesO _ 0.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:53:00' prior: 50876400!
putOAt: aPosition
	piecesO > 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	countPieces _ countPieces + 1.
	piecesO _ piecesO + 1.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:53:10' prior: 50876394!
putXAt: aPosition
	piecesX > 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ false.
	countPieces _ countPieces + 1.
	piecesX _ piecesX + 1.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:53:14'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:53:14'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:53:14'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:53:14'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:53:14'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 18:53:14'!
FAILURE!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 18:53:14'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:53:40' prior: 50876413!
putOAt: aPosition
	piecesO = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	countPieces _ countPieces + 1.
	piecesO _ piecesO + 1.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 18:53:45' prior: 50876422!
putXAt: aPosition
	piecesX = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ false.
	countPieces _ countPieces + 1.
	piecesX _ piecesX + 1.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:53:48'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:53:48'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:53:48'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:53:48'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:53:48'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 18:53:48'!
ERROR!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 18:53:48'!
ERROR!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:54:13' prior: 50876331!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError].
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError].
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 18:54:17'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 18:54:17'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 18:54:17'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 18:54:17'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 18:54:17'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 18:54:17'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:58:57'!
test07PlayerWonInThreeRounds
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError].
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError].
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 18:59:59' prior: 50876536!
test07PlayerWonInThreeRounds
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerOWon.
	self deny: partida hasPlayerXWon.
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 19:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 19:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 19:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 19:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 19:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 19:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerWonInThreeRounds stamp: 'EMI 10/29/2020 19:00:27'!
FAILURE!

!testRun: #TerniLapilliTest #test07PlayerWonInThreeRounds stamp: 'EMI 10/29/2020 19:00:27'!
FAILURE!

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn board countPieces piecesX piecesO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 10/29/2020 19:08:28'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn board countPieces piecesX piecesO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'private' stamp: 'EMI 10/29/2020 19:08:43' prior: 50876407 overrides: 16896425!
initialize
	isXTurn _ true.
	countPieces _ 0.
	piecesX _ 0.
	piecesO _ 0.
	board _ OrderedCollection new.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 19:09:55' prior: 50876455!
putOAt: aPosition
	piecesO = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	countPieces _ countPieces + 1.
	piecesO _ piecesO + 1.
	board put: #($O aPosition).! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 19:10:51' prior: 50876464!
putXAt: aPosition
	piecesX = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ false.
	countPieces _ countPieces + 1.
	piecesX _ piecesX + 1.
	board put: #($X aPosition).! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 19:13:37' prior: 50876627!
putXAt: aPosition
	piecesX = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ false.
	countPieces _ countPieces + 1.
	piecesX _ piecesX + 1.
	board put: #($X aPosition).! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 19:20:57' prior: 50876617!
putOAt: aPosition
	piecesO = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	countPieces _ countPieces + 1.
	piecesO _ piecesO + 1.
	board put: #($O aPosition).! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 10/29/2020 19:21:33' prior: 50876610 overrides: 16896425!
initialize
	isXTurn _ true.
	piecesX _ OrderedCollection new.
	piecesO _ OrderedCollection new.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 19:21:52' prior: 50876195!
countPiecesPlayed
	^piecesX size + piecesO size.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 19:22:23' prior: 50876647!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	piecesO put: aPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 19:22:44' prior: 50876637!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ false.
	piecesX put: aPosition.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 19:23:32' prior: 50875789!
test01TerniLapilliXPlaysFirst
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 0.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 19:23:54'!
test07PlayerOWonByPlacingPieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerOWon.
	self deny: partida hasPlayerXWon.
	! !

!methodRemoval: TerniLapilliTest #test07PlayerWonInThreeRounds stamp: 'EMI 10/29/2020 19:23:54'!
test07PlayerWonInThreeRounds
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerOWon.
	self deny: partida hasPlayerXWon.
	!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 19:36:08' prior: 50876668!
putOAt: aPosition
	|f1 f2|
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	piecesO put: aPosition.
	
	f1 _ piecesO at:0.
	f2 _ (piecesO select: [:aPos | f1 eightNeighbors includes: aPos]) at: 0.
	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:20:54' prior: 50876719!
putOAt: aPosition
	
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	piecesO put: aPosition.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:21:16' prior: 50876730!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	piecesO put: aPosition.
	self checkIfPlayerWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:21:28' prior: 50876738!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	piecesO put: aPosition.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:21:36' prior: 50876676!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ false.
	piecesX put: aPosition.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:21:39' prior: 50876756!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ false.
	piecesX put: aPosition.
	self checkIfPlayerXWon.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 20:23:08'!
test08PlayerXWonByPlacingPieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerOWon.
	self deny: partida hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 20:23:18' prior: 50876773!
test08PlayerXWonByPlacingPieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	
	self assert: partida isOver.
	self assert: partida hasPlayerOWon.
	self deny: partida hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 20:23:41' prior: 50876786!
test08PlayerXWonByPlacingPieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 0@2.
	
	self assert: partida isOver.
	self deny: partida hasPlayerOWon.
	self assert: partida hasPlayerXWon.
	! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn piecesX piecesO gameEnded'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 10/29/2020 20:25:38'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn piecesX piecesO gameEnded'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 20:25:45' prior: 50876243!
isOver
	^gameEnded.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 10/29/2020 20:27:40'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn piecesX piecesO gameEnded xIsWinner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 20:27:37' prior: 50876270!
hasPlayerXWon
	^gameEnded and: [xIsWinner].! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 10/29/2020 20:28:10' prior: 50876274!
hasPlayerOWon
	^gameEnded and: [xIsWinner not].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:29:43'!
checkIfPlayerXWon! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:30:29' prior: 50876846!
checkIfPlayerXWon
	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:31:47' prior: 50876850!
checkIfPlayerXWon
	xIsWinner _ self checkHorizontalLine: piecesX.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:32:21'!
checkHorizontalLine: aPiecesCollection! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:38:18' prior: 50876859!
checkHorizontalLine: aPiecesCollection
	|first estanALaIzq estanALaDer estanAmbosLados|
	first _ aPiecesCollection at:0.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 0@1)) and: [aPiecesCollection includes: first - 0@1].
	estanALaDer _ (aPiecesCollection includes: (first + 0@1)) and: [aPiecesCollection includes: first + 0@2].
	estanALaIzq _ (aPiecesCollection includes: (first - 0@1)) and: [aPiecesCollection includes: first - 0@2].
	
	^estanAmbosLados or:[estanALaDer or:[estanALaIzq]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:38:34'!
checkVerticalLine: aPiecesCollection
	|first estanALaIzq estanALaDer estanAmbosLados|
	first _ aPiecesCollection at:0.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 0@1)) and: [aPiecesCollection includes: first - 0@1].
	estanALaDer _ (aPiecesCollection includes: (first + 0@1)) and: [aPiecesCollection includes: first + 0@2].
	estanALaIzq _ (aPiecesCollection includes: (first - 0@1)) and: [aPiecesCollection includes: first - 0@2].
	
	^estanAmbosLados or:[estanALaDer or:[estanALaIzq]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:39:15' prior: 50876883!
checkVerticalLine: aPiecesCollection
	|first estanALaIzq estanALaDer estanAmbosLados|
	first _ aPiecesCollection at:0.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first - 1@0].
	estanALaDer _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first + 2@0].
	estanALaIzq _ (aPiecesCollection includes: (first - 1@0)) and: [aPiecesCollection includes: first - 2@0].
	
	^estanAmbosLados or:[estanALaDer or:[estanALaIzq]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:39:29' prior: 50876902!
checkVerticalLine: aPiecesCollection
	|first estanArriba estanALaDer estanAmbosLados|
	first _ aPiecesCollection at:0.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first - 1@0].
	estanALaDer _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first + 2@0].
	estanArriba _ (aPiecesCollection includes: (first - 1@0)) and: [aPiecesCollection includes: first - 2@0].
	
	^estanAmbosLados or:[estanALaDer or:[estanArriba]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:39:39' prior: 50876921!
checkVerticalLine: aPiecesCollection
	|first estanArriba estanAbajo estanAmbosLados|
	first _ aPiecesCollection at:0.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first - 1@0].
	estanAbajo _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first + 2@0].
	estanArriba _ (aPiecesCollection includes: (first - 1@0)) and: [aPiecesCollection includes: first - 2@0].
	
	^estanAmbosLados or:[estanAbajo or:[estanArriba]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:41:44'!
checkDiagonalLine: aPiecesCollection
	|first estanArriba estanAbajo estanAmbosLados|
	first _ aPiecesCollection at:0.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first - 1@0].
	estanAbajo _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first + 2@0].
	estanArriba _ (aPiecesCollection includes: (first - 1@0)) and: [aPiecesCollection includes: first - 2@0].
	
	^estanAmbosLados or:[estanAbajo or:[estanArriba]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:44:26' prior: 50876959!
checkDiagonalLine: aPiecesCollection
	|first estanArriba estanAbajo estanAmbosLados puntosConDiagonal|
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	first _ aPiecesCollection at:0.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first - 1@0].
	estanAbajo _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first + 2@0].
	estanArriba _ (aPiecesCollection includes: (first - 1@0)) and: [aPiecesCollection includes: first - 2@0].
	
	^estanAmbosLados or:[estanAbajo or:[estanArriba]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:45:11' prior: 50876978!
checkDiagonalLine: aPiecesCollection
	|center estanArriba estanAbajo estanAmbosLados |
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	center _ aPiecesCollection at:0.
	
	estanAmbosLados  _ (aPiecesCollection includes: (center + 1@0)) and: [aPiecesCollection includes: center - 1@0].
	estanAbajo _ (aPiecesCollection includes: (center + 1@0)) and: [aPiecesCollection includes: center + 2@0].
	estanArriba _ (aPiecesCollection includes: (center - 1@0)) and: [aPiecesCollection includes: center - 2@0].
	
	^estanAmbosLados or:[estanAbajo or:[estanArriba]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:47:29' prior: 50876999!
checkDiagonalLine: aPiecesCollection
	|center estanArriba estanAbajo diagonal |
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	center _ aPiecesCollection at:0.
	
	diagonal  _ (aPiecesCollection includes: (center + 1@1)) and: [aPiecesCollection includes: center - 1@1].
	estanAbajo _ (aPiecesCollection includes: (center + 1@-1)) and: [aPiecesCollection includes: center + -1@1].
	
	^diagonal or:[estanAbajo or:[estanArriba]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:47:40' prior: 50877020!
checkDiagonalLine: aPiecesCollection
	|center estanArriba diagonalInversa diagonal |
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	center _ aPiecesCollection at:0.
	
	diagonal  _ (aPiecesCollection includes: (center + 1@1)) and: [aPiecesCollection includes: center - 1@1].
	diagonalInversa _ (aPiecesCollection includes: (center + 1@-1)) and: [aPiecesCollection includes: center + -1@1].
	
	^diagonal or:[diagonalInversa or:[estanArriba]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:47:50' prior: 50877037!
checkDiagonalLine: aPiecesCollection
	|center diagonalInversa diagonal |
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	center _ aPiecesCollection at:0.
	
	diagonal  _ (aPiecesCollection includes: (center + 1@1)) and: [aPiecesCollection includes: center - 1@1].
	diagonalInversa _ (aPiecesCollection includes: (center + 1@-1)) and: [aPiecesCollection includes: center + -1@1].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:48:07' prior: 50877055!
checkDiagonalLine: aPiecesCollection
	|center diagonalInversa diagonal |
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	center _ 1@1.
	
	diagonal  _ (aPiecesCollection includes: (center + 1@1)) and: [aPiecesCollection includes: center - 1@1].
	diagonalInversa _ (aPiecesCollection includes: (center + 1@-1)) and: [aPiecesCollection includes: center + -1@1].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:50:48' prior: 50876854!
checkIfPlayerXWon
	xIsWinner _ (self checkHorizontalLine: piecesX) or: [(self checkVerticalLine: piecesX) or:[self checkDiagonalLine: piecesX]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:51:15'!
checkIfPlayerOWon
	xIsWinner _ ((self checkHorizontalLine: piecesO) or: [(self checkVerticalLine: piecesO) or:[self checkDiagonalLine: piecesO]]) not.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:52:21' prior: 50877088!
checkIfPlayerXWon
	xIsWinner _ (self checkHorizontalLine: piecesX) or: [(self checkVerticalLine: piecesX) or:[self checkDiagonalLine: piecesX]].
	gameEnded _ xIsWinner.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:52:40' prior: 50877096!
checkIfPlayerOWon
	xIsWinner _ ((self checkHorizontalLine: piecesO) or: [(self checkVerticalLine: piecesO) or:[self checkDiagonalLine: piecesO]]) not.
	gameEnded _ xIsWinner not.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 20:53:29'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:53:29'!
ERROR!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 20:53:29'!
ERROR!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 20:53:29'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 20:53:29'!
ERROR!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 20:53:29'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 20:53:29'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 20:53:29'!
ERROR!

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 20:54:00'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:54:00'!
ERROR!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 20:54:00'!
ERROR!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 20:54:00'!
ERROR!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 20:54:00'!
ERROR!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 20:54:00'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 20:54:00'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 20:54:00'!
ERROR!
!TerniLapilli methodsFor: 'private' stamp: 'EMI 10/29/2020 20:54:28' prior: 50876657 overrides: 16896425!
initialize
	isXTurn _ true.
	piecesX _ OrderedCollection new.
	piecesO _ OrderedCollection new.
	gameEnded _ false.
	xIsWinner _ false.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 20:54:32'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:54:32'!
ERROR!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 20:54:32'!
ERROR!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 20:54:32'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 20:54:32'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 20:54:32'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 20:54:32'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 20:54:32'!
ERROR!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:54:41'!
ERROR!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:54:53'!
ERROR!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:55:24' prior: 50876765!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ false.
	piecesX add: aPosition.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:55:29' prior: 50876747!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn _ true.
	piecesO add: aPosition.
	self checkIfPlayerOWon.

	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 20:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:55:33'!
ERROR!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 20:55:33'!
ERROR!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 20:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 20:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 20:55:33'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 20:55:33'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 20:55:33'!
ERROR!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:55:36'!
ERROR!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:57:03' prior: 50876864!
checkHorizontalLine: aPiecesCollection
	|first estanALaIzq estanALaDer estanAmbosLados|
	first _ aPiecesCollection first.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 0@1)) and: [aPiecesCollection includes: first - 0@1].
	estanALaDer _ (aPiecesCollection includes: (first + 0@1)) and: [aPiecesCollection includes: first + 0@2].
	estanALaIzq _ (aPiecesCollection includes: (first - 0@1)) and: [aPiecesCollection includes: first - 0@2].
	
	^estanAmbosLados or:[estanALaDer or:[estanALaIzq]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:57:17' prior: 50876940!
checkVerticalLine: aPiecesCollection
	|first estanArriba estanAbajo estanAmbosLados|
	first _ aPiecesCollection first.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first - 1@0].
	estanAbajo _ (aPiecesCollection includes: (first + 1@0)) and: [aPiecesCollection includes: first + 2@0].
	estanArriba _ (aPiecesCollection includes: (first - 1@0)) and: [aPiecesCollection includes: first - 2@0].
	
	^estanAmbosLados or:[estanAbajo or:[estanArriba]].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 20:57:21'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:57:21'!
ERROR!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 20:57:21'!
ERROR!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 20:57:21'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 20:57:21'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 20:57:21'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 20:57:21'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 20:57:21'!
ERROR!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:57:25'!
ERROR!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:58:06' prior: 50877264!
checkHorizontalLine: aPiecesCollection
	|first estanALaIzq estanALaDer estanAmbosLados|
	first _ aPiecesCollection first.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + (0@1))) and: [aPiecesCollection includes: first - (0@1)].
	estanALaDer _ (aPiecesCollection includes: (first + (0@1))) and: [aPiecesCollection includes: first + (0@2)].
	estanALaIzq _ (aPiecesCollection includes: (first - (0@1))) and: [aPiecesCollection includes: first - (0@2)].
	
	^estanAmbosLados or:[estanALaDer or:[estanALaIzq]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:58:35' prior: 50877283!
checkVerticalLine: aPiecesCollection
	|first estanArriba estanAbajo estanAmbosLados|
	first _ aPiecesCollection first.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + (1@0))) and: [aPiecesCollection includes: first - (1@0)].
	estanAbajo _ (aPiecesCollection includes: (first + (1@0))) and: [aPiecesCollection includes: first + (2@0)].
	estanArriba _ (aPiecesCollection includes: (first - (1@0))) and: [aPiecesCollection includes: first - (2@0)].
	
	^estanAmbosLados or:[estanAbajo or:[estanArriba]].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 20:58:58' prior: 50877072!
checkDiagonalLine: aPiecesCollection
	|center diagonalInversa diagonal |
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	center _ 1@1.
	
	diagonal  _ (aPiecesCollection includes: (center + (1@1))) and: [aPiecesCollection includes: center - (1@1)].
	diagonalInversa _ (aPiecesCollection includes: (center + (1@-1))) and: [aPiecesCollection includes: center + (-1@1)].
	
	^diagonal or:[diagonalInversa].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 20:59:11'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 20:59:11'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 20:59:11'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 20:59:11'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 20:59:11'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 20:59:11'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 20:59:11'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 20:59:11'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:00:37'!
test09PlayerXMovesAPiece
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 0@2.
	
	self assert: partida isOver.
	self deny: partida hasPlayerOWon.
	self assert: partida hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:01:10' prior: 50877413!
test09PlayerXMovesAPiece
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self assert: partida isOver.
	self deny: partida hasPlayerOWon.
	self assert: partida hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:01:17' prior: 50877425!
test09PlayerXMovesAPiece
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:05:38' prior: 50877438!
test09PlayerXMovesAPiece
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:06:12'!
test09PlayerXMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	! !

!methodRemoval: TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'EMI 10/29/2020 21:06:12'!
test09PlayerXMovesAPiece
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:08:30' prior: 50877458!
test09PlayerXMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:09:16' prior: 50877480!
test09PlayerXMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self assert: partida isPlayingO.
	self deny: partida isPlayingX.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 21:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 21:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 21:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 21:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 21:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 21:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 21:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 21:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:10:09'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:10:09'!
ERROR!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 21:10:57'!
moveXFrom: aOriginPosition To: aDestinationPosition
	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 21:11:16' prior: 50877543!
moveXFrom: aOriginPosition To: aDestinationPosition
	isXTurn _ false.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:11:38'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:14:25' prior: 50877494!
test09PlayerXMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 1@2.
	partida putOAt: 2@0.
	
	partida moveXFrom: 1@2 To: 0@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self assert: partida countPiecesPlayed equals: 6.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:14:47'!
test10PlayerXMovesAPieceAndWins
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 1@2.
	partida putOAt: 2@0.
	
	partida moveXFrom: 1@2 To: 0@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self assert: partida countPiecesPlayed equals: 6.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:09:16' prior: 50877584!
test09PlayerXMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self assert: partida isPlayingO.
	self deny: partida isPlayingX.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:15:22'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/29/2020 21:15:22'!
FAILURE!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/29/2020 21:15:22'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 21:16:54' prior: 50877548!
moveXFrom: aOriginPosition To: aDestinationPosition
	isXTurn _ false.
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	self checkIfPlayerXWon. ! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 21:17:35' prior: 50877669!
moveXFrom: aOriginPosition To: aDestinationPosition
	isXTurn _ false.
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/29/2020 21:17:53'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:18:39'!
test11PlayerOMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self assert: partida isPlayingO.
	self deny: partida isPlayingX.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:21:30' prior: 50877719!
test11PlayerOMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida moveXFrom: 2@0 To: 2@1.
	
	partida moveOFrom: 1@0 To: 2@0.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self deny: partida isPlayingO.
	self assert: partida isPlayingX.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/29/2020 21:21:56'!
moveOFrom: aOriginPosition To: aDestinationPosition
	isXTurn _ true.
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	self checkIfPlayerOWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/29/2020 21:22:02'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:22:02'!
FAILURE!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:22:02'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:23:41' prior: 50877735!
test11PlayerOMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	partida moveOFrom: 1@1 To: 1@2.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self deny: partida isPlayingO.
	self assert: partida isPlayingX.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:23:45'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:23:41' prior: 50877801!
test11PlayerOMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	partida moveOFrom: 1@1 To: 1@2.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self deny: partida isPlayingO.
	self assert: partida isPlayingX.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:23:41' prior: 50877855!
test11PlayerOMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	partida moveOFrom: 1@1 To: 1@2.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self deny: partida isPlayingO.
	self assert: partida isPlayingX.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:24:41'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:24:55'!
test12PlayerOMovesAPieceAndWins
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	partida moveOFrom: 1@1 To: 1@2.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self deny: partida isPlayingO.
	self assert: partida isPlayingX.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:25:47' prior: 50877926!
test12PlayerOMovesAPieceAndWins
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	partida moveOFrom: 1@0 To: 2@0.
	
	self assert: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self deny: partida hasPlayerXWon .
	self assert: partida hasPlayerOWon .! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/29/2020 21:25:52'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:26:43' prior: 50877616!
test09PlayerXMovesAPieceAndGameContinues
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	partida moveXFrom: 2@0 To: 2@1.
	
	self deny: partida isOver.
	self assert: partida countPiecesPlayed equals: 6.
	self assert: partida isPlayingO.
	self deny: partida isPlayingX.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:26:51' prior: 50877600!
test10PlayerXMovesAPieceAndWins
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 1@2.
	partida putOAt: 2@0.
	
	partida moveXFrom: 1@2 To: 0@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.
	self assert: partida countPiecesPlayed equals: 6.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:27:18' prior: 50876693!
test07PlayerOWonByPlacingPieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerOWon.
	self deny: partida hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:27:23' prior: 50876799!
test08PlayerXWonByPlacingPieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 0@2.
	
	self assert: partida isOver.
	self deny: partida hasPlayerOWon.
	self assert: partida hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/29/2020 21:27:34' prior: 50876496!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError].
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError].
	! !

----SNAPSHOT----(29 October 2020 21:27:46) CuisUniversity-4383.image priorSource: 17404041!

----STARTUP---- (29 October 2020 21:50:19) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!


----QUIT----(29 October 2020 21:50:46) CuisUniversity-4383.image priorSource: 17485678!

----STARTUP---- (31 October 2020 19:36:12) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!

!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:44:24'!
test13CannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 0.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:44:57'!
test13PlayerOCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 0.! !

!methodRemoval: TerniLapilliTest #test13CannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:44:57'!
test13CannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 0.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:46:30' prior: 50878100!
test13PlayerOCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	self should: [partida putOAt: 0@0.] 
	raise: Error 
	withExceptionDo: [:anError | ].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:47:11' prior: 50878058!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError].
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError].
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:48:03' prior: 50878119!
test13PlayerOCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	self should: [partida putOAt: 0@0.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError  messageText = TerniLapilli cannotPlacePieceOutOfTurn].! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 19:48:32'!
cannotPlacePieceOutOfTurn
	^'Cannot place place piece out of turn'.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:49:49' prior: 50878149!
test13PlayerOCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	self should: [partida putOAt: 0@0.] 
	raise: Error 
	withExceptionDo: [:anError | self assert: anError messageText = TerniLapilli cannotPlacePieceOutOfTurn].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:54:32' prior: 50878165!
test13PlayerOCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	self should: [partida putOAt: 0@0.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceOutOfTurn.
		self assert: partida countPiecesPlayed = 0.
		self deny: partida isOver.
		].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:54:57' prior: 50878176!
test13PlayerOCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	self should: [partida putOAt: 0@0.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceOutOfTurn.
		self assert: partida countPiecesPlayed = 2.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:55:08'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:55:08'!
FAILURE!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:55:08'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 19:56:19' prior: 50877225!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	isXTurn _ true.
	piecesO add: aPosition.
	self checkIfPlayerOWon.

	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:56:24'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:57:18'!
test14PlayerXCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	partida putXAt: 0@0.
	self should: [partida putXAt: 0@1.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceOutOfTurn.
		self assert: partida countPiecesPlayed = 3.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:57:27'!
FAILURE!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:57:27'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 19:57:51' prior: 50877216!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	isXTurn _ false.
	piecesX add: aPosition.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:57:54'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 19:59:48' prior: 50878128!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 19:59:55'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:00:30'!
test15PlayerOCannotPutPieceInOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	self should: [partida putOAt: 0@0.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceOutOfTurn.
		self assert: partida countPiecesPlayed = 2.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:05:25' prior: 50878504!
test15PlayerOCannotPutPieceInOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	partida putXAt: 0@0.
	partida putOAt: 0@2.
	self should: [partida putXAt: 2@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 4.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:05:43'!
cannotPlacePieceInOccupiedPosition
	^'Cannot place place piece in occupied position'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:06:02'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:06:02'!
FAILURE!

!testRun: #TerniLapilliTest #test15PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:06:02'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:08:35' prior: 50878375!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	isXTurn _ false.
	piecesX add: aPosition.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:08:38'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:09:45' prior: 50878520!
test15PlayerOCannotPutPieceInOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	partida putXAt: 0@0.
	partida putOAt: 0@2.
	self should: [partida putXAt: 2@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 4.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	self should: [partida putXAt: 1@1.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 4.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:09:47'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:10:01'!
test15PlayerXCannotPutPieceInOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	partida putXAt: 0@0.
	partida putOAt: 0@2.
	self should: [partida putXAt: 2@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 4.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	self should: [partida putXAt: 1@1.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 4.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].! !

!methodRemoval: TerniLapilliTest #test15PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:10:01'!
test15PlayerOCannotPutPieceInOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	partida putXAt: 0@0.
	partida putOAt: 0@2.
	self should: [partida putXAt: 2@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 4.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	self should: [partida putXAt: 1@1.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 4.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:13:00'!
test16PlayerOCannotPutPieceInOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@2.
	partida putOAt: 2@2.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	partida putXAt: 0@0.
	self should: [partida putOAt: 0@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 5.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	self should: [partida putOAt: 2@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 5.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:13:03'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:13:03'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:13:03'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:13:20' prior: 50878254!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	isXTurn _ true.
	piecesO add: aPosition.
	self checkIfPlayerOWon.

	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:13:24'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:15:19' prior: 50878599!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:15:31' prior: 50878881!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:19:36'!
test17PlayerOCannotMoveBeforePlacing3Pieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@2.
	partida putOAt: 2@2.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	partida putXAt: 0@0.
	self should: [partida putOAt: 0@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 5.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	self should: [partida putOAt: 2@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida countPiecesPlayed = 5.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:24:18' prior: 50878982!
test17PlayerOCannotMoveBeforePlacing3Pieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@2.
	partida putOAt: 2@2.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	partida putXAt: 0@0.
	self should: [partida moveOFrom: 1@2 To: 0@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceBeforePlacingAllPieces.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:25:03'!
cannotMovePieceBeforePlacingAllPieces
	^'Cannot move piece before placing all pieces'.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:25:20' prior: 50878160!
cannotPlacePieceOutOfTurn
	^'Cannot place piece out of turn'.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:25:24' prior: 50878538!
cannotPlacePieceInOccupiedPosition
	^'Cannot place piece in occupied position'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:25:59'!
FAILURE!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:25:59'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:27:15' prior: 50877752!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	isXTurn _ true.
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	self checkIfPlayerOWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:27:18'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:27:34'!
test18PlayerXCannotMoveBeforePlacing3Pieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@2.
	partida putOAt: 2@2.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	partida putXAt: 0@0.
	self should: [partida moveOFrom: 1@2 To: 0@2.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceBeforePlacingAllPieces.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:28:10' prior: 50879175!
test18PlayerXCannotMoveBeforePlacing3Pieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@2.
	partida putOAt: 2@2.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	self should: [partida moveXFrom: 2@0 To: 1@0.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceBeforePlacingAllPieces.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:28:13'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:28:13'!
FAILURE!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:28:13'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:28:32' prior: 50877678!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	isXTurn _ false.
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:28:46' prior: 50879274!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:29:00' prior: 50879106!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:32:34'!
test19PlayersCannotPlacePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@2.
	partida putOAt: 2@2.
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	self should: [partida moveXFrom: 2@0 To: 1@0.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceBeforePlacingAllPieces.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:33:30' prior: 50879309!
test19PlayersCannotPlacePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	self should: [partida putXAt: (-1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida putXAt: 0@2.
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:33:48' prior: 50879326!
test19PlayersCannotPlacePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	self should: [partida putXAt: (-1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida countPiecesPlayed equals: 0.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida putXAt: 0@2.
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:34:13' prior: 50879340!
test19PlayersCannotPlacePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	self should: [partida putXAt: (-1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida countPiecesPlayed equals: 0.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida putXAt: 0@2.
	
	self should: [partida putOAt: (-1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida countPiecesPlayed equals: 1.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:34:50'!
cannotPlacePiecesOutsideBoard
	^'Cannot place piece outside board'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:34:55'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 20:34:55'!
FAILURE!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 20:34:55'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:36:21' prior: 50878951!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:37:59'!
isInsideBoard: aPosition
	^ ((aPosition x) between: 0 and: 2) and: [(aPosition y) between: 0 and: 2].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:38:24' prior: 50878967!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 20:38:27'!
PASSED!

----SNAPSHOT----(31 October 2020 20:38:33) CuisUniversity-4383.image priorSource: 17485878!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:39:14'!
test20PlayersCannotMovePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	self should: [partida putXAt: (-1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida countPiecesPlayed equals: 0.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida putXAt: 0@2.
	
	self should: [partida putOAt: (-1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida countPiecesPlayed equals: 1.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:40:47' prior: 50879566!
test20PlayersCannotMovePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: -1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesOutsideBoard.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
		
	self should: [partida putOAt: (-1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:40:55' prior: 50879591!
test20PlayersCannotMovePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: -1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesOutsideBoard.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
		
	self should: [partida putOAt: (-1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesOutsideBoard.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:42:16' prior: 50879616!
test20PlayersCannotMovePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: -1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesOutsideBoard.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida moveXFrom: 2@0 To: 2@1.

	self should: [partida moveOFrom: (1@0) To: (1@-1)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesOutsideBoard.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 20:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 20:42:34'!
FAILURE!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 20:42:34'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:43:55' prior: 50879298!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].

	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:43:58' prior: 50879740!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:44:12' prior: 50879286!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:44:31'!
cannotMovePiecesOutsideBoard
	^'Cannot move piece outside board'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 20:44:37'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:46:13'!
test21PlayersCanOnlyMoveOwnedPieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: -1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesOutsideBoard.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida moveXFrom: 2@0 To: 2@1.

	self should: [partida moveOFrom: (1@0) To: (1@-1)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesOutsideBoard.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:51:06' prior: 50879859!
test21PlayersCanOnlyMoveOwnedPieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@2 To: 1@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesPlayerDoesntOwn.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida moveXFrom: 2@0 To: 2@1.

	self should: [partida moveOFrom: (1@-1) To: (1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesPlayerDoesntOwn.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:51:43'!
cannotMovePiecesPlayerDoesntOwn
	^'Player doesnt have a piece in that position'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 20:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 20:51:58'!
FAILURE!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 20:51:58'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:53:32' prior: 50879770!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	piecesX remove: aOriginPosition ifAbsent:[^Error signal: self class cannotMovePiecesPlayerDoesntOwn ].
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:53:42' prior: 50879755!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	piecesO remove: aOriginPosition ifAbsent:[^Error signal: self class cannotMovePiecesPlayerDoesntOwn ].
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 20:53:49'!
PASSED!

----SNAPSHOT----(31 October 2020 20:53:54) CuisUniversity-4383.image priorSource: 17533205!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:55:23'!
test22PlayerXCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@2 To: 1@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesPlayerDoesntOwn.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida moveXFrom: 2@0 To: 2@1.

	self should: [partida moveOFrom: (1@-1) To: (1@0)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePiecesPlayerDoesntOwn.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 20:57:39' prior: 50880104!
test22PlayerXCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].

	self should: [partida moveOFrom: 0@0 To: 0@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:58:08'!
cannotMovePieceToOccupiedPosition
	^'Cannot move piece to a occupied position'.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 20:58:13' prior: 50880157!
cannotMovePieceToOccupiedPosition
	^'Cannot move piece to an occupied position'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 20:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 20:58:56'!
FAILURE!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 20:58:56'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 20:59:48' prior: 50880012!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	piecesO remove: aOriginPosition ifAbsent:[^Error signal: self class cannotMovePiecesPlayerDoesntOwn ].
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 21:00:00' prior: 50879995!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	piecesX remove: aOriginPosition ifAbsent:[^Error signal: self class cannotMovePiecesPlayerDoesntOwn ].
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 21:00:27' prior: 50880249!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	piecesO remove: aOriginPosition ifAbsent:[^Error signal: self class cannotMovePiecesPlayerDoesntOwn ].
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 21:00:31' prior: 50880271!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	piecesX remove: aOriginPosition ifAbsent:[^Error signal: self class cannotMovePiecesPlayerDoesntOwn ].
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 21:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 21:00:34'!
FAILURE!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:00:34'!
FAILURE!

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 21:01:56'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 21:01:56'!
FAILURE!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:01:56'!
FAILURE!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 21:01:58'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 21:04:38' prior: 50880293!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 21:04:48' prior: 50880315!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	piecesX remove: aOriginPosition ifAbsent:[^Error signal: self class cannotMovePiecesPlayerDoesntOwn ].
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 21:04:54' prior: 50880516!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	piecesX remove: aOriginPosition ifAbsent:[^Error signal: self class cannotMovePiecesPlayerDoesntOwn ].
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:05:00'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 21:05:01'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:05:01'!
FAILURE!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:05:01'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 21:06:27' prior: 50880542!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 21:06:34'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:06:34'!
FAILURE!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:06:34'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 21:07:09' prior: 50880131!
test22PlayerXCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].

	self should: [partida moveXFrom: 0@0 To: 0@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 21:07:11'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:07:11'!
FAILURE!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:07:11'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 21:07:26' prior: 50880750!
test22PlayerXCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].

	self should: [partida moveXFrom: 0@0 To: 0@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:07:28'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 21:07:53'!
test23PlayerOCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].

	self should: [partida moveXFrom: 0@0 To: 0@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 21:08:32' prior: 50880957!
test23PlayerOCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida putXAt: 2@1.
	
	self should: [partida moveOFrom: 0@0 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].

	self should: [partida moveXFrom: 0@0 To: 0@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 21:08:45' prior: 50880983!
test23PlayerOCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida moveXFrom: 2@0 To: 2@1.
	
	self should: [partida moveOFrom: 0@0 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].

	self should: [partida moveXFrom: 0@0 To: 0@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 21:09:35' prior: 50881010!
test23PlayerOCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida moveXFrom: 2@0 To: 2@1.
	
	self should: [partida moveOFrom: 1@0 To: 0@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].

	self should: [partida moveOFrom: 1@0 To: 1@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 21:09:55'!
PASSED!

----SNAPSHOT----(31 October 2020 21:10:01) CuisUniversity-4383.image priorSource: 17550399!

----SNAPSHOT----(31 October 2020 21:10:48) CuisUniversity-4383.image priorSource: 17583759!

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:11:50'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:16:03'!
test24PlayerXCanOnlyMoveToNeighbour
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].

	self should: [partida moveXFrom: 0@0 To: 0@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:17:23' prior: 50881229!
test24PlayerXCanOnlyMoveToNeighbour
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceMoreThanOneSpace.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 23:17:49'!
cannotMovePieceMoreThanOneSpace
	^'Cannot move piece more than one space'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:18:03'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:18:04'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:18:04'!
FAILURE!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:18:04'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:20:19' prior: 50880647!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:20:30'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:20:56'!
test25PlayerOCanOnlyMoveToNeighbour
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida moveXFrom: 2@0 To: 2@1.
	
	self should: [partida moveOFrom: 1@0 To: 0@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].

	self should: [partida moveOFrom: 1@0 To: 1@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:21:40' prior: 50881475!
test25PlayerOCanOnlyMoveToNeighbour
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida moveXFrom: 2@0 To: 2@1.
	
	self should: [partida moveOFrom: 1@0 To: 2@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceMoreThanOneSpace .
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:21:47'!
FAILURE!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:21:47'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:22:24' prior: 50880493!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:22:28'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:23:25'!
test27PlayerOCannotMoveByInvalidDiagonal
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida moveXFrom: 2@0 To: 2@1.
	
	self should: [partida moveOFrom: 1@0 To: 2@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceMoreThanOneSpace .
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:27:43' prior: 50881724!
test27PlayerOCannotMoveByInvalidDiagonal
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 0@1.
	partida putXAt: 1@1.
	partida putOAt: 2@1.
	partida putXAt: 0@2.
	partida putOAt: 1@0.
	partida moveXFrom: 1@1 To: 2@0.
	
	self should: [partida moveOFrom: 2@1 To: 1@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceByInvalidDiagonal .
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 10/31/2020 23:28:04'!
cannotMovePieceByInvalidDiagonal
	^'Cannot move piece by invalid diagonal'.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:28:17'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:28:17'!
FAILURE!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:28:17'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:31:25' prior: 50881611!
moveOFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ #(1@0 0@1 1@2 2@1).
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:31:54'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:31:54'!
FAILURE!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:31:54'!
FAILURE!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:32:09'!
FAILURE!

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:33:25'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:33:25'!
FAILURE!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:33:25'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:35:15' prior: 50881861!
moveOFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ #((1@0) (0@1) (1@2) (2@1)).
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:35:18'!
FAILURE!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:35:18'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:36:47' prior: 50882088!
moveOFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:36:51'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:37:17'!
test26PlayerXCannotMoveByInvalidDiagonal
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceMoreThanOneSpace.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:37:32' prior: 50882345!
test26PlayerXCannotMoveByInvalidDiagonal
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceByInvalidDiagonal.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 10/31/2020 23:38:46' prior: 50882363!
test26PlayerXCannotMoveByInvalidDiagonal
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@2.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@1 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceByInvalidDiagonal.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:38:55'!
FAILURE!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:38:55'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:39:11' prior: 50881365!
moveXFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:39:26' prior: 50882496!
moveXFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:39:30'!
PASSED!

----SNAPSHOT----(31 October 2020 23:42:41) CuisUniversity-4383.image priorSource: 17583852!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:45:59' prior: 50882528!
moveXFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:46:03' prior: 50882218!
moveOFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:46:19' prior: 50882700!
moveOFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:46:31' prior: 50882662!
moveXFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:47:20'!
xxx: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:48:35' prior: 50882813!
xxx: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions|
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:48:37' prior: 50882851!
xxx: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:50:50'!
checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !

!methodRemoval: TerniLapilli #xxx:To: stamp: 'EMI 10/31/2020 23:50:50'!
xxx: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	(aOriginPosition eightNeighbors includes: aDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: aDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:51:09' prior: 50882889!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	(aOriginPosition eightNeighbors includes: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:51:45' prior: 50882776!
moveXFrom: aOriginPosition To: aDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:51:53' prior: 50882947!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:52:14' prior: 50882738!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:52:17'!
PASSED!

----SNAPSHOT----(31 October 2020 23:52:21) CuisUniversity-4383.image priorSource: 17632241!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:53:42' prior: 50882977!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:54:01' prior: 50883125!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	((piecesO includes: aDestinationPosition ) or: [piecesX includes: aDestinationPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
	
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:54:54'!
isPositionEmpty: aPosition
	((piecesO includes: aPosition ) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotMovePieceToOccupiedPosition ].
! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:55:56' prior: 50883003!
moveOFrom: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:56:11' prior: 50883151!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	
	self isPositionEmpty: aDestinationPosition.
	
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:56:14' prior: 50883207!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:56:22'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:57:28' prior: 50883229!
moveXFrom: aOriginPosition To: aDestinationPosition
	piecesX size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesX includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesX remove: aOriginPosition.
	piecesX add: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:57:37' prior: 50879455!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:57:41' prior: 50879480!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:58:08' prior: 50883386!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:58:28' prior: 50883405!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:58:38' prior: 50883367!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:58:41' prior: 50883441!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:58:45'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:58:45'!
FAILURE!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:58:45'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:58:38' prior: 50883457!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:58:41' prior: 50883566!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:58:38' prior: 50883582!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:57:37' prior: 50883598!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 10/31/2020 23:57:41' prior: 50883425!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlacePieceOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 10/31/2020 23:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:01:29'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:01:30'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:02:29'!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	piecesO size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(piecesO includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	piecesO remove: aOriginPosition.
	piecesO add: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:02:45' prior: 50883837!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	aPiecesCollection size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:03:17' prior: 50883185!
moveOFrom: aOriginPosition To: aDestinationPosition
	self movePieceOf: piecesO From: aOriginPosition To: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:03:29' prior: 50883345!
moveXFrom: aOriginPosition To: aDestinationPosition
	self movePieceOf: piecesX From: aOriginPosition To: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:03:34'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:04:51'!
hasEnoughPiecesToMove: aPiecesCollection
	aPiecesCollection size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:05:09' prior: 50883860!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	self hasEnoughPiecesToMove: aPiecesCollection.
	
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:06:36' prior: 50884001!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	self hasEnoughPiecesToMove: aPiecesCollection.
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotMovePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 11/1/2020 00:09:33'!
cannotPlayOutOfTurn
	^'Cannot place piece out of turn'.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 00:09:33' prior: 50883614!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 00:09:33' prior: 50883633!
putOAt: aPosition
	piecesO size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !

!methodRemoval: TerniLapilli class #cannotPlacePieceOutOfTurn stamp: 'EMI 11/1/2020 00:09:33'!
cannotPlacePieceOutOfTurn
	^'Cannot place piece out of turn'.!

!methodRemoval: TerniLapilli class #cannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:10:53'!
cannotMovePieceToOccupiedPosition
	^'Cannot move piece to an occupied position'.!

!methodRemoval: TerniLapilli class #cannotMovePiecesOutsideBoard stamp: 'EMI 11/1/2020 00:11:01'!
cannotMovePiecesOutsideBoard
	^'Cannot move piece outside board'.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:11:36' prior: 50881037!
test23PlayerOCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida moveXFrom: 2@0 To: 2@1.
	
	self should: [partida moveOFrom: 1@0 To: 0@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceToOccupiedPosition.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].

	self should: [partida moveOFrom: 1@0 To: 1@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition .
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:11:51' prior: 50884101!
test23PlayerOCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	partida moveXFrom: 2@0 To: 2@1.
	
	self should: [partida moveOFrom: 1@0 To: 0@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition .
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].

	self should: [partida moveOFrom: 1@0 To: 1@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition .
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:12:10' prior: 50880856!
test22PlayerXCannotMovePieceToOccupiedPosition
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].

	self should: [partida moveXFrom: 0@0 To: 0@1] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePieceInOccupiedPosition.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:12:30' prior: 50879641!
test20PlayersCannotMovePieceOutsideBoard
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@0 To: -1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	partida moveXFrom: 2@0 To: 2@1.

	self should: [partida moveOFrom: (1@0) To: (1@-1)] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlacePiecesOutsideBoard.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:12:33'!
ERROR!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:12:33'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:12:33'!
FAILURE!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:12:33'!
FAILURE!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:12:33'!
FAILURE!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:12:33'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:13:03' prior: 50882927!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	(aOriginPosition eightNeighbors includes: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:13:18' prior: 50884022!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	self hasEnoughPiecesToMove: aPiecesCollection.
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:14:12' prior: 50883176!
isPositionEmpty: aPosition
	((piecesO includes: aPosition ) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:14:37'!
ERROR!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:14:37'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:14:37'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:14:58' prior: 50878191!
test13PlayerOCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	self should: [partida putOAt: 0@0.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlayOutOfTurn.
		self assert: partida countPiecesPlayed = 2.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:15:18' prior: 50878308!
test14PlayerXCannotPutPieceOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 1@1.
	partida putOAt: 2@2.
	partida putXAt: 0@0.
	self should: [partida putXAt: 0@1.] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlayOutOfTurn .
		self assert: partida countPiecesPlayed = 3.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:15:30'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:15:30'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:15:30'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:15:30'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:15:30'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:15:30'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:15:30'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:15:31'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:16:14' prior: 50882381!
test26PlayerXCannotMoveByInvalidDiagonal
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@2.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveOFrom: 0@1 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlayOutOfTurn .
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:16:20' prior: 50884568!
test26PlayerXCannotMoveByInvalidDiagonal
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@2.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@1 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceByInvalidDiagonal.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:16:40'!
test28PlayerOCannotMoveOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@2.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveXFrom: 0@1 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceByInvalidDiagonal.
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:16:53' prior: 50884604!
test28PlayerOCannotMoveOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@2.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveOFrom: 0@1 To: 1@0 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlayOutOfTurn .
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:17:28' prior: 50884622!
test28PlayerOCannotMoveOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@2.
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	partida putXAt: 2@0.
	partida putOAt: 0@2.
	
	self should: [partida moveOFrom: 1@2 To: 2@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlayOutOfTurn .
		self assert: partida isPlayingX.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:18:07'!
test29PlayerXCannotMoveOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 0@1.
	partida putXAt: 1@1.
	partida putOAt: 2@1.
	partida putXAt: 0@2.
	partida putOAt: 1@0.
	partida moveXFrom: 1@1 To: 2@0.
	
	self should: [partida moveOFrom: 2@1 To: 1@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotMovePieceByInvalidDiagonal .
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:18:47' prior: 50884656!
test29PlayerXCannotMoveOutOfTurn
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 0@1.
	partida putXAt: 1@1.
	partida putOAt: 2@1.
	partida putXAt: 0@2.
	partida putOAt: 1@0.
	partida moveXFrom: 1@1 To: 2@0.
	
	self should: [partida moveXFrom: 2@0 To: 1@1 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlayOutOfTurn.
		self assert: partida isPlayingO.
		self deny: partida isOver.
		].
	
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:19:06'!
FAILURE!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:19:06'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:19:26' prior: 50883883!
moveOFrom: aOriginPosition To: aDestinationPosition
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	self movePieceOf: piecesO From: aOriginPosition To: aDestinationPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:19:42' prior: 50883892!
moveXFrom: aOriginPosition To: aDestinationPosition
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	self movePieceOf: piecesX From: aOriginPosition To: aDestinationPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:19:45'!
PASSED!

----SNAPSHOT----(1 November 2020 00:19:52) CuisUniversity-4383.image priorSource: 17647067!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:21:13' prior: 50884048!
putXAt: aPosition
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:21:32'!
xxx: aPiecesCollection
	piecesX size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:21:42' prior: 50884935!
xxx: aPiecesCollection
	aPiecesCollection size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:22:52'!
hasRemainingPiecesToPlace: aPiecesCollection
	aPiecesCollection size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].! !

!methodRemoval: TerniLapilli #hasRemainingPiecesToPlace: stamp: 'EMI 11/1/2020 00:22:58'!
hasRemainingPiecesToPlace: aPiecesCollection
	aPiecesCollection size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:23:22' prior: 50884942!
xxx: aPiecesCollection
	aPiecesCollection size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:23:37'!
hasRemainingPiecesToPlace: aPiecesCollection
	aPiecesCollection size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].! !

!methodRemoval: TerniLapilli #xxx: stamp: 'EMI 11/1/2020 00:23:37'!
xxx: aPiecesCollection
	aPiecesCollection size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:24:11' prior: 50884067!
putOAt: aPosition
	self hasRemainingPiecesToPlace: piecesO.
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:24:24' prior: 50884917!
putXAt: aPosition
	self hasRemainingPiecesToPlace: piecesX.

	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:24:28'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:24:57' prior: 50885002!
putXAt: aPosition
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	self hasRemainingPiecesToPlace: piecesX.

	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:25:08' prior: 50884985!
putOAt: aPosition
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	self hasRemainingPiecesToPlace: piecesO.

	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	((piecesO includes: aPosition) or: [piecesX includes: aPosition ]) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:25:51' prior: 50885135!
putOAt: aPosition
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	self hasRemainingPiecesToPlace: piecesO.

	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	piecesO add: aPosition.
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:26:07' prior: 50885118!
putXAt: aPosition
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	self hasRemainingPiecesToPlace: piecesX.

	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	piecesX add: aPosition.
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:26:22'!
FAILURE!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:26:22'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:26:22'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 00:29:10' prior: 50878433!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	
	partida moveXFrom: 0@1 To: 0@2.
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:29:14'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:30:25' prior: 50885152!
putOAt: aPosition
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	
	self hasRemainingPiecesToPlace: piecesO.
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	piecesO add: aPosition.
	
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:30:35' prior: 50885166!
putXAt: aPosition
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	
	self hasRemainingPiecesToPlace: piecesX.
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	piecesX add: aPosition.
	
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:31:11'!
put: aPosition into: aPiecesCollection
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	
	self hasRemainingPiecesToPlace: piecesX.
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	piecesX add: aPosition.
	
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:31:37' prior: 50885434!
put: aPosition into: aPiecesCollection
	self hasRemainingPiecesToPlace: aPiecesCollection .
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	aPiecesCollection add: aPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:32:08' prior: 50885407!
putOAt: aPosition
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	
	self put: aPosition into: piecesO.
	
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:32:30' prior: 50885421!
putXAt: aPosition
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	
	self put: aPosition into: piecesX.
	
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:32:34'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:33:20' prior: 50884804!
moveXFrom: aOriginPosition To: aDestinationPosition
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	
	self movePieceOf: piecesX From: aOriginPosition To: aDestinationPosition.
	
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:33:25' prior: 50884793!
moveOFrom: aOriginPosition To: aDestinationPosition
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	
	self movePieceOf: piecesO From: aOriginPosition To: aDestinationPosition.
	
	isXTurn _ true.
	self checkIfPlayerOWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:40:11'!
doPlayerAction: aBlock
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	
	aBlock value.
	
	isXTurn _ false.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:40:33'!
doPlayerXAction: aBlock
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	
	aBlock value.
	
	isXTurn _ false.
	self checkIfPlayerXWon.! !

!methodRemoval: TerniLapilli #doPlayerAction: stamp: 'EMI 11/1/2020 00:40:33'!
doPlayerAction: aBlock
	isXTurn ifFalse: [^Error signal: self class cannotPlayOutOfTurn ].
	
	aBlock value.
	
	isXTurn _ false.
	self checkIfPlayerXWon.!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:41:13' prior: 50885470!
putXAt: aPosition
	self doPlayerXAction:[self put: aPosition into: piecesX].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:41:42' prior: 50885578!
moveXFrom: aOriginPosition To: aDestinationPosition
	self doPlayerXAction: [ self movePieceOf: piecesX From: aOriginPosition To: aDestinationPosition].! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:41:46'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:43:23'!
doPlayerOAction: aBlock
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	
	aBlock value.
	
	isXTurn _ true.
	self checkIfPlayerOWon.

	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:43:40' prior: 50885461!
putOAt: aPosition
	self doPlayerOAction: [self put: aPosition into: piecesO].


	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 00:43:58' prior: 50885589!
moveOFrom: aOriginPosition To: aDestinationPosition
	self doPlayerOAction: [self movePieceOf: piecesO From: aOriginPosition To: aDestinationPosition].
! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 00:44:03'!
PASSED!

----SNAPSHOT----(1 November 2020 00:44:15) CuisUniversity-4383.image priorSource: 17704402!

----SNAPSHOT----(1 November 2020 00:44:33) CuisUniversity-4383.image priorSource: 17734588!

----QUIT----(1 November 2020 00:44:46) CuisUniversity-4383.image priorSource: 17734681!

----STARTUP---- (1 November 2020 12:22:38) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!


Object subclass: #TerniLapilliState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:28:20'!
Object subclass: #TerniLapilliState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Object subclass: #TerniLapilliGameOverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliGameOverState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:28:50'!
Object subclass: #TerniLapilliGameOverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliState subclass: #TerniLapilliGameOverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliGameOverState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:29:01'!
TerniLapilliState subclass: #TerniLapilliGameOverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliState subclass: #TerniLapilliPlayerXPutPieceState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayerXPutPieceState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:30:44'!
TerniLapilliState subclass: #TerniLapilliPlayerXPutPieceState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliState subclass: #TerniLapilliPlayerXMovePieceState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayerXMovePieceState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:30:50'!
TerniLapilliState subclass: #TerniLapilliPlayerXMovePieceState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliState subclass: #TerniLapilliPlayerOMovePieceState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayerOMovePieceState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:30:55'!
TerniLapilliState subclass: #TerniLapilliPlayerOMovePieceState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliState subclass: #TerniLapilliPlayerOPutPieceState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayerOPutPieceState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:31:03'!
TerniLapilliState subclass: #TerniLapilliPlayerOPutPieceState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:32:13'!
isOver
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:32:19'!
isPlayingO
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:32:23'!
isPlayingX
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:32:33'!
hasPlayerXWon
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:32:36'!
hasPlayerOWon
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:33:16'!
countPiecesPlayed
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 12:34:59'!
putXAt: aPosition
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 12:35:01'!
putOAt: aPosition
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 12:35:24'!
moveXFrom: aOriginPosition To: aDestinationPosition
	^self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 12:35:27'!
moveOFrom: aOriginPosition To: aDestinationPosition
	^self subclassResponsibility.! !
!TerniLapilliGameOverState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:37:05' overrides: 50885960!
isOver
	^true.! !
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:37:16' overrides: 50885969!
isPlayingX
	^false.! !
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:37:20' overrides: 50885964!
isPlayingO
	^false.! !
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:37:48' overrides: 50885974!
hasPlayerXWon
	^true.! !

!classDefinition: #TerniLapilliGameOverState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:38:24'!
TerniLapilliState subclass: #TerniLapilliGameOverState
	instanceVariableNames: 'xWon'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:38:22' prior: 50886025 overrides: 50885974!
hasPlayerXWon
	^xWon.! !
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:38:34' overrides: 50885979!
hasPlayerOWon
	^xWon not.! !
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:39:45' overrides: 50885988!
putXAt: aPosition
	^Error signal: super class cannotPlayWhenGameOver.! !
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:39:50' overrides: 50885993!
putOAt: aPosition
	^Error signal: super class cannotPlayWhenGameOver.! !
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:40:12' overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	^Error signal: super class cannotPlayWhenGameOver.! !
!TerniLapilliGameOverState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:40:16' overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	^Error signal: super class cannotPlayWhenGameOver.! !
!TerniLapilliState class methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:41:11'!
cannotPlayWhenGameOver
	^'Cannot put piece o move piece when game is over'.! !
!TerniLapilliGameOverState class methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:41:54'!
hasXWon: aBoolean! !
!TerniLapilliGameOverState class methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:42:19' prior: 50886080!
hasXWon: aBoolean
	! !
!TerniLapilliGameOverState class methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:43:16' prior: 50886085!
hasXWon: xIsWinnerBoolean
	^self new initialize: xIsWinnerBoolean.
	! !
!TerniLapilliGameOverState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:43:40'!
initialize: xIsWinnerBoolean
	xWon _ xIsWinnerBoolean.! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:44:30' overrides: 50885960!
isOver
	^false.! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:44:40' overrides: 50885969!
isPlayingX
	^true.! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:44:45' overrides: 50885964!
isPlayingO
	^false.! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:44:53' overrides: 50885974!
hasPlayerXWon
	^false.! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:44:57' overrides: 50885979!
hasPlayerOWon
	^false.! !

!methodRemoval: TerniLapilliState #countPiecesPlayed stamp: 'EMI 11/1/2020 12:45:57'!
countPiecesPlayed
	^self subclassResponsibility.!
!TerniLapilliPlayerXPutPieceState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:46:32' overrides: 50885988!
putXAt: aPosition! !

Object subclass: #TerniLapilliState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliState category: 'TerniLapilli' stamp: 'EMI 11/1/2020 12:47:33'!
Object subclass: #TerniLapilliState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliGameOverState class methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:48:22'!
ofGame: ATerniLapilliGame hasXWon: xIsWinnerBoolean
	^self new initialize: xIsWinnerBoolean.
	! !
!TerniLapilliGameOverState class methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:48:47' prior: 50886146!
ofGame: ATerniLapilliGame hasXWon: xIsWinnerBoolean
	^self new initialize: xIsWinnerBoolean hasXWon: xIsWinnerBoolean.
	! !
!TerniLapilliGameOverState class methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:49:12' prior: 50886153!
ofGame: aTerniLapilliGame hasXWon: xIsWinnerBoolean
	^self new initialize: aTerniLapilliGame hasXWon: xIsWinnerBoolean.
	! !

!methodRemoval: TerniLapilliGameOverState class #hasXWon: stamp: 'EMI 11/1/2020 12:49:16'!
hasXWon: xIsWinnerBoolean
	^self new initialize: xIsWinnerBoolean.
	!
!TerniLapilliGameOverState methodsFor: 'initialize' stamp: 'EMI 11/1/2020 12:49:56'!
initialize: xIsWinnerBoolean xIsWinnerBoolean: hasXWon 
	xWon _ xIsWinnerBoolean.! !

!methodRemoval: TerniLapilliGameOverState #initialize: stamp: 'EMI 11/1/2020 12:49:56'!
initialize: xIsWinnerBoolean
	xWon _ xIsWinnerBoolean.!
!TerniLapilliGameOverState methodsFor: 'initialize' stamp: 'EMI 11/1/2020 12:50:35' prior: 50886173!
initialize: aTerniLapilliGame xIsWinnerBoolean: xIsWinnerBoolean 
	game _ aTerniLapilliGame.
	xWon _ xIsWinnerBoolean.! !
!TerniLapilliGameOverState methodsFor: 'initialize' stamp: 'EMI 11/1/2020 12:50:47'!
initialize: aTerniLapilliGame xIsWinner: xIsWinnerBoolean 
	game _ aTerniLapilliGame.
	xWon _ xIsWinnerBoolean.! !

!methodRemoval: TerniLapilliGameOverState #initialize:xIsWinnerBoolean: stamp: 'EMI 11/1/2020 12:50:47'!
initialize: aTerniLapilliGame xIsWinnerBoolean: xIsWinnerBoolean 
	game _ aTerniLapilliGame.
	xWon _ xIsWinnerBoolean.!
!TerniLapilliGameOverState methodsFor: 'initialize' stamp: 'EMI 11/1/2020 12:51:20'!
initialize: aTerniLapilliGame hasXWon: xIsWinnerBoolean 
	game _ aTerniLapilliGame.
	xWon _ xIsWinnerBoolean.! !

!methodRemoval: TerniLapilliGameOverState #initialize:xIsWinner: stamp: 'EMI 11/1/2020 12:51:20'!
initialize: aTerniLapilliGame xIsWinner: xIsWinnerBoolean 
	game _ aTerniLapilliGame.
	xWon _ xIsWinnerBoolean.!

----SNAPSHOT----(1 November 2020 12:51:29) CuisUniversity-4383.image priorSource: 17734774!
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:51:53' prior: 50886130 overrides: 50885988!
putXAt: aPosition
	game putXAt: aPosition.! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:52:07' overrides: 50885993!
putOAt: aPosition
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:52:42' prior: 50886229 overrides: 50885993!
putOAt: aPosition
	^Error signal: self class cannotPlayOutOfTurn
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:52:50' prior: 50886234 overrides: 50885993!
putOAt: aPosition
	^Error signal: game class cannotPlayOutOfTurn
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:52:56' prior: 50886241 overrides: 50885993!
putOAt: aPosition
	^Error signal: game class cannotPlayOutOfTurn.
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:53:41' overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:53:46' overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:54:10' prior: 50886260 overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	^Error signal: game class cannotPlayOutOfTurn.
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:54:51' prior: 50886254 overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	^Error signal: self class cannotMovePieceBeforePlacingAllPieces 
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:54:53' prior: 50886275 overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	^Error signal: self class cannotMovePieceBeforePlacingAllPieces.
	! !
!TerniLapilliPlayerXPutPieceState class methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:55:40'!
ofGame: aTerniLapilliGame
	^self new initialize: aTerniLapilliGame.! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:56:04'!
initialize: aTerniLapilliGame
	game _ aTerniLapilliGame.! !
!TerniLapilliState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:57:09'!
initialize: aTerniLapilliGame
	game _ aTerniLapilliGame.! !

!methodRemoval: TerniLapilliPlayerXPutPieceState #initialize: stamp: 'EMI 11/1/2020 12:58:02'!
initialize: aTerniLapilliGame
	game _ aTerniLapilliGame.!
!TerniLapilliPlayerOPutPieceState methodsFor: 'nil' stamp: 'EMI 11/1/2020 12:58:34' overrides: 50885960!
isOver
	^false.! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:59:03' overrides: 50885969!
isPlayingX
	^false.! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:59:13' overrides: 50885964!
isPlayingO
	^true.! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:59:23' overrides: 50885974!
hasPlayerXWon
	^false.! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:59:26' overrides: 50885979!
hasPlayerOWon
	^false.! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:59:46' overrides: 50885993!
putOAt: aPosition
	game putOAt: aPosition.! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 12:59:55' overrides: 50885988!
putXAt: aPosition
	! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:00:11' prior: 50886342 overrides: 50885988!
putXAt: aPosition
	^Error signal: game class cannotPlayOutOfTurn.
	! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:00:38' overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	
	! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:00:55' prior: 50886353 overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	^Error signal: self class cannotMovePieceBeforePlacingAllPieces.
	
	! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:00:59' overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	^Error signal: self class cannotMovePieceBeforePlacingAllPieces.
	
	! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:01:10' prior: 50886368 overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	^Error signal: game class cannotPlayOutOfTurn.
	
	! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:01:19' prior: 50886360 overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	^Error signal: game class cannotMovePieceBeforePlacingAllPieces.
	
	! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:01:38' prior: 50886284 overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	^Error signal: game class cannotMovePieceBeforePlacingAllPieces.
	! !
!TerniLapilliPlayerOPutPieceState class methodsFor: 'nil' stamp: 'EMI 11/1/2020 13:02:15'!
ofGame: aTerniLapilliGame
	^self new initialize: aTerniLapilliGame.! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'nil' stamp: 'EMI 11/1/2020 13:02:48' overrides: 50885960!
isOver
	^false! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:02:54' overrides: 50885974!
hasPlayerXWon
	^false! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:02:57' overrides: 50885979!
hasPlayerOWon
	^false! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:03:05' overrides: 50885964!
isPlayingO
	^false! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:03:09' overrides: 50885969!
isPlayingX
	^true! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'nil' stamp: 'EMI 11/1/2020 13:03:28' overrides: 50885988!
putXAt: aPosition
	! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:04:06' prior: 50886431 overrides: 50885988!
putXAt: aPosition
	^Error signal: game class cannotPlaceMoreThan3PiecesError
	! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:04:23' overrides: 50885993!
putOAt: aPosition
	^Error signal: game class cannotPlayOutOfTurn.
	! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:04:57' overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	^Error signal: game class cannotPlayOutOfTurn.
	! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:05:16' overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	game moveXFrom: aOriginPosition To: aDestinationPosition.
	! !
!TerniLapilliPlayerXMovePieceState class methodsFor: 'nil' stamp: 'EMI 11/1/2020 13:05:48'!
ofGame: aTerniLapilliGame
	^self new initialize: aTerniLapilliGame.! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'nil' stamp: 'EMI 11/1/2020 13:06:45' overrides: 50885969!
isPlayingX
	^false! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:06:49' overrides: 50885960!
isOver
	^false! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:06:54' overrides: 50885974!
hasPlayerXWon
	^false! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:06:57' overrides: 50885979!
hasPlayerOWon
	^false! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:07:10' overrides: 50885964!
isPlayingO
	^true! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:07:40' overrides: 50885988!
putXAt: aPosition
	^Error signal: game class cannotPlayOutOfTurn.! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:07:54' overrides: 50885993!
putOAt: aPosition
	^Error signal: game class cannotPlaceMoreThan3PiecesError.! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:08:22' overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	^Error signal: game class cannotPlayOutOfTurn.! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:08:43' overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	game moveOFrom: aOriginPosition To: aDestinationPosition.! !
!TerniLapilliPlayerOMovePieceState class methodsFor: 'nil' stamp: 'EMI 11/1/2020 13:09:06'!
ofGame: aTerniLapilliGame
	^self new initialize: aTerniLapilliGame .! !
!TerniLapilliPlayerOMovePieceState class methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 13:09:07' prior: 50886525!
ofGame: aTerniLapilliGame
	^self new initialize: aTerniLapilliGame.! !

----SNAPSHOT----(1 November 2020 13:09:31) CuisUniversity-4383.image priorSource: 17746148!

----SNAPSHOT----(1 November 2020 13:09:54) CuisUniversity-4383.image priorSource: 17756358!

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn piecesX piecesO gameEnded xIsWinner gameState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 11/1/2020 13:13:42'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXTurn piecesX piecesO gameEnded xIsWinner gameState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 13:14:27' prior: 50877175 overrides: 16896425!
initialize
	isXTurn _ true.
	piecesX _ OrderedCollection new.
	piecesO _ OrderedCollection new.
	gameEnded _ false.
	xIsWinner _ false.
	gameState _ TerniLapilliPlayerXPutPieceState ofGame: self.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 11/1/2020 13:15:07' prior: 50876842!
hasPlayerOWon
	^gameState hasPlayerOWon.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 11/1/2020 13:15:18' prior: 50876837!
hasPlayerXWon
	^gameState hasPlayerXWon.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 11/1/2020 13:15:28' prior: 50876825!
isOver
	^gameState isOver.! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 11/1/2020 13:15:40' prior: 50876076!
isPlayingO
	^gameState isPlayingO .! !
!TerniLapilli methodsFor: 'testing' stamp: 'EMI 11/1/2020 13:15:48' prior: 50876072!
isPlayingX
	^gameState isPlayingX.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:18:10'!
putXWhenPlayerIsXAt: aPosition
	self doPlayerXAction:[self put: aPosition into: piecesX].! !
!TerniLapilliPlayerXPutPieceState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:18:28' prior: 50886223 overrides: 50885988!
putXAt: aPosition
	game putXWhenPlayerIsXAt: aPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:18:47' prior: 50885623!
putXAt: aPosition
	gameState putXAt: aPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:19:18'!
putOWhenPlayerIsOAt: aPosition
	self doPlayerOAction: [self put: aPosition into: piecesO].


	! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:19:36' prior: 50885744!
putOAt: aPosition
	gameState putOAt: aPosition.


	! !
!TerniLapilliPlayerOPutPieceState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:19:50' prior: 50886336 overrides: 50885993!
putOAt: aPosition
	game putOWhenPlayerIsOAt: aPosition.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:20:13'!
moveOWhenPlayerIsOFrom: aOriginPosition To: aDestinationPosition
	self doPlayerOAction: [self movePieceOf: piecesO From: aOriginPosition To: aDestinationPosition].
! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:20:35' prior: 50885750!
moveOFrom: aOriginPosition To: aDestinationPosition
	gameState moveOFrom: aOriginPosition To: aDestinationPosition.
! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:20:48'!
moveXWhenPlayerIsXFrom: aOriginPosition To: aDestinationPosition
	self doPlayerXAction: [ self movePieceOf: piecesX From: aOriginPosition To: aDestinationPosition].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:21:11' prior: 50885629!
moveXFrom: aOriginPosition To: aDestinationPosition
	gameState moveXFrom: aOriginPosition To: aDestinationPosition .! !
!TerniLapilliPlayerXMovePieceState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:21:43' prior: 50886459 overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	game moveXWhenPlayerIsXFrom: aOriginPosition To: aDestinationPosition.
	! !
!TerniLapilliPlayerOMovePieceState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 13:21:56' prior: 50886518 overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	game moveOWhenPlayerIsOFrom: aOriginPosition To: aDestinationPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 13:23:10' prior: 50886589!
putXWhenPlayerIsXAt: aPosition
	self doPlayerXAction:[self put: aPosition into: piecesX].! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 13:23:44' prior: 50885607!
doPlayerXAction: aBlock
	aBlock value.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 13:24:16' prior: 50886672!
putXWhenPlayerIsXAt: aPosition
	self put: aPosition into: piecesX.
	self checkIfPlayerXWon.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 13:24:36' prior: 50886606!
putOWhenPlayerIsOAt: aPosition
	self put: aPosition into: piecesO.
	self checkIfPlayerOWon.


	! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 13:26:12' prior: 50877113!
checkIfPlayerOWon
	xIsWinner _ ((self checkHorizontalLine: piecesO) or: [(self checkVerticalLine: piecesO) or:[self checkDiagonalLine: piecesO]]) not.
	(xIsWinner not) ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false].! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 13:26:28' prior: 50877104!
checkIfPlayerXWon
	xIsWinner _ (self checkHorizontalLine: piecesX) or: [(self checkVerticalLine: piecesX) or:[self checkDiagonalLine: piecesX]].
	xIsWinner ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: true].! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 13:27:36' prior: 50886683!
putXWhenPlayerIsXAt: aPosition
	self put: aPosition into: piecesX.
	self checkIfPlayerXWon.! !

----SNAPSHOT----(1 November 2020 13:28:27) CuisUniversity-4383.image priorSource: 17756451!
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:45:33' prior: 50886706!
checkIfPlayerXWon
	xIsWinner _ (self checkHorizontalLine: piecesX) or: [(self checkVerticalLine: piecesX) or:[self checkDiagonalLine: piecesX]].
	^xIsWinner.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:45:48' prior: 50886695!
checkIfPlayerOWon
	xIsWinner _ ((self checkHorizontalLine: piecesO) or: [(self checkVerticalLine: piecesO) or:[self checkDiagonalLine: piecesO]]) not.
	^xIsWinner not.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:47:21' prior: 50886716!
putXWhenPlayerIsXAt: aPosition
	self put: aPosition into: piecesX.
	self checkIfPlayerXWon 
	ifTrue:[gameState _ TerniLapilliGameOverState ofGame: self hasXWon: true]
	ifFalse:[gameState _ TerniLapilliPlayerOPutPieceState ofGame: self].! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:48:33' prior: 50886689!
putOWhenPlayerIsOAt: aPosition
	self put: aPosition into: piecesO.
	self checkIfPlayerOWon ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false].


	! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:49:22' prior: 50886733!
checkIfPlayerOWon
	^((self checkHorizontalLine: piecesO) or: [(self checkVerticalLine: piecesO) or:[self checkDiagonalLine: piecesO]]).! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:49:29' prior: 50886725!
checkIfPlayerXWon
	^(self checkHorizontalLine: piecesX) or: [(self checkVerticalLine: piecesX) or:[self checkDiagonalLine: piecesX]].! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:50:10'!
checkIfPlayerWon: aPlayerPiecesCollection
	^((self checkHorizontalLine: aPlayerPiecesCollection) or: [(self checkVerticalLine: aPlayerPiecesCollection) or:[self checkDiagonalLine: aPlayerPiecesCollection]]).! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:50:28' prior: 50886768!
checkIfPlayerXWon
	^self checkIfPlayerWon: piecesX.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:50:37' prior: 50886761!
checkIfPlayerOWon
	^self checkIfPlayerWon: piecesO.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:51:31' prior: 50886752!
putOWhenPlayerIsOAt: aPosition
	self put: aPosition into: piecesO.
	self checkIfPlayerOWon 
	ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false]
	ifFalse: [].


	! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:52:21' prior: 50886795!
putOWhenPlayerIsOAt: aPosition
	self put: aPosition into: piecesO.
	self checkIfPlayerOWon 
	ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false]
	ifFalse: [
		piecesX size = 3 
		ifTrue:[gameState _ TerniLapilliPlayerXMovePieceState ofGame: self]
		].


	! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:52:34' prior: 50886804!
putOWhenPlayerIsOAt: aPosition
	self put: aPosition into: piecesO.
	self checkIfPlayerOWon 
	ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false]
	ifFalse: [
		piecesX size = 3 
		ifTrue:[gameState _ TerniLapilliPlayerXMovePieceState ofGame: self]
		ifFalse:[gameState _ TerniLapilliPlayerXPutPieceState ofGame: self]
		].


	! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:52:38' prior: 50886816!
putOWhenPlayerIsOAt: aPosition
	self put: aPosition into: piecesO.
	self checkIfPlayerOWon 
	ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false]
	ifFalse: [
		piecesX size = 3 
		ifTrue:[gameState _ TerniLapilliPlayerXMovePieceState ofGame: self]
		ifFalse:[gameState _ TerniLapilliPlayerXPutPieceState ofGame: self]
	].


	! !

!methodRemoval: TerniLapilli #doPlayerOAction: stamp: 'EMI 11/1/2020 14:53:34'!
doPlayerOAction: aBlock
	isXTurn ifTrue: [^Error signal: self class cannotPlayOutOfTurn ].
	
	aBlock value.
	
	isXTurn _ true.
	self checkIfPlayerOWon.

	!

!methodRemoval: TerniLapilli #doPlayerXAction: stamp: 'EMI 11/1/2020 14:53:39'!
doPlayerXAction: aBlock
	aBlock value.
	self checkIfPlayerXWon.!
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:54:47' prior: 50886639!
moveXWhenPlayerIsXFrom: aOriginPosition To: aDestinationPosition
	self movePieceOf: piecesX From: aOriginPosition To: aDestinationPosition.
	self checkIfPlayerXWon 
	ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: true.]
	ifFalse: [gameState _ TerniLapilliPlayerOMovePieceState ofGame: self.]! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:55:23' prior: 50886623!
moveOWhenPlayerIsOFrom: aOriginPosition To: aDestinationPosition
	self movePieceOf: piecesO From: aOriginPosition To: aDestinationPosition.
	self checkIfPlayerOWon 
	ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false.]
	ifFalse: [gameState _ TerniLapilliPlayerXMovePieceState ofGame: self.]
! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:56:11' prior: 50885449!
put: aPosition into: aPiecesCollection
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	aPiecesCollection add: aPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:56:15' prior: 50886882!
put: aPosition into: aPiecesCollection
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	self isPositionEmpty: aPosition.
	
	aPiecesCollection add: aPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:56:31' prior: 50884321!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'EMI 11/1/2020 14:57:14' prior: 50886558 overrides: 16896425!
initialize
	piecesX _ OrderedCollection new.
	piecesO _ OrderedCollection new.
	gameState _ TerniLapilliPlayerXPutPieceState ofGame: self.! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'piecesX piecesO gameState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'EMI 11/1/2020 14:57:21'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'piecesX piecesO gameState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

----SNAPSHOT----(1 November 2020 14:57:41) CuisUniversity-4383.image priorSource: 17762270!

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 14:57:47'!
PASSED!

partida _ TerniLapilli newGame.
partida putXAt: 0@0.
partida putOAt: 1@0.

partida putXAt: 0@1.
partida putOAt: 1@1.

partida putXAt: 2@0.
partida putOAt: 1@2.!

partida _ TerniLapilli newGame.
partida putXAt: 0@0.
partida putOAt: 1@0.

partida putXAt: 0@1.
partida putOAt: 1@1.

partida putXAt: 2@0.
partida putOAt: 1@2.

partida moveXFrom: 0@1 To: 0@2.!
!TerniLapilliState class methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 15:01:56' prior: 50886074!
cannotPlayWhenGameOver
	^'Cannot put piece or move piece when game is over'.! !

	^'Cannot put piece or move piece when game is over'.!
!TerniLapilli class methodsFor: 'error messages' stamp: 'EMI 11/1/2020 15:02:34'!
cannotPlayWhenGameOver
	^'Cannot put piece or move piece when game is over'.! !

!methodRemoval: TerniLapilliState class #cannotPlayWhenGameOver stamp: 'EMI 11/1/2020 15:02:53'!
cannotPlayWhenGameOver
	^'Cannot put piece or move piece when game is over'.!
!TerniLapilliGameOverState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 15:03:01' prior: 50886068 overrides: 50886004!
moveOFrom: aOriginPosition To: aDestinationPosition
	^Error signal: game class cannotPlayWhenGameOver.! !
!TerniLapilliGameOverState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 15:03:06' prior: 50886061 overrides: 50885998!
moveXFrom: aOriginPosition To: aDestinationPosition
	^Error signal: game class cannotPlayWhenGameOver.! !
!TerniLapilliGameOverState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 15:03:10' prior: 50886055 overrides: 50885993!
putOAt: aPosition
	^Error signal: game class cannotPlayWhenGameOver.! !
!TerniLapilliGameOverState methodsFor: 'player actions' stamp: 'EMI 11/1/2020 15:03:16' prior: 50886049 overrides: 50885988!
putXAt: aPosition
	^Error signal: game class cannotPlayWhenGameOver.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:04:28'!
test30PlayersCannotPlayAfterGameIsOver
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerOWon.
	self deny: partida hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:07:07' prior: 50887103!
test30PlayersCannotPlayAfterGameIsOver
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 1@2.
	
	self assert: partida isOver.
	self assert: partida hasPlayerOWon.
	self deny: partida hasPlayerXWon.
	
	self should: [partida moveXFrom: 0@1 To: 0@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlayWhenGameOver.
		self assert: partida isOver.
		self assert: partida hasPlayerOWon.
		self deny: partida hasPlayerXWon.
		].
	
	self should: [partida moveOFrom: 1@2 To: 2@2 ] 
	raise: Error 
	withExceptionDo: [:anError | 
		self assert: anError messageText = TerniLapilli cannotPlayWhenGameOver.
		self assert: partida isOver.
		self assert: partida hasPlayerOWon.
		self deny: partida hasPlayerXWon.
		].
	! !

!testRun: #TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/1/2020 15:07:22'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:07:57'!
test01PlayerXPlaysFirst
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 0.! !

!methodRemoval: TerniLapilliTest #test01TerniLapilliXPlaysFirst stamp: 'EMI 11/1/2020 15:07:57'!
test01TerniLapilliXPlaysFirst
	| partida |
	partida _ TerniLapilli newGame.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 0.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:08:10'!
test02PlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	self assert: partida isPlayingO.
	self deny: partida isPlayingX.
	self assert: partida countPiecesPlayed equals: 1.
! !

!methodRemoval: TerniLapilliTest #test02TerniLapilliPlayerOPlaysAfterX stamp: 'EMI 11/1/2020 15:08:10'!
test02TerniLapilliPlayerOPlaysAfterX
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	self assert: partida isPlayingO.
	self deny: partida isPlayingX.
	self assert: partida countPiecesPlayed equals: 1.
!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:08:20'!
test03PlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 2.
! !

!methodRemoval: TerniLapilliTest #test03TerniLapilliPlayerXPlaysAfterO stamp: 'EMI 11/1/2020 15:08:20'!
test03TerniLapilliPlayerXPlaysAfterO
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	self assert: partida isPlayingX.
	self deny: partida isPlayingO.
	self assert: partida countPiecesPlayed equals: 2.
!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:08:43'!
test04NewGameCannotBeOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
! !

!methodRemoval: TerniLapilliTest #test04TerniLapilliNewGameNotOver stamp: 'EMI 11/1/2020 15:08:43'!
test04TerniLapilliNewGameNotOver
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida isOver.
!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:08:52'!
test05NewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.! !

!methodRemoval: TerniLapilliTest #test05TerniLapilliNewGameHasNoWinner stamp: 'EMI 11/1/2020 15:08:52'!
test05TerniLapilliNewGameHasNoWinner
	| partida |
	partida _ TerniLapilli newGame.
	self deny: partida hasPlayerXWon.
	self deny: partida hasPlayerOWon.!

----SNAPSHOT----(1 November 2020 15:09:01) CuisUniversity-4383.image priorSource: 17769313!

!testRun: #TerniLapilliTest #test01PlayerXPlaysFirst stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlaysAfterX stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlaysAfterO stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test04NewGameCannotBeOver stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test05NewGameHasNoWinner stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/1/2020 15:09:16'!
PASSED!

!methodRemoval: TerniLapilli #hasRemainingPiecesToPlace: stamp: 'EMI 11/1/2020 15:10:45'!
hasRemainingPiecesToPlace: aPiecesCollection
	aPiecesCollection size = 3 ifTrue: [^Error signal: self class cannotPlaceMoreThan3PiecesError ].!

!methodRemoval: TerniLapilli #hasEnoughPiecesToMove: stamp: 'EMI 11/1/2020 15:10:48'!
hasEnoughPiecesToMove: aPiecesCollection
	aPiecesCollection size < 3 ifTrue: [^Error signal: self class cannotMovePieceBeforePlacingAllPieces ].!

----SNAPSHOT----(1 November 2020 15:10:56) CuisUniversity-4383.image priorSource: 17781970!

!testRun: #TerniLapilliTest #test01PlayerXPlaysFirst stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlaysAfterX stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlaysAfterO stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test04NewGameCannotBeOver stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test05NewGameHasNoWinner stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:11:00'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:11:00'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:11:00'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:11:00'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/1/2020 15:11:00'!
PASSED!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:16:07' prior: 50877371!
checkDiagonalLine: aPiecesCollection
	| diagonalInversa diagonal |
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	diagonal  _ (aPiecesCollection includes: (2@2)) and: [aPiecesCollection includes: (0@0)].
	diagonalInversa _ (aPiecesCollection includes: (2@0)) and: [aPiecesCollection includes:  (0@2)].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:19:43'!
checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition

	^ aOriginPosition eightNeighbors includes: anEmptyDestinationPosition! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:19:43' prior: 50884301!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	((invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:21:30'!
checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:22:03' prior: 50887583!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).
	
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:22:12' prior: 50887618!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:22:29'!
checkIfMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 15:22:29' prior: 50886902!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition To: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !

!methodRemoval: TerniLapilli #checkIfMoveFrom:isValidTo: stamp: 'EMI 11/1/2020 15:22:29'!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:22:48'!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 15:22:48' prior: 50887670!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	self isPositionEmpty: aDestinationPosition.
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !

!methodRemoval: TerniLapilli #checkIfMoveFrom:To: stamp: 'EMI 11/1/2020 15:22:48'!
checkIfMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:23:04'!
checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 15:23:04' prior: 50887705!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !

!methodRemoval: TerniLapilli #checkIfIsNotInvalidDiagonalMoveFrom:isValidTo: stamp: 'EMI 11/1/2020 15:23:04'!
checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:23:42'!
checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/1/2020 15:23:42' prior: 50887769!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !

!methodRemoval: TerniLapilli #checkIfIsNotInvalidDiagonalMoveFrom:To: stamp: 'EMI 11/1/2020 15:23:42'!
checkIfIsNotInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (1@0) with: (0@1)  with:(1@2) with:(2@1).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:23:52' prior: 50887575!
checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition
	^ aOriginPosition eightNeighbors includes: anEmptyDestinationPosition! !

----SNAPSHOT----(1 November 2020 15:24:09) CuisUniversity-4383.image priorSource: 17785762!

!testRun: #TerniLapilliTest #test01PlayerXPlaysFirst stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlaysAfterX stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlaysAfterO stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test04NewGameCannotBeOver stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test05NewGameHasNoWinner stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/1/2020 15:24:12'!
PASSED!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/1/2020 15:42:06' prior: 50884342!
isPositionEmpty: aPosition
	^((piecesO includes: aPosition ) or: [piecesX includes: aPosition ]).
! !
!TerniLapilli methodsFor: 'player actions - private' stamp: 'EMI 11/1/2020 15:42:29' prior: 50886892!
put: aPosition into: aPiecesCollection
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(self isPositionEmpty: aPosition) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	aPiecesCollection add: aPosition.! !
!TerniLapilli methodsFor: 'player actions - private' stamp: 'EMI 11/1/2020 15:42:49' prior: 50887721!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	(self isPositionEmpty: aDestinationPosition)  ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	self checkIfMoveFrom: aOriginPosition isValidTo: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !

!testRun: #TerniLapilliTest #test01PlayerXPlaysFirst stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlaysAfterX stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlaysAfterO stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test04NewGameCannotBeOver stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test05NewGameHasNoWinner stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/1/2020 15:43:53'!
PASSED!

----SNAPSHOT----(1 November 2020 15:44:18) CuisUniversity-4383.image priorSource: 17798391!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:45:24'!
test06PlayersCannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	
	partida moveXFrom: 0@1 To: 0@2.
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	! !

!methodRemoval: TerniLapilliTest #test06CannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 15:45:24'!
test06CannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	
	partida moveXFrom: 0@1 To: 0@2.
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'EMI 11/1/2020 15:45:42'!
test06PlayersCannotPutMoreThan3Pieces
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	
	partida moveXFrom: 0@1 To: 0@2.
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	! !

!methodRemoval: TerniLapilliTest #test06PlayersCannotPutMoreThan3PiecesPerPlayer stamp: 'EMI 11/1/2020 15:45:42'!
test06PlayersCannotPutMoreThan3PiecesPerPlayer
	| partida |
	partida _ TerniLapilli newGame.
	partida putXAt: 0@0.
	partida putOAt: 1@0.
	
	partida putXAt: 0@1.
	partida putOAt: 1@1.
	
	partida putXAt: 2@0.
	partida putOAt: 2@1.
	
	self should: [partida putXAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	
	partida moveXFrom: 0@1 To: 0@2.
	
	self should: [partida putOAt: 2@2.]
	raise: Error
	withExceptionDo: [:anError | 
		self assert: anError  messageText = TerniLapilli cannotPlaceMoreThan3PiecesError.
		self assert: partida countPiecesPlayed equals: 6.
		].
	!

----SNAPSHOT----(1 November 2020 15:50:14) CuisUniversity-4383.image priorSource: 17806289!

----SNAPSHOT----(1 November 2020 15:52:06) CuisUniversity-4383.image priorSource: 17809637!

partida _ TerniLapilli newGame!

partida putXAt: 1@1. !

partida _ TerniLapilli newGame.
partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1

partida isOver.!

partida _ TerniLapilli newGame.!

partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1!

partida isOver.!

partida isOver.!

partida _ TerniLapilli newGame.
partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1

partida isOver.

partida moveXFrom: 1@1 To: 1@0.
partida moveOFrom: 2@1 To: 2@2.

partida isOver.!

partida _ TerniLapilli newGame.!

partida _ TerniLapilli newGame.
partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1

partida isOver.

partida moveXFrom: 1@1 To: 1@0.
partida moveOFrom: 2@1 To: 2@2.

partida isOver.!

partida _ TerniLapilli newGame.
partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1.

partida isOver.

partida moveXFrom: 1@1 To: 1@0.
partida moveOFrom: 2@1 To: 2@2.

partida isOver.!

partida isOver.!

partida _ TerniLapilli newGame.
partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1.

partida isOver.

partida moveXFrom: 1@1 To: 1@0.
partida moveOFrom: 2@1 To: 2@2.

partida isOver.

partida moveXFrom: 2@0 To: 1@2.
partida moveOFrom: 0@2 To: 1@1.

partida isOver.!

partida _ TerniLapilli newGame.
partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1.

partida isOver.

partida moveXFrom: 1@1 To: 1@0.
partida moveOFrom: 2@1 To: 2@2.

partida isOver.

partida moveXFrom: 0@1 To: 1@1.
partida moveOFrom: 2@2 To: 1@2.

partida isOver.!

partida _ TerniLapilli newGame.
partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1.

partida isOver.

partida moveXFrom: 1@1 To: 1@0.
partida moveOFrom: 2@1 To: 2@2.

partida isOver.

partida moveXFrom: 0@1 To: 1@1.
partida moveOFrom: 2@2 To: 1@2.

partida isOver. 

partida moveXFrom: 2@0 To: 2@1.
partida moveOFrom: 0@2 To: 0@1.

partida isOver. !

partida _ TerniLapilli newGame.
partida putXAt: 1@1.
partida putOAt: 0@0.
partida putXAt: 2@0.
partida putOAt: 0@2.
partida putXAt: 0@1.
partida putOAt: 2@1.

partida isOver.

partida moveXFrom: 1@1 To: 1@0.
partida moveOFrom: 2@1 To: 2@2.

partida isOver.

partida moveXFrom: 0@1 To: 1@1.
partida moveOFrom: 2@2 To: 1@2.

partida isOver. 

partida moveXFrom: 2@0 To: 2@1.
partida moveOFrom: 0@2 To: 0@1.

partida isOver.

partida moveXFrom: 2@1 To: 2@2.
partida moveOFrom: 1@2 To: 0@2.

partida isOver.!

partida hasPlayerOWon.!

partida moveXFrom: 2@2 To: 1@2.!

----SNAPSHOT----(1 November 2020 16:03:49) CuisUniversity-4383.image priorSource: 17809730!

----SNAPSHOT----(1 November 2020 16:04:16) CuisUniversity-4383.image priorSource: 17812752!

----SNAPSHOT----(1 November 2020 16:04:55) CuisUniversity-4383.image priorSource: 17812845!

----QUIT----(1 November 2020 16:08:50) CuisUniversity-4383.image priorSource: 17812938!

----STARTUP---- (2 November 2020 16:01:33) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!

!TerniLapilli methodsFor: 'player actions - private' stamp: 'EMI 11/2/2020 16:03:40'!
hasPlayerXPlacedAllPieces

	^ piecesX size = 3! !
!TerniLapilli methodsFor: 'player actions - private' stamp: 'EMI 11/2/2020 16:03:40' prior: 50886830!
putOWhenPlayerIsOAt: aPosition
	self put: aPosition into: piecesO.
	self checkIfPlayerOWon 
	ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false]
	ifFalse: [
		self hasPlayerXPlacedAllPieces 
		ifTrue:[gameState _ TerniLapilliPlayerXMovePieceState ofGame: self]
		ifFalse:[gameState _ TerniLapilliPlayerXPutPieceState ofGame: self]
	].


	! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:09:42'!
bottomRightPosition

	^ 2@2! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:09:42' prior: 50887561!
checkDiagonalLine: aPiecesCollection
	| diagonalInversa diagonal |
	
	(aPiecesCollection includes: 1@1) ifFalse:[^false.].
	
	diagonal  _ (aPiecesCollection includes: (self bottomRightPosition)) and: [aPiecesCollection includes: (0@0)].
	diagonalInversa _ (aPiecesCollection includes: (2@0)) and: [aPiecesCollection includes:  (0@2)].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:12:39'!
centerPosition

	^ 1@1! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:12:39' prior: 50888340!
checkDiagonalLine: aPiecesCollection
	| diagonalInversa diagonal |
	
	(aPiecesCollection includes: self centerPosition) ifFalse:[^false.].
	
	diagonal  _ (aPiecesCollection includes: (self bottomRightPosition)) and: [aPiecesCollection includes: (0@0)].
	diagonalInversa _ (aPiecesCollection includes: (2@0)) and: [aPiecesCollection includes:  (0@2)].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:12:58'!
topLeftPosition

	^ 0@0! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:12:58' prior: 50888359!
checkDiagonalLine: aPiecesCollection
	| diagonalInversa diagonal |
	
	(aPiecesCollection includes: self centerPosition) ifFalse:[^false.].
	
	diagonal  _ (aPiecesCollection includes: (self bottomRightPosition)) and: [aPiecesCollection includes: (self topLeftPosition)].
	diagonalInversa _ (aPiecesCollection includes: (2@0)) and: [aPiecesCollection includes:  (0@2)].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:13:22'!
bottomLeftPosition

	^ 2@0! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:13:22' prior: 50888379!
checkDiagonalLine: aPiecesCollection
	| diagonalInversa diagonal |
	
	(aPiecesCollection includes: self centerPosition) ifFalse:[^false.].
	
	diagonal  _ (aPiecesCollection includes: (self bottomRightPosition)) and: [aPiecesCollection includes: (self topLeftPosition)].
	diagonalInversa _ (aPiecesCollection includes: (self bottomLeftPosition)) and: [aPiecesCollection includes:  (0@2)].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:13:42'!
topRightPosition

	^ 0@2! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:13:42' prior: 50888400!
checkDiagonalLine: aPiecesCollection
	| diagonalInversa diagonal |
	
	(aPiecesCollection includes: self centerPosition) ifFalse:[^false.].
	
	diagonal  _ (aPiecesCollection includes: (self bottomRightPosition)) and: [aPiecesCollection includes: (self topLeftPosition)].
	diagonalInversa _ (aPiecesCollection includes: (self bottomLeftPosition)) and: [aPiecesCollection includes:  (self topRightPosition)].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:18:39'!
topCenterPosition

	^ 0@1! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:18:39' prior: 50877332!
checkHorizontalLine: aPiecesCollection
	|first estanALaIzq estanALaDer estanAmbosLados|
	first _ aPiecesCollection first.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + (self topCenterPosition))) and: [aPiecesCollection includes: first - (0@1)].
	estanALaDer _ (aPiecesCollection includes: (first + (0@1))) and: [aPiecesCollection includes: first + (0@2)].
	estanALaIzq _ (aPiecesCollection includes: (first - (0@1))) and: [aPiecesCollection includes: first - (0@2)].
	
	^estanAmbosLados or:[estanALaDer or:[estanALaIzq]].! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 10/29/2020 20:58:06' prior: 50888443!
checkHorizontalLine: aPiecesCollection
	|first estanALaIzq estanALaDer estanAmbosLados|
	first _ aPiecesCollection first.
	
	estanAmbosLados  _ (aPiecesCollection includes: (first + (0@1))) and: [aPiecesCollection includes: first - (0@1)].
	estanALaDer _ (aPiecesCollection includes: (first + (0@1))) and: [aPiecesCollection includes: first + (0@2)].
	estanALaIzq _ (aPiecesCollection includes: (first - (0@1))) and: [aPiecesCollection includes: first - (0@2)].
	
	^estanAmbosLados or:[estanALaDer or:[estanALaIzq]].! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:20:40'!
centerLeftPosition

	^ 1@0! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:20:40' prior: 50887799!
checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (self centerLeftPosition) with: (0@1)  with:(1@2) with:(2@1).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:21:09' prior: 50888488!
checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (self centerLeftPosition) with: (self topCenterPosition)  with:(1@2) with:(2@1).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:21:26'!
centerRightPosition

	^ 1@2! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:21:26' prior: 50888503!
checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (self centerLeftPosition) with: (self topCenterPosition)  with:(self centerRightPosition) with:(2@1).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:21:47'!
bottomCenterPosition

	^ 2@1! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:21:47' prior: 50888523!
checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	| invalidDiagonalPositions |
	invalidDiagonalPositions _ OrderedCollection with: (self centerLeftPosition) with: (self topCenterPosition)  with:(self centerRightPosition) with:(self bottomCenterPosition).

	^(invalidDiagonalPositions includes: aOriginPosition) and:[invalidDiagonalPositions includes: anEmptyDestinationPosition ]
! !
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:24:13'!
bottomCenterPosition

	^ 2@1! !

!methodRemoval: TerniLapilli #bottomCenterPosition stamp: 'EMI 11/2/2020 16:24:13'!
bottomCenterPosition

	^ 2@1!
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:24:37'!
bottomLeftPosition

	^ 2@0! !

!methodRemoval: TerniLapilli #bottomLeftPosition stamp: 'EMI 11/2/2020 16:24:37'!
bottomLeftPosition

	^ 2@0!
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:24:46'!
bottomRightPosition

	^ 2@2! !

!methodRemoval: TerniLapilli #bottomRightPosition stamp: 'EMI 11/2/2020 16:24:46'!
bottomRightPosition

	^ 2@2!
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:24:57'!
centerLeftPosition

	^ 1@0! !

!methodRemoval: TerniLapilli #centerLeftPosition stamp: 'EMI 11/2/2020 16:24:57'!
centerLeftPosition

	^ 1@0!
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:25:05'!
centerPosition

	^ 1@1! !

!methodRemoval: TerniLapilli #centerPosition stamp: 'EMI 11/2/2020 16:25:05'!
centerPosition

	^ 1@1!
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:25:11'!
centerRightPosition

	^ 1@2! !

!methodRemoval: TerniLapilli #centerRightPosition stamp: 'EMI 11/2/2020 16:25:11'!
centerRightPosition

	^ 1@2!
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:25:22'!
topCenterPosition

	^ 0@1! !

!methodRemoval: TerniLapilli #topCenterPosition stamp: 'EMI 11/2/2020 16:25:22'!
topCenterPosition

	^ 0@1!
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:25:28'!
topLeftPosition

	^ 0@0! !

!methodRemoval: TerniLapilli #topLeftPosition stamp: 'EMI 11/2/2020 16:25:28'!
topLeftPosition

	^ 0@0!
!TerniLapilli class methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:25:34'!
topRightPosition

	^ 0@2! !

!methodRemoval: TerniLapilli #topRightPosition stamp: 'EMI 11/2/2020 16:25:34'!
topRightPosition

	^ 0@2!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:27:00' prior: 50888421!
checkDiagonalLine: aPiecesCollection
	| diagonalInversa diagonal |
	
	(aPiecesCollection includes: self class centerPosition) ifFalse:[^false.].
	
	diagonal  _ (aPiecesCollection includes: (self class bottomRightPosition)) and: [aPiecesCollection includes: (self class topLeftPosition)].
	diagonalInversa _ (aPiecesCollection includes: (self class bottomLeftPosition)) and: [aPiecesCollection includes:  (self class topRightPosition)].
	
	^diagonal or:[diagonalInversa].! !
!TerniLapilli class methodsFor: 'constants - private' stamp: 'EMI 11/2/2020 16:28:36'!
invalidDiagonalPositions
	^OrderedCollection with: (self class centerLeftPosition) with: (self class topCenterPosition)  with:(self class centerRightPosition) with:(self class bottomCenterPosition).! !
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:29:03' prior: 50888543!
checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition
	^(self class invalidDiagonalPositions includes: aOriginPosition) and:[self class invalidDiagonalPositions includes: anEmptyDestinationPosition ]
! !

!testRun: #TerniLapilliTest #test01PlayerXPlaysFirst stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlaysAfterX stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlaysAfterO stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test04NewGameCannotBeOver stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test05NewGameHasNoWinner stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCannotPutMoreThan3Pieces stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/2/2020 16:29:19'!
FAILURE!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/2/2020 16:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/2/2020 16:29:19'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCannotPutMoreThan3Pieces stamp: 'EMI 11/2/2020 16:29:27'!
ERROR!
!TerniLapilli class methodsFor: 'constants - private' stamp: 'EMI 11/2/2020 16:30:19' prior: 50888647!
invalidDiagonalPositions
	^OrderedCollection with: (self centerLeftPosition) with: (self topCenterPosition)  with:(self centerRightPosition) with:(self bottomCenterPosition).! !

!testRun: #TerniLapilliTest #test01PlayerXPlaysFirst stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlaysAfterX stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlaysAfterO stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test04NewGameCannotBeOver stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test05NewGameHasNoWinner stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCannotPutMoreThan3Pieces stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/2/2020 16:30:23'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPlaysFirst stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlaysAfterX stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlaysAfterO stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test04NewGameCannotBeOver stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test05NewGameHasNoWinner stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCannotPutMoreThan3Pieces stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/2/2020 16:30:32'!
PASSED!

----SNAPSHOT----(2 November 2020 16:30:59) CuisUniversity-4383.image priorSource: 17813031!
!TerniLapilli methodsFor: 'player actions - private' stamp: 'EMI 11/2/2020 16:35:07'!
putValidPiece: aPosition In: aPiecesCollection
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(self isPositionEmpty: aPosition) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	aPiecesCollection add: aPosition.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/2/2020 16:35:07' prior: 50888320!
putOWhenPlayerIsOAt: aPosition
	self putValidPiece: aPosition In: piecesO.
	self checkIfPlayerOWon 
	ifTrue: [gameState _ TerniLapilliGameOverState ofGame: self hasXWon: false]
	ifFalse: [
		self hasPlayerXPlacedAllPieces 
		ifTrue:[gameState _ TerniLapilliPlayerXMovePieceState ofGame: self]
		ifFalse:[gameState _ TerniLapilliPlayerXPutPieceState ofGame: self]
	].


	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/2/2020 16:35:07' prior: 50886741!
putXWhenPlayerIsXAt: aPosition
	self putValidPiece: aPosition In: piecesX.
	self checkIfPlayerXWon 
	ifTrue:[gameState _ TerniLapilliGameOverState ofGame: self hasXWon: true]
	ifFalse:[gameState _ TerniLapilliPlayerOPutPieceState ofGame: self].! !

!methodRemoval: TerniLapilli #put:into: stamp: 'EMI 11/2/2020 16:35:07'!
put: aPosition into: aPiecesCollection
	(self isInsideBoard: aPosition) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(self isPositionEmpty: aPosition) ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	
	aPiecesCollection add: aPosition.!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:37:24'!
checkIfMoveIsValidFrom: aOriginPosition To: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/2/2020 16:37:24' prior: 50887975!
movePieceOf: aPiecesCollection From: aOriginPosition To: aDestinationPosition
	(self isInsideBoard: aDestinationPosition ) ifFalse:[^Error signal: self class cannotPlacePiecesOutsideBoard ].
	(aPiecesCollection includes: aOriginPosition) ifFalse: [^Error signal: self class cannotMovePiecesPlayerDoesntOwn].
	(self isPositionEmpty: aDestinationPosition)  ifTrue: [^Error signal: self class cannotPlacePieceInOccupiedPosition ].
	self checkIfMoveIsValidFrom: aOriginPosition To: aDestinationPosition.
	
	aPiecesCollection remove: aOriginPosition.
	aPiecesCollection add: aDestinationPosition.! !

!methodRemoval: TerniLapilli #checkIfMoveFrom:isValidTo: stamp: 'EMI 11/2/2020 16:37:24'!
checkIfMoveFrom: aOriginPosition isValidTo: anEmptyDestinationPosition
	(self checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
!
!TerniLapilli methodsFor: 'board consults - private' stamp: 'EMI 11/2/2020 16:38:29'!
checkIfPosition: aOriginPosition isNeighbourOf: anEmptyDestinationPosition
	^ aOriginPosition eightNeighbors includes: anEmptyDestinationPosition! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'EMI 11/2/2020 16:38:29' prior: 50889035!
checkIfMoveIsValidFrom: aOriginPosition To: anEmptyDestinationPosition
	(self checkIfPosition: aOriginPosition isNeighbourOf: anEmptyDestinationPosition) ifFalse:[^Error signal: self class 	cannotMovePieceMoreThanOneSpace ].
	
	(self checkIfIsInvalidDiagonalMoveFrom: aOriginPosition To: anEmptyDestinationPosition ) ifTrue:[^Error signal: self class cannotMovePieceByInvalidDiagonal ].
! !

!methodRemoval: TerniLapilli #checkIfDestination:isNeighbourOf: stamp: 'EMI 11/2/2020 16:38:29'!
checkIfDestination: aOriginPosition isNeighbourOf: anEmptyDestinationPosition
	^ aOriginPosition eightNeighbors includes: anEmptyDestinationPosition!

----SNAPSHOT----(2 November 2020 16:42:37) CuisUniversity-4383.image priorSource: 17834603!

----SNAPSHOT----(2 November 2020 16:43:35) CuisUniversity-4383.image priorSource: 17838974!

----SNAPSHOT----(2 November 2020 16:43:56) CuisUniversity-4383.image priorSource: 17839067!

!testRun: #TerniLapilliTest #test01PlayerXPlaysFirst stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerOPlaysAfterX stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerXPlaysAfterO stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test04NewGameCannotBeOver stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test05NewGameHasNoWinner stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCannotPutMoreThan3Pieces stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerOWonByPlacingPieces stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerXWonByPlacingPieces stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPieceAndGameContinues stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerXMovesAPieceAndWins stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerOMovesAPieceAndGameContinues stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerOMovesAPieceAndWins stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerOCannotPutPieceOutOfTurn stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXCannotPutPieceOutOfTurn stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerXCannotPutPieceInOccupiedPosition stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerOCannotPutPieceInOccupiedPosition stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCannotMoveBeforePlacing3Pieces stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayersCannotPlacePieceOutsideBoard stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayersCannotMovePieceOutsideBoard stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayersCanOnlyMoveOwnedPieces stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCannotMovePieceToOccupiedPosition stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCannotMovePieceToOccupiedPosition stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerXCanOnlyMoveToNeighbour stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerOCanOnlyMoveToNeighbour stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerXCannotMoveByInvalidDiagonal stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerOCannotMoveByInvalidDiagonal stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCannotMoveOutOfTurn stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCannotMoveOutOfTurn stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayersCannotPlayAfterGameIsOver stamp: 'EMI 11/2/2020 16:44:07'!
PASSED!

----SNAPSHOT----(2 November 2020 16:44:10) CuisUniversity-4383.image priorSource: 17839160!

----QUIT----(2 November 2020 16:44:18) CuisUniversity-4383.image priorSource: 17842482!