

----End fileIn of /Users/ilanolkies/uba/ingsoft1/ingeSoft-2020-2c/16-Mars-Rover/Ejercicio-16-MARS-ROVER.st----!

Object subclass: #MarsRover
	instanceVariableNames: 'position orientation cardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-16-MARS-ROVER'!

!classDefinition: #MarsRover category: 'Ejercicio-16-MARS-ROVER' stamp: 'IO 10/25/2020 15:49:16'!
Object subclass: #MarsRover
	instanceVariableNames: 'position orientation cardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-16-MARS-ROVER'!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 15:49:19'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 15:49:19'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 15:49:19'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 15:49:19'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 15:49:19'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-16-MARS-ROVER'!

!classDefinition: #MarsRover category: 'Ejercicio-16-MARS-ROVER' stamp: 'IO 10/25/2020 15:49:23'!
Object subclass: #MarsRover
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-16-MARS-ROVER'!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 15:49:25'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 15:49:25'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 15:49:25'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 15:49:25'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 15:49:25'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'IO 10/25/2020 15:49:53' prior: 50867911!
initializeAt: aPoint pointingTo: aCardinalDirection 

	position := aPoint.
	orientation := aCardinalDirection.
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 15:50:07' prior: 50867918!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientation asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientation asPoint].! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 15:50:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 15:50:08'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 15:50:08'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 15:50:08'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 15:50:08'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 15:55:02' prior: 50867781!
test01
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South new.
	aMarsRover do: 'f'.
	
	self assert: -2@0 equals: aMarsRover position.
	! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 15:55:02'!
FAILURE!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 15:55:17' prior: 50868027!
test01
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South new.
	aMarsRover do: 'f'.
	
	self assert: -1@0 equals: aMarsRover position.
	! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 15:55:18'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 15:55:18'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 15:55:18'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 15:55:18'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 15:55:18'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 15:55:18'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 15:58:45'!
test06
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South new.
	aMarsRover do: 'l'.
	
	self assert: aMarsRover isPointingToWest.
	! !

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 15:58:48'!
ERROR!
!MarsRover methodsFor: 'testing' stamp: 'IO 10/25/2020 15:59:04'!
isPointingToWest
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'testing' stamp: 'IO 10/25/2020 15:59:36' prior: 50868067!
isPointingToWest
	^true.! !

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 15:59:46'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 15:59:46'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 15:59:46'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 15:59:46'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 15:59:46'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 15:59:46'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 15:59:46'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:00:09'!
test07
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South new.
	aMarsRover do: 'r'.
	
	self deny: aMarsRover isPointingToWest.
	! !

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:00:09'!
FAILURE!
!MarsRover methodsFor: 'testing' stamp: 'IO 10/25/2020 16:00:52' prior: 50868072!
isPointingToWest
	^orientation class = West.! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:00:53'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:00:53'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:00:53'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:00:53'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:00:53'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:00:53'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:00:53'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:00:53'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:01:09'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:01:09'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:01:09'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:01:09'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:01:09'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:01:09'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:01:09'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:01:09'!
FAILURE!

orientation!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 16:02:14' prior: 50868006!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientation asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientation asPoint].
	aStringOfCommands = 'l' ifTrue: [orientation := West].! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:02:15'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:02:15'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:02:15'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:02:15'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:02:15'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:02:15'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:02:15'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:02:15'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 16:02:22' prior: 50868145!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientation asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientation asPoint].
	aStringOfCommands = 'l' ifTrue: [orientation := West new].! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:02:23'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:02:23'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:02:23'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:02:23'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:02:23'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:02:23'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:02:23'!
PASSED!

!methodRemoval: MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:05:21'!
test07
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South new.
	aMarsRover do: 'r'.
	
	self deny: aMarsRover isPointingToWest.
	!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 16:05:35' prior: 50868175!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientation asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientation asPoint].
! !
!MarsRover methodsFor: 'testing' stamp: 'IO 10/25/2020 16:05:57' prior: 50868102!
isPointingToWest
	^true.! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:05:58'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:05:58'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:05:58'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:05:58'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:05:58'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:05:58'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:06:06'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:06:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:06:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:06:06'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:06:06'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:06:06'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:06:06'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:06:54' prior: 50868058!
test06
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West new.
	aMarsRover do: 'l'.
	
	self deny: aMarsRover isPointingToWest.
! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:07:04' prior: 50868252!
test06
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South new.
	aMarsRover do: 'l'.
	
	self assert: aMarsRover isPointingToWest.
	! !

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:07:06'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:07:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:07:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:07:06'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:07:06'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:07:06'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:07:06'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:07:19'!
test07
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West new.
	aMarsRover do: 'l'.
	
	self deny: aMarsRover isPointingToWest.
	! !

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:07:20'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 16:08:49' prior: 50868209!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientation asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientation asPoint].
	aStringOfCommands = 'l' ifTrue: [
		orientation class = South ifTrue: [		orientation := West new].
	].
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:08:51'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:08:51'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:08:51'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:08:51'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:08:51'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:08:51'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:08:51'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:08:51'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:08:55'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:08:55'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:08:55'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:08:55'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:08:55'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:08:55'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:08:55'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:08:55'!
FAILURE!

!methodRemoval: MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:09:56'!
test06
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South new.
	aMarsRover do: 'l'.
	
	self assert: aMarsRover isPointingToWest.
	!

!methodRemoval: MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:09:57'!
test07
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West new.
	aMarsRover do: 'l'.
	
	self deny: aMarsRover isPointingToWest.
	!

!methodRemoval: MarsRover #isPointingToWest stamp: 'IO 10/25/2020 16:10:02'!
isPointingToWest
	^true.!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 16:10:10' prior: 50868294!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientation asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientation asPoint].

! !

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:10:14'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:14:27'!
test06
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South new.
	aMarsRover do: 'l'.
	
	self assert: aMarsRover isPointingToWest.
	! !

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:14:28'!
ERROR!
!MarsRover methodsFor: 'testing' stamp: 'IO 10/25/2020 16:15:00'!
isPointingToWest
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'testing' stamp: 'IO 10/25/2020 16:15:07' prior: 50868381!
isPointingToWest
	^true.! !

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:15:12'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:15:12'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:15:12'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:15:12'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:15:12'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:15:12'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:15:12'!
PASSED!
!MarsRover methodsFor: 'testing' stamp: 'IO 10/25/2020 16:15:33' prior: 50868386!
isPointingToWest
	^orientation isPorintgToWest.! !
!MarsRover methodsFor: 'testing' stamp: 'IO 10/25/2020 16:15:41' prior: 50868406!
isPointingToWest
	^true.! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:15:56'!
test07
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West new.
	aMarsRover do: 'l'.
	
	self deny: aMarsRover isPointingToWest.
	! !

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:16:03'!
FAILURE!
!MarsRover methodsFor: 'testing' stamp: 'IO 10/25/2020 16:17:04' prior: 50868411!
isPointingToWest
	(orientation class = West) ifTrue: [^true].
	^false.! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:17:05'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:17:05'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:17:05'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:17:05'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:17:05'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:17:05'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:17:05'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 16:18:08' prior: 50868361!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientation asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientation asPoint].
	aStringOfCommands = 'l' ifTrue: [
		orientation class = South ifTrue: [orientation := West new].
	].
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:18:09'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:18:09'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:18:09'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:18:09'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:18:09'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:18:09'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:18:09'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:18:09'!
FAILURE!

orientation!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 16:18:52' prior: 50868446!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientation asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientation asPoint].
	aStringOfCommands = 'l' ifTrue: [
		orientation class = South ifTrue: [orientation := West new].
		orientation class = West ifTrue: [orientation := North new].
	].
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:18:53'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:18:53'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:18:53'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:18:53'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:18:53'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:18:53'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:18:53'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:18:53'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 16:19:31' prior: 50868478!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientation asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientation asPoint].
	aStringOfCommands = 'l' ifTrue: [
		orientation class = South ifTrue: [orientation := West new] ifFalse: [
			orientation class = West ifTrue: [orientation := North new].
		]
	].
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:19:32'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:19:32'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:19:32'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:19:32'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:19:32'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:19:32'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:19:32'!
PASSED!
!MarsRover methodsFor: 'testing' stamp: 'IO 10/25/2020 16:20:08' prior: 50868424!
isPointingToWest
	(orientation class = West) ifTrue: [^true].
	^false.
! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:21:16'!
test08
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North new.
	aMarsRover do: 'l'.
	
	self deny: aMarsRover isPointingToWest.
	! !

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 16:21:18'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:21:18'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:21:18'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:21:18'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:21:18'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:21:18'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:21:18'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:21:18'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 16:21:18'!
PASSED!

!methodRemoval: MarsRoverTest #test08 stamp: 'IO 10/25/2020 16:21:26'!
test08
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North new.
	aMarsRover do: 'l'.
	
	self deny: aMarsRover isPointingToWest.
	!
!MarsRover methodsFor: 'testing' stamp: 'IO 10/25/2020 16:21:59' prior: 50868542!
isPointingToWest
	^orientation class = West

! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:22:00'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:22:00'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:22:00'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:22:00'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:22:00'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:22:00'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:22:00'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:22:39' prior: 50868414!
test07
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North new.
	aMarsRover do: 'l'.
	
	self deny: aMarsRover isPointingToWest.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:22:43' prior: 50868603!
test07
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West new.
	aMarsRover do: 'l'.
	
	self deny: aMarsRover isPointingToWest.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:22:48'!
test08
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North new.
	aMarsRover do: 'l'.
	
	self deny: aMarsRover isPointingToWest.
	! !

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 16:22:49'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:22:49'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:22:49'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:22:49'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:22:49'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:22:49'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:22:49'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:22:49'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 16:22:49'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:23:17' prior: 50868618!
test08
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West new.
	aMarsRover do: 'l'.
	
	self deny: aMarsRover isPointingToWest.
	! !

!methodRemoval: MarsRoverTest #test08 stamp: 'IO 10/25/2020 16:26:06'!
test08
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West new.
	aMarsRover do: 'l'.
	
	self deny: aMarsRover isPointingToWest.
	!

!methodRemoval: MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:29:16'!
test07
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West new.
	aMarsRover do: 'l'.
	
	self deny: aMarsRover isPointingToWest.
	!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 16:29:26' prior: 50868511!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientation asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientation asPoint].
	aStringOfCommands = 'l' ifTrue: [
		orientation class = South ifTrue: [orientation := West new]
	].
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:29:28'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:29:28'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:29:28'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:29:28'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:29:28'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:29:28'!
PASSED!
!MarsRover methodsFor: 'testing' stamp: 'IO 10/25/2020 16:29:48' prior: 50868582!
isPointingToWest
	^orientation class = West
! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:33:55' prior: 50868037!
test01
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover do: 'f'.
	
	self assert: -1@0 equals: aMarsRover position.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:33:59' prior: 50867788!
test02
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover do: 'b'.
	
	self assert: 1@0 equals: aMarsRover position.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:34:03' prior: 50867795!
test03
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North.
	aMarsRover do: 'f'.
	
	self assert: 1@0 equals: aMarsRover position.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:34:06' prior: 50867802!
test04
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: East.
	aMarsRover do: 'f'.
	
	self assert: 0@1 equals: aMarsRover position.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:34:11' prior: 50867809!
test05
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West.
	aMarsRover do: 'f'.
	
	self assert: 0@-1 equals: aMarsRover position.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:34:28' prior: 50868372!
test06
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover do: 'l'.
	
	self assert: aMarsRover isPointingToWest.
	! !
!MarsRover methodsFor: 'initialization' stamp: 'IO 10/25/2020 16:34:44' prior: 50867999!
initializeAt: aPoint pointingTo: aCardinalDirection 

	position := aPoint.
	orientation := aCardinalDirection new.
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:34:45'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:34:45'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:34:45'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:34:45'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:34:45'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:34:45'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:35:05' prior: 50868739!
test06
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover do: 'l'.
	
	self assert: West equals: aMarsRover isPointingTo.
	! !

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:35:09'!
ERROR!
!MarsRover methodsFor: 'testing' stamp: 'IO 10/25/2020 16:35:18'!
isPointingTo
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'testing' stamp: 'IO 10/25/2020 16:35:33' prior: 50868778!
isPointingTo
	^orientation class.! !

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:35:36'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:35:36'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:35:36'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:35:36'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:35:36'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:35:36'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:35:36'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:36:02'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:36:02'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:36:02'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:36:02'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:36:02'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:36:02'!
PASSED!

!methodRemoval: MarsRover #isPointingToWest stamp: 'IO 10/25/2020 16:36:04'!
isPointingToWest
	^orientation class = West
!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:36:07'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:36:07'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:36:07'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:36:07'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:36:07'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:36:07'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:36:12'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:36:12'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:36:12'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:36:12'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:36:12'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:36:12'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:36:12'!
PASSED!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 16:36:37' prior: 50868668!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientation asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientation asPoint].
	aStringOfCommands = 'l' ifTrue: [

	].
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:36:38'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:36:38'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:36:38'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:36:38'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:36:38'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:36:38'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:36:38'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 16:36:41' prior: 50868851!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientation asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientation asPoint].
	aStringOfCommands = 'l' ifTrue: [
		orientation class = South ifTrue: [orientation := West new]
	].
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:36:43'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:36:43'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:36:43'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:36:43'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:36:43'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:36:43'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:36:50'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:36:50'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:36:50'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:36:50'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:36:50'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:36:50'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:36:52'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:36:52'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:36:52'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:36:52'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:36:52'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:36:52'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:37:16'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:37:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:37:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:37:16'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:37:16'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:37:16'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:37:16'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:37:31'!
test07
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West.
	aMarsRover do: 'l'.
	
	self assert: North equals: aMarsRover isPointingTo.
	! !

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:37:32'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 16:38:12' prior: 50868878!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientation asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientation asPoint].
	aStringOfCommands = 'l' ifTrue: [
		orientation class = South ifTrue: [orientation := West new] ifFalse: [
			orientation class = West ifTrue: [orientation := North new].]
	].
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:38:13'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:38:13'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:38:13'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:38:13'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:38:13'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:38:13'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:38:13'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:38:26' prior: 50868948!
test07
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North.
	aMarsRover do: 'l'.
	
	self assert: East equals: aMarsRover isPointingTo.
	! !

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:38:27'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 16:39:22' prior: 50868959!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientation asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientation asPoint].
	aStringOfCommands = 'l' ifTrue: [
		orientation class = South ifTrue: [orientation := West new] ifFalse: [
			orientation class = West ifTrue: [orientation := North new] ifFalse: [
				orientation class = North ifTrue: [orientation := East new].].]
	].
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:39:23'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:39:23'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:39:23'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:39:23'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:39:23'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:39:23'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:39:23'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:39:38' prior: 50868990!
test07
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West.
	aMarsRover do: 'l'.
	
	self assert: North equals: aMarsRover isPointingTo.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:39:45'!
test08
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North.
	aMarsRover do: 'l'.
	
	self assert: East equals: aMarsRover isPointingTo.
	! !

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 16:39:45'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:39:45'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:39:45'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:39:45'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:39:45'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:39:45'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:39:45'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:39:45'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 16:39:45'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:39:54'!
test09
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: East.
	aMarsRover do: 'l'.
	
	self assert: South equals: aMarsRover isPointingTo.
	! !

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 16:39:55'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 16:40:23' prior: 50869001!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientation asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientation asPoint].
	aStringOfCommands = 'l' ifTrue: [
		orientation class = South ifTrue: [orientation := West new] ifFalse: [
			orientation class = West ifTrue: [orientation := North new] ifFalse: [
				orientation class = North ifTrue: [orientation := East new] ifFalse: [
					orientation class = East ifTrue: [orientation := South new]].].]
	].
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:40:24'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:40:24'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:40:24'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:40:24'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:40:24'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:40:24'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:40:24'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 16:40:24'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 16:40:24'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 16:40:56' prior: 50869069!
test09
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: East.
	aMarsRover do: 'l'.
	
	self assert: South equals: aMarsRover isPointingTo.
	! !
!CardinalDirection methodsFor: 'converters' stamp: 'IO 10/25/2020 16:41:52'!
rotateLeft
	^self subclassResponsibility.
! !

!methodRemoval: CardinalDirection #rotateLeft stamp: 'IO 10/25/2020 16:42:10'!
rotateLeft
	^self subclassResponsibility.
!

Object subclass: #MarsRoverState
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-16-MARS-ROVER'!

!classDefinition: #MarsRoverState category: 'Ejercicio-16-MARS-ROVER' stamp: 'IO 10/25/2020 16:42:26'!
Object subclass: #MarsRoverState
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-16-MARS-ROVER'!

!classRemoval: #MarsRoverState stamp: 'IO 10/25/2020 16:42:39'!
Object subclass: #MarsRoverState
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-16-MARS-ROVER'!

Object subclass: #MarsRoverOrientationState
	instanceVariableNames: 'orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-16-MARS-ROVER'!

!classDefinition: #MarsRoverOrientationState category: 'Ejercicio-16-MARS-ROVER' stamp: 'IO 10/25/2020 16:45:00'!
Object subclass: #MarsRoverOrientationState
	instanceVariableNames: 'orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-16-MARS-ROVER'!
!MarsRoverOrientationState methodsFor: 'no messages' stamp: 'IO 10/25/2020 16:46:43'!
rotateLeft
	orientation class = South ifTrue: [orientation := West new] ifFalse: [
		orientation class = West ifTrue: [orientation := North new] ifFalse: [
			orientation class = North ifTrue: [orientation := East new] ifFalse: [
				orientation class = East ifTrue: [orientation := South new]].].]
! !

Object subclass: #MarsRover
	instanceVariableNames: 'position orientationState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-16-MARS-ROVER'!

!classDefinition: #MarsRover category: 'Ejercicio-16-MARS-ROVER' stamp: 'IO 10/25/2020 16:47:08'!
Object subclass: #MarsRover
	instanceVariableNames: 'position orientationState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-16-MARS-ROVER'!
!MarsRover methodsFor: 'initialization' stamp: 'IO 10/25/2020 16:47:43' prior: 50868747!
initializeAt: aPoint pointingTo: aCardinalDirection 

	position := aPoint.
	orientationState := MarsRoverOrientationState pointingTo: aCardinalDirection.
! !
!MarsRoverOrientationState class methodsFor: 'no messages' stamp: 'IO 10/25/2020 16:48:37'!
pointingTo: aCardinalDirection
	^self basicNew withOrientation: aCardinalDirection.
! !
!MarsRoverOrientationState methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 16:49:10'!
pointingTo: aCardinalDirection
	orientation := aCardinalDirection new.
! !
!MarsRoverOrientationState methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 16:49:25'!
withOrientation: aCardinalDirection
	orientation := aCardinalDirection new.
! !

!methodRemoval: MarsRoverOrientationState #pointingTo: stamp: 'IO 10/25/2020 16:49:28'!
pointingTo: aCardinalDirection
	orientation := aCardinalDirection new.
!
!MarsRover methodsFor: 'accessing' stamp: 'IO 10/25/2020 16:49:52' prior: 50868782!
isPointingTo
	^orientationState pointingTo.! !
!MarsRoverOrientationState methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 16:50:14'!
pointingTo
	^orientation.
! !

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 16:50:20'!
FAILURE!
!MarsRoverOrientationState methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 16:50:32' prior: 50869233!
pointingTo
	^orientation class.
! !
!MarsRoverOrientationState methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 16:50:46' prior: 50869171!
rotateLeft
	orientation class = South ifTrue: [orientation := West new] ifFalse: [
		orientation class = West ifTrue: [orientation := North new] ifFalse: [
			orientation class = North ifTrue: [orientation := East new] ifFalse: [
				orientation class = East ifTrue: [orientation := South new].].].]
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 16:51:31' prior: 50869080!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientationState pointingTo asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientationState pointingTo asPoint].
	aStringOfCommands = 'l' ifTrue: [orientationState rotateLeft.].

! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:51:34'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:51:34'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:51:34'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:51:34'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:51:34'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:51:34'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:51:34'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 16:51:34'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 16:51:34'!
PASSED!
!MarsRoverOrientationState methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 16:51:46' prior: 50869240!
pointingTo
	^orientation.
! !
!MarsRoverOrientationState methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 16:51:54' prior: 50869292!
pointingTo
	^orientation class.
! !
!MarsRoverOrientationState methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 16:52:30'!
asPoint
	^orientation asPoint.
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 16:52:38' prior: 50869258!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientationState asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientationState asPoint].
	aStringOfCommands = 'l' ifTrue: [orientationState rotateLeft.].

! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:52:39'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:52:39'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:52:39'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:52:39'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:52:39'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:52:39'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:52:39'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 16:52:39'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 16:52:39'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:52:44'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:52:44'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:52:44'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:52:44'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:52:44'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:52:44'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:52:44'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 16:52:44'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 16:52:44'!
PASSED!

----SNAPSHOT----(25 October 2020 16:53:01) CuisUniversity-4384.image priorSource: 17155564!
!CardinalDirection methodsFor: 'converters' stamp: 'IO 10/25/2020 16:55:52'!
counterclockwise90degrees

	"returns the cardinal direction when rotating 90 degrees counterclockwise"

	self subclassResponsibility.! !
!East methodsFor: 'converters' stamp: 'IO 10/25/2020 16:56:12' overrides: 50869362!
counterclockwise90degrees
	^South! !
!North methodsFor: 'converters' stamp: 'IO 10/25/2020 16:57:21' overrides: 50869362!
counterclockwise90degrees
	^East.
! !
!South methodsFor: 'converters' stamp: 'IO 10/25/2020 16:58:05' overrides: 50869362!
counterclockwise90degrees
	^West! !
!West methodsFor: 'converters' stamp: 'IO 10/25/2020 16:58:37' overrides: 50869362!
counterclockwise90degrees
	^North.
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 16:58:38'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 16:58:38'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 16:58:38'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 16:58:38'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 16:58:38'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 16:58:38'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 16:58:38'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 16:58:38'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 16:58:38'!
PASSED!
!MarsRoverOrientationState methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 16:59:33' prior: 50869245!
rotateLeft
	orientation := orientation counterclockwise90degrees.
"
	orientation class = South ifTrue: [orientation := West new] ifFalse: [
		orientation class = West ifTrue: [orientation := North new] ifFalse: [
			orientation class = North ifTrue: [orientation := East new] ifFalse: [
				orientation class = East ifTrue: [orientation := South new].].].]
"! !
!West methodsFor: 'converters' stamp: 'IO 10/25/2020 16:59:45' prior: 50869381 overrides: 50869362!
counterclockwise90degrees
	^North new.
! !
!South methodsFor: 'converters' stamp: 'IO 10/25/2020 16:59:51' prior: 50869377 overrides: 50869362!
counterclockwise90degrees
	^West new.! !
!North methodsFor: 'converters' stamp: 'IO 10/25/2020 16:59:57' prior: 50869373 overrides: 50869362!
counterclockwise90degrees
	^East new.
! !
!East methodsFor: 'converters' stamp: 'IO 10/25/2020 17:00:01' prior: 50869369 overrides: 50869362!
counterclockwise90degrees
	^South new.
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:00:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:00:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:00:06'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:00:06'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:00:06'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:00:06'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:00:06'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:00:06'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:00:06'!
PASSED!
!MarsRoverOrientationState methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 17:00:20' prior: 50869407!
rotateLeft
	orientation := orientation counterclockwise90degrees.
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:00:29'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:00:29'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:00:29'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:00:29'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:00:29'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:00:29'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:00:29'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:00:29'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:00:29'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:00:32'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:00:32'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:00:32'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:00:32'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:00:32'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:00:32'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:00:32'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:00:32'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:00:32'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 17:00:53'!
test10
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: East.
	aMarsRover do: 'r'.
	
	self assert: North equals: aMarsRover isPointingTo.
	! !

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:00:54'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:01:11' prior: 50869306!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientationState asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientationState asPoint].
	aStringOfCommands = 'l' ifTrue: [orientationState rotateLeft.].
	aStringOfCommands = 'l' ifTrue: [orientationState rotateRight.].
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:01:14'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:01:14'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:01:14'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:01:14'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:01:14'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:01:14'!
ERROR!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:01:14'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:01:14'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:01:14'!
ERROR!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:01:14'!
FAILURE!
!MarsRoverOrientationState methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 17:01:28'!
rotateRight
	orientation := orientation clockwise90degrees.
! !
!CardinalDirection methodsFor: 'converters' stamp: 'IO 10/25/2020 17:01:42'!
clockwise90degrees

	"returns the cardinal direction when rotating 90 degrees clockwise"

	self subclassResponsibility.! !
!East methodsFor: 'converters' stamp: 'IO 10/25/2020 17:02:09' overrides: 50869563!
clockwise90degrees
	^North new.
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:02:10'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:02:10'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:02:10'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:02:10'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:02:10'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:02:10'!
ERROR!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:02:10'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:02:10'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:02:10'!
ERROR!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:02:10'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:02:19'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:02:34'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:02:43' prior: 50869521!
do: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientationState asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientationState asPoint].
	aStringOfCommands = 'l' ifTrue: [orientationState rotateLeft.].
	aStringOfCommands = 'r' ifTrue: [orientationState rotateRight.].
! !

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:02:45'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:02:45'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:02:45'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:02:45'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:02:45'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:02:45'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:02:45'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:02:46'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:02:46'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:02:46'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:02:46'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 17:03:01' prior: 50869510!
test10
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North.
	aMarsRover do: 'r'.
	
	self assert: West equals: aMarsRover isPointingTo.
	! !

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:03:03'!
ERROR!
!North methodsFor: 'converters' stamp: 'IO 10/25/2020 17:03:11' overrides: 50869563!
clockwise90degrees
	^West new.
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:03:12'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:03:12'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:03:12'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:03:12'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:03:12'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:03:12'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:03:12'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:03:12'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:03:12'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:03:12'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 17:03:27' prior: 50869642!
test10
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: East.
	aMarsRover do: 'r'.
	
	self assert: North equals: aMarsRover isPointingTo.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 17:03:37'!
test11
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North.
	aMarsRover do: 'r'.
	
	self assert: West equals: aMarsRover isPointingTo.
	! !

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:03:38'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:03:38'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:03:38'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:03:38'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:03:38'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:03:38'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:03:38'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:03:38'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:03:38'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:03:38'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:03:38'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:03:38'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 17:03:58'!
test12
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West.
	aMarsRover do: 'r'.
	
	self assert: South equals: aMarsRover isPointingTo.
	! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:04:02'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:04:02'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:04:02'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:04:02'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:04:02'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:04:02'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:04:02'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:04:02'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:04:02'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:04:02'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:04:02'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:04:02'!
ERROR!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:04:02'!
ERROR!
!West methodsFor: 'converters' stamp: 'IO 10/25/2020 17:04:13' overrides: 50869563!
clockwise90degrees
	^South new.
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:04:13'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:04:13'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:04:13'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:04:13'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:04:13'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:04:13'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:04:13'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:04:13'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:04:13'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:04:13'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:04:13'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:04:13'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 17:04:27'!
test13
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover do: 'r'.
	
	self assert: East equals: aMarsRover isPointingTo.
	! !

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:04:28'!
ERROR!
!South methodsFor: 'converters' stamp: 'IO 10/25/2020 17:04:39' overrides: 50869563!
clockwise90degrees
	^East new.! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:04:39'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:04:39'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:04:39'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:04:39'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:04:40'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:04:40'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:04:40'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:04:40'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:04:40'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:04:40'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:04:40'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:04:40'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:04:40'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 17:12:47'!
test14
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover do: 'ff'.
	
	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover isPointingTo.
	! !

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:12:49'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:13:03'!
doOne: aStringOfCommands 
	
	aStringOfCommands = 'f' ifTrue: [position := position + orientationState asPoint].
	aStringOfCommands = 'b' ifTrue: [position := position - orientationState asPoint].
	aStringOfCommands = 'l' ifTrue: [orientationState rotateLeft.].
	aStringOfCommands = 'r' ifTrue: [orientationState rotateRight.].
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:13:38' prior: 50869848!
doOne: aCommand
	
	aCommand = 'f' ifTrue: [position := position + orientationState asPoint].
	aCommand = 'b' ifTrue: [position := position - orientationState asPoint].
	aCommand = 'l' ifTrue: [orientationState rotateLeft.].
	aCommand = 'r' ifTrue: [orientationState rotateRight.].
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:14:23' prior: 50869603!
do: aStringOfCommands 
	aStringOfCommands do: [ :aCommand | self doOne: aCommand].
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:14:24'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:14:24'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:14:24'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:14:24'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:14:24'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:14:24'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:14:24'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:14:24'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:14:24'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:14:24'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:14:24'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:14:24'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:14:24'!
FAILURE!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:14:24'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:14:39' prior: 50869862!
doOne: aCommand
	
	aCommand = $f ifTrue: [position := position + orientationState asPoint].
	aCommand = $b ifTrue: [position := position - orientationState asPoint].
	aCommand = $l ifTrue: [orientationState rotateLeft.].
	aCommand = $r ifTrue: [orientationState rotateRight.].
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:14:40'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:14:40'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:14:40'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:14:40'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:14:40'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:14:40'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:14:40'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:14:40'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:14:40'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:14:40'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:14:40'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:14:40'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:14:40'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:14:40'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 17:16:24'!
test15
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover do: 'fxf'.
	
	self assert: -1@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover isPointingTo.
	! !

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 17:16:25'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:16:50' prior: 50869913!
doOne: aCommand

	aCommand = $f ifTrue: [position := position + orientationState asPoint].
	aCommand = $b ifTrue: [position := position - orientationState asPoint].
	aCommand = $l ifTrue: [orientationState rotateLeft.].
	aCommand = $r ifTrue: [orientationState rotateRight.].
! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 17:25:24' prior: 50869957!
test15
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover do: 'fxf'.
	
	self assert: -1@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover isPointingTo.
	! !

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 17:25:24'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:27:24' prior: 50869969!
doOne: aCommand
	aCommand = $f ifTrue: [position := position + orientationState asPoint].
	aCommand = $b ifTrue: [position := position - orientationState asPoint].
	aCommand = $l ifTrue: [orientationState rotateLeft.].
	aCommand = $r ifTrue: [orientationState rotateRight.].
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:29:02' prior: 50869993!
doOne: aCommand

	aCommand = $f ifTrue: [^position := position + orientationState asPoint].
	aCommand = $b ifTrue: [^position := position - orientationState asPoint].
	aCommand = $l ifTrue: [^orientationState rotateLeft.].
	aCommand = $r ifTrue: [^orientationState rotateRight.].
	self ignoreNextCommands.

! !

Object subclass: #MarsRover
	instanceVariableNames: 'position orientationState ignoreNextCommands'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-16-MARS-ROVER'!

!classDefinition: #MarsRover category: 'Ejercicio-16-MARS-ROVER' stamp: 'IO 10/25/2020 17:29:17'!
Object subclass: #MarsRover
	instanceVariableNames: 'position orientationState ignoreNextCommands'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-16-MARS-ROVER'!
!MarsRover methodsFor: 'initialization' stamp: 'IO 10/25/2020 17:29:40' prior: 50869197!
initializeAt: aPoint pointingTo: aCardinalDirection 

	position := aPoint.
	orientationState := MarsRoverOrientationState pointingTo: aCardinalDirection.
	ignoreNextCommands := false.
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:30:35' prior: 50870005!
doOne: aCommand
	ignoreNextCommands ifFalse: [
		aCommand = $f ifTrue: [^position := position + orientationState asPoint].
		aCommand = $b ifTrue: [^position := position - orientationState asPoint].
		aCommand = $l ifTrue: [^orientationState rotateLeft.].
		aCommand = $r ifTrue: [^orientationState rotateRight.].
		ignoreNextCommands := true.
	]

! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:30:36'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:30:36'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:30:36'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:30:36'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:30:36'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:30:36'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:30:36'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:30:36'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:30:36'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:30:36'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:30:36'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:30:36'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:30:36'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:30:36'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 17:30:36'!
PASSED!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:32:16' prior: 50869874!
do: aStringOfCommands 
	aStringOfCommands do: [ :aCommand | ignoreNextCommands ifFalse: [self doOne: aCommand]].
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:32:23' prior: 50870042!
doOne: aCommand
	aCommand = $f ifTrue: [^position := position + orientationState asPoint].
	aCommand = $b ifTrue: [^position := position - orientationState asPoint].
	aCommand = $l ifTrue: [^orientationState rotateLeft.].
	aCommand = $r ifTrue: [^orientationState rotateRight.].
	ignoreNextCommands := true.


! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:32:25' prior: 50870099!
doOne: aCommand
	aCommand = $f ifTrue: [^position := position + orientationState asPoint].
	aCommand = $b ifTrue: [^position := position - orientationState asPoint].
	aCommand = $l ifTrue: [^orientationState rotateLeft.].
	aCommand = $r ifTrue: [^orientationState rotateRight.].
	ignoreNextCommands := true.
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:32:32'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:32:32'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:32:32'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:32:32'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:32:32'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:32:32'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:32:32'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:32:32'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:32:32'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:32:32'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:32:32'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:32:32'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:32:32'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:32:32'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 17:32:32'!
PASSED!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:32:59' prior: 50870092!
do: aStringOfCommands 
	aStringOfCommands do: [ :aCommand | ignoreNextCommands ifFalse: [self doOne: aCommand]].
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:32:59'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:32:59'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:32:59'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:32:59'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:32:59'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:33:00'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:33:00'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:33:00'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:33:00'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:33:00'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:33:00'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:33:00'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:33:00'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:33:00'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 17:33:00'!
PASSED!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:33:33' prior: 50870160!
do: aStringOfCommands 
"
	aStringOfCommands do: [ :aCommand | ignoreNextCommands ifFalse: [self doOne: aCommand]].
"
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:37:47' prior: 50870202!
do: aStringOfCommands 
"
	aStringOfCommands do: [ :aCommand | ignoreNextCommands ifFalse: [self doOne: aCommand]].
"
	| i |
	i := 1.
	[(i < aStringOfCommands size) and: ignoreNextCommands not] whileTrue: [
		self doOne: (aStringOfCommands at: i).
		i := i + 1
	]! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:37:48'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:37:48'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:37:48'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:37:48'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:37:48'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:37:48'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:37:48'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:37:48'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:37:48'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:37:48'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:37:48'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:37:48'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:37:48'!
FAILURE!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:37:48'!
FAILURE!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 17:37:48'!
PASSED!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:37:56' prior: 50870209!
do: aStringOfCommands 
"
	aStringOfCommands do: [ :aCommand | ignoreNextCommands ifFalse: [self doOne: aCommand]].
"
	| i |
	i := 1.
	[(i = aStringOfCommands size) and: ignoreNextCommands not] whileTrue: [
		self doOne: (aStringOfCommands at: i).
		i := i + 1
	]! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:37:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:37:57'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:37:57'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:37:57'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:37:57'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:37:57'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:37:57'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:37:57'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:37:57'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:37:57'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:37:57'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:37:57'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:37:57'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:37:57'!
FAILURE!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 17:37:57'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:38:19' prior: 50870256!
do: aStringOfCommands 
"
	aStringOfCommands do: [ :aCommand | ignoreNextCommands ifFalse: [self doOne: aCommand]].
"
	| i |
	i := 1.
	[(i <= aStringOfCommands size) and: ignoreNextCommands not] whileTrue: [
		self doOne: (aStringOfCommands at: i).
		i := i + 1
	]! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:38:20'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:38:20'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:38:20'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:38:20'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:38:20'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:38:20'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:38:20'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:38:20'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:38:20'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:38:20'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:38:20'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:38:20'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:38:20'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:38:20'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 17:38:20'!
PASSED!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:38:24' prior: 50870303!
do: aStringOfCommands 
"
	aStringOfCommands do: [ :aCommand | ignoreNextCommands ifFalse: [self doOne: aCommand]].
"
	| i |
	i := 1.
	[(i <= aStringOfCommands size) and: ignoreNextCommands not] whileTrue: [
		self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:39:46' prior: 50870350!
do: aStringOfCommands 

	aStringOfCommands do: [ :aCommand | ignoreNextCommands ifFalse: [self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken:

	| i |
	i := 1.
	[(i <= aStringOfCommands size) and: ignoreNextCommands not] whileTrue: [
		self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:39:48'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:39:48'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:39:48'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:39:48'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:39:48'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:39:48'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:39:48'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:39:48'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:39:48'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:39:48'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:39:48'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:39:48'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:39:48'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:39:48'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 17:39:48'!
PASSED!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:40:01' prior: 50870362!
do: aStringOfCommands 

	aStringOfCommands do: [ :aCommand | ignoreNextCommands ifFalse: [self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| i |
	i := 1.
	[(i <= aStringOfCommands size) and: ignoreNextCommands not] whileTrue: [
		self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:40:02'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:40:02'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:40:02'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:40:02'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:40:02'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:40:02'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:40:02'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:40:02'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:40:02'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:40:02'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:40:02'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:40:02'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:40:02'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:40:02'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 17:40:02'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 17:40:33'!
test16
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover do: 'fxf'.
	aMarsRover do: 'f'.	

	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover isPointingTo.
	! !

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 17:40:34'!
FAILURE!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 17:41:47' prior: 50870463!
test16
	"
		This test was created supossing that the Mars Rover start working again after a packet was received with error.
		If this was not the expected behaviour, this test should be removed, and also then line marked in  do:
	"
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover do: 'fxf'.
	aMarsRover do: 'f'.	

	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover isPointingTo.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 17:41:49' prior: 50870475!
test16
	"
		This test was created supossing that the Mars Rover start working again after a packet was received with error.
		If this was not the expected behaviour, this test should be removed, and also then line marked in  do:
	"

	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover do: 'fxf'.
	aMarsRover do: 'f'.	

	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover isPointingTo.
	! !

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 17:41:51'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:42:22' prior: 50870412!
do: aStringOfCommands 

	ignoreNextCommands := false.
	aStringOfCommands do: [ :aCommand | ignoreNextCommands ifFalse: [self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| i |
	i := 1.
	[(i <= aStringOfCommands size) and: ignoreNextCommands not] whileTrue: [
		self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:42:28' prior: 50870512!
do: aStringOfCommands 

	ignoreNextCommands := false. "see test16"
	aStringOfCommands do: [ :aCommand | ignoreNextCommands ifFalse: [self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| i |
	i := 1.
	[(i <= aStringOfCommands size) and: ignoreNextCommands not] whileTrue: [
		self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:42:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:42:35'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:42:35'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:42:35'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:42:35'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:42:35'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:42:35'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:42:35'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:42:35'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:42:35'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:42:35'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:42:35'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:42:35'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:42:35'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 17:42:35'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 17:42:35'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position orientationState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-16-MARS-ROVER'!

!classDefinition: #MarsRover category: 'Ejercicio-16-MARS-ROVER' stamp: 'IO 10/25/2020 17:48:58'!
Object subclass: #MarsRover
	instanceVariableNames: 'position orientationState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-16-MARS-ROVER'!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:49:15' prior: 50870529!
do: aStringOfCommands 
	| ignoreNextCommands |
	ignoreNextCommands := false. "see test16"
	aStringOfCommands do: [ :aCommand | ignoreNextCommands ifFalse: [ignoreNextCommands := self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| i |
	i := 1.
	[(i <= aStringOfCommands size) and: ignoreNextCommands not] whileTrue: [
		self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:50:12' prior: 50870112!
doOne: aCommand
	aCommand = $f ifTrue: [position := position + orientationState asPoint. ^true].
	aCommand = $b ifTrue: [position := position - orientationState asPoint. ^true].
	aCommand = $l ifTrue: [orientationState rotateLeft.^true].
	aCommand = $r ifTrue: [orientationState rotateRight.^true].
	^false.
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:50:44' prior: 50870597!
do: aStringOfCommands 
	| executeNextCommands |
	executeNextCommands := false. "see test16"
	aStringOfCommands do: [ :aCommand | executeNextCommands ifFalse: [executeNextCommands := self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| i |
	i := 1.
	[(i <= aStringOfCommands size) and: ignoreNextCommands not] whileTrue: [
		self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:50:46'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:50:46'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:50:46'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:50:46'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:50:46'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:50:46'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:50:46'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:50:46'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:50:46'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:50:46'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:50:46'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:50:46'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:50:46'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:50:46'!
FAILURE!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 17:50:46'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 17:50:46'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:50:46'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:50:53' prior: 50870629!
do: aStringOfCommands 
	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aStringOfCommands do: [ :aCommand | executeNextCommands ifFalse: [executeNextCommands := self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| i |
	i := 1.
	[(i <= aStringOfCommands size) and: ignoreNextCommands not] whileTrue: [
		self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:50:54'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:50:54'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:50:54'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:50:54'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:50:54'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:50:54'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:50:54'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:50:54'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:50:54'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:50:54'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:50:54'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:50:54'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:50:54'!
FAILURE!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:50:54'!
FAILURE!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 17:50:54'!
FAILURE!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 17:50:54'!
FAILURE!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:51:05' prior: 50870688!
do: aStringOfCommands 
	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aStringOfCommands do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| i |
	i := 1.
	[(i <= aStringOfCommands size) and: ignoreNextCommands not] whileTrue: [
		self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:51:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:51:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:51:06'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:51:06'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:51:06'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:51:06'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:51:06'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:51:06'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:51:06'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:51:06'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:51:06'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:51:06'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:51:06'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:51:06'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 17:51:06'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 17:51:06'!
PASSED!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:51:12' prior: 50870745!
do: aStringOfCommands

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aStringOfCommands do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| i |
	i := 1.
	[(i <= aStringOfCommands size) and: ignoreNextCommands not] whileTrue: [
		self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:51:18' prior: 50870802!
do: aStringOfCommands

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aStringOfCommands do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| i |
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:51:23' prior: 50870821!
do: aStringOfCommands

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aStringOfCommands do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| i |
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:52:30' prior: 50870840!
do: aStringOfCommands
"
	| executeNextCommands |
	executeNextCommands := true. see test16
	aStringOfCommands do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self doOne: aCommand]].


	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:
"
	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
""! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:52:31'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:52:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:52:31'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:52:31'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:52:31'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:52:31'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:52:31'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:52:31'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:52:31'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:52:31'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:52:31'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:52:31'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:52:31'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:52:31'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 17:52:31'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 17:52:31'!
PASSED!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 17:52:48' prior: 50870860!
do: aStringOfCommands

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aStringOfCommands do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 17:52:49'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 17:52:49'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 17:52:49'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 17:52:49'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 17:52:49'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 17:52:49'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 17:52:49'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 17:52:49'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 17:52:49'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 17:52:49'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 17:52:49'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 17:52:49'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 17:52:49'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 17:52:49'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 17:52:49'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 17:52:49'!
PASSED!
!CardinalDirection methodsFor: 'converters' stamp: 'IO 10/25/2020 17:54:51' prior: 50867829!
asPoint

	"returns a point that, when added to antoher cardinal point, perofrms a 1 unit movement to the direction"
	
	self subclassResponsibility ! !
!CardinalDirection methodsFor: 'converters' stamp: 'IO 10/25/2020 17:56:21' prior: 50870978!
asPoint

	"return a point that, when added to antoher cardinal point, perofrms a 1 unit movement on this direction"
	
	self subclassResponsibility ! !
!CardinalDirection methodsFor: 'converters' stamp: 'IO 10/25/2020 17:56:29' prior: 50869563!
clockwise90degrees

	"return the cardinal direction when rotating 90 degrees clockwise"

	self subclassResponsibility.! !
!CardinalDirection methodsFor: 'converters' stamp: 'IO 10/25/2020 17:56:47' prior: 50869362!
counterclockwise90degrees

	"return the cardinal direction when rotating 90 degrees counterclockwise"

	self subclassResponsibility.! !
!East methodsFor: 'converters' stamp: 'IO 10/25/2020 17:57:23' prior: 50867845 overrides: 50870986!
asPoint

	"see superimplementor"
	
	^0@1! !
!East methodsFor: 'converters' stamp: 'IO 10/25/2020 17:57:30' prior: 50871009 overrides: 50870986!
asPoint

	"see superimplementor"
	
	^0@1.
! !
!East methodsFor: 'converters' stamp: 'IO 10/25/2020 17:57:36' prior: 50869570 overrides: 50870994!
clockwise90degrees
	"see superimplementor"
	^North new.
! !
!East methodsFor: 'converters' stamp: 'IO 10/25/2020 17:57:52' prior: 50871019 overrides: 50870994!
clockwise90degrees

	"see superimplementor"

	^North new.
! !
!East methodsFor: 'converters' stamp: 'IO 10/25/2020 17:57:57' prior: 50869437 overrides: 50871001!
counterclockwise90degrees

	"see superimplementor"

	^South new.
! !
!North methodsFor: 'converters' stamp: 'IO 10/25/2020 17:59:55' prior: 50867861 overrides: 50870986!
asPoint

	"see superimplementor"

	^1@0.
! !
!North methodsFor: 'converters' stamp: 'IO 10/25/2020 18:00:01' prior: 50869652 overrides: 50870994!
clockwise90degrees

	"see superimplementor"

	^West new.
! !
!North methodsFor: 'converters' stamp: 'IO 10/25/2020 18:00:06' prior: 50869432 overrides: 50871001!
counterclockwise90degrees

	"see superimplementor"

	^East new.
! !
!South methodsFor: 'converters' stamp: 'IO 10/25/2020 18:00:39' prior: 50867877 overrides: 50870986!
asPoint

	"see superimplementor"

	^-1@0.
! !
!South methodsFor: 'converters' stamp: 'IO 10/25/2020 18:00:52' prior: 50869802 overrides: 50870994!
clockwise90degrees

	"see superimplementor"

	^East new.! !
!South methodsFor: 'converters' stamp: 'IO 10/25/2020 18:00:56' prior: 50869427 overrides: 50871001!
counterclockwise90degrees

	"see superimplementor"

	^West new.! !
!West methodsFor: 'converters' stamp: 'IO 10/25/2020 18:01:24' prior: 50867893 overrides: 50870986!
asPoint

	"see superimplementor"

	^0@-1! !
!West methodsFor: 'converters' stamp: 'IO 10/25/2020 18:01:25' prior: 50871070 overrides: 50870986!
asPoint

	"see superimplementor"

	^0@-1.! !
!West methodsFor: 'converters' stamp: 'IO 10/25/2020 18:01:31' prior: 50869760 overrides: 50870994!
clockwise90degrees

	"see superimplementor"

	^South new.
! !
!West methodsFor: 'converters' stamp: 'IO 10/25/2020 18:01:36' prior: 50869422 overrides: 50871001!
counterclockwise90degrees

	"see superimplementor"

	^North new.
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:02:02'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:02:02'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:02:02'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:02:02'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:02:02'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:02:02'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:02:02'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:02:02'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:02:02'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:02:02'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:02:02'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:02:02'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:02:02'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:02:02'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:02:02'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:02:02'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'IO 10/25/2020 18:02:06' prior: 50870033!
initializeAt: aPoint pointingTo: aCardinalDirection 

	position := aPoint.
	orientationState := MarsRoverOrientationState pointingTo: aCardinalDirection.

! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:02:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:02:08'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:02:08'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:02:08'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:02:08'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:02:08'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:02:08'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:02:08'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:02:08'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:02:08'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:02:08'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:02:08'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:02:08'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:02:08'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:02:08'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:02:08'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'IO 10/25/2020 18:02:26' prior: 50871129!
initializeAt: aPoint pointingTo: aCardinalDirection 

	position := aPoint.
	orientationState := MarsRoverOrientationState pointingTo: aCardinalDirection.
! !
!CardinalDirection methodsFor: 'converters' stamp: 'IO 10/25/2020 18:02:34' prior: 50870986!
asPoint

	"return a point that, when added to antoher cardinal point, perofrms a 1 unit movement on this direction"
	
	self subclassResponsibility.
! !
!CardinalDirection methodsFor: 'rotation operations' stamp: 'IO 10/25/2020 18:02:39' prior: 50870994!
clockwise90degrees

	"return the cardinal direction when rotating 90 degrees clockwise"

	self subclassResponsibility.
! !
!CardinalDirection methodsFor: 'rotation operations' stamp: 'IO 10/25/2020 18:02:42' prior: 50871001!
counterclockwise90degrees

	"return the cardinal direction when rotating 90 degrees counterclockwise"

	self subclassResponsibility.
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:03:39' prior: 50870919!
do: aStringOfCommands

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aStringOfCommands do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:07:26' prior: 50871207!
do: aStringOfCommands

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aStringOfCommands do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:07:27'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:07:27'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:07:27'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:07:27'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:07:27'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:07:27'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:07:27'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:07:27'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:07:27'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:07:27'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:07:27'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:07:27'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:07:27'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:07:27'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:07:27'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:07:27'!
PASSED!

----SNAPSHOT----(25 October 2020 18:07:53) CuisUniversity-4384.image priorSource: 17206668!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:09:40'!
execute: aStringOfCommands

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aStringOfCommands do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50869687!
test11
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North.
	aMarsRover execute: 'r'.
	
	self assert: West equals: aMarsRover isPointingTo.
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50871228!
do: aStringOfCommands

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aStringOfCommands execute: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50868707!
test02
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'b'.
	
	self assert: 1@0 equals: aMarsRover position.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50869680!
test10
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: East.
	aMarsRover execute: 'r'.
	
	self assert: North equals: aMarsRover isPointingTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50869034!
test07
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West.
	aMarsRover execute: 'l'.
	
	self assert: North equals: aMarsRover isPointingTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50869722!
test12
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West.
	aMarsRover execute: 'r'.
	
	self assert: South equals: aMarsRover isPointingTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50868715!
test03
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North.
	aMarsRover execute: 'f'.
	
	self assert: 1@0 equals: aMarsRover position.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50869792!
test13
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'r'.
	
	self assert: East equals: aMarsRover isPointingTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50870492!
test16
	"
		This test was created supossing that the Mars Rover start working again after a packet was received with error.
		If this was not the expected behaviour, this test should be removed, and also then line marked in  do:
	"

	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'fxf'.
	aMarsRover execute: 'f'.	

	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover isPointingTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50869981!
test15
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'fxf'.
	
	self assert: -1@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover isPointingTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50868699!
test01
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'f'.
	
	self assert: -1@0 equals: aMarsRover position.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50869120!
test09
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: East.
	aMarsRover execute: 'l'.
	
	self assert: South equals: aMarsRover isPointingTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50869041!
test08
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North.
	aMarsRover execute: 'l'.
	
	self assert: East equals: aMarsRover isPointingTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50868723!
test04
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: East.
	aMarsRover execute: 'f'.
	
	self assert: 0@1 equals: aMarsRover position.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50868768!
test06
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'l'.
	
	self assert: West equals: aMarsRover isPointingTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50869836!
test14
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'ff'.
	
	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover isPointingTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50868731!
test05
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West.
	aMarsRover execute: 'f'.
	
	self assert: 0@-1 equals: aMarsRover position.
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:09:40' prior: 50871289!
execute: aStringOfCommands

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aStringOfCommands execute: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !

!methodRemoval: MarsRover #do: stamp: 'IO 10/25/2020 18:09:40'!
do: aStringOfCommands

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aStringOfCommands execute: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:09:44'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:09:44'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:09:44'!
ERROR!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:09:44'!
ERROR!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:09:44'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:09:44'!
ERROR!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:09:44'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:09:44'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:09:44'!
ERROR!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:09:44'!
ERROR!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:09:44'!
ERROR!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:09:44'!
ERROR!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:09:44'!
ERROR!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:09:44'!
ERROR!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:09:44'!
ERROR!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:09:44'!
ERROR!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:10:11' prior: 50871475!
execute: aStringOfCommands

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aStringOfCommands do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:10:13'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:10:13'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:10:13'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:10:13'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:10:13'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:10:13'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:10:13'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:10:13'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:10:13'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:10:13'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:10:13'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:10:13'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:10:13'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:10:13'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:10:13'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:10:13'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:10:19'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:10:19'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:10:19'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:10:19'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:10:19'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:10:19'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:10:19'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:10:19'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:10:19'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:10:19'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:10:19'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:10:19'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:10:19'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:10:19'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:10:19'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:10:19'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:10:22'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:10:22'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:10:22'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:10:22'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:10:22'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:10:22'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:10:22'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:10:22'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:10:22'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:10:22'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:10:22'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:10:22'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:10:22'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:10:22'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:10:22'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:10:22'!
PASSED!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:10:38' prior: 50871554!
execute: aCommandPack

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aCommandPack do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self doOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:12:07'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:12:07'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:12:07'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:12:07'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:12:07'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:12:07'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:12:07'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:12:07'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:12:07'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:12:07'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:12:07'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:12:07'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:12:07'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:12:07'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:12:07'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:12:07'!
PASSED!
!MarsRover methodsFor: 'command execution' stamp: 'IO 10/25/2020 18:13:01'!
executeOne: aCommand
	aCommand = $f ifTrue: [position := position + orientationState asPoint. ^true].
	aCommand = $b ifTrue: [position := position - orientationState asPoint. ^true].
	aCommand = $l ifTrue: [orientationState rotateLeft.^true].
	aCommand = $r ifTrue: [orientationState rotateRight.^true].
	^false.
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:13:01' prior: 50871688!
execute: aCommandPack

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aCommandPack do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self executeOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !

!methodRemoval: MarsRover #doOne: stamp: 'IO 10/25/2020 18:13:01'!
doOne: aCommand
	aCommand = $f ifTrue: [position := position + orientationState asPoint. ^true].
	aCommand = $b ifTrue: [position := position - orientationState asPoint. ^true].
	aCommand = $l ifTrue: [orientationState rotateLeft.^true].
	aCommand = $r ifTrue: [orientationState rotateRight.^true].
	^false.
!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:13:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:13:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:13:06'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:13:06'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:13:06'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:13:06'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:13:06'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:13:06'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:13:06'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:13:06'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:13:06'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:13:06'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:13:06'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:13:06'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:13:06'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:13:06'!
PASSED!
!MarsRover methodsFor: 'command execution' stamp: 'IO 10/25/2020 18:13:26' prior: 50871746!
executeOne: command
	command = $f ifTrue: [position := position + orientationState asPoint. ^true].
	command = $b ifTrue: [position := position - orientationState asPoint. ^true].
	command = $l ifTrue: [orientationState rotateLeft.^true].
	command = $r ifTrue: [orientationState rotateRight.^true].
	^false.
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:14:51' prior: 50871759!
execute: aCommandPack

	"execute each command in the pack, and, if one command is errored, will stop executing following commands"

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aCommandPack do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self executeOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:15:15' prior: 50871843!
execute: aCommandPack

	"execute each command in the pack. If one command is errored, will stop executing the following commands"

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aCommandPack do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self executeOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:16:15' prior: 50871868!
execute: aCommandPack

	"
		execute each command in the pack. If one command is errored, will stop executing the following commands.
		Implementation details: using do looks better on our eyes. bellow you can find an implementation that will
		perform less iterations if one command fails.
	"

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aCommandPack do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self executeOne: aCommand]].

"
	this implementation does not execute each non-executed command when the Mars Rover gets broken,
	but the one above looks better on our eyes:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:16:30' prior: 50871893!
execute: aCommandPack

	"
		execute each command in the pack. If one command is errored, will stop executing the following commands.
		Implementation details: using do looks better on our eyes. bellow you can find an implementation that will
		perform less iterations if one command fails.
	"

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aCommandPack do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self executeOne: aCommand]].

"
	secondary implementation

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aStringOfCommands size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aStringOfCommands at: i).
		i := i + 1
	].
"! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:16:43' prior: 50871923!
execute: aCommandPack

	"
		execute each command in the pack. If one command is errored, will stop executing the following commands.
		Implementation details: using do looks better on our eyes. bellow you can find an implementation that will
		perform less iterations if one command fails.
	"

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aCommandPack do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self executeOne: aCommand]].

"
	secondary implementation

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aCommandPack size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aCommandPack at: i).
		i := i + 1
	].
"! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:16:44'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:16:44'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:16:44'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:16:44'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:16:44'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:16:44'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:16:44'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:16:44'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:16:44'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:16:44'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:16:44'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:16:44'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:16:44'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:16:44'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:16:44'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:16:44'!
PASSED!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:17:02' prior: 50871949!
execute: aCommandPack

	"
		execute each command in the pack. If one command is errored, will stop executing the following commands.
		Implementation details: using do looks better on our eyes. bellow you can find an implementation that will
		perform less iterations if one command fails.
	"

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aCommandPack do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self executeOne: aCommand]].

	"
		secondary implementation:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aCommandPack size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aCommandPack at: i).
		i := i + 1
	].
	"! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:17:13' prior: 50872012!
execute: aCommandPack

	"
		execute each command in the pack. If one command is errored, will stop executing the following commands.
		Implementation details: using do: looks better on our eyes. bellow you can find an implementation that will
		perform less iterations if one command fails.
	"

	| executeNextCommands |
	executeNextCommands := true. "see test16"
	aCommandPack do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self executeOne: aCommand]].

	"
		secondary implementation:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aCommandPack size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aCommandPack at: i).
		i := i + 1
	].
	"! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:17:14'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:17:14'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:17:14'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:17:14'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:17:14'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:17:14'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:17:14'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:17:14'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:17:14'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:17:14'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:17:14'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:17:14'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:17:14'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:17:14'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:17:14'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:17:14'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'IO 10/25/2020 18:19:01' prior: 50871175!
initializeAt: aPoint pointingTo: aCardinalDirection

	"
		Implementation details: we consider Cardinal Directions are unique, so we implement class as param type for
		CardinalDirection instead of instance.
	"

	position := aPoint.
	orientationState := MarsRoverOrientationState pointingTo: aCardinalDirection.
! !
!MarsRover methodsFor: 'initialization' stamp: 'IO 10/25/2020 18:19:22' prior: 50872101!
initializeAt: aPosition pointingTo: aCardinalDirection

	"
		Implementation details: we consider Cardinal Directions are unique, so we implement class as param type for
		CardinalDirection instead of instance.
	"

	position := aPosition.
	orientationState := MarsRoverOrientationState pointingTo: aCardinalDirection.
! !
!MarsRover methodsFor: 'initialization' stamp: 'IO 10/25/2020 18:20:26' prior: 50872114!
initializeAt: aPosition pointingTo: aCardinalDirection

	"
		Implementation details: we consider Cardinal Directions are unique (only one North exists), so we implement
		class as param type for CardinalDirection instead of instance.
	"

	position := aPosition.
	orientationState := MarsRoverOrientationState pointingTo: aCardinalDirection.
! !
!MarsRover methodsFor: 'accessing' stamp: 'IO 10/25/2020 18:21:28'!
orientedTo
	^orientationState pointingTo.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:21:28' prior: 50871457!
test14
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'ff'.
	
	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientedTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:21:28' prior: 50871433!
test08
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North.
	aMarsRover execute: 'l'.
	
	self assert: East equals: aMarsRover orientedTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:21:28' prior: 50871389!
test16
	"
		This test was created supossing that the Mars Rover start working again after a packet was received with error.
		If this was not the expected behaviour, this test should be removed, and also then line marked in  do:
	"

	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'fxf'.
	aMarsRover execute: 'f'.	

	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientedTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:21:28' prior: 50871357!
test07
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West.
	aMarsRover execute: 'l'.
	
	self assert: North equals: aMarsRover orientedTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:21:28' prior: 50871381!
test13
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'r'.
	
	self assert: East equals: aMarsRover orientedTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:21:28' prior: 50871425!
test09
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: East.
	aMarsRover execute: 'l'.
	
	self assert: South equals: aMarsRover orientedTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:21:28' prior: 50871365!
test12
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West.
	aMarsRover execute: 'r'.
	
	self assert: South equals: aMarsRover orientedTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:21:28' prior: 50871311!
test11
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North.
	aMarsRover execute: 'r'.
	
	self assert: West equals: aMarsRover orientedTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:21:28' prior: 50871349!
test10
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: East.
	aMarsRover execute: 'r'.
	
	self assert: North equals: aMarsRover orientedTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:21:28' prior: 50871449!
test06
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'l'.
	
	self assert: West equals: aMarsRover orientedTo.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:21:28' prior: 50871407!
test15
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'fxf'.
	
	self assert: -1@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientedTo.
	! !

!methodRemoval: MarsRover #isPointingTo stamp: 'IO 10/25/2020 18:21:28'!
isPointingTo
	^orientationState pointingTo.!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:21:32'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:21:32'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:21:32'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:21:32'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:21:32'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:21:32'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:21:32'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:21:32'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:21:32'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:21:32'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:21:32'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:21:32'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:21:32'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:21:32'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:21:32'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:21:32'!
PASSED!
!MarsRover methodsFor: 'accessing' stamp: 'IO 10/25/2020 18:21:35' prior: 50872140!
orientedTo
	^orientationState pointingTo.
! !
!MarsRover methodsFor: 'accessing' stamp: 'IO 10/25/2020 18:21:43' prior: 50867926!
position
	^position.
! !
!MarsRover methodsFor: 'accessing' stamp: 'IO 10/25/2020 18:22:23'!
orientation
	^orientationState pointingTo.
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:22:23' prior: 50872189!
test13
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'r'.
	
	self assert: East equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:22:23' prior: 50872213!
test11
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North.
	aMarsRover execute: 'r'.
	
	self assert: West equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:22:23' prior: 50872229!
test06
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'l'.
	
	self assert: West equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:22:23' prior: 50872163!
test16
	"
		This test was created supossing that the Mars Rover start working again after a packet was received with error.
		If this was not the expected behaviour, this test should be removed, and also then line marked in  do:
	"

	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'fxf'.
	aMarsRover execute: 'f'.	

	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:22:23' prior: 50872237!
test15
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'fxf'.
	
	self assert: -1@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:22:23' prior: 50872197!
test09
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: East.
	aMarsRover execute: 'l'.
	
	self assert: South equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:22:23' prior: 50872155!
test08
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North.
	aMarsRover execute: 'l'.
	
	self assert: East equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:22:23' prior: 50872221!
test10
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: East.
	aMarsRover execute: 'r'.
	
	self assert: North equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:22:23' prior: 50872205!
test12
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West.
	aMarsRover execute: 'r'.
	
	self assert: South equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:22:23' prior: 50872145!
test14
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'ff'.
	
	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:22:23' prior: 50872181!
test07
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West.
	aMarsRover execute: 'l'.
	
	self assert: North equals: aMarsRover orientation.
	! !

!methodRemoval: MarsRover #orientedTo stamp: 'IO 10/25/2020 18:22:23'!
orientedTo
	^orientationState pointingTo.
!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:22:26'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:22:26'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:22:26'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:22:26'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:22:26'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:22:26'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:22:26'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:22:26'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:22:26'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:22:26'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:22:26'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:22:26'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:22:26'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:22:26'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:22:26'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:22:26'!
PASSED!
!MarsRoverOrientationState methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:23:21'!
orientation
	^orientation class.
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 18:23:21' prior: 50872296!
orientation
	^orientationState orientation.
! !

!methodRemoval: MarsRoverOrientationState #pointingTo stamp: 'IO 10/25/2020 18:23:21'!
pointingTo
	^orientation class.
!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:23:27'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:23:27'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:23:27'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:23:27'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:23:27'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:23:27'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:23:27'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:23:27'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:23:27'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:23:27'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:23:27'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:23:27'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:23:27'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:23:27'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:23:27'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:23:27'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'IO 10/25/2020 18:24:10' prior: 50872127!
initializeAt: aPosition pointingTo: aCardinalDirection

	position := aPosition.
	orientationState := MarsRoverOrientationState pointingTo: aCardinalDirection.
! !
!MarsRoverOrientationState methodsFor: 'accessing' stamp: 'IO 10/25/2020 18:25:47' prior: 50872444!
orientation

	"
		Implementation details: we consider Cardinal Directions are unique (only one North exists), so we use the
		class representing the Cardinal Direction instead of the instance.
	"

	^orientation class.
! !
!CardinalDirection methodsFor: 'converters' stamp: 'IO 10/25/2020 18:30:37' prior: 50871183!
asPoint

	"return a point that, when added to antoher point, perofrms a 1 unit movement on this direction"
	
	self subclassResponsibility.
! !
!CardinalDirection methodsFor: 'converters' stamp: 'IO 10/25/2020 18:34:29' prior: 50872514!
asPoint

	"
		returns the point representing this cardinal direction.
		Implementation details: we consider a Cardinal Direction can be represented by a point indicating
		the direction as a 1-step from the 0@0. This is useful when operating movements over different
		directions
	"

	self subclassResponsibility.
! !
!CardinalDirection methodsFor: 'converters' stamp: 'IO 10/25/2020 18:34:39' prior: 50872522!
asPoint

	"
		returns the point representing this cardinal direction.
		Implementation details: we consider a Cardinal Direction can be represented by a point indicating
		the direction as a 1 unit from the 0@0. This is useful when operating movements over different
		directions
	"

	self subclassResponsibility.
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:39:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:39:35'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:39:35'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:39:35'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:39:35'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:39:35'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:39:35'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:39:35'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:39:35'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:39:35'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:39:35'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:39:35'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:39:35'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:39:35'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:39:35'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:39:35'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 18:40:14' prior: 50872325!
test16
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'fxf'.
	aMarsRover execute: 'f'.	

	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:40:25' prior: 50872038!
execute: aCommandPack

	"
		execute each command in the pack. If one command is errored, will stop executing the following commands.
		Implementation details: using do: looks better on our eyes. bellow you can find an implementation that will
		perform less iterations if one command fails.
	"

	| executeNextCommands |
	executeNextCommands := true.
	aCommandPack do: [ :aCommand | executeNextCommands ifTrue: [executeNextCommands := self executeOne: aCommand]].

	"
		secondary implementation:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aCommandPack size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aCommandPack at: i).
		i := i + 1
	].
	"! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:40:28'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:40:28'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:40:28'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:40:28'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:40:28'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:40:28'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:40:28'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:40:28'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:40:28'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:40:28'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:40:28'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:40:28'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:40:28'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:40:28'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:40:28'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:40:28'!
PASSED!

----SNAPSHOT----(25 October 2020 18:40:37) CuisUniversity-4384.image priorSource: 17268332!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 18:45:52' prior: 50872343!
test15
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.

	self
		should: [	aMarsRover execute: 'fxf'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.

	self assert: -1@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
! !

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:45:55'!
ERROR!
!MarsRover class methodsFor: 'nil' stamp: 'IO 10/25/2020 18:46:49'!
invalidCommandError
	^'The Mars ROver received an invalid command.'.
! !
!MarsRover methodsFor: 'command execution' stamp: 'IO 10/25/2020 18:48:01' prior: 50871830!
executeOne: command
	command = $f ifTrue: [position := position + orientationState asPoint. ^true].
	command = $b ifTrue: [position := position - orientationState asPoint. ^true].
	command = $l ifTrue: [orientationState rotateLeft.^true].
	command = $r ifTrue: [orientationState rotateRight.^true].
	self signal: self class invalidCommandError.
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:48:05'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:48:05'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:48:05'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:48:05'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:48:05'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:48:05'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:48:05'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:48:05'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:48:05'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:48:05'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:48:05'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:48:05'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:48:05'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:48:05'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:48:05'!
FAILURE!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:48:05'!
ERROR!
!MarsRover methodsFor: 'command execution' stamp: 'IO 10/25/2020 18:48:47' prior: 50872683!
executeOne: command
	command = $f ifTrue: [position := position + orientationState asPoint. ^true].
	command = $b ifTrue: [position := position - orientationState asPoint. ^true].
	command = $l ifTrue: [orientationState rotateLeft.^true].
	command = $r ifTrue: [orientationState rotateRight.^true].
	self error: self class invalidCommandError.
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:48:48'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:48:48'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:48:48'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:48:48'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:48:48'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:48:48'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:48:48'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:48:48'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:48:48'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:48:48'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:48:48'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:48:48'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:48:48'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:48:48'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:48:48'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:48:48'!
ERROR!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:48:48'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:48:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:48:57'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:48:57'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:48:57'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:48:57'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:48:57'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:48:57'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:48:57'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:48:57'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:48:57'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:48:57'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:48:57'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:48:57'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:48:57'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:48:57'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:48:57'!
ERROR!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:48:57'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:49:01'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:49:01'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:49:01'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:49:01'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:49:01'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:49:01'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:49:01'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:49:01'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:49:01'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:49:01'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:49:01'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:49:01'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:49:01'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:49:01'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:49:01'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:49:01'!
ERROR!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:49:01'!
ERROR!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 18:49:33' prior: 50872586!
test16
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	
	self
		should: [	aMarsRover execute: 'fxf'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.

	aMarsRover execute: 'f'.	

	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	! !

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:49:35'!
PASSED!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:50:08' prior: 50872597!
execute: aCommandPack

	"
		execute each command in the pack. If one command is errored, will stop executing the following commands.
		Implementation details: using do: looks better on our eyes. bellow you can find an implementation that will
		perform less iterations if one command fails.
	"

	aCommandPack do: [ :aCommand | self executeOne: aCommand].

	"
		secondary implementation:

	| executeNextCommands i |
	executeNextCommands := true.
	i := 1.
	[(i <= aCommandPack size) and: executeNextCommands] whileTrue: [
		executeNextCommands := self doOne: (aCommandPack at: i).
		i := i + 1
	].
	"! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:50:09'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:50:09'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:50:09'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:50:09'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:50:09'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:50:09'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:50:09'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:50:09'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:50:09'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:50:09'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:50:09'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:50:09'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:50:09'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:50:09'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:50:09'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:50:09'!
PASSED!
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:50:13' prior: 50872921!
execute: aCommandPack

	"
		execute each command in the pack. If one command is errored, will stop executing the following commands.
		Implementation details: using do: looks better on our eyes. bellow you can find an implementation that will
		perform less iterations if one command fails.
	"

	aCommandPack do: [ :aCommand | self executeOne: aCommand].
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:50:25' prior: 50872981!
execute: aCommandPack

	"
		execute each command in the pack. If one command is errored, will stop executing the following commands and
		signal an error.
	"

	aCommandPack do: [ :aCommand | self executeOne: aCommand].
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:50:36' prior: 50872996!
execute: aCommandPack

	"
		execute each command in the pack
	"

	aCommandPack do: [ :aCommand | self executeOne: aCommand].
! !
!MarsRover methodsFor: 'command receiving' stamp: 'IO 10/25/2020 18:50:41' prior: 50873006!
execute: aCommandPack

	"execute each command in the pack"

	aCommandPack do: [ :aCommand | self executeOne: aCommand].
! !
!MarsRover methodsFor: 'command execution' stamp: 'IO 10/25/2020 18:51:12' prior: 50872735!
executeOne: command

	"
		execute a given command. If the command is invalid will signal an error.
	"

	command = $f ifTrue: [position := position + orientationState asPoint. ^true].
	command = $b ifTrue: [position := position - orientationState asPoint. ^true].
	command = $l ifTrue: [orientationState rotateLeft.^true].
	command = $r ifTrue: [orientationState rotateRight.^true].
	self error: self class invalidCommandError.
! !
!MarsRover methodsFor: 'command execution' stamp: 'IO 10/25/2020 18:51:14' prior: 50873020!
executeOne: command

	"
		execute a given command. If the command is invalid will signal an error.
	"

	command = $f ifTrue: [position := position + orientationState asPoint. ^true].
	command = $b ifTrue: [position := position - orientationState asPoint. ^true].
	command = $l ifTrue: [orientationState rotateLeft.^true].
	command = $r ifTrue: [orientationState rotateRight.^true].

	self error: self class invalidCommandError.
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:51:15'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:51:15'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:51:15'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:51:15'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:51:15'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:51:15'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:51:15'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:51:15'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:51:15'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:51:15'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:51:15'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:51:15'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:51:15'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:51:15'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:51:15'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:51:15'!
PASSED!
!MarsRover methodsFor: 'command execution' stamp: 'IO 10/25/2020 18:51:25' prior: 50873037!
executeOne: command

	"
		execute a given command. If the command is invalid will signal an error.
	"

	command = $f ifTrue: [position := position + orientationState asPoint. ^true].
	command = $b ifTrue: [position := position - orientationState asPoint. ^true].
	command = $l ifTrue: [orientationState rotateLeft. ^true].
	command = $r ifTrue: [orientationState rotateRight. ^true].

	self error: self class invalidCommandError.
! !
!MarsRover methodsFor: 'command execution' stamp: 'IO 10/25/2020 18:51:47' prior: 50873091!
executeOne: command

	"
		execute a given command. If the command is invalid will signal an error.
	"

	command = $f ifTrue: [^position := position + orientationState asPoint].
	command = $b ifTrue: [^position := position - orientationState asPoint].
	command = $l ifTrue: [^orientationState rotateLeft].
	command = $r ifTrue: [^orientationState rotateRight].

	self error: self class invalidCommandError.
! !

!testRun: #MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:51:49'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:51:49'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:51:49'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:51:49'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:51:49'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:51:49'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:51:49'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:51:49'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:51:49'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:51:49'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:51:49'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:51:49'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:51:49'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:51:49'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:51:49'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:51:49'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 18:53:03'!
test01marsRoverMovesForward
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'f'.
	
	self assert: -1@0 equals: aMarsRover position.
	! !

!methodRemoval: MarsRoverTest #test01 stamp: 'IO 10/25/2020 18:53:03'!
test01
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'f'.
	
	self assert: -1@0 equals: aMarsRover position.
	!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 18:53:06'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 18:53:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:53:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:53:06'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:53:06'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:53:06'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:53:06'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:53:06'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:53:06'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:53:06'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:53:06'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:53:06'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:53:06'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:53:06'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:53:06'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:53:06'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:53:06'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 18:53:17' prior: 50873161!
test01marsRoverMovesForward
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: South.

	aMarsRover execute: 'f'.

	self assert: -1@0 equals: aMarsRover position.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 18:53:44'!
test02marsRoverMovesBackwards
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'b'.
	
	self assert: 1@0 equals: aMarsRover position.
	! !

!methodRemoval: MarsRoverTest #test02 stamp: 'IO 10/25/2020 18:53:44'!
test02
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'b'.
	
	self assert: 1@0 equals: aMarsRover position.
	!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 18:53:48'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 18:53:48'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 18:53:48'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:53:48'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:53:48'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:53:48'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:53:48'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:53:48'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:53:48'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:53:48'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:53:48'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:53:48'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:53:48'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:53:48'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:53:48'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:53:48'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:53:48'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 18:53:58' prior: 50873226!
test02marsRoverMovesBackwards
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: South.

	aMarsRover execute: 'b'.
	
	self assert: 1@0 equals: aMarsRover position.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 18:54:00' prior: 50873283!
test02marsRoverMovesBackwards
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: South.

	aMarsRover execute: 'b'.
	
	self assert: 1@0 equals: aMarsRover position.
! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 18:56:03' prior: 50871373!
test03
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North.
	aMarsRover execute: 'f'.
	
	"self assert: 1@0 equals: aMarsRover position."
	! !

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:56:04'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 18:56:04'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 18:56:04'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:56:04'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:56:04'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:56:04'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:56:04'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:56:04'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:56:04'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:56:04'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:56:04'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:56:04'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:56:04'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:56:04'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:56:04'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:56:04'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:56:04'!
PASSED!
!North methodsFor: 'converters' stamp: 'IO 10/25/2020 18:56:16' prior: 50871036 overrides: 50872535!
asPoint

	"see superimplementor"

	^3@0.
! !

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 18:56:16'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 18:56:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:56:16'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:56:16'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:56:16'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:56:16'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:56:16'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:56:16'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:56:16'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:56:16'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:56:16'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:56:16'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:56:16'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:56:16'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:56:16'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:56:16'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 18:56:57'!
test03marsRoverMovesForwardToNorth
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North.
	aMarsRover execute: 'f'.
	
	"self assert: 1@0 equals: aMarsRover position."
	! !

!methodRemoval: MarsRoverTest #test03 stamp: 'IO 10/25/2020 18:56:57'!
test03
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: North.
	aMarsRover execute: 'f'.
	
	"self assert: 1@0 equals: aMarsRover position."
	!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 18:57:01'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 18:57:01'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 18:57:01'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 18:57:01'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:57:01'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:57:01'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:57:01'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:57:01'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:57:01'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:57:01'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:57:01'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:57:01'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:57:01'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:57:01'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:57:01'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:57:01'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:57:01'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 18:57:11' prior: 50873394!
test03marsRoverMovesForwardToNorth
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: North.

	aMarsRover execute: 'f'.
	
	self assert: 1@0 equals: aMarsRover position.
	! !

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 18:57:12'!
FAILURE!
!North methodsFor: 'converters' stamp: 'IO 10/25/2020 18:57:21' prior: 50873351 overrides: 50872535!
asPoint

	"see superimplementor"

	^1@0.
! !

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 18:57:23'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 18:57:23'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 18:57:39'!
test04marsRoverMovesForwardToEast
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: East.
	aMarsRover execute: 'f'.
	
	self assert: 0@1 equals: aMarsRover position.
	! !

!methodRemoval: MarsRoverTest #test04 stamp: 'IO 10/25/2020 18:57:39'!
test04
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: East.
	aMarsRover execute: 'f'.
	
	self assert: 0@1 equals: aMarsRover position.
	!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 18:57:50'!
test05marsRoverMovesForwardToWest
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West.
	aMarsRover execute: 'f'.
	
	self assert: 0@-1 equals: aMarsRover position.
	! !

!methodRemoval: MarsRoverTest #test05 stamp: 'IO 10/25/2020 18:57:50'!
test05
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: West.
	aMarsRover execute: 'f'.
	
	self assert: 0@-1 equals: aMarsRover position.
	!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 18:58:07' prior: 50873525!
test05marsRoverMovesForwardToWest
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: West.

	aMarsRover execute: 'f'.
	
	self assert: 0@-1 equals: aMarsRover position.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 18:58:15' prior: 50873510!
test04marsRoverMovesForwardToEast
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: East.

	aMarsRover execute: 'f'.
	
	self assert: 0@1 equals: aMarsRover position.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:01:01'!
assertAMarsRoverStartsPointingTo: aCardinalDirection andMovesForwardTo: aPosition
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: aCardinalDirection.

	aMarsRover execute: 'f'.
	
	self assert: aPosition equals: aMarsRover position.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:01:58' prior: 50873218!
test01marsRoverMovesForward
	self assertAMarsRoverStartsPointingTo: South andMovesForwardTo: -1@0.
! !
!MarsRoverTest methodsFor: 'test tools' stamp: 'IO 10/25/2020 19:03:10' prior: 50873558!
assertAMarsRoverStartsPointingTo: aCardinalDirection andMovesForwardTo: aPosition

	"
		create a Mars Rover at 0@0 oriented to a given position. Will execute 'f' command pack and assert
		it finally steps on a given position.
	"

	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: aCardinalDirection.

	aMarsRover execute: 'f'.
	
	self assert: aPosition equals: aMarsRover position.
	! !

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:03:11'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:03:11'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:03:11'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:03:11'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:03:11'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 19:03:11'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 19:03:11'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 19:03:11'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 19:03:11'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:03:11'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 19:03:11'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 19:03:11'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 19:03:11'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:03:11'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:03:11'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:03:11'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:03:56' prior: 50873453!
test03marsRoverMovesForwardToNorth
	self assertAMarsRoverStartsPointingTo: North andMovesForwardTo: 1@0.! !

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:03:57'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:03:57'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:03:57'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:03:57'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:03:57'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:03:57'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 19:03:57'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 19:03:57'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 19:03:57'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 19:03:57'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:03:57'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 19:03:57'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 19:03:57'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 19:03:57'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:03:57'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:03:57'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:03:57'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:04:09' prior: 50873550!
test04marsRoverMovesForwardToEast
	self assertAMarsRoverStartsPointingTo: East andMovesForwardTo: 0@1.
! !

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:04:10'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:04:10'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:04:10'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:04:10'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:04:10'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:04:10'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 19:04:10'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 19:04:10'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 19:04:10'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 19:04:10'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:04:10'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 19:04:10'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 19:04:10'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 19:04:10'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:04:10'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:04:10'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:04:10'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:04:26' prior: 50873541!
test05marsRoverMovesForwardToWest
	self assertAMarsRoverStartsPointingTo: West andMovesForwardTo: 0@-1.
! !

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:04:27'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:04:27'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:04:27'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:04:27'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:04:27'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:04:27'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 19:04:27'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 19:04:27'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 19:04:27'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 19:04:27'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:04:27'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 19:04:27'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 19:04:27'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 19:04:27'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:04:27'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:04:27'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:04:27'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:06:02'!
assertAMarsRoverStartsOrientedTo: aCardinalDirection andRotatesLeftTo: anotherCardinalDirection
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: aCardinalDirection.
	aMarsRover execute: 'l'.
	
	self assert: anotherCardinalDirection equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'test tools' stamp: 'IO 10/25/2020 19:07:15' prior: 50873785!
assertAMarsRoverStartsOrientedTo: aCardinalDirection andRotatesLeftTo: anotherCardinalDirection

	"
		create a Mars Rover at 0@0 oriented to a given position. Will execute 'l' command pack and assert
		it is finally oriented to the other given cardinal direction.
	"

	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: aCardinalDirection.

	aMarsRover execute: 'l'.
	
	self assert: anotherCardinalDirection equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:07:44' prior: 50872317!
test06
	self assertAMarsRoverStartsOrientedTo: South andRotatesLeftTo: West.
! !

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 19:07:45'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:08:11' prior: 50872395!
test07
	self assertAMarsRoverStartsOrientedTo: West andRotatesLeftTo: North.
! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:08:23' prior: 50872361!
test08
	self assertAMarsRoverStartsOrientedTo: North andRotatesLeftTo: East.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:08:35' prior: 50872353!
test09
	self assertAMarsRoverStartsOrientedTo: East andRotatesLeftTo: South.
! !

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 19:08:53'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:08:53'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:08:53'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:08:53'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:08:53'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:08:53'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IO 10/25/2020 19:08:53'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'IO 10/25/2020 19:08:53'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'IO 10/25/2020 19:08:53'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'IO 10/25/2020 19:08:53'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:08:53'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 19:08:53'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 19:08:53'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 19:08:53'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:08:53'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:08:53'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:08:53'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:09:22'!
test06marsRoverRotatesLeftToWest
	self assertAMarsRoverStartsOrientedTo: South andRotatesLeftTo: West.
! !

!methodRemoval: MarsRoverTest #test06 stamp: 'IO 10/25/2020 19:09:22'!
test06
	self assertAMarsRoverStartsOrientedTo: South andRotatesLeftTo: West.
!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:09:44'!
test07marsRoverRotatesLeftFromWest
	self assertAMarsRoverStartsOrientedTo: West andRotatesLeftTo: North.
! !

!methodRemoval: MarsRoverTest #test07 stamp: 'IO 10/25/2020 19:09:44'!
test07
	self assertAMarsRoverStartsOrientedTo: West andRotatesLeftTo: North.
!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:10:04'!
test06marsRoverRotatesLeftFromSouth
	self assertAMarsRoverStartsOrientedTo: South andRotatesLeftTo: West.
! !

!methodRemoval: MarsRoverTest #test06marsRoverRotatesLeftToWest stamp: 'IO 10/25/2020 19:10:04'!
test06marsRoverRotatesLeftToWest
	self assertAMarsRoverStartsOrientedTo: South andRotatesLeftTo: West.
!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:10:09'!
test08marsRoverRotatesLeftFromNorth
	self assertAMarsRoverStartsOrientedTo: North andRotatesLeftTo: East.
	! !

!methodRemoval: MarsRoverTest #test08 stamp: 'IO 10/25/2020 19:10:09'!
test08
	self assertAMarsRoverStartsOrientedTo: North andRotatesLeftTo: East.
	!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:10:14'!
test09marsRoverRotatesLeftFromEast
	self assertAMarsRoverStartsOrientedTo: East andRotatesLeftTo: South.
! !

!methodRemoval: MarsRoverTest #test09 stamp: 'IO 10/25/2020 19:10:14'!
test09
	self assertAMarsRoverStartsOrientedTo: East andRotatesLeftTo: South.
!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:11:43'!
assertAMarsRoverStartsOrientedTo: aCardinalDirection andRotatesRightTo: anotherCardinalDirection
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: aCardinalDirection.
	aMarsRover execute: 'r'.
	
	self assert: anotherCardinalDirection equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:12:34' prior: 50872369!
test10
	self assertAMarsRoverStartsOrientedTo: East andRotatesLeftTo: North.
! !

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:12:53'!
FAILURE!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:13:32' prior: 50873951!
test10
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: East.
	aMarsRover execute: 'r'.
	
	self assert: North equals: aMarsRover orientation.
! !

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:13:33'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:13:33'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:14:04' prior: 50873959!
test10
	self assertAMarsRoverStartsOrientedTo: East andRotatesRightTo: North.
	! !

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:14:05'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:14:05'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:14:05'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:14:05'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:14:05'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:14:05'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:14:05'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:14:05'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:14:05'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:14:05'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:14:05'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 19:14:05'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 19:14:05'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 19:14:05'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:14:05'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:14:05'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:14:05'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:14:07' prior: 50874014!
test10
	self assertAMarsRoverStartsOrientedTo: East andRotatesRightTo: North.
! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:14:17' prior: 50874067!
test10
	self assertAMarsRoverStartsOrientedTo: East andRotatesRightTo: North.
! !

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:14:18'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:14:23'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:14:25'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:14:25'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:14:39' prior: 50872309!
test11
	self assertAMarsRoverStartsOrientedTo: North andRotatesRightTo: West.
! !

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 19:14:41'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:14:41'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:14:41'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:14:41'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:14:41'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:14:41'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:14:41'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:14:41'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:14:41'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:14:41'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:14:41'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 19:14:41'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 19:14:41'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 19:14:41'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:14:41'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:14:41'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:14:41'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:14:51' prior: 50872377!
test12
	self assertAMarsRoverStartsOrientedTo: West andRotatesRightTo: South.
! !

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 19:14:52'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:14:52'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:14:52'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:14:52'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:14:52'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:14:52'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:14:52'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:14:52'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:14:52'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:14:52'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:14:52'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 19:14:52'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 19:14:52'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 19:14:52'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:14:52'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:14:52'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:14:52'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:15:06' prior: 50872301!
test13
	self assertAMarsRoverStartsOrientedTo: South andRotatesRightTo: East.
! !

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 19:15:06'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:15:06'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:15:06'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:15:06'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:15:06'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:15:06'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:15:06'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:15:06'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:15:06'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:15:06'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:15:06'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'IO 10/25/2020 19:15:06'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'IO 10/25/2020 19:15:06'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 19:15:06'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:15:06'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:15:06'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:15:07'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:15:39'!
test10marsRoverRotatesRigthFromEast
	self assertAMarsRoverStartsOrientedTo: East andRotatesRightTo: North.
! !

!methodRemoval: MarsRoverTest #test10 stamp: 'IO 10/25/2020 19:15:39'!
test10
	self assertAMarsRoverStartsOrientedTo: East andRotatesRightTo: North.
!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:15:45'!
test11marsRoverRotatesRigthFromNorth
	self assertAMarsRoverStartsOrientedTo: North andRotatesRightTo: West.
! !

!methodRemoval: MarsRoverTest #test11 stamp: 'IO 10/25/2020 19:15:45'!
test11
	self assertAMarsRoverStartsOrientedTo: North andRotatesRightTo: West.
!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:15:58'!
test12marsRoverRotatesRigthFromWest
	self assertAMarsRoverStartsOrientedTo: West andRotatesRightTo: South.
! !

!methodRemoval: MarsRoverTest #test12 stamp: 'IO 10/25/2020 19:15:58'!
test12
	self assertAMarsRoverStartsOrientedTo: West andRotatesRightTo: South.
!

!testRun: #MarsRoverTest #test12marsRoverRotatesRigthFromWest stamp: 'IO 10/25/2020 19:16:01'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:16:01'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:16:01'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:16:01'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:16:01'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:16:01'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:16:01'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:16:01'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:16:01'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:16:01'!
PASSED!

!testRun: #MarsRoverTest #test10marsRoverRotatesRigthFromEast stamp: 'IO 10/25/2020 19:16:01'!
PASSED!

!testRun: #MarsRoverTest #test11marsRoverRotatesRigthFromNorth stamp: 'IO 10/25/2020 19:16:01'!
PASSED!

!testRun: #MarsRoverTest #test12marsRoverRotatesRigthFromWest stamp: 'IO 10/25/2020 19:16:01'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'IO 10/25/2020 19:16:01'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:16:01'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:16:01'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:16:01'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:16:09'!
test13marsRoverRotatesRigthFromSouth
	self assertAMarsRoverStartsOrientedTo: South andRotatesRightTo: East.
! !

!methodRemoval: MarsRoverTest #test13 stamp: 'IO 10/25/2020 19:16:09'!
test13
	self assertAMarsRoverStartsOrientedTo: South andRotatesRightTo: East.
!

!testRun: #MarsRoverTest #test13marsRoverRotatesRigthFromSouth stamp: 'IO 10/25/2020 19:16:15'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:16:15'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:16:15'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:16:15'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:16:15'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:16:15'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:16:15'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:16:15'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:16:15'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:16:15'!
PASSED!

!testRun: #MarsRoverTest #test10marsRoverRotatesRigthFromEast stamp: 'IO 10/25/2020 19:16:15'!
PASSED!

!testRun: #MarsRoverTest #test11marsRoverRotatesRigthFromNorth stamp: 'IO 10/25/2020 19:16:15'!
PASSED!

!testRun: #MarsRoverTest #test12marsRoverRotatesRigthFromWest stamp: 'IO 10/25/2020 19:16:15'!
PASSED!

!testRun: #MarsRoverTest #test13marsRoverRotatesRigthFromSouth stamp: 'IO 10/25/2020 19:16:15'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:16:15'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:16:15'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:16:15'!
PASSED!
!MarsRoverTest methodsFor: 'test tools' stamp: 'IO 10/25/2020 19:16:47' prior: 50873939!
assertAMarsRoverStartsOrientedTo: aCardinalDirection andRotatesRightTo: anotherCardinalDirection

	"
		create a Mars Rover at 0@0 oriented to a given position. Will execute 'r' command pack and assert
		it is finally oriented to the other given cardinal direction.
	"

	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: aCardinalDirection.
	aMarsRover execute: 'r'.
	
	self assert: anotherCardinalDirection equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'test tools' stamp: 'IO 10/25/2020 19:18:41'!
assertAMarsRoverStartsOrientedTo: aCardinalDirection andRotateWith: aRotationCommandPack To: anotherCardinalDirection

	"
		create a Mars Rover at 0@0 oriented to a given position. Will execute the rotation command pack (that has a single
		command of orientation rotation) and assert it is finally oriented to the other given cardinal direction.
	"

	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: aCardinalDirection.
	aMarsRover execute: aRotationCommandPack.
	
	self assert: anotherCardinalDirection equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'test tools' stamp: 'IO 10/25/2020 19:19:00' prior: 50873797!
assertAMarsRoverStartsOrientedTo: aCardinalDirection andRotatesLeftTo: anotherCardinalDirection

	"
		create a Mars Rover at 0@0 oriented to a given position. Will execute 'l' command pack and assert
		it is finally oriented to the other given cardinal direction.
	"

	self assertAMarsRoverStartsOrientedTo: aCardinalDirection andRotateWith: 'l' To: anotherCardinalDirection
	! !

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:19:03'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:19:03'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:19:03'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:19:03'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:19:03'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:19:03'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:19:03'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:19:03'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:19:03'!
PASSED!

!testRun: #MarsRoverTest #test10marsRoverRotatesRigthFromEast stamp: 'IO 10/25/2020 19:19:03'!
PASSED!

!testRun: #MarsRoverTest #test11marsRoverRotatesRigthFromNorth stamp: 'IO 10/25/2020 19:19:03'!
PASSED!

!testRun: #MarsRoverTest #test12marsRoverRotatesRigthFromWest stamp: 'IO 10/25/2020 19:19:03'!
PASSED!

!testRun: #MarsRoverTest #test13marsRoverRotatesRigthFromSouth stamp: 'IO 10/25/2020 19:19:03'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:19:03'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:19:03'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:19:03'!
PASSED!
!MarsRoverTest methodsFor: 'test tools' stamp: 'IO 10/25/2020 19:19:24' prior: 50874526!
assertAMarsRoverStartsOrientedTo: aCardinalDirection andRotatesRightTo: anotherCardinalDirection

	"
		create a Mars Rover at 0@0 oriented to a given position. Will execute 'r' command pack and assert
		it is finally oriented to the other given cardinal direction.
	"

	self assertAMarsRoverStartsOrientedTo: aCardinalDirection andRotateWith: 'r' To: anotherCardinalDirection
	! !

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:19:25'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:19:25'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:19:25'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:19:25'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:19:25'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:19:25'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:19:25'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:19:25'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:19:25'!
PASSED!

!testRun: #MarsRoverTest #test10marsRoverRotatesRigthFromEast stamp: 'IO 10/25/2020 19:19:25'!
PASSED!

!testRun: #MarsRoverTest #test11marsRoverRotatesRigthFromNorth stamp: 'IO 10/25/2020 19:19:25'!
PASSED!

!testRun: #MarsRoverTest #test12marsRoverRotatesRigthFromWest stamp: 'IO 10/25/2020 19:19:25'!
PASSED!

!testRun: #MarsRoverTest #test13marsRoverRotatesRigthFromSouth stamp: 'IO 10/25/2020 19:19:25'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:19:25'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:19:25'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:19:25'!
PASSED!
!MarsRoverTest methodsFor: 'test tools' stamp: 'IO 10/25/2020 19:20:28' prior: 50874627!
assertAMarsRoverStartsOrientedTo: aCardinalDirection andRotatesRightTo: anotherCardinalDirection

	"
		see assertAMarsRoverStartsOrientedTo:andRotateWith:To: implementation
		will execute 'r' command pack
	"

	self assertAMarsRoverStartsOrientedTo: aCardinalDirection andRotateWith: 'r' To: anotherCardinalDirection
	! !
!MarsRoverTest methodsFor: 'test tools' stamp: 'IO 10/25/2020 19:20:36' prior: 50874563!
assertAMarsRoverStartsOrientedTo: aCardinalDirection andRotatesLeftTo: anotherCardinalDirection

	"
		see assertAMarsRoverStartsOrientedTo:andRotateWith:To: implementation
		will execute 'l' command pack
	"

	self assertAMarsRoverStartsOrientedTo: aCardinalDirection andRotateWith: 'l' To: anotherCardinalDirection
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:21:21'!
test14marRoverExecutesPacksWithMoreTHanOneCommand
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'ff'.
	
	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	! !

!methodRemoval: MarsRoverTest #test14 stamp: 'IO 10/25/2020 19:21:21'!
test14
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'ff'.
	
	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:21:31'!
test14marRoverExecutesPacksWithMoreThanOneCommand
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'ff'.
	
	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	! !

!methodRemoval: MarsRoverTest #test14marRoverExecutesPacksWithMoreTHanOneCommand stamp: 'IO 10/25/2020 19:21:31'!
test14marRoverExecutesPacksWithMoreTHanOneCommand
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'ff'.
	
	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:21:52'!
test15marsRoverSignalsOnErrorAndStopsExecuting
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.

	self
		should: [	aMarsRover execute: 'fxf'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.

	self assert: -1@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
! !

!methodRemoval: MarsRoverTest #test15 stamp: 'IO 10/25/2020 19:21:52'!
test15
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.

	self
		should: [	aMarsRover execute: 'fxf'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.

	self assert: -1@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:22:09'!
test16marsRoverStartsExecutingAgainOnNewPAckAfterError
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	
	self
		should: [	aMarsRover execute: 'fxf'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.

	aMarsRover execute: 'f'.	

	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	! !

!methodRemoval: MarsRoverTest #test16 stamp: 'IO 10/25/2020 19:22:09'!
test16
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	
	self
		should: [	aMarsRover execute: 'fxf'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.

	aMarsRover execute: 'f'.	

	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:22:17'!
test16marsRoverStartsExecutingAgainOnNewPackAfterError
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	
	self
		should: [	aMarsRover execute: 'fxf'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.

	aMarsRover execute: 'f'.	

	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	! !

!methodRemoval: MarsRoverTest #test16marsRoverStartsExecutingAgainOnNewPAckAfterError stamp: 'IO 10/25/2020 19:22:17'!
test16marsRoverStartsExecutingAgainOnNewPAckAfterError
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	
	self
		should: [	aMarsRover execute: 'fxf'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.

	aMarsRover execute: 'f'.	

	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:22:26'!
test14marsRoverExecutesPacksWithMoreThanOneCommand
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'ff'.
	
	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	! !

!methodRemoval: MarsRoverTest #test14marRoverExecutesPacksWithMoreThanOneCommand stamp: 'IO 10/25/2020 19:22:26'!
test14marRoverExecutesPacksWithMoreThanOneCommand
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	aMarsRover execute: 'ff'.
	
	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:22:31' prior: 50874837!
test14marsRoverExecutesPacksWithMoreThanOneCommand
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.

	aMarsRover execute: 'ff'.
	
	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:22:33' prior: 50874859!
test14marsRoverExecutesPacksWithMoreThanOneCommand
	|aMarsRover|
	aMarsRover := MarsRover at: 0@0 pointingTo: South.

	aMarsRover execute: 'ff'.
	
	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:22:36' prior: 50874870!
test14marsRoverExecutesPacksWithMoreThanOneCommand
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: South.

	aMarsRover execute: 'ff'.
	
	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:22:47' prior: 50874758!
test15marsRoverSignalsOnErrorAndStopsExecuting
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: South.

	self
		should: [	aMarsRover execute: 'fxf'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.

	self assert: -1@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:22:59' prior: 50874808!
test16marsRoverStartsExecutingAgainOnNewPackAfterError
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: South.
	
	self
		should: [	aMarsRover execute: 'fxf'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.

	aMarsRover execute: 'f'.	

	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:25:35'!
assertAMarsRoverMovesForwardAndFails
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: South.

	self
		should: [	aMarsRover execute: 'fxf'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.

	self assert: -1@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:26:03' prior: 50874919!
assertAMarsRoverMovesForwardAndFails
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: South.

	self
		should: [	aMarsRover execute: 'fxf'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.

	self assert: -1@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	
	^aMarsRover.

! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:26:31' prior: 50874892!
test15marsRoverSignalsOnErrorAndStopsExecuting
	self assertAMarsRoverMovesForwardAndFails.

! !
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:26:42' prior: 50874905!
test16marsRoverStartsExecutingAgainOnNewPackAfterError
	| aMarsRover |
	aMarsRover := 	self assertAMarsRoverMovesForwardAndFails.

	aMarsRover execute: 'f'.	

	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	! !

!testRun: #MarsRoverTest #test16marsRoverStartsExecutingAgainOnNewPackAfterError stamp: 'IO 10/25/2020 19:26:43'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:26:43'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:26:43'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:26:43'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:26:43'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:26:43'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:26:43'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:26:43'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:26:43'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:26:43'!
PASSED!

!testRun: #MarsRoverTest #test10marsRoverRotatesRigthFromEast stamp: 'IO 10/25/2020 19:26:43'!
PASSED!

!testRun: #MarsRoverTest #test11marsRoverRotatesRigthFromNorth stamp: 'IO 10/25/2020 19:26:43'!
PASSED!

!testRun: #MarsRoverTest #test12marsRoverRotatesRigthFromWest stamp: 'IO 10/25/2020 19:26:43'!
PASSED!

!testRun: #MarsRoverTest #test13marsRoverRotatesRigthFromSouth stamp: 'IO 10/25/2020 19:26:43'!
PASSED!

!testRun: #MarsRoverTest #test14marsRoverExecutesPacksWithMoreThanOneCommand stamp: 'IO 10/25/2020 19:26:43'!
PASSED!

!testRun: #MarsRoverTest #test15marsRoverSignalsOnErrorAndStopsExecuting stamp: 'IO 10/25/2020 19:26:43'!
PASSED!

!testRun: #MarsRoverTest #test16marsRoverStartsExecutingAgainOnNewPackAfterError stamp: 'IO 10/25/2020 19:26:43'!
PASSED!
!MarsRoverTest methodsFor: 'test tools' stamp: 'IO 10/25/2020 19:28:36'!
assertReturnsAMarsRoverThatMovedForwardAndFailed
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: South.

	self
		should: [	aMarsRover execute: 'fxf'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.

	self assert: -1@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	
	^aMarsRover.

! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IO 10/25/2020 19:28:36' prior: 50874952!
test16marsRoverStartsExecutingAgainOnNewPackAfterError
	| aMarsRover |
	aMarsRover := 	self assertReturnsAMarsRoverThatMovedForwardAndFailed.

	aMarsRover execute: 'f'.	

	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	! !

!methodRemoval: MarsRoverTest #assertAMarsRoverMovesForwardAndFails stamp: 'IO 10/25/2020 19:28:36'!
assertAMarsRoverMovesForwardAndFails
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: South.

	self
		should: [	aMarsRover execute: 'fxf'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.

	self assert: -1@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	
	^aMarsRover.

!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:28:39'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:28:39'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:28:39'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:28:39'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:28:39'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:28:39'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:28:39'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:28:39'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:28:39'!
PASSED!

!testRun: #MarsRoverTest #test10marsRoverRotatesRigthFromEast stamp: 'IO 10/25/2020 19:28:39'!
PASSED!

!testRun: #MarsRoverTest #test11marsRoverRotatesRigthFromNorth stamp: 'IO 10/25/2020 19:28:39'!
PASSED!

!testRun: #MarsRoverTest #test12marsRoverRotatesRigthFromWest stamp: 'IO 10/25/2020 19:28:39'!
PASSED!

!testRun: #MarsRoverTest #test13marsRoverRotatesRigthFromSouth stamp: 'IO 10/25/2020 19:28:39'!
PASSED!

!testRun: #MarsRoverTest #test14marsRoverExecutesPacksWithMoreThanOneCommand stamp: 'IO 10/25/2020 19:28:39'!
PASSED!

!testRun: #MarsRoverTest #test15marsRoverSignalsOnErrorAndStopsExecuting stamp: 'IO 10/25/2020 19:28:39'!
ERROR!

!testRun: #MarsRoverTest #test16marsRoverStartsExecutingAgainOnNewPackAfterError stamp: 'IO 10/25/2020 19:28:39'!
PASSED!

!testRun: #MarsRoverTest #test15marsRoverSignalsOnErrorAndStopsExecuting stamp: 'IO 10/25/2020 19:28:39'!
ERROR!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:28:45'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:28:45'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:28:45'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:28:45'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:28:45'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:28:45'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:28:45'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:28:45'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:28:45'!
PASSED!

!testRun: #MarsRoverTest #test10marsRoverRotatesRigthFromEast stamp: 'IO 10/25/2020 19:28:45'!
PASSED!

!testRun: #MarsRoverTest #test11marsRoverRotatesRigthFromNorth stamp: 'IO 10/25/2020 19:28:45'!
PASSED!

!testRun: #MarsRoverTest #test12marsRoverRotatesRigthFromWest stamp: 'IO 10/25/2020 19:28:45'!
PASSED!

!testRun: #MarsRoverTest #test13marsRoverRotatesRigthFromSouth stamp: 'IO 10/25/2020 19:28:45'!
PASSED!

!testRun: #MarsRoverTest #test14marsRoverExecutesPacksWithMoreThanOneCommand stamp: 'IO 10/25/2020 19:28:45'!
PASSED!

!testRun: #MarsRoverTest #test15marsRoverSignalsOnErrorAndStopsExecuting stamp: 'IO 10/25/2020 19:28:45'!
ERROR!

!testRun: #MarsRoverTest #test16marsRoverStartsExecutingAgainOnNewPackAfterError stamp: 'IO 10/25/2020 19:28:45'!
PASSED!

!testRun: #MarsRoverTest #test15marsRoverSignalsOnErrorAndStopsExecuting stamp: 'IO 10/25/2020 19:28:45'!
ERROR!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:29:02' prior: 50875035!
test16marsRoverStartsExecutingAgainOnNewPackAfterError
	| aMarsRover |
	aMarsRover := 	self assertReturnsAMarsRoverThatMovedForwardAndFailed.

	aMarsRover execute: 'f'.	

	self assert: -2@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	! !

!testRun: #MarsRoverTest #test16marsRoverStartsExecutingAgainOnNewPackAfterError stamp: 'IO 10/25/2020 19:29:03'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:29:03'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:29:03'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:29:03'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:29:03'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:29:03'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:29:03'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:29:03'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:29:03'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:29:03'!
PASSED!

!testRun: #MarsRoverTest #test10marsRoverRotatesRigthFromEast stamp: 'IO 10/25/2020 19:29:03'!
PASSED!

!testRun: #MarsRoverTest #test11marsRoverRotatesRigthFromNorth stamp: 'IO 10/25/2020 19:29:03'!
PASSED!

!testRun: #MarsRoverTest #test12marsRoverRotatesRigthFromWest stamp: 'IO 10/25/2020 19:29:03'!
PASSED!

!testRun: #MarsRoverTest #test13marsRoverRotatesRigthFromSouth stamp: 'IO 10/25/2020 19:29:03'!
PASSED!

!testRun: #MarsRoverTest #test14marsRoverExecutesPacksWithMoreThanOneCommand stamp: 'IO 10/25/2020 19:29:03'!
PASSED!

!testRun: #MarsRoverTest #test15marsRoverSignalsOnErrorAndStopsExecuting stamp: 'IO 10/25/2020 19:29:03'!
ERROR!

!testRun: #MarsRoverTest #test16marsRoverStartsExecutingAgainOnNewPackAfterError stamp: 'IO 10/25/2020 19:29:03'!
PASSED!

!testRun: #MarsRoverTest #test15marsRoverSignalsOnErrorAndStopsExecuting stamp: 'IO 10/25/2020 19:29:03'!
ERROR!
!MarsRoverTest methodsFor: 'test' stamp: 'IO 10/25/2020 19:29:09' prior: 50874946!
test15marsRoverSignalsOnErrorAndStopsExecuting
	self assertReturnsAMarsRoverThatMovedForwardAndFailed.

! !

!testRun: #MarsRoverTest #test15marsRoverSignalsOnErrorAndStopsExecuting stamp: 'IO 10/25/2020 19:29:10'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:29:10'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:29:10'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:29:10'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:29:10'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:29:10'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:29:10'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:29:10'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:29:10'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:29:10'!
PASSED!

!testRun: #MarsRoverTest #test10marsRoverRotatesRigthFromEast stamp: 'IO 10/25/2020 19:29:10'!
PASSED!

!testRun: #MarsRoverTest #test11marsRoverRotatesRigthFromNorth stamp: 'IO 10/25/2020 19:29:10'!
PASSED!

!testRun: #MarsRoverTest #test12marsRoverRotatesRigthFromWest stamp: 'IO 10/25/2020 19:29:10'!
PASSED!

!testRun: #MarsRoverTest #test13marsRoverRotatesRigthFromSouth stamp: 'IO 10/25/2020 19:29:10'!
PASSED!

!testRun: #MarsRoverTest #test14marsRoverExecutesPacksWithMoreThanOneCommand stamp: 'IO 10/25/2020 19:29:10'!
PASSED!

!testRun: #MarsRoverTest #test15marsRoverSignalsOnErrorAndStopsExecuting stamp: 'IO 10/25/2020 19:29:10'!
PASSED!

!testRun: #MarsRoverTest #test16marsRoverStartsExecutingAgainOnNewPackAfterError stamp: 'IO 10/25/2020 19:29:10'!
PASSED!
!MarsRoverTest methodsFor: 'test tools' stamp: 'IO 10/25/2020 19:30:30' prior: 50875020!
assertReturnsAMarsRoverThatMovedForwardAndFailed

	"
		create a new mars rover and execute a pack that will move the mars rover forward once, and then execute a
		failling command.
		Implementaiton details: this method returns the Mars Rover to be tested after received package failures.
	"

	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: South.

	self
		should: [	aMarsRover execute: 'fxf'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.

	self assert: -1@0 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	
	^aMarsRover.

! !

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 19:30:30'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 19:30:30'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 19:30:30'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 19:30:30'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 19:30:30'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 19:30:30'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 19:30:30'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 19:30:30'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 19:30:30'!
PASSED!

!testRun: #MarsRoverTest #test10marsRoverRotatesRigthFromEast stamp: 'IO 10/25/2020 19:30:30'!
PASSED!

!testRun: #MarsRoverTest #test11marsRoverRotatesRigthFromNorth stamp: 'IO 10/25/2020 19:30:30'!
PASSED!

!testRun: #MarsRoverTest #test12marsRoverRotatesRigthFromWest stamp: 'IO 10/25/2020 19:30:30'!
PASSED!

!testRun: #MarsRoverTest #test13marsRoverRotatesRigthFromSouth stamp: 'IO 10/25/2020 19:30:30'!
PASSED!

!testRun: #MarsRoverTest #test14marsRoverExecutesPacksWithMoreThanOneCommand stamp: 'IO 10/25/2020 19:30:30'!
PASSED!

!testRun: #MarsRoverTest #test15marsRoverSignalsOnErrorAndStopsExecuting stamp: 'IO 10/25/2020 19:30:30'!
PASSED!

!testRun: #MarsRoverTest #test16marsRoverStartsExecutingAgainOnNewPackAfterError stamp: 'IO 10/25/2020 19:30:30'!
PASSED!

----SNAPSHOT----(25 October 2020 19:32:31) CuisUniversity-4384.image priorSource: 17312277!

----QUIT----(25 October 2020 19:36:13) CuisUniversity-4384.image priorSource: 17399403!

----STARTUP---- (25 October 2020 21:17:54) as /Users/ilanolkies/uba/ingsoft1/macos64 3/CuisUniversity-4384.image!

!MarsRoverTest methodsFor: 'nil' stamp: 'IO 10/25/2020 21:18:17'!
test17marsRoverIntegration
	! !
!MarsRoverTest methodsFor: 'integration test' stamp: 'IO 10/25/2020 21:20:14' prior: 50875391!
test17marsRoverIntegration
	"this test was built without TDD"
	! !
!MarsRoverTest methodsFor: 'integration test' stamp: 'IO 10/25/2020 21:21:38' prior: 50875395!
test17marsRoverIntegration
	"this test was built without TDD"
	
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: North.

	aMarsRover execute: 'fflfx'.
	
	self assert: 1@0 equals: aMarsRover position.! !
!MarsRoverTest methodsFor: 'integration test' stamp: 'IO 10/25/2020 21:21:54' prior: 50875401!
test17marsRoverIntegration
	"this test was built without TDD"
	
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: North.

	aMarsRover execute: 'fflfxrb'.
	
	self assert: 1@0 equals: aMarsRover position.! !
!MarsRoverTest methodsFor: 'integration test' stamp: 'IO 10/25/2020 21:22:49' prior: 50875411!
test17marsRoverIntegration
	"this test was built without TDD"
	
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: North.


	self
		should: [	aMarsRover execute: 'fflfxrb'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.
		
	self assert: -1@2 equals: aMarsRover position.
	self assert: West equals: aMarsRover orientation.
! !

!testRun: #MarsRoverTest #test17marsRoverIntegration stamp: 'IO 10/25/2020 21:22:50'!
FAILURE!

!testRun: #MarsRoverTest #test17marsRoverIntegration stamp: 'IO 10/25/2020 21:23:19'!
FAILURE!
!MarsRoverTest methodsFor: 'integration test' stamp: 'IO 10/25/2020 21:23:27' prior: 50875421!
test17marsRoverIntegration
	"this test was built without TDD"
	
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: North.


	self
		should: [	aMarsRover execute: 'fflfxrb'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.
		
	self assert: 2@1 equals: aMarsRover position.
	self assert: West equals: aMarsRover orientation.
! !

!testRun: #MarsRoverTest #test17marsRoverIntegration stamp: 'IO 10/25/2020 21:23:27'!
FAILURE!
!MarsRoverTest methodsFor: 'integration test' stamp: 'IO 10/25/2020 21:24:33' prior: 50875442!
test17marsRoverIntegration
	"this test was built without TDD"
	
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: North.


	self
		should: [	aMarsRover execute: 'fflfxrb'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.
		
	self assert: 2@1 equals: aMarsRover position.
	self assert: West equals: aMarsRover orientation.
	
	aMarsRover execute: 'rb'.
	
	self assert: 1@1 equals: aMarsRover position.
	self assert: North equals: aMarsRover orientation.
	
! !

!testRun: #MarsRoverTest #test17marsRoverIntegration stamp: 'IO 10/25/2020 21:24:35'!
FAILURE!
!MarsRoverTest methodsFor: 'integration test' stamp: 'IO 10/25/2020 21:24:45' prior: 50875460!
test17marsRoverIntegration
	"this test was built without TDD"
	
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: North.


	self
		should: [	aMarsRover execute: 'fflfxrb'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.
		
	self assert: 2@1 equals: aMarsRover position.
	self assert: East equals: aMarsRover orientation.
	
	aMarsRover execute: 'rb'.
	
	self assert: 1@1 equals: aMarsRover position.
	self assert: North equals: aMarsRover orientation.
	
! !

!testRun: #MarsRoverTest #test17marsRoverIntegration stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test10marsRoverRotatesRigthFromEast stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test11marsRoverRotatesRigthFromNorth stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test12marsRoverRotatesRigthFromWest stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test13marsRoverRotatesRigthFromSouth stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test14marsRoverExecutesPacksWithMoreThanOneCommand stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test15marsRoverSignalsOnErrorAndStopsExecuting stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test16marsRoverStartsExecutingAgainOnNewPackAfterError stamp: 'IO 10/25/2020 21:24:47'!
PASSED!

!testRun: #MarsRoverTest #test17marsRoverIntegration stamp: 'IO 10/25/2020 21:24:47'!
PASSED!
!MarsRoverTest methodsFor: 'integration test' stamp: 'IO 10/25/2020 21:25:31' prior: 50875482!
test17marsRoverIntegration
	"this test was built without TDD"
	
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: North.


	self
		should: [	aMarsRover execute: 'fflfxrb'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.
		
	self assert: 2@1 equals: aMarsRover position.
	self assert: East equals: aMarsRover orientation.
	
	aMarsRover execute: 'rb'.
	
	self assert: 1@1 equals: aMarsRover position.
	self assert: North equals: aMarsRover orientation.
	
	aMarsRover execute: 'rfffrb'.
	
	self assert: 0@3 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	
	
! !

!testRun: #MarsRoverTest #test17marsRoverIntegration stamp: 'IO 10/25/2020 21:25:32'!
FAILURE!
!MarsRoverTest methodsFor: 'integration test' stamp: 'IO 10/25/2020 21:25:41' prior: 50875559!
test17marsRoverIntegration
	"this test was built without TDD"
	
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: North.


	self
		should: [	aMarsRover execute: 'fflfxrb'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.
		
	self assert: 2@1 equals: aMarsRover position.
	self assert: East equals: aMarsRover orientation.
	
	aMarsRover execute: 'rb'.
	
	self assert: 1@1 equals: aMarsRover position.
	self assert: North equals: aMarsRover orientation.
	
	aMarsRover execute: 'rfffrb'.
	
	self assert: 2@-2 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.
	
	
! !

!testRun: #MarsRoverTest #test17marsRoverIntegration stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test10marsRoverRotatesRigthFromEast stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test11marsRoverRotatesRigthFromNorth stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test12marsRoverRotatesRigthFromWest stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test13marsRoverRotatesRigthFromSouth stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test14marsRoverExecutesPacksWithMoreThanOneCommand stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test15marsRoverSignalsOnErrorAndStopsExecuting stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test16marsRoverStartsExecutingAgainOnNewPackAfterError stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

!testRun: #MarsRoverTest #test17marsRoverIntegration stamp: 'IO 10/25/2020 21:25:42'!
PASSED!

----STARTUP---- (25 October 2020 21:25:56) as /Users/ilanolkies/uba/ingsoft1/macos64 3/CuisUniversity-4384.image!

!MarsRoverTest methodsFor: 'nil' stamp: 'IO 10/25/2020 21:27:00'!
test17marsRoverIntegration

	"this test was built without TDD"
	
	| aMarsRover |
	aMarsRover := MarsRover at: 0@0 pointingTo: North.


	self
		should: [	aMarsRover execute: 'fflfxrb'.]
		raise: Error
		withMessageText: MarsRover invalidCommandError.
		
	self assert: 2@1 equals: aMarsRover position.
	self assert: East equals: aMarsRover orientation.
	
	aMarsRover execute: 'rb'.
	
	self assert: 1@1 equals: aMarsRover position.
	self assert: North equals: aMarsRover orientation.
	
	aMarsRover execute: 'rfffrb'.
	
	self assert: 2@-2 equals: aMarsRover position.
	self assert: South equals: aMarsRover orientation.

! !

!testRun: #MarsRoverTest #test17marsRoverIntegration stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test10marsRoverRotatesRigthFromEast stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test11marsRoverRotatesRigthFromNorth stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test12marsRoverRotatesRigthFromWest stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test13marsRoverRotatesRigthFromSouth stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test14marsRoverExecutesPacksWithMoreThanOneCommand stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test15marsRoverSignalsOnErrorAndStopsExecuting stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test16marsRoverStartsExecutingAgainOnNewPackAfterError stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

!testRun: #MarsRoverTest #test17marsRoverIntegration stamp: 'IO 10/25/2020 21:27:01'!
PASSED!

----SNAPSHOT----(25 October 2020 21:30:08) CuisUniversity-4384.image priorSource: 17399496!

----QUIT----(25 October 2020 21:30:14) CuisUniversity-4384.image priorSource: 17402276!

----STARTUP---- (25 October 2020 21:35:49) as /Users/ilanolkies/uba/ingsoft1/macos64 3/CuisUniversity-4384.image!


!testRun: #MarsRoverTest #test17marsRoverIntegration stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test01marsRoverMovesForward stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test02marsRoverMovesBackwards stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test03marsRoverMovesForwardToNorth stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test04marsRoverMovesForwardToEast stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test05marsRoverMovesForwardToWest stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test06marsRoverRotatesLeftFromSouth stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test07marsRoverRotatesLeftFromWest stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test08marsRoverRotatesLeftFromNorth stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test09marsRoverRotatesLeftFromEast stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test10marsRoverRotatesRigthFromEast stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test11marsRoverRotatesRigthFromNorth stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test12marsRoverRotatesRigthFromWest stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test13marsRoverRotatesRigthFromSouth stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test14marsRoverExecutesPacksWithMoreThanOneCommand stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test15marsRoverSignalsOnErrorAndStopsExecuting stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test16marsRoverStartsExecutingAgainOnNewPackAfterError stamp: 'IO 10/25/2020 21:36:24'!
PASSED!

!testRun: #MarsRoverTest #test17marsRoverIntegration stamp: 'IO 10/25/2020 21:36:24'!
PASSED!