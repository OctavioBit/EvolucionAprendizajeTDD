

----STARTUP---- (2 November 2020 09:56:51) as /media/alex/Rigido-1TB/Migue/Facultad/Ingenieria 1/Smalltalk/CuisUniversity-4383.image!


----End fileIn of /media/alex/Rigido-1TB/Migue/Facultad/Ingenieria 1/is1-ejercicios/17-TerniLapilli/TerniLapilli.st----!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:04:11' prior: 50875959!
test22XCantMoveToInvalidPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	
	self should: [ aTerniLapilliGame moveXFrom: 1@1 to: 2@1. ]
		raise: Error
		withExceptionDo: [ :anException | self assert: anException messageText = TerniLapilli notYourTurnDescription. ].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:04:36' prior: 50876259!
test22XCantMoveToInvalidPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	
	self should: [ aTerniLapilliGame moveXFrom: 1@1 to: 2@1. ]
		raise: Error
		withExceptionDo: [ :anException | self assert: anException messageText = TerniLapilli notYourTurnDescription. ].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:04:51' prior: 50876277!
test22XCantMoveToInvalidPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	
	self should: [ aTerniLapilliGame moveXFrom: 1@1 to: 2@1. ]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli invalidPositionDescription. ].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:05:24' prior: 50876295!
test22XCantMoveToInvalidPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	
	self should: [ aTerniLapilliGame moveXFrom: 1@1 to: 3@1. ]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli invalidPositionDescription. ].! !

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:05:28'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:05:42' prior: 50876313!
test22XCantMoveToInvalidPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	
	self should: [ aTerniLapilliGame moveXFrom: 1@1 to: 1@2. ]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli invalidPositionDescription. ].! !

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:05:44'!
FAILURE!

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:05:44'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:06:43' prior: 50876334!
test22XCantMoveToInvalidPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	
	self should: [ aTerniLapilliGame moveXFrom: 1@1 to: 1@2. ]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli positionOccupiedDescription . ].! !

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:06:44'!
FAILURE!

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:06:44'!
FAILURE!

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:07:03'!
FAILURE!

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:07:03'!
FAILURE!

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:07:37'!
FAILURE!

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:07:37'!
FAILURE!

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:08:22'!
FAILURE!

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:08:22'!
FAILURE!

 aTerniLapilliGame moveXFrom: 1@1 to: 1@2.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:09:18' prior: 50876359!
test22XCantMoveToInvalidPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	
	self should: [ aTerniLapilliGame moveXFrom: 1@1 to: 1@2. ]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli notYourTurnDescription . ].! !

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:09:20'!
FAILURE!

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:09:20'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:09:28' prior: 50876404!
test22XCantMoveToInvalidPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	
	self should: [ aTerniLapilliGame moveXFrom: 1@1 to: 1@2. ]
		raise: Error! !

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:09:30'!
FAILURE!

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:09:30'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:10:21' prior: 50876428!
test22XCantMoveToInvalidPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame moveXFrom: 1@1 to: 1@2.
	
	self assert true.! !

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:10:24'!
ERROR!

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:10:24'!
ERROR!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:10:48' prior: 50876449!
test22XCantMoveToInvalidPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame moveXFrom: 1@1 to: 1@2.
	
	self assert: 1 equals: 1.! !

!testRun: #TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:10:50'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:11:08'!
test22XCantMoveToOccupiedPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame moveXFrom: 1@1 to: 1@2.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:12:25' prior: 50876487!
test22XCantMoveToOccupiedPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	self should: [ aTerniLapilliGame ]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli positionOccupiedDescription. ].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:12:47' prior: 50876501!
test22XCantMoveToOccupiedPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	self should: [ aTerniLapilliGame]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli positionOccupiedDescription. ].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:13:21' prior: 50876518!
test22XCantMoveToOccupiedPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	self should: [ aTerniLapilliGame moveXFrom: 1@1 to: 1@2.]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli positionOccupiedDescription. ].! !

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 10:13:25'!
FAILURE!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 10:13:25'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 10:14:14' prior: 50876019!
moveXFrom: currentPosition to: newPosition

	isXPlaying not
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			newPosition 
			self move: (XChip newAt: currentPosition) to: newPosition.
		].! !
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 10:14:53' prior: 50876559!
moveXFrom: currentPosition to: newPosition

	isXPlaying not
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			
			self move: (XChip newAt: currentPosition) to: newPosition.
		].! !
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 10:15:49' prior: 50876569!
moveXFrom: currentPosition to: newPosition

	isXPlaying not
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			self isOccupied: newPosition ifTrue: [self error: self class ].
			self move: (XChip newAt: currentPosition) to: newPosition.
		].! !
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 10:16:20' prior: 50876579!
moveXFrom: currentPosition to: newPosition

	isXPlaying not
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			(self isOccupied: newPosition) ifTrue: [self error: self class ].
			self move: (XChip newAt: currentPosition) to: newPosition.
		].! !
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 10:16:41' prior: 50876591!
moveXFrom: currentPosition to: newPosition

	isXPlaying not
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			(self isOccupied: newPosition) ifTrue: [self error: self class positionOccupiedDescription].
			self move: (XChip newAt: currentPosition) to: newPosition.
		].! !
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 10:16:53' prior: 50876010!
moveOFrom: currentPosition to: newPosition
	
	isXPlaying
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			(self isOccupied: newPosition) ifTrue: [self error: self class positionOccupiedDescription].
			self move: (OChip newAt: currentPosition) to: newPosition.
		].! !

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 10:17:06'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:17:16'!
test23XCantMoveToInvalidPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame moveXFrom: 1@1 to: 1@2.
	
	self assert: 1 equals: 1.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:17:24' prior: 50876631!
test23XCantMoveToInvalidPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame moveXFrom: 1@1 to: 3@1.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:18:16' prior: 50876646!
test23XCantMoveToInvalidPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	self should: [aTerniLapilliGame moveXFrom: 1@1 to: 3@1.]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli invalidPositionDescription. ].
	! !

!methodRemoval: TerniLapilliTest #test22XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:18:32'!
test22XCantMoveToInvalidPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame moveXFrom: 1@1 to: 1@2.
	
	self assert: 1 equals: 1.!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 10:18:37'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:19:56'!
test24XCantMoveToNotNeighborPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	self should: [aTerniLapilliGame moveXFrom: 1@1 to: 3@1.]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli invalidPositionDescription. ].
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:20:20' prior: 50876695!
test24XCantMoveToNotNeighborPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	self should: [aTerniLapilliGame moveXFrom: 0@0 to: 2@0.]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli invalidPositionDescription. ].
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:20:40' prior: 50876713!
test24XCantMoveToNotNeighborPosition
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	self should: [aTerniLapilliGame moveXFrom: 0@0 to: 2@0.]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli cantMoveToNotNeighborPositionDescription. ].
	! !

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 10:20:45'!
FAILURE!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 10:20:45'!
FAILURE!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'mf 11/2/2020 10:21:07'!
cantMoveToNotNeighborPositionDescription
	! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'mf 11/2/2020 10:21:47' prior: 50876756!
cantMoveToNotNeighborPositionDescription
	
	^'Cant move to position that is not neighbor' ! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'mf 11/2/2020 10:21:55' prior: 50876761!
cantMoveToNotNeighborPositionDescription
	
	^'Can not move to position that is not neighbor' ! !

| point1 point2 |
point1 := 1@1.
point2 := 1@2.
point1 - point2!

1@1 abs !

1@1 magnitude !

1@1 asPoint !

1@1 argument !

| a |
a := Array with: 1 with: 2.
1 in: a.!

| a |
a := Array with: 1 with: 2.
a hasLiteral: 1.!

| a |
a := Array with: 1 with: 2.
a hasLiteral: 2.!

| a |
a := Array with: 1 with: 2.
a hasLiteral: 3.!
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 10:37:02' prior: 50876603!
moveXFrom: currentPosition to: newPosition

	isXPlaying not
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			(self isOccupied: newPosition) ifTrue: [self error: self class positionOccupiedDescription].
			(currentPosition eightNeighbors hasLiteral: newPosition) not ifTrue: [self error: self class cantMoveToNotNeighborPositionDescription.]
			self move: (XChip newAt: currentPosition) to: newPosition.
		].! !
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 10:37:12' prior: 50876784!
moveXFrom: currentPosition to: newPosition

	isXPlaying not
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			(self isOccupied: newPosition) ifTrue: [self error: self class positionOccupiedDescription].
			((currentPosition eightNeighbors hasLiteral: newPosition) not )ifTrue: [self error: self class cantMoveToNotNeighborPositionDescription.]
			self move: (XChip newAt: currentPosition) to: newPosition.
		].! !
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 10:37:16' prior: 50876801!
moveXFrom: currentPosition to: newPosition

	isXPlaying not
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			(self isOccupied: newPosition) ifTrue: [self error: self class positionOccupiedDescription].
			((currentPosition eightNeighbors hasLiteral: newPosition) not ) ifTrue: [self error: self class cantMoveToNotNeighborPositionDescription.]
			self move: (XChip newAt: currentPosition) to: newPosition.
		].! !
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 10:37:18' prior: 50876818!
moveXFrom: currentPosition to: newPosition

	isXPlaying not
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			(self isOccupied: newPosition) ifTrue: [self error: self class positionOccupiedDescription].
			((currentPosition eightNeighbors hasLiteral: newPosition) not ) ifTrue: [self error: self class cantMoveToNotNeighborPositionDescription.].
			self move: (XChip newAt: currentPosition) to: newPosition.
		].! !

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 10:37:24'!
PASSED!
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 10:37:37' prior: 50876616!
moveOFrom: currentPosition to: newPosition
	
	isXPlaying
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			(self isOccupied: newPosition) ifTrue: [self error: self class positionOccupiedDescription].
			((currentPosition eightNeighbors hasLiteral: newPosition) not ) ifTrue: [self error: self class cantMoveToNotNeighborPositionDescription.].
			self move: (OChip newAt: currentPosition) to: newPosition.
		].! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:39:38'!
test25XCanWin
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	self should: [aTerniLapilliGame moveXFrom: 0@0 to: 2@0.]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli cantMoveToNotNeighborPositionDescription. ].
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:41:10' prior: 50876872!
test25XCanWin
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 2@2.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:41:48' prior: 50876890!
test25XCanWin
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 2@2.
	
	self assert: aTerniLapilliGame hasPlayerXWon equals: true.
	! !

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 10:41:54'!
ERROR!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 10:41:54'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'mf 11/2/2020 10:42:18'!
hasPlayerXWon
	self shouldBeImplemented.! !

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 10:42:37'!
ERROR!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 10:42:37'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'mf 11/2/2020 10:43:00' prior: 50876919!
hasPlayerXWon
	! !

!methodRemoval: TerniLapilli #hasPlayerXWon stamp: 'mf 11/2/2020 10:43:24'!
hasPlayerXWon
	!
!TerniLapilli methodsFor: 'testing' stamp: 'mf 11/2/2020 10:44:09'!
hasXWon
	^true.! !

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 10:44:13'!
ERROR!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 10:44:13'!
ERROR!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:44:19' prior: 50876901!
test25XCanWin
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 2@2.
	
	self assert: aTerniLapilliGame hasXWon equals: true.
	! !

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 10:44:21'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:44:47'!
test26CantMoveAfterXWins
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 2@2.
	
	self assert: aTerniLapilliGame hasXWon equals: true.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:44:54'!
test26CantPlayAfterXWins
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 2@2.
	
	self assert: aTerniLapilliGame hasXWon equals: true.
	! !

!methodRemoval: TerniLapilliTest #test26CantMoveAfterXWins stamp: 'mf 11/2/2020 10:44:58'!
test26CantMoveAfterXWins
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 2@2.
	
	self assert: aTerniLapilliGame hasXWon equals: true.
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:46:34' prior: 50876971!
test26CantPlayAfterXWins
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 2@2.
	self should: [aTerniLapilliGame putOAt: 2@1.]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli gameIsOver. ]
	! !

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 10:46:42'!
FAILURE!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 10:46:42'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 10:48:04' prior: 50876028!
putOAt: aPosition

	isXPlaying
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			self isGameOver ifTrue: [self error: self class gameIsOverDescription.].
			self put: (OChip newAt: aPosition).
		].! !
!TerniLapilli methodsFor: 'playing - private' stamp: 'mf 11/2/2020 10:48:58'!
isGameOver
	^ self hasXWon or: self hasOWon.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'mf 11/2/2020 10:49:34'!
gameIsOverDescription

	^'Cannot play after game has finished'! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'mf 11/2/2020 10:49:36' prior: 50877033!
gameIsOverDescription

	^'Cannot play after game has finished.'! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 10:49:51' prior: 50876996!
test26CantPlayAfterXWins
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 2@2.
	self should: [aTerniLapilliGame putOAt: 2@1.]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli gameIsOverDescription. ]
	! !

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 10:50:00'!
ERROR!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 10:50:00'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'mf 11/2/2020 10:50:12'!
hasOWon
	^true.! !

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 10:50:18'!
ERROR!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 10:50:18'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'mf 11/2/2020 10:52:06' prior: 50877065!
hasOWon
	^true.! !
!TerniLapilli class methodsFor: 'inquiries' stamp: 'mf 11/2/2020 10:55:37'!
winningPositions
	
	^ Array with: (Array with: 0@0 with: 0@1 with: 0@2)
		     with: (Array with: 1@0 with: 1@1 with: 1@2)
		     with: (Array with: 2@0 with: 2@1 with: 2@2)
		     with: (Array with: 0@0 with: 1@0 with: 2@0)
		     with: (Array with: 0@1 with: 1@1 with: 2@1)
		     with: (Array with: 0@2 with: 1@2 with: 2@2)! !
!TerniLapilli class methodsFor: 'inquiries' stamp: 'mf 11/2/2020 10:57:17' prior: 50877078!
winningPositions
	
	^ (Array with: (Array with: 0@0 with: 0@1 with: 0@2)
		     with: (Array with: 1@0 with: 1@1 with: 1@2)
		     with: (Array with: 2@0 with: 2@1 with: 2@2))
		     with: (Array with: 0@0 with: 1@0 with: 2@0)
		     with: (Array with: 0@1 with: 1@1 with: 2@1)
		     with: (Array with: 0@2 with: 1@2 with: 2@2)
		     with: (Array with: 0@0 with: 1@1 with: 2@2)
		     with: (Array with: 0@2 with: 1@1 with: 2@0)! !
!TerniLapilli methodsFor: 'testing' stamp: 'mf 11/2/2020 10:57:55' prior: 50877075!
hasOWon
	^ self class winningPositions hasLiteral: self chipsOPlayed.! !

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 10:58:02'!
ERROR!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 10:58:02'!
ERROR!

OrderedCollection with: 1 with: 2 with: 3 with: 4 with: 5!

OrderedCollection with: 1 with: 2 with: 3 with: 4 with: 5 with: 6!

(OrderedCollection with: 1 with: 2 with: 3 with: 4 with: 5 with: 6) with: 7!

(OrderedCollection new add: 1) add: 2!

(OrderedCollection new add: 1) !

(OrderedCollection new)!

(OrderedCollection new) add: 1!
!TerniLapilli methodsFor: 'initialization' stamp: 'mf 11/2/2020 11:05:50' prior: 50876045 overrides: 16896425!
initialize

	chips := Collection new.
	isXPlaying := true.! !
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 11:06:09' prior: 50877018!
putOAt: aPosition

	isXPlaying
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			'self isGameOver ifTrue: [self error: self class gameIsOverDescription.].'
			self put: (OChip newAt: aPosition).
		].! !

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 11:06:14'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 11:06:14'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:06:14'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:06:14'!
ERROR!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:06:14'!
ERROR!
!TerniLapilli methodsFor: 'initialization' stamp: 'mf 11/2/2020 11:06:38' prior: 50877132 overrides: 16896425!
initialize

	chips := OrderedCollection new.
	isXPlaying := true.! !

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 11:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 11:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 11:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 11:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 11:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:06:42'!
ERROR!

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 11:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 11:08:03'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 11:08:05'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:08:06'!
ERROR!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:08:06'!
ERROR!
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 11:08:26' prior: 50877137!
putOAt: aPosition

	isXPlaying
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			"self isGameOver ifTrue: [self error: self class gameIsOverDescription.]."
			self put: (OChip newAt: aPosition).
		].! !

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:08:30'!
PASSED!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:08:30'!
FAILURE!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:08:30'!
FAILURE!
!TerniLapilli class methodsFor: 'inquiries' stamp: 'mf 11/2/2020 11:08:50' prior: 50877092!
winningPositions
	
	^ (Array with: (Array with: 0@0 with: 0@1 with: 0@2)
		      with: (Array with: 1@0 with: 1@1 with: 1@2)
		      with: (Array with: 2@0 with: 2@1 with: 2@2))
		      with: (Array with: 0@0 with: 1@0 with: 2@0)
		      with: (Array with: 0@1 with: 1@1 with: 2@1)
		      with: (Array with: 0@2 with: 1@2 with: 2@2)
		      with: (Array with: 0@0 with: 1@1 with: 2@2)
		      with: (Array with: 0@2 with: 1@1 with: 2@0)! !

Array with: 1 with: 2!

| a |
a := Array with: 1 with: 2.
a literalEqual: 1!

| a |
a := Array with: 1 with: 2.
a is: 1!

| a |
a := Array with: 1 with: 2.
a includes: 1!
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 11:15:39' prior: 50876855!
moveOFrom: currentPosition to: newPosition
	
	isXPlaying
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			(self isOccupied: newPosition) ifTrue: [self error: self class positionOccupiedDescription].
			((currentPosition eightNeighbors includes: newPosition) not ) ifTrue: [self error: self class cantMoveToNotNeighborPositionDescription.].
			self move: (OChip newAt: currentPosition) to: newPosition.
		].! !
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 11:15:47' prior: 50876835!
moveXFrom: currentPosition to: newPosition

	isXPlaying not
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			(self isOccupied: newPosition) ifTrue: [self error: self class positionOccupiedDescription].
			((currentPosition eightNeighbors includes: newPosition) not ) ifTrue: [self error: self class cantMoveToNotNeighborPositionDescription.].
			self move: (XChip newAt: currentPosition) to: newPosition.
		].! !

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 11:15:53'!
PASSED!
!TerniLapilli methodsFor: 'initialization' stamp: 'mf 11/2/2020 11:17:14' prior: 50877228 overrides: 16896425!
initialize

	chips := Set new.
	isXPlaying := true.! !

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 11:17:16'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 11:17:16'!
FAILURE!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 11:17:16'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:17:16'!
FAILURE!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 11:17:16'!
PASSED!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 11:17:16'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 11:17:16'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:17:16'!
FAILURE!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:17:16'!
FAILURE!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:17:16'!
FAILURE!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:17:16'!
FAILURE!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 11:17:16'!
FAILURE!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:17:16'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:17:16'!
PASSED!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 11:17:16'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:17:16'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:17:16'!
PASSED!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:17:16'!
ERROR!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:17:16'!
ERROR!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 11:17:16'!
ERROR!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 11:17:16'!
PASSED!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 11:17:16'!
PASSED!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 11:17:16'!
PASSED!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 11:17:16'!
PASSED!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:17:16'!
PASSED!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:17:16'!
FAILURE!
!TerniLapilli methodsFor: 'initialization' stamp: 'mf 11/2/2020 11:17:37' prior: 50877481 overrides: 16896425!
initialize

	chips := Collection new.
	isXPlaying := true.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'mf 11/2/2020 11:17:42' prior: 50877567 overrides: 16896425!
initialize

	chips := Set new.
	isXPlaying := true.! !

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 11:17:45'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 11:17:45'!
FAILURE!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 11:17:45'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:17:45'!
FAILURE!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 11:17:45'!
PASSED!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 11:17:45'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 11:17:45'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:17:45'!
FAILURE!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:17:45'!
PASSED!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:17:45'!
FAILURE!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:17:45'!
FAILURE!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 11:17:45'!
FAILURE!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:17:45'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:17:45'!
PASSED!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 11:17:45'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:17:45'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:17:45'!
PASSED!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:17:45'!
ERROR!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:17:45'!
ERROR!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 11:17:45'!
ERROR!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 11:17:45'!
PASSED!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 11:17:45'!
PASSED!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 11:17:45'!
PASSED!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 11:17:45'!
PASSED!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:17:45'!
PASSED!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:17:45'!
FAILURE!

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 11:17:48'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 11:17:48'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 11:17:48'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:17:48'!
FAILURE!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 11:17:48'!
PASSED!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 11:17:48'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 11:17:48'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:17:48'!
FAILURE!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:17:48'!
FAILURE!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:17:48'!
FAILURE!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:17:48'!
PASSED!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 11:17:48'!
FAILURE!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:17:48'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:17:48'!
PASSED!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 11:17:48'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:17:48'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:17:48'!
PASSED!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:17:48'!
ERROR!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:17:48'!
ERROR!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 11:17:48'!
ERROR!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 11:17:48'!
PASSED!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 11:17:48'!
FAILURE!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 11:17:48'!
PASSED!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 11:17:48'!
PASSED!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:17:48'!
PASSED!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:17:48'!
FAILURE!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:17:54'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:17:59'!
FAILURE!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:18:02'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 11:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 11:18:06'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 11:18:09'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:18:10'!
FAILURE!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:18:10'!
FAILURE!
!TerniLapilli methodsFor: 'initialization' stamp: 'mf 11/2/2020 11:19:43' prior: 50877573 overrides: 16896425!
initialize

	chips := OrderedCollection new.
	isXPlaying := true.! !

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:19:49'!
PASSED!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:19:49'!
FAILURE!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:19:49'!
FAILURE!

| a b |
a := OrderedCollection with: 1 with: 2.
b := OrderedCollection with: 2 with: 1.
a = b!

| a b |
a := OrderedCollection with: 1 with: 2.
b := OrderedCollection with: 1 with: 2.
a = b !

| a b |
a := Collection with: 1 with: 2.
b := Collection with: 1 with: 2.
a = b !

| a b |
a := Set with: 1 with: 2.
b := Set with: 1 with: 2.
a = b !

| a b |
a := Set with: 1 with: 2.
b := Set with: 2 with:1 .
a = b !
!TerniLapilli methodsFor: 'initialization' stamp: 'mf 11/2/2020 11:21:21' prior: 50877765 overrides: 16896425!
initialize

	chips := Set new.
	isXPlaying := true.! !

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 11:21:26'!
PASSED!

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 11:21:28'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:21:32'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:21:35'!
PASSED!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:21:37'!
FAILURE!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:21:37'!
FAILURE!

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 11:22:39'!
FAILURE!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:22:39'!
FAILURE!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:22:39'!
FAILURE!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:22:39'!
FAILURE!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 11:22:39'!
FAILURE!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:22:39'!
ERROR!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:22:39'!
ERROR!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 11:22:39'!
ERROR!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:22:39'!
FAILURE!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:22:56'!
FAILURE!

aTerniLapilliGame isOccupied: 0@1!

aTerniLapilliGame isOccupied: 0@0!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:25:43'!
FAILURE!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:25:43'!
FAILURE!

| aTerniLapilliGame |
	
aTerniLapilliGame := TerniLapilli new.
aTerniLapilliGame putXAt: 0@0.
aTerniLapilliGame putOAt: 0@1.

aTerniLapilliGame isOccupied: 0@0.!

| aTerniLapilliGame |
	
aTerniLapilliGame := TerniLapilli new.
aTerniLapilliGame putXAt: 0@0.
"aTerniLapilliGame putOAt: 0@1."

aTerniLapilliGame isOccupied: 0@0.!

| aTerniLapilliGame |
	
aTerniLapilliGame := TerniLapilli new.
aTerniLapilliGame putXAt: 0@0.
"aTerniLapilliGame putOAt: 0@1."

aTerniLapilliGame chipsXPlayed.!

| aTerniLapilliGame |
	
aTerniLapilliGame := TerniLapilli new.
aTerniLapilliGame putXAt: 0@0.
"aTerniLapilliGame putOAt: 0@1."

aTerniLapilliGame isXAt: 0@0.!

| aTerniLapilliGame |
	
aTerniLapilliGame := TerniLapilli new.
aTerniLapilliGame putXAt: 0@0.
aTerniLapilliGame putOAt: 0@1.

aTerniLapilliGame isOAt: 0@1.!

| aTerniLapilliGame |
	
aTerniLapilliGame := TerniLapilli new.
aTerniLapilliGame putXAt: 0@0.
aTerniLapilliGame putOAt: 0@1.

aTerniLapilliGame isOAt: 0@1.!

| aTerniLapilliGame |
	
aTerniLapilliGame := TerniLapilli new.
aTerniLapilliGame putXAt: 0@0.
aTerniLapilliGame putOAt: 0@1.

aTerniLapilliGame isOAt: 0@1.!

| aTerniLapilliGame |
	
aTerniLapilliGame := TerniLapilli new.
aTerniLapilliGame putXAt: 0@0.
aTerniLapilliGame putOAt: 0@1.

aTerniLapilliGame isOccupied: 0@1.!

| aTerniLapilliGame |
	
aTerniLapilliGame := TerniLapilli new.
aTerniLapilliGame putXAt: 0@0.
aTerniLapilliGame putOAt: 0@1.

aTerniLapilliGame isOccupied: 0@0.!

| aTerniLapilliGame |
	
aTerniLapilliGame := TerniLapilli new.
aTerniLapilliGame putXAt: 0@0.
aTerniLapilliGame putOAt: 0@1.

aTerniLapilliGame isXAt: 0@0.!
!TerniLapilli methodsFor: 'initialization' stamp: 'mf 11/2/2020 11:31:20' prior: 50877867 overrides: 16896425!
initialize

	chips := OrderedCollection new.
	isXPlaying := true.! !

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:31:32'!
FAILURE!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:31:32'!
FAILURE!

!methodRemoval: TerniLapilli class #winningPositions stamp: 'mf 11/2/2020 11:31:55'!
winningPositions
	
	^ (Array with: (Array with: 0@0 with: 0@1 with: 0@2)
		      with: (Array with: 1@0 with: 1@1 with: 1@2)
		      with: (Array with: 2@0 with: 2@1 with: 2@2))
		      with: (Array with: 0@0 with: 1@0 with: 2@0)
		      with: (Array with: 0@1 with: 1@1 with: 2@1)
		      with: (Array with: 0@2 with: 1@2 with: 2@2)
		      with: (Array with: 0@0 with: 1@1 with: 2@2)
		      with: (Array with: 0@2 with: 1@1 with: 2@0)!
!TerniLapilli methodsFor: 'testing' stamp: 'mf 11/2/2020 11:32:42'!
amountOfChipsOPlayed

	^(chips select: [ :aTerniLapilliChip | aTerniLapilliChip label = $O ]) size.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'mf 11/2/2020 11:32:42' prior: 50877109!
hasOWon
	^ self class winningPositions hasLiteral: self amountOfChipsOPlayed.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'mf 11/2/2020 11:32:42' prior: 50875903!
test19OCanMoveAfterAllChipsArePlaced
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame moveXFrom: 1@1 to: 2@1.
	
	aTerniLapilliGame moveOFrom: 1@0 to: 2@0.

	self assert: (aTerniLapilliGame isOAt: 2@0).
	self assert: (aTerniLapilliGame isOAt: 1@0) not.
	self assert: aTerniLapilliGame amountOfChipsOPlayed = 3.! !

!methodRemoval: TerniLapilli #chipsOPlayed stamp: 'mf 11/2/2020 11:32:42'!
chipsOPlayed

	^(chips select: [ :aTerniLapilliChip | aTerniLapilliChip label = $O ]) size.!
!TerniLapilli methodsFor: 'testing' stamp: 'mf 11/2/2020 11:33:00'!
amountOfChipsXPlayed

	^(chips select: [ :aTerniLapilliChip | aTerniLapilliChip label = $X ]) size.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'mf 11/2/2020 11:33:00' prior: 50875885!
test18XCanMoveAfterAllChipsArePlaced
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 0@2.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.

	aTerniLapilliGame moveXFrom: 1@1 to: 2@1.

	self assert: (aTerniLapilliGame isXAt: 2@1).
	self assert: (aTerniLapilliGame isXAt: 1@1) not.
	self assert: aTerniLapilliGame amountOfChipsXPlayed = 3.! !

!methodRemoval: TerniLapilli #chipsXPlayed stamp: 'mf 11/2/2020 11:33:00'!
chipsXPlayed

	^(chips select: [ :aTerniLapilliChip | aTerniLapilliChip label = $X ]) size.!
!TerniLapilli methodsFor: 'testing' stamp: 'mf 11/2/2020 11:33:10'!
chipsXPlayed

	^(chips select: [ :aTerniLapilliChip | aTerniLapilliChip label = $X ]).! !
!TerniLapilli methodsFor: 'testing' stamp: 'mf 11/2/2020 11:33:22'!
chipsOPlayed

	^(chips select: [ :aTerniLapilliChip | aTerniLapilliChip label = $O ]).! !
!TerniLapilli methodsFor: 'testing' stamp: 'mf 11/2/2020 11:33:35' prior: 50878174!
amountOfChipsXPlayed

	^self chipsXPlayed size.! !
!TerniLapilli methodsFor: 'testing' stamp: 'mf 11/2/2020 11:33:49' prior: 50878136!
amountOfChipsOPlayed

	^self chipsOPlayed size.! !

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:33:51'!
PASSED!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:33:51'!
FAILURE!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:33:51'!
FAILURE!

| a |
a := TerniLapilli new.!

| a |
a := TerniLapilli new.
a putXAt: 0@0.
a chipsXPlayed!
!TerniLapilli methodsFor: 'testing' stamp: 'mf 11/2/2020 11:35:05' prior: 50878143!
hasOWon
	^ self class winningPositions includes: self chipsOPlayed.! !

| a |
a := TerniLapilli new.
a putXAt: 0@0.
a chipsXPlayed!
!TerniLapilli class methodsFor: 'inquiries' stamp: 'mf 11/2/2020 11:36:53'!
winningPositions
	! !

a chipsXPlayed sorted!

| a |
a := TerniLapilli new.
a putXAt: 0@0.
a chipsXPlayed sorted!
!TerniLapilli class methodsFor: 'inquiries' stamp: 'mf 11/2/2020 11:42:20' prior: 50878318!
winningPositions
	| positionsCollection |
	positionsCollection := OrderedCollection new.
	positionsCollection add: (OrderedCollection with: 0@0 with: 0@1 with: 0@2) sort.
	positionsCollection add: (OrderedCollection with: 1@0 with: 1@1 with: 1@2) sort.
	positionsCollection add: (OrderedCollection with: 2@0 with: 2@1 with: 2@2) sort.
	positionsCollection add: (OrderedCollection with: 0@0 with: 1@0 with: 2@0) sort.
	positionsCollection add: (OrderedCollection with: 0@1 with: 1@1 with: 2@1) sort.
	positionsCollection add: (OrderedCollection with: 0@2 with: 1@2 with: 2@2) sort.
	positionsCollection add: (OrderedCollection with: 0@0 with: 1@1 with: 2@2) sort.
	positionsCollection add: (OrderedCollection with: 0@2 with: 1@1 with: 2@0) sort.
	! !
!TerniLapilli class methodsFor: 'inquiries' stamp: 'mf 11/2/2020 11:42:34' prior: 50878325!
winningPositions
	| positionsCollection |
	positionsCollection := OrderedCollection new.
	positionsCollection add: (OrderedCollection with: 0@0 with: 0@1 with: 0@2) sort.
	positionsCollection add: (OrderedCollection with: 1@0 with: 1@1 with: 1@2) sort.
	positionsCollection add: (OrderedCollection with: 2@0 with: 2@1 with: 2@2) sort.
	positionsCollection add: (OrderedCollection with: 0@0 with: 1@0 with: 2@0) sort.
	positionsCollection add: (OrderedCollection with: 0@1 with: 1@1 with: 2@1) sort.
	positionsCollection add: (OrderedCollection with: 0@2 with: 1@2 with: 2@2) sort.
	positionsCollection add: (OrderedCollection with: 0@0 with: 1@1 with: 2@2) sort.
	positionsCollection add: (OrderedCollection with: 0@2 with: 1@1 with: 2@0) sort.
	
	^positionsCollection.
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'mf 11/2/2020 11:42:55' prior: 50878311!
hasOWon
	^ self class winningPositions includes: (self chipsOPlayed sort).! !

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:42:59'!
PASSED!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:42:59'!
FAILURE!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:42:59'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 11:43:12' prior: 50877327!
putOAt: aPosition

	isXPlaying
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			self isGameOver ifTrue: [self error: self class gameIsOverDescription.].
			self put: (OChip newAt: aPosition).
		].! !

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 11:43:15'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 11:43:15'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 11:43:15'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 11:43:15'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 11:43:15'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:43:15'!
PASSED!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:43:15'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:43:15'!
PASSED!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:43:15'!
ERROR!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:43:22'!
ERROR!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:43:22'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'mf 11/2/2020 11:43:52' prior: 50876935!
hasXWon
	^ self class winningPositions includes: (self chipsXPlayed sort).! !
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 11:44:05' prior: 50876036!
putXAt: aPosition

	isXPlaying not
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			self isGameOver ifTrue: [self error: self class gameIsOverDescription.].
			self put: (XChip newAt: aPosition).
		].! !

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:44:11'!
ERROR!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:44:11'!
ERROR!
!TerniLapilliChip methodsFor: 'inquiries' stamp: 'mf 11/2/2020 11:44:38'!
<= aLabeledPosition

	^label = aLabeledPosition label and: [position <= aLabeledPosition position].! !

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:44:43'!
FAILURE!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:44:43'!
FAILURE!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:45:03'!
FAILURE!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:45:03'!
FAILURE!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:45:45'!
FAILURE!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:45:45'!
FAILURE!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:46:03'!
FAILURE!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:46:03'!
FAILURE!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:46:13'!
FAILURE!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:46:13'!
FAILURE!

| a |
a := TerniLapilli new.
a putXAt: 0@0.
a putOAt: 0@1.
a hasXWon.!

| a |
a := TerniLapilli new.
a putXAt: 0@0.
a putOAt: 0@1.
a putXAt: 1@1.
a putOAt: 0@2.
a putXAt: 2@2.

a hasXWon.!

| a |
a := TerniLapilli new.
a putXAt: 0@0.
a putOAt: 0@1.
a putXAt: 1@1.
a putOAt: 0@2.
a putXAt: 2@2.

a hasXWon.!

| a |
a := TerniLapilli new.
a putXAt: 0@0.
a putOAt: 0@1.
a putXAt: 1@1.
a putOAt: 0@2.
a putXAt: 2@2.

a hasXWon.!
!TerniLapilli methodsFor: 'testing' stamp: 'mf 11/2/2020 11:51:07' prior: 50878209!
chipsOPlayed

	^(chips select: [ :aTerniLapilliChip | aTerniLapilliChip label = $O ]) do: [ :aTerniLapilliChip | aTerniLapilliChip position].! !

| a |
a := TerniLapilli new.
a putXAt: 0@0.
a putOAt: 0@1.
a putXAt: 1@1.
a putOAt: 0@2.
a putXAt: 2@2.

a chipsOPlayed.!

| a |
a := TerniLapilli new.
a putXAt: 0@0.
a putOAt: 0@1.
a putXAt: 1@1.
a putOAt: 0@2.
a putXAt: 2@2.

a chipsOPlayed.!

| a |
a := TerniLapilli new.
a putXAt: 0@0.
a putOAt: 0@1.
a putXAt: 1@1.
a putOAt: 0@2.
a putXAt: 2@2.

a chipsOPlayed. !

a := OrderedCollection new.
a add: 1.
a add: 2.
a add: 4.
a select: [ :number | number even]!

| a |

a := OrderedCollection new.
a add: 1.
a add: 2.
a add: 4.
a select: [ :number | number even]!

| a |

a := OrderedCollection new.
a add: 1.
a add: 2.
a add: 4.
(a select: [ :number | number even]) do: [ :number | number + 2]!

| a b|

a := OrderedCollection new.
a add: 1.
a add: 2.
a add: 4.
b := a select: [ :number | number even].
b do: [:number | number + 2]!

| a b|

a := OrderedCollection new.
a add: 1.
a add: 2.
a add: 4.
b := a select: [ :number | number even].
b collect: [:number | number + 2]!
!TerniLapilli methodsFor: 'testing' stamp: 'mf 11/2/2020 11:56:44' prior: 50878633!
chipsOPlayed

	^(chips select: [ :aTerniLapilliChip | aTerniLapilliChip label = $O ]) collect: [ :aTerniLapilliChip | aTerniLapilliChip position].! !

| a |
a := TerniLapilli new.
a putXAt: 0@0.
a putOAt: 0@1.
a putXAt: 1@1.
a putOAt: 0@2.
a putXAt: 2@2.

a chipsOPlayed. !

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 11:57:12'!
PASSED!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:57:12'!
FAILURE!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:57:12'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'mf 11/2/2020 11:57:25' prior: 50878204!
chipsXPlayed

	^(chips select: [ :aTerniLapilliChip | aTerniLapilliChip label = $X ]) collect: [ :aTerniLapilliChip | aTerniLapilliChip position].! !

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 11:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:57:28'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 11:59:09'!
test25OCanWin
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 2@2.
	
	self assert: aTerniLapilliGame hasXWon equals: true.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 11:59:15'!
test26OCanWin
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 2@2.
	
	self assert: aTerniLapilliGame hasXWon equals: true.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 11:59:23'!
test27CantPlayAfterXWins
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 2@2.
	self should: [aTerniLapilliGame putOAt: 2@1.]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli gameIsOverDescription. ]
	! !

!methodRemoval: TerniLapilliTest #test26CantPlayAfterXWins stamp: 'mf 11/2/2020 11:59:23'!
test26CantPlayAfterXWins
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 2@2.
	self should: [aTerniLapilliGame putOAt: 2@1.]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli gameIsOverDescription. ]
	!

!methodRemoval: TerniLapilliTest #test25OCanWin stamp: 'mf 11/2/2020 11:59:28'!
test25OCanWin
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 2@2.
	
	self assert: aTerniLapilliGame hasXWon equals: true.
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 12:00:03' prior: 50878862!
test26OCanWin
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 1@1.
	aTerniLapilliGame putXAt: 2@0.
	
	self assert: aTerniLapilliGame hasXWon equals: true.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 12:00:18' prior: 50878918!
test26OCanWin
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 1@1.
	aTerniLapilliGame putXAt: 2@0.
	aTerniLapilliGame putOAt: 2@1.
	
	self assert: aTerniLapilliGame hasXWon equals: true.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 12:00:32' prior: 50878931!
test26OCanWin
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 1@1.
	aTerniLapilliGame putXAt: 2@0.
	aTerniLapilliGame putOAt: 2@1.
	
	self assert: aTerniLapilliGame hasXWon equals: false.
	self assert: aTerniLapilliGame hasOWon equals: true.	! !

!testRun: #TerniLapilliTest #test26OCanWin stamp: 'mf 11/2/2020 12:00:34'!
PASSED!

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXPlaying chips'
	classVariableNames: 'winningPositions'
	poolDictionaries: ''
	category: 'TerniLapilli'!

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXPlaying chips'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'mf 11/2/2020 12:01:34'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXPlaying chips'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

1@2 <= 2@2!

(1@2) <= (2@2)!

(1@2) <= (1@1)!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 12:33:33'!
test28CantPlayAfterOWins
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 1@0.
	aTerniLapilliGame putOAt: 1@1.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 2@1.
	self should: [aTerniLapilliGame putXAt: 2@0.]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli gameIsOverDescription. ]
	! !

!testRun: #TerniLapilliTest #test28CantPlayAfterOWins stamp: 'mf 11/2/2020 12:33:35'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 12:34:09' prior: 50878874!
test27CantPlayAfterXWins
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@0.
	aTerniLapilliGame putXAt: 2@2.
	self should: [aTerniLapilliGame putOAt: 2@1.]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli gameIsOverDescription. ]
	! !

!testRun: #TerniLapilliTest #test28CantPlayAfterOWins stamp: 'mf 11/2/2020 12:34:22'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'mf 11/2/2020 12:35:20'!
test29CantMoveAfterOWins
	| aTerniLapilliGame |

	aTerniLapilliGame := TerniLapilli new.
	aTerniLapilliGame putXAt: 0@0.
	aTerniLapilliGame putOAt: 0@1.
	aTerniLapilliGame putXAt: 1@0.
	aTerniLapilliGame putOAt: 1@1.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 2@1.
	self should: [aTerniLapilliGame moveXFrom: 2@2 to: 1@2.]
		raise: Error
		withExceptionDo: [ :anException | anException description = TerniLapilli gameIsOverDescription. ]
	! !

!testRun: #TerniLapilliTest #test29CantMoveAfterOWins stamp: 'mf 11/2/2020 12:35:26'!
FAILURE!

!testRun: #TerniLapilliTest #test29CantMoveAfterOWins stamp: 'mf 11/2/2020 12:35:26'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 12:35:55' prior: 50877460!
moveXFrom: currentPosition to: newPosition

	isXPlaying not
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			self isGameOver ifTrue: [self error: self class gameIsOverDescription.].
			(self isOccupied: newPosition) ifTrue: [self error: self class positionOccupiedDescription].
			((currentPosition eightNeighbors includes: newPosition) not ) ifTrue: [self error: self class cantMoveToNotNeighborPositionDescription.].
			self move: (XChip newAt: currentPosition) to: newPosition.
		].! !
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 12:35:59' prior: 50877443!
moveOFrom: currentPosition to: newPosition
	
	isXPlaying
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			self isGameOver ifTrue: [self error: self class gameIsOverDescription.].
			(self isOccupied: newPosition) ifTrue: [self error: self class positionOccupiedDescription].
			((currentPosition eightNeighbors includes: newPosition) not ) ifTrue: [self error: self class cantMoveToNotNeighborPositionDescription.].
			self move: (OChip newAt: currentPosition) to: newPosition.
		].! !

!testRun: #TerniLapilliTest #test29CantMoveAfterOWins stamp: 'mf 11/2/2020 12:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test26OCanWin stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test27CantPlayAfterXWins stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPlayAfterOWins stamp: 'mf 11/2/2020 12:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test29CantMoveAfterOWins stamp: 'mf 11/2/2020 12:36:07'!
PASSED!
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 12:40:37' prior: 50879062!
moveOFrom: currentPosition to: newPosition
	
	isXPlaying
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			self move: (OChip newAt: currentPosition) to: newPosition.
		].! !
!TerniLapilli methodsFor: 'playing - private' stamp: 'mf 11/2/2020 12:41:24' prior: 50876050!
move: aTerniLapilliChip to: newPosition
	
	self isGameOver ifTrue: [self error: self class gameIsOverDescription.].
	
	(self isOccupied: newPosition) ifTrue: [self error: self class positionOccupiedDescription].
	
	((aTerniLapilliChip position eightNeighbors includes: newPosition) not ) ifTrue: [self error: self class cantMoveToNotNeighborPositionDescription.].
	
	(self class isValid: newPosition) ifFalse: [ self error: self class invalidPositionDescription. ].

	chips size < 6
		ifTrue: [
			self error: self class cantMoveYetDescription.
		]
		ifFalse: [
			chips remove: aTerniLapilliChip.
			chips add: (aTerniLapilliChip moveTo: newPosition).
			
			isXPlaying := isXPlaying not.
		].! !

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test26OCanWin stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test27CantPlayAfterXWins stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPlayAfterOWins stamp: 'mf 11/2/2020 12:41:29'!
PASSED!

!testRun: #TerniLapilliTest #test29CantMoveAfterOWins stamp: 'mf 11/2/2020 12:41:29'!
PASSED!
!TerniLapilli methodsFor: 'playing' stamp: 'mf 11/2/2020 12:41:41' prior: 50879043!
moveXFrom: currentPosition to: newPosition

	isXPlaying not
		ifTrue: [
			self error: self class notYourTurnDescription.
		]
		ifFalse: [
			self move: (XChip newAt: currentPosition) to: newPosition.
		].! !

!testRun: #TerniLapilliTest #test01XPlaysFirst stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanPlayItsTurn stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test04OCanPlayItsTurn stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAfterO stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test06XCantPlayOsTurn stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test07OCantPlayXsTurn stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test08PositionsDontOverlap stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test09PositionsAreOccupied stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test10OCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test11XCantPlayInOccupiedPosition stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test12XAndOAreAtEveryPositionPlayed stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test13XCantPlayInInvalidPosition stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPlayInInvalidPosition stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test15CantPlaceMoreThan3Chips stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test16XCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test17OCantMoveUntilAllChipsArePlaced stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test18XCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test19OCanMoveAfterAllChipsArePlaced stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test20XCantMoveInOsTurn stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test21OCantMoveInXsTurn stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test22XCantMoveToOccupiedPosition stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test23XCantMoveToInvalidPosition stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test24XCantMoveToNotNeighborPosition stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test25XCanWin stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test26OCanWin stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test27CantPlayAfterXWins stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPlayAfterOWins stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test29CantMoveAfterOWins stamp: 'mf 11/2/2020 12:41:44'!
PASSED!

----QUIT----(2 November 2020 12:44:29) CuisUniversity-4383.image priorSource: 17408445!