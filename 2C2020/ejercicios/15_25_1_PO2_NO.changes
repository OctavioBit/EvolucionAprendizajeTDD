----SNAPSHOT----(8 November 2020 20:00:35) CuisUniversity-4137.image priorSource: 17626153!

!classRemoval: #RootState stamp: 'HG 11/9/2020 16:43:35'!
PortfolioHierarchyState subclass: #RootState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ContainedState stamp: 'HG 11/9/2020 16:43:36'!
PortfolioHierarchyState subclass: #ContainedState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioHierarchyState stamp: 'HG 11/9/2020 16:43:36'!
Object subclass: #PortfolioHierarchyState
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccount stamp: 'HG 11/9/2020 16:43:37'!
FinancialAsset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions balanceCount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'HG 11/9/2020 16:43:37'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets hierarchyState portfoliosThatContainsMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #FinancialAsset stamp: 'HG 11/9/2020 16:43:38'!
Object subclass: #FinancialAsset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'HG 11/9/2020 16:43:38'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'HG 11/9/2020 16:43:38'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'HG 11/9/2020 16:43:39'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'HG 11/9/2020 16:43:39'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'HG 11/9/2020 16:43:39'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /Users/monteagudo/Desktop/Inge1/18-Portfolio1/Portfolio-Ejercicio.st----!

!testRun: #PortfolioTest #test04PortfolioRegistersTransactionOfAddedPortfolio stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioShouldBeEmptyWhenCreated stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioRegistersTransactionOfAdddedAccount stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioRegistersTransactionsOfMultipleAddedAccounts stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioRegistersTransactionOfAddedPortfolio stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test05CannotAddAlreadyAddedAccount stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test06CannotAddAccountAlreadyInASubPortfolio stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAlreadyAddedPortfolio stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test08ContainedPortfolioCannotAddAnotherPortfolioContainingAssetThatExistsInRootPortfolio stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test09ContainedPortfolioWithAssetInRootPortfolioCannotAddAnotherContainedPortofolioWithSameAssetWithinItsRootPortfolio stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

----End fileIn of /Users/monteagudo/Downloads/Portfolio-Solucion.st----!

----STARTUP---- (11 November 2020 17:33:13) as /Users/monteagudo/Downloads/macos64/CuisUniversity-4137.image!


!classRemoval: #RootState stamp: 'HG 11/11/2020 17:33:36'!
PortfolioHierarchyState subclass: #RootState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ContainedState stamp: 'HG 11/11/2020 17:33:37'!
PortfolioHierarchyState subclass: #ContainedState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioHierarchyState stamp: 'HG 11/11/2020 17:33:37'!
Object subclass: #PortfolioHierarchyState
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccount stamp: 'HG 11/11/2020 17:33:38'!
FinancialAsset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions balanceCount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'HG 11/11/2020 17:33:38'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets hierarchyState portfoliosThatContainsMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #FinancialAsset stamp: 'HG 11/11/2020 17:33:39'!
Object subclass: #FinancialAsset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'HG 11/11/2020 17:33:39'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'HG 11/11/2020 17:33:40'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'HG 11/11/2020 17:33:40'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'HG 11/11/2020 17:33:40'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'HG 11/11/2020 17:33:41'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:41'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:41'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'testing -- creating' stamp: 'HG 11/8/2020 19:56:23'!
test01PortfolioShouldBeEmptyWhenCreated
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio hasRegistered: aTransaction). 
	! !
!PortfolioTest methodsFor: 'testing -- adding assets' stamp: 'Fs 11/9/2020 00:09:39'!
test02PortfolioRegistersTransactionOfAdddedAccount
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	! !
!PortfolioTest methodsFor: 'testing -- adding assets' stamp: 'Fs 11/9/2020 00:47:26'!
test03PortfolioRegistersTransactionsOfMultipleAddedAccounts
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit 
	aNotAddedAccount aNotAddedTransaction another100Withdraw another300Deposit |
	
	aPortfolio _ Portfolio new.
	
	aNotAddedAccount _ ReceptiveAccount new.
	aNotAddedTransaction _ Deposit register: 100 on: aNotAddedAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	another300Deposit _ Deposit register: 300 on: anAccount.
	another100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 500.
	self assert: aPortfolio transactions size = 5.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	self assert: (aPortfolio hasRegistered: another100Withdraw). 
	self assert: (aPortfolio hasRegistered: another300Deposit). 
	self deny: (aPortfolio hasRegistered: aNotAddedTransaction).
	   
	! !
!PortfolioTest methodsFor: 'testing -- adding assets' stamp: 'Fs 11/9/2020 00:49:24'!
test04PortfolioRegistersTransactionOfAddedPortfolio
	
	| aPortfolio anAccount aTransaction aPortfolioToAdd |
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	aPortfolio _ Portfolio new.
	aPortfolioToAdd _ Portfolio new.
	
	aPortfolioToAdd add: anAccount.
	aPortfolio add: aPortfolioToAdd.
		
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	! !
!PortfolioTest methodsFor: 'testing -- repeated elements' stamp: 'Fs 11/9/2020 00:21:27'!
test05CannotAddAlreadyAddedAccount
	
	| aPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	! !
!PortfolioTest methodsFor: 'testing -- repeated elements' stamp: 'Fs 11/9/2020 00:30:30'!
test06CannotAddAccountAlreadyInASubPortfolio
	
	| aPortfolio aChildPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	aChildPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aChildPortfolio add: anAccount.
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	! !
!PortfolioTest methodsFor: 'testing -- repeated elements' stamp: 'Fs 11/9/2020 00:30:43'!
test07CannotAddAlreadyAddedPortfolio
	
	| aPortfolio aChildPortfolio |
	aPortfolio _ Portfolio new.
	aChildPortfolio _ Portfolio new.
	
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: aChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions size = 0.
	! !
!PortfolioTest methodsFor: 'testing -- hierarchy checks' stamp: 'Fs 11/9/2020 00:45:10'!
test08ContainedPortfolioCannotAddAnotherPortfolioContainingAssetThatExistsInRootPortfolio
	
	| aParentPortfolio aPortfolioToAdd aChildPortfolio a100Deposit anAccount |
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	
	aParentPortfolio _ Portfolio new.
	aParentPortfolio add: anAccount.
	
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	aPortfolioToAdd _ Portfolio new.
	aPortfolioToAdd add: anAccount.
	
	
	self should: [ aChildPortfolio add: aPortfolioToAdd.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 100.
	self assert: aParentPortfolio transactions size = 1.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	! !
!PortfolioTest methodsFor: 'testing -- hierarchy checks' stamp: 'Fs 11/9/2020 00:45:52'!
test09ContainedPortfolioWithAssetInRootPortfolioCannotAddAnotherContainedPortofolioWithSameAssetWithinItsRootPortfolio
	
	| aParentPortfolio aChildPortfolio a100Deposit anAccount anotherChildPortfolio anotherParentPortfolio |
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	
	aParentPortfolio _ Portfolio new.
	aParentPortfolio add: anAccount.
	
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	anotherParentPortfolio _ Portfolio new.
	anotherParentPortfolio add: anAccount.

	anotherChildPortfolio _ Portfolio new.
	anotherParentPortfolio add: anotherChildPortfolio.
	
	self should: [ aChildPortfolio add: anotherChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 100.
	self assert: aParentPortfolio transactions size = 1.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	! !

!classDefinition: #ReceptiveAccountTest category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:42'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccountTest category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:42'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:44'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:48'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:52'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:15'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:01'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #AccountTransaction category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:42'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:42'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16881508!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'operations' stamp: 'HG 11/6/2020 11:50:40'!
addToBalance: aReceptiveAccount
	self subclassResponsibility. ! !

!classDefinition: 'AccountTransaction class' category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:42'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:42'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/17/2019 03:22:00'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:42'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:42'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50885077!
value

	^ value! !
!Deposit methodsFor: 'operations' stamp: 'HG 11/2/2020 21:05:47' overrides: 50885081!
addToBalance: aReceptiveAccount
	^aReceptiveAccount contributeToBalanceAsDeposit: self value.! !

!classDefinition: 'Deposit class' category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:42'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:42'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:42'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:42'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'operations' stamp: 'HG 11/6/2020 10:44:20' overrides: 50885081!
addToBalance: aReceptiveAccount
	^aReceptiveAccount contributeToBalanceAsWithdraw: self value.! !
!Withdraw methodsFor: 'value' stamp: 'HG 11/2/2020 19:23:54' overrides: 50885077!
value

	^ value! !

!classDefinition: 'Withdraw class' category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #FinancialAsset category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
Object subclass: #FinancialAsset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialAsset category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
Object subclass: #FinancialAsset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!FinancialAsset methodsFor: 'balance' stamp: 'HG 11/7/2020 19:14:20'!
balance
	self subclassResponsibility. ! !
!FinancialAsset methodsFor: 'transactions' stamp: 'HG 11/8/2020 18:38:04'!
transactions
	self subclassResponsibility. ! !
!FinancialAsset methodsFor: 'testing' stamp: 'HG 11/8/2020 18:37:55'!
hasRegistered: aTransaction
	self subclassResponsibility. ! !

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets hierarchyState portfoliosThatContainsMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets hierarchyState portfoliosThatContainsMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'balance' stamp: 'HG 11/7/2020 19:22:33' overrides: 50885206!
balance
	
	assets isEmpty ifTrue: [^0].
	^assets sum: [:aFinancialAsset | aFinancialAsset balance].! !
!Portfolio methodsFor: 'transactions' stamp: 'Fs 11/9/2020 02:29:02' overrides: 50885210!
transactions
	^self flattenCollect: [:anAsset | anAsset transactions ] in: assets.	
	
	
	! !
!Portfolio methodsFor: 'testing' stamp: 'HG 11/6/2020 12:29:52' overrides: 50885214!
hasRegistered: aTransaction 
	^self transactions includes: aTransaction.
	! !
!Portfolio methodsFor: 'adding' stamp: 'Fs 11/9/2020 02:44:23'!
add: anAssetToAdd 
	
	self roots do: [:aRootPortfolioThatContainsMe | 
		(aRootPortfolioThatContainsMe isDisjointWithPortfoliosThatContains: anAssetToAdd) 
			ifFalse: [^self signalCantAddAlreadyAddedAsset]].
			
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !
!Portfolio methodsFor: 'initialization' stamp: 'HG 11/8/2020 18:29:02' overrides: 16896425!
initialize
	assets _ OrderedCollection new.
	hierarchyState _ RootState for: self.
	portfoliosThatContainsMe _ OrderedCollection new.! !
!Portfolio methodsFor: 'exceptions' stamp: 'HG 11/6/2020 19:31:25'!
signalCantAddAlreadyAddedAsset
	^self error: self class alreadyAddedAssetErrorDescription. ! !
!Portfolio methodsFor: 'testing -- private' stamp: 'Fs 11/9/2020 01:32:43'!
isDisjointWith: anotherAsset

	^ ((anotherAsset allAssets) intersection: (self allAssets)) isEmpty! !
!Portfolio methodsFor: 'testing -- private' stamp: 'Fs 11/9/2020 02:31:45'!
isDisjointWithPortfoliosThatContains: anAsset 

	^(anAsset roots) 
		anySatisfy: [:anAssetRoot |   self isDisjointWith: anAssetRoot].! !
!Portfolio methodsFor: 'accesing -- private' stamp: 'Fs 11/9/2020 02:29:02'!
allAssets
	| containedAssets |
	
	containedAssets _ self flattenCollect: [:anAsset | anAsset allAssets ] in: assets.
	containedAssets add: self.
	^containedAssets.! !
!Portfolio methodsFor: 'accesing -- private' stamp: 'Fs 11/9/2020 02:29:46'!
flattenCollect: anEvaluatingBlock in: aListToCollectFrom
	^(aListToCollectFrom collect: [:anElement | anEvaluatingBlock value: anElement ]) flatten.! !
!Portfolio methodsFor: 'accesing -- private' stamp: 'Fs 11/9/2020 02:29:02'!
lookUpRootsWhenContainedPortfolio
	^self flattenCollect: [:anAsset | anAsset roots ] in: portfoliosThatContainsMe.! !
!Portfolio methodsFor: 'accesing -- private' stamp: 'Fs 11/9/2020 00:40:07'!
lookUpRootsWhenRootPortfolio
	^{self}.! !
!Portfolio methodsFor: 'accesing -- private' stamp: 'HG 11/8/2020 18:39:51'!
roots
	^hierarchyState roots.! !
!Portfolio methodsFor: 'adding -- private' stamp: 'Fs 11/9/2020 01:54:01'!
addParentPortfolio: aPortfolioThatAddsMe
	hierarchyState _ ContainedState for: self.
	portfoliosThatContainsMe add: aPortfolioThatAddsMe. ! !

!classDefinition: 'Portfolio class' category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'error description' stamp: 'HG 11/6/2020 19:29:34'!
alreadyAddedAssetErrorDescription
	^'You cant add an already added asset.'.! !

!classDefinition: #ReceptiveAccount category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
FinancialAsset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions balanceCount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
FinancialAsset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions balanceCount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HG 11/6/2020 10:44:46' overrides: 16896425!
initialize

	transactions := OrderedCollection new.
	balanceCount _ 0.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' overrides: 50885210!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance --private' stamp: 'HG 11/6/2020 10:43:42'!
contributeToBalanceAsDeposit: anAccountTransactionValue
	balanceCount _ balanceCount + anAccountTransactionValue. ! !
!ReceptiveAccount methodsFor: 'balance --private' stamp: 'HG 11/6/2020 10:43:51'!
contributeToBalanceAsWithdraw: anAccountTransactionValue
	balanceCount _ balanceCount - anAccountTransactionValue. ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HG 11/6/2020 11:49:27' overrides: 50885206!
balance
	transactions do: [ :aTransaction | aTransaction addToBalance: self ].
	^balanceCount. ! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HG 11/6/2020 12:14:25' overrides: 50885214!
hasRegistered: aTransaction
	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'accesing' stamp: 'HG 11/7/2020 19:43:50'!
allAssets
	^{self} asOrderedCollection.! !
!ReceptiveAccount methodsFor: 'accesing' stamp: 'HG 11/8/2020 19:05:25'!
roots
	^{self} asOrderedCollection.! !
!ReceptiveAccount methodsFor: 'adding -- private' stamp: 'Fs 11/9/2020 01:53:41'!
addParentPortfolio: aPortfolioWhoAddTheAsset
	^nil.! !

!classDefinition: #PortfolioHierarchyState category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
Object subclass: #PortfolioHierarchyState
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioHierarchyState category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
Object subclass: #PortfolioHierarchyState
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioHierarchyState methodsFor: 'initialization' stamp: 'HG 11/8/2020 18:30:06'!
initializeFor: aPortfolio
	portfolio _ aPortfolio. ! !
!PortfolioHierarchyState methodsFor: '-- private hierarchy' stamp: 'HG 11/8/2020 18:31:50'!
roots
	self subclassResponsibility. ! !

!classDefinition: 'PortfolioHierarchyState class' category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
PortfolioHierarchyState class
	instanceVariableNames: ''!

!classDefinition: 'PortfolioHierarchyState class' category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
PortfolioHierarchyState class
	instanceVariableNames: ''!
!PortfolioHierarchyState class methodsFor: 'instance creation' stamp: 'HG 11/8/2020 18:29:49'!
for: aPortfolio
	^self new initializeFor: aPortfolio. ! !

!classDefinition: #ContainedState category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
PortfolioHierarchyState subclass: #ContainedState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ContainedState category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
PortfolioHierarchyState subclass: #ContainedState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ContainedState methodsFor: '-- private hierarchy' stamp: 'Fs 11/9/2020 00:40:17' overrides: 50885440!
roots
	^portfolio lookUpRootsWhenContainedPortfolio.! !

!classDefinition: #RootState category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
PortfolioHierarchyState subclass: #RootState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #RootState category: #'Portfolio-Ejercicio' stamp: 'HG 11/11/2020 17:33:43'!
PortfolioHierarchyState subclass: #RootState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!RootState methodsFor: '-- private hierarchy' stamp: 'Fs 11/9/2020 00:40:07' overrides: 50885440!
roots
	^portfolio lookUpRootsWhenRootPortfolio. ! !

!classDefinition: #PortfolioTest category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:43'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:43'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26'!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:17:51'!
test02BalanceOfPortfolioWithOneAccountIsAccountBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:23:25'!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:15'!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:43:11'!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:06'!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10'!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !
!PortfolioTest methodsFor: 'tests' stamp: 'NR 6/22/2020 07:31:19'!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit anotherAccount portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 on: account.
	anotherAccount := ReceptiveAccount new.
	anotherAccountWithdraw := Withdraw register: 100 on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:20'!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24'!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28'!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:32'!
test12PortfolioCanNotIncludeItself

	| account simplePortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: simplePortfolio accountsSize.
			self assert: (simplePortfolio accountsIncludes: account) ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51'!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16'!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18'!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !

!classDefinition: #ReceptiveAccountTest category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:43'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:43'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:48' prior: 50884989!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:19:54' prior: 50884996!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:02' prior: 50885005!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance .
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50885015!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50885025!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:00:12' prior: 50885038!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/9/2020 06:02:30' prior: 50885050!
test07AccountKnowsItsTransactions 

	| account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: deposit).
! !

!classDefinition: #Account category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:23:47'!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:24:25'!
isComposedBy: anAccount

	self subclassResponsibility ! !
!Account methodsFor: 'balance' stamp: 'HAW 5/25/2019 12:23:40'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:27'!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'HAW 5/25/2019 12:23:15'!
transactions

	self subclassResponsibility ! !
!Account methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:24:04'!
addedTo: aPortfolio

	self subclassResponsibility ! !

!classDefinition: #Portfolio category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20'!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04'!
accountsIsEmpty
	
	^accounts isEmpty ! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06'!
accountsSize
	
	^accounts size! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20' prior: 50885255!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:17:31'!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !
!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18' prior: 50885267 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:19:36' prior: 50885237 overrides: 50885899!
balance
	
	^accounts sum: [ :anAccount | anAccount balance ] ifEmpty: [ 0 ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:42:55' overrides: 50885903!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !
!Portfolio methodsFor: 'transactions' stamp: 'HAW 5/25/2019 11:38:32' prior: 50885244 overrides: 50885908!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59' overrides: 50885912!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 12:20:56'!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:28:29' prior: 50885250 overrides: 50885891!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'testing' stamp: 'HAW 5/29/2019 16:24:54' overrides: 50885895!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:17:31'!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 12:20:36'!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !
!Portfolio methodsFor: 'account management - private' stamp: 'HAW 5/25/2019 11:48:34'!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !

!classDefinition: 'Portfolio class' category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
Portfolio class
	instanceVariableNames: ''!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'NR 11/9/2020 06:01:26'!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio!!'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21'!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59'!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #ReceptiveAccount category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35' prior: 50885364 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'NR 11/9/2020 05:56:36' overrides: 50885903!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions copy! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50885370!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50885376 overrides: 50885908!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:24:46' prior: 50885394 overrides: 50885899!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/21/2019 18:55:56' prior: 50885400 overrides: 50885891!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'HAW 5/25/2019 11:54:51' overrides: 50885895!
isComposedBy: anAccount

	^self = anAccount ! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32' overrides: 50885912!
addedTo: aPortfolio 
	
	! !

!classDefinition: #AccountTransaction category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50885077 overrides: 16881508!
value 

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/21/2019 18:54:27' prior: 50885097!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50885119!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50885124 overrides: 50886144!
value

	^ value! !
!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02' overrides: 50886148!
affectBalance: aBalance

	^aBalance + value ! !

!classDefinition: 'Deposit class' category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50885143!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50885163!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50885174 overrides: 50886144!
value

	^ value! !
!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15' overrides: 50886148!
affectBalance: aBalance

	^aBalance - value! !

!classDefinition: 'Withdraw class' category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:33:44'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50885187!
for: aValue

	^ self new initializeFor: aValue ! !

!classRemoval: #Withdraw stamp: 'HG 11/11/2020 17:37:07'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'HG 11/11/2020 17:37:07'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'HG 11/11/2020 17:37:08'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'HG 11/11/2020 17:37:08'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'HG 11/11/2020 17:37:08'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'HG 11/11/2020 17:37:09'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'HG 11/11/2020 17:37:10'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'HG 11/11/2020 17:37:10'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of /Users/monteagudo/Desktop/Inge1/19-Portfolio2/Portfolio-Solucion.st----!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/11/2020 17:45:39'!
test04
	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100.
	
	self assert: srcAccount transactions includes: transference withdraw.
	self assert: dstAccount transactions includes: transference deposit.	
	! !

!testRun: #TransferenceTest #test04 stamp: 'HG 11/11/2020 17:45:44'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'HG 11/11/2020 17:45:59'!
ERROR!
!Transference methodsFor: 'accesing' stamp: 'HG 11/11/2020 17:46:10'!
withdraw
	self shouldBeImplemented.! !

!classDefinition: #Transference category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:46:34'!
Object subclass: #Transference
	instanceVariableNames: 'sourceAccount destinationAccount transferenceValue withdrawTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'accesing' stamp: 'HG 11/11/2020 17:46:33' prior: 50887480!
withdraw
	^withdrawTransaction.! !

!testRun: #TransferenceTest #test04 stamp: 'HG 11/11/2020 17:46:40'!
FAILURE!

!classDefinition: #Transference category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 17:47:05'!
Object subclass: #Transference
	instanceVariableNames: 'sourceAccount destinationAccount transferenceValue withdrawTransaction depositTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'accesing' stamp: 'HG 11/11/2020 17:47:03'!
deposit
	^depositTransaction.! !
!Transference methodsFor: 'initialization' stamp: 'HG 11/11/2020 17:48:01' prior: 50887406!
initializeFrom: aSourceAccount to: aDestinationAccount withValue: aTransferenceValue 
	aTransferenceValue <= 0 ifTrue:[self error: self class cannotTransferNegativeMoneyErrorDescription ].
	aSourceAccount = aDestinationAccount ifTrue:[self error: self class cannotTransferFromAccountToSameAccount ].

	depositTransaction _ Deposit register: aTransferenceValue on: aDestinationAccount.
	withdrawTransaction _ Withdraw register: aTransferenceValue on: aSourceAccount.
	 ! !

!testRun: #TransferenceTest #test04 stamp: 'HG 11/11/2020 17:48:08'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'HG 11/11/2020 17:48:08'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'HG 11/11/2020 17:48:08'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'HG 11/11/2020 17:48:08'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'HG 11/11/2020 17:48:08'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/11/2020 17:51:11'!
test05
	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100.
	
	self assert: (srcAccount transactions first) transferenceFrom equals: transference.
	self assert: (dstAccount transactions first) transferenceFrom equals: transference.	
	! !

!testRun: #TransferenceTest #test05 stamp: 'HG 11/11/2020 17:51:12'!
ERROR!

AccountTransaction subclass: #DepositOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositOfTransference category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 18:00:15'!
AccountTransaction subclass: #DepositOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #WithdrawOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawOfTransference category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 18:00:37'!
AccountTransaction subclass: #WithdrawOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #DepositOfTransference stamp: 'HG 11/11/2020 18:02:53'!
AccountTransaction subclass: #DepositOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #WithdrawOfTransference stamp: 'HG 11/11/2020 18:02:57'!
AccountTransaction subclass: #WithdrawOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Deposit subclass: #DepositNotTransfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Deposit subclass: #DepositNotTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositNotTransfer category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 18:07:03'!
Deposit subclass: #DepositNotTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #DepositNotTransfer stamp: 'HG 11/11/2020 18:07:51'!
Deposit subclass: #DepositNotTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #TransferTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 18:09:11'!
Object subclass: #TransferTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #DepositOfTransference
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #DepositOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositOfTransference category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 18:11:22'!
TransferTransaction subclass: #DepositOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #WithdrawOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawOfTransference category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 18:11:36'!
TransferTransaction subclass: #WithdrawOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'initialization' stamp: 'HG 11/11/2020 18:19:11' prior: 50887514!
initializeFrom: aSourceAccount to: aDestinationAccount withValue: aTransferenceValue 
	aTransferenceValue <= 0 
		ifTrue:[self error: self class cannotTransferNegativeMoneyErrorDescription ].
	aSourceAccount = aDestinationAccount 
		ifTrue:[self error: self class cannotTransferFromAccountToSameAccount ].

	depositTransaction _ DepositOfTransference from: self on: aDestinationAccount.
	withdrawTransaction _ WithdrawOfTransference from: self on: aSourceAccount.
	 
	! !

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 18:23:50'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransaction class methodsFor: 'instance creation' stamp: 'HG 11/11/2020 18:25:45'!
for: aTransference
	self subclassResponsibility 

	! !
!TransferTransaction class methodsFor: 'instance creation' stamp: 'HG 11/11/2020 18:26:07' prior: 50887704!
for: aTransference
	^self new initializeFor: aTransference.

	! !
!TransferTransaction methodsFor: 'initialization' stamp: 'HG 11/11/2020 18:27:57'!
initializeFor: aTransference
	transference _ aTransference. ! !
!TransferTransaction methodsFor: 'accesing' stamp: 'HG 11/11/2020 18:28:20'!
transference
	^transference.! !
!TransferTransaction methodsFor: 'value' stamp: 'HG 11/11/2020 18:28:56' overrides: 50887274!
value
	^transference value.! !

!classDefinition: #Transference category: #'Portfolio-Solucion' stamp: 'HG 11/11/2020 18:29:44'!
Object subclass: #Transference
	instanceVariableNames: 'sourceAccount destinationAccount transferenceValue withdrawTransaction depositTransaction value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'initialization' stamp: 'HG 11/11/2020 18:29:41' prior: 50887672!
initializeFrom: aSourceAccount to: aDestinationAccount withValue: aTransferenceValue 
	aTransferenceValue <= 0 
		ifTrue:[self error: self class cannotTransferNegativeMoneyErrorDescription ].
	aSourceAccount = aDestinationAccount 
		ifTrue:[self error: self class cannotTransferFromAccountToSameAccount ].
	
	value _ aTransferenceValue.
	depositTransaction _ DepositOfTransference from: self on: aDestinationAccount.
	withdrawTransaction _ WithdrawOfTransference from: self on: aSourceAccount.
	 
	! !
!Transference methodsFor: 'initialization' stamp: 'HG 11/11/2020 18:29:58' prior: 50887739!
initializeFrom: aSourceAccount to: aDestinationAccount withValue: aTransferenceValue 
	aTransferenceValue <= 0 
		ifTrue:[self error: self class cannotTransferNegativeMoneyErrorDescription ].
	aSourceAccount = aDestinationAccount 
		ifTrue:[self error: self class cannotTransferFromAccountToSameAccount ].
	
	value _ aTransferenceValue.
	depositTransaction _ DepositOfTransference register: self on: aDestinationAccount.
	withdrawTransaction _ WithdrawOfTransference register: self on: aSourceAccount.
	 
	! !
!Transference methodsFor: 'accesing' stamp: 'HG 11/11/2020 18:30:06' overrides: 16881508!
value
	^value.! !

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'HG 11/11/2020 18:31:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'HG 11/11/2020 18:31:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'HG 11/11/2020 18:31:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'HG 11/11/2020 18:31:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'HG 11/11/2020 18:31:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'HG 11/11/2020 18:31:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'HG 11/11/2020 18:31:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'HG 11/11/2020 18:31:41'!
PASSED!

!classRemoval: #RootState stamp: 'HG 11/11/2020 18:31:56'!
PortfolioHierarchyState subclass: #RootState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ContainedState stamp: 'HG 11/11/2020 18:31:57'!
PortfolioHierarchyState subclass: #ContainedState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioHierarchyState stamp: 'HG 11/11/2020 18:31:57'!
Object subclass: #PortfolioHierarchyState
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #FinancialAsset stamp: 'HG 11/11/2020 18:31:57'!
Object subclass: #FinancialAsset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!methodRemoval: ReceptiveAccount #addParentPortfolio: stamp: 'HG 11/11/2020 18:33:06'!
addParentPortfolio: aPortfolioWhoAddTheAsset
	^nil.!

!methodRemoval: ReceptiveAccount #contributeToBalanceAsDeposit: stamp: 'HG 11/11/2020 18:33:24'!
contributeToBalanceAsDeposit: anAccountTransactionValue
	balanceCount _ balanceCount + anAccountTransactionValue. !

!methodRemoval: ReceptiveAccount #contributeToBalanceAsWithdraw: stamp: 'HG 11/11/2020 18:33:26'!
contributeToBalanceAsWithdraw: anAccountTransactionValue
	balanceCount _ balanceCount - anAccountTransactionValue. !

!methodRemoval: ReceptiveAccount #roots stamp: 'HG 11/11/2020 18:33:39'!
roots
	^{self} asOrderedCollection.!

!methodRemoval: ReceptiveAccount #allAssets stamp: 'HG 11/11/2020 18:33:51'!
allAssets
	^{self} asOrderedCollection.!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'HG 11/11/2020 18:34:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'HG 11/11/2020 18:34:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'HG 11/11/2020 18:34:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'HG 11/11/2020 18:34:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'HG 11/11/2020 18:34:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'HG 11/11/2020 18:34:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'HG 11/11/2020 18:34:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'HG 11/11/2020 18:34:07'!
PASSED!

!methodRemoval: Deposit #addToBalance: stamp: 'HG 11/11/2020 18:34:14'!
addToBalance: aReceptiveAccount
	^aReceptiveAccount contributeToBalanceAsDeposit: self value.!

!methodRemoval: AccountTransaction #addToBalance: stamp: 'HG 11/11/2020 18:36:02'!
addToBalance: aReceptiveAccount
	self subclassResponsibility. !

!methodRemoval: Withdraw #addToBalance: stamp: 'HG 11/11/2020 18:36:11'!
addToBalance: aReceptiveAccount
	^aReceptiveAccount contributeToBalanceAsWithdraw: self value.!

!methodRemoval: PortfolioTest #test01PortfolioShouldBeEmptyWhenCreated stamp: 'HG 11/11/2020 18:36:41'!
test01PortfolioShouldBeEmptyWhenCreated
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio hasRegistered: aTransaction). 
	!

!testRun: #PortfolioTest #test02PortfolioRegistersTransactionOfAdddedAccount stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioRegistersTransactionOfAdddedAccount stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioRegistersTransactionsOfMultipleAddedAccounts stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioRegistersTransactionOfAddedPortfolio stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test05CannotAddAlreadyAddedAccount stamp: 'HG 11/11/2020 18:36:59'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test06CannotAddAccountAlreadyInASubPortfolio stamp: 'HG 11/11/2020 18:36:59'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAlreadyAddedPortfolio stamp: 'HG 11/11/2020 18:36:59'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test08ContainedPortfolioCannotAddAnotherPortfolioContainingAssetThatExistsInRootPortfolio stamp: 'HG 11/11/2020 18:36:59'!
FAILURE!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test09ContainedPortfolioWithAssetInRootPortfolioCannotAddAnotherContainedPortofolioWithSameAssetWithinItsRootPortfolio stamp: 'HG 11/11/2020 18:36:59'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'HG 11/11/2020 18:36:59'!
PASSED!

!methodRemoval: PortfolioTest #test02PortfolioRegistersTransactionOfAdddedAccount stamp: 'HG 11/11/2020 18:37:26'!
test02PortfolioRegistersTransactionOfAdddedAccount
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	!

!methodRemoval: PortfolioTest #test03PortfolioRegistersTransactionsOfMultipleAddedAccounts stamp: 'HG 11/11/2020 18:37:28'!
test03PortfolioRegistersTransactionsOfMultipleAddedAccounts
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit 
	aNotAddedAccount aNotAddedTransaction another100Withdraw another300Deposit |
	
	aPortfolio _ Portfolio new.
	
	aNotAddedAccount _ ReceptiveAccount new.
	aNotAddedTransaction _ Deposit register: 100 on: aNotAddedAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	another300Deposit _ Deposit register: 300 on: anAccount.
	another100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 500.
	self assert: aPortfolio transactions size = 5.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	self assert: (aPortfolio hasRegistered: another100Withdraw). 
	self assert: (aPortfolio hasRegistered: another300Deposit). 
	self deny: (aPortfolio hasRegistered: aNotAddedTransaction).
	   
	!

!methodRemoval: PortfolioTest #test04PortfolioRegistersTransactionOfAddedPortfolio stamp: 'HG 11/11/2020 18:37:31'!
test04PortfolioRegistersTransactionOfAddedPortfolio
	
	| aPortfolio anAccount aTransaction aPortfolioToAdd |
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	aPortfolio _ Portfolio new.
	aPortfolioToAdd _ Portfolio new.
	
	aPortfolioToAdd add: anAccount.
	aPortfolio add: aPortfolioToAdd.
		
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	!

!methodRemoval: PortfolioTest #test05CannotAddAlreadyAddedAccount stamp: 'HG 11/11/2020 18:37:34'!
test05CannotAddAlreadyAddedAccount
	
	| aPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	!

!methodRemoval: PortfolioTest #test06CannotAddAccountAlreadyInASubPortfolio stamp: 'HG 11/11/2020 18:37:36'!
test06CannotAddAccountAlreadyInASubPortfolio
	
	| aPortfolio aChildPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	aChildPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aChildPortfolio add: anAccount.
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	!

!methodRemoval: PortfolioTest #test07CannotAddAlreadyAddedPortfolio stamp: 'HG 11/11/2020 18:37:38'!
test07CannotAddAlreadyAddedPortfolio
	
	| aPortfolio aChildPortfolio |
	aPortfolio _ Portfolio new.
	aChildPortfolio _ Portfolio new.
	
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: aChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions size = 0.
	!

!methodRemoval: PortfolioTest #test08ContainedPortfolioCannotAddAnotherPortfolioContainingAssetThatExistsInRootPortfolio stamp: 'HG 11/11/2020 18:37:41'!
test08ContainedPortfolioCannotAddAnotherPortfolioContainingAssetThatExistsInRootPortfolio
	
	| aParentPortfolio aPortfolioToAdd aChildPortfolio a100Deposit anAccount |
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	
	aParentPortfolio _ Portfolio new.
	aParentPortfolio add: anAccount.
	
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	aPortfolioToAdd _ Portfolio new.
	aPortfolioToAdd add: anAccount.
	
	
	self should: [ aChildPortfolio add: aPortfolioToAdd.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 100.
	self assert: aParentPortfolio transactions size = 1.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	!

!methodRemoval: PortfolioTest #test09ContainedPortfolioWithAssetInRootPortfolioCannotAddAnotherContainedPortofolioWithSameAssetWithinItsRootPortfolio stamp: 'HG 11/11/2020 18:37:45'!
test09ContainedPortfolioWithAssetInRootPortfolioCannotAddAnotherContainedPortofolioWithSameAssetWithinItsRootPortfolio
	
	| aParentPortfolio aChildPortfolio a100Deposit anAccount anotherChildPortfolio anotherParentPortfolio |
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	
	aParentPortfolio _ Portfolio new.
	aParentPortfolio add: anAccount.
	
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	anotherParentPortfolio _ Portfolio new.
	anotherParentPortfolio add: anAccount.

	anotherChildPortfolio _ Portfolio new.
	anotherParentPortfolio add: anotherChildPortfolio.
	
	self should: [ aChildPortfolio add: anotherChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 100.
	self assert: aParentPortfolio transactions size = 1.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'HG 11/11/2020 18:37:48'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'HG 11/11/2020 18:37:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'HG 11/11/2020 18:37:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'HG 11/11/2020 18:37:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'HG 11/11/2020 18:37:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'HG 11/11/2020 18:37:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'HG 11/11/2020 18:37:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'HG 11/11/2020 18:37:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'HG 11/11/2020 18:37:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'HG 11/11/2020 18:37:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'HG 11/11/2020 18:37:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'HG 11/11/2020 18:37:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'HG 11/11/2020 18:37:48'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'HG 11/11/2020 18:37:48'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'HG 11/11/2020 18:37:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'HG 11/11/2020 18:37:48'!
PASSED!
!TransferTransaction methodsFor: 'balance' stamp: 'HG 11/11/2020 18:39:24' overrides: 50887283!
affectBalance: aBalance
	self subclassResponsibility. ! !
!DepositOfTransference methodsFor: 'balance' stamp: 'HG 11/11/2020 18:39:54' overrides: 50888279!
affectBalance: aBalance

	^aBalance + self value.! !
!WithdrawOfTransference methodsFor: 'balance' stamp: 'HG 11/11/2020 18:40:31' overrides: 50888279!
affectBalance: aBalance

	^aBalance - self value.! !

!testRun: #TransferenceTest #test05 stamp: 'HG 11/11/2020 18:41:03'!
ERROR!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/11/2020 18:41:19' prior: 50887544!
test05
	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100.
	
	self assert: (srcAccount transactions first) transference equals: transference.
	self assert: (dstAccount transactions first) transference equals: transference.	
	! !

!testRun: #TransferenceTest #test05 stamp: 'HG 11/11/2020 18:41:25'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'HG 11/11/2020 18:41:25'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'HG 11/11/2020 18:41:25'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'HG 11/11/2020 18:41:25'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'HG 11/11/2020 18:41:25'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'HG 11/11/2020 18:41:25'!
PASSED!
!TransferTransaction methodsFor: 'accesing' stamp: 'HG 11/11/2020 18:44:59'!
transferenceFrom
	^transference.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/11/2020 18:44:59' prior: 50888297!
test05
	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100.
	
	self assert: (srcAccount transactions first) transferenceFrom equals: transference.
	self assert: (dstAccount transactions first) transferenceFrom equals: transference.	
	! !

!methodRemoval: TransferTransaction #transference stamp: 'HG 11/11/2020 18:44:59'!
transference
	^transference.!

!testRun: #TransferenceTest #test05 stamp: 'HG 11/11/2020 18:45:04'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'HG 11/11/2020 18:45:04'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'HG 11/11/2020 18:45:04'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'HG 11/11/2020 18:45:04'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'HG 11/11/2020 18:45:04'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'HG 11/11/2020 18:45:04'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/11/2020 18:45:45' prior: 50886898!
test01
	| dstAccount srcAccount |
	srcAccount _ ReceptiveAccount new.
	Deposit register: 100 on: srcAccount .
	
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount  to: dstAccount registerWithValue: 60.
	
	self assert: srcAccount balance equals: 40.
	self assert: dstAccount balance equals: 60.
	! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/11/2020 18:45:58' prior: 50888365!
test01
	| dstAccount srcAccount |
	srcAccount _ ReceptiveAccount new.
	Deposit register: 100 on: srcAccount .
	
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount  to: dstAccount registerWithValue: 60.
	
	self assert: srcAccount balance equals: 40.
	self assert: dstAccount balance equals: 60.
	! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/11/2020 18:46:44'!
test01TransferenceAffectsAccountsBalancesCorrectly
	| dstAccount srcAccount |
	srcAccount _ ReceptiveAccount new.
	Deposit register: 100 on: srcAccount .
	
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount  to: dstAccount registerWithValue: 60.
	
	self assert: srcAccount balance equals: 40.
	self assert: dstAccount balance equals: 60.
	! !

!methodRemoval: TransferenceTest #test01 stamp: 'HG 11/11/2020 18:46:44'!
test01
	| dstAccount srcAccount |
	srcAccount _ ReceptiveAccount new.
	Deposit register: 100 on: srcAccount .
	
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount  to: dstAccount registerWithValue: 60.
	
	self assert: srcAccount balance equals: 40.
	self assert: dstAccount balance equals: 60.
	!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/11/2020 18:47:30'!
test02CanNotTransferANonPositiveValue
	| destinationAccount sourceAccount |
	sourceAccount _ ReceptiveAccount new.
	Deposit register: 100 on: sourceAccount .
	
	destinationAccount _ ReceptiveAccount new.
	
	self should:[Transference from: sourceAccount  to: destinationAccount registerWithValue: -10] 
		raise:Error
		withMessageText: (Transference cannotTransferNegativeMoneyErrorDescription).
	! !

!methodRemoval: TransferenceTest #test02 stamp: 'HG 11/11/2020 18:47:30'!
test02
	| destinationAccount sourceAccount |
	sourceAccount _ ReceptiveAccount new.
	Deposit register: 100 on: sourceAccount .
	
	destinationAccount _ ReceptiveAccount new.
	
	self should:[Transference from: sourceAccount  to: destinationAccount registerWithValue: -10] 
		raise:Error
		withMessageText: (Transference cannotTransferNegativeMoneyErrorDescription).
	!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/11/2020 18:48:05'!
test03CanNotTransferToItself
	| anAccount |
	anAccount _ ReceptiveAccount new.
	Deposit register: 100 on: anAccount .
		
	self should:[Transference from: anAccount to:  anAccount registerWithValue: 100]
		raise:Error
		withMessageText: Transference cannotTransferFromAccountToSameAccount.! !

!methodRemoval: TransferenceTest #test03 stamp: 'HG 11/11/2020 18:48:05'!
test03
	| anAccount |
	anAccount _ ReceptiveAccount new.
	Deposit register: 100 on: anAccount .
		
	self should:[Transference from: anAccount to:  anAccount registerWithValue: 100]
		raise:Error
		withMessageText: Transference cannotTransferFromAccountToSameAccount.!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/11/2020 18:49:28'!
test04TransferenceKnowsTransactionsInvolvedIn
	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100.
	
	self assert: srcAccount transactions includes: transference withdraw.
	self assert: dstAccount transactions includes: transference deposit.	
	! !

!methodRemoval: TransferenceTest #test04 stamp: 'HG 11/11/2020 18:49:28'!
test04
	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100.
	
	self assert: srcAccount transactions includes: transference withdraw.
	self assert: dstAccount transactions includes: transference deposit.	
	!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/11/2020 18:50:09'!
test05TransactionsByTransferenceKnowsWhichTransferenceCameFrom
	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100.
	
	self assert: (srcAccount transactions first) transferenceFrom equals: transference.
	self assert: (dstAccount transactions first) transferenceFrom equals: transference.	
	! !

!methodRemoval: TransferenceTest #test05 stamp: 'HG 11/11/2020 18:50:09'!
test05
	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100.
	
	self assert: (srcAccount transactions first) transferenceFrom equals: transference.
	self assert: (dstAccount transactions first) transferenceFrom equals: transference.	
	!

!classRemoval: #Transference stamp: 'HG 11/12/2020 19:53:42'!
Object subclass: #Transference
	instanceVariableNames: 'sourceAccount destinationAccount transferenceValue withdrawTransaction depositTransaction value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'HG 11/12/2020 19:53:42'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #WithdrawOfTransference stamp: 'HG 11/12/2020 19:53:43'!
TransferTransaction subclass: #WithdrawOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #DepositOfTransference stamp: 'HG 11/12/2020 19:53:43'!
TransferTransaction subclass: #DepositOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTransaction stamp: 'HG 11/12/2020 19:53:44'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'HG 11/12/2020 19:53:44'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'HG 11/12/2020 19:53:44'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'HG 11/12/2020 19:53:45'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'HG 11/12/2020 19:53:47'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'HG 11/12/2020 19:53:47'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferenceTest stamp: 'HG 11/12/2020 19:53:48'!
TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'HG 11/12/2020 19:53:48'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'HG 11/12/2020 19:53:49'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of /Users/monteagudo/Desktop/Inge1/19-Portfolio2/Portfolio-Solucion.st----!
!ReceptiveAccount methodsFor: 'reports' stamp: 'HG 11/12/2020 21:10:07' prior: 50889602!
summary
	
	| report |
	
	report _ OrderedCollection new.
	self transactions do: 
		[:aTransaction | 
			(aTransaction isKindOf: Deposit) ifTrue: [ report add: ('Deposito por ', aTransaction value asString)] 
	
	
		].
	
	report add: ('Balance = ', self balance asString).
	^report.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'HG 11/12/2020 21:16:33' prior: 50889813!
summary
	
	| report |
	
	report _ OrderedCollection new.
	self transactions do: 
		[:aTransaction | 
			(aTransaction isKindOf: Deposit) ifTrue: [ report add: ('Deposito por ', aTransaction value asString) ] 
	
	
		].
	
	report add: ('Balance = ', self balance asString).
	^report.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/12/2020 21:17:15'!
test03
	
	| account |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 500 on: account. 
	
	
	self assert: account summary first equals: 'Deposito por 500'.
	self assert: account summary last equals: 'Balance = 500'.	! !

!classRemoval: #Transference stamp: 'HG 11/12/2020 21:24:32'!
Object subclass: #Transference
	instanceVariableNames: 'sourceAccount destinationAccount transferenceValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'HG 11/12/2020 21:24:33'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'HG 11/12/2020 21:24:33'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'HG 11/12/2020 21:24:33'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'HG 11/12/2020 21:24:34'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'HG 11/12/2020 21:24:34'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'HG 11/12/2020 21:24:35'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferenceTest stamp: 'HG 11/12/2020 21:24:35'!
TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'HG 11/12/2020 21:24:35'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'HG 11/12/2020 21:24:36'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummaryTest stamp: 'HG 11/12/2020 21:24:36'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of /Users/monteagudo/Desktop/Inge1/19-Portfolio2/Portfolio-Solucion.st----!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/12/2020 21:32:39'!
test04
	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100. ! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/12/2020 21:33:42' prior: 50891113!
test04
	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100. 
	
	self assert: srcAccount transactions includes: transference depositOperation.
	self assert: dstAccount transactions includes: transference withdrawOperation.! !

!testRun: #TransferenceTest #test04 stamp: 'HG 11/12/2020 21:33:47'!
ERROR!
!Transference methodsFor: 'accessing' stamp: 'HG 11/12/2020 21:34:05'!
depositOperation
	self shouldBeImplemented.! !

!classDefinition: #Transference category: #'Portfolio-Solucion' stamp: 'HG 11/12/2020 21:34:34'!
Object subclass: #Transference
	instanceVariableNames: 'sourceAccount destinationAccount transferenceValue deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'accessing' stamp: 'HG 11/12/2020 21:34:31' prior: 50891140!
depositOperation
	^deposit.! !

!testRun: #TransferenceTest #test04 stamp: 'HG 11/12/2020 21:34:36'!
FAILURE!

!classDefinition: #Transference category: #'Portfolio-Solucion' stamp: 'HG 11/12/2020 21:35:18'!
Object subclass: #Transference
	instanceVariableNames: 'sourceAccount destinationAccount transferenceValue deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'initialization' stamp: 'HG 11/12/2020 21:35:17' prior: 50891058!
initializeFrom: aSourceAccount to: aDestinationAccount withValue: aTransferenceValue 
	aTransferenceValue <= 0 ifTrue:[self error: self class cannotTransferNegativeMoneyErrorDescription ].
	aSourceAccount = aDestinationAccount ifTrue:[self error: self class cannotTransferFromAccountToSameAccount ].

	deposit _ Deposit register: aTransferenceValue on: aDestinationAccount.
	withdraw _ Withdraw register: aTransferenceValue on: aSourceAccount.
	 ! !

!testRun: #TransferenceTest #test04 stamp: 'HG 11/12/2020 21:35:23'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/12/2020 21:35:41' prior: 50891123!
test04
	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100. 
	
	self assert: srcAccount transactions includes: transference withdrawOperation.
	self assert: dstAccount transactions includes: transference depositOperation.! !

!testRun: #TransferenceTest #test04 stamp: 'HG 11/12/2020 21:35:43'!
ERROR!
!Transference methodsFor: 'accessing' stamp: 'HG 11/12/2020 21:35:49'!
withdrawOperation
	self shouldBeImplemented.! !
!Transference methodsFor: 'accessing' stamp: 'HG 11/12/2020 21:35:53' prior: 50891207!
withdrawOperation
	^withdraw.! !

!testRun: #TransferenceTest #test04 stamp: 'HG 11/12/2020 21:35:58'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'HG 11/12/2020 21:35:58'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'HG 11/12/2020 21:35:58'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'HG 11/12/2020 21:35:58'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'HG 11/12/2020 21:35:58'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/12/2020 21:37:23'!
test05

	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100. 
	
	self assert: srcAccount transactions first transferenceFrom equals: transference.
	self assert: dstAccount transactions first transferenceFrom equals: transference.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/12/2020 21:37:53' prior: 50891228!
test05

	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100. 
	
	self assert: srcAccount transactions first transferenceFrom equals: transference.
	self assert: dstAccount transactions first transferenceFrom equals: transference.
	self assert: transference value equals: 100.! !

!testRun: #TransferenceTest #test05 stamp: 'HG 11/12/2020 21:37:54'!
ERROR!

!classDefinition: #DepositOfTransference category: #'Portfolio-Solucion' stamp: 'HG 11/12/2020 21:39:33'!
Object subclass: #DepositOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawOfTransference category: #'Portfolio-Solucion' stamp: 'HG 11/12/2020 21:39:41'!
Object subclass: #WithdrawOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: #'Portfolio-Solucion' stamp: 'HG 11/12/2020 21:39:48'!
Object subclass: #Transference
	instanceVariableNames: 'sourceAccount destinationAccount transferenceValue deposit withdraw value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'initialization' stamp: 'HG 11/12/2020 21:38:48' prior: 50891170!
initializeFrom: aSourceAccount to: aDestinationAccount withValue: aTransferenceValue 
	aTransferenceValue <= 0 ifTrue:[self error: self class cannotTransferNegativeMoneyErrorDescription ].
	aSourceAccount = aDestinationAccount ifTrue:[self error: self class cannotTransferFromAccountToSameAccount ].

	deposit _ DepositOfTransference register: self on: aDestinationAccount.
	withdraw _ WithdrawOfTransference register: self on: aSourceAccount.
	value _ aTransferenceValue. 
	 ! !

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: #'Portfolio-Solucion' stamp: 'HG 11/12/2020 21:41:00'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #WithdrawOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #WithdrawOfTransference category: #'Portfolio-Solucion' stamp: 'HG 11/12/2020 21:41:07'!
TransferTransaction subclass: #WithdrawOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #DepositOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositOfTransference category: #'Portfolio-Solucion' stamp: 'HG 11/12/2020 21:41:15'!
TransferTransaction subclass: #DepositOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: Portfolio #addParentPortfolio: stamp: 'HG 11/12/2020 21:42:35'!
addParentPortfolio: aPortfolioThatAddsMe
	hierarchyState _ ContainedState for: self.
	portfoliosThatContainsMe add: aPortfolioThatAddsMe. !

!methodRemoval: Portfolio #allAssets stamp: 'HG 11/12/2020 21:42:44'!
allAssets
	| containedAssets |
	
	containedAssets _ self flattenCollect: [:anAsset | anAsset allAssets ] in: assets.
	containedAssets add: self.
	^containedAssets.!

!methodRemoval: Portfolio #flattenCollect:in: stamp: 'HG 11/12/2020 21:42:55'!
flattenCollect: anEvaluatingBlock in: aListToCollectFrom
	^(aListToCollectFrom collect: [:anElement | anEvaluatingBlock value: anElement ]) flatten.!

!methodRemoval: Portfolio #isDisjointWith: stamp: 'HG 11/12/2020 21:43:01'!
isDisjointWith: anotherAsset

	^ ((anotherAsset allAssets) intersection: (self allAssets)) isEmpty!

!methodRemoval: Portfolio #isDisjointWithPortfoliosThatContains: stamp: 'HG 11/12/2020 21:43:03'!
isDisjointWithPortfoliosThatContains: anAsset 

	^(anAsset roots) 
		anySatisfy: [:anAssetRoot |   self isDisjointWith: anAssetRoot].!

!methodRemoval: Portfolio #lookUpRootsWhenContainedPortfolio stamp: 'HG 11/12/2020 21:43:06'!
lookUpRootsWhenContainedPortfolio
	^self flattenCollect: [:anAsset | anAsset roots ] in: portfoliosThatContainsMe.!

!methodRemoval: Portfolio #lookUpRootsWhenRootPortfolio stamp: 'HG 11/12/2020 21:43:09'!
lookUpRootsWhenRootPortfolio
	^{self}.!

!methodRemoval: Portfolio #roots stamp: 'HG 11/12/2020 21:43:16'!
roots
	^hierarchyState roots.!

!methodRemoval: ReceptiveAccount #contributeToBalanceAsWithdraw: stamp: 'HG 11/12/2020 21:43:24'!
contributeToBalanceAsWithdraw: anAccountTransactionValue
	balanceCount _ balanceCount - anAccountTransactionValue. !

!methodRemoval: ReceptiveAccount #contributeToBalanceAsDeposit: stamp: 'HG 11/12/2020 21:43:28'!
contributeToBalanceAsDeposit: anAccountTransactionValue
	balanceCount _ balanceCount + anAccountTransactionValue. !

!methodRemoval: ReceptiveAccount #roots stamp: 'HG 11/12/2020 21:43:38'!
roots
	^{self} asOrderedCollection.!

!methodRemoval: AccountTransaction #addToBalance: stamp: 'HG 11/12/2020 21:43:50'!
addToBalance: aReceptiveAccount
	self subclassResponsibility. !

!methodRemoval: Deposit #addToBalance: stamp: 'HG 11/12/2020 21:43:57'!
addToBalance: aReceptiveAccount
	^aReceptiveAccount contributeToBalanceAsDeposit: self value.!

!methodRemoval: Withdraw #addToBalance: stamp: 'HG 11/12/2020 21:44:05'!
addToBalance: aReceptiveAccount
	^aReceptiveAccount contributeToBalanceAsWithdraw: self value.!

!methodRemoval: PortfolioTest #test01PortfolioShouldBeEmptyWhenCreated stamp: 'HG 11/12/2020 21:44:17'!
test01PortfolioShouldBeEmptyWhenCreated
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio hasRegistered: aTransaction). 
	!

!methodRemoval: PortfolioTest #test02PortfolioRegistersTransactionOfAdddedAccount stamp: 'HG 11/12/2020 21:44:19'!
test02PortfolioRegistersTransactionOfAdddedAccount
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	!

!methodRemoval: PortfolioTest #test03PortfolioRegistersTransactionsOfMultipleAddedAccounts stamp: 'HG 11/12/2020 21:44:21'!
test03PortfolioRegistersTransactionsOfMultipleAddedAccounts
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit 
	aNotAddedAccount aNotAddedTransaction another100Withdraw another300Deposit |
	
	aPortfolio _ Portfolio new.
	
	aNotAddedAccount _ ReceptiveAccount new.
	aNotAddedTransaction _ Deposit register: 100 on: aNotAddedAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	another300Deposit _ Deposit register: 300 on: anAccount.
	another100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 500.
	self assert: aPortfolio transactions size = 5.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	self assert: (aPortfolio hasRegistered: another100Withdraw). 
	self assert: (aPortfolio hasRegistered: another300Deposit). 
	self deny: (aPortfolio hasRegistered: aNotAddedTransaction).
	   
	!

!methodRemoval: PortfolioTest #test04PortfolioRegistersTransactionOfAddedPortfolio stamp: 'HG 11/12/2020 21:44:24'!
test04PortfolioRegistersTransactionOfAddedPortfolio
	
	| aPortfolio anAccount aTransaction aPortfolioToAdd |
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	aPortfolio _ Portfolio new.
	aPortfolioToAdd _ Portfolio new.
	
	aPortfolioToAdd add: anAccount.
	aPortfolio add: aPortfolioToAdd.
		
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	!

!methodRemoval: PortfolioTest #test05CannotAddAlreadyAddedAccount stamp: 'HG 11/12/2020 21:44:26'!
test05CannotAddAlreadyAddedAccount
	
	| aPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	!

!methodRemoval: PortfolioTest #test06CannotAddAccountAlreadyInASubPortfolio stamp: 'HG 11/12/2020 21:44:29'!
test06CannotAddAccountAlreadyInASubPortfolio
	
	| aPortfolio aChildPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	aChildPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aChildPortfolio add: anAccount.
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	!

!methodRemoval: PortfolioTest #test07CannotAddAlreadyAddedPortfolio stamp: 'HG 11/12/2020 21:44:31'!
test07CannotAddAlreadyAddedPortfolio
	
	| aPortfolio aChildPortfolio |
	aPortfolio _ Portfolio new.
	aChildPortfolio _ Portfolio new.
	
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: aChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions size = 0.
	!

!methodRemoval: PortfolioTest #test08ContainedPortfolioCannotAddAnotherPortfolioContainingAssetThatExistsInRootPortfolio stamp: 'HG 11/12/2020 21:44:33'!
test08ContainedPortfolioCannotAddAnotherPortfolioContainingAssetThatExistsInRootPortfolio
	
	| aParentPortfolio aPortfolioToAdd aChildPortfolio a100Deposit anAccount |
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	
	aParentPortfolio _ Portfolio new.
	aParentPortfolio add: anAccount.
	
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	aPortfolioToAdd _ Portfolio new.
	aPortfolioToAdd add: anAccount.
	
	
	self should: [ aChildPortfolio add: aPortfolioToAdd.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 100.
	self assert: aParentPortfolio transactions size = 1.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	!

!methodRemoval: PortfolioTest #test09ContainedPortfolioWithAssetInRootPortfolioCannotAddAnotherContainedPortofolioWithSameAssetWithinItsRootPortfolio stamp: 'HG 11/12/2020 21:44:35'!
test09ContainedPortfolioWithAssetInRootPortfolioCannotAddAnotherContainedPortofolioWithSameAssetWithinItsRootPortfolio
	
	| aParentPortfolio aChildPortfolio a100Deposit anAccount anotherChildPortfolio anotherParentPortfolio |
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	
	aParentPortfolio _ Portfolio new.
	aParentPortfolio add: anAccount.
	
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	anotherParentPortfolio _ Portfolio new.
	anotherParentPortfolio add: anAccount.

	anotherChildPortfolio _ Portfolio new.
	anotherParentPortfolio add: anotherChildPortfolio.
	
	self should: [ aChildPortfolio add: anotherChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 100.
	self assert: aParentPortfolio transactions size = 1.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'HG 11/12/2020 21:44:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'HG 11/12/2020 21:44:41'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'HG 11/12/2020 21:44:41'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'HG 11/12/2020 21:44:41'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'HG 11/12/2020 21:44:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'HG 11/12/2020 21:44:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'HG 11/12/2020 21:44:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'HG 11/12/2020 21:44:41'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'HG 11/12/2020 21:44:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'HG 11/12/2020 21:44:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'HG 11/12/2020 21:44:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'HG 11/12/2020 21:44:41'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'HG 11/12/2020 21:44:41'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'HG 11/12/2020 21:44:41'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'HG 11/12/2020 21:44:41'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'HG 11/12/2020 21:44:41'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'HG 11/12/2020 21:44:41'!
PASSED!
!TransferTransaction methodsFor: 'balance' stamp: 'HG 11/12/2020 21:45:46' overrides: 50890935!
affectBalance: aBalance
	self subclassResponsibility. ! !
!TransferTransaction methodsFor: 'value' stamp: 'HG 11/12/2020 21:46:33' overrides: 50890926!
value
	^transference value.! !
!DepositOfTransference methodsFor: 'balance' stamp: 'HG 11/12/2020 21:46:59' overrides: 50891707!
affectBalance: aBalance
	
	! !
!DepositOfTransference methodsFor: 'balance' stamp: 'HG 11/12/2020 21:47:16' prior: 50891717 overrides: 50891707!
affectBalance: aBalance
	^aBalance + self value.! !
!WithdrawOfTransference methodsFor: 'balance' stamp: 'HG 11/12/2020 21:47:25' overrides: 50891707!
affectBalance: aBalance
	^aBalance - self value.! !

!testRun: #TransferenceTest #test05 stamp: 'HG 11/12/2020 21:47:51'!
ERROR!

!testRun: #TransferenceTest #test05 stamp: 'HG 11/12/2020 21:48:23'!
ERROR!

!testRun: #TransferenceTest #test05 stamp: 'HG 11/12/2020 21:48:39'!
ERROR!
!DepositOfTransference class methodsFor: 'instance creation' stamp: 'HG 11/12/2020 21:48:46'!
for: aTransference 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aTransference ! !
!DepositOfTransference class methodsFor: 'instance creation' stamp: 'HG 11/12/2020 21:48:51' prior: 50891739!
for: aTransference 
	^self new initializeFor: aTransference ! !

!testRun: #TransferenceTest #test05 stamp: 'HG 11/12/2020 21:48:53'!
ERROR!
!DepositOfTransference methodsFor: 'initialization' stamp: 'HG 11/12/2020 21:49:04'!
initializeFor: aTransference 
	self shouldBeImplemented.
	transference := aTransference.! !
!DepositOfTransference methodsFor: 'initialization' stamp: 'HG 11/12/2020 21:49:07' prior: 50891756!
initializeFor: aTransference 
	transference := aTransference.! !

!testRun: #TransferenceTest #test05 stamp: 'HG 11/12/2020 21:49:10'!
ERROR!
!WithdrawOfTransference class methodsFor: 'instance creation' stamp: 'HG 11/12/2020 21:49:15'!
for: aTransference 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aTransference ! !
!WithdrawOfTransference class methodsFor: 'instance creation' stamp: 'HG 11/12/2020 21:49:18' prior: 50891771!
for: aTransference 
	^self new initializeFor: aTransference ! !

!testRun: #TransferenceTest #test05 stamp: 'HG 11/12/2020 21:49:20'!
ERROR!
!WithdrawOfTransference methodsFor: 'initialization' stamp: 'HG 11/12/2020 21:49:30'!
initializeFor: aTransference 
	self shouldBeImplemented.
	transference := aTransference.! !
!WithdrawOfTransference methodsFor: 'initialization' stamp: 'HG 11/12/2020 21:49:32' prior: 50891788!
initializeFor: aTransference 
	transference := aTransference.! !

!testRun: #TransferenceTest #test05 stamp: 'HG 11/12/2020 21:49:34'!
ERROR!
!WithdrawOfTransference methodsFor: 'accessing' stamp: 'HG 11/12/2020 21:49:42'!
transferenceFrom
	self shouldBeImplemented.! !
!WithdrawOfTransference methodsFor: 'accessing' stamp: 'HG 11/12/2020 21:49:48' prior: 50891802!
transferenceFrom
	^transference. ! !

!testRun: #TransferenceTest #test05 stamp: 'HG 11/12/2020 21:49:49'!
ERROR!
!DepositOfTransference methodsFor: 'accessing' stamp: 'HG 11/12/2020 21:49:56'!
transferenceFrom
	self shouldBeImplemented.! !
!TransferTransaction methodsFor: 'accesing' stamp: 'HG 11/12/2020 21:50:22'!
transferenceFrom
	^transference. ! !

!methodRemoval: DepositOfTransference #transferenceFrom stamp: 'HG 11/12/2020 21:50:26'!
transferenceFrom
	self shouldBeImplemented.!

!methodRemoval: WithdrawOfTransference #transferenceFrom stamp: 'HG 11/12/2020 21:50:30'!
transferenceFrom
	^transference. !
!TransferTransaction methodsFor: 'initialization' stamp: 'HG 11/12/2020 21:50:50'!
initializeFor: aTransference 
	transference := aTransference.! !

!methodRemoval: DepositOfTransference #initializeFor: stamp: 'HG 11/12/2020 21:50:54'!
initializeFor: aTransference 
	transference := aTransference.!

!methodRemoval: WithdrawOfTransference #initializeFor: stamp: 'HG 11/12/2020 21:50:59'!
initializeFor: aTransference 
	transference := aTransference.!

!testRun: #TransferenceTest #test05 stamp: 'HG 11/12/2020 21:51:02'!
FAILURE!
!Transference methodsFor: 'accessing' stamp: 'HG 11/12/2020 21:51:31' overrides: 16881508!
value
	^value. ! !

!testRun: #TransferenceTest #test05 stamp: 'HG 11/12/2020 21:51:35'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'HG 11/12/2020 21:51:35'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'HG 11/12/2020 21:51:35'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'HG 11/12/2020 21:51:35'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'HG 11/12/2020 21:51:35'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'HG 11/12/2020 21:51:35'!
PASSED!

Object subclass: #Transference
	instanceVariableNames: 'sourceAccount destinationAccount deposit withdraw value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: #'Portfolio-Solucion' stamp: 'HG 11/12/2020 21:52:22'!
Object subclass: #Transference
	instanceVariableNames: 'sourceAccount destinationAccount deposit withdraw value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transference
	instanceVariableNames: 'deposit withdraw value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: #'Portfolio-Solucion' stamp: 'HG 11/12/2020 21:52:35'!
Object subclass: #Transference
	instanceVariableNames: 'deposit withdraw value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'initialization' stamp: 'HG 11/12/2020 21:52:47' prior: 50891288!
initializeFrom: aSourceAccount to: aDestinationAccount withValue: aTransferenceValue 
	
	aTransferenceValue <= 0 
		ifTrue:[self error: self class cannotTransferNegativeMoneyErrorDescription ].
	aSourceAccount = aDestinationAccount 
		ifTrue:[self error: self class cannotTransferFromAccountToSameAccount ].

	deposit _ DepositOfTransference register: self on: aDestinationAccount.
	withdraw _ WithdrawOfTransference register: self on: aSourceAccount.
	value _ aTransferenceValue. 
	 ! !
!Transference methodsFor: 'initialization' stamp: 'HG 11/12/2020 21:53:12'!
checkPositiveTransferenceValue: aTransferenceValue

	^ aTransferenceValue <= 0 
		ifTrue:[self error: self class cannotTransferNegativeMoneyErrorDescription ]! !
!Transference methodsFor: 'initialization' stamp: 'HG 11/12/2020 21:53:12' prior: 50891894!
initializeFrom: aSourceAccount to: aDestinationAccount withValue: aTransferenceValue 
	
	self checkPositiveTransferenceValue: aTransferenceValue.
	aSourceAccount = aDestinationAccount 
		ifTrue:[self error: self class cannotTransferFromAccountToSameAccount ].

	deposit _ DepositOfTransference register: self on: aDestinationAccount.
	withdraw _ WithdrawOfTransference register: self on: aSourceAccount.
	value _ aTransferenceValue. 
	 ! !
!Transference methodsFor: 'initialization' stamp: 'HG 11/12/2020 21:53:25'!
assertPositiveTransferenceValue: aTransferenceValue

	^ aTransferenceValue <= 0 
		ifTrue:[self error: self class cannotTransferNegativeMoneyErrorDescription ]! !
!Transference methodsFor: 'as yet unclassified' stamp: 'HG 11/12/2020 21:53:25' prior: 50891920!
initializeFrom: aSourceAccount to: aDestinationAccount withValue: aTransferenceValue 
	
	self assertPositiveTransferenceValue: aTransferenceValue.
	aSourceAccount = aDestinationAccount 
		ifTrue:[self error: self class cannotTransferFromAccountToSameAccount ].

	deposit _ DepositOfTransference register: self on: aDestinationAccount.
	withdraw _ WithdrawOfTransference register: self on: aSourceAccount.
	value _ aTransferenceValue. 
	 ! !

!methodRemoval: Transference #checkPositiveTransferenceValue: stamp: 'HG 11/12/2020 21:53:25'!
checkPositiveTransferenceValue: aTransferenceValue

	^ aTransferenceValue <= 0 
		ifTrue:[self error: self class cannotTransferNegativeMoneyErrorDescription ]!
!Transference methodsFor: 'initialization' stamp: 'HG 11/12/2020 21:54:37'!
assertAnAccount: aDestinationAccount isDifferentTo: aSourceAccount

	^ aSourceAccount = aDestinationAccount 
		ifTrue:[self error: self class cannotTransferFromAccountToSameAccount ]! !
!Transference methodsFor: 'initialization' stamp: 'HG 11/12/2020 21:54:37' prior: 50891946!
initializeFrom: aSourceAccount to: aDestinationAccount withValue: aTransferenceValue 
	
	self assertPositiveTransferenceValue: aTransferenceValue.
	self assertAnAccount: aDestinationAccount isDifferentTo: aSourceAccount.

	deposit _ DepositOfTransference register: self on: aDestinationAccount.
	withdraw _ WithdrawOfTransference register: self on: aSourceAccount.
	value _ aTransferenceValue. 
	 ! !

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/12/2020 21:55:14'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/12/2020 21:55:14'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/12/2020 21:55:14'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'HG 11/12/2020 21:55:35' prior: 50890902!
summary
	
	| report |
	
	report _ OrderedCollection new.
	self transactions do: [:aTransaction | 
		
		(aTransaction isKindOf: Deposit) ifTrue: [ report add: ('Deposito por ', aTransaction value asString)] 
		
	].
	report add: ('Balance = ', self balance asString).
	^report.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'HG 11/12/2020 21:58:16' prior: 50892003!
summary
	
	| report |
	
	report _ OrderedCollection new.
	self transactions do: [:aTransaction | 
		
		(aTransaction isKindOf: Deposit) 
			ifTrue: [ report add: ('Deposito por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: Withdraw) 
			ifTrue: [ report add: ('Extracci�n por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: DepositOfTransference ) 
			ifTrue: [ report add: ('Entrada por transferencia  ', aTransaction value asString) ]. 
		(aTransaction isKindOf: WithdrawOfTransference ) 
			ifTrue: [ report add: ('Salida por transferencia  ', aTransaction value asString) ].
	].
	report add: ('Balance = ', self balance asString).
	^report.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/12/2020 21:59:01'!
test03
	
	| account |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	
	self assert: account summary first equals: 'Deposito por 500'.
	self assert: account summary last equals: 'Balance = 500'.	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/12/2020 22:00:51' prior: 50892039!
test03
	
	| account |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	DepositOfTransference register: 500 on: account. 
	WithdrawOfTransference register: 500 on: account. 
	
	self assert: account summary first equals: 'Deposito por 500'.
	self assert: account summary second equals: 'Deposito por 500'.
	self assert: account summary third equals: 'Balance = 500'.
	self assert: account summary fourth equals: 'Balance = 500'.	
	self assert: account summary fifth equals: 'Balance = 500'.	! !

----SNAPSHOT----(12 November 2020 22:00:57) CuisUniversity-4137.image priorSource: 17646711!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 10:21:37' prior: 50892050!
test03
	
	| account |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	DepositOfTransference register: 500 on: account. 
	WithdrawOfTransference register: 500 on: account. 
	
	self assert: account summary first equals: 'Deposito por 500'.
	self assert: account summary second equals: 'Extraccion por 100'.
	self assert: account summary third equals: 'Entrada por transferencia de 500'.
	self assert: account summary fourth equals: 'Salida por transferencia de 500'.
	self assert: account summary fifth equals: 'Balance = 400'.	! !

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 10:21:41'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 10:21:50' prior: 50892074!
test03
	
	| account |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	DepositOfTransference register: 500 on: account. 
	WithdrawOfTransference register: 500 on: account. 
	
	self assert: account summary first equals: 'Deposito por 500'.
	self assert: account summary second equals: 'Extracci�n por 100'.
	self assert: account summary third equals: 'Entrada por transferencia de 500'.
	self assert: account summary fourth equals: 'Salida por transferencia de 500'.
	self assert: account summary fifth equals: 'Balance = 400'.	! !

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 10:21:51'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'HG 11/13/2020 10:23:36' prior: 50892015!
summary
	
	| report |
	
	report _ OrderedCollection new.
	self transactions do: [:aTransaction | 
		
		(aTransaction isKindOf: Deposit) 
			ifTrue: [ report add: ('Deposito por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: Withdraw) 
			ifTrue: [ report add: ('Extracci�n por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: DepositOfTransference ) 
			ifTrue: [ report add: ('Entrada por transferencia de ', aTransaction value asString) ]. 
		(aTransaction isKindOf: WithdrawOfTransference ) 
			ifTrue: [ report add: ('Salida por transferencia de ', aTransaction value asString) ].
	].
	report add: ('Balance = ', self balance asString).
	^report.! !

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 10:23:39'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 10:23:39'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 10:23:39'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 10:23:39'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 10:40:55'!
test04
	
	| account |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	DepositOfTransference register: 500 on: account. 
	WithdrawOfTransference register: 500 on: account. 
	
	self assert: account summary first equals: 'Deposito por 500'.
	self assert: account summary second equals: 'Extracci�n por 100'.
	self assert: account summary third equals: 'Entrada por transferencia de 500'.
	self assert: account summary fourth equals: 'Salida por transferencia de 500'.
	self assert: account summary fifth equals: 'Balance = 400'.	! !

Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: #'Portfolio-Solucion' stamp: 'HG 11/13/2020 11:01:12'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 11:02:11' prior: 50889934!
test01
	
	| account summary |
	
	account _ ReceptiveAccount new.
	summary _ AccountSummary for: account.
	
	self assert: summary report first equals: 'Balance = 0'.
	! !

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 11:02:22'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 11:02:22'!
ERROR!
!AccountSummary class methodsFor: 'instance creation' stamp: 'HG 11/13/2020 11:02:31'!
for: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aReceptiveAccount ! !
!AccountSummary class methodsFor: 'instance creation' stamp: 'HG 11/13/2020 11:02:36' prior: 50892205!
for: aReceptiveAccount 
	^self new initializeFor: aReceptiveAccount ! !

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 11:04:03'!
ERROR!

!classDefinition: #AccountSummary category: #'Portfolio-Solucion' stamp: 'HG 11/13/2020 11:04:13'!
Object subclass: #AccountSummary
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'initialization' stamp: 'HG 11/13/2020 11:04:13'!
initializeFor: aReceptiveAccount 
	self shouldBeImplemented.
	receptiveAccount := aReceptiveAccount.! !
!AccountSummary methodsFor: 'initialization' stamp: 'HG 11/13/2020 11:04:23' prior: 50892230!
initializeFor: aReceptiveAccount 
	receptiveAccount := aReceptiveAccount.! !

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 11:04:26'!
ERROR!
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 11:04:46'!
report
	self shouldBeImplemented.! !

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 11:04:51'!
ERROR!
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 11:05:31' prior: 50892245!
report
	| report |
	
	report _ OrderedCollection new.
	receptiveAccount transactions do: [:aTransaction | 
		
		(aTransaction isKindOf: Deposit) 
			ifTrue: [ report add: ('Deposito por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: Withdraw) 
			ifTrue: [ report add: ('Extracci�n por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: DepositOfTransference ) 
			ifTrue: [ report add: ('Entrada por transferencia de ', aTransaction value asString) ]. 
		(aTransaction isKindOf: WithdrawOfTransference ) 
			ifTrue: [ report add: ('Salida por transferencia de ', aTransaction value asString) ].
	].
	report add: ('Balance = ', self balance asString).
	^report.! !
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 11:16:07' prior: 50892252!
report
	| report |
	
	report _ OrderedCollection new.
	receptiveAccount transactions do: [:aTransaction | 
		aTransaction reportMeIn: self.
		(aTransaction isKindOf: Deposit) 
			ifTrue: [ report add: ('Deposito por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: Withdraw) 
			ifTrue: [ report add: ('Extracci�n por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: DepositOfTransference ) 
			ifTrue: [ report add: ('Entrada por transferencia de ', aTransaction value asString) ]. 
		(aTransaction isKindOf: WithdrawOfTransference ) 
			ifTrue: [ report add: ('Salida por transferencia de ', aTransaction value asString) ].
	].
	report add: ('Balance = ', self balance asString).
	^report.! !
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 11:16:24' prior: 50892277!
report
	| report |
	
	report _ OrderedCollection new.
	receptiveAccount transactions do: [:aTransaction | 
		aTransaction reportMeIn: self.
	].
	report add: ('Balance = ', self balance asString).
	^report.
	
	"
	(aTransaction isKindOf: Deposit) 
			ifTrue: [ report add: ('Deposito por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: Withdraw) 
			ifTrue: [ report add: ('Extracci�n por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: DepositOfTransference ) 
			ifTrue: [ report add: ('Entrada por transferencia de ', aTransaction value asString) ]. 
		(aTransaction isKindOf: WithdrawOfTransference ) 
			ifTrue: [ report add: ('Salida por transferencia de ', aTransaction value asString) ].
			"! !
!AccountTransaction methodsFor: 'summary' stamp: 'HG 11/13/2020 11:17:42'!
reportMeIn: anAccountSummary
	self subclassResponsibility. ! !
!Deposit methodsFor: 'summary' stamp: 'HG 11/13/2020 11:18:05' overrides: 50892329!
reportMeIn: anAccountSummary
	self subclassResponsibility. ! !
!Deposit methodsFor: 'summary' stamp: 'HG 11/13/2020 11:18:13' prior: 50892334 overrides: 50892329!
reportMeIn: anAccountSummary
	anAccountSummary reportAsDeposit: self.! !
!Deposit methodsFor: 'summary' stamp: 'HG 11/13/2020 11:18:27' prior: 50892340 overrides: 50892329!
reportMeIn: anAccountSummary
	^anAccountSummary reportAsDeposit: self.! !

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 11:25:01'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 11:25:01'!
ERROR!
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 11:25:50' prior: 50892303!
report
	| report |
	
	report _ OrderedCollection new.
	receptiveAccount transactions do: [:aTransaction | 
		aTransaction reportMeIn: self.
	].
	report add: ('Balance = ', receptiveAccount balance asString).
	^report.
	
	"
	(aTransaction isKindOf: Deposit) 
			ifTrue: [ report add: ('Deposito por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: Withdraw) 
			ifTrue: [ report add: ('Extracci�n por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: DepositOfTransference ) 
			ifTrue: [ report add: ('Entrada por transferencia de ', aTransaction value asString) ]. 
		(aTransaction isKindOf: WithdrawOfTransference ) 
			ifTrue: [ report add: ('Salida por transferencia de ', aTransaction value asString) ].
			"! !

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 11:25:55'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 11:26:22'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 11:26:46' prior: 50889941!
test02
	
	| account summary |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	summary _ AccountSummary for: account.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report last equals: 'Balance = 500'.	! !

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 11:26:49'!
ERROR!
!AccountSummary methodsFor: '-- private operations' stamp: 'HG 11/13/2020 11:27:14'!
reportAsDeposit: aDeposit 
	self shouldBeImplemented.! !

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 11:27:20'!
ERROR!
!AccountSummary methodsFor: '-- private operations' stamp: 'HG 11/13/2020 11:28:06' prior: 50892403!
reportAsDeposit: aDepositToReport
	| report |
	report add: ('Deposito por ', aDepositToReport value asString)! !
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 11:29:02' prior: 50892357!
report
	
	^(receptiveAccount transactions collect: [:aTransaction | 
		aTransaction reportMeIn: self.
	]) add: ('Balance = ', receptiveAccount balance asString).
	
	
	"
	(aTransaction isKindOf: Deposit) 
			ifTrue: [ report add: ('Deposito por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: Withdraw) 
			ifTrue: [ report add: ('Extracci�n por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: DepositOfTransference ) 
			ifTrue: [ report add: ('Entrada por transferencia de ', aTransaction value asString) ]. 
		(aTransaction isKindOf: WithdrawOfTransference ) 
			ifTrue: [ report add: ('Salida por transferencia de ', aTransaction value asString) ].
			"! !
!AccountSummary methodsFor: '-- private operations' stamp: 'HG 11/13/2020 11:29:48' prior: 50892411!
reportAsDeposit: aDepositToReport
	^'Deposito por ', aDepositToReport value asString.! !
!Withdraw methodsFor: 'summary' stamp: 'HG 11/13/2020 12:02:04' overrides: 50892329!
reportMeIn: anAccountSummary
	^anAccountSummary reportAsWithdraw: self.! !
!AccountSummary methodsFor: '-- private operations' stamp: 'HG 11/13/2020 12:02:40'!
reportAsWithdraw: aWithdrawToReport
	^'Extracci�n por ', aWithdrawToReport value asString.! !
!TransferTransaction methodsFor: 'summary' stamp: 'HG 11/13/2020 12:05:07' overrides: 50892329!
reportMeIn: anAccountSummary
	self subclassResponsibility. ! !
!DepositOfTransference methodsFor: 'summary' stamp: 'HG 11/13/2020 12:05:26' overrides: 50892460!
reportMeIn: anAccountSummary
	^anAccountSummary reportAsDepositTransference: self.! !
!WithdrawOfTransference methodsFor: 'summary' stamp: 'HG 11/13/2020 12:05:44' overrides: 50892460!
reportMeIn: anAccountSummary
	^anAccountSummary reportAsWithdrawTransference: self.! !
!AccountSummary methodsFor: '-- private operations' stamp: 'HG 11/13/2020 12:06:21'!
reportAsWithdrawTransference: aWithdrawTransferenceToReport
	^'Salida por transferencia de ', aWithdrawTransferenceToReport value asString.! !
!AccountSummary methodsFor: '-- private operations' stamp: 'HG 11/13/2020 12:06:38'!
reportAsDepositTransference: aDepositTransferenceToReport
	^'Entrada por transferencia de ', aDepositTransferenceToReport value asString.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 12:10:52' prior: 50892099!
test03
	
	| account summary |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	DepositOfTransference register: 500 on: account. 
	WithdrawOfTransference register: 500 on: account. 
	summary _ AccountSummary for: account.
	
	self assert: account summary first equals: 'Deposito por 500'.
	self assert: account summary second equals: 'Extracci�n por 100'.
	self assert: account summary third equals: 'Entrada por transferencia de 500'.
	self assert: account summary fourth equals: 'Salida por transferencia de 500'.
	self assert: account summary fifth equals: 'Balance = 400'.	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 12:11:10' prior: 50892494!
test03
	
	| account summary |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	DepositOfTransference register: 500 on: account. 
	WithdrawOfTransference register: 500 on: account. 
	summary _ AccountSummary for: account.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report second equals: 'Extracci�n por 100'.
	self assert: summary report third equals: 'Entrada por transferencia de 500'.
	self assert: summary report fourth equals: 'Salida por transferencia de 500'.
	self assert: summary report fifth equals: 'Balance = 400'.	! !

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 12:11:11'!
FAILURE!
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 12:11:37' prior: 50892418!
report
	
	^((receptiveAccount transactions collect: [:aTransaction | 
		aTransaction reportMeIn: self.
	]) add: ('Balance = ', receptiveAccount balance asString)).
	
	
	"
	(aTransaction isKindOf: Deposit) 
			ifTrue: [ report add: ('Deposito por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: Withdraw) 
			ifTrue: [ report add: ('Extracci�n por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: DepositOfTransference ) 
			ifTrue: [ report add: ('Entrada por transferencia de ', aTransaction value asString) ]. 
		(aTransaction isKindOf: WithdrawOfTransference ) 
			ifTrue: [ report add: ('Salida por transferencia de ', aTransaction value asString) ].
			"! !

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 12:11:40'!
FAILURE!
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 12:12:23' prior: 50892544!
report
	
	| report |
	report _ (receptiveAccount transactions collect: [:aTransaction | 
		aTransaction reportMeIn: self.
	]). 
	report add: ('Balance = ', receptiveAccount balance asString).
	^report.
	
	"
	(aTransaction isKindOf: Deposit) 
			ifTrue: [ report add: ('Deposito por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: Withdraw) 
			ifTrue: [ report add: ('Extracci�n por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: DepositOfTransference ) 
			ifTrue: [ report add: ('Entrada por transferencia de ', aTransaction value asString) ]. 
		(aTransaction isKindOf: WithdrawOfTransference ) 
			ifTrue: [ report add: ('Salida por transferencia de ', aTransaction value asString) ].
			"! !

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 12:12:27'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 12:12:27'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 12:12:27'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 12:12:27'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 12:12:27'!
PASSED!
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 14:50:07' prior: 50892572!
report
	
	| report |
	report _ (receptiveAccount transactions collect: [:aTransaction | 
		aTransaction reportMeIn: self.
	]). 
	report add: ('Balance = ', receptiveAccount balance asString).
	^report.! !
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 14:50:41'!
reportTransactions

	^ receptiveAccount transactions collect: [:aTransaction | 
		aTransaction reportMeIn: self.
	]! !
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 14:50:41' prior: 50892611!
report
	
	| report |
	report _ (self reportTransactions). 
	report add: ('Balance = ', receptiveAccount balance asString).
	^report.! !
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 14:50:45' prior: 50892627!
report
	
	| report |
	report _ self reportTransactions. 
	report add: ('Balance = ', receptiveAccount balance asString).
	^report.! !

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 14:50:48'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 14:50:48'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 14:50:48'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 14:50:48'!
PASSED!
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 14:51:42'!
addBalanceToReport: report

	^ report add: ('Balance = ', receptiveAccount balance asString)! !
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 14:51:42' prior: 50892635!
report
	
	| report |
	report _ self reportTransactions. 
	self addBalanceToReport: report.
	^report.! !
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 14:51:56' prior: 50892659!
report
	
	| report |
	report _ self reportTransactions. 
	^self addBalanceToReport: report.
	! !

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 14:52:00'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 14:52:00'!
FAILURE!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 14:52:00'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 14:52:00'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 14:52:15'!
FAILURE!
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 14:51:42' prior: 50892666!
report
	
	| report |
	report _ self reportTransactions. 
	self addBalanceToReport: report.
	^report.! !

Object subclass: #Reporter
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reporter category: #'Portfolio-Solucion' stamp: 'HG 11/13/2020 15:10:09'!
Object subclass: #Reporter
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Reporter subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: #'Portfolio-Solucion' stamp: 'HG 11/13/2020 15:10:30'!
Reporter subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 15:17:56' prior: 50892158!
test04
	
	| account portfolio |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	DepositOfTransference register: 500 on: account. 
	WithdrawOfTransference register: 500 on: account. 
	portfolio _ Portfolio new.
	
	
	self assert: account summary first equals: 'Deposito por 500'.
	self assert: account summary second equals: 'Extracci�n por 100'.
	self assert: account summary third equals: 'Entrada por transferencia de 500'.
	self assert: account summary fourth equals: 'Salida por transferencia de 500'.
	self assert: account summary fifth equals: 'Balance = 400'.	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 15:21:34' prior: 50892716!
test04
	
	| account portfolio |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	DepositOfTransference register: 500 on: account. 
	WithdrawOfTransference register: 500 on: account. 
	portfolio _ Portfolio new.
	portfolio add: account.
	
	self assert: account summary first equals: 'Deposito por 500'.
	self assert: account summary second equals: 'Extracci�n por 100'.
	self assert: account summary third equals: 'Entrada por transferencia de 500'.
	self assert: account summary fourth equals: 'Salida por transferencia de 500'.
	self assert: account summary fifth equals: 'Balance = 400'.	! !

!classDefinition: #PortfolioSummary category: #'Portfolio-Solucion' stamp: 'HG 11/13/2020 15:22:08'!
Reporter subclass: #PortfolioSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 15:21:53' prior: 50892739!
test04
	
	| account portfolio summary |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	DepositOfTransference register: 500 on: account. 
	WithdrawOfTransference register: 500 on: account. 
	portfolio _ Portfolio new.
	portfolio add: account.
	
	summary _ PortfolioSummary for: portfolio.
	
	self assert: account summary first equals: 'Deposito por 500'.
	self assert: account summary second equals: 'Extracci�n por 100'.
	self assert: account summary third equals: 'Entrada por transferencia de 500'.
	self assert: account summary fourth equals: 'Salida por transferencia de 500'.
	self assert: account summary fifth equals: 'Balance = 400'.	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 15:22:45' prior: 50892771!
test04
	
	| account portfolio summary |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	DepositOfTransference register: 500 on: account. 
	WithdrawOfTransference register: 500 on: account. 
	portfolio _ Portfolio new.
	portfolio add: account.
	
	summary _ PortfolioSummary for: portfolio.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report second equals: 'Extracci�n por 100'.
	self assert: summary report third equals: 'Entrada por transferencia de 500'.
	self assert: summary report fourth equals: 'Salida por transferencia de 500'.
	self assert: summary report fifth equals: 'Balance = 400'.	! !

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 15:22:48'!
ERROR!
!PortfolioSummary class methodsFor: 'instance creation' stamp: 'HG 11/13/2020 15:22:54'!
for: aPortfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aPortfolio ! !
!PortfolioSummary class methodsFor: 'instance creation' stamp: 'HG 11/13/2020 15:22:58' prior: 50892825!
for: aPortfolio 
	^self new initializeFor: aPortfolio ! !

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 15:23:00'!
ERROR!

!classDefinition: #PortfolioSummary category: #'Portfolio-Solucion' stamp: 'HG 11/13/2020 15:23:08'!
Reporter subclass: #PortfolioSummary
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioSummary methodsFor: 'initialization' stamp: 'HG 11/13/2020 15:23:08'!
initializeFor: aPortfolio 
	self shouldBeImplemented.
	portfolio := aPortfolio.! !
!PortfolioSummary methodsFor: 'initialization' stamp: 'HG 11/13/2020 15:23:13' prior: 50892849!
initializeFor: aPortfolio 
	portfolio := aPortfolio.! !

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 15:23:15'!
ERROR!
!PortfolioSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 15:23:25'!
report
	self shouldBeImplemented.! !

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 15:23:29'!
ERROR!
!PortfolioSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 15:53:02' prior: 50892862!
report
	
	! !
!PortfolioSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 15:56:47' prior: 50892869!
report
	
	| summary |
	summary _ portfolio reportTransactions. ! !
!PortfolioSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 15:57:21' prior: 50892873!
report
	
	^portfolio reportTransactions. ! !

!testRun: #TransferenceTest #test05 stamp: 'HG 11/13/2020 15:57:28'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'HG 11/13/2020 15:57:28'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'HG 11/13/2020 15:57:28'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'HG 11/13/2020 15:57:28'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'HG 11/13/2020 15:57:28'!
PASSED!

!testRun: #TransferenceTest #test05 stamp: 'HG 11/13/2020 15:57:28'!
PASSED!

!methodRemoval: ReceptiveAccount #allAssets stamp: 'HG 11/13/2020 16:49:00'!
allAssets
	^{self} asOrderedCollection.!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 16:49:52' prior: 50892192!
test01
	
	| account summary |
	
	account _ ReceptiveAccount new.
	summary _ AccountSummary for: account.
	
	self assert: summary report last equals: 'Balance = 0'.
	! !
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 16:51:05' prior: 50892620!
reportTransactions

	^receptiveAccount transactions collect: [:aTransaction | 
		aTransaction reportMeIn: self.
	]! !
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 16:51:40' prior: 50892910!
reportTransactions

	^receptiveAccount transactions collect: [:aTransaction | 
		aTransaction reportMeIn: self.
	].! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 16:54:32' prior: 50892518!
test03
	
	| account summary |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	"
	TODO: hacer una transfer 
	"
	DepositOfTransference register: 500 on: account. 
	WithdrawOfTransference register: 500 on: account. 
	summary _ AccountSummary for: account.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report second equals: 'Extracci�n por 100'.
	self assert: summary report third equals: 'Entrada por transferencia de 500'.
	self assert: summary report fourth equals: 'Salida por transferencia de 500'.
	self assert: summary report fifth equals: 'Balance = 400'.	! !
!PortfolioSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 16:56:08' prior: 50892878!
report
	^portfolio reportTransactions. ! !
!AccountSummary methodsFor: 'summary operations' stamp: 'HG 11/13/2020 17:02:17' prior: 50892917!
reportTransactions
	^receptiveAccount reportTransactionsTo: self.	! !

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 17:02:27'!
ERROR!
!ReceptiveAccount methodsFor: '-- private summary' stamp: 'HG 11/13/2020 17:03:08'!
reportTransactionsTo: anAccountSummary 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: '-- private summary' stamp: 'HG 11/13/2020 17:03:20' prior: 50892961!
reportTransactionsTo: anAccountSummary 
	^transactions collect: [:aTransaction | 
		aTransaction reportMeIn: anAccountSummary.
	].! !

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 17:03:24'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 17:03:24'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 17:03:24'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 17:03:24'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 17:03:24'!
ERROR!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 17:03:24'!
ERROR!

!methodRemoval: ReceptiveAccount #summary stamp: 'HG 11/13/2020 17:03:43'!
summary
	
	| report |
	
	report _ OrderedCollection new.
	self transactions do: [:aTransaction | 
		
		(aTransaction isKindOf: Deposit) 
			ifTrue: [ report add: ('Deposito por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: Withdraw) 
			ifTrue: [ report add: ('Extracci�n por ', aTransaction value asString) ]. 
		(aTransaction isKindOf: DepositOfTransference ) 
			ifTrue: [ report add: ('Entrada por transferencia de ', aTransaction value asString) ]. 
		(aTransaction isKindOf: WithdrawOfTransference ) 
			ifTrue: [ report add: ('Salida por transferencia de ', aTransaction value asString) ].
	].
	report add: ('Balance = ', self balance asString).
	^report.!
!Portfolio methodsFor: 'nil' stamp: 'HG 11/13/2020 17:06:06'!
reportTransactionsTo: anAccountSummary 
	^accounts do:[:anAccount | anAccount reportTransactionsTo: anAccountSummary.]. ! !
!PortfolioSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 17:07:43' prior: 50892948!
report
	
	| report |
	report _ self reportTransactions. 
	self addBalanceToReport: report.
	^report.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 17:10:56' prior: 50892797!
test04
	
	| account portfolio summary |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	DepositOfTransference register: 500 on: account. 
	WithdrawOfTransference register: 500 on: account. 
	portfolio _ Portfolio new.
	portfolio add: account.
	
	summary _ AccountSummary for: portfolio.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report second equals: 'Extracci�n por 100'.
	self assert: summary report third equals: 'Entrada por transferencia de 500'.
	self assert: summary report fourth equals: 'Salida por transferencia de 500'.
	self assert: summary report fifth equals: 'Balance = 400'.	! !

!classRemoval: #PortfolioSummary stamp: 'HG 11/13/2020 17:11:00'!
Reporter subclass: #PortfolioSummary
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reporter category: #'Portfolio-Solucion' stamp: 'HG 11/13/2020 17:11:38'!
Object subclass: #Reporter
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 17:11:38' prior: 50892652!
addBalanceToReport: report

	^ report add: ('Balance = ', account balance asString)! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 17:11:38' prior: 50892237!
initializeFor: aReceptiveAccount 
	account := aReceptiveAccount.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 17:11:38' prior: 50892953!
reportTransactions
	^account reportTransactionsTo: self.	! !
!AccountSummary methodsFor: 'initialization' stamp: 'HG 11/13/2020 17:11:53' prior: 50893072!
initializeFor: anAccount 
	account := anAccount.! !
!Portfolio methodsFor: 'summary -- private' stamp: 'HG 11/13/2020 17:14:20' prior: 50893012!
reportTransactionsTo: anAccountSummary 
	^accounts collect: [:anAccount | anAccount reportTransactionsTo: anAccountSummary.]. ! !
!Portfolio methodsFor: 'summary -- private' stamp: 'HG 11/13/2020 17:14:50' prior: 50893088!
reportTransactionsTo: anAccountSummary 
	^accounts collect: [:anAccount | anAccount reportTransactionsTo: anAccountSummary.] flatten. ! !
!Portfolio methodsFor: 'summary -- private' stamp: 'HG 11/13/2020 17:14:53' prior: 50893095!
reportTransactionsTo: anAccountSummary 
	^accounts collect: [:anAccount | anAccount reportTransactionsTo: anAccountSummary. ] flatten. ! !

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 17:14:56'!
ERROR!
!Portfolio methodsFor: 'summary -- private' stamp: 'HG 11/13/2020 17:15:15' prior: 50893103!
reportTransactionsTo: anAccountSummary 
	^(accounts collect: [:anAccount | anAccount reportTransactionsTo: anAccountSummary. ]) flatten. ! !

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 17:15:18'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 17:15:18'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 17:15:18'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 17:15:18'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 17:15:18'!
PASSED!
!ReceptiveAccount methodsFor: 'summary -- private' stamp: 'HG 11/13/2020 17:15:40' prior: 50892967!
reportTransactionsTo: anAccountSummary 
	^transactions collect: [:aTransaction | aTransaction reportMeIn: anAccountSummary.].! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 18:26:45' prior: 50892924!
test03
	
	| srcAccount summary dstAccount |
	
	srcAccount _ ReceptiveAccount new.
	Deposit register: 500 on: srcAccount. 
	Withdraw register: 100 on: srcAccount. 
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount to: dstAccount  registerWithValue: 500.
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	  
	summary _ AccountSummary for: srcAccount.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report second equals: 'Extracci�n por 100'.
	self assert: summary report third equals: 'Entrada por transferencia de 500'.
	self assert: summary report fourth equals: 'Salida por transferencia de 500'.
	self assert: summary report fifth equals: 'Balance = 400'.	! !

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 18:26:47'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 18:27:24' prior: 50893142!
test03
	
	| srcAccount summary dstAccount |
	
	srcAccount _ ReceptiveAccount new.
	Deposit register: 500 on: srcAccount. 
	Withdraw register: 100 on: srcAccount. 
	dstAccount _ ReceptiveAccount new.
	
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	Transference from: srcAccount to: dstAccount  registerWithValue: 500.
	
	  
	summary _ AccountSummary for: srcAccount.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report second equals: 'Extracci�n por 100'.
	self assert: summary report third equals: 'Entrada por transferencia de 500'.
	self assert: summary report fourth equals: 'Salida por transferencia de 500'.
	self assert: summary report fifth equals: 'Balance = 400'.	! !

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 18:27:25'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 18:27:25'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 18:27:25'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 18:27:25'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 18:27:25'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 18:27:28' prior: 50893171!
test03
	
	| srcAccount summary dstAccount |
	
	srcAccount _ ReceptiveAccount new.
	Deposit register: 500 on: srcAccount. 
	Withdraw register: 100 on: srcAccount. 
	dstAccount _ ReceptiveAccount new.
	
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	Transference from: srcAccount to: dstAccount  registerWithValue: 500.
	  
	summary _ AccountSummary for: srcAccount.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report second equals: 'Extracci�n por 100'.
	self assert: summary report third equals: 'Entrada por transferencia de 500'.
	self assert: summary report fourth equals: 'Salida por transferencia de 500'.
	self assert: summary report fifth equals: 'Balance = 400'.	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 18:28:02' prior: 50893026!
test04
	
	| account portfolio summary dstAccount |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	
	Transference from: account to: dstAccount  registerWithValue: 500.
	Transference from: dstAccount to: account  registerWithValue: 500.

	portfolio _ Portfolio new.
	portfolio add: account.
	
	summary _ AccountSummary for: portfolio.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report second equals: 'Extracci�n por 100'.
	self assert: summary report third equals: 'Entrada por transferencia de 500'.
	self assert: summary report fourth equals: 'Salida por transferencia de 500'.
	self assert: summary report fifth equals: 'Balance = 400'.	! !

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 18:28:07'!
ERROR!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 18:28:30' prior: 50893237!
test04
	
	| account portfolio summary dstAccount |
	
	account _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	
	Transference from: account to: dstAccount  registerWithValue: 500.
	Transference from: dstAccount to: account  registerWithValue: 500.

	portfolio _ Portfolio new.
	portfolio add: account.
	
	summary _ AccountSummary for: portfolio.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report second equals: 'Extracci�n por 100'.
	self assert: summary report third equals: 'Entrada por transferencia de 500'.
	self assert: summary report fourth equals: 'Salida por transferencia de 500'.
	self assert: summary report fifth equals: 'Balance = 400'.	! !

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 18:28:30'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 18:28:55' prior: 50893267!
test04
	
	| account portfolio summary dstAccount |
	
	account _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	
	Transference from: account to: dstAccount  registerWithValue: 500.
	Transference from: dstAccount to: account  registerWithValue: 500.

	portfolio _ Portfolio new.
	portfolio add: account.
	
	summary _ AccountSummary for: portfolio.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report second equals: 'Extracci�n por 100'.
	self assert: summary report third equals: 'Salida por transferencia de 500'.
	self assert: summary report fourth equals: 'Entrada por transferencia de 500'.
	self assert: summary report fifth equals: 'Balance = 400'.	! !

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 18:28:56'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 18:28:56'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 18:28:56'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 18:28:56'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 18:28:56'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 18:29:02'!
test05
	
	| account portfolio summary dstAccount |
	
	account _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	
	Transference from: account to: dstAccount  registerWithValue: 500.
	Transference from: dstAccount to: account  registerWithValue: 500.

	portfolio _ Portfolio new.
	portfolio add: account.
	
	summary _ AccountSummary for: portfolio.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report second equals: 'Extracci�n por 100'.
	self assert: summary report third equals: 'Salida por transferencia de 500'.
	self assert: summary report fourth equals: 'Entrada por transferencia de 500'.
	self assert: summary report fifth equals: 'Balance = 400'.	! !

!classDefinition: #TransferNetSummary category: #'Portfolio-Solucion' stamp: 'HG 11/13/2020 18:32:50'!
Reporter subclass: #TransferNetSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 18:32:59' prior: 50893338!
test05
	
	| srcAccount summary |
	
	srcAccount _ ReceptiveAccount new.
	
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report second equals: 'Extracci�n por 100'.
	self assert: summary report third equals: 'Salida por transferencia de 500'.
	self assert: summary report fourth equals: 'Entrada por transferencia de 500'.
	self assert: summary report fifth equals: 'Balance = 400'.	! !

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/13/2020 18:33:02'!
ERROR!
!TransferNetSummary class methodsFor: 'instance creation' stamp: 'HG 11/13/2020 18:33:07'!
for: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aReceptiveAccount ! !
!TransferNetSummary class methodsFor: 'instance creation' stamp: 'HG 11/13/2020 18:33:25' prior: 50893395!
for: anAccount 
	^self new initializeFor: anAccount ! !
!Reporter class methodsFor: 'instance creation' stamp: 'HG 11/13/2020 18:34:09'!
for: anAccount 
	^self new initializeFor: anAccount ! !
!Reporter methodsFor: 'initialization' stamp: 'HG 11/13/2020 18:34:31'!
initializeFor: anAccount
	account _ anAccount. ! !

!methodRemoval: AccountSummary #initializeFor: stamp: 'HG 11/13/2020 18:34:39'!
initializeFor: anAccount 
	account := anAccount.!

!methodRemoval: TransferNetSummary class #for: stamp: 'HG 11/13/2020 18:34:44'!
for: anAccount 
	^self new initializeFor: anAccount !

!methodRemoval: AccountSummary class #for: stamp: 'HG 11/13/2020 18:34:46'!
for: aReceptiveAccount 
	^self new initializeFor: aReceptiveAccount !

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/13/2020 18:34:56'!
ERROR!
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 18:35:07'!
report
	self shouldBeImplemented.! !
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 18:36:13' prior: 50893433!
report
	^0.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 18:36:27' prior: 50893374!
test05
	
	| srcAccount summary |
	
	srcAccount _ ReceptiveAccount new.
	
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report equals: 0.! !

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/13/2020 18:36:28'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 18:36:28'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 18:36:28'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 18:36:28'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 18:36:28'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/13/2020 18:36:28'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 18:38:19' prior: 50893441!
test05
	
	| srcAccount summary |
	
	srcAccount _ ReceptiveAccount new.
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report equals: 0.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 18:38:55'!
test06
	
	| srcAccount summary |
	
	srcAccount _ ReceptiveAccount new.
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report equals: 0.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 18:39:46' prior: 50893473!
test06
	
	| srcAccount summary dstAccount |
	
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount to: dstAccount  registerWithValue: 500.
	Transference from: dstAccount to: srcAccount  registerWithValue: 400.
	
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report equals: 0.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 18:40:06' prior: 50893482!
test06
	
	| srcAccount summary dstAccount |
	
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report equals: 100.! !

!testRun: #AccountSummaryTest #test06 stamp: 'HG 11/13/2020 18:40:07'!
FAILURE!
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 18:42:06' prior: 50893437!
report
	account transactions isEmpty ifTrue:[^0].
	^100.! !

!testRun: #AccountSummaryTest #test06 stamp: 'HG 11/13/2020 18:42:13'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 18:42:13'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 18:42:13'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 18:42:13'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 18:42:13'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/13/2020 18:42:13'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'HG 11/13/2020 18:42:13'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 18:43:47'!
test07
	
	| srcAccount summary dstAccount |
	
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report equals: 300.! !

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/13/2020 18:43:47'!
FAILURE!
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 18:45:56' prior: 50893514!
report
	account transactions isEmpty ifTrue:[^0].
	^100.! !
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 18:49:27' prior: 50893556!
report
	account transactions sum: [:aTransaction | aTransaction ].! !
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 18:52:19' prior: 50893561!
report
	account transactions sum: [:aTransaction | aTransaction reportMeIn: self. ].! !

!classRenamed: #Reporter as: #Summary stamp: 'HG 11/13/2020 18:53:03'!
Smalltalk renameClassNamed: #Reporter as: #Summary!
!TransferNetSummary methodsFor: '-- private operations' stamp: 'HG 11/13/2020 18:55:23'!
reportAsDeposit: aDepositToReport
	^0.! !
!TransferNetSummary methodsFor: '-- private operations' stamp: 'HG 11/13/2020 18:55:36'!
reportAsWithdraw: aWithdrawToReport
	^0.! !
!TransferNetSummary methodsFor: '-- private operations' stamp: 'HG 11/13/2020 18:56:48'!
reportAsWithdrawTransference: aWithdrawTransferenceToReport
	^aWithdrawTransferenceToReport affectBalance: 0.! !
!TransferNetSummary methodsFor: '-- private operations' stamp: 'HG 11/13/2020 18:56:59'!
reportAsDepositTransference: aDepositTransferenceToReport
	^aDepositTransferenceToReport affectBalance: 0.! !
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 18:58:09' prior: 50893567!
report
	account transactions ifEmpty: [^0]. 
	^account transactions sum: [:aTransaction | aTransaction reportMeIn: self. ].! !

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/13/2020 18:58:15'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 18:58:51' prior: 50893537!
test07
	
	| srcAccount summary dstAccount |
	
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report equals: -300.! !

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/13/2020 18:58:55'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 18:58:55'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 18:58:55'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 18:58:55'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 18:58:55'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/13/2020 18:58:55'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'HG 11/13/2020 18:58:55'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/13/2020 18:58:55'!
PASSED!
!TransferNetSummary methodsFor: '-- private operations' stamp: 'HG 11/13/2020 18:59:33' prior: 50893594!
reportAsDepositTransference: aDepositTransferenceToReport
	^aDepositTransferenceToReport value.! !
!TransferNetSummary methodsFor: '-- private operations' stamp: 'HG 11/13/2020 18:59:39' prior: 50893587!
reportAsWithdrawTransference: aWithdrawTransferenceToReport
	^aWithdrawTransferenceToReport value negated.! !

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/13/2020 18:59:45'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 18:59:46'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 18:59:46'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 18:59:46'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 18:59:46'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/13/2020 18:59:46'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'HG 11/13/2020 18:59:46'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/13/2020 18:59:46'!
PASSED!
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 19:07:40' prior: 50893601!
report
	account 
	account transactions ifEmpty: [^0]. 
	^account transactions sum: [:aTransaction | aTransaction reportMeIn: self. ].! !
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 19:08:21' prior: 50893682!
report
	account 
	account transactions ifEmpty: [^0]. 
	^account transactions sum: [:aTransaction | aTransaction reportMeIn: self. ].! !
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 19:09:14' prior: 50893690!
report
	account reportTransactionsTo: self.
	account transactions ifEmpty: [^0]. 
	^account transactions sum: [:aTransaction | aTransaction reportMeIn: self. ].! !
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 19:10:46' prior: 50893698!
report
	account reportTransactionsTo: self.
	
	"
	account transactions ifEmpty: [^0]. 
	^account transactions sum: [:aTransaction | aTransaction reportMeIn: self. ].
	"! !
!Deposit methodsFor: 'summary' stamp: 'HG 11/13/2020 19:11:37' prior: 50892346 overrides: 50892329!
reportMeIn: aSummary
	^aSummary reportAsDeposit: self.! !
!TransferTransaction methodsFor: 'summary' stamp: 'HG 11/13/2020 19:11:41' prior: 50892460 overrides: 50892329!
reportMeIn: aSummary
	self subclassResponsibility. ! !
!DepositOfTransference methodsFor: 'summary' stamp: 'HG 11/13/2020 19:11:47' prior: 50892466 overrides: 50893721!
reportMeIn: aSummary
	^aSummary reportAsDepositTransference: self.! !
!WithdrawOfTransference methodsFor: 'summary' stamp: 'HG 11/13/2020 19:11:51' prior: 50892472 overrides: 50893721!
reportMeIn: aSummary
	^aSummary reportAsWithdrawTransference: self.! !
!Withdraw methodsFor: 'summary' stamp: 'HG 11/13/2020 19:11:56' prior: 50892449 overrides: 50892329!
reportMeIn: aSummary
	^aSummary reportAsWithdraw: self.! !
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 19:12:53' prior: 50893706!
report
	^(account reportTransactionsTo: self) sum ifEmpty: [^0.].
	
	"
	account transactions ifEmpty: [^0]. 
	^account transactions sum: [:aTransaction | aTransaction reportMeIn: self. ].
	"! !

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/13/2020 19:12:57'!
ERROR!
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 19:13:11' prior: 50893744!
report
	^(account reportTransactionsTo: self) sum.
	
	"
	account transactions ifEmpty: [^0]. 
	^account transactions sum: [:aTransaction | aTransaction reportMeIn: self. ].
	"! !

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/13/2020 19:13:15'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 19:13:15'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 19:13:15'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 19:13:15'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 19:13:15'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/13/2020 19:13:15'!
ERROR!

!testRun: #AccountSummaryTest #test06 stamp: 'HG 11/13/2020 19:13:15'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/13/2020 19:13:15'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/13/2020 19:13:15'!
ERROR!
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 19:13:40' prior: 50893756!
report
	^(account reportTransactionsTo: self) sum.
	
	"
	account transactions ifEmpty: [^0]. 
	^account transactions sum: [:aTransaction | aTransaction reportMeIn: self. ].
	"! !
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 19:15:33' prior: 50893787!
report
	| transfersReported |
	transfersReported _ account reportTransactionsTo: self.
	^ transfersReported inject: 0 into: [:subTotal :next | subTotal + 
	next]
	"
	account transactions ifEmpty: [^0]. 
	^account transactions sum: [:aTransaction | aTransaction reportMeIn: self. ].
	"! !

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 19:15:36'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 19:15:36'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 19:15:36'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 19:15:36'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/13/2020 19:15:36'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'HG 11/13/2020 19:15:36'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/13/2020 19:15:36'!
PASSED!
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 19:15:56' prior: 50893796!
report
	| transfersReported |
	transfersReported _ account reportTransactionsTo: self.
	^ transfersReported 
		inject: 0 into: [:subTotal :next | subTotal + next]! !
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 19:16:02' prior: 50893826!
report
	| transfersReported |
	transfersReported _ account reportTransactionsTo: self.
	^ transfersReported 
		inject: 0 
		into: [:subTotal :next | subTotal + next]! !
!TransferNetSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 19:16:21' prior: 50893835!
report
	| transfersNetReported |
	transfersNetReported _ account reportTransactionsTo: self.
	^ transfersNetReported 
		inject: 0 
		into: [:subTotal :next | subTotal + next]! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 19:18:31'!
test08
	
	| srcAccount summary dstAccount |
	
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report equals: -300.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 19:18:59' prior: 50893853!
test08
	
	| srcAccount summary dstAccount portfolio |
	
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	
	portfolio _ Portfolio new.
	portfolio add: srcAccount. 
	
	summary _ TransferNetSummary for: portfolio.
	
	self assert: summary report equals: -300.! !

!testRun: #AccountSummaryTest #test08 stamp: 'HG 11/13/2020 19:19:04'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 19:19:04'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 19:19:04'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 19:19:04'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 19:19:04'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/13/2020 19:19:04'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'HG 11/13/2020 19:19:04'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/13/2020 19:19:04'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'HG 11/13/2020 19:19:04'!
PASSED!

----SNAPSHOT----(13 November 2020 19:26:04) CuisUniversity-4137.image priorSource: 17933418!

array at: 'cuenta1'!

array!

array!

array _ {'cuenta1': 1}!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 19:30:47'!
test09
	
	| portfolio account_ dstAccount srcAccount summary |
	
	portfolio _ Portfolio new.
	account_ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	
	portfolio _ Portfolio new.
	portfolio add: srcAccount. 
	
	summary _ TransferNetSummary for: portfolio.
	
	self assert: summary report equals: -300.! !

!classDefinition: #PorfolioTreeSummary category: #'Portfolio-Solucion' stamp: 'HG 11/13/2020 19:39:45'!
Summary subclass: #PorfolioTreeSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/13/2020 19:38:49' prior: 50893916!
test09
	
	| portfolio summary |
	
	portfolio _ Portfolio new.
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report isEmpty.! !

!testRun: #AccountSummaryTest #test09 stamp: 'HG 11/13/2020 19:39:46'!
ERROR!
!PorfolioTreeSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 19:39:55'!
report
	self shouldBeImplemented.! !
!PorfolioTreeSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 19:39:58' prior: 50893954!
report
	^[].! !

!testRun: #AccountSummaryTest #test09 stamp: 'HG 11/13/2020 19:40:02'!
ERROR!
!PorfolioTreeSummary methodsFor: 'summary' stamp: 'HG 11/13/2020 19:40:25' prior: 50893959!
report
	^OrderedCollection new.! !

!testRun: #AccountSummaryTest #test09 stamp: 'HG 11/13/2020 19:40:31'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 'HG 11/13/2020 19:40:31'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/13/2020 19:40:31'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/13/2020 19:40:31'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/13/2020 19:40:31'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/13/2020 19:40:31'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'HG 11/13/2020 19:40:31'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/13/2020 19:40:31'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'HG 11/13/2020 19:40:31'!
PASSED!

!testRun: #AccountSummaryTest #test09 stamp: 'HG 11/13/2020 19:40:31'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/14/2020 09:51:40'!
test01EmptyReceptiveAccountReportsZeroBalanceSummary
	
	| account summary |
	
	account _ ReceptiveAccount new.
	summary _ AccountSummary for: account.
	
	self assert: summary report last equals: 'Balance = 0'.
	! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/14/2020 09:51:41'!
test01EmptyReceptiveAccountReportsZeroBalanceSummary
	| destinationAccount sourceAccount |
	sourceAccount _ ReceptiveAccount new.
	Deposit register: 100 on: sourceAccount .
	
	destinationAccount _ ReceptiveAccount new.
	
	Transference from: sourceAccount  to: destinationAccount registerWithValue: 60.
	
	self assert: sourceAccount balance equals: 40.
	self assert: destinationAccount balance equals: 60.
	! !

!methodRemoval: AccountSummaryTest #test01 stamp: 'HG 11/14/2020 09:51:41'!
test01
	
	| account summary |
	
	account _ ReceptiveAccount new.
	summary _ AccountSummary for: account.
	
	self assert: summary report last equals: 'Balance = 0'.
	!

!methodRemoval: TransferenceTest #test01 stamp: 'HG 11/14/2020 09:51:41'!
test01
	| destinationAccount sourceAccount |
	sourceAccount _ ReceptiveAccount new.
	Deposit register: 100 on: sourceAccount .
	
	destinationAccount _ ReceptiveAccount new.
	
	Transference from: sourceAccount  to: destinationAccount registerWithValue: 60.
	
	self assert: sourceAccount balance equals: 40.
	self assert: destinationAccount balance equals: 60.
	!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 16:22:59'!
test10
	
	| portfolio summary |
	
	portfolio _ Portfolio new.
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report isEmpty.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 16:24:51' prior: 50894041!
test10
	
	| portfolio summary portfolioName |
	
	portfolioName _ 'Portfolio principal'.
	
	portfolio _ Portfolio named: portfolioName.
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.! !

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 16:24:56'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 16:25:06'!
named: aString 
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'instance creation' stamp: 'HG 11/15/2020 16:26:03' prior: 50894062!
named: aName 
	self initializeWithName: aName.! !

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 16:26:11'!
ERROR!
!Portfolio class methodsFor: 'initialization' stamp: 'HG 11/15/2020 16:26:23'!
initializeWithName: aName 
	self shouldBeImplemented.
	name := aName.! !

!methodRemoval: Portfolio class #initializeWithName: stamp: 'HG 11/15/2020 16:26:30'!
initializeWithName: aName 
	self shouldBeImplemented.
	name := aName.!
!Portfolio class methodsFor: 'instance creation' stamp: 'HG 11/15/2020 16:26:46' prior: 50894067!
named: aName 
	^self new initializeWithName: aName.! !

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 16:26:52'!
ERROR!

!classDefinition: #Portfolio category: #'Portfolio-Solucion' stamp: 'HG 11/15/2020 16:27:03'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'HG 11/15/2020 16:27:03'!
initializeWithName: aName 
	self shouldBeImplemented.
	name := aName.! !
!Portfolio methodsFor: 'initialization' stamp: 'HG 11/15/2020 16:27:06' prior: 50894100!
initializeWithName: aName 
	name := aName.! !
!PorfolioTreeSummary methodsFor: 'summary' stamp: 'HG 11/15/2020 16:35:43' prior: 50893965!
report
	| treeSummary |
	treeSummary _ account reportTransactionsTo: self.
	
	^treeSummary.! !
!PorfolioTreeSummary methodsFor: 'summary' stamp: 'HG 11/15/2020 16:35:53' prior: 50894111!
report

	| treeSummary |
	treeSummary _ account reportTransactionsTo: self.
	
	^treeSummary.! !
!PorfolioTreeSummary methodsFor: 'summary' stamp: 'HG 11/15/2020 16:36:45' prior: 50894117!
report

	| treeSummary |
	treeSummary _ account reportTreeSummaryTo: self.
	
	^treeSummary.! !

!testRun: #AccountSummaryTest #test01EmptyReceptiveAccountReportsZeroBalanceSummary stamp: 'HG 11/15/2020 16:36:50'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/15/2020 16:36:50'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/15/2020 16:36:50'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/15/2020 16:36:50'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/15/2020 16:36:50'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'HG 11/15/2020 16:36:50'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/15/2020 16:36:50'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'HG 11/15/2020 16:36:50'!
PASSED!

!testRun: #AccountSummaryTest #test09 stamp: 'HG 11/15/2020 16:36:50'!
ERROR!

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 16:36:50'!
ERROR!

!testRun: #AccountSummaryTest #test09 stamp: 'HG 11/15/2020 16:39:01'!
ERROR!
!Portfolio methodsFor: 'summary' stamp: 'HG 11/15/2020 16:39:11'!
reportTreeSummaryTo: aPorfolioTreeSummary 
	self shouldBeImplemented.! !

!testRun: #AccountSummaryTest #test09 stamp: 'HG 11/15/2020 16:39:23'!
ERROR!
!Portfolio methodsFor: 'summary' stamp: 'HG 11/15/2020 16:43:48' prior: 50894157!
reportTreeSummaryTo: aPorfolioTreeSummary 
	| transactions |
	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!Portfolio methodsFor: 'summary -- private' stamp: 'HG 11/15/2020 16:45:47' prior: 50894165!
reportTreeSummaryTo: aPorfolioTreeSummary 

	| transactions |
	(accounts collect: [:anAccount | | anAccountSummary | anAccount reportTransactionsTo: anAccountSummary. ]) flatten. 
	
	
	transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!PorfolioTreeSummary methodsFor: 'summary' stamp: 'HG 11/15/2020 16:46:48' prior: 50894123!
report

	| treeSummary |
	treeSummary _ OrderedCollection new.
	treeSummary add: (account name).
	
	treeSummary _ account reportTreeSummaryTo: self.
	
	^treeSummary.! !
!PorfolioTreeSummary methodsFor: 'summary' stamp: 'HG 11/15/2020 16:46:53' prior: 50894187!
report

	| treeSummary |
	treeSummary _ OrderedCollection new.
	treeSummary add: (account name).
	
	
	treeSummary _ account reportTreeSummaryTo: self.
	
	^treeSummary.! !
!PorfolioTreeSummary methodsFor: 'summary' stamp: 'HG 11/15/2020 16:50:38' prior: 50894196!
report

	| treeSummary |
	treeSummary _ OrderedCollection new.
	treeSummary add: (account name).
	treeSummary _ account reportTreeSummaryTo: self.
	^treeSummary.! !

'lalala' tab!

'lalala' asString tab!

'lalala' asString class tab!

'lalala' asString class tab!

'lalala' asString tab !

String tab!

String tab , 'lala'!
!Portfolio methodsFor: 'summary -- private' stamp: 'HG 11/15/2020 16:59:04' prior: 50894174!
reportTreeSummaryTo: aPorfolioTreeSummary 
	^(accounts collect: [:anAccount | anAccount reportTreeSummaryTo: aPorfolioTreeSummary. ]) flatten. 
	! !
!Portfolio methodsFor: 'summary -- private' stamp: 'HG 11/15/2020 17:00:37' prior: 50894219!
reportTreeSummaryTo: aPorfolioTreeSummary 
	
	| summary |
	summary _ OrderedCollection new.
	summary add: (String tab, (name) asString).
	^(accounts collect: [:anAccount | anAccount reportTreeSummaryTo: aPorfolioTreeSummary. ]) flatten. 
	! !
!Portfolio methodsFor: 'summary -- private' stamp: 'HG 11/15/2020 17:00:57' prior: 50894227!
reportTreeSummaryTo: aPorfolioTreeSummary 
	
	| summary |
	summary _ OrderedCollection new.
	summary add: (String tab, (name) asString).
	summary addAll: ((accounts collect: [:anAccount | anAccount reportTreeSummaryTo: aPorfolioTreeSummary. ]) flatten). 
	! !
!Portfolio methodsFor: 'summary -- private' stamp: 'HG 11/15/2020 17:01:01' prior: 50894238!
reportTreeSummaryTo: aPorfolioTreeSummary 
	
	| summary |
	summary _ OrderedCollection new.
	summary add: (String tab, (name) asString).
	summary addAll: ((accounts collect: [:anAccount | anAccount reportTreeSummaryTo: aPorfolioTreeSummary. ]) flatten). 
	^summary.
	! !

!classDefinition: #ReceptiveAccount category: #'Portfolio-Solucion' stamp: 'HG 11/15/2020 17:01:50'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'summary -- private' stamp: 'HG 11/15/2020 17:01:48'!
reportTreeSummaryTo: aPorfolioTreeSummary 
	
	^name.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:02:34' prior: 50894049!
test10
	
	| portfolio summary portfolioName account accountName |
	
	portfolioName _ 'Portfolio principal'.
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	portfolio _ Portfolio named: portfolioName.
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:02:49' prior: 50894275!
test10
	
	| portfolio summary portfolioName account accountName |
	
	portfolioName _ 'Portfolio principal'.
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	portfolio _ Portfolio named: portfolioName.
	portfolio add: account.
	
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:03:27' prior: 50894290!
test10
	
	| portfolio summary portfolioName account accountName tab |
	
	portfolioName _ 'Portfolio principal'.
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	portfolio _ Portfolio named: portfolioName.
	portfolio add: account.
	
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.	
	self assert: summary report second equals: tab, accountName.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:03:36' prior: 50894305!
test10
	
	| portfolio summary portfolioName account accountName tab |
	
	tab _ String tab.
	portfolioName _ 'Portfolio principal'.
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	portfolio _ Portfolio named: portfolioName.
	portfolio add: account.
	
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.	
	self assert: summary report second equals: tab, accountName.! !

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 17:03:37'!
ERROR!
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'HG 11/15/2020 17:03:42'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'HG 11/15/2020 17:03:55' prior: 50894342!
named: aName
	^self new initializeNamed: aName ! !

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 17:03:57'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HG 11/15/2020 17:04:07'!
initializeNamed: aName 
	self shouldBeImplemented.
	name := aName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HG 11/15/2020 17:04:09' prior: 50894358!
initializeNamed: aName 
	name := aName.! !

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 17:04:12'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:04:28' prior: 50894322!
test10
	
	| portfolio summary portfolioName account accountName tab |
	
	tab _ String tab.
	portfolioName _ 'Portfolio principal'.
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	portfolio _ Portfolio named: portfolioName.
	portfolio add: account.
	
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.	
	self assert: summary report second equals: (tab,accountName).! !

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 17:04:33'!
FAILURE!

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 17:04:47'!
FAILURE!
!Portfolio methodsFor: 'accesing' stamp: 'HG 11/15/2020 17:06:13' overrides: 16882612!
name
	^name.! !
!ReceptiveAccount methodsFor: 'accesing' stamp: 'HG 11/15/2020 17:06:20' overrides: 16882612!
name
	^name.! !

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 17:06:25'!
FAILURE!
!Portfolio methodsFor: 'summary -- private' stamp: 'HG 11/15/2020 17:27:39'!
reportTreeSummaryTo: aPorfolioTreeSummary withTab: aTabString
	
	| summary |
	summary _ OrderedCollection new.
	summary add: ((name) asString).
	summary addAll: ((accounts collect: [:anAccount | anAccount reportTreeSummaryTo: aPorfolioTreeSummary. ]) flatten). 
	^summary.
	! !
!PorfolioTreeSummary methodsFor: 'summary' stamp: 'HG 11/15/2020 17:28:16' prior: 50894205!
report

	^account reportTreeSummaryTo: self withTab: '' asString.! !

!methodRemoval: Portfolio #reportTreeSummaryTo: stamp: 'HG 11/15/2020 17:28:28'!
reportTreeSummaryTo: aPorfolioTreeSummary 
	
	| summary |
	summary _ OrderedCollection new.
	summary add: (String tab, (name) asString).
	summary addAll: ((accounts collect: [:anAccount | anAccount reportTreeSummaryTo: aPorfolioTreeSummary. ]) flatten). 
	^summary.
	!
!Portfolio methodsFor: 'summary -- private' stamp: 'HG 11/15/2020 17:29:01' prior: 50894405!
reportTreeSummaryTo: aPorfolioTreeSummary withTab: aTabString
	
	| summary tab |
	summary _ OrderedCollection new.
	summary add: (aTabString, (name) asString).
	tab _ String tab, aTabString.
	summary addAll: ((accounts collect: [:anAccount | anAccount reportTreeSummaryTo: aPorfolioTreeSummary. ]) flatten). 
	^summary.
	! !
!Portfolio methodsFor: 'summary -- private' stamp: 'HG 11/15/2020 17:29:23' prior: 50894434!
reportTreeSummaryTo: aPorfolioTreeSummary withTab: aTabString
	
	| summary tab |
	summary _ OrderedCollection new.
	summary add: (aTabString, (name) asString).
	tab _ String tab, aTabString.
	summary addAll: 
		((accounts collect: 
			[:anAccount | anAccount reportTreeSummaryTo: aPorfolioTreeSummary withTab: tab. ]) flatten). 
	^summary.
	! !
!ReceptiveAccount methodsFor: 'summary -- private' stamp: 'HG 11/15/2020 17:29:45'!
reportTreeSummaryTo: aPorfolioTreeSummary withTab: aTab
	
	^aTab, name.! !

!methodRemoval: ReceptiveAccount #reportTreeSummaryTo: stamp: 'HG 11/15/2020 17:29:48'!
reportTreeSummaryTo: aPorfolioTreeSummary 
	
	^name.!

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 17:29:52'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyReceptiveAccountReportsZeroBalanceSummary stamp: 'HG 11/15/2020 17:29:52'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/15/2020 17:29:52'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/15/2020 17:29:52'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/15/2020 17:29:52'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/15/2020 17:29:52'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'HG 11/15/2020 17:29:52'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/15/2020 17:29:52'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'HG 11/15/2020 17:29:52'!
PASSED!

!testRun: #AccountSummaryTest #test09 stamp: 'HG 11/15/2020 17:29:52'!
FAILURE!

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 17:29:52'!
PASSED!

!testRun: #AccountSummaryTest #test09 stamp: 'HG 11/15/2020 17:29:52'!
FAILURE!

summary report!

summary report!
!PorfolioTreeSummary methodsFor: 'summary' stamp: 'HG 11/15/2020 17:30:50' prior: 50894417!
report

	^account reportTreeSummaryTo: self withTab: ('' asString).! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:31:54' prior: 50893944!
test09
	
	| portfolio summary portfolioName |
	
	portfolioName _ 'Portfolio vac�o'.
	portfolio _ Portfolio named: portfolioName.
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.! !

!testRun: #AccountSummaryTest #test09 stamp: 'HG 11/15/2020 17:32:01'!
PASSED!

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 17:32:07'!
PASSED!

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 17:32:25'!
PASSED!

summary report !

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 17:34:10'!
PASSED!

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 17:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyReceptiveAccountReportsZeroBalanceSummary stamp: 'HG 11/15/2020 17:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/15/2020 17:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/15/2020 17:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/15/2020 17:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/15/2020 17:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'HG 11/15/2020 17:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/15/2020 17:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'HG 11/15/2020 17:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test09 stamp: 'HG 11/15/2020 17:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 17:34:13'!
PASSED!

!classDefinition: #AccountSummaryTest category: #'Portfolio-Solucion' stamp: 'HG 11/15/2020 17:38:02'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: 'oneTab'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:38:00' prior: 50894372!
test10
	
	| portfolio summary portfolioName account accountName |
	
	portfolioName _ 'Portfolio principal'.
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	portfolio _ Portfolio named: portfolioName.
	portfolio add: account.
	
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.	
	self assert: summary report second equals: (oneTab,accountName).! !

String tab tab!

!classDefinition: #AccountSummaryTest category: #'Portfolio-Solucion' stamp: 'HG 11/15/2020 17:38:51'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: 'oneTab twoTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'nil' stamp: 'HG 11/15/2020 17:38:49' overrides: 16927572!
setUp

	oneTab _ String tab.
	twoTabs _ String tab, String tab.! !

!classDefinition: #AccountSummaryTest category: #'Portfolio-Solucion' stamp: 'HG 11/15/2020 17:39:04'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: 'oneTab twoTabs threeTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:39:02' prior: 50894596 overrides: 16927572!
setUp

	oneTab _ String tab.
	twoTabs _ String tab, String tab.
	threeTabs _ String tab, String tab, String tab.! !
!PorfolioTreeSummary methodsFor: 'summary' stamp: 'HG 11/15/2020 17:40:11' prior: 50894505!
report

	^account reportTreeSummaryTo: self.! !
!Portfolio methodsFor: 'summary -- private' stamp: 'HG 11/15/2020 17:40:56'!
reportTreeSummaryTo: aPorfolioTreeSummary 
	^self reportTreeSummaryTo: aPorfolioTreeSummary withTab: ('' asString).
	! !

!testRun: #AccountSummaryTest #test01EmptyReceptiveAccountReportsZeroBalanceSummary stamp: 'HG 11/15/2020 17:41:01'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/15/2020 17:41:01'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/15/2020 17:41:01'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/15/2020 17:41:01'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/15/2020 17:41:01'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'HG 11/15/2020 17:41:01'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/15/2020 17:41:01'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'HG 11/15/2020 17:41:01'!
PASSED!

!testRun: #AccountSummaryTest #test09 stamp: 'HG 11/15/2020 17:41:01'!
PASSED!

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 17:41:01'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:50:54'!
test11
	
	| portfolio summary portfolioName account accountName childPortfolioName |
	
	portfolioName _ 'Portfolio principal'.
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	portfolio _ Portfolio named: portfolioName.
	portfolio add: account.
	
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.	
	self assert: summary report second equals: (oneTab,accountName).
	self assert: summary report third equals: (oneTab,childPortfolioName).! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:51:32' prior: 50894655!
test11
	
	| portfolio summary portfolioName account accountName childPortfolioName portfolioChild |
	
	portfolioName _ 'Portfolio principal'.
	accountName _ 'Cuenta de prueba'.
	childPortfolioName _ 'Portfolio hijo'.
	account _ ReceptiveAccount named: accountName.
	portfolio _ Portfolio named: portfolioName.
	portfolioChild _ Portfolio named: childPortfolioName. 
	portfolio add: account.
	portfolio add: portfolioChild.
	
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.	
	self assert: summary report second equals: (oneTab,accountName).
	self assert: summary report third equals: (oneTab,childPortfolioName).! !

!testRun: #AccountSummaryTest #test11 stamp: 'HG 11/15/2020 17:51:36'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyReceptiveAccountReportsZeroBalanceSummary stamp: 'HG 11/15/2020 17:51:36'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/15/2020 17:51:36'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/15/2020 17:51:36'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/15/2020 17:51:36'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/15/2020 17:51:36'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'HG 11/15/2020 17:51:36'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/15/2020 17:51:36'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'HG 11/15/2020 17:51:36'!
PASSED!

!testRun: #AccountSummaryTest #test09 stamp: 'HG 11/15/2020 17:51:36'!
PASSED!

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 17:51:36'!
PASSED!

!testRun: #AccountSummaryTest #test11 stamp: 'HG 11/15/2020 17:51:36'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:51:54' prior: 50894675!
test11
	
	| portfolio summary portfolioName account accountName childPortfolioName portfolioChild childAccount |
	
	portfolioName _ 'Portfolio principal'.
	accountName _ 'Cuenta de prueba'.
	childPortfolioName _ 'Portfolio hijo'.
	account _ ReceptiveAccount named: accountName.
	portfolio _ Portfolio named: portfolioName.
	portfolioChild _ Portfolio named: childPortfolioName. 
	portfolioChild add: childAccount.
	portfolio add: account.
	portfolio add: portfolioChild.
	
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.	
	self assert: summary report second equals: (oneTab,accountName).
	self assert: summary report third equals: (oneTab,childPortfolioName).! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:52:31' prior: 50894731!
test11
	
	| portfolio summary portfolioName account accountName childPortfolioName portfolioChild childAccount |
	
	portfolioName _ 'Portfolio principal'.
	accountName _ 'Cuenta de prueba'.
	childPortfolioName _ 'Portfolio hijo'.
	account _ ReceptiveAccount named: accountName.
	childAccount _ ReceptiveAccount named: accountName.
	portfolio _ Portfolio named: portfolioName.
	portfolioChild _ Portfolio named: childPortfolioName. 
	portfolioChild add: childAccount.
	portfolio add: account.
	portfolio add: portfolioChild.
	
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.	
	self assert: summary report second equals: (oneTab,accountName).
	self assert: summary report third equals: (oneTab,childPortfolioName).
	self assert: summary report fourth equals: (twoTabs,accountName).
! !

!testRun: #AccountSummaryTest #test11 stamp: 'HG 11/15/2020 17:52:32'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyReceptiveAccountReportsZeroBalanceSummary stamp: 'HG 11/15/2020 17:52:32'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 'HG 11/15/2020 17:52:32'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 'HG 11/15/2020 17:52:32'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 'HG 11/15/2020 17:52:32'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 'HG 11/15/2020 17:52:32'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 'HG 11/15/2020 17:52:32'!
PASSED!

!testRun: #AccountSummaryTest #test07 stamp: 'HG 11/15/2020 17:52:32'!
PASSED!

!testRun: #AccountSummaryTest #test08 stamp: 'HG 11/15/2020 17:52:32'!
PASSED!

!testRun: #AccountSummaryTest #test09 stamp: 'HG 11/15/2020 17:52:32'!
PASSED!

!testRun: #AccountSummaryTest #test10 stamp: 'HG 11/15/2020 17:52:32'!
PASSED!

!testRun: #AccountSummaryTest #test11 stamp: 'HG 11/15/2020 17:52:32'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:54:28'!
test02ReceptiveAccountReportsDepositSummary
	| destinationAccount sourceAccount |
	sourceAccount _ ReceptiveAccount new.
	Deposit register: 100 on: sourceAccount .
	
	destinationAccount _ ReceptiveAccount new.
	
	self should:[Transference from: sourceAccount  to: destinationAccount registerWithValue: -10] 
		raise:Error
		withMessageText: (Transference cannotTransferNegativeMoneyErrorDescription).
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:54:28'!
test02ReceptiveAccountReportsDepositSummary
	
	| account summary |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	summary _ AccountSummary for: account.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report last equals: 'Balance = 500'.	! !

!methodRemoval: TransferenceTest #test02 stamp: 'HG 11/15/2020 17:54:28'!
test02
	| destinationAccount sourceAccount |
	sourceAccount _ ReceptiveAccount new.
	Deposit register: 100 on: sourceAccount .
	
	destinationAccount _ ReceptiveAccount new.
	
	self should:[Transference from: sourceAccount  to: destinationAccount registerWithValue: -10] 
		raise:Error
		withMessageText: (Transference cannotTransferNegativeMoneyErrorDescription).
	!

!methodRemoval: AccountSummaryTest #test02 stamp: 'HG 11/15/2020 17:54:28'!
test02
	
	| account summary |
	
	account _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	summary _ AccountSummary for: account.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report last equals: 'Balance = 500'.	!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:55:00'!
test03ReceptiveAccountReportsTransferOperations
	| anAccount |
	anAccount _ ReceptiveAccount new.
	Deposit register: 100 on: anAccount .
		
	self should:[Transference from: anAccount to:  anAccount registerWithValue: 100]
		raise:Error
		withMessageText: Transference cannotTransferFromAccountToSameAccount.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:55:00'!
test03ReceptiveAccountReportsTransferOperations
	
	| srcAccount summary dstAccount |
	
	srcAccount _ ReceptiveAccount new.
	Deposit register: 500 on: srcAccount. 
	Withdraw register: 100 on: srcAccount. 
	dstAccount _ ReceptiveAccount new.
	
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	Transference from: srcAccount to: dstAccount  registerWithValue: 500.
	  
	summary _ AccountSummary for: srcAccount.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report second equals: 'Extracci�n por 100'.
	self assert: summary report third equals: 'Entrada por transferencia de 500'.
	self assert: summary report fourth equals: 'Salida por transferencia de 500'.
	self assert: summary report fifth equals: 'Balance = 400'.	! !

!methodRemoval: TransferenceTest #test03 stamp: 'HG 11/15/2020 17:55:00'!
test03
	| anAccount |
	anAccount _ ReceptiveAccount new.
	Deposit register: 100 on: anAccount .
		
	self should:[Transference from: anAccount to:  anAccount registerWithValue: 100]
		raise:Error
		withMessageText: Transference cannotTransferFromAccountToSameAccount.!

!methodRemoval: AccountSummaryTest #test03 stamp: 'HG 11/15/2020 17:55:00'!
test03
	
	| srcAccount summary dstAccount |
	
	srcAccount _ ReceptiveAccount new.
	Deposit register: 500 on: srcAccount. 
	Withdraw register: 100 on: srcAccount. 
	dstAccount _ ReceptiveAccount new.
	
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	Transference from: srcAccount to: dstAccount  registerWithValue: 500.
	  
	summary _ AccountSummary for: srcAccount.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report second equals: 'Extracci�n por 100'.
	self assert: summary report third equals: 'Entrada por transferencia de 500'.
	self assert: summary report fourth equals: 'Salida por transferencia de 500'.
	self assert: summary report fifth equals: 'Balance = 400'.	!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:55:19'!
test04PortfolioReportsTransferOperations
	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100. 
	
	self assert: srcAccount transactions includes: transference withdrawOperation.
	self assert: dstAccount transactions includes: transference depositOperation.! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:55:19'!
test04PortfolioReportsTransferOperations
	
	| account portfolio summary dstAccount |
	
	account _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	
	Transference from: account to: dstAccount  registerWithValue: 500.
	Transference from: dstAccount to: account  registerWithValue: 500.

	portfolio _ Portfolio new.
	portfolio add: account.
	
	summary _ AccountSummary for: portfolio.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report second equals: 'Extracci�n por 100'.
	self assert: summary report third equals: 'Salida por transferencia de 500'.
	self assert: summary report fourth equals: 'Entrada por transferencia de 500'.
	self assert: summary report fifth equals: 'Balance = 400'.	! !

!methodRemoval: TransferenceTest #test04 stamp: 'HG 11/15/2020 17:55:19'!
test04
	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100. 
	
	self assert: srcAccount transactions includes: transference withdrawOperation.
	self assert: dstAccount transactions includes: transference depositOperation.!

!methodRemoval: AccountSummaryTest #test04 stamp: 'HG 11/15/2020 17:55:19'!
test04
	
	| account portfolio summary dstAccount |
	
	account _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	Deposit register: 500 on: account. 
	Withdraw register: 100 on: account. 
	
	Transference from: account to: dstAccount  registerWithValue: 500.
	Transference from: dstAccount to: account  registerWithValue: 500.

	portfolio _ Portfolio new.
	portfolio add: account.
	
	summary _ AccountSummary for: portfolio.
	
	self assert: summary report first equals: 'Deposito por 500'.
	self assert: summary report second equals: 'Extracci�n por 100'.
	self assert: summary report third equals: 'Salida por transferencia de 500'.
	self assert: summary report fourth equals: 'Entrada por transferencia de 500'.
	self assert: summary report fifth equals: 'Balance = 400'.	!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:56:11'!
test05EmptyAccountReportsZeroTransferNet
	
	| srcAccount summary |
	
	srcAccount _ ReceptiveAccount new.
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report equals: 0.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 17:56:11'!
test05EmptyAccountReportsZeroTransferNet

	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100. 
	
	self assert: srcAccount transactions first transferenceFrom equals: transference.
	self assert: dstAccount transactions first transferenceFrom equals: transference.
	self assert: transference value equals: 100.! !

!methodRemoval: AccountSummaryTest #test05 stamp: 'HG 11/15/2020 17:56:11'!
test05
	
	| srcAccount summary |
	
	srcAccount _ ReceptiveAccount new.
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report equals: 0.!

!methodRemoval: TransferenceTest #test05 stamp: 'HG 11/15/2020 17:56:11'!
test05

	| srcAccount dstAccount transference |
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	transference _ Transference from: srcAccount to: dstAccount registerWithValue: 100. 
	
	self assert: srcAccount transactions first transferenceFrom equals: transference.
	self assert: dstAccount transactions first transferenceFrom equals: transference.
	self assert: transference value equals: 100.!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 18:00:43'!
test06AccountReportsTransferencesAsTransferNetSummary
	
	| srcAccount summary dstAccount |
	
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report equals: 100.! !

!methodRemoval: AccountSummaryTest #test06 stamp: 'HG 11/15/2020 18:00:43'!
test06
	
	| srcAccount summary dstAccount |
	
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report equals: 100.!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 18:01:06'!
test06AccountReportsOneTransferenceValueAsTransferNetSummary
	
	| srcAccount summary dstAccount |
	
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report equals: 100.! !

!methodRemoval: AccountSummaryTest #test06AccountReportsTransferencesAsTransferNetSummary stamp: 'HG 11/15/2020 18:01:06'!
test06AccountReportsTransferencesAsTransferNetSummary
	
	| srcAccount summary dstAccount |
	
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report equals: 100.!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 18:01:39'!
test07AccountReportsMultipleTransferencesBalanceAsTransferNetSummary
	
	| srcAccount summary dstAccount |
	
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report equals: -300.! !

!methodRemoval: AccountSummaryTest #test07 stamp: 'HG 11/15/2020 18:01:39'!
test07
	
	| srcAccount summary dstAccount |
	
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	
	summary _ TransferNetSummary for: srcAccount.
	
	self assert: summary report equals: -300.!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 18:02:02'!
test08PortfolioReportsTransferencesBalanceAsTransferNetSummary
	
	| srcAccount summary dstAccount portfolio |
	
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	
	portfolio _ Portfolio new.
	portfolio add: srcAccount. 
	
	summary _ TransferNetSummary for: portfolio.
	
	self assert: summary report equals: -300.! !

!methodRemoval: AccountSummaryTest #test08 stamp: 'HG 11/15/2020 18:02:02'!
test08
	
	| srcAccount summary dstAccount portfolio |
	
	srcAccount _ ReceptiveAccount new.
	dstAccount _ ReceptiveAccount new.
	
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: srcAccount to: dstAccount  registerWithValue: 400.
	Transference from: dstAccount to: srcAccount  registerWithValue: 500.
	
	portfolio _ Portfolio new.
	portfolio add: srcAccount. 
	
	summary _ TransferNetSummary for: portfolio.
	
	self assert: summary report equals: -300.!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 18:03:55'!
test09EmptyPortfolioReportsItsNameAsPortfolioTree
	
	| portfolio summary portfolioName |
	
	portfolioName _ 'Portfolio vac�o'.
	portfolio _ Portfolio named: portfolioName.
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.! !

!methodRemoval: AccountSummaryTest #test09 stamp: 'HG 11/15/2020 18:03:55'!
test09
	
	| portfolio summary portfolioName |
	
	portfolioName _ 'Portfolio vac�o'.
	portfolio _ Portfolio named: portfolioName.
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 18:04:22'!
test10PortfolioWithAccountReportsHierarchyCorrectly
	
	| portfolio summary portfolioName account accountName |
	
	portfolioName _ 'Portfolio principal'.
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	portfolio _ Portfolio named: portfolioName.
	portfolio add: account.
	
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.	
	self assert: summary report second equals: (oneTab,accountName).! !

!methodRemoval: AccountSummaryTest #test10 stamp: 'HG 11/15/2020 18:04:22'!
test10
	
	| portfolio summary portfolioName account accountName |
	
	portfolioName _ 'Portfolio principal'.
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	portfolio _ Portfolio named: portfolioName.
	portfolio add: account.
	
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.	
	self assert: summary report second equals: (oneTab,accountName).!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 'HG 11/15/2020 18:04:57'!
test11MultipleLevelChildPortfolioReturnsHierarchyCorrectly
	
	| portfolio summary portfolioName account accountName childPortfolioName portfolioChild childAccount |
	
	portfolioName _ 'Portfolio principal'.
	accountName _ 'Cuenta de prueba'.
	childPortfolioName _ 'Portfolio hijo'.
	account _ ReceptiveAccount named: accountName.
	childAccount _ ReceptiveAccount named: accountName.
	portfolio _ Portfolio named: portfolioName.
	portfolioChild _ Portfolio named: childPortfolioName. 
	portfolioChild add: childAccount.
	portfolio add: account.
	portfolio add: portfolioChild.
	
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.	
	self assert: summary report second equals: (oneTab,accountName).
	self assert: summary report third equals: (oneTab,childPortfolioName).
	self assert: summary report fourth equals: (twoTabs,accountName).
! !

!methodRemoval: AccountSummaryTest #test11 stamp: 'HG 11/15/2020 18:04:57'!
test11
	
	| portfolio summary portfolioName account accountName childPortfolioName portfolioChild childAccount |
	
	portfolioName _ 'Portfolio principal'.
	accountName _ 'Cuenta de prueba'.
	childPortfolioName _ 'Portfolio hijo'.
	account _ ReceptiveAccount named: accountName.
	childAccount _ ReceptiveAccount named: accountName.
	portfolio _ Portfolio named: portfolioName.
	portfolioChild _ Portfolio named: childPortfolioName. 
	portfolioChild add: childAccount.
	portfolio add: account.
	portfolio add: portfolioChild.
	
	summary _ PorfolioTreeSummary for: portfolio.
	
	self assert: summary report first equals: portfolioName.	
	self assert: summary report second equals: (oneTab,accountName).
	self assert: summary report third equals: (oneTab,childPortfolioName).
	self assert: summary report fourth equals: (twoTabs,accountName).
!

----SNAPSHOT----(15 November 2020 18:08:38) CuisUniversity-4137.image priorSource: 17992321!
!AccountSummaryTest methodsFor: 'portfolio tree test' stamp: 'HG 11/15/2020 18:22:03'!
test12
	
	| account accountName summary |
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	
	summary _ PorfolioTreeSummary for: account.
	! !
!AccountSummaryTest methodsFor: 'portfolio tree test' stamp: 'HG 11/15/2020 18:22:35' prior: 50895337!
test12
	
	| account accountName summary |
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	
	summary _ PorfolioTreeSummary for: account.
	! !
!AccountSummaryTest methodsFor: 'portfolio tree test' stamp: 'HG 11/15/2020 18:23:36' prior: 50895346!
test12
	
	| account accountName summary |
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	
	summary _ PorfolioTreeSummary for: account.
	! !
!AccountSummaryTest methodsFor: 'portfolio tree test' stamp: 'HG 11/15/2020 18:25:13' prior: 50895355!
test12
	
	| account accountName summary |
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	
	summary _ PorfolioTreeSummary for: account.
	
	self
		should: [ summary report ]
		raise: Error
		withMessageText: PorfolioTreeSummary cantMoveBeforePuttingAllChipsOnBoardErrorDescription.
! !
!AccountSummaryTest methodsFor: 'portfolio tree test' stamp: 'HG 11/15/2020 18:26:14' prior: 50895364!
test12
	
	| account accountName summary |
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	
	summary _ PorfolioTreeSummary for: account.
	
	self
		should: [ summary report ]
		raise: Error
		withMessageText: PorfolioTreeSummary receptiveAccountCantReportPortfolioTreeErrorDescription.
! !

!testRun: #AccountSummaryTest #test12 stamp: 'HG 11/15/2020 18:26:16'!
ERROR!
!PorfolioTreeSummary class methodsFor: 'exceptions' stamp: 'HG 11/15/2020 18:26:33'!
receptiveAccountCantReportPortfolioTreeErrorDescription
	self shouldBeImplemented.! !
!PorfolioTreeSummary class methodsFor: 'exceptions' stamp: 'HG 11/15/2020 18:27:13' prior: 50895394!
receptiveAccountCantReportPortfolioTreeErrorDescription
	^'A Receptive Account cant generate a PortfolioTree report.'.! !

!testRun: #AccountSummaryTest #test12 stamp: 'HG 11/15/2020 18:27:16'!
FAILURE!
!ReceptiveAccount methodsFor: 'summary -- private' stamp: 'HG 11/15/2020 18:28:34'!
reportTreeSummaryTo: aPorfolioTreeSummary 
	^self signalCantGeneratePortfolioTreeSummaryFromAccount.
	! !

!methodRemoval: ReceptiveAccount #reportTreeSummaryTo:withTab: stamp: 'HG 11/15/2020 18:28:37'!
reportTreeSummaryTo: aPorfolioTreeSummary withTab: aTab
	
	^aTab, name.!

!testRun: #AccountSummaryTest #test12 stamp: 'HG 11/15/2020 18:28:40'!
FAILURE!
!ReceptiveAccount methodsFor: 'exceptions' stamp: 'HG 11/15/2020 18:30:13'!
signalCantGeneratePortfolioTreeSummaryFromAccount
	^self error: self class.! !

!methodRemoval: PorfolioTreeSummary class #receptiveAccountCantReportPortfolioTreeErrorDescription stamp: 'HG 11/15/2020 18:30:34'!
receptiveAccountCantReportPortfolioTreeErrorDescription
	^'A Receptive Account cant generate a PortfolioTree report.'.!
!ReceptiveAccount class methodsFor: 'error description' stamp: 'HG 11/15/2020 18:30:46'!
receptiveAccountCantReportPortfolioTreeErrorDescription
	^'A Receptive Account cant generate a PortfolioTree report.'.! !
!ReceptiveAccount methodsFor: 'exceptions' stamp: 'HG 11/15/2020 18:30:56' prior: 50895423!
signalCantGeneratePortfolioTreeSummaryFromAccount
	^self error: self class receptiveAccountCantReportPortfolioTreeErrorDescription.! !

!testRun: #AccountSummaryTest #test12 stamp: 'HG 11/15/2020 18:31:02'!
ERROR!
!PorfolioTreeSummary class methodsFor: 'exceptions' stamp: 'HG 11/15/2020 18:32:08'!
receptiveAccountCantReportPortfolioTreeErrorDescription
	^'A Receptive Account cant generate a PortfolioTree report.'.! !

!testRun: #AccountSummaryTest #test12 stamp: 'HG 11/15/2020 18:32:18'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyReceptiveAccountReportsZeroBalanceSummary stamp: 'HG 11/15/2020 18:32:18'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountReportsDepositSummary stamp: 'HG 11/15/2020 18:32:18'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountReportsTransferOperations stamp: 'HG 11/15/2020 18:32:18'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioReportsTransferOperations stamp: 'HG 11/15/2020 18:32:18'!
PASSED!

!testRun: #AccountSummaryTest #test05EmptyAccountReportsZeroTransferNet stamp: 'HG 11/15/2020 18:32:18'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountReportsOneTransferenceValueAsTransferNetSummary stamp: 'HG 11/15/2020 18:32:18'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountReportsMultipleTransferencesBalanceAsTransferNetSummary stamp: 'HG 11/15/2020 18:32:18'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioReportsTransferencesBalanceAsTransferNetSummary stamp: 'HG 11/15/2020 18:32:18'!
PASSED!

!testRun: #AccountSummaryTest #test09EmptyPortfolioReportsItsNameAsPortfolioTree stamp: 'HG 11/15/2020 18:32:18'!
PASSED!

!testRun: #AccountSummaryTest #test10PortfolioWithAccountReportsHierarchyCorrectly stamp: 'HG 11/15/2020 18:32:18'!
ERROR!

!testRun: #AccountSummaryTest #test11MultipleLevelChildPortfolioReturnsHierarchyCorrectly stamp: 'HG 11/15/2020 18:32:18'!
ERROR!

!testRun: #AccountSummaryTest #test12 stamp: 'HG 11/15/2020 18:32:18'!
PASSED!
!ReceptiveAccount methodsFor: 'summary -- private' stamp: 'HG 11/15/2020 18:33:46'!
reportTreeSummaryTo: aPorfolioTreeSummary withTab: aTab
	^aTab, name.
	! !

!testRun: #AccountSummaryTest #test09EmptyPortfolioReportsItsNameAsPortfolioTree stamp: 'HG 11/15/2020 18:33:53'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyReceptiveAccountReportsZeroBalanceSummary stamp: 'HG 11/15/2020 18:33:53'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountReportsDepositSummary stamp: 'HG 11/15/2020 18:33:53'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountReportsTransferOperations stamp: 'HG 11/15/2020 18:33:53'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioReportsTransferOperations stamp: 'HG 11/15/2020 18:33:53'!
PASSED!

!testRun: #AccountSummaryTest #test05EmptyAccountReportsZeroTransferNet stamp: 'HG 11/15/2020 18:33:53'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountReportsOneTransferenceValueAsTransferNetSummary stamp: 'HG 11/15/2020 18:33:53'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountReportsMultipleTransferencesBalanceAsTransferNetSummary stamp: 'HG 11/15/2020 18:33:53'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioReportsTransferencesBalanceAsTransferNetSummary stamp: 'HG 11/15/2020 18:33:53'!
PASSED!

!testRun: #AccountSummaryTest #test09EmptyPortfolioReportsItsNameAsPortfolioTree stamp: 'HG 11/15/2020 18:33:53'!
PASSED!

!testRun: #AccountSummaryTest #test10PortfolioWithAccountReportsHierarchyCorrectly stamp: 'HG 11/15/2020 18:33:53'!
PASSED!

!testRun: #AccountSummaryTest #test11MultipleLevelChildPortfolioReturnsHierarchyCorrectly stamp: 'HG 11/15/2020 18:33:53'!
PASSED!

!testRun: #AccountSummaryTest #test12 stamp: 'HG 11/15/2020 18:33:53'!
PASSED!

!methodRemoval: ReceptiveAccount #signalCantGeneratePortfolioTreeSummaryFromAccount stamp: 'HG 11/15/2020 18:34:00'!
signalCantGeneratePortfolioTreeSummaryFromAccount
	^self error: self class receptiveAccountCantReportPortfolioTreeErrorDescription.!

!methodRemoval: ReceptiveAccount class #receptiveAccountCantReportPortfolioTreeErrorDescription stamp: 'HG 11/15/2020 18:34:10'!
receptiveAccountCantReportPortfolioTreeErrorDescription
	^'A Receptive Account cant generate a PortfolioTree report.'.!

!testRun: #AccountSummaryTest #test10PortfolioWithAccountReportsHierarchyCorrectly stamp: 'HG 11/15/2020 18:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyReceptiveAccountReportsZeroBalanceSummary stamp: 'HG 11/15/2020 18:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountReportsDepositSummary stamp: 'HG 11/15/2020 18:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountReportsTransferOperations stamp: 'HG 11/15/2020 18:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioReportsTransferOperations stamp: 'HG 11/15/2020 18:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test05EmptyAccountReportsZeroTransferNet stamp: 'HG 11/15/2020 18:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountReportsOneTransferenceValueAsTransferNetSummary stamp: 'HG 11/15/2020 18:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountReportsMultipleTransferencesBalanceAsTransferNetSummary stamp: 'HG 11/15/2020 18:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioReportsTransferencesBalanceAsTransferNetSummary stamp: 'HG 11/15/2020 18:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test09EmptyPortfolioReportsItsNameAsPortfolioTree stamp: 'HG 11/15/2020 18:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test10PortfolioWithAccountReportsHierarchyCorrectly stamp: 'HG 11/15/2020 18:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test11MultipleLevelChildPortfolioReturnsHierarchyCorrectly stamp: 'HG 11/15/2020 18:34:13'!
PASSED!

!testRun: #AccountSummaryTest #test12 stamp: 'HG 11/15/2020 18:34:13'!
FAILURE!

!testRun: #AccountSummaryTest #test12 stamp: 'HG 11/15/2020 18:34:13'!
FAILURE!
!ReceptiveAccount methodsFor: 'exceptions' stamp: 'HG 11/15/2020 18:35:49'!
signalCantGeneratePortfolioTreeSummaryFromAccount
	^self error: PorfolioTreeSummary class .! !
!ReceptiveAccount methodsFor: 'exceptions' stamp: 'HG 11/15/2020 18:36:07' prior: 50895632!
signalCantGeneratePortfolioTreeSummaryFromAccount
	^self error: PorfolioTreeSummary class signalCantGeneratePortfolioTreeSummaryFromAccount.! !

!testRun: #AccountSummaryTest #test10PortfolioWithAccountReportsHierarchyCorrectly stamp: 'HG 11/15/2020 18:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyReceptiveAccountReportsZeroBalanceSummary stamp: 'HG 11/15/2020 18:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountReportsDepositSummary stamp: 'HG 11/15/2020 18:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountReportsTransferOperations stamp: 'HG 11/15/2020 18:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioReportsTransferOperations stamp: 'HG 11/15/2020 18:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test05EmptyAccountReportsZeroTransferNet stamp: 'HG 11/15/2020 18:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountReportsOneTransferenceValueAsTransferNetSummary stamp: 'HG 11/15/2020 18:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountReportsMultipleTransferencesBalanceAsTransferNetSummary stamp: 'HG 11/15/2020 18:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioReportsTransferencesBalanceAsTransferNetSummary stamp: 'HG 11/15/2020 18:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test09EmptyPortfolioReportsItsNameAsPortfolioTree stamp: 'HG 11/15/2020 18:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test10PortfolioWithAccountReportsHierarchyCorrectly stamp: 'HG 11/15/2020 18:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test11MultipleLevelChildPortfolioReturnsHierarchyCorrectly stamp: 'HG 11/15/2020 18:36:09'!
PASSED!

!testRun: #AccountSummaryTest #test12 stamp: 'HG 11/15/2020 18:36:09'!
FAILURE!

!testRun: #AccountSummaryTest #test12 stamp: 'HG 11/15/2020 18:36:09'!
FAILURE!
!ReceptiveAccount methodsFor: 'exceptions' stamp: 'HG 11/15/2020 18:36:45' prior: 50895638!
signalCantGeneratePortfolioTreeSummaryFromAccount
	^self error: PorfolioTreeSummary class receptiveAccountCantReportPortfolioTreeErrorDescription.! !

!testRun: #AccountSummaryTest #test04PortfolioReportsTransferOperations stamp: 'HG 11/15/2020 18:36:47'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyReceptiveAccountReportsZeroBalanceSummary stamp: 'HG 11/15/2020 18:36:47'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountReportsDepositSummary stamp: 'HG 11/15/2020 18:36:47'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountReportsTransferOperations stamp: 'HG 11/15/2020 18:36:47'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioReportsTransferOperations stamp: 'HG 11/15/2020 18:36:47'!
PASSED!

!testRun: #AccountSummaryTest #test05EmptyAccountReportsZeroTransferNet stamp: 'HG 11/15/2020 18:36:47'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountReportsOneTransferenceValueAsTransferNetSummary stamp: 'HG 11/15/2020 18:36:47'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountReportsMultipleTransferencesBalanceAsTransferNetSummary stamp: 'HG 11/15/2020 18:36:47'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioReportsTransferencesBalanceAsTransferNetSummary stamp: 'HG 11/15/2020 18:36:47'!
PASSED!

!testRun: #AccountSummaryTest #test09EmptyPortfolioReportsItsNameAsPortfolioTree stamp: 'HG 11/15/2020 18:36:47'!
PASSED!

!testRun: #AccountSummaryTest #test10PortfolioWithAccountReportsHierarchyCorrectly stamp: 'HG 11/15/2020 18:36:47'!
PASSED!

!testRun: #AccountSummaryTest #test11MultipleLevelChildPortfolioReturnsHierarchyCorrectly stamp: 'HG 11/15/2020 18:36:47'!
PASSED!

!testRun: #AccountSummaryTest #test12 stamp: 'HG 11/15/2020 18:36:47'!
FAILURE!

!testRun: #AccountSummaryTest #test12 stamp: 'HG 11/15/2020 18:36:47'!
FAILURE!
!ReceptiveAccount methodsFor: 'exceptions' stamp: 'HG 11/15/2020 18:37:19' prior: 50895698!
signalCantGeneratePortfolioTreeSummaryFromAccount
	^self error: self class receptiveAccountCantReportPortfolioTreeErrorDescription.! !
!ReceptiveAccount class methodsFor: 'error description' stamp: 'HG 11/15/2020 18:37:29'!
receptiveAccountCantReportPortfolioTreeErrorDescription
	^'sss'.! !
!ReceptiveAccount class methodsFor: 'error description' stamp: 'HG 11/15/2020 18:37:50' prior: 50895765!
receptiveAccountCantReportPortfolioTreeErrorDescription
	^'A Receptive Account cant generate a PortfolioTree report.'.! !

!methodRemoval: PorfolioTreeSummary class #receptiveAccountCantReportPortfolioTreeErrorDescription stamp: 'HG 11/15/2020 18:37:54'!
receptiveAccountCantReportPortfolioTreeErrorDescription
	^'A Receptive Account cant generate a PortfolioTree report.'.!
!AccountSummaryTest methodsFor: 'portfolio tree test' stamp: 'HG 11/15/2020 18:38:05' prior: 50895378!
test12
	
	| account accountName summary |
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	
	summary _ PorfolioTreeSummary for: account.
	
	self
		should: [ summary report ]
		raise: Error
		withMessageText: ReceptiveAccount receptiveAccountCantReportPortfolioTreeErrorDescription.
! !

!testRun: #AccountSummaryTest #test12 stamp: 'HG 11/15/2020 18:38:07'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyReceptiveAccountReportsZeroBalanceSummary stamp: 'HG 11/15/2020 18:38:07'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountReportsDepositSummary stamp: 'HG 11/15/2020 18:38:07'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountReportsTransferOperations stamp: 'HG 11/15/2020 18:38:07'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioReportsTransferOperations stamp: 'HG 11/15/2020 18:38:07'!
PASSED!

!testRun: #AccountSummaryTest #test05EmptyAccountReportsZeroTransferNet stamp: 'HG 11/15/2020 18:38:07'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountReportsOneTransferenceValueAsTransferNetSummary stamp: 'HG 11/15/2020 18:38:07'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountReportsMultipleTransferencesBalanceAsTransferNetSummary stamp: 'HG 11/15/2020 18:38:07'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioReportsTransferencesBalanceAsTransferNetSummary stamp: 'HG 11/15/2020 18:38:07'!
PASSED!

!testRun: #AccountSummaryTest #test09EmptyPortfolioReportsItsNameAsPortfolioTree stamp: 'HG 11/15/2020 18:38:07'!
PASSED!

!testRun: #AccountSummaryTest #test10PortfolioWithAccountReportsHierarchyCorrectly stamp: 'HG 11/15/2020 18:38:07'!
PASSED!

!testRun: #AccountSummaryTest #test11MultipleLevelChildPortfolioReturnsHierarchyCorrectly stamp: 'HG 11/15/2020 18:38:07'!
PASSED!

!testRun: #AccountSummaryTest #test12 stamp: 'HG 11/15/2020 18:38:07'!
PASSED!
!AccountSummaryTest methodsFor: 'portfolio tree test' stamp: 'HG 11/15/2020 18:38:27'!
test12ReceptiveAccountCantReportAPortfolioTreeSummary
	
	| account accountName summary |
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	
	summary _ PorfolioTreeSummary for: account.
	
	self
		should: [ summary report ]
		raise: Error
		withMessageText: ReceptiveAccount receptiveAccountCantReportPortfolioTreeErrorDescription.
! !

!methodRemoval: AccountSummaryTest #test12 stamp: 'HG 11/15/2020 18:38:27'!
test12
	
	| account accountName summary |
	accountName _ 'Cuenta de prueba'.
	account _ ReceptiveAccount named: accountName.
	
	summary _ PorfolioTreeSummary for: account.
	
	self
		should: [ summary report ]
		raise: Error
		withMessageText: ReceptiveAccount receptiveAccountCantReportPortfolioTreeErrorDescription.
!

----SNAPSHOT----(15 November 2020 18:38:37) CuisUniversity-4137.image priorSource: 18037844!

!classRenamed: #AccountSummaryTest as: #SummaryTest stamp: 'HG 11/15/2020 18:40:38'!
Smalltalk renameClassNamed: #AccountSummaryTest as: #SummaryTest!

!classRemoval: #Transference stamp: 'HG 11/16/2020 09:29:28'!
Object subclass: #Transference
	instanceVariableNames: 'deposit withdraw value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferNetSummary stamp: 'HG 11/16/2020 09:29:28'!
Summary subclass: #TransferNetSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PorfolioTreeSummary stamp: 'HG 11/16/2020 09:29:28'!
Summary subclass: #PorfolioTreeSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummary stamp: 'HG 11/16/2020 09:29:29'!
Summary subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Summary stamp: 'HG 11/16/2020 09:29:29'!
Object subclass: #Summary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'HG 11/16/2020 09:29:29'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #WithdrawOfTransference stamp: 'HG 11/16/2020 09:29:30'!
TransferTransaction subclass: #WithdrawOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #DepositOfTransference stamp: 'HG 11/16/2020 09:29:30'!
TransferTransaction subclass: #DepositOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTransaction stamp: 'HG 11/16/2020 09:29:30'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'HG 11/16/2020 09:29:31'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'HG 11/16/2020 09:29:31'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'HG 11/16/2020 09:29:31'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'HG 11/16/2020 09:29:32'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'HG 11/16/2020 09:29:32'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferenceTest stamp: 'HG 11/16/2020 09:29:33'!
TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #SummaryTest stamp: 'HG 11/16/2020 09:29:33'!
TestCase subclass: #SummaryTest
	instanceVariableNames: 'oneTab twoTabs threeTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'HG 11/16/2020 09:29:33'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'HG 11/16/2020 09:29:34'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of /Users/monteagudo/Desktop/Inge1/19-Portfolio2/Portfolio-Solucion.st----!

!classRemoval: #Transference stamp: 'HG 11/16/2020 14:58:18'!
Object subclass: #Transference
	instanceVariableNames: 'deposit withdraw value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PorfolioTreeSummary stamp: 'HG 11/16/2020 14:58:19'!
TextSummary subclass: #PorfolioTreeSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #DetailedTreeSummary stamp: 'HG 11/16/2020 14:58:19'!
TextSummary subclass: #DetailedTreeSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummary stamp: 'HG 11/16/2020 14:58:20'!
TextSummary subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TextSummary stamp: 'HG 11/16/2020 14:58:20'!
Summary subclass: #TextSummary
	instanceVariableNames: 'generatedReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferNetSummary stamp: 'HG 11/16/2020 14:58:20'!
BalanceSummary subclass: #TransferNetSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #BalanceSummary stamp: 'HG 11/16/2020 14:58:21'!
Summary subclass: #BalanceSummary
	instanceVariableNames: 'calculatedBalance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Summary stamp: 'HG 11/16/2020 14:58:21'!
Object subclass: #Summary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'HG 11/16/2020 14:58:21'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #WithdrawOfTransference stamp: 'HG 11/16/2020 14:58:22'!
TransferTransaction subclass: #WithdrawOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #DepositOfTransference stamp: 'HG 11/16/2020 14:58:22'!
TransferTransaction subclass: #DepositOfTransference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTransaction stamp: 'HG 11/16/2020 14:58:23'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'HG 11/16/2020 14:58:23'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'HG 11/16/2020 14:58:23'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'HG 11/16/2020 14:58:24'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'HG 11/16/2020 14:58:24'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'HG 11/16/2020 14:58:25'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferenceTest stamp: 'HG 11/16/2020 14:58:25'!
TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'HG 11/16/2020 14:58:25'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'HG 11/16/2020 14:58:26'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummaryTest stamp: 'HG 11/16/2020 14:58:26'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: 'oneTab twoTabs threeTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of /Users/monteagudo/Desktop/Inge1/19-Portfolio2/Portfolio-Solucion.st----!

!testRun: #AccountSummaryTest #test14ReceptiveAccountCantReportADetailedTreeSummary stamp: 'HG 11/16/2020 14:59:25'!
PASSED!

!testRun: #AccountSummaryTest #test01EmptyReceptiveAccountReportsZeroBalanceSummary stamp: 'HG 11/16/2020 14:59:25'!
PASSED!

!testRun: #AccountSummaryTest #test02ReceptiveAccountReportsDepositSummary stamp: 'HG 11/16/2020 14:59:25'!
PASSED!

!testRun: #AccountSummaryTest #test03ReceptiveAccountReportsTransferOperations stamp: 'HG 11/16/2020 14:59:25'!
PASSED!

!testRun: #AccountSummaryTest #test04PortfolioReportsTransferOperations stamp: 'HG 11/16/2020 14:59:25'!
PASSED!

!testRun: #AccountSummaryTest #test05EmptyAccountReportsZeroTransferNet stamp: 'HG 11/16/2020 14:59:25'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountReportsOneTransferenceValueAsTransferNetSummary stamp: 'HG 11/16/2020 14:59:25'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountReportsMultipleTransferencesBalanceAsTransferNetSummary stamp: 'HG 11/16/2020 14:59:25'!
PASSED!

!testRun: #AccountSummaryTest #test08PortfolioReportsTransferencesBalanceAsTransferNetSummary stamp: 'HG 11/16/2020 14:59:25'!
PASSED!

!testRun: #AccountSummaryTest #test09EmptyPortfolioReportsItsNameAsPortfolioTree stamp: 'HG 11/16/2020 14:59:25'!
PASSED!

!testRun: #AccountSummaryTest #test10PortfolioWithAccountReportsHierarchyCorrectly stamp: 'HG 11/16/2020 14:59:25'!
PASSED!

!testRun: #AccountSummaryTest #test11MultipleLevelChildPortfolioReturnsHierarchyCorrectly stamp: 'HG 11/16/2020 14:59:25'!
PASSED!

!testRun: #AccountSummaryTest #test12ReceptiveAccountCantReportAPortfolioTreeSummary stamp: 'HG 11/16/2020 14:59:25'!
PASSED!

!testRun: #AccountSummaryTest #test13DetailedTreeReportsCorrectlyOnDiversePortfolio stamp: 'HG 11/16/2020 14:59:25'!
PASSED!

!testRun: #AccountSummaryTest #test14ReceptiveAccountCantReportADetailedTreeSummary stamp: 'HG 11/16/2020 14:59:25'!
PASSED!

----SNAPSHOT----(16 November 2020 17:13:05) CuisUniversity-4137.image priorSource: 18055131!