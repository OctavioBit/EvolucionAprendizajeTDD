----End fileIn of /home/kali/exactas/ing1/ejercicios-isw1/20-TusLibros/Iteracion3/20-TusLibros.pck.st----!

!classRemoval: #MerchantProcessorSimulator stamp: 'CJ 11/28/2020 13:42:07'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'blockToRunOnDebitFrom requestsMade'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #MerchantProcessor stamp: 'CJ 11/28/2020 13:42:07'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #CreditCard stamp: 'CJ 11/28/2020 13:42:07'!
Object subclass: #CreditCard
	instanceVariableNames: 'number ownerName validUntil'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #Cashier stamp: 'CJ 11/28/2020 13:42:08'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor salesMade'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #Cart stamp: 'CJ 11/28/2020 13:42:08'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #CreditCardTest stamp: 'CJ 11/28/2020 13:42:09'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #CashierTest stamp: 'CJ 11/28/2020 13:42:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #CartTest stamp: 'CJ 11/28/2020 13:42:10'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

----End fileIn of /home/kali/exactas/ing1/ejercicios-isw1/20-TusLibros/Iteracion3/20-TusLibros.pck.st----!
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/28/2020 13:46:11' prior: 50963557!
test01NewCartsAreCreatedEmpty

	| interface cartId |

	interface := InternalRestInterface new.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self assert: (interface listCart: cartId) isEmpty! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/28/2020 13:46:15' prior: 50963857!
test01NewCartsAreCreatedEmpty

	| interface cartId |

	interface := InternalRestInterface new.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self assert: (interface listCart: cartId) isEmpty.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/28/2020 13:50:12' prior: 50963869!
test01NewCartsAreCreatedEmpty

	| interface cartId |

	interface := InternalRestInterface withAuthenticator: self defaultAuthenticator.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self assert: (interface listCart: cartId) isEmpty.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 13:50:18'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 11/28/2020 13:50:40'!
defaultAuthenticator
	self shouldBeImplemented.! !

!classDefinition: #AuthenticatorSimulator category: '20-TusLibros' stamp: 'CJ 11/28/2020 13:51:17'!
Object subclass: #AuthenticatorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 11/28/2020 13:51:08' prior: 50963896!
defaultAuthenticator
	
	AuthenticatorSimulator withAction: [].! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 13:51:19'!
ERROR!
!AuthenticatorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/28/2020 13:51:25'!
withAction: aBlockClosure 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithAction: aBlockClosure ! !
!AuthenticatorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/28/2020 13:52:00' prior: 50963918!
withAction: aBlockToRunOnUserLogin 
	
	^ self new initializeWithAction: aBlockToRunOnUserLogin! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 13:52:03'!
ERROR!

!classDefinition: #AuthenticatorSimulator category: '20-TusLibros' stamp: 'CJ 11/28/2020 13:52:15'!
Object subclass: #AuthenticatorSimulator
	instanceVariableNames: 'blockToRunOnUserLogin'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!AuthenticatorSimulator methodsFor: 'initialization' stamp: 'CJ 11/28/2020 13:52:15'!
initializeWithAction: aBlockToRunOnUserLogin 
	self shouldBeImplemented.
	blockToRunOnUserLogin := aBlockToRunOnUserLogin.! !
!AuthenticatorSimulator methodsFor: 'initialization' stamp: 'CJ 11/28/2020 13:52:18' prior: 50963945!
initializeWithAction: aBlockToRunOnUserLogin 
	
	blockToRunOnUserLogin := aBlockToRunOnUserLogin.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 13:52:25'!
ERROR!
!InternalRestInterface class methodsFor: 'instance creation' stamp: 'CJ 11/28/2020 13:52:33'!
withAuthenticator: anInternalRestInterfaceTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithAuthenticator: anInternalRestInterfaceTest ! !
!InternalRestInterface class methodsFor: 'instance creation' stamp: 'CJ 11/28/2020 13:52:39' prior: 50963963!
withAuthenticator: anInternalRestInterfaceTest 
	
	^ self new initializeWithAuthenticator: anInternalRestInterfaceTest ! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 13:52:43'!
ERROR!

!classDefinition: #InternalRestInterface category: '20-TusLibros' stamp: 'CJ 11/28/2020 13:52:53'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'internalRestInterfaceTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterface methodsFor: 'initialization' stamp: 'CJ 11/28/2020 13:52:53'!
initializeWithAuthenticator: anInternalRestInterfaceTest 
	self shouldBeImplemented.
	internalRestInterfaceTest := anInternalRestInterfaceTest.! !

!classDefinition: #InternalRestInterface category: '20-TusLibros' stamp: 'CJ 11/28/2020 13:53:22'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'internalRestInterfaceTest authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterface methodsFor: 'initialization' stamp: 'CJ 11/28/2020 13:53:19' prior: 50963993!
initializeWithAuthenticator: anAuthenticator 
	
	authenticator := anAuthenticator.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 13:53:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 13:53:24'!
PASSED!

Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #InternalRestInterface category: '20-TusLibros' stamp: 'CJ 11/28/2020 13:54:12'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 13:54:14'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 13:54:21'!
test02

	| interface cartId |

	interface := InternalRestInterface withAuthenticator: self defaultAuthenticator.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self assert: (interface listCart: cartId) isEmpty.! !

!classDefinition: #Authenticator category: '20-TusLibros' stamp: 'CJ 11/28/2020 13:58:08'!
Object subclass: #Authenticator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 13:58:00' prior: 50964039!
test02

	| interface cartId |

	interface := InternalRestInterface withAuthenticator: self wrongCredentialsAuthenticator.
	
	self
		should: [ cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'. ]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorMessage.
	
	self
		should: [ interface listCart: cartId. ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
	 ! !

!testRun: #InternalRestInterfaceTest #test02 stamp: 'CJ 11/28/2020 13:58:17'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 11/28/2020 13:58:27'!
wrongCredentialsAuthenticator
	self shouldBeImplemented.! !
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 11/28/2020 13:59:01' prior: 50964078!
wrongCredentialsAuthenticator
	
	^ AuthenticatorSimulator withAction: [ self error: Authenticator wrongCredentialsErrorMessage. ].! !
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 11/28/2020 13:59:11' prior: 50963909!
defaultAuthenticator
	
	^ AuthenticatorSimulator withAction: [].! !

!testRun: #InternalRestInterfaceTest #test02 stamp: 'CJ 11/28/2020 13:59:16'!
ERROR!
!Authenticator class methodsFor: 'error descriptions' stamp: 'CJ 11/28/2020 13:59:27'!
wrongCredentialsErrorMessage
	self shouldBeImplemented.! !
!Authenticator class methodsFor: 'error descriptions' stamp: 'CJ 11/28/2020 13:59:41' prior: 50964099!
wrongCredentialsErrorMessage
	
	^ 'Invalid username or password'! !

!testRun: #InternalRestInterfaceTest #test02 stamp: 'CJ 11/28/2020 13:59:44'!
FAILURE!
!Authenticator class methodsFor: 'error descriptions' stamp: 'CJ 11/28/2020 14:00:30'!
wrongCredentialsErrorDescription
	
	^ 'Invalid username or password'! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/28/2020 14:00:30' prior: 50964083!
wrongCredentialsAuthenticator
	
	^ AuthenticatorSimulator withAction: [ self error: Authenticator wrongCredentialsErrorDescription. ].! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/28/2020 14:00:30' prior: 50964058!
test02

	| interface cartId |

	interface := InternalRestInterface withAuthenticator: self wrongCredentialsAuthenticator.
	
	self
		should: [ cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'. ]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.
	
	self
		should: [ interface listCart: cartId. ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
	 ! !

!methodRemoval: Authenticator class #wrongCredentialsErrorMessage stamp: 'CJ 11/28/2020 14:00:30'!
wrongCredentialsErrorMessage
	
	^ 'Invalid username or password'!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 14:01:45' prior: 50963766!
createCartForClient: aClientId withPassword: aPassword

	authenticator authenticateUser: aClientId withPassword: aPassword.! !

!testRun: #InternalRestInterfaceTest #test02 stamp: 'CJ 11/28/2020 14:02:04'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:02:18' prior: 50964127!
test02

	| interface cartId |

	interface := InternalRestInterface withAuthenticator: self wrongCredentialsAuthenticator.
	
	self
		should: [ cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'. ]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.
	
	self
		should: [ interface listCart: cartId. ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
	 ! !

!testRun: #InternalRestInterfaceTest #test02 stamp: 'CJ 11/28/2020 14:02:20'!
FAILURE!
!AuthenticatorSimulator methodsFor: 'as yet unclassified' stamp: 'CJ 11/28/2020 14:02:40'!
authenticateUser: aString withPassword: aString2 
	self shouldBeImplemented.! !
!AuthenticatorSimulator methodsFor: 'as yet unclassified' stamp: 'CJ 11/28/2020 14:03:17' prior: 50964180!
authenticateUser: aUsername withPassword: aPassword
	
	^ blockToRunOnUserLogin value.! !

!testRun: #InternalRestInterfaceTest #test02 stamp: 'CJ 11/28/2020 14:03:19'!
ERROR!
!InternalRestInterface class methodsFor: 'error descriptions' stamp: 'CJ 11/28/2020 14:03:39'!
cartDoesntExistErrorDescription
	self shouldBeImplemented.! !
!InternalRestInterface class methodsFor: 'error descriptions' stamp: 'CJ 11/28/2020 14:04:06' prior: 50964195!
cartDoesntExistErrorDescription
	
	^ 'The provided ID doesn''t belong to any existing cart'! !

!testRun: #InternalRestInterfaceTest #test02 stamp: 'CJ 11/28/2020 14:04:09'!
FAILURE!

!classDefinition: #InternalRestInterface category: '20-TusLibros' stamp: 'CJ 11/28/2020 14:05:46'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 14:05:43' prior: 50963771!
listCart: aCartId 

	^ carts at: aCartId ifAbsent: [ self error: self class cartDoesntExistErrorDescription ].! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:06:10'!
ERROR!

!testRun: #InternalRestInterfaceTest #test02 stamp: 'CJ 11/28/2020 14:06:10'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:06:12'!
ERROR!
!InternalRestInterface methodsFor: 'initialization' stamp: 'CJ 11/28/2020 14:06:44' overrides: 16896425!
initialize

	carts := Dictionary new.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:06:47'!
ERROR!

!testRun: #InternalRestInterfaceTest #test02 stamp: 'CJ 11/28/2020 14:06:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:06:47'!
ERROR!

!classDefinition: #InternalRestInterface category: '20-TusLibros' stamp: 'CJ 11/28/2020 14:10:35'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 14:10:26' prior: 50964150!
createCartForClient: aClientId withPassword: aPassword

	
	
	authenticator authenticateUser: aClientId withPassword: aPassword.
	
	carts at: self nextID put: (Cart acceptingItemsOf: catalog).! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 14:10:48' prior: 50964257!
createCartForClient: aClientId withPassword: aPassword

	authenticator authenticateUser: aClientId withPassword: aPassword.
	
	carts at: self nextID put: (Cart acceptingItemsOf: catalog).! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:10:55'!
ERROR!
!InternalRestInterface methodsFor: 'private' stamp: 'CJ 11/28/2020 14:11:09'!
nextID
	self shouldBeImplemented.! !

!classDefinition: #InternalRestInterface category: '20-TusLibros' stamp: 'CJ 11/28/2020 14:11:44'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts catalog currentID'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterface methodsFor: 'private' stamp: 'CJ 11/28/2020 14:11:42' prior: 50964278!
nextID
	
	currentID := currentID + 1.
	^ currentID.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:11:55'!
ERROR!

!classDefinition: #InternalRestInterface category: '20-TusLibros' stamp: 'CJ 11/28/2020 14:12:07'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts catalog currentCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'CJ 11/28/2020 14:12:07' prior: 50964291!
nextID
	
	currentCartID := currentCartID + 1.
	^ currentCartID.! !
!InternalRestInterface methodsFor: 'initialization' stamp: 'CJ 11/28/2020 14:12:20' prior: 50964235 overrides: 16896425!
initialize

	carts := Dictionary new.
	currentCartID := 0.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:12:22'!
ERROR!

!testRun: #InternalRestInterfaceTest #test02 stamp: 'CJ 11/28/2020 14:12:22'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:12:22'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:13:08' prior: 50963881!
test01NewCartsAreCreatedEmpty

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: self defaultAuthenticator
		andCatalog: self defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self assert: (interface listCart: cartId) isEmpty.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:13:16'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 11/28/2020 14:13:27'!
defaultCatalog
	self shouldBeImplemented.! !
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 11/28/2020 14:13:54' prior: 50964346!
defaultCatalog
	
	| priceList |

	priceList := Dictionary new.
	priceList
		add: 'item1'->50;
		add: 'item2'->75.

	^ priceList! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:13:58'!
ERROR!
!InternalRestInterface class methodsFor: 'instance creation' stamp: 'CJ 11/28/2020 14:14:09'!
withAuthenticator: anAuthenticatorSimulator andCatalog: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithAuthenticator: anAuthenticatorSimulator andCatalog: aDictionary ! !
!InternalRestInterface class methodsFor: 'instance creation' stamp: 'CJ 11/28/2020 14:14:14' prior: 50964362!
withAuthenticator: anAuthenticatorSimulator andCatalog: aDictionary 
	
	^ self new initializeWithAuthenticator: anAuthenticatorSimulator andCatalog: aDictionary ! !
!InternalRestInterface class methodsFor: 'instance creation' stamp: 'CJ 11/28/2020 14:14:27' prior: 50964374!
withAuthenticator: anAuthenticatorSimulator andCatalog: aCatalog 
	
	^ self new initializeWithAuthenticator: anAuthenticatorSimulator andCatalog: aCatalog ! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:14:34'!
ERROR!

!classDefinition: #InternalRestInterface category: '20-TusLibros' stamp: 'CJ 11/28/2020 14:14:41'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts catalog currentCartID authenticatorSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterface methodsFor: 'initialization' stamp: 'CJ 11/28/2020 14:14:41'!
initializeWithAuthenticator: anAuthenticatorSimulator andCatalog: aCatalog 
	self shouldBeImplemented.
	authenticatorSimulator := anAuthenticatorSimulator.
	catalog := aCatalog.! !
!InternalRestInterface methodsFor: 'initialization' stamp: 'CJ 11/28/2020 14:14:45' prior: 50964404!
initializeWithAuthenticator: anAuthenticatorSimulator andCatalog: aCatalog 
	
	authenticatorSimulator := anAuthenticatorSimulator.
	catalog := aCatalog.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:14:47'!
ERROR!
!InternalRestInterface methodsFor: 'initialization' stamp: 'CJ 11/28/2020 14:16:01' prior: 50964413!
initializeWithAuthenticator: anAuthenticatorSimulator andCatalog: aCatalog 
	
	authenticator := anAuthenticatorSimulator.
	catalog := aCatalog.! !
!InternalRestInterface methodsFor: 'initialization' stamp: 'CJ 11/28/2020 14:16:09' prior: 50964425!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog 
	
	authenticator := anAuthenticator.
	catalog := aCatalog.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:16:11'!
ERROR!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 14:18:29' prior: 50964266!
createCartForClient: aClientId withPassword: aPassword

	| newCartID |

	authenticator authenticateUser: aClientId withPassword: aPassword.
	
	newCartID := self nextID.	
	carts at: newCartID put: (Cart acceptingItemsOf: catalog).! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 14:18:35' prior: 50964444!
createCartForClient: aClientId withPassword: aPassword

	| newCartID |

	authenticator authenticateUser: aClientId withPassword: aPassword.
	
	newCartID := self nextID.	
	carts at: newCartID put: (Cart acceptingItemsOf: catalog).
	
	^ newCartID.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:18:40'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02 stamp: 'CJ 11/28/2020 14:18:40'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:19:07'!
test02CreateCartAuthenticatesUser

	| interface cartId |

	interface := InternalRestInterface withAuthenticator: self wrongCredentialsAuthenticator.
	
	self
		should: [ cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'. ]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.
	
	self
		should: [ interface listCart: cartId. ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
	 ! !

!methodRemoval: InternalRestInterfaceTest #test02 stamp: 'CJ 11/28/2020 14:19:07'!
test02

	| interface cartId |

	interface := InternalRestInterface withAuthenticator: self wrongCredentialsAuthenticator.
	
	self
		should: [ cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'. ]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.
	
	self
		should: [ interface listCart: cartId. ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
	 !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:19:52' prior: 50964472!
test02CreateCartAuthenticatesUser

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: self wrongCredentialsAuthenticator
		andCatalog: self defaultCatalog.
	
	self
		should: [ cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'. ]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.
	
	self
		should: [ interface listCart: cartId. ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
	 ! !

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 14:19:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:19:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 14:19:53'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:20:03'!
test03

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: self defaultAuthenticator
		andCatalog: self defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self assert: (interface listCart: cartId) isEmpty.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:21:32' prior: 50964538!
test03

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: self defaultAuthenticator
		andCatalog: self defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self should: [] raise: Error withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:23:01' prior: 50964551!
test03

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: self defaultAuthenticator
		andCatalog: self defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: self invalidCartID product: self defaultProduct withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test03 stamp: 'CJ 11/28/2020 14:23:23'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 11/28/2020 14:23:42'!
invalidCartID
	self shouldBeImplemented.! !
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 11/28/2020 14:24:31' prior: 50964584!
invalidCartID
	
	^ -1! !

!testRun: #InternalRestInterfaceTest #test03 stamp: 'CJ 11/28/2020 14:24:33'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 11/28/2020 14:24:50'!
defaultProduct
	self shouldBeImplemented.! !
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 11/28/2020 14:24:55' prior: 50964596!
defaultProduct
	
	^ 'validBook'! !

!testRun: #InternalRestInterfaceTest #test03 stamp: 'CJ 11/28/2020 14:24:56'!
FAILURE!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 14:25:14'!
addToCart: aSmallInteger product: aString withCopies: aSmallInteger3 
	self shouldBeImplemented.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 14:25:54' prior: 50964608!
addToCart: aCartID product: productToAdd withCopies: copiesOfProductToAdd
	self shouldBeImplemented.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 14:26:09' prior: 50964614!
addToCart: aCartID product: productToAdd withCopies: copiesOfProductToAdd
	
	self error: self class cartDoesntExistErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test03 stamp: 'CJ 11/28/2020 14:26:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:26:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 14:26:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03 stamp: 'CJ 11/28/2020 14:26:11'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:26:48'!
test03CannotAddToCartWithInvalidID

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: self defaultAuthenticator
		andCatalog: self defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: self invalidCartID product: self defaultProduct withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !

!methodRemoval: InternalRestInterfaceTest #test03 stamp: 'CJ 11/28/2020 14:26:48'!
test03

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: self defaultAuthenticator
		andCatalog: self defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: self invalidCartID product: self defaultProduct withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 11/28/2020 14:27:20'!
productSoldByStore
	
	^ 'validBook'! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 11/28/2020 14:27:20' prior: 50964641!
test03CannotAddToCartWithInvalidID

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: self defaultAuthenticator
		andCatalog: self defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: self invalidCartID product: self productSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !

!methodRemoval: InternalRestInterfaceTest #defaultProduct stamp: 'CJ 11/28/2020 14:27:20'!
defaultProduct
	
	^ 'validBook'!

Object subclass: #TestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #TestObjectFactory category: '20-TusLibros' stamp: 'CJ 11/28/2020 14:29:10'!
Object subclass: #TestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!TestObjectFactory methodsFor: 'nil' stamp: 'CJ 11/28/2020 14:30:46'!
itemSoldByStore
	
	^ 'validBook'! !
!TestObjectFactory methodsFor: 'nil' stamp: 'CJ 11/28/2020 14:31:16'!
cartWithManyItems

	| catalog cart |

	catalog := self defaultCatalog.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: catalog keys first.
	cart add: 1 of: catalog keys second.

	^ cart.! !
!TestObjectFactory methodsFor: 'nil' stamp: 'CJ 11/28/2020 14:31:47'!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog
		add: self itemSoldByStore -> self itemSoldByStorePrice;
		add: self anotherItemSoldByStore -> self anotherItemSoldByStorePrice.
	
	^ catalog.! !

!classRemoval: #TestObjectFactory stamp: 'CJ 11/28/2020 14:32:25'!
Object subclass: #TestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

TestCase subclass: #TestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #TestObjectFactory category: '20-TusLibros' stamp: 'CJ 11/28/2020 14:32:41'!
TestCase subclass: #TestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

TestObjectFactory class
	instanceVariableNames: ''!

!classDefinition: 'TestObjectFactory class' category: '20-TusLibros' stamp: 'CJ 11/28/2020 14:32:41'!
TestObjectFactory class
	instanceVariableNames: ''!
!TestObjectFactory methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:32:41'!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!TestObjectFactory methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:32:41'!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSoldByStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!TestObjectFactory methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:32:41'!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSoldByStore.
	self deny: cart isEmpty ! !
!TestObjectFactory methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:32:41'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSoldByStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!TestObjectFactory methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:32:41'!
test05CanNotAddMoreThanOneItemNotSoldByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSoldByStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!TestObjectFactory methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:32:41'!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSoldByStore.
	self assert: (cart includes: self itemSoldByStore)! !
!TestObjectFactory methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:32:41'!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSoldByStore)! !
!TestObjectFactory methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:32:41'!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByStore.
	self assert: (cart occurrencesOf: self itemSoldByStore) = 2! !
!TestObjectFactory methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:32:41'!
test09CartCalculatesCostOfSingleItemCorrectly

	| cart |
	
	cart := self createCart.
	
	cart add: 1 of: self itemSoldByStore.
	self assert: (cart totalItemCost) = self itemSoldByStorePrice ! !
!TestObjectFactory methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:32:41'!
test10CartCalculatesCostOfManyItemsCorrectly

	| cart expectedTotal |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByStore.
	cart add: 3 of: self anotherItemSoldByStore.
	
	expectedTotal := (self itemSoldByStorePrice * 2) + (self anotherItemSoldByStorePrice * 3).

	self assert: cart totalItemCost = expectedTotal.! !
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/28/2020 14:32:41'!
anotherItemSoldByStore
	
	^ 'anotherValidBook'! !
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/28/2020 14:32:41'!
anotherItemSoldByStorePrice
	
	^ 15! !
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/28/2020 14:32:41'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/28/2020 14:32:41'!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog
		add: self itemSoldByStore -> self itemSoldByStorePrice;
		add: self anotherItemSoldByStore -> self anotherItemSoldByStorePrice.
	
	^ catalog.! !
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/28/2020 14:32:41'!
itemNotSoldByStore
	
	^'invalidBook'! !
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/28/2020 14:32:41'!
itemSoldByStore
	
	^ 'validBook'! !
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/28/2020 14:32:41'!
itemSoldByStorePrice
	
	^ 10! !

!methodRemoval: TestObjectFactory #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:32:47'!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty!

!methodRemoval: TestObjectFactory #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/28/2020 14:32:47'!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSoldByStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]!

!methodRemoval: TestObjectFactory #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/28/2020 14:32:47'!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSoldByStore.
	self deny: cart isEmpty !

!methodRemoval: TestObjectFactory #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/28/2020 14:32:47'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSoldByStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]!

!methodRemoval: TestObjectFactory #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 11/28/2020 14:32:47'!
test05CanNotAddMoreThanOneItemNotSoldByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSoldByStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]!

!methodRemoval: TestObjectFactory #test06CartRemembersAddedItems stamp: 'CJ 11/28/2020 14:32:47'!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSoldByStore.
	self assert: (cart includes: self itemSoldByStore)!

!methodRemoval: TestObjectFactory #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 11/28/2020 14:32:47'!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSoldByStore)!

!methodRemoval: TestObjectFactory #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 11/28/2020 14:32:47'!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByStore.
	self assert: (cart occurrencesOf: self itemSoldByStore) = 2!

!methodRemoval: TestObjectFactory #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 11/28/2020 14:32:47'!
test09CartCalculatesCostOfSingleItemCorrectly

	| cart |
	
	cart := self createCart.
	
	cart add: 1 of: self itemSoldByStore.
	self assert: (cart totalItemCost) = self itemSoldByStorePrice !

!methodRemoval: TestObjectFactory #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 11/28/2020 14:32:47'!
test10CartCalculatesCostOfManyItemsCorrectly

	| cart expectedTotal |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByStore.
	cart add: 3 of: self anotherItemSoldByStore.
	
	expectedTotal := (self itemSoldByStorePrice * 2) + (self anotherItemSoldByStorePrice * 3).

	self assert: cart totalItemCost = expectedTotal.!
!TestObjectFactory methodsFor: 'nil' stamp: 'CJ 11/28/2020 14:34:01'!
dateForNonExpired
	
	^ GregorianMonthOfYear year: GregorianYear current month: GregorianMonth current! !
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/28/2020 14:34:26'!
defaultName
	
	^ 'Norbert Degoas'! !
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/28/2020 14:35:17'!
defaultCreditCard
	
	^ CreditCard
		withNumber: '7511117511117511'
		ownedBy: 'Norbert Degoas'
		expiringOn: (self dateForNonExpired).! !
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/28/2020 14:35:23' prior: 50964864!
createCart
	
	^ Cart acceptingItemsOf: self defaultCatalog! !
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/28/2020 14:35:34' prior: 50964879!
itemNotSoldByStore
	
	^ 'invalidBook'! !

!classDefinition: #CartTest category: '20-TusLibros' stamp: 'CJ 11/28/2020 14:36:26'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!CartTest methodsFor: 'support' stamp: 'CJ 11/28/2020 14:36:24' overrides: 16927572!
setUp

	testObjectFactory := TestObjectFactory new.! !
!CartTest methodsFor: 'support' stamp: 'CJ 11/28/2020 14:36:47' prior: 50963201!
createCart
	
	^ Cart acceptingItemsOf: self defaultCatalog! !
!CartTest methodsFor: 'support' stamp: 'CJ 11/28/2020 14:37:00' prior: 50965032!
createCart
	
	^ Cart acceptingItemsOf: testObjectFactory defaultCatalog! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:37:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/28/2020 14:37:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/28/2020 14:37:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/28/2020 14:37:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 11/28/2020 14:37:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 11/28/2020 14:37:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 11/28/2020 14:37:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 11/28/2020 14:37:02'!
PASSED!

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 11/28/2020 14:37:02'!
PASSED!

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 11/28/2020 14:37:02'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:37:21' prior: 50963107!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: testObjectFactory itemNotSoldByStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/28/2020 14:37:27'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:37:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/28/2020 14:37:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/28/2020 14:37:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/28/2020 14:37:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 11/28/2020 14:37:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 11/28/2020 14:37:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 11/28/2020 14:37:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 11/28/2020 14:37:27'!
PASSED!

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 11/28/2020 14:37:27'!
PASSED!

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 11/28/2020 14:37:27'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:38:12' prior: 50964680!
test03CannotAddToCartWithInvalidID

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: self defaultAuthenticator
		andCatalog: self defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: self invalidCartID product: self productSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !

!classDefinition: #InternalRestInterfaceTest category: '20-TusLibros' stamp: 'CJ 11/28/2020 14:38:32'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 11/28/2020 14:38:28' overrides: 16927572!
setUp

	testObjectFactory := TestObjectFactory new.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:38:51' prior: 50965124!
test03CannotAddToCartWithInvalidID

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: self defaultAuthenticator
		andCatalog: self defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: self invalidCartID product: testObjectFactory productSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 14:38:54'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 14:39:28'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:40:18' prior: 50965156!
test03CannotAddToCartWithInvalidID

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: self defaultAuthenticator
		andCatalog: self defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: self invalidCartID product: testObjectFactory itemSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 14:40:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:40:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 14:40:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 14:40:25'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:40:50' prior: 50964330!
test01NewCartsAreCreatedEmpty

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: self defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self assert: (interface listCart: cartId) isEmpty.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:40:55'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:40:55'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 14:40:55'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 14:40:55'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:41:10' prior: 50964508!
test02CreateCartAuthenticatesUser

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: self wrongCredentialsAuthenticator
		andCatalog: testObjectFactory defaultCatalog.
	
	self
		should: [ cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'. ]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.
	
	self
		should: [ interface listCart: cartId. ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
	 ! !

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 14:41:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:41:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 14:41:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 14:41:11'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:41:19' prior: 50965215!
test01NewCartsAreCreatedEmpty

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self assert: (interface listCart: cartId) isEmpty.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:41:27' prior: 50965243!
test02CreateCartAuthenticatesUser

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andCatalog: testObjectFactory defaultCatalog.
	
	self
		should: [ cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'. ]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.
	
	self
		should: [ interface listCart: cartId. ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
	 ! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:41:37' prior: 50965182!
test03CannotAddToCartWithInvalidID

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: self invalidCartID product: testObjectFactory itemSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 14:41:43'!
ERROR!
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/28/2020 14:41:53'!
defaultAuthenticator
	self shouldBeImplemented.! !
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/28/2020 14:42:06' prior: 50965334!
defaultAuthenticator
	
	^ AuthenticatorSimulator withAction: [].! !

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 14:42:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:42:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 14:42:08'!
ERROR!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 14:42:08'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 14:42:08'!
ERROR!
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/28/2020 14:42:18'!
wrongCredentialsAuthenticator
	self shouldBeImplemented.! !
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/28/2020 14:42:28' prior: 50965362!
wrongCredentialsAuthenticator
	
	^ AuthenticatorSimulator withAction: [ self error: Authenticator wrongCredentialsErrorDescription. ].! !

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 14:42:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:42:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 14:42:33'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 14:42:33'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:43:04'!
test04

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: self invalidCartID product: testObjectFactory itemSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:43:25' prior: 50965388!
test04

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: cartId product: testObjectFactory itemNotSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:44:56' prior: 50965406!
test04

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: cartId product: testObjectFactory itemNotSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface invalidItemErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test04 stamp: 'CJ 11/28/2020 14:45:16'!
ERROR!
!InternalRestInterface class methodsFor: 'error descriptions' stamp: 'CJ 11/28/2020 14:45:28'!
invalidItemErrorDescription
	self shouldBeImplemented.! !
!InternalRestInterface class methodsFor: 'error descriptions' stamp: 'CJ 11/28/2020 14:45:36' prior: 50965445!
invalidItemErrorDescription
	
	^ 'Invalid item'! !

!testRun: #InternalRestInterfaceTest #test04 stamp: 'CJ 11/28/2020 14:45:38'!
FAILURE!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 14:47:05' prior: 50964621!
addToCart: aCartID product: productToAdd withCopies: copiesOfProductToAdd
	
	| cart |
	
	cart := carts at: aCartID ifAbsent: [ self error: self class cartDoesntExistErrorDescription. ].! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:47:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 14:47:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 14:47:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04 stamp: 'CJ 11/28/2020 14:47:17'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test04 stamp: 'CJ 11/28/2020 14:47:17'!
FAILURE!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 14:47:40' prior: 50965459!
addToCart: aCartID product: productToAdd withCopies: copiesOfProductToAdd
	
	| cart |
	
	cart := carts at: aCartID ifAbsent: [ self error: self class cartDoesntExistErrorDescription. ].
	self error: self class invalidItemErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test04 stamp: 'CJ 11/28/2020 14:47:46'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:47:46'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 14:47:46'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 14:47:46'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04 stamp: 'CJ 11/28/2020 14:47:46'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:48:33'!
test04CannotAddItemNotSoldByStore

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: cartId product: testObjectFactory itemNotSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface invalidItemErrorDescription.! !

!methodRemoval: InternalRestInterfaceTest #test04 stamp: 'CJ 11/28/2020 14:48:33'!
test04

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: cartId product: testObjectFactory itemNotSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface invalidItemErrorDescription.!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:48:42'!
test05

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: cartId product: testObjectFactory itemNotSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface invalidItemErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:49:08' prior: 50965546!
test05

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 0 ]
		raise: Error
		withMessageText: InternalRestInterface invalidItemQuantityErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test05 stamp: 'CJ 11/28/2020 14:49:20'!
ERROR!
!InternalRestInterface class methodsFor: 'error descriptions' stamp: 'CJ 11/28/2020 14:49:49'!
invalidItemQuantityErrorDescription
	self shouldBeImplemented.! !
!InternalRestInterface class methodsFor: 'error descriptions' stamp: 'CJ 11/28/2020 14:50:01' prior: 50965585!
invalidItemQuantityErrorDescription
	
	^ 'Invalid item quantity'! !

!testRun: #InternalRestInterfaceTest #test05 stamp: 'CJ 11/28/2020 14:50:03'!
FAILURE!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 14:51:13' prior: 50965484!
addToCart: aCartID product: productToAdd withCopies: copiesOfProductToAdd
	
	| cart |
	
	cart := carts at: aCartID ifAbsent: [ self error: self class cartDoesntExistErrorDescription. ].
	cart add: copiesOfProductToAdd of: productToAdd.
	self error: self class invalidItemErrorDescription.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 14:51:23' prior: 50965599!
addToCart: aCartID product: productToAdd withCopies: copiesOfProductToAdd
	
	| cart |
	
	cart := carts at: aCartID ifAbsent: [ self error: self class cartDoesntExistErrorDescription. ].
	cart add: copiesOfProductToAdd of: productToAdd.
	"self error: self class invalidItemErrorDescription."! !

!testRun: #InternalRestInterfaceTest #test05 stamp: 'CJ 11/28/2020 14:51:26'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:53:05' prior: 50965312!
test03CannotAddToCartWithInvalidID

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: self invalidCartID product: testObjectFactory itemSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:53:22' prior: 50965511!
test04CannotAddItemNotSoldByStore

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: cartId product: testObjectFactory itemNotSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: Cart invalidItemErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test04CannotAddItemNotSoldByStore stamp: 'CJ 11/28/2020 14:53:23'!
ERROR!
!Cart class methodsFor: 'error messages' stamp: 'CJ 11/28/2020 14:54:05'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !

!methodRemoval: Cart #invalidItemErrorMessage stamp: 'CJ 11/28/2020 14:54:05'!
invalidItemErrorMessage
	
	^'Item is not in catalog'!
!Cart class methodsFor: 'error messages' stamp: 'CJ 11/28/2020 14:54:21'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !

!methodRemoval: Cart #invalidQuantityErrorMessage stamp: 'CJ 11/28/2020 14:54:21'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:54:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/28/2020 14:54:40'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/28/2020 14:54:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/28/2020 14:54:40'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 11/28/2020 14:54:40'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 11/28/2020 14:54:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 11/28/2020 14:54:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 11/28/2020 14:54:40'!
PASSED!

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 11/28/2020 14:54:40'!
PASSED!

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 11/28/2020 14:54:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/28/2020 14:54:42'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'CJ 11/28/2020 14:55:01' prior: 50963577!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self class invalidItemErrorMessage ]! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/28/2020 14:55:02'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:55:27' prior: 50965075!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: testObjectFactory itemNotSoldByStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/28/2020 14:55:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/28/2020 14:55:30'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'CJ 11/28/2020 14:55:41' prior: 50963583!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self class invalidQuantityErrorMessage ]! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/28/2020 14:55:43'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:55:55' prior: 50963126!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSoldByStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/28/2020 14:55:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 11/28/2020 14:55:57'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:56:07' prior: 50963138!
test05CanNotAddMoreThanOneItemNotSoldByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSoldByStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 11/28/2020 14:56:09'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:56:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 11/28/2020 14:56:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 11/28/2020 14:56:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 11/28/2020 14:56:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 11/28/2020 14:56:11'!
PASSED!

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 11/28/2020 14:56:11'!
PASSED!

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 11/28/2020 14:56:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 11/28/2020 14:56:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 11/28/2020 14:56:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 11/28/2020 14:56:11'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:56:34' prior: 50965564!
test05

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 0 ]
		raise: Error
		withMessageText: Cart invalidQuantityErrorMessage.! !

!testRun: #InternalRestInterfaceTest #test05 stamp: 'CJ 11/28/2020 14:56:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:56:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 14:56:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 14:56:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAddItemNotSoldByStore stamp: 'CJ 11/28/2020 14:56:36'!
ERROR!

!testRun: #InternalRestInterfaceTest #test05 stamp: 'CJ 11/28/2020 14:56:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAddItemNotSoldByStore stamp: 'CJ 11/28/2020 14:56:36'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:56:52' prior: 50965645!
test04CannotAddItemNotSoldByStore

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: cartId product: testObjectFactory itemNotSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: Cart invalidItemErrorMessage.! !

!testRun: #InternalRestInterfaceTest #test04CannotAddItemNotSoldByStore stamp: 'CJ 11/28/2020 14:56:53'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05 stamp: 'CJ 11/28/2020 14:56:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 14:56:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 14:56:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 14:56:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAddItemNotSoldByStore stamp: 'CJ 11/28/2020 14:56:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05 stamp: 'CJ 11/28/2020 14:56:56'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 14:57:10'!
test05CannotAddInvalidItemQuantity

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 0 ]
		raise: Error
		withMessageText: Cart invalidQuantityErrorMessage.! !

!methodRemoval: InternalRestInterfaceTest #test05 stamp: 'CJ 11/28/2020 14:57:10'!
test05

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 0 ]
		raise: Error
		withMessageText: Cart invalidQuantityErrorMessage.!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 15:00:12'!
test06

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 0 ]
		raise: Error
		withMessageText: Cart invalidQuantityErrorMessage.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 15:00:51' prior: 50965943!
test06

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 1.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 15:02:00' prior: 50964218!
listCart: aCartId 

	^ carts at: aCartId copy ifAbsent: [ self error: self class cartDoesntExistErrorDescription ].! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 15:02:14' prior: 50965960!
test06

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 1.
	
	self assert: (interface listCart: cartId) ! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 15:03:39' prior: 50965974!
listCart: aCartId 

	^ carts at: aCartId items copy ifAbsent: [ self error: self class cartDoesntExistErrorDescription ].! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 15:04:55' prior: 50965997!
listCart: aCartId 

	^ carts at: aCartId items ifAbsent: [ self error: self class cartDoesntExistErrorDescription ].! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 15:06:36' prior: 50966004!
listCart: aCartId 
	
	| items |
	items := carts at: aCartId items ifAbsent: [ self error: self class cartDoesntExistErrorDescription ].
	^ Bag newFrom: items.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 15:07:01' prior: 50966011!
listCart: aCartId 
	
	| items |
	items := carts at: aCartId items ifAbsent: [ self error: self class cartDoesntExistErrorDescription ].
	^ Bag new: items.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 15:08:34' prior: 50966019!
listCart: aCartId 
	
	| items |
	items := carts at: aCartId items ifAbsent: [ self error: self class cartDoesntExistErrorDescription ].
	^ Bag newFrom: items.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 15:08:41'!
ERROR!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 15:08:41'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 15:08:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAddItemNotSoldByStore stamp: 'CJ 11/28/2020 15:08:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotAddInvalidItemQuantity stamp: 'CJ 11/28/2020 15:08:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06 stamp: 'CJ 11/28/2020 15:08:41'!
ERROR!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 15:08:44'!
ERROR!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/28/2020 15:09:49' prior: 50966027!
listCart: aCartId 
	
	| cart |
	
	cart := carts at: aCartId ifAbsent: [ self error: self class cartDoesntExistErrorDescription ].
	^ Bag newFrom: cart items.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 15:09:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06 stamp: 'CJ 11/28/2020 15:09:52'!
ERROR!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 15:09:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06 stamp: 'CJ 11/28/2020 15:09:59'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 15:11:27' prior: 50965981!
test06

	| interface cartId item |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	self assert: 1 equals: ((interface listCart: cartId) occurrencesOf: item).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 15:12:02' prior: 50966080!
test06

	| interface cartId item |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	self assert: 1 equals: ((interface listCart: cartId) occurrencesOf: item).
	self assert: 1 equals: (interface listCart: cartId) size.! !

!testRun: #InternalRestInterfaceTest #test06 stamp: 'CJ 11/28/2020 15:12:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 15:12:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 15:12:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 15:12:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAddItemNotSoldByStore stamp: 'CJ 11/28/2020 15:12:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotAddInvalidItemQuantity stamp: 'CJ 11/28/2020 15:12:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06 stamp: 'CJ 11/28/2020 15:12:03'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 15:12:43'!
test06ValidItemIsAddedToCart

	| interface cartId item |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	self assert: 1 equals: ((interface listCart: cartId) occurrencesOf: item).
	self assert: 1 equals: (interface listCart: cartId) size.! !

!methodRemoval: InternalRestInterfaceTest #test06 stamp: 'CJ 11/28/2020 15:12:43'!
test06

	| interface cartId item |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	self assert: 1 equals: ((interface listCart: cartId) occurrencesOf: item).
	self assert: 1 equals: (interface listCart: cartId) size.!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 15:15:19'!
test07

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andCatalog: testObjectFactory defaultCatalog.
	
	self
		should: [ interface listCart: self invalidCartID ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
	 ! !

!testRun: #InternalRestInterfaceTest #test07 stamp: 'CJ 11/28/2020 15:15:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 15:15:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 15:15:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 15:15:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAddItemNotSoldByStore stamp: 'CJ 11/28/2020 15:15:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotAddInvalidItemQuantity stamp: 'CJ 11/28/2020 15:15:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06ValidItemIsAddedToCart stamp: 'CJ 11/28/2020 15:15:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07 stamp: 'CJ 11/28/2020 15:15:24'!
PASSED!

!methodRemoval: InternalRestInterfaceTest #test07 stamp: 'CJ 11/28/2020 15:16:21'!
test07

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andCatalog: testObjectFactory defaultCatalog.
	
	self
		should: [ interface listCart: self invalidCartID ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
	 !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 15:17:02' prior: 50965626!
test03CannotAddToCartWithInvalidID

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: self invalidCartID product: testObjectFactory itemSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
		
	self assert: (interface listCart: cartId) isEmpty.! !

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 15:17:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 15:17:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 15:17:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 15:17:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAddItemNotSoldByStore stamp: 'CJ 11/28/2020 15:17:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotAddInvalidItemQuantity stamp: 'CJ 11/28/2020 15:17:06'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06ValidItemIsAddedToCart stamp: 'CJ 11/28/2020 15:17:06'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 15:17:12' prior: 50965868!
test04CannotAddItemNotSoldByStore

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: cartId product: testObjectFactory itemNotSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: Cart invalidItemErrorMessage.
		
	self assert: (interface listCart: cartId) isEmpty.! !

!testRun: #InternalRestInterfaceTest #test04CannotAddItemNotSoldByStore stamp: 'CJ 11/28/2020 15:17:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 15:17:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 15:17:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 15:17:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAddItemNotSoldByStore stamp: 'CJ 11/28/2020 15:17:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotAddInvalidItemQuantity stamp: 'CJ 11/28/2020 15:17:14'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06ValidItemIsAddedToCart stamp: 'CJ 11/28/2020 15:17:14'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/28/2020 15:17:20' prior: 50965909!
test05CannotAddInvalidItemQuantity

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 0 ]
		raise: Error
		withMessageText: Cart invalidQuantityErrorMessage.
		
	self assert: (interface listCart: cartId) isEmpty.! !

!testRun: #InternalRestInterfaceTest #test05CannotAddInvalidItemQuantity stamp: 'CJ 11/28/2020 15:17:22'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/28/2020 15:17:22'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/28/2020 15:17:22'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/28/2020 15:17:22'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAddItemNotSoldByStore stamp: 'CJ 11/28/2020 15:17:22'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotAddInvalidItemQuantity stamp: 'CJ 11/28/2020 15:17:22'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06ValidItemIsAddedToCart stamp: 'CJ 11/28/2020 15:17:22'!
PASSED!

----SNAPSHOT----(28 November 2020 15:20:40) CuisUniversity-4384.image priorSource: 20168146!

!classRemoval: #MerchantProcessorSimulator stamp: 'CJ 11/30/2020 15:06:54'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'blockToRunOnDebitFrom requestsMade'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #MerchantProcessor stamp: 'CJ 11/30/2020 15:06:54'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #InternalRestInterface stamp: 'CJ 11/30/2020 15:06:55'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts catalog currentCartID authenticatorSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #CreditCard stamp: 'CJ 11/30/2020 15:06:55'!
Object subclass: #CreditCard
	instanceVariableNames: 'number ownerName validUntil'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #Cashier stamp: 'CJ 11/30/2020 15:06:55'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor salesMade'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #Cart stamp: 'CJ 11/30/2020 15:06:56'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #AuthenticatorSimulator stamp: 'CJ 11/30/2020 15:06:56'!
Object subclass: #AuthenticatorSimulator
	instanceVariableNames: 'blockToRunOnUserLogin'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #Authenticator stamp: 'CJ 11/30/2020 15:06:56'!
Object subclass: #Authenticator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #TestObjectFactory stamp: 'CJ 11/30/2020 15:06:57'!
TestCase subclass: #TestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #InternalRestInterfaceTest stamp: 'CJ 11/30/2020 15:06:57'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #CreditCardTest stamp: 'CJ 11/30/2020 15:06:58'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #CashierTest stamp: 'CJ 11/30/2020 15:06:58'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classRemoval: #CartTest stamp: 'CJ 11/30/2020 15:06:58'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

----End fileIn of /home/kali/exactas/ing1/ejercicios-isw1/20-TusLibros/Iteracion3/20-TusLibros.pck.st----!

Object subclass: #AuthenticatorSimulator
	instanceVariableNames: 'blockToRunOnUserLogin'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'
	"TODO: make subclass of Authenticator"!

!classDefinition: #AuthenticatorSimulator category: '20-TusLibros' stamp: 'CJ 11/30/2020 15:11:27'!
Object subclass: #AuthenticatorSimulator
	instanceVariableNames: 'blockToRunOnUserLogin'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!AuthenticatorSimulator class methodsFor: 'instance creation' stamp: 'CJ 11/30/2020 15:11:49' prior: 50967547!
withAction: aBlockToRunOnUserLogin 
	
	^ self new initializeWithAction: aBlockToRunOnUserLogin
	"TODO: make this class a subclass of Authenticator"! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 15:13:14' prior: 50967195!
test02CreateCartAuthenticatesUser

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.
	
	self
		should: [ interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'. ]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.
	
	"self
		should: [ interface listCart: cartId. ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
	 "! !

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/30/2020 15:13:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 15:13:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/30/2020 15:13:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/30/2020 15:13:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAddItemNotSoldByStore stamp: 'CJ 11/30/2020 15:13:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotAddInvalidItemQuantity stamp: 'CJ 11/30/2020 15:13:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 15:13:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotCheckoutCartWithInvalidID stamp: 'CJ 11/30/2020 15:13:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CannotCheckoutCartWithInvalidCCN stamp: 'CJ 11/30/2020 15:13:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutCartWithExpiredCreditCard stamp: 'CJ 11/30/2020 15:13:17'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 15:13:17'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 15:13:31' prior: 50967966!
test02CreateCartAuthenticatesUser

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.
	
	self
		should: [ interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'. ]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 15:15:41' prior: 50967217!
test03CannotAddToCartWithInvalidID

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.

	self
		should: [ interface addToCart: self invalidCartID product: testObjectFactory itemSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/30/2020 15:16:33' prior: 50967750!
addToCart: aCartID product: productToAdd withCopies: copiesOfProductToAdd
	
	| cart |
	
	cart := carts at: aCartID ifAbsent: [ self error: self class cartDoesntExistErrorDescription. ].
	cart add: copiesOfProductToAdd of: productToAdd.! !
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 11/30/2020 15:18:22' prior: 50967419!
invalidCartID
	
	^ Object new.! !

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/30/2020 15:18:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 15:18:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/30/2020 15:18:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/30/2020 15:18:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04CannotAddItemNotSoldByStore stamp: 'CJ 11/30/2020 15:18:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotAddInvalidItemQuantity stamp: 'CJ 11/30/2020 15:18:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 15:18:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CannotCheckoutCartWithInvalidID stamp: 'CJ 11/30/2020 15:18:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CannotCheckoutCartWithInvalidCCN stamp: 'CJ 11/30/2020 15:18:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CannotCheckoutCartWithExpiredCreditCard stamp: 'CJ 11/30/2020 15:18:34'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 15:18:34'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 15:19:31' prior: 50968044!
test03CannotAddToCartWithInvalidID

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.

	self
		should: [
			interface addToCart: self invalidCartID product: testObjectFactory itemSoldByStore withCopies: 1
			]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !

!methodRemoval: InternalRestInterfaceTest #test04CannotAddItemNotSoldByStore stamp: 'CJ 11/30/2020 15:21:38'!
test04CannotAddItemNotSoldByStore

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: cartId product: testObjectFactory itemNotSoldByStore withCopies: 1 ]
		raise: Error
		withMessageText: Cart invalidItemErrorMessage.
		
	self assert: (interface listCart: cartId) isEmpty.!

!methodRemoval: InternalRestInterfaceTest #test05CannotAddInvalidItemQuantity stamp: 'CJ 11/30/2020 15:21:40'!
test05CannotAddInvalidItemQuantity

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [ interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 0 ]
		raise: Error
		withMessageText: Cart invalidQuantityErrorMessage.
		
	self assert: (interface listCart: cartId) isEmpty.!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 15:22:01'!
test04ValidItemIsAddedToCart

	| interface cartId item |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	self assert: 1 equals: ((interface listCart: cartId) occurrencesOf: item).
	self assert: 1 equals: (interface listCart: cartId) size.! !

!methodRemoval: InternalRestInterfaceTest #test06ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 15:22:01'!
test06ValidItemIsAddedToCart

	| interface cartId item |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	self assert: 1 equals: ((interface listCart: cartId) occurrencesOf: item).
	self assert: 1 equals: (interface listCart: cartId) size.!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 15:22:20'!
test05CannotCheckoutCartWithInvalidID

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.
	
	self
		should: [
			interface
				checkoutCart: self invalidCartID
				withCCN: testObjectFactory defaultCreditCardNumber 
				andCCED: testObjectFactory dateForNonExpired 
				andCCO: testObjectFactory defaultCreditCardOwner
		]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
		
	self assert: (interface listPurchasesForClient: 'aClientId' withPassword: 'aReasonablePassword') isEmpty.! !

!methodRemoval: InternalRestInterfaceTest #test07CannotCheckoutCartWithInvalidID stamp: 'CJ 11/30/2020 15:22:20'!
test07CannotCheckoutCartWithInvalidID

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.
	
	self
		should: [
			interface
				checkoutCart: self invalidCartID
				withCCN: testObjectFactory defaultCreditCardNumber 
				andCCED: testObjectFactory dateForNonExpired 
				andCCO: testObjectFactory defaultCreditCardOwner
		]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
		
	self assert: (interface listPurchasesForClient: 'aClientId' withPassword: 'aReasonablePassword') isEmpty.!

!methodRemoval: InternalRestInterfaceTest #test08CannotCheckoutCartWithInvalidCCN stamp: 'CJ 11/30/2020 15:27:03'!
test08CannotCheckoutCartWithInvalidCCN

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self
		should: [
			interface
				checkoutCart: cartId
				withCCN: testObjectFactory invalidCreditCardNumber 
				andCCED: testObjectFactory dateForNonExpired 
				andCCO: testObjectFactory defaultCreditCardOwner
		]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription .
		
	self assert: (interface listPurchasesForClient: 'aClientId' withPassword: 'aReasonablePassword') isEmpty.!

!methodRemoval: InternalRestInterfaceTest #test09CannotCheckoutCartWithExpiredCreditCard stamp: 'CJ 11/30/2020 15:27:06'!
test09CannotCheckoutCartWithExpiredCreditCard

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 1.
	
	self
		should: [
			interface
				checkoutCart: cartId
				withCCN: testObjectFactory defaultCreditCardNumber 
				andCCED: testObjectFactory dateForExpired 
				andCCO: testObjectFactory defaultCreditCardOwner
		]
		raise: Error
		withMessageText: Cashier expiredCreditCardErrorDescription .
		
	self assert: (interface listPurchasesForClient: 'aClientId' withPassword: 'aReasonablePassword') isEmpty.!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 15:27:14'!
test06CheckoutCartStoresPurchase

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired 
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	"self assert: (interface listPurchases: cartId) isEmpty."! !

!methodRemoval: InternalRestInterfaceTest #test10CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 15:27:14'!
test10CheckoutCartStoresPurchase

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired 
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	"self assert: (interface listPurchases: cartId) isEmpty."!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 15:30:39'!
test05ListCartWithInvalidID

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.
	
	self
		should: [
			interface
				checkoutCart: self invalidCartID
				withCCN: testObjectFactory defaultCreditCardNumber 
				andCCED: testObjectFactory dateForNonExpired 
				andCCO: testObjectFactory defaultCreditCardOwner
		]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
		
	self assert: (interface listPurchasesForClient: 'aClientId' withPassword: 'aReasonablePassword') isEmpty.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 15:31:06' prior: 50968375!
test05ListCartWithInvalidID

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.
	
	self
		should: [ interface listCart: self invalidCartID ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 15:31:14'!
test06CannotCheckoutCartWithInvalidID

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.
	
	self
		should: [
			interface
				checkoutCart: self invalidCartID
				withCCN: testObjectFactory defaultCreditCardNumber 
				andCCED: testObjectFactory dateForNonExpired 
				andCCO: testObjectFactory defaultCreditCardOwner
		]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
		
	self assert: (interface listPurchasesForClient: 'aClientId' withPassword: 'aReasonablePassword') isEmpty.! !

!methodRemoval: InternalRestInterfaceTest #test05CannotCheckoutCartWithInvalidID stamp: 'CJ 11/30/2020 15:31:14'!
test05CannotCheckoutCartWithInvalidID

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.
	
	self
		should: [
			interface
				checkoutCart: self invalidCartID
				withCCN: testObjectFactory defaultCreditCardNumber 
				andCCED: testObjectFactory dateForNonExpired 
				andCCO: testObjectFactory defaultCreditCardOwner
		]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
		
	self assert: (interface listPurchasesForClient: 'aClientId' withPassword: 'aReasonablePassword') isEmpty.!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 15:31:20'!
test07CheckoutCartStoresPurchase

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired 
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	"self assert: (interface listPurchases: cartId) isEmpty."! !

!methodRemoval: InternalRestInterfaceTest #test06CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 15:31:20'!
test06CheckoutCartStoresPurchase

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired 
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	"self assert: (interface listPurchases: cartId) isEmpty."!
!InternalRestInterface class methodsFor: 'instance creation' stamp: 'CJ 11/30/2020 15:33:53' prior: 50967836!
withAuthenticator: anAuthenticatorSimulator andCatalog: aDictionary andCashier: aCashier 

	^ self new initializeWithAuthenticator: anAuthenticatorSimulator andCatalog: aDictionary andCashier: aCashier ! !
!InternalRestInterface methodsFor: 'initialization' stamp: 'CJ 11/30/2020 15:34:11' prior: 50967807!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog andCashier: aCashier

	authenticator := anAuthenticator.
	catalog := aCatalog.
	cashier := aCashier.! !

Authenticator subclass: #AuthenticatorSimulator
	instanceVariableNames: 'blockToRunOnUserLogin'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #AuthenticatorSimulator category: '20-TusLibros' stamp: 'CJ 11/30/2020 15:38:55'!
Authenticator subclass: #AuthenticatorSimulator
	instanceVariableNames: 'blockToRunOnUserLogin'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 15:39:33' prior: 50968463!
test07CheckoutCartStoresPurchase

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	"self assert: (interface listPurchases: cartId) isEmpty."! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/30/2020 15:39:55' prior: 50967762!
checkoutCart: cartId withCCN: creditCardNumber andCCED: creditCardExpirationDate andCCO: creditCardOwner
	| cart creditCard |
	
	cart := carts at: cartId ifAbsent: [self error: self class cartDoesntExistErrorDescription ].
	creditCard := CreditCard withNumber: creditCardNumber ownedBy: creditCardOwner expiringOn: creditCardExpirationDate.
	
	cashier checkout: cart withCreditCard: creditCard.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/30/2020 15:40:43' prior: 50968571!
checkoutCart: cartId withCCN: creditCardNumber andCCED: creditCardExpirationDate andCCO: creditCardOwner
	
	| cart creditCard |
	
	cart := carts at: cartId ifAbsent: [self error: self class cartDoesntExistErrorDescription ].
	creditCard := CreditCard withNumber: creditCardNumber ownedBy: creditCardOwner expiringOn: creditCardExpirationDate.
	
	cashier checkout: cart withCreditCard: creditCard.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/30/2020 15:42:34'!
getCart: cartId

	^ carts at: cartId ifAbsent: [self error: self class cartDoesntExistErrorDescription ]! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/30/2020 15:42:34' prior: 50968587!
checkoutCart: cartId withCCN: creditCardNumber andCCED: creditCardExpirationDate andCCO: creditCardOwner
	
	| cart creditCard |
	
	cart := self getCart: cartId.
	creditCard := CreditCard withNumber: creditCardNumber ownedBy: creditCardOwner expiringOn: creditCardExpirationDate.
	
	cashier checkout: cart withCreditCard: creditCard.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/30/2020 15:43:04' prior: 50967788!
listCart: aCartId 
	
	| cart |
	
	cart := self getCart: aCartId.
	^ Bag newFrom: cart items.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/30/2020 15:43:43' prior: 50967796!
listPurchasesForClient: aClientId withPassword: aPassword 

	^ OrderedCollection new! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/30/2020 15:44:20' prior: 50968061!
addToCart: aCartID product: productToAdd withCopies: copiesOfProductToAdd
	
	| cart |
	
	cart := self getCart: aCartID.
	cart add: copiesOfProductToAdd of: productToAdd.! !
!InternalRestInterface methodsFor: 'private' stamp: 'CJ 11/30/2020 15:45:14'!
cartWithID: cartId

	^ carts at: cartId ifAbsent: [self error: self class cartDoesntExistErrorDescription ]! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'CJ 11/30/2020 15:45:14' prior: 50968623!
listCart: aCartId 
	
	| cart |
	
	cart := self cartWithID: aCartId.
	^ Bag newFrom: cart items.! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'CJ 11/30/2020 15:45:14' prior: 50968635!
addToCart: aCartID product: productToAdd withCopies: copiesOfProductToAdd
	
	| cart |
	
	cart := self cartWithID: aCartID.
	cart add: copiesOfProductToAdd of: productToAdd.! !
!InternalRestInterface methodsFor: 'as yet unclassified' stamp: 'CJ 11/30/2020 15:45:14' prior: 50968609!
checkoutCart: cartId withCCN: creditCardNumber andCCED: creditCardExpirationDate andCCO: creditCardOwner
	
	| cart creditCard |
	
	cart := self cartWithID: cartId.
	creditCard := CreditCard withNumber: creditCardNumber ownedBy: creditCardOwner expiringOn: creditCardExpirationDate.
	
	cashier checkout: cart withCreditCard: creditCard.! !

!methodRemoval: InternalRestInterface #getCart: stamp: 'CJ 11/30/2020 15:45:14'!
getCart: cartId

	^ carts at: cartId ifAbsent: [self error: self class cartDoesntExistErrorDescription ]!

MerchantProcessor subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'blockToRunOnDebitFrom requestsMade'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: '20-TusLibros' stamp: 'CJ 11/30/2020 15:46:36'!
MerchantProcessor subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'blockToRunOnDebitFrom requestsMade'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Authenticator methodsFor: 'no messages' stamp: 'CJ 11/30/2020 15:49:39'!
authenticateUser: aUsername withPassword: aPassword! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 15:51:45' prior: 50967180!
test01NewCartsAreCreatedEmpty

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andCatalog: testObjectFactory defaultCatalog
		andCashier: testObjectFactory defaultCashier.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self assert: (interface listCart: cartId) isEmpty.! !
!MerchantProcessorSimulator methodsFor: 'processing' stamp: 'CJ 11/30/2020 15:52:00' prior: 50967881!
debit: amount from: aCreditCard

	requestsMade := requestsMade + 1.
	^ blockToRunOnDebitFrom value.! !
!MerchantProcessor methodsFor: 'nil' stamp: 'CJ 11/30/2020 15:52:05'!
debit: amount from: aCreditCard! !
!MerchantProcessorSimulator methodsFor: 'accessing' stamp: 'CJ 11/30/2020 15:52:13' prior: 50967895!
requestsMade

	^ requestsMade! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'CJ 11/30/2020 15:52:24'!
requestsMade! !
!Authenticator methodsFor: 'as yet unclassified' stamp: 'CJ 11/30/2020 16:37:06' prior: 50968700!
authenticateUser: aUsername withPassword: aPassword
	
	self subclassResponsibility ! !
!MerchantProcessor methodsFor: 'processing' stamp: 'CJ 11/30/2020 16:37:39' prior: 50968727!
debit: amount from: aCreditCard

	self subclassResponsibility ! !
!MerchantProcessor methodsFor: 'accessing' stamp: 'CJ 11/30/2020 16:38:46' prior: 50968736!
requestsMade

	self subclassResponsibility ! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 11/30/2020 16:38:49'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 11/30/2020 16:38:49'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 11/30/2020 16:38:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 11/30/2020 16:38:49'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 11/30/2020 16:38:49'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 11/30/2020 16:38:49'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 11/30/2020 16:38:49'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 11/30/2020 16:38:49'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 11/30/2020 16:38:49'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 11/30/2020 16:38:49'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 16:40:00' prior: 50968705!
test01NewCartsAreCreatedEmpty

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	
	self assert: (interface listCart: cartId) isEmpty.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:40:05'!
ERROR!
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/30/2020 16:40:14'!
defaultMarket
	self shouldBeImplemented.! !

!classDefinition: #Market category: '20-TusLibros' stamp: 'CJ 11/30/2020 16:41:08'!
Object subclass: #Market
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/30/2020 16:41:01' prior: 50968807!
defaultMarket
	
	^ Market withCatalog: self defaultCatalog andMerchantProcessor: self workingMerchantProcessor! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:41:13'!
ERROR!
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 11/30/2020 16:41:33' prior: 50968818!
defaultMarket
	
	^ Market withCatalog: self defaultCatalog andMerchantProcessor: MerchantProcessorSimulator working! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:41:35'!
ERROR!
!Market class methodsFor: 'instance creation' stamp: 'CJ 11/30/2020 16:41:44'!
withCatalog: aDictionary andMerchantProcessor: aMerchantProcessorSimulator 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalog: aDictionary andMerchantProcessor: aMerchantProcessorSimulator ! !
!Market class methodsFor: 'instance creation' stamp: 'CJ 11/30/2020 16:42:08' prior: 50968838!
withCatalog: aCatalog andMerchantProcessor: aMerchantProcessor 
	
	^ self new initializeWithCatalog: aCatalog andMerchantProcessor: aMerchantProcessor ! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:42:13'!
ERROR!

!classDefinition: #Market category: '20-TusLibros' stamp: 'CJ 11/30/2020 16:42:28'!
Object subclass: #Market
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #Market category: '20-TusLibros' stamp: 'CJ 11/30/2020 16:42:28'!
Object subclass: #Market
	instanceVariableNames: 'catalog merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Market methodsFor: 'initialization' stamp: 'CJ 11/30/2020 16:42:28'!
initializeWithCatalog: aCatalog andMerchantProcessor: aMerchantProcessor 
	self shouldBeImplemented.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.! !
!Market methodsFor: 'initialization' stamp: 'CJ 11/30/2020 16:42:32' prior: 50968875!
initializeWithCatalog: aCatalog andMerchantProcessor: aMerchantProcessor 
	
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:42:35'!
ERROR!
!InternalRestInterface class methodsFor: 'instance creation' stamp: 'CJ 11/30/2020 16:42:54'!
withAuthenticator: anAuthenticatorSimulator andMarket: aMarket 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithAuthenticator: anAuthenticatorSimulator andMarket: aMarket ! !
!InternalRestInterface class methodsFor: 'instance creation' stamp: 'CJ 11/30/2020 16:43:09' prior: 50968894!
withAuthenticator: anAuthenticator andMarket: aMarket 
	
	^self new initializeWithAuthenticator: anAuthenticator andMarket: aMarket ! !
!InternalRestInterface class methodsFor: 'instance creation' stamp: 'CJ 11/30/2020 16:43:14' prior: 50968906!
withAuthenticator: anAuthenticator andMarket: aMarket 
	
	^ self new initializeWithAuthenticator: anAuthenticator andMarket: aMarket.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:43:16'!
ERROR!

!classDefinition: #InternalRestInterface category: '20-TusLibros' stamp: 'CJ 11/30/2020 16:43:29'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts catalog currentCartID cashier market'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterface methodsFor: 'initialization' stamp: 'CJ 11/30/2020 16:43:29'!
initializeWithAuthenticator: anAuthenticator andMarket: aMarket 
	self shouldBeImplemented.
	authenticator := anAuthenticator.
	market := aMarket.! !
!InternalRestInterface methodsFor: 'initialization' stamp: 'CJ 11/30/2020 16:43:34' prior: 50968934!
initializeWithAuthenticator: anAuthenticator andMarket: aMarket 
	
	authenticator := anAuthenticator.
	market := aMarket.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:43:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:43:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/30/2020 16:43:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/30/2020 16:43:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 16:43:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 11/30/2020 16:43:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 11/30/2020 16:43:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 16:43:36'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:43:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:43:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/30/2020 16:43:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/30/2020 16:43:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 16:43:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 11/30/2020 16:43:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 11/30/2020 16:43:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 16:43:42'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 16:44:08' prior: 50968027!
test02CreateCartAuthenticatesUser

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.
	
	self
		should: [ interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'. ]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/30/2020 16:44:11'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 16:45:08' prior: 50969005!
test02CreateCartAuthenticatesUser

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andMarket: testObjectFactory defaultMarket.
	
	self
		should: [ interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'. ]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/30/2020 16:45:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:45:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/30/2020 16:45:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/30/2020 16:45:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 16:45:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 11/30/2020 16:45:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 11/30/2020 16:45:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 16:45:09'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 16:45:19' prior: 50968116!
test03CannotAddToCartWithInvalidID

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	self
		should: [
			interface addToCart: self invalidCartID product: testObjectFactory itemSoldByStore withCopies: 1
			]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/30/2020 16:45:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:45:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/30/2020 16:45:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/30/2020 16:45:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 16:45:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 11/30/2020 16:45:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 11/30/2020 16:45:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 16:45:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/30/2020 16:53:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:53:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/30/2020 16:53:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/30/2020 16:53:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 16:53:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 11/30/2020 16:53:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 11/30/2020 16:53:56'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 16:53:56'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 16:54:10' prior: 50968176!
test04ValidItemIsAddedToCart

	| interface cartId item |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	self assert: 1 equals: ((interface listCart: cartId) occurrencesOf: item).
	self assert: 1 equals: (interface listCart: cartId) size.! !

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 16:54:11'!
ERROR!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/30/2020 16:55:26' prior: 50967777!
createCartForClient: aClientId withPassword: aPassword

	| newCartID |

	authenticator authenticateUser: aClientId withPassword: aPassword.
	
	newCartID := self nextID.	
	carts at: newCartID put: (Cart acceptingItemsOf: market catalog).
	
	^ newCartID.! !

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 16:55:31'!
ERROR!
!Market methodsFor: 'accessing' stamp: 'CJ 11/30/2020 16:55:45'!
catalog
	self shouldBeImplemented.
	^catalog! !
!Market methodsFor: 'accessing' stamp: 'CJ 11/30/2020 16:55:49' prior: 50969178!
catalog
	
	^ catalog! !

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 16:55:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:55:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/30/2020 16:55:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/30/2020 16:55:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 16:55:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 11/30/2020 16:55:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 11/30/2020 16:55:51'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 16:55:51'!
ERROR!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 16:55:51'!
ERROR!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 16:56:09'!
ERROR!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 16:56:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:56:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/30/2020 16:56:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/30/2020 16:56:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 16:56:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 11/30/2020 16:56:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 11/30/2020 16:56:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 16:56:18'!
ERROR!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 16:56:18'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 16:56:41' prior: 50968399!
test05ListCartWithInvalidID

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.
	
	self
		should: [ interface listCart: self invalidCartID ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 16:56:45' prior: 50968414!
test06CannotCheckoutCartWithInvalidID

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.
	
	self
		should: [
			interface
				checkoutCart: self invalidCartID
				withCCN: testObjectFactory defaultCreditCardNumber 
				andCCED: testObjectFactory dateForNonExpired 
				andCCO: testObjectFactory defaultCreditCardOwner
		]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.
		
	self assert: (interface listPurchasesForClient: 'aClientId' withPassword: 'aReasonablePassword') isEmpty.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 11/30/2020 16:56:52' prior: 50968546!
test07CheckoutCartStoresPurchase

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	"self assert: (interface listPurchases: cartId) isEmpty."! !

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 16:56:53'!
ERROR!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/30/2020 16:57:31' prior: 50968666!
checkoutCart: cartId withCCN: creditCardNumber andCCED: creditCardExpirationDate andCCO: creditCardOwner
	
	| cart creditCard |
	
	cart := self cartWithID: cartId.
	creditCard := CreditCard withNumber: creditCardNumber ownedBy: creditCardOwner expiringOn: creditCardExpirationDate.
	
	cashier checkout: cart withCreditCard: creditCard.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/30/2020 16:58:59' prior: 50969318!
checkoutCart: cartId withCCN: creditCardNumber andCCED: creditCardExpirationDate andCCO: creditCardOwner
	
	| cart creditCard newCashier |
	
	cart := self cartWithID: cartId.
	creditCard := CreditCard withNumber: creditCardNumber ownedBy: creditCardOwner expiringOn: creditCardExpirationDate.
	newCashier := market createCashier.
	
	newCashier checkout: cart withCreditCard: creditCard.! !

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 16:59:02'!
ERROR!
!Market methodsFor: 'checkout' stamp: 'CJ 11/30/2020 16:59:18'!
createCashier
	self shouldBeImplemented.! !
!Market methodsFor: 'checkout' stamp: 'CJ 11/30/2020 16:59:29' prior: 50969350!
createCashier
	
	^ Cashier withMerchantProcessor: merchantProcessor! !

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 16:59:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:59:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/30/2020 16:59:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/30/2020 16:59:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 16:59:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 11/30/2020 16:59:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 11/30/2020 16:59:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 16:59:32'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 16:59:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 16:59:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/30/2020 16:59:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/30/2020 16:59:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 16:59:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 11/30/2020 16:59:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 11/30/2020 16:59:37'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 16:59:37'!
PASSED!

Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts catalog currentCartID market'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #InternalRestInterface category: '20-TusLibros' stamp: 'CJ 11/30/2020 17:00:15'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts catalog currentCartID market'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts currentCartID market'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!

!classDefinition: #InternalRestInterface category: '20-TusLibros' stamp: 'CJ 11/30/2020 17:00:20'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts currentCartID market'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/30/2020 17:21:19' prior: 50969332!
checkoutCart: cartId withCCN: creditCardNumber andCCED: creditCardExpirationDate andCCO: creditCardOwner
	
	| cart creditCard cashier |
	
	cart := self cartWithID: cartId.
	creditCard := CreditCard withNumber: creditCardNumber ownedBy: creditCardOwner expiringOn: creditCardExpirationDate.
	cashier := market createCashier.
	
	cashier checkout: cart withCreditCard: creditCard.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 11/30/2020 17:23:11' prior: 50969164!
createCartForClient: aClientId withPassword: aPassword

	| newCartID |

	authenticator authenticateUser: aClientId withPassword: aPassword.
	
	newCartID := self nextID.	
	carts at: newCartID put: market createCart.
	
	^ newCartID.! !

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/30/2020 17:23:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 17:23:16'!
ERROR!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 11/30/2020 17:23:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 11/30/2020 17:23:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 17:23:16'!
ERROR!

!testRun: #InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 11/30/2020 17:23:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 11/30/2020 17:23:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 17:23:16'!
ERROR!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 17:23:18'!
ERROR!
!Market methodsFor: 'purchasing' stamp: 'CJ 11/30/2020 17:23:46'!
createCart
	self shouldBeImplemented.! !
!Market methodsFor: 'purchasing' stamp: 'CJ 11/30/2020 17:23:55' prior: 50969501!
createCart
	
	^ Cart acceptingItemsOf: catalog.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 11/30/2020 17:23:57'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 11/30/2020 17:23:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 11/30/2020 17:23:59'!
PASSED!

----SNAPSHOT----(30 November 2020 17:26:32) CuisUniversity-4384.image priorSource: 20310887!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:14:13' prior: 50969291!
test07CheckoutCartStoresPurchase

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	cartId := interface createCartForClient: 'aClientId' withPassword: 'aReasonablePassword'.
	interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	"self assert: (interface listPurchases: cartId) isEmpty."! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:14:24'!
defaultClientID

	^ 'aClientId'! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:14:24' prior: 50969523!
test07CheckoutCartStoresPurchase

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	cartId := interface createCartForClient: self defaultClientID withPassword: 'aReasonablePassword'.
	interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	"self assert: (interface listPurchases: cartId) isEmpty."! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:14:42'!
defaultPassword

	^ 'aReasonablePassword'! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:14:42' prior: 50969551!
test07CheckoutCartStoresPurchase

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	cartId := interface createCartForClient: self defaultClientID withPassword: self defaultPassword.
	interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	"self assert: (interface listPurchases: cartId) isEmpty."! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:16:46' prior: 50969579!
test07CheckoutCartStoresPurchase

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	cartId := interface createCartForClient: self defaultClientID withPassword: self defaultPassword.
	interface addToCart: cartId product: testObjectFactory itemSoldByStore withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: (interface listPurchasesForClient: self defaultClientID withPassword: self defaultPassword)
		includes: ''.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:19:30' prior: 50969602!
test07CheckoutCartStoresPurchase

	| interface cartId item clientID password |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	cartId := interface createCartForClient: self defaultClientID withPassword: self defaultPassword.
	item := testObjectFactory itemNotSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: self defaultClientID withPassword: self defaultPassword) at: item).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:20:08' prior: 50969627!
test07CheckoutCartStoresPurchase

	| interface cartId item clientID password |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	cartId := interface createCartForClient: clientID withPassword: password.
	
	item := testObjectFactory itemNotSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: clientID withPassword: password) at: item).! !

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 12/2/2020 16:20:31'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:21:10' prior: 50969656!
test07CheckoutCartStoresPurchase

	| interface cartId item clientID password |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	cartId := interface createCartForClient: clientID withPassword: password.
	
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: clientID withPassword: password) at: item).! !

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 12/2/2020 16:21:11'!
ERROR!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 12/2/2020 16:22:52' prior: 50968629!
listPurchasesForClient: aClientId withPassword: aPassword 

	^ Bag new! !

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 12/2/2020 16:22:56'!
ERROR!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:24:00' prior: 50969687!
test07CheckoutCartStoresPurchase

	| interface cartId item clientID password |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	cartId := interface createCartForClient: clientID withPassword: password.
	
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: clientID withPassword: password) occurrencesOf: item).! !

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 12/2/2020 16:24:02'!
FAILURE!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 12/2/2020 16:24:25' prior: 50969718!
listPurchasesForClient: aClientId withPassword: aPassword 

	^ Bag new with: 'validBook'! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 12/2/2020 16:25:37' prior: 50969758!
listPurchasesForClient: aClientId withPassword: aPassword 

	^ Bag with: 'validBook'! !

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 12/2/2020 16:25:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 16:25:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 16:25:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 16:25:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 16:25:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 12/2/2020 16:25:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 16:25:41'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 12/2/2020 16:25:41'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 16:25:41'!
FAILURE!

!classDefinition: #InternalRestInterface category: '20-TusLibros' stamp: 'CJ 12/2/2020 16:27:52'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts currentCartID market purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 12/2/2020 16:27:49' prior: 50969445!
checkoutCart: cartId withCCN: creditCardNumber andCCED: creditCardExpirationDate andCCO: creditCardOwner
	
	| cart creditCard cashier |
	
	cart := self cartWithID: cartId.
	creditCard := CreditCard withNumber: creditCardNumber ownedBy: creditCardOwner expiringOn: creditCardExpirationDate.
	cashier := market createCashier.
	
	cashier checkout: cart withCreditCard: creditCard.
	purchases := cashier salesMade.! !

!methodRemoval: InternalRestInterface class #withAuthenticator:andCatalog:andCashier: stamp: 'CJ 12/2/2020 16:29:24'!
withAuthenticator: anAuthenticatorSimulator andCatalog: aDictionary andCashier: aCashier 

	^ self new initializeWithAuthenticator: anAuthenticatorSimulator andCatalog: aDictionary andCashier: aCashier !

!methodRemoval: InternalRestInterface class #withAuthenticator:andCatalog: stamp: 'CJ 12/2/2020 16:29:26'!
withAuthenticator: anAuthenticatorSimulator andCatalog: aCatalog 
	
	^ self new initializeWithAuthenticator: anAuthenticatorSimulator andCatalog: aCatalog !

!methodRemoval: InternalRestInterface class #withAuthenticator: stamp: 'CJ 12/2/2020 16:29:29'!
withAuthenticator: anInternalRestInterfaceTest 
	
	^ self new initializeWithAuthenticator: anInternalRestInterfaceTest !

!methodRemoval: InternalRestInterface #initializeWithAuthenticator:andCatalog:andCashier: stamp: 'CJ 12/2/2020 16:29:32'!
initializeWithAuthenticator: anAuthenticator andCatalog: aCatalog andCashier: aCashier

	authenticator := anAuthenticator.
	catalog := aCatalog.
	cashier := aCashier.!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 12/2/2020 16:29:58' prior: 50969811!
checkoutCart: cartId withCCN: creditCardNumber andCCED: creditCardExpirationDate andCCO: creditCardOwner
	
	| cart creditCard cashier |
	
	cart := self cartWithID: cartId.
	creditCard := CreditCard withNumber: creditCardNumber ownedBy: creditCardOwner expiringOn: creditCardExpirationDate.
	cashier := market createCashier.
	
	cashier checkout: cart withCreditCard: creditCard.
	purchases := Bag with: 'validBook'.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 16:30:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 16:30:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 16:30:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 16:30:02'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 12/2/2020 16:30:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 16:30:03'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 12/2/2020 16:30:03'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 16:30:03'!
FAILURE!
!InternalRestInterface methodsFor: 'initialization' stamp: 'CJ 12/2/2020 16:30:28' prior: 50967802 overrides: 16896425!
initialize

	carts := Dictionary new.
	currentCartID := 0.
	purchases := Bag new.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 12/2/2020 16:30:52' prior: 50969764!
listPurchasesForClient: aClientId withPassword: aPassword 

	^ purchases! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 16:30:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 16:30:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 16:30:55'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 16:30:55'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 12/2/2020 16:30:55'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 16:30:55'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 12/2/2020 16:30:55'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:31:42'!
test07CheckoutCartStoresPurchaseForOneClient

	| interface cartId item clientID password |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	cartId := interface createCartForClient: clientID withPassword: password.
	
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: clientID withPassword: password) occurrencesOf: item).! !

!methodRemoval: InternalRestInterfaceTest #test07CheckoutCartStoresPurchase stamp: 'CJ 12/2/2020 16:31:42'!
test07CheckoutCartStoresPurchase

	| interface cartId item clientID password |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	cartId := interface createCartForClient: clientID withPassword: password.
	
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: clientID withPassword: password) occurrencesOf: item).!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:31:53'!
test08CheckoutCartStoresTwoPurchasesForOneClient

	| interface cartId item clientID password |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	cartId := interface createCartForClient: clientID withPassword: password.
	
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: clientID withPassword: password) occurrencesOf: item).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:32:10' prior: 50969998!
test08CheckoutCartStoresTwoPurchasesForOneClient

	| interface cartId item anotherItem clientID password |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	cartId := interface createCartForClient: clientID withPassword: password.
	
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: clientID withPassword: password) occurrencesOf: item).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:32:37'!
test08CheckoutCartStoresManyPurchasesForOneClient

	| interface cartId item anotherItem clientID password |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	cartId := interface createCartForClient: clientID withPassword: password.
	
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: clientID withPassword: password) occurrencesOf: item).! !

!methodRemoval: InternalRestInterfaceTest #test08CheckoutCartStoresTwoPurchasesForOneClient stamp: 'CJ 12/2/2020 16:32:37'!
test08CheckoutCartStoresTwoPurchasesForOneClient

	| interface cartId item anotherItem clientID password |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	cartId := interface createCartForClient: clientID withPassword: password.
	
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: clientID withPassword: password) occurrencesOf: item).!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:33:08' prior: 50970055!
test08CheckoutCartStoresManyPurchasesForOneClient

	| interface cartId item anotherItem clientID password |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	
	cartId := interface createCartForClient: clientID withPassword: password.
	
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: clientID withPassword: password) occurrencesOf: item).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:34:00' prior: 50970113!
test08CheckoutCartStoresManyPurchasesForOneClient

	| interface cartId item anotherItem clientID password |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: item withCopies: 1.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: clientID withPassword: password) occurrencesOf: item).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:34:21' prior: 50970142!
test08CheckoutCartStoresManyPurchasesForOneClient

	| interface cartId item anotherItem clientID password |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: item withCopies: 1.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: item withCopies: 1.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: clientID withPassword: password) occurrencesOf: item).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:34:35' prior: 50970173!
test08CheckoutCartStoresManyPurchasesForOneClient

	| interface cartId item anotherItem clientID password |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: item withCopies: 1.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: anotherItem withCopies: 1.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: clientID withPassword: password) occurrencesOf: item).! !

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 16:34:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 16:34:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 16:34:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 16:34:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 16:34:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 12/2/2020 16:34:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 16:34:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 16:34:48'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 16:34:48'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:34:55' prior: 50970214!
test08CheckoutCartStoresManyPurchasesForOneClient

	| interface cartId item anotherItem clientID password |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: item withCopies: 1.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: anotherItem withCopies: 1.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: clientID withPassword: password) occurrencesOf: item).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:35:11' prior: 50969942!
test07CheckoutCartStoresPurchaseForOneClient

	| interface cartId item clientID password purchases |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	cartId := interface createCartForClient: clientID withPassword: password.
	
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: clientID withPassword: password) occurrencesOf: item).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:36:03' prior: 50970329!
test07CheckoutCartStoresPurchaseForOneClient

	| interface cartId item clientID password purchases |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	cartId := interface createCartForClient: clientID withPassword: password.
	
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	purchases := interface listPurchasesForClient: clientID withPassword: password.
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).! !

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 16:36:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 16:36:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 16:36:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 16:36:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 16:36:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 12/2/2020 16:36:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 16:36:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 16:36:04'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 16:36:04'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:36:33' prior: 50970288!
test08CheckoutCartStoresManyPurchasesForOneClient

	| interface cartId item anotherItem clientID password |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: item withCopies: 1.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: anotherItem withCopies: 2.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	self
		assert: 1
		equals: ((interface listPurchasesForClient: clientID withPassword: password) occurrencesOf: item).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:37:15' prior: 50970421!
test08CheckoutCartStoresManyPurchasesForOneClient

	| interface cartId item anotherItem clientID password purchases |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: item withCopies: 1.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: anotherItem withCopies: 2.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	purchases := interface listPurchasesForClient: clientID withPassword: password.
	self assert: 3 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).
	self assert: 2 equals: (purchases occurrencesOf: anotherItem).! !

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 16:37:16'!
FAILURE!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 12/2/2020 16:39:07' prior: 50969861!
checkoutCart: cartId withCCN: creditCardNumber andCCED: creditCardExpirationDate andCCO: creditCardOwner
	
	| cart creditCard cashier |
	
	cart := self cartWithID: cartId.
	creditCard := CreditCard withNumber: creditCardNumber ownedBy: creditCardOwner expiringOn: creditCardExpirationDate.
	cashier := market createCashier.
	
	cashier checkout: cart withCreditCard: creditCard.
	purchases addAll: cart items.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 16:39:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 16:39:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 16:39:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 16:39:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 12/2/2020 16:39:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 16:39:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 16:39:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 16:39:13'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:39:48' prior: 50968790!
test01NewCartsAreCreatedEmpty

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	cartId := interface createCartForClient: self defaultClientID withPassword: self defaultPassword .
	
	self assert: (interface listCart: cartId) isEmpty.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:39:52' prior: 50970556!
test01NewCartsAreCreatedEmpty

	| interface cartId |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	cartId := interface createCartForClient: self defaultClientID withPassword: self defaultPassword.
	
	self assert: (interface listCart: cartId) isEmpty.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:40:06' prior: 50969024!
test02CreateCartAuthenticatesUser

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andMarket: testObjectFactory defaultMarket.
	
	self
		should: [ interface createCartForClient: self defaultClientID withPassword: self defaultPassword. ]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:41:16' prior: 50969141!
test04ValidItemIsAddedToCart

	| interface cartId item |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	cartId := interface createCartForClient: self defaultClientID withPassword: self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	interface addToCart: cartId product: item withCopies: 1.
	
	self assert: 1 equals: ((interface listCart: cartId) occurrencesOf: item).
	self assert: 1 equals: (interface listCart: cartId) size.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:41:33'!
test05CannotListCartWithInvalidID

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.
	
	self
		should: [ interface listCart: self invalidCartID ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !

!methodRemoval: InternalRestInterfaceTest #test05ListCartWithInvalidID stamp: 'CJ 12/2/2020 16:41:33'!
test05ListCartWithInvalidID

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.
	
	self
		should: [ interface listCart: self invalidCartID ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:42:10' prior: 50969268!
test06CannotCheckoutCartWithInvalidID

	| interface |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.
	
	self
		should: [
			interface
				checkoutCart: self invalidCartID
				withCCN: testObjectFactory defaultCreditCardNumber 
				andCCED: testObjectFactory dateForNonExpired 
				andCCO: testObjectFactory defaultCreditCardOwner
		]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:42:59' prior: 50970358!
test07CheckoutCartStoresPurchaseForOneClient

	| interface cartId item clientID password purchases |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: item withCopies: 1.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.
		
	purchases := interface listPurchasesForClient: clientID withPassword: password.
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:45:12'!
xxx: interface yyy: clientID zzz: password www: item
	
	| cartId |
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: item withCopies: 1.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:45:20' prior: 50970699!
xxx: interface yyy: clientID zzz: password www: item
	
	| cartId |
	
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: item withCopies: 1.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:47:14'!
purchaseItem: item asClient: clientID withPassword: password throughInterface: interface
	
	| cartId |
	
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: item withCopies: 1.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.! !

!methodRemoval: InternalRestInterfaceTest #xxx:yyy:zzz:www: stamp: 'CJ 12/2/2020 16:47:32'!
xxx: interface yyy: clientID zzz: password www: item
	
	| cartId |
	
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: item withCopies: 1.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:47:55' prior: 50970669!
test07CheckoutCartStoresPurchaseForOneClient

	| interface item clientID password purchases |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	
	self purchaseItem: item asClient: clientID withPassword: password throughInterface: interface.
		
	purchases := interface listPurchasesForClient: clientID withPassword: password.
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).! !

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 16:47:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 16:47:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 16:47:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 16:47:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 16:47:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 16:47:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 16:47:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 16:47:58'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 16:47:58'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:48:35' prior: 50970462!
test08CheckoutCartStoresManyPurchasesForOneClient

	| interface item anotherItem clientID password purchases |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseItem: item asClient: clientID withPassword: password throughInterface: interface.
	self purchaseItem: anotherItem asClient: clientID withPassword: password throughInterface: interface.
		
	purchases := interface listPurchasesForClient: clientID withPassword: password.
	self assert: 3 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).
	self assert: 2 equals: (purchases occurrencesOf: anotherItem).! !

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 16:48:38'!
FAILURE!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 12/2/2020 16:49:11'!
purchaseCopies: copies ofItem: item asClient: clientID withPassword: password throughInterface: interface
	
	| cartId |
	
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: item withCopies: copies.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:49:24' prior: 50970762!
test07CheckoutCartStoresPurchaseForOneClient

	| interface item clientID password purchases |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password throughInterface: interface.
		
	purchases := interface listPurchasesForClient: clientID withPassword: password.
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:49:46' prior: 50970818!
test08CheckoutCartStoresManyPurchasesForOneClient

	| interface item anotherItem clientID password purchases |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password throughInterface: interface.
	self purchaseCopies: 2 ofItem: anotherItem asClient: clientID withPassword: password throughInterface: interface.
		
	purchases := interface listPurchasesForClient: clientID withPassword: password.
	self assert: 3 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).
	self assert: 2 equals: (purchases occurrencesOf: anotherItem).! !

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 16:49:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 16:49:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 16:49:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 16:49:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 16:49:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 16:49:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 16:49:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 16:49:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 16:49:47'!
PASSED!

!classDefinition: #InternalRestInterfaceTest category: '20-TusLibros' stamp: 'CJ 12/2/2020 16:50:29'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'testObjectFactory myInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 12/2/2020 16:50:26' prior: 50967428 overrides: 16927572!
setUp

	myInterface := ''.! !
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 12/2/2020 16:50:53' prior: 50970968 overrides: 16927572!
setUp

	myInterface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:51:23' prior: 50970571!
test01NewCartsAreCreatedEmpty

	| cartId |

	cartId := myInterface createCartForClient: self defaultClientID withPassword: self defaultPassword.
	
	self assert: (myInterface listCart: cartId) isEmpty.! !
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 12/2/2020 16:52:15' prior: 50970973 overrides: 16927572!
setUp

	testObjectFactory := TestObjectFactory new.
	myInterface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 16:52:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 16:52:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 16:52:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 16:52:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 16:52:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 16:52:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 16:52:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 16:52:16'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:52:36' prior: 50970585!
test02CreateCartAuthenticatesUser

	self
		should: [ myInterface createCartForClient: self defaultClientID withPassword: self defaultPassword. ]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 16:52:38'!
FAILURE!

!classDefinition: #InternalRestInterfaceTest category: '20-TusLibros' stamp: 'CJ 12/2/2020 16:53:36'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'testObjectFactory myInterface wrongCredentialsInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 12/2/2020 16:53:34' prior: 50970992 overrides: 16927572!
setUp

	testObjectFactory := TestObjectFactory new.
	myInterface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.
	wrongCredentialsInterface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andMarket: testObjectFactory defaultMarket.! !
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 12/2/2020 16:53:41' prior: 50971055 overrides: 16927572!
setUp

	testObjectFactory := TestObjectFactory new.
	
	myInterface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.
		
	wrongCredentialsInterface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andMarket: testObjectFactory defaultMarket.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:53:50' prior: 50971031!
test02CreateCartAuthenticatesUser

	self
		should: [ wrongCredentialsInterface createCartForClient: self defaultClientID withPassword: self defaultPassword. ]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:54:00' prior: 50971086!
test02CreateCartAuthenticatesUser

	self
		should: [
			wrongCredentialsInterface createCartForClient: self defaultClientID withPassword: self defaultPassword.
			]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 16:54:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 16:54:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 16:54:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 16:54:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 16:54:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 16:54:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 16:54:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 16:54:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 16:54:05'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:54:23' prior: 50969068!
test03CannotAddToCartWithInvalidID

	self
		should: [
			myInterface addToCart: self invalidCartID product: testObjectFactory itemSoldByStore withCopies: 1
			]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 16:54:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 16:54:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 16:54:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 16:54:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 16:54:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 16:54:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 16:54:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 16:54:25'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 16:54:25'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 16:55:21' prior: 50970601!
test04ValidItemIsAddedToCart

	| cartId item |

	cartId := myInterface createCartForClient: self defaultClientID withPassword: self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	myInterface addToCart: cartId product: item withCopies: 1.
	
	self assert: 1 equals: ((myInterface listCart: cartId) occurrencesOf: item).
	self assert: 1 equals: (myInterface listCart: cartId) size.! !

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 16:55:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 16:55:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 16:55:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 16:55:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 16:55:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 16:55:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 16:55:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 16:55:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 16:55:24'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 17:02:27' prior: 50970621!
test05CannotListCartWithInvalidID
	
	self
		should: [ myInterface listCart: self invalidCartID ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 17:02:28'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 17:02:28'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 17:02:28'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 17:02:28'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 17:02:28'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 17:02:28'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 17:02:28'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 17:02:28'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 17:02:28'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 17:02:40' prior: 50970649!
test06CannotCheckoutCartWithInvalidID

	self
		should: [
			myInterface
				checkoutCart: self invalidCartID
				withCCN: testObjectFactory defaultCreditCardNumber 
				andCCED: testObjectFactory dateForNonExpired 
				andCCO: testObjectFactory defaultCreditCardOwner
		]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 17:02:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 17:02:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 17:02:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 17:02:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 17:02:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 17:02:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 17:02:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 17:02:42'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 17:02:42'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 12/2/2020 17:03:21'!
purchaseCopies: copies ofItem: item asClient: clientID withPassword: password
	
	| cartId |
	
	cartId := myInterface createCartForClient: clientID withPassword: password.
	myInterface addToCart: cartId product: item withCopies: copies.
	myInterface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 17:03:38' prior: 50970870!
test07CheckoutCartStoresPurchaseForOneClient

	| interface item clientID password purchases |

	interface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
		
	purchases := myInterface listPurchasesForClient: clientID withPassword: password.
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 17:03:46' prior: 50971339!
test07CheckoutCartStoresPurchaseForOneClient

	| item clientID password purchases |

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
		
	purchases := myInterface listPurchasesForClient: clientID withPassword: password.
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).! !

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 17:03:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 17:03:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 17:03:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 17:03:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 17:03:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 17:03:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 17:03:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 17:03:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 17:03:50'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 17:04:14' prior: 50970894!
test08CheckoutCartStoresManyPurchasesForOneClient

	| item anotherItem clientID password purchases |

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
	self purchaseCopies: 2 ofItem: anotherItem asClient: clientID withPassword: password.
		
	purchases := myInterface listPurchasesForClient: clientID withPassword: password.
	self assert: 3 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).
	self assert: 2 equals: (purchases occurrencesOf: anotherItem).! !

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 17:04:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 17:04:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 17:04:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 17:04:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 17:04:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 17:04:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 17:04:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 17:04:18'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 17:04:18'!
PASSED!

!methodRemoval: InternalRestInterfaceTest #purchaseCopies:ofItem:asClient:withPassword:throughInterface: stamp: 'CJ 12/2/2020 17:04:43'!
purchaseCopies: copies ofItem: item asClient: clientID withPassword: password throughInterface: interface
	
	| cartId |
	
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: item withCopies: copies.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.!

!methodRemoval: InternalRestInterfaceTest #purchaseItem:asClient:withPassword:throughInterface: stamp: 'CJ 12/2/2020 17:04:46'!
purchaseItem: item asClient: clientID withPassword: password throughInterface: interface
	
	| cartId |
	
	cartId := interface createCartForClient: clientID withPassword: password.
	interface addToCart: cartId product: item withCopies: 1.
	interface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.!

!classDefinition: #InternalRestInterfaceTest category: '20-TusLibros' stamp: 'CJ 12/2/2020 17:05:15'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'testObjectFactory defaultInterface wrongCredentialsInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 17:05:15' prior: 50970981!
test01NewCartsAreCreatedEmpty

	| cartId |

	cartId := defaultInterface createCartForClient: self defaultClientID withPassword: self defaultPassword.
	
	self assert: (defaultInterface listCart: cartId) isEmpty.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 17:05:15' prior: 50971233!
test05CannotListCartWithInvalidID
	
	self
		should: [ defaultInterface listCart: self invalidCartID ]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 17:05:15' prior: 50971275!
test06CannotCheckoutCartWithInvalidID

	self
		should: [
			defaultInterface
				checkoutCart: self invalidCartID
				withCCN: testObjectFactory defaultCreditCardNumber 
				andCCED: testObjectFactory dateForNonExpired 
				andCCO: testObjectFactory defaultCreditCardOwner
		]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 17:05:15' prior: 50971071 overrides: 16927572!
setUp

	testObjectFactory := TestObjectFactory new.
	
	defaultInterface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.
		
	wrongCredentialsInterface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andMarket: testObjectFactory defaultMarket.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 17:05:15' prior: 50971362!
test07CheckoutCartStoresPurchaseForOneClient

	| item clientID password purchases |

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 17:05:15' prior: 50971413!
test08CheckoutCartStoresManyPurchasesForOneClient

	| item anotherItem clientID password purchases |

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
	self purchaseCopies: 2 ofItem: anotherItem asClient: clientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	self assert: 3 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).
	self assert: 2 equals: (purchases occurrencesOf: anotherItem).! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 17:05:15' prior: 50971185!
test04ValidItemIsAddedToCart

	| cartId item |

	cartId := defaultInterface createCartForClient: self defaultClientID withPassword: self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	defaultInterface addToCart: cartId product: item withCopies: 1.
	
	self assert: 1 equals: ((defaultInterface listCart: cartId) occurrencesOf: item).
	self assert: 1 equals: (defaultInterface listCart: cartId) size.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 17:05:15' prior: 50971322!
purchaseCopies: copies ofItem: item asClient: clientID withPassword: password
	
	| cartId |
	
	cartId := defaultInterface createCartForClient: clientID withPassword: password.
	defaultInterface addToCart: cartId product: item withCopies: copies.
	defaultInterface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 17:05:15' prior: 50971141!
test03CannotAddToCartWithInvalidID

	self
		should: [
			defaultInterface addToCart: self invalidCartID product: testObjectFactory itemSoldByStore withCopies: 1
			]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 12/2/2020 17:06:53'!
anotherClientID

	^ 'anotherClientId'! !

!methodRemoval: InternalRestInterfaceTest #anotherClientID stamp: 'CJ 12/2/2020 17:06:59'!
anotherClientID

	^ 'anotherClientId'!

!methodRemoval: InternalRestInterfaceTest #defaultCatalog stamp: 'CJ 12/2/2020 17:08:30'!
defaultCatalog
	
	| priceList |

	priceList := Dictionary new.
	priceList
		add: 'item1'->50;
		add: 'item2'->75.

	^ priceList!

!methodRemoval: InternalRestInterfaceTest #productSoldByStore stamp: 'CJ 12/2/2020 17:08:37'!
productSoldByStore
	
	^ 'validBook'!

----SNAPSHOT----(2 December 2020 17:09:03) CuisUniversity-4384.image priorSource: 20411806!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 17:18:53'!
test09CheckoutCartStoresPurchasesForManyClients

	| item anotherItem clientID password purchases |

	clientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
	self purchaseCopies: 2 ofItem: anotherItem asClient: clientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	self assert: 3 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).
	self assert: 2 equals: (purchases occurrencesOf: anotherItem).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 17:19:33' prior: 50971683!
test09CheckoutCartStoresPurchasesForManyClients

	| item anotherItem clientID anotherClientID password purchases |

	clientID := self defaultClientID.
	anotherClientID := self defaultClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
	self purchaseCopies: 2 ofItem: anotherItem asClient: clientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	self assert: 3 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).
	self assert: 2 equals: (purchases occurrencesOf: anotherItem).! !
!InternalRestInterfaceTest methodsFor: 'objects' stamp: 'CJ 12/2/2020 17:19:49'!
anotherClientID

	^ 'aClientId'! !
!InternalRestInterfaceTest methodsFor: 'objects' stamp: 'CJ 12/2/2020 17:19:53' prior: 50971735!
anotherClientID

	^ 'anotherClientId'! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 17:20:22' prior: 50971708!
test09CheckoutCartStoresPurchasesForManyClients

	| item anotherItem clientID anotherClientID password purchases |

	clientID := self defaultClientID.
	anotherClientID := self anotherClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
	self purchaseCopies: 2 ofItem: anotherItem asClient: anotherClientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	self assert: 3 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).
	self assert: 2 equals: (purchases occurrencesOf: anotherItem).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 17:21:55' prior: 50971745!
test09CheckoutCartStoresPurchasesForManyClients

	| item anotherItem clientID anotherClientID password purchases otherPurchases |

	clientID := self defaultClientID.
	anotherClientID := self anotherClientID.
	password := self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
	self purchaseCopies: 2 ofItem: anotherItem asClient: anotherClientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	otherPurchases := defaultInterface listPurchasesForClient: anotherClientID withPassword: password.
	
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).
	self assert: 2 equals: otherPurchases size.
	self assert: 2 equals: (otherPurchases occurrencesOf: anotherItem).! !

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 17:22:11'!
FAILURE!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 12/2/2020 18:48:45' prior: 50970511!
checkoutCart: cartId withCCN: creditCardNumber andCCED: creditCardExpirationDate andCCO: creditCardOwner
	
	| cart creditCard cashier |
	
	cart := self cartWithID: cartId.
	creditCard := CreditCard withNumber: creditCardNumber ownedBy: creditCardOwner expiringOn: creditCardExpirationDate.
	cashier := market createCashier.
	
	cashier checkout: cart withCreditCard: creditCard.
	(purchases at: (self ownerOfCart: cartId)) addAll: cart items.! !

!classDefinition: #InternalRestInterface category: '20-TusLibros' stamp: 'CJ 12/2/2020 18:49:25'!
Object subclass: #InternalRestInterface
	instanceVariableNames: 'authenticator carts currentCartID market purchases cartOwners'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterface methodsFor: 'private' stamp: 'CJ 12/2/2020 18:49:22'!
ownerOfCart: cartId

	^ cartOwners at: cartId ifAbsent: [self error: self class cartDoesntExistErrorDescription ]! !
!InternalRestInterface methodsFor: 'initialization' stamp: 'CJ 12/2/2020 18:49:38' prior: 50969906 overrides: 16896425!
initialize

	carts := Dictionary new.
	cartOwners := Dictionary new.
	currentCartID := 0.
	purchases := Bag new.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 12/2/2020 18:50:21' prior: 50969460!
createCartForClient: aClientId withPassword: aPassword

	| newCartID |

	authenticator authenticateUser: aClientId withPassword: aPassword.
	
	newCartID := self nextID.	
	carts at: newCartID put: market createCart.
	cartOwners at: newCartID put: aClientId.
	
	^ newCartID.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 18:50:26'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 18:50:26'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 18:50:26'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 18:50:26'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 18:50:26'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 18:50:26'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 18:50:26'!
ERROR!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 18:50:26'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 18:50:26'!
ERROR!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 18:50:28'!
ERROR!
!InternalRestInterface methodsFor: 'initialization' stamp: 'CJ 12/2/2020 18:52:27' prior: 50971842 overrides: 16896425!
initialize

	carts := Dictionary new.
	cartOwners := Dictionary new.
	purchases := Dictionary new.
	currentCartID := 0.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 18:52:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 18:52:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 18:52:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 18:52:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 18:52:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 18:52:30'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 18:52:30'!
ERROR!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 18:52:30'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 18:52:30'!
ERROR!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 18:52:32'!
ERROR!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 12/2/2020 18:57:22' prior: 50971808!
checkoutCart: cartId withCCN: creditCardNumber andCCED: creditCardExpirationDate andCCO: creditCardOwner
	
	| cart creditCard cashier clientPurchases |
	
	cart := self cartWithID: cartId.
	creditCard := CreditCard withNumber: creditCardNumber ownedBy: creditCardOwner expiringOn: creditCardExpirationDate.
	cashier := market createCashier.
	
	cashier checkout: cart withCreditCard: creditCard.
	clientPurchases := purchases at: (self ownerOfCart: cartId) ifAbsentPut: Bag new.
	(purchases at: (self ownerOfCart: cartId)) addAll: cart items.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 12/2/2020 18:57:30' prior: 50971943!
checkoutCart: cartId withCCN: creditCardNumber andCCED: creditCardExpirationDate andCCO: creditCardOwner
	
	| cart creditCard cashier clientPurchases |
	
	cart := self cartWithID: cartId.
	creditCard := CreditCard withNumber: creditCardNumber ownedBy: creditCardOwner expiringOn: creditCardExpirationDate.
	cashier := market createCashier.
	
	cashier checkout: cart withCreditCard: creditCard.
	clientPurchases := purchases at: (self ownerOfCart: cartId) ifAbsentPut: Bag new.
	clientPurchases addAll: cart items.! !
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 12/2/2020 18:57:37' prior: 50971963!
checkoutCart: cartId withCCN: creditCardNumber andCCED: creditCardExpirationDate andCCO: creditCardOwner
	
	| cart creditCard cashier clientPurchases |
	
	cart := self cartWithID: cartId.
	creditCard := CreditCard withNumber: creditCardNumber ownedBy: creditCardOwner expiringOn: creditCardExpirationDate.
	cashier := market createCashier.
	
	cashier checkout: cart withCreditCard: creditCard.
	
	clientPurchases := purchases at: (self ownerOfCart: cartId) ifAbsentPut: Bag new.
	clientPurchases addAll: cart items.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 18:57:46'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 18:57:46'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 18:57:46'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 18:57:46'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 18:57:46'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 18:57:46'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 18:57:46'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 18:57:46'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 18:57:46'!
FAILURE!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 18:57:48'!
FAILURE!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 12/2/2020 18:58:04' prior: 50969912!
listPurchasesForClient: aClientId withPassword: aPassword 

	^ purchases at: aClientId.! !

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 18:58:09'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 18:58:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 18:58:11'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 18:58:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 18:58:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 18:58:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 18:58:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 18:58:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 18:58:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 18:58:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 18:58:13'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 18:58:13'!
PASSED!

!classDefinition: #InternalRestInterfaceTest category: '20-TusLibros' stamp: 'CJ 12/2/2020 19:00:57'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'testObjectFactory defaultInterface wrongCredentialsInterface myClientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 12/2/2020 19:00:54' prior: 50971554 overrides: 16927572!
setUp

	testObjectFactory := TestObjectFactory new.
	
	defaultInterface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.
		
	wrongCredentialsInterface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andMarket: testObjectFactory defaultMarket.
		
	myClientID := self defaultClientID.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:01:47' prior: 50971615!
test04ValidItemIsAddedToCart

	| cartId item |

	cartId := defaultInterface createCartForClient: myClientID withPassword: self defaultPassword.
	item := testObjectFactory itemSoldByStore.
	defaultInterface addToCart: cartId product: item withCopies: 1.
	
	self assert: 1 equals: ((defaultInterface listCart: cartId) occurrencesOf: item).
	self assert: 1 equals: (defaultInterface listCart: cartId) size.! !

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 19:01:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 19:01:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 19:01:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 19:01:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 19:01:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 19:01:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 19:01:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 19:01:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 19:01:50'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 19:01:50'!
PASSED!

!classDefinition: #InternalRestInterfaceTest category: '20-TusLibros' stamp: 'CJ 12/2/2020 19:02:16'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'testObjectFactory defaultInterface wrongCredentialsInterface myClientID myPassword'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 12/2/2020 19:02:13' prior: 50972100 overrides: 16927572!
setUp

	testObjectFactory := TestObjectFactory new.
	
	defaultInterface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.
		
	wrongCredentialsInterface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andMarket: testObjectFactory defaultMarket.
		
	myClientID := self defaultClientID.
	myPassword := self defaultPassword.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:02:42' prior: 50972116!
test04ValidItemIsAddedToCart

	| cartId item |

	cartId := defaultInterface createCartForClient: myClientID withPassword: myPassword.
	item := testObjectFactory itemSoldByStore.
	defaultInterface addToCart: cartId product: item withCopies: 1.
	
	self assert: 1 equals: ((defaultInterface listCart: cartId) occurrencesOf: item).
	self assert: 1 equals: (defaultInterface listCart: cartId) size.! !

!classDefinition: #InternalRestInterfaceTest category: '20-TusLibros' stamp: 'CJ 12/2/2020 19:03:13'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'testObjectFactory defaultInterface wrongCredentialsInterface myClientID myPassword myItem'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 12/2/2020 19:03:10' prior: 50972180 overrides: 16927572!
setUp

	testObjectFactory := TestObjectFactory new.
	
	defaultInterface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.
		
	wrongCredentialsInterface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andMarket: testObjectFactory defaultMarket.
		
	myClientID := self defaultClientID.
	myPassword := self defaultPassword.
	
	myItem := testObjectFactory itemSoldByStore.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:03:36' prior: 50972198!
test04ValidItemIsAddedToCart

	| cartId |

	cartId := defaultInterface createCartForClient: myClientID withPassword: myPassword.
	defaultInterface addToCart: cartId product: myItem withCopies: 1.
	
	self assert: 1 equals: ((defaultInterface listCart: cartId) occurrencesOf: myItem).
	self assert: 1 equals: (defaultInterface listCart: cartId) size.! !

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 19:03:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 19:03:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 19:03:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 19:03:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 19:03:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 19:03:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 19:03:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 19:03:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 19:03:38'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 19:03:38'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:04:34' prior: 50971570!
test07CheckoutCartStoresPurchaseForOneClient

	| purchases |

	self purchaseCopies: 1 ofItem: myItem asClient: myClientID withPassword: myPassword.
		
	purchases := defaultInterface listPurchasesForClient: myClientID withPassword: myPassword.
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: myItem).! !

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 19:04:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 19:04:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 19:04:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 19:04:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 19:04:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 19:04:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 19:04:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 19:04:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 19:04:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 19:04:47'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:05:49' prior: 50971589!
test08CheckoutCartStoresManyPurchasesForOneClient

	| anotherItem purchases |

	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: myItem asClient: myClientID withPassword: myPassword.
	self purchaseCopies: 2 ofItem: anotherItem asClient: myClientID withPassword: myPassword.
		
	purchases := defaultInterface listPurchasesForClient: myClientID withPassword: myPassword.
	self assert: 3 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: myItem).
	self assert: 2 equals: (purchases occurrencesOf: anotherItem).! !

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 19:06:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 19:06:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 19:06:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 19:06:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 19:06:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 19:06:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 19:06:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 19:06:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 19:06:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 19:06:01'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:07:10' prior: 50971772!
test09CheckoutCartStoresPurchasesForManyClients

	| anotherItem anotherClientID purchases otherPurchases |

	anotherClientID := self anotherClientID.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: myItem asClient: myClientID withPassword: myPassword.
	self purchaseCopies: 2 ofItem: anotherItem asClient: anotherClientID withPassword: myPassword.
		
	purchases := defaultInterface listPurchasesForClient: myClientID withPassword: myPassword.
	otherPurchases := defaultInterface listPurchasesForClient: anotherClientID withPassword: myPassword.
	
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: myItem).
	self assert: 2 equals: otherPurchases size.
	self assert: 2 equals: (otherPurchases occurrencesOf: anotherItem).! !

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 19:07:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 19:07:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 19:07:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 19:07:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 19:07:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 19:07:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 19:07:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 19:07:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 19:07:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 19:07:24'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 12/2/2020 19:08:20' prior: 50971632!
purchaseCopies: copies ofItem: item asClient: aClientID withPassword: password
	
	| cartId |
	
	cartId := defaultInterface createCartForClient: aClientID withPassword: password.
	defaultInterface addToCart: cartId product: item withCopies: copies.
	defaultInterface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.! !
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 12/2/2020 19:08:30' prior: 50972470!
purchaseCopies: copies ofItem: itemToPurchase asClient: aClientID withPassword: password
	
	| cartId |
	
	cartId := defaultInterface createCartForClient: aClientID withPassword: password.
	defaultInterface addToCart: cartId product: itemToPurchase withCopies: copies.
	defaultInterface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.! !
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 12/2/2020 19:08:48' prior: 50972487!
purchaseCopies: copies ofItem: itemToPurchase asClient: aClientID withPassword: aPassword
	
	| cartId |
	
	cartId := defaultInterface createCartForClient: aClientID withPassword: aPassword.
	defaultInterface addToCart: cartId product: itemToPurchase withCopies: copies.
	defaultInterface
		checkoutCart: cartId
		withCCN: testObjectFactory defaultCreditCardNumber 
		andCCED: testObjectFactory dateForNonExpired
		andCCO: testObjectFactory defaultCreditCardOwner.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 19:08:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 19:08:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 19:08:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 19:08:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 19:08:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 19:08:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 19:08:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 19:08:54'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 19:08:54'!
PASSED!

!classDefinition: #InternalRestInterfaceTest category: '20-TusLibros' stamp: 'CJ 12/2/2020 19:09:03'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'testObjectFactory defaultInterface wrongCredentialsInterface clientID myPassword myItem'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 19:09:03' prior: 50972244!
test04ValidItemIsAddedToCart

	| cartId |

	cartId := defaultInterface createCartForClient: clientID withPassword: myPassword.
	defaultInterface addToCart: cartId product: myItem withCopies: 1.
	
	self assert: 1 equals: ((defaultInterface listCart: cartId) occurrencesOf: myItem).
	self assert: 1 equals: (defaultInterface listCart: cartId) size.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 19:09:03' prior: 50972225 overrides: 16927572!
setUp

	testObjectFactory := TestObjectFactory new.
	
	defaultInterface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.
		
	wrongCredentialsInterface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andMarket: testObjectFactory defaultMarket.
		
	clientID := self defaultClientID.
	myPassword := self defaultPassword.
	
	myItem := testObjectFactory itemSoldByStore.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 19:09:03' prior: 50972404!
test09CheckoutCartStoresPurchasesForManyClients

	| anotherItem anotherClientID purchases otherPurchases |

	anotherClientID := self anotherClientID.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: myItem asClient: clientID withPassword: myPassword.
	self purchaseCopies: 2 ofItem: anotherItem asClient: anotherClientID withPassword: myPassword.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: myPassword.
	otherPurchases := defaultInterface listPurchasesForClient: anotherClientID withPassword: myPassword.
	
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: myItem).
	self assert: 2 equals: otherPurchases size.
	self assert: 2 equals: (otherPurchases occurrencesOf: anotherItem).! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 19:09:03' prior: 50972295!
test07CheckoutCartStoresPurchaseForOneClient

	| purchases |

	self purchaseCopies: 1 ofItem: myItem asClient: clientID withPassword: myPassword.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: myPassword.
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: myItem).! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 19:09:03' prior: 50972346!
test08CheckoutCartStoresManyPurchasesForOneClient

	| anotherItem purchases |

	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: myItem asClient: clientID withPassword: myPassword.
	self purchaseCopies: 2 ofItem: anotherItem asClient: clientID withPassword: myPassword.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: myPassword.
	self assert: 3 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: myItem).
	self assert: 2 equals: (purchases occurrencesOf: anotherItem).! !

!classDefinition: #InternalRestInterfaceTest category: '20-TusLibros' stamp: 'CJ 12/2/2020 19:09:10'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'testObjectFactory defaultInterface wrongCredentialsInterface clientID password myItem'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 19:09:10' prior: 50972567!
test04ValidItemIsAddedToCart

	| cartId |

	cartId := defaultInterface createCartForClient: clientID withPassword: password.
	defaultInterface addToCart: cartId product: myItem withCopies: 1.
	
	self assert: 1 equals: ((defaultInterface listCart: cartId) occurrencesOf: myItem).
	self assert: 1 equals: (defaultInterface listCart: cartId) size.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 19:09:10' prior: 50972582 overrides: 16927572!
setUp

	testObjectFactory := TestObjectFactory new.
	
	defaultInterface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.
		
	wrongCredentialsInterface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andMarket: testObjectFactory defaultMarket.
		
	clientID := self defaultClientID.
	password := self defaultPassword.
	
	myItem := testObjectFactory itemSoldByStore.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 19:09:10' prior: 50972601!
test09CheckoutCartStoresPurchasesForManyClients

	| anotherItem anotherClientID purchases otherPurchases |

	anotherClientID := self anotherClientID.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: myItem asClient: clientID withPassword: password.
	self purchaseCopies: 2 ofItem: anotherItem asClient: anotherClientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	otherPurchases := defaultInterface listPurchasesForClient: anotherClientID withPassword: password.
	
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: myItem).
	self assert: 2 equals: otherPurchases size.
	self assert: 2 equals: (otherPurchases occurrencesOf: anotherItem).! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 19:09:10' prior: 50972630!
test07CheckoutCartStoresPurchaseForOneClient

	| purchases |

	self purchaseCopies: 1 ofItem: myItem asClient: clientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: myItem).! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 19:09:10' prior: 50972645!
test08CheckoutCartStoresManyPurchasesForOneClient

	| anotherItem purchases |

	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: myItem asClient: clientID withPassword: password.
	self purchaseCopies: 2 ofItem: anotherItem asClient: clientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	self assert: 3 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: myItem).
	self assert: 2 equals: (purchases occurrencesOf: anotherItem).! !

!classDefinition: #InternalRestInterfaceTest category: '20-TusLibros' stamp: 'CJ 12/2/2020 19:09:16'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'testObjectFactory defaultInterface wrongCredentialsInterface clientID password item'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 19:09:16' prior: 50972677!
test04ValidItemIsAddedToCart

	| cartId |

	cartId := defaultInterface createCartForClient: clientID withPassword: password.
	defaultInterface addToCart: cartId product: item withCopies: 1.
	
	self assert: 1 equals: ((defaultInterface listCart: cartId) occurrencesOf: item).
	self assert: 1 equals: (defaultInterface listCart: cartId) size.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 19:09:16' prior: 50972692 overrides: 16927572!
setUp

	testObjectFactory := TestObjectFactory new.
	
	defaultInterface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.
		
	wrongCredentialsInterface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andMarket: testObjectFactory defaultMarket.
		
	clientID := self defaultClientID.
	password := self defaultPassword.
	
	item := testObjectFactory itemSoldByStore.! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 19:09:16' prior: 50972711!
test09CheckoutCartStoresPurchasesForManyClients

	| anotherItem anotherClientID purchases otherPurchases |

	anotherClientID := self anotherClientID.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
	self purchaseCopies: 2 ofItem: anotherItem asClient: anotherClientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	otherPurchases := defaultInterface listPurchasesForClient: anotherClientID withPassword: password.
	
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).
	self assert: 2 equals: otherPurchases size.
	self assert: 2 equals: (otherPurchases occurrencesOf: anotherItem).! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 19:09:16' prior: 50972740!
test07CheckoutCartStoresPurchaseForOneClient

	| purchases |

	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).! !
!InternalRestInterfaceTest methodsFor: 'as yet unclassified' stamp: 'CJ 12/2/2020 19:09:16' prior: 50972754!
test08CheckoutCartStoresManyPurchasesForOneClient

	| anotherItem purchases |

	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
	self purchaseCopies: 2 ofItem: anotherItem asClient: clientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	self assert: 3 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).
	self assert: 2 equals: (purchases occurrencesOf: anotherItem).! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 19:09:22'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 19:09:22'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 19:09:22'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 19:09:22'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 19:09:22'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 19:09:22'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 19:09:22'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 19:09:22'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 19:09:22'!
PASSED!

----SNAPSHOT----(2 December 2020 19:09:56) CuisUniversity-4384.image priorSource: 20480939!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:14:52'!
test10ListPurchasesAuthenticatesUser

	| anotherItem anotherClientID purchases otherPurchases |

	anotherClientID := self anotherClientID.
	anotherItem := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
	self purchaseCopies: 2 ofItem: anotherItem asClient: anotherClientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	otherPurchases := defaultInterface listPurchasesForClient: anotherClientID withPassword: password.
	
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).
	self assert: 2 equals: otherPurchases size.
	self assert: 2 equals: (otherPurchases occurrencesOf: anotherItem).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:15:18' prior: 50972919!
test10ListPurchasesAuthenticatesUser

	self
		should: [
			wrongCredentialsInterface createCartForClient: self defaultClientID withPassword: self defaultPassword.
			]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:15:35' prior: 50972947!
test10ListPurchasesAuthenticatesUser

	self
		should: [
			wrongCredentialsInterface listPurchasesForClient: clientID withPassword: password.
			]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.! !

!testRun: #InternalRestInterfaceTest #test10ListPurchasesAuthenticatesUser stamp: 'CJ 12/2/2020 19:15:36'!
FAILURE!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 12/2/2020 19:16:12' prior: 50972038!
listPurchasesForClient: aClientId withPassword: aPassword

	authenticator authenticateUser: aClientId withPassword: aPassword.

	^ purchases at: aClientId.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 19:16:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 19:16:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 19:16:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 19:16:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 19:16:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 19:16:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 19:16:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 19:16:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 19:16:24'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10ListPurchasesAuthenticatesUser stamp: 'CJ 12/2/2020 19:16:24'!
PASSED!
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:17:25' prior: 50972863!
test08CheckoutCartStoresManyPurchasesForOneClient

	| anotherItem2 purchases |

	anotherItem2 := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
	self purchaseCopies: 2 ofItem: anotherItem2 asClient: clientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	self assert: 3 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).
	self assert: 2 equals: (purchases occurrencesOf: anotherItem2).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:17:33' prior: 50972820!
test09CheckoutCartStoresPurchasesForManyClients

	| anotherItem2 anotherClientID purchases otherPurchases |

	anotherClientID := self anotherClientID.
	anotherItem2 := testObjectFactory anotherItemSoldByStore.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
	self purchaseCopies: 2 ofItem: anotherItem2 asClient: anotherClientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	otherPurchases := defaultInterface listPurchasesForClient: anotherClientID withPassword: password.
	
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).
	self assert: 2 equals: otherPurchases size.
	self assert: 2 equals: (otherPurchases occurrencesOf: anotherItem2).! !

!classDefinition: #InternalRestInterfaceTest category: '20-TusLibros' stamp: 'CJ 12/2/2020 19:17:55'!
TestCase subclass: #InternalRestInterfaceTest
	instanceVariableNames: 'testObjectFactory defaultInterface wrongCredentialsInterface clientID password item anotherItem'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!InternalRestInterfaceTest methodsFor: 'support' stamp: 'CJ 12/2/2020 19:17:53' prior: 50972801 overrides: 16927572!
setUp

	testObjectFactory := TestObjectFactory new.
	
	defaultInterface := InternalRestInterface
		withAuthenticator: testObjectFactory defaultAuthenticator
		andMarket: testObjectFactory defaultMarket.
		
	wrongCredentialsInterface := InternalRestInterface
		withAuthenticator: testObjectFactory wrongCredentialsAuthenticator
		andMarket: testObjectFactory defaultMarket.
		
	clientID := self defaultClientID.
	password := self defaultPassword.
	
	item := testObjectFactory itemSoldByStore.
	anotherItem := testObjectFactory anotherItemSoldByStore.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:18:15' prior: 50973017!
test08CheckoutCartStoresManyPurchasesForOneClient

	| purchases |
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
	self purchaseCopies: 2 ofItem: anotherItem asClient: clientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	self assert: 3 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).
	self assert: 2 equals: (purchases occurrencesOf: anotherItem).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:18:40' prior: 50973038!
test09CheckoutCartStoresPurchasesForManyClients

	| anotherClientID purchases otherPurchases |

	anotherClientID := self anotherClientID.
	
	self purchaseCopies: 1 ofItem: item asClient: clientID withPassword: password.
	self purchaseCopies: 2 ofItem: anotherItem asClient: anotherClientID withPassword: password.
		
	purchases := defaultInterface listPurchasesForClient: clientID withPassword: password.
	otherPurchases := defaultInterface listPurchasesForClient: anotherClientID withPassword: password.
	
	self assert: 1 equals: purchases size.
	self assert: 1 equals: (purchases occurrencesOf: item).
	self assert: 2 equals: otherPurchases size.
	self assert: 2 equals: (otherPurchases occurrencesOf: anotherItem).! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:19:06' prior: 50971097!
test02CreateCartAuthenticatesUser

	self
		should: [
			wrongCredentialsInterface createCartForClient: clientID withPassword: password .
			]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:19:07' prior: 50973144!
test02CreateCartAuthenticatesUser

	self
		should: [
			wrongCredentialsInterface createCartForClient: clientID withPassword: password.
			]
		raise: Error
		withMessageText: Authenticator wrongCredentialsErrorDescription.! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:19:20' prior: 50971650!
test03CannotAddToCartWithInvalidID

	self
		should: [
			defaultInterface addToCart: self invalidCartID product: item withCopies: 1
			]
		raise: Error
		withMessageText: InternalRestInterface cartDoesntExistErrorDescription.! !

----SNAPSHOT----(2 December 2020 19:20:30) CuisUniversity-4384.image priorSource: 20520494!
!CartTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:23:50' prior: 50966737!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: testObjectFactory itemSoldByStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:23:57' prior: 50966744!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: testObjectFactory itemSoldByStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:24:05' prior: 50966756!
test05CanNotAddMoreThanOneItemNotSoldByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: testObjectFactory itemNotSoldByStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:24:12' prior: 50966769!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: testObjectFactory itemSoldByStore.
	self assert: (cart includes: self itemSoldByStore)! !
!CartTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:24:21' prior: 50973213!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: testObjectFactory itemSoldByStore.
	self assert: (cart includes: testObjectFactory itemSoldByStore)! !
!CartTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:24:28' prior: 50966776!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: testObjectFactory itemSoldByStore)! !
!CartTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:24:41' prior: 50966782!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: testObjectFactory itemSoldByStore.
	self assert: (cart occurrencesOf: testObjectFactory itemSoldByStore) = 2! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 12/2/2020 19:24:42'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 19:24:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 12/2/2020 19:24:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 12/2/2020 19:24:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 12/2/2020 19:24:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 12/2/2020 19:24:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 12/2/2020 19:24:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 12/2/2020 19:24:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 12/2/2020 19:24:42'!
PASSED!

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 12/2/2020 19:24:42'!
PASSED!

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 12/2/2020 19:24:42'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:24:52' prior: 50966790!
test09CartCalculatesCostOfSingleItemCorrectly

	| cart |
	
	cart := self createCart.
	
	cart add: 1 of: testObjectFactory itemSoldByStore.
	self assert: (cart totalItemCost) = testObjectFactory itemSoldByStorePrice ! !

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 12/2/2020 19:24:53'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 19:24:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 12/2/2020 19:24:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 12/2/2020 19:24:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 12/2/2020 19:24:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 12/2/2020 19:24:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 12/2/2020 19:24:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 12/2/2020 19:24:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 12/2/2020 19:24:53'!
PASSED!

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 12/2/2020 19:24:53'!
PASSED!

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 12/2/2020 19:24:53'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 19:25:14' prior: 50966798!
test10CartCalculatesCostOfManyItemsCorrectly

	| cart expectedTotal |
	
	cart := self createCart.
	
	cart add: 2 of: testObjectFactory itemSoldByStore.
	cart add: 3 of: testObjectFactory anotherItemSoldByStore.
	
	expectedTotal := (testObjectFactory itemSoldByStorePrice * 2) + (testObjectFactory anotherItemSoldByStorePrice * 3).

	self assert: cart totalItemCost = expectedTotal.! !

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 12/2/2020 19:25:16'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 19:25:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 12/2/2020 19:25:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 12/2/2020 19:25:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 12/2/2020 19:25:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 12/2/2020 19:25:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 12/2/2020 19:25:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 12/2/2020 19:25:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 12/2/2020 19:25:16'!
PASSED!

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 12/2/2020 19:25:16'!
PASSED!

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 12/2/2020 19:25:16'!
PASSED!

!methodRemoval: CartTest #anotherItemSoldByStore stamp: 'CJ 12/2/2020 19:25:40'!
anotherItemSoldByStore
	
	^ 'anotherValidBook'!
!CartTest methodsFor: 'support' stamp: 'CJ 12/2/2020 19:25:57' prior: 50966824!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog
		add: self itemSoldByStore -> testObjectFactory  itemSoldByStorePrice;
		add: self anotherItemSoldByStore -> testObjectFactory  anotherItemSoldByStorePrice.
	
	^ catalog.! !
!CartTest methodsFor: 'support' stamp: 'CJ 12/2/2020 19:26:06' prior: 50973381!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog
		add: testObjectFactory itemSoldByStore -> testObjectFactory  itemSoldByStorePrice;
		add: testObjectFactory  anotherItemSoldByStore -> testObjectFactory anotherItemSoldByStorePrice.
	
	^ catalog.! !
!CartTest methodsFor: 'support' stamp: 'CJ 12/2/2020 19:26:10' prior: 50973392!
defaultCatalog
	
	| catalog |
	
	catalog := Dictionary new.
	catalog
		add: testObjectFactory itemSoldByStore -> testObjectFactory  itemSoldByStorePrice;
		add: testObjectFactory anotherItemSoldByStore -> testObjectFactory anotherItemSoldByStorePrice.
	
	^ catalog.! !
!CashierTest methodsFor: 'support' stamp: 'CJ 12/2/2020 21:07:38' prior: 50967046!
cartWithManyItems

	| catalog cart |

	catalog := self defaultCatalog.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: catalog keys first.
	cart add: 1 of: catalog keys second.

	^ cart.! !

!classDefinition: #CashierTest category: '20-TusLibros' stamp: 'CJ 12/2/2020 21:08:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!CashierTest methodsFor: 'support' stamp: 'CJ 12/2/2020 21:08:04' overrides: 16927572!
setUp

	testObjectFactory := TestObjectFactory new.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:08:25' prior: 50966849!
test01NewCashierHasNoSales

	| cashier |
	
	cashier := Cashier withMerchantProcessor: testObjectFactory workingMerchantProcessor.
	
	self assert: cashier salesMade isEmpty.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:08:26'!
ERROR!
!TestObjectFactory methodsFor: 'support' stamp: 'CJ 12/2/2020 21:08:58'!
workingMerchantProcessor
	
	^ MerchantProcessorSimulator working.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:09:37'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:09:37'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:09:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:09:37'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:09:37'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:09:37'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:09:37'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:09:37'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:09:37'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:09:37'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:09:49' prior: 50966857!
test02CannotCheckoutOnEmptyCart

	| cart cashier |
	
	cashier := Cashier withMerchantProcessor: testObjectFactory workingMerchantProcessor.
	cart := self emptyCart.
	
	self
		should: [ cashier checkout: cart withCreditCard: self defaultCreditCard ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:09:55' prior: 50973485!
test02CannotCheckoutOnEmptyCart

	| cart cashier |
	
	cashier := Cashier withMerchantProcessor: testObjectFactory workingMerchantProcessor.
	cart := self emptyCart.
	
	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:09:57'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:09:57'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:09:57'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:09:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:09:57'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:09:57'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:09:57'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:09:57'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:09:57'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:09:57'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:09:57'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:10:12' prior: 50966871!
test03CashierRegistersSaleOnCheckout

	| cart cashier |

	cashier := Cashier withMerchantProcessor: testObjectFactory workingMerchantProcessor.
	cart := self cartWithManyItems.
	
	cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard.

	self assert: 1 equals: cashier salesMade size.! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:10:13'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:10:13'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:10:13'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:10:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:10:13'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:10:13'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:10:13'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:10:13'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:10:13'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:10:13'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:10:13'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:10:25' prior: 50966882!
test04CheckoutWithInsufficientFundsIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: testObjectFactory insufficientFundsMerchantProcessor.
	cart := self cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor insufficientFundsErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:10:29' prior: 50973599!
test04CheckoutWithInsufficientFundsIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: testObjectFactory insufficientFundsMerchantProcessor.
	cart := testObjectFactory cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor insufficientFundsErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:10:31'!
ERROR!
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:10:49'!
insufficientFundsMerchantProcessor
	
	^ MerchantProcessorSimulator insufficientFunds.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:10:57'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:10:57'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:10:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:10:57'!
ERROR!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:10:57'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:10:57'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:10:57'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:10:57'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:10:57'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:10:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:10:57'!
ERROR!
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:11:16'!
cartWithManyItems

	| catalog cart |

	catalog := self defaultCatalog.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: catalog keys first.
	cart add: 1 of: catalog keys second.

	^ cart.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:11:20'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:11:20'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:11:20'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:11:20'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:11:20'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:11:20'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:11:20'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:11:20'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:11:20'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:11:20'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:11:45' prior: 50966897!
test05CheckoutWithExpiredCreditCardIsRejected

	| cart cashier merchantProcessor |

	merchantProcessor := testObjectFactory workingMerchantProcessor.
	cashier := Cashier withMerchantProcessor: merchantProcessor.
	cart := self cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory expiredCreditCard. ]
		raise: Error
		withMessageText: Cashier expiredCreditCardErrorDescription.
	
	self assert: cashier salesMade isEmpty.
	self assert: 0 equals: merchantProcessor requestsMade.! !

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:11:50'!
FAILURE!
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:12:11'!
expiredCreditCard
	
	^ CreditCard
		withNumber: '7511117511117511'
		ownedBy: 'Norbert Degoas'
		expiringOn: (self dateForExpired).! !

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 12/2/2020 21:12:24'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 12/2/2020 21:12:24'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 12/2/2020 21:12:24'!
PASSED!

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 12/2/2020 21:12:24'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:12:27'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:12:27'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:12:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:12:27'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:12:27'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:12:27'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:12:27'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:12:27'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:12:27'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:12:27'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:14:00' prior: 50966915!
test06CheckoutWithInvalidCreditCardIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: testObjectFactory invalidCreditCardMerchantProcessor.
	cart := self cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor invalidCreditCardErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:14:01'!
ERROR!
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:14:45'!
invalidCreditCardMerchantProcessor
	
	^ MerchantProcessorSimulator invalidCreditCard.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:14:49'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:14:49'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:14:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:14:49'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:14:49'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:14:49'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:14:49'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:14:49'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:14:49'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:14:49'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:15:09' prior: 50966930!
test07CheckoutReturnsCorrectInformationForCartWithOneItem

	| cart cashier receipt creditCard |

	cashier := Cashier withMerchantProcessor: testObjectFactory workingMerchantProcessor.
	cart := self cartWithOneItem.
	creditCard := self defaultCreditCard.

	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assertReceipt: receipt isCorrectForCart: cart.
	self assert: creditCard ownerName equals: (receipt at: #madeTo).
	self assert: (receipt at: #transactionID) equals: MerchantProcessorSimulator defaultTransactionID.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:15:25' prior: 50973856!
test07CheckoutReturnsCorrectInformationForCartWithOneItem

	| cart cashier receipt creditCard |

	cashier := Cashier withMerchantProcessor: testObjectFactory workingMerchantProcessor.
	cart := testObjectFactory cartWithOneItem.
	creditCard := testObjectFactory defaultCreditCard.

	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assertReceipt: receipt isCorrectForCart: cart.
	self assert: creditCard ownerName equals: (receipt at: #madeTo).
	self assert: (receipt at: #transactionID) equals: MerchantProcessorSimulator defaultTransactionID.! !

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:15:28'!
ERROR!
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:15:42'!
cartWithOneItem

	| catalog cart |

	catalog := self defaultCatalog.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: catalog keys first.

	^ cart.! !
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:16:09' prior: 50973900!
cartWithOneItem

	| catalog cart |

	catalog := self defaultCatalog.
	
	cart := self createCart.
	cart add: 1 of: catalog keys first.

	^ cart.! !
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:16:18' prior: 50973677!
cartWithManyItems

	| catalog cart |

	catalog := self defaultCatalog.
	
	cart := self createCart.
	cart add: 1 of: catalog keys first.
	cart add: 1 of: catalog keys second.

	^ cart.! !
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:17:03' prior: 50973743!
expiredCreditCard
	
	^ CreditCard
		withNumber: self defaultCreditCardNumber
		ownedBy: self defaultCreditCardOwner
		expiringOn: (self dateForExpired).! !
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:17:08' prior: 50973925!
expiredCreditCard
	
	^ CreditCard
		withNumber: self defaultCreditCardNumber
		ownedBy: self defaultCreditCardOwner
		expiringOn: self dateForExpired.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:18:21' prior: 50966949!
test08CheckoutReturnsCorrectAmountForCartWithManyItems

	| cart cashier receipt creditCard |

	cashier := Cashier withMerchantProcessor: testObjectFactory workingMerchantProcessor.
	cart := testObjectFactory cartWithManyItems.
	creditCard := testObjectFactory defaultCreditCard.
	
	receipt := cashier checkout: cart withCreditCard: creditCard.
	
	self assertReceipt: receipt isCorrectForCart: cart.! !

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:18:23'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:18:23'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:18:23'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:18:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:18:23'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:18:23'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:18:23'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:18:23'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:18:23'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:18:23'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:18:23'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:18:51' prior: 50966963!
test09SalesAreRecordedCorrectly

	| cart1 cart2 cashier receipt1 receipt2 creditCard salesMade |

	cashier := Cashier withMerchantProcessor: testObjectFactory workingMerchantProcessor.
	cart1 := testObjectFactory cartWithManyItems.
	cart2 := testObjectFactory cartWithManyItems.
	creditCard := testObjectFactory defaultCreditCard.
	
	receipt1 := cashier checkout: cart1 withCreditCard: creditCard.
	receipt2 := cashier checkout: cart2 withCreditCard: creditCard.
	salesMade := cashier salesMade.
	
	self assert: 2 equals: salesMade size.
	self assert: (salesMade includes: receipt1).
	self assert: (salesMade includes: receipt2).! !

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:18:53'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:18:53'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:18:53'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:18:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:18:53'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:18:53'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:18:53'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:18:53'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:18:53'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:18:53'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:18:53'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:19:04' prior: 50966984!
test10CashierCallsMerchantProcessor

	| cart cashier merchantProcessor |
	
	merchantProcessor := testObjectFactory workingMerchantProcessor.
	cashier := Cashier withMerchantProcessor: merchantProcessor.
	cart := testObjectFactory cartWithManyItems.
	
	cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard.

	self assert: 1 equals: merchantProcessor requestsMade.! !

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:19:06'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:19:06'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:19:06'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:19:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:19:06'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:19:06'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:19:06'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:19:06'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:19:06'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:19:06'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:19:06'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:19:40' prior: 50973797!
test06CheckoutWithInvalidCreditCardIsRejected

	| cart cashier |

	cashier := Cashier withMerchantProcessor: testObjectFactory invalidCreditCardMerchantProcessor.
	cart := testObjectFactory cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor invalidCreditCardErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:19:47' prior: 50973550!
test03CashierRegistersSaleOnCheckout

	| cart cashier |

	cashier := Cashier withMerchantProcessor: testObjectFactory workingMerchantProcessor.
	cart := testObjectFactory cartWithManyItems.
	
	cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard.

	self assert: 1 equals: cashier salesMade size.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:20:02' prior: 50973720!
test05CheckoutWithExpiredCreditCardIsRejected

	| cart cashier merchantProcessor |

	merchantProcessor := testObjectFactory workingMerchantProcessor.
	cashier := Cashier withMerchantProcessor: merchantProcessor.
	cart := testObjectFactory cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory expiredCreditCard. ]
		raise: Error
		withMessageText: Cashier expiredCreditCardErrorDescription.
	
	self assert: cashier salesMade isEmpty.
	self assert: 0 equals: merchantProcessor requestsMade.! !

!methodRemoval: CashierTest #cartWithManyItems stamp: 'CJ 12/2/2020 21:20:25'!
cartWithManyItems

	| catalog cart |

	catalog := self defaultCatalog.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: catalog keys first.
	cart add: 1 of: catalog keys second.

	^ cart.!

!methodRemoval: CashierTest #cartWithOneItem stamp: 'CJ 12/2/2020 21:20:39'!
cartWithOneItem

	| catalog cart |

	catalog := self defaultCatalog.
	
	cart := Cart acceptingItemsOf: catalog.
	cart add: 1 of: catalog keys first.

	^ cart.!

!methodRemoval: CashierTest #defaultCreditCard stamp: 'CJ 12/2/2020 21:21:01'!
defaultCreditCard
	
	^ CreditCard
		withNumber: '7511117511117511'
		ownedBy: 'Norbert Degoas'
		expiringOn: (self dateForNonExpired).!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:21:08'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:21:08'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:21:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:21:08'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:21:08'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:21:08'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:21:08'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:21:08'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:21:08'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:21:08'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:21:22' prior: 50973499!
test02CannotCheckoutOnEmptyCart

	| cart cashier |
	
	cashier := Cashier withMerchantProcessor: testObjectFactory workingMerchantProcessor.
	cart := testObjectFactory emptyCart.
	
	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:21:25'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:21:25'!
ERROR!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:21:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:21:25'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:21:25'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:21:25'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:21:25'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:21:25'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:21:25'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:21:25'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:21:25'!
ERROR!
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:21:51'!
emptyCart

	^ self createCart.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:21:57'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:21:57'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:21:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:21:57'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:21:57'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:21:57'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:21:57'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:21:57'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:21:57'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:21:57'!
PASSED!

!methodRemoval: CashierTest #emptyCart stamp: 'CJ 12/2/2020 21:22:13'!
emptyCart

	^ Cart acceptingItemsOf: self defaultCatalog.!

!methodRemoval: CashierTest #expiredCreditCard stamp: 'CJ 12/2/2020 21:22:33'!
expiredCreditCard
	
	^ CreditCard
		withNumber: '7511117511117511'
		ownedBy: 'Norbert Degoas'
		expiringOn: (self dateForExpired).!

!methodRemoval: CashierTest #insufficientFundsMerchantProcessor stamp: 'CJ 12/2/2020 21:22:48'!
insufficientFundsMerchantProcessor
	
	^ MerchantProcessorSimulator insufficientFunds.!

!methodRemoval: CashierTest #invalidCreditCardMerchantProcessor stamp: 'CJ 12/2/2020 21:22:57'!
invalidCreditCardMerchantProcessor
	
	^ MerchantProcessorSimulator invalidCreditCard.!

!methodRemoval: CashierTest #workingMerchantProcessor stamp: 'CJ 12/2/2020 21:23:01'!
workingMerchantProcessor
	
	^ MerchantProcessorSimulator working.!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:23:03'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:23:03'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:23:03'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:23:03'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:23:03'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:23:03'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:23:03'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:23:03'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:23:03'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:23:03'!
PASSED!

!methodRemoval: CashierTest #dateForExpired stamp: 'CJ 12/2/2020 21:23:27'!
dateForExpired

	^ GregorianMonthOfYear year: GregorianYear current month: GregorianMonth current previous!

!methodRemoval: CashierTest #dateForNonExpired stamp: 'CJ 12/2/2020 21:23:30'!
dateForNonExpired

	^ GregorianMonthOfYear year: GregorianYear current month: GregorianMonth current!

!methodRemoval: CashierTest #defaultCatalog stamp: 'CJ 12/2/2020 21:23:32'!
defaultCatalog

	| priceList |

	priceList := Dictionary new.
	priceList
		add: 'item1'->50;
		add: 'item2'->75.

	^ priceList!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:23:37'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:23:37'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:23:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:23:37'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:23:37'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:23:37'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:23:37'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:23:37'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:23:37'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:23:37'!
PASSED!

!classDefinition: #CreditCardTest category: '20-TusLibros' stamp: 'CJ 12/2/2020 21:25:14'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!CreditCardTest methodsFor: 'support' stamp: 'CJ 12/2/2020 21:25:12' overrides: 16927572!
setUp

	testObjectFactory := TestObjectFactory new.! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:25:54' prior: 50967097!
test01NumberLengthMustBeCorrect

	self
		should: [ CreditCard withNumber: self numberWithFewerDigits ownedBy: testObjectFactory defaultName expiringOn: testObjectFactory dateForNonExpired ]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.
		
	self
		should: [ CreditCard withNumber: self numberWithMoreDigits ownedBy: testObjectFactory defaultName expiringOn: testObjectFactory dateForNonExpired ]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.! !

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 12/2/2020 21:25:54'!
PASSED!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 12/2/2020 21:25:54'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 12/2/2020 21:25:54'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 12/2/2020 21:25:54'!
PASSED!

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 12/2/2020 21:25:54'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:26:20' prior: 50974424!
test01NumberLengthMustBeCorrect

	self
		should: [
			CreditCard withNumber: self numberWithFewerDigits ownedBy: testObjectFactory defaultName expiringOn: testObjectFactory dateForNonExpired
			]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.
		
	self
		should: [
			CreditCard withNumber: self numberWithMoreDigits ownedBy: testObjectFactory defaultName expiringOn: testObjectFactory dateForNonExpired
			]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.! !

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 12/2/2020 21:26:20'!
PASSED!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 12/2/2020 21:26:21'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 12/2/2020 21:26:21'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 12/2/2020 21:26:21'!
PASSED!

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 12/2/2020 21:26:21'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:26:44' prior: 50974459!
test01NumberLengthMustBeCorrect

	self
		should: [
			CreditCard
				withNumber: self numberWithFewerDigits
				ownedBy: testObjectFactory defaultName
				expiringOn: testObjectFactory dateForNonExpired
			]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.
		
	self
		should: [
			CreditCard
				withNumber: self numberWithMoreDigits
				ownedBy: testObjectFactory defaultName
				expiringOn: testObjectFactory dateForNonExpired
			]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.! !

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 12/2/2020 21:26:46'!
PASSED!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 12/2/2020 21:26:46'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 12/2/2020 21:26:46'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 12/2/2020 21:26:46'!
PASSED!

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 12/2/2020 21:26:46'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:27:00' prior: 50967114!
test02NumberMustOnlyContainDigits

	| badNumbers |
	
	badNumbers := #('75a1117511117511' '75111.7511117511' '7511175111�17511').
	badNumbers do: [ :aBadNumber |
		self
			should: [ CreditCard withNumber: aBadNumber ownedBy: testObjectFactory defaultName expiringOn: testObjectFactory dateForNonExpired ]
			raise: Error
			withMessageText: CreditCard invalidDigitErrorDescription.
		].
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:27:12' prior: 50974532!
test02NumberMustOnlyContainDigits

	| badNumbers |
	
	badNumbers := #('75a1117511117511' '75111.7511117511' '7511175111�17511').
	badNumbers do: [ :aBadNumber |
		self
			should: [
				CreditCard
					withNumber: aBadNumber
					ownedBy: testObjectFactory defaultName
					expiringOn: testObjectFactory dateForNonExpired ]
			raise: Error
			withMessageText: CreditCard invalidDigitErrorDescription.
		].
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:28:00' prior: 50967128!
test03CardValidUntilLastMonthIsExpired

	| card |
	
	card := CreditCard
		withNumber: testObjectFactory defaultNumber
		ownedBy: testObjectFactory defaultName
		expiringOn: self lastMonth.
	self assert: card isExpired.! !

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 12/2/2020 21:28:02'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:28:33' prior: 50974563!
test03CardValidUntilLastMonthIsExpired

	| card |
	
	card := CreditCard
		withNumber: testObjectFactory defaultCreditCardNumber
		ownedBy: testObjectFactory defaultCreditCardOwner
		expiringOn: self lastMonth.
	self assert: card isExpired.! !

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 12/2/2020 21:28:34'!
PASSED!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 12/2/2020 21:28:34'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 12/2/2020 21:28:34'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 12/2/2020 21:28:34'!
PASSED!

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 12/2/2020 21:28:34'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:28:50' prior: 50974547!
test02NumberMustOnlyContainDigits

	| badNumbers |
	
	badNumbers := #('75a1117511117511' '75111.7511117511' '7511175111�17511').
	badNumbers do: [ :aBadNumber |
		self
			should: [
				CreditCard
					withNumber: aBadNumber
					ownedBy: testObjectFactory defaultCreditCardOwner
					expiringOn: testObjectFactory dateForNonExpired ]
			raise: Error
			withMessageText: CreditCard invalidDigitErrorDescription.
		].
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:29:09' prior: 50974495!
test01NumberLengthMustBeCorrect

	self
		should: [
			CreditCard
				withNumber: self numberWithFewerDigits
				ownedBy: testObjectFactory defaultCreditCardOwner
				expiringOn: testObjectFactory dateForNonExpired
			]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.
		
	self
		should: [
			CreditCard
				withNumber: self numberWithMoreDigits
				ownedBy: testObjectFactory defaultCreditCardOwner
				expiringOn: testObjectFactory dateForNonExpired
			]
		raise: Error
		withMessageText: CreditCard invalidNumberLengthErrorDescription.! !

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 12/2/2020 21:29:10'!
PASSED!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 12/2/2020 21:29:10'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 12/2/2020 21:29:10'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 12/2/2020 21:29:10'!
PASSED!

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 12/2/2020 21:29:10'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:30:08' prior: 50967137!
test04CardValidUntilThisMonthIsNotExpired

	| card |
	
	card := CreditCard
		withNumber: testObjectFactory defaultCreditCardNumber
		ownedBy: testObjectFactory defaultCreditCardOwner
		expiringOn: self thisMonth.
	self deny: card isExpired.! !

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 12/2/2020 21:30:10'!
PASSED!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 12/2/2020 21:30:10'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 12/2/2020 21:30:10'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 12/2/2020 21:30:10'!
PASSED!

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 12/2/2020 21:30:10'!
PASSED!

!methodRemoval: CreditCardTest #defaultName stamp: 'CJ 12/2/2020 21:30:15'!
defaultName
	
	^ 'Norbert Degoas'!

!methodRemoval: CreditCardTest #defaultNumber stamp: 'CJ 12/2/2020 21:30:17'!
defaultNumber
	
	^ '7511117511117511'!

!methodRemoval: CreditCardTest #dateForNonExpired stamp: 'CJ 12/2/2020 21:30:33'!
dateForNonExpired
	
	^ GregorianMonthOfYear year: GregorianYear current month: GregorianMonth current!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 21:30:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 21:30:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 21:30:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 21:30:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 21:30:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 21:30:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 21:30:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 21:30:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 21:30:44'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10ListPurchasesAuthenticatesUser stamp: 'CJ 12/2/2020 21:30:44'!
PASSED!
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:31:56' prior: 50974262!
emptyCart

	^ Cart acceptingItemsOf: self defaultCatalog.! !
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:32:26' prior: 50973916!
cartWithManyItems

	| catalog cart |

	catalog := self defaultCatalog.
	
	cart := self emptyCart.
	cart add: 1 of: catalog keys first.
	cart add: 1 of: catalog keys second.

	^ cart.! !
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:32:31' prior: 50973908!
cartWithOneItem

	| catalog cart |

	catalog := self defaultCatalog.
	
	cart := self emptyCart.
	cart add: 1 of: catalog keys first.

	^ cart.! !

!methodRemoval: TestObjectFactory #createCart stamp: 'CJ 12/2/2020 21:33:07'!
createCart
	
	^ Cart acceptingItemsOf: self defaultCatalog!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10ListPurchasesAuthenticatesUser stamp: 'CJ 12/2/2020 21:33:10'!
PASSED!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 12/2/2020 21:34:28' prior: 50967923!
working
	
	^ self class withAction: [ self defaultTransactionID ].! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:34:29'!
ERROR!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:34:29'!
ERROR!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:34:29'!
ERROR!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:34:29'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:34:29'!
ERROR!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:34:29'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:34:29'!
ERROR!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:34:29'!
ERROR!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:34:29'!
ERROR!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:34:29'!
ERROR!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:34:30'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 12/2/2020 21:34:37' prior: 50974875!
working
	
	^ self withAction: [ self defaultTransactionID ].! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:34:39'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:34:39'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:34:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:34:39'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:34:39'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:34:39'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:34:39'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:34:39'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:34:39'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:34:39'!
PASSED!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 12/2/2020 21:34:47' prior: 50967900!
insufficientFunds
	
	^ self withAction: [ self error: MerchantProcessor insufficientFundsErrorDescription ].! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:34:48'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:34:48'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:34:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:34:48'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:34:48'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:34:48'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:34:48'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:34:48'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:34:48'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:34:48'!
PASSED!
!MerchantProcessorSimulator class methodsFor: 'instance creation' stamp: 'CJ 12/2/2020 21:34:53' prior: 50967908!
invalidCreditCard

	^ self withAction: [ self error: MerchantProcessor invalidCreditCardErrorDescription ].! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:34:54'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:34:54'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:34:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:34:54'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:34:54'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:34:54'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:34:54'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:34:54'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:34:54'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:34:54'!
PASSED!
!AuthenticatorSimulator class methodsFor: 'instance creation' stamp: 'CJ 12/2/2020 21:35:42'!
wrongCredentials
	
	^ self withAction: [ self error: Authenticator wrongCredentialsErrorDescription. ].! !
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:35:58' prior: 50967522!
wrongCredentialsAuthenticator
	
	^ AuthenticatorSimulator wrongCredentials.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10ListPurchasesAuthenticatesUser stamp: 'CJ 12/2/2020 21:36:01'!
PASSED!
!AuthenticatorSimulator class methodsFor: 'instance creation' stamp: 'CJ 12/2/2020 21:36:44'!
correctCredentials
	
	^ self withAction: [].! !
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:37:01' prior: 50967465!
defaultAuthenticator
	
	^ AuthenticatorSimulator correctCredentials.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10ListPurchasesAuthenticatesUser stamp: 'CJ 12/2/2020 21:37:05'!
PASSED!

----SNAPSHOT----(2 December 2020 21:37:28) CuisUniversity-4384.image priorSource: 20528804!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:40:19' prior: 50973436!
test01NewCashierHasNoSales

	| cashier |
	
	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: testObjectFactory defaultSalesBook.
	
	self assert: cashier salesMade isEmpty.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:40:23'!
ERROR!
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:40:36'!
defaultSalesBook
	self shouldBeImplemented.! !
!TestObjectFactory methodsFor: 'objects' stamp: 'CJ 12/2/2020 21:40:49' prior: 50975306!
defaultSalesBook
	
	^ OrderedCollection new.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:40:51'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'CJ 12/2/2020 21:41:00'!
withMerchantProcessor: aMerchantProcessorSimulator writingToSalesBook: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithMerchantProcessor: aMerchantProcessorSimulator writingToSalesBook: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'CJ 12/2/2020 21:41:36' prior: 50975318!
withMerchantProcessor: aMerchantProcessor writingToSalesBook: bookToStoreSalesIn 
	
	^self new initializeWithMerchantProcessor: aMerchantProcessor writingToSalesBook: bookToStoreSalesIn! !
!Cashier class methodsFor: 'instance creation' stamp: 'CJ 12/2/2020 21:41:40' prior: 50975331!
withMerchantProcessor: aMerchantProcessor writingToSalesBook: bookToStoreSalesIn 
	
	^ self new initializeWithMerchantProcessor: aMerchantProcessor writingToSalesBook: bookToStoreSalesIn! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:41:42'!
ERROR!

!classDefinition: #Cashier category: '20-TusLibros' stamp: 'CJ 12/2/2020 21:41:51'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor salesMade bookToStoreSalesIn_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'CJ 12/2/2020 21:41:51'!
initializeWithMerchantProcessor: aMerchantProcessor writingToSalesBook: bookToStoreSalesIn 
	self shouldBeImplemented.
	merchantProcessor := aMerchantProcessor.
	bookToStoreSalesIn_CHANGE_ME := bookToStoreSalesIn.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:43:05'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'CJ 12/2/2020 21:43:31' prior: 50975360!
initializeWithMerchantProcessor: aMerchantProcessor writingToSalesBook: bookToStoreSalesIn 

	merchantProcessor := aMerchantProcessor.
	salesMade := bookToStoreSalesIn.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:43:35'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:43:35'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:43:35'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:43:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:43:35'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:43:35'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:43:35'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:43:35'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:43:35'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:43:35'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:43:35'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:43:38'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:43:38'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:43:38'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:43:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:43:38'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:43:38'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:43:38'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:43:38'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:43:38'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:43:38'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:43:38'!
PASSED!

!classDefinition: #Cashier category: '20-TusLibros' stamp: 'CJ 12/2/2020 21:57:55'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor salesMade bookToStoreSalesIn_CHANGE_ME salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'CJ 12/2/2020 21:57:53' prior: 50975373!
initializeWithMerchantProcessor: aMerchantProcessor writingToSalesBook: bookToStoreSalesIn 

	merchantProcessor := aMerchantProcessor.
	salesBook := bookToStoreSalesIn.! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:57:59'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:57:59'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:57:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:57:59'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:57:59'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:57:59'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:57:59'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:57:59'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:57:59'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:57:59'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:58:36' prior: 50974211!
test02CannotCheckoutOnEmptyCart

	| cart cashier |
	
	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: testObjectFactory defaultSalesBook.
	cart := testObjectFactory emptyCart.
	
	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:58:41'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:58:41'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:58:41'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:58:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:58:41'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:58:41'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:58:41'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:58:41'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:58:41'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:58:41'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:58:41'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:58:48' prior: 50974122!
test03CashierRegistersSaleOnCheckout

	| cart cashier |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: testObjectFactory defaultSalesBook.
	cart := testObjectFactory cartWithManyItems.
	
	cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard.

	self assert: 1 equals: cashier salesMade size.! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:58:49'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:58:49'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:58:49'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:58:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:58:49'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:58:49'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:58:49'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:58:49'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:58:49'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:58:49'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:58:49'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:59:00' prior: 50973615!
test04CheckoutWithInsufficientFundsIsRejected

	| cart cashier |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory insufficientFundsMerchantProcessor
		writingToSalesBook: testObjectFactory defaultSalesBook.
	cart := testObjectFactory cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor insufficientFundsErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:59:02'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:59:02'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:59:02'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:59:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:59:02'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:59:02'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:59:02'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:59:02'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:59:02'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:59:02'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:59:02'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 21:59:36' prior: 50974135!
test05CheckoutWithExpiredCreditCardIsRejected

	| cart cashier merchantProcessor |

	merchantProcessor := testObjectFactory workingMerchantProcessor.
	cashier := Cashier withMerchantProcessor: merchantProcessor writingToSalesBook: testObjectFactory defaultSalesBook.
	cart := testObjectFactory cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory expiredCreditCard. ]
		raise: Error
		withMessageText: Cashier expiredCreditCardErrorDescription.
	
	self assert: cashier salesMade isEmpty.
	self assert: 0 equals: merchantProcessor requestsMade.! !

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:59:39'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 21:59:39'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 21:59:39'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 21:59:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 21:59:39'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 21:59:39'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 21:59:39'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 21:59:39'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 21:59:39'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 21:59:39'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 21:59:39'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:00:02' prior: 50974105!
test06CheckoutWithInvalidCreditCardIsRejected

	| cart cashier |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory invalidCreditCardMerchantProcessor
		writingToSalesBook: testObjectFactory defaultSalesBook.
	cart := testObjectFactory cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor invalidCreditCardErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:00:04'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 22:00:04'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:00:04'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:00:04'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 22:00:04'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:00:04'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:00:04'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 22:00:04'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 22:00:04'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 22:00:04'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:00:04'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:00:13' prior: 50973876!
test07CheckoutReturnsCorrectInformationForCartWithOneItem

	| cart cashier receipt creditCard |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: testObjectFactory defaultSalesBook.
	cart := testObjectFactory cartWithOneItem.
	creditCard := testObjectFactory defaultCreditCard.

	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assertReceipt: receipt isCorrectForCart: cart.
	self assert: creditCard ownerName equals: (receipt at: #madeTo).
	self assert: (receipt at: #transactionID) equals: MerchantProcessorSimulator defaultTransactionID.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:00:36' prior: 50973941!
test08CheckoutReturnsCorrectAmountForCartWithManyItems

	| cart cashier receipt creditCard |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: testObjectFactory defaultSalesBook.
	cart := testObjectFactory cartWithManyItems.
	creditCard := testObjectFactory defaultCreditCard.
	
	receipt := cashier checkout: cart withCreditCard: creditCard.
	
	self assertReceipt: receipt isCorrectForCart: cart.! !

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 22:00:38'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 22:00:38'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:00:38'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:00:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 22:00:38'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:00:38'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:00:38'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 22:00:38'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 22:00:38'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 22:00:38'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:00:38'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:00:46' prior: 50973994!
test09SalesAreRecordedCorrectly

	| cart1 cart2 cashier receipt1 receipt2 creditCard salesMade |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: testObjectFactory defaultSalesBook.
	cart1 := testObjectFactory cartWithManyItems.
	cart2 := testObjectFactory cartWithManyItems.
	creditCard := testObjectFactory defaultCreditCard.
	
	receipt1 := cashier checkout: cart1 withCreditCard: creditCard.
	receipt2 := cashier checkout: cart2 withCreditCard: creditCard.
	salesMade := cashier salesMade.
	
	self assert: 2 equals: salesMade size.
	self assert: (salesMade includes: receipt1).
	self assert: (salesMade includes: receipt2).! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:02:17' prior: 50974053!
test10CashierCallsMerchantProcessor

	| cart cashier merchantProcessor |
	
	merchantProcessor := testObjectFactory workingMerchantProcessor.
	cashier := Cashier withMerchantProcessor: merchantProcessor writingToSalesBook: testObjectFactory defaultSalesBook.
	cart := testObjectFactory cartWithManyItems.
	
	cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard.

	self assert: 1 equals: merchantProcessor requestsMade.! !

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:02:23'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 22:02:23'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:02:23'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:02:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 22:02:23'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:02:23'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:02:23'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 22:02:23'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 22:02:23'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 22:02:23'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:02:23'!
PASSED!

!classDefinition: #CashierTest category: '20-TusLibros' stamp: 'CJ 12/2/2020 22:02:53'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!CashierTest methodsFor: 'support' stamp: 'CJ 12/2/2020 22:02:49' prior: 50973431 overrides: 16927572!
setUp

	testObjectFactory := TestObjectFactory new.
	salesBook := testObjectFactory defaultSalesBook.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:03:01' prior: 50975293!
test01NewCashierHasNoSales

	| cashier |
	
	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: salesBook.
	
	self assert: cashier salesMade isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:03:15' prior: 50975505!
test02CannotCheckoutOnEmptyCart

	| cart cashier |
	
	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: salesBook.
	cart := testObjectFactory emptyCart.
	
	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:03:16'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 22:03:16'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:03:16'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:03:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 22:03:16'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:03:16'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:03:16'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 22:03:16'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 22:03:16'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 22:03:16'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:03:16'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:03:36' prior: 50975558!
test03CashierRegistersSaleOnCheckout

	| cart cashier |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: salesBook.
	cart := testObjectFactory cartWithManyItems.
	
	cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard.

	self assert: 1 equals: cashier salesMade size.! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:03:38'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 22:03:38'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:03:38'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:03:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 22:03:38'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:03:38'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:03:38'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 22:03:38'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 22:03:38'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 22:03:38'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:03:38'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:03:46' prior: 50975609!
test04CheckoutWithInsufficientFundsIsRejected

	| cart cashier |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory insufficientFundsMerchantProcessor
		writingToSalesBook: salesBook.
	cart := testObjectFactory cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor insufficientFundsErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:03:55' prior: 50975664!
test05CheckoutWithExpiredCreditCardIsRejected

	| cart cashier merchantProcessor |

	merchantProcessor := testObjectFactory workingMerchantProcessor.
	cashier := Cashier withMerchantProcessor: merchantProcessor writingToSalesBook: salesBook.
	cart := testObjectFactory cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory expiredCreditCard. ]
		raise: Error
		withMessageText: Cashier expiredCreditCardErrorDescription.
	
	self assert: cashier salesMade isEmpty.
	self assert: 0 equals: merchantProcessor requestsMade.! !

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:03:57'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 22:03:57'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:03:57'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:03:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 22:03:57'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:03:57'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:03:57'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 22:03:57'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 22:03:57'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 22:03:57'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:03:57'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:04:12' prior: 50975722!
test06CheckoutWithInvalidCreditCardIsRejected

	| cart cashier |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory invalidCreditCardMerchantProcessor
		writingToSalesBook: salesBook.
	cart := testObjectFactory cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor invalidCreditCardErrorDescription.
	
	self assert: cashier salesMade isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:04:22' prior: 50975777!
test07CheckoutReturnsCorrectInformationForCartWithOneItem

	| cart cashier receipt creditCard |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: salesBook.
	cart := testObjectFactory cartWithOneItem.
	creditCard := testObjectFactory defaultCreditCard.

	receipt := cashier checkout: cart withCreditCard: creditCard.

	self assertReceipt: receipt isCorrectForCart: cart.
	self assert: creditCard ownerName equals: (receipt at: #madeTo).
	self assert: (receipt at: #transactionID) equals: MerchantProcessorSimulator defaultTransactionID.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:04:29' prior: 50975800!
test08CheckoutReturnsCorrectAmountForCartWithManyItems

	| cart cashier receipt creditCard |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: salesBook.
	cart := testObjectFactory cartWithManyItems.
	creditCard := testObjectFactory defaultCreditCard.
	
	receipt := cashier checkout: cart withCreditCard: creditCard.
	
	self assertReceipt: receipt isCorrectForCart: cart.! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:04:33' prior: 50975854!
test09SalesAreRecordedCorrectly

	| cart1 cart2 cashier receipt1 receipt2 creditCard salesMade |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: salesBook.
	cart1 := testObjectFactory cartWithManyItems.
	cart2 := testObjectFactory cartWithManyItems.
	creditCard := testObjectFactory defaultCreditCard.
	
	receipt1 := cashier checkout: cart1 withCreditCard: creditCard.
	receipt2 := cashier checkout: cart2 withCreditCard: creditCard.
	salesMade := cashier salesMade.
	
	self assert: 2 equals: salesMade size.
	self assert: (salesMade includes: receipt1).
	self assert: (salesMade includes: receipt2).! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:04:38' prior: 50975879!
test10CashierCallsMerchantProcessor

	| cart cashier merchantProcessor |
	
	merchantProcessor := testObjectFactory workingMerchantProcessor.
	cashier := Cashier withMerchantProcessor: merchantProcessor writingToSalesBook: salesBook.
	cart := testObjectFactory cartWithManyItems.
	
	cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard.

	self assert: 1 equals: merchantProcessor requestsMade.! !

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:04:41'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 22:04:41'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:04:41'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:04:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 22:04:41'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:04:41'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:04:41'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 22:04:41'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 22:04:41'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 22:04:41'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:04:41'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:05:39' prior: 50976010!
test03CashierRegistersSaleOnCheckout

	| cart cashier |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: salesBook.
	cart := testObjectFactory cartWithManyItems.
	
	cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard.

	self assert: 1 equals: cashier salesMade size.
	self assert: 1 equals: salesBook size.! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:05:42'!
FAILURE!
!Cashier methodsFor: 'private' stamp: 'CJ 12/2/2020 22:06:17' prior: 50967673!
recordReceipt: receipt

	salesMade add: receipt.
	salesBook add: receipt.! !

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:06:30'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 22:06:30'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:06:30'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:06:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 22:06:30'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:06:30'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:06:30'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 22:06:30'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 22:06:30'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 22:06:30'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:06:30'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:10:05' prior: 50975957!
test02CannotCheckoutOnEmptyCart

	| cart cashier |
	
	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: salesBook.
	cart := testObjectFactory emptyCart.
	
	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard ]
		raise: Error
		withMessageText: Cashier emptyCartErrorDescription.
	
	self assert: cashier salesMade isEmpty.
	self assert: salesBook isEmpty.! !

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:10:07'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 22:10:07'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:10:07'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:10:07'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 22:10:07'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:10:07'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:10:07'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 22:10:07'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 22:10:07'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 22:10:07'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:10:07'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:10:16' prior: 50976061!
test04CheckoutWithInsufficientFundsIsRejected

	| cart cashier |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory insufficientFundsMerchantProcessor
		writingToSalesBook: salesBook.
	cart := testObjectFactory cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor insufficientFundsErrorDescription.
	
	self assert: cashier salesMade isEmpty.
	self assert: salesBook isEmpty.! !

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 22:10:18'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 22:10:18'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:10:18'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:10:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 22:10:18'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:10:18'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:10:18'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 22:10:18'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 22:10:18'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 22:10:18'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:10:18'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:10:24' prior: 50976079!
test05CheckoutWithExpiredCreditCardIsRejected

	| cart cashier merchantProcessor |

	merchantProcessor := testObjectFactory workingMerchantProcessor.
	cashier := Cashier withMerchantProcessor: merchantProcessor writingToSalesBook: salesBook.
	cart := testObjectFactory cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory expiredCreditCard. ]
		raise: Error
		withMessageText: Cashier expiredCreditCardErrorDescription.
	
	self assert: cashier salesMade isEmpty.
	self assert: salesBook isEmpty.
	self assert: 0 equals: merchantProcessor requestsMade.! !

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:10:26'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 22:10:26'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:10:26'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:10:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 22:10:26'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:10:26'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:10:26'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 22:10:26'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 22:10:26'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 22:10:26'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:10:26'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:10:32' prior: 50976136!
test06CheckoutWithInvalidCreditCardIsRejected

	| cart cashier |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory invalidCreditCardMerchantProcessor
		writingToSalesBook: salesBook.
	cart := testObjectFactory cartWithManyItems.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard. ]
		raise: Error
		withMessageText: MerchantProcessor invalidCreditCardErrorDescription.
	
	self assert: cashier salesMade isEmpty.
	self assert: salesBook isEmpty.! !

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:10:35'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:11:26' prior: 50976193!
test09SalesAreRecordedCorrectly

	| cart1 cart2 cashier receipt1 receipt2 creditCard salesMade |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: salesBook.
	cart1 := testObjectFactory cartWithManyItems.
	cart2 := testObjectFactory cartWithManyItems.
	creditCard := testObjectFactory defaultCreditCard.
	
	receipt1 := cashier checkout: cart1 withCreditCard: creditCard.
	receipt2 := cashier checkout: cart2 withCreditCard: creditCard.
	salesMade := cashier salesMade.
	
	self assert: 2 equals: salesMade size.
	self assert: salesBook isEmpty.
	self assert: (salesMade includes: receipt1).
	self assert: (salesMade includes: receipt2).! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:11:40' prior: 50976555!
test09SalesAreRecordedCorrectly

	| cart1 cart2 cashier receipt1 receipt2 creditCard salesMade |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: salesBook.
	cart1 := testObjectFactory cartWithManyItems.
	cart2 := testObjectFactory cartWithManyItems.
	creditCard := testObjectFactory defaultCreditCard.
	
	receipt1 := cashier checkout: cart1 withCreditCard: creditCard.
	receipt2 := cashier checkout: cart2 withCreditCard: creditCard.
	salesMade := cashier salesMade.
	
	self assert: 2 equals: salesMade size.
	self assert: 2 equals: salesBook size.
	self assert: (salesMade includes: receipt1).
	self assert: (salesMade includes: receipt2).! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:12:02' prior: 50976580!
test09SalesAreRecordedCorrectly

	| cart1 cart2 cashier receipt1 receipt2 creditCard salesMade |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: salesBook.
	cart1 := testObjectFactory cartWithManyItems.
	cart2 := testObjectFactory cartWithManyItems.
	creditCard := testObjectFactory defaultCreditCard.
	
	receipt1 := cashier checkout: cart1 withCreditCard: creditCard.
	receipt2 := cashier checkout: cart2 withCreditCard: creditCard.
	salesMade := cashier salesMade.
	
	self assert: 2 equals: salesMade size.
	self assert: 2 equals: salesBook size.
	self assert: (salesMade includes: receipt1).
	self assert: (salesBook includes: receipt1).
	self assert: (salesMade includes: receipt2).! !
!CashierTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:12:09' prior: 50976605!
test09SalesAreRecordedCorrectly

	| cart1 cart2 cashier receipt1 receipt2 creditCard salesMade |

	cashier := Cashier
		withMerchantProcessor: testObjectFactory workingMerchantProcessor
		writingToSalesBook: salesBook.
	cart1 := testObjectFactory cartWithManyItems.
	cart2 := testObjectFactory cartWithManyItems.
	creditCard := testObjectFactory defaultCreditCard.
	
	receipt1 := cashier checkout: cart1 withCreditCard: creditCard.
	receipt2 := cashier checkout: cart2 withCreditCard: creditCard.
	salesMade := cashier salesMade.
	
	self assert: 2 equals: salesMade size.
	self assert: 2 equals: salesBook size.
	self assert: (salesMade includes: receipt1).
	self assert: (salesBook includes: receipt1).
	self assert: (salesMade includes: receipt2).
	self assert: (salesBook includes: receipt2).! !

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 22:12:19'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:12:19'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:12:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 22:12:19'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:12:19'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:12:19'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 22:12:19'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 22:12:19'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 22:12:19'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:12:19'!
PASSED!

!classDefinition: #Market category: '20-TusLibros' stamp: 'CJ 12/2/2020 22:13:01'!
Object subclass: #Market
	instanceVariableNames: 'catalog merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: '20-TusLibros'!
!Market methodsFor: 'checkout' stamp: 'CJ 12/2/2020 22:12:58' prior: 50969354!
createCashier
	
	^ Cashier withMerchantProcessor: merchantProcessor writingToSalesBook: salesBook.! !
!Market methodsFor: 'initialization' stamp: 'CJ 12/2/2020 22:13:31' overrides: 16896425!
initialize
	
	salesBook := OrderedCollection new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10ListPurchasesAuthenticatesUser stamp: 'CJ 12/2/2020 22:13:35'!
PASSED!
!Market methodsFor: 'accessing' stamp: 'CJ 12/2/2020 22:13:49' prior: 50969183!
catalog
	
	^ catalog copy! !

!methodRemoval: Market #catalog stamp: 'CJ 12/2/2020 22:14:18'!
catalog
	
	^ catalog copy!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSoldByTheStore stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CartTest #test09CartCalculatesCostOfSingleItemCorrectly stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CartTest #test10CartCalculatesCostOfManyItemsCorrectly stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CashierTest #test01NewCashierHasNoSales stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CashierTest #test02CannotCheckoutOnEmptyCart stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CashierTest #test03CashierRegistersSaleOnCheckout stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithInsufficientFundsIsRejected stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithExpiredCreditCardIsRejected stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithInvalidCreditCardIsRejected stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CashierTest #test07CheckoutReturnsCorrectInformationForCartWithOneItem stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CashierTest #test08CheckoutReturnsCorrectAmountForCartWithManyItems stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CashierTest #test09SalesAreRecordedCorrectly stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CashierTest #test10CashierCallsMerchantProcessor stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CreditCardTest #test01NumberLengthMustBeCorrect stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CreditCardTest #test02NumberMustOnlyContainDigits stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CreditCardTest #test03CardValidUntilLastMonthIsExpired stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #CreditCardTest #test04CardValidUntilThisMonthIsNotExpired stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10ListPurchasesAuthenticatesUser stamp: 'CJ 12/2/2020 22:14:23'!
PASSED!
!Market methodsFor: 'accessing' stamp: 'CJ 12/2/2020 22:14:46'!
salesBook

	^ salesBook copy! !
!InternalRestInterfaceTest methodsFor: 'tests' stamp: 'CJ 12/2/2020 22:15:46' prior: 50971517!
test01NewCartsAreCreatedEmpty

	| cartId |

	cartId := defaultInterface createCartForClient: clientID withPassword: password.
	
	self assert: (defaultInterface listCart: cartId) isEmpty.! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 22:15:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 22:15:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 22:15:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 22:15:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 22:15:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 22:15:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 22:15:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 22:15:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 22:15:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 22:15:47'!
PASSED!

!testRun: #InternalRestInterfaceTest #test10ListPurchasesAuthenticatesUser stamp: 'CJ 12/2/2020 22:15:47'!
PASSED!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 12/2/2020 22:18:16' prior: 50971982!
checkoutCart: cartId withCCN: creditCardNumber andCCED: creditCardExpirationDate andCCO: creditCardOwner
	
	| cart creditCard cashier clientPurchases |
	
	cart := self cartWithID: cartId.
	creditCard := CreditCard withNumber: creditCardNumber ownedBy: creditCardOwner expiringOn: creditCardExpirationDate.
	cashier := market createCashier.
	
	cashier checkout: cart withCreditCard: creditCard.
	
	"clientPurchases := purchases at: (self ownerOfCart: cartId) ifAbsentPut: Bag new.
	clientPurchases addAll: cart items."! !
!InternalRestInterface methodsFor: 'private' stamp: 'CJ 12/2/2020 22:19:14' prior: 50968643!
cartWithID: cartId

	^ carts at: cartId ifAbsent: [ self error: self class cartDoesntExistErrorDescription ]! !

!testRun: #InternalRestInterfaceTest #test01NewCartsAreCreatedEmpty stamp: 'CJ 12/2/2020 22:20:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test02CreateCartAuthenticatesUser stamp: 'CJ 12/2/2020 22:20:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test03CannotAddToCartWithInvalidID stamp: 'CJ 12/2/2020 22:20:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test04ValidItemIsAddedToCart stamp: 'CJ 12/2/2020 22:20:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test05CannotListCartWithInvalidID stamp: 'CJ 12/2/2020 22:20:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test06CannotCheckoutCartWithInvalidID stamp: 'CJ 12/2/2020 22:20:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 22:20:16'!
ERROR!

!testRun: #InternalRestInterfaceTest #test08CheckoutCartStoresManyPurchasesForOneClient stamp: 'CJ 12/2/2020 22:20:16'!
ERROR!

!testRun: #InternalRestInterfaceTest #test09CheckoutCartStoresPurchasesForManyClients stamp: 'CJ 12/2/2020 22:20:16'!
ERROR!

!testRun: #InternalRestInterfaceTest #test10ListPurchasesAuthenticatesUser stamp: 'CJ 12/2/2020 22:20:16'!
PASSED!

!testRun: #InternalRestInterfaceTest #test07CheckoutCartStoresPurchaseForOneClient stamp: 'CJ 12/2/2020 22:20:18'!
ERROR!
!InternalRestInterface methodsFor: 'API' stamp: 'CJ 12/2/2020 22:20:45' prior: 50977001!
checkoutCart: cartId withCCN: creditCardNumber andCCED: creditCardExpirationDate andCCO: creditCardOwner
	
	| cart creditCard cashier clientPurchases |
	
	cart := self cartWithID: cartId.
	creditCard := CreditCard withNumber: creditCardNumber ownedBy: creditCardOwner expiringOn: creditCardExpirationDate.
	cashier := market createCashier.
	
	cashier checkout: cart withCreditCard: creditCard.
	
	clientPurchases := purchases at: (self ownerOfCart: cartId) ifAbsentPut: Bag new.
	clientPurchases addAll: cart items.! !

----SNAPSHOT----(2 December 2020 22:23:46) CuisUniversity-4384.image priorSource: 20596455!