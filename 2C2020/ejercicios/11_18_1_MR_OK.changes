

----STARTUP---- (23 October 2020 19:07:35) as /home/pablo/Documents/Ingenieria1/cuis_TDD/linux64/CuisUniversity-4384.image!


TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

!classDefinition: #MarsRoverTests category: 'MarsRoverTDD' stamp: 'PGTA 10/23/2020 19:11:04'!
TestCase subclass: #MarsRoverTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

!classDefinition: #MarsRover category: 'MarsRoverTDD' stamp: 'PGTA 10/23/2020 19:23:37'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!
!MarsRoverTests methodsFor: 'no messages' stamp: 'PGTA 10/23/2020 19:23:06'!
test01
	| rover initialPoint |
	initialPoint := (1@1).
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	
	self assert: (rover position) equals: initialPoint.! !

!testRun: #MarsRoverTests #test01 stamp: 'PGTA 10/23/2020 19:24:02'!
ERROR!

!testRun: #MarsRoverTests #test01 stamp: 'PGTA 10/23/2020 19:24:02'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'PGTA 10/23/2020 19:24:25'!
startPoint: aPoint initialOrientation: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeStartPoint: aPoint initialOrientation: aString ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'PGTA 10/23/2020 19:25:35' prior: 50867801!
startPoint: aPoint initialOrientation: anOrientation
	
	^self new initializeStartPoint: aPoint initialOrientation: anOrientation! !

!testRun: #MarsRoverTests #test01 stamp: 'PGTA 10/23/2020 19:25:47'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRoverTDD' stamp: 'PGTA 10/23/2020 19:26:18'!
Object subclass: #MarsRover
	instanceVariableNames: 'point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

!classDefinition: #MarsRover category: 'MarsRoverTDD' stamp: 'PGTA 10/23/2020 19:26:18'!
Object subclass: #MarsRover
	instanceVariableNames: 'point orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!
!MarsRover methodsFor: 'initialization' stamp: 'PGTA 10/23/2020 19:26:18'!
initializeStartPoint: aPoint initialOrientation: anOrientation 
	self shouldBeImplemented.
	point := aPoint.
	orientation := anOrientation.! !
!MarsRover methodsFor: 'initialization' stamp: 'PGTA 10/23/2020 19:26:58' prior: 50867835!
initializeStartPoint: aPoint initialOrientation: anOrientation 

	point := aPoint.
	orientation := anOrientation.! !

!testRun: #MarsRoverTests #test01 stamp: 'PGTA 10/23/2020 19:27:45'!
ERROR!
!MarsRover methodsFor: 'state' stamp: 'PGTA 10/23/2020 19:28:34'!
position
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'state' stamp: 'PGTA 10/23/2020 19:28:50' prior: 50867852!
position
	^point.! !

!testRun: #MarsRoverTests #test01 stamp: 'PGTA 10/23/2020 19:29:02'!
PASSED!

!testRun: #MarsRoverTests #test01 stamp: 'PGTA 10/23/2020 19:29:09'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

!classDefinition: #MarsRover category: 'MarsRoverTDD' stamp: 'PGTA 10/23/2020 19:30:09'!
Object subclass: #MarsRover
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!
!MarsRover methodsFor: 'state' stamp: 'PGTA 10/23/2020 19:30:16' prior: 50867856!
position
	^position.! !
!MarsRover methodsFor: 'initialization' stamp: 'PGTA 10/23/2020 19:30:57' prior: 50867843!
initializeStartPoint: aPoint initialOrientation: anOrientation 

	position := aPoint.
	orientation := anOrientation.! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 19:36:05'!
test02
	| rover initialPoint forwardPoint|
	initialPoint := (0@0).
	forwardPoint := (0@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover processCommand: 'f'.
	
	self assert: (rover position) equals: forwardPoint.! !

!testRun: #MarsRoverTests #test02 stamp: 'PGTA 10/23/2020 19:36:14'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 19:36:26'!
processCommand: aString 
	self shouldBeImplemented.! !

(0@0) + (0@1)!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 19:38:52' prior: 50867901!
processCommand: aCommand
	position := position + (0@1)! !

!testRun: #MarsRoverTests #test02 stamp: 'PGTA 10/23/2020 19:39:07'!
PASSED!

!testRun: #MarsRoverTests #test01 stamp: 'PGTA 10/23/2020 19:39:07'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'PGTA 10/23/2020 19:39:07'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 19:42:48'!
test03
	| rover initialPoint |
	initialPoint := (0@0).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover processCommand: 'l'.
	
	self assert: (rover position) equals: initialPoint.
	self assert: (rover orientation) equals: 'O'.! !

!testRun: #MarsRoverTests #test03 stamp: 'PGTA 10/23/2020 19:42:52'!
FAILURE!

!testRun: #MarsRoverTests #test03 stamp: 'PGTA 10/23/2020 19:43:25'!
FAILURE!

!testRun: #MarsRoverTests #test03 stamp: 'PGTA 10/23/2020 19:44:00'!
FAILURE!

!testRun: #MarsRoverTests #test03 stamp: 'PGTA 10/23/2020 19:44:14'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 19:46:12' prior: 50867907!
processCommand: aCommand
	aCommand = 'f'
		ifTrue: [position := position + (0@1)]! !

!testRun: #MarsRoverTests #test03 stamp: 'PGTA 10/23/2020 19:46:17'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 19:46:28'!
orientation
	self shouldBeImplemented.
	^orientation! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 19:46:37' prior: 50867948!
orientation
	^orientation! !

!testRun: #MarsRoverTests #test03 stamp: 'PGTA 10/23/2020 19:46:42'!
FAILURE!

!testRun: #MarsRoverTests #test03 stamp: 'PGTA 10/23/2020 19:47:37'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 19:48:28' prior: 50867940!
processCommand: aCommand
	aCommand = 'f'
		ifTrue: [position := position + (0@1)].
	aCommand = 'l'
		ifTrue: [orientation := 'O']! !

!testRun: #MarsRoverTests #test01 stamp: 'PGTA 10/23/2020 19:48:33'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'PGTA 10/23/2020 19:48:33'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'PGTA 10/23/2020 19:48:33'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 19:53:19'!
test04
	| rover initialPoint finalPoint|
	initialPoint := (0@0).
	finalPoint := (-1@0).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover processCommand: 'r'.
	rover processCommand: 'b'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !

!testRun: #MarsRoverTests #test04 stamp: 'PGTA 10/23/2020 19:55:30'!
FAILURE!

!testRun: #MarsRoverTests #test04 stamp: 'PGTA 10/23/2020 19:55:58'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 19:56:50' prior: 50867962!
processCommand: aCommand
	aCommand = 'f'
		ifTrue: [position := position + (0@1)].
	aCommand = 'l'
		ifTrue: [orientation := 'O'].
	aCommand = 'r'
		ifTrue: [orientation := 'E']! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 19:57:50' prior: 50867995!
processCommand: aCommand
	aCommand = 'f'
		ifTrue: [position := position + (0@1)].
	aCommand = 'l'
		ifTrue: [orientation := 'O'].
	aCommand = 'r'
		ifTrue: [orientation := 'E'].
	aCommand = 'b'
		ifTrue: [position := position + (-1@0)].! !

!testRun: #MarsRoverTests #test04 stamp: 'PGTA 10/23/2020 19:57:57'!
PASSED!

!testRun: #MarsRoverTests #test01 stamp: 'PGTA 10/23/2020 19:57:57'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'PGTA 10/23/2020 19:57:57'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'PGTA 10/23/2020 19:57:57'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'PGTA 10/23/2020 19:57:57'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 20:01:00'!
test05
	| rover initialPoint finalPoint|
	initialPoint := (0@0).
	finalPoint := (1@0).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover processCommand: 'r'.
	rover processCommand: 'f'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !

!testRun: #MarsRoverTests #test05 stamp: 'PGTA 10/23/2020 20:01:03'!
FAILURE!

0@0 + 0@1!

0@0!

 0@1!

(0@0)!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 20:04:40' prior: 50868004!
processCommand: aCommand
	aCommand = 'f'
		ifTrue: [ position := position +
			orientation = 'N' ifTrue: [0@1].
			orientation = 'E' ifTrue: [1@0].
			].
	aCommand = 'l'
		ifTrue: [orientation := 'O'].
	aCommand = 'r'
		ifTrue: [orientation := 'E'].
	aCommand = 'b'
		ifTrue: [position := position + (-1@0)].! !

!testRun: #MarsRoverTests #test05 stamp: 'PGTA 10/23/2020 20:04:50'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 20:06:38' prior: 50868044!
processCommand: aCommand
	aCommand = 'f'
		ifTrue: [ position := position +
			orientation = 'N' ifTrue: [(0@1)]
			ifFalse: [(1@0)].
			].
	aCommand = 'l'
		ifTrue: [orientation := 'O'].
	aCommand = 'r'
		ifTrue: [orientation := 'E'].
	aCommand = 'b'
		ifTrue: [position := position + (-1@0)].! !

!testRun: #MarsRoverTests #test05 stamp: 'PGTA 10/23/2020 20:06:46'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 20:07:10' prior: 50868060!
processCommand: aCommand
	aCommand = 'f'
		ifTrue: [ position := position + (
			orientation = 'N' ifTrue: [(0@1)]
			ifFalse: [(1@0)]).
			].
	aCommand = 'l'
		ifTrue: [orientation := 'O'].
	aCommand = 'r'
		ifTrue: [orientation := 'E'].
	aCommand = 'b'
		ifTrue: [position := position + (-1@0)].! !

!testRun: #MarsRoverTests #test04 stamp: 'PGTA 10/23/2020 20:07:17'!
PASSED!

!testRun: #MarsRoverTests #test01 stamp: 'PGTA 10/23/2020 20:07:17'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'PGTA 10/23/2020 20:07:17'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'PGTA 10/23/2020 20:07:17'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'PGTA 10/23/2020 20:07:17'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'PGTA 10/23/2020 20:07:17'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 20:08:13' prior: 50868075!
processCommand: aCommand
	aCommand = 'f'
		ifTrue: [ position := position + (
			orientation = 'N' ifTrue: [0@1]
			ifFalse: [1@0]).
			].
	aCommand = 'l'
		ifTrue: [orientation := 'O'].
	aCommand = 'r'
		ifTrue: [orientation := 'E'].
	aCommand = 'b'
		ifTrue: [position := position + (-1@0)].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 20:11:10' prior: 50868103!
processCommand: aCommand
	aCommand = 'f'
		ifTrue: [ position := position + (
			orientation = 'N' ifTrue: [0@1]
			ifFalse: [orientation = 'E' ifTrue: [1@0]
			ifFalse: [orientation = 'S' ifTrue: [0@-1]
			ifFalse: [-1@0]]]
			)].
	aCommand = 'l'
		ifTrue: [orientation := 'O'].
	aCommand = 'r'
		ifTrue: [orientation := 'E'].
	aCommand = 'b'
		ifTrue: [position := position + (-1@0)].! !

!testRun: #MarsRoverTests #test05 stamp: 'PGTA 10/23/2020 20:11:15'!
PASSED!

!testRun: #MarsRoverTests #test01 stamp: 'PGTA 10/23/2020 20:11:15'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'PGTA 10/23/2020 20:11:15'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'PGTA 10/23/2020 20:11:15'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'PGTA 10/23/2020 20:11:15'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'PGTA 10/23/2020 20:11:15'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/23/2020 20:12:26' prior: 50868116!
processCommand: aCommand
	aCommand = 'f'
		ifTrue: [ position := position + (
			orientation = 'N' ifTrue: [0@1]
			ifFalse: [orientation = 'E' ifTrue: [1@0]
			ifFalse: [orientation = 'S' ifTrue: [0@-1]
			ifFalse: [-1@0]]]
			)].
	aCommand = 'b'
		ifTrue: [ position := position + (
			orientation = 'N' ifTrue: [0@-1]
			ifFalse: [orientation = 'E' ifTrue: [-1@0]
			ifFalse: [orientation = 'S' ifTrue: [0@1]
			ifFalse: [1@0]]]
			)].
		
	aCommand = 'l'
		ifTrue: [orientation := 'O'].
	aCommand = 'r'
		ifTrue: [orientation := 'E'].
! !

!testRun: #MarsRoverTests #test03 stamp: 'PGTA 10/23/2020 20:12:33'!
PASSED!

!testRun: #MarsRoverTests #test01 stamp: 'PGTA 10/23/2020 20:12:33'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'PGTA 10/23/2020 20:12:33'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'PGTA 10/23/2020 20:12:33'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'PGTA 10/23/2020 20:12:33'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'PGTA 10/23/2020 20:12:33'!
PASSED!

----STARTUP---- (24 October 2020 16:30:04) as C:\Users\paujimenez\Documents\Ingenieria1\cuisWindows64\windows64\CuisUniversity-4384.image!


!testRun: #MarsRoverTests #test01 stamp: 'PJ 10/24/2020 16:30:29'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'PJ 10/24/2020 16:30:29'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'PJ 10/24/2020 16:30:29'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'PJ 10/24/2020 16:30:29'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'PJ 10/24/2020 16:30:29'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 17:43:43'!
test06
	| rover initialPoint |
	initialPoint := (0@0).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover processCommand: 'r'.
	rover processCommand: 'l'.
	
	self assert: (rover position) equals: initialPoint.
	self assert: (rover orientation) equals: 'N'.! !

!testRun: #MarsRoverTests #test06 stamp: 'PJ 10/24/2020 17:43:47'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'PJ 10/24/2020 17:55:18' prior: 50867865!
processCommand: aCommand
	aCommand = 'f'
		ifTrue: [ position := position + (
			orientation = 'N' ifTrue: [0@1]
			ifFalse: [orientation = 'E' ifTrue: [1@0]
			ifFalse: [orientation = 'S' ifTrue: [0@-1]
			ifFalse: [-1@0]]]
			)].
	aCommand = 'b'
		ifTrue: [ position := position + (
			orientation = 'N' ifTrue: [0@-1]
			ifFalse: [orientation = 'E' ifTrue: [-1@0]
			ifFalse: [orientation = 'S' ifTrue: [0@1]
			ifFalse: [1@0]]]
			)].
		
	aCommand = 'l'
		ifTrue: [orientation = 'N' ifTrue: ['O']
			ifFalse: [orientation = 'E' ifTrue: ['N']
			ifFalse: [orientation = 'S' ifTrue: ['E']
			ifFalse: ['S']]]
		].
	aCommand = 'r'
		ifTrue: [orientation = 'N' ifTrue: ['E']
			ifFalse: [orientation = 'E' ifTrue: ['S']
			ifFalse: [orientation = 'S' ifTrue: ['O']
			ifFalse: ['N']]]
		].
! !

!testRun: #MarsRoverTests #test06 stamp: 'PJ 10/24/2020 17:55:24'!
PASSED!

----SNAPSHOT----(24 October 2020 17:58:59) CuisUniversity-4384.image priorSource: 17160080!

Object subclass: #Orientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

!classDefinition: #Orientation category: 'MarsRoverTDD' stamp: 'PJ 10/24/2020 18:38:28'!
Object subclass: #Orientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

Orientation subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

!classDefinition: #North category: 'MarsRoverTDD' stamp: 'PJ 10/24/2020 18:39:29'!
Orientation subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

Orientation subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

!classDefinition: #South category: 'MarsRoverTDD' stamp: 'PJ 10/24/2020 18:39:37'!
Orientation subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

Orientation subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

!classDefinition: #West category: 'MarsRoverTDD' stamp: 'PJ 10/24/2020 18:39:43'!
Orientation subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

Orientation subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

!classDefinition: #East category: 'MarsRoverTDD' stamp: 'PJ 10/24/2020 18:39:50'!
Orientation subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!
!North methodsFor: 'no messages' stamp: 'PJ 10/24/2020 18:46:43'!
forwardDelta
	^0@1! !
!North methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:47:08'!
backwardDelta
	^0@-1! !
!North methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:47:51'!
rightRotation
	^East new! !
!North methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:48:07'!
leftRotation
	^West new! !

Orientation subclass: #East2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

!classDefinition: #East2 category: 'MarsRoverTDD' stamp: 'PJ 10/24/2020 18:49:12'!
Orientation subclass: #East2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

East2 class
	instanceVariableNames: ''!

!classDefinition: 'East2 class' category: 'MarsRoverTDD' stamp: 'PJ 10/24/2020 18:49:12'!
East2 class
	instanceVariableNames: ''!
!East2 methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:49:12'!
backwardDelta
	^0@-1! !
!East2 methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:49:12'!
forwardDelta
	^0@1! !
!East2 methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:49:12'!
leftRotation
	^West new! !
!East2 methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:49:12'!
rightRotation
	^East new! !
!North methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:49:47' prior: 50868030!
rightRotation
	^East2 new! !
!East2 methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:49:53' prior: 50868065!
rightRotation
	^East2 new! !

!classRemoval: #East stamp: 'PJ 10/24/2020 18:50:08'!
Orientation subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!
!North methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:50:34' prior: 50868034!
leftRotation
	^West new! !

Orientation subclass: #West2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

!classDefinition: #West2 category: 'MarsRoverTDD' stamp: 'PJ 10/24/2020 18:50:49'!
Orientation subclass: #West2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

West2 class
	instanceVariableNames: ''!

!classDefinition: 'West2 class' category: 'MarsRoverTDD' stamp: 'PJ 10/24/2020 18:50:49'!
West2 class
	instanceVariableNames: ''!
!West2 methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:50:49'!
backwardDelta
	^0@-1! !
!West2 methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:50:49'!
forwardDelta
	^0@1! !
!West2 methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:50:49'!
leftRotation
	^West new! !
!West2 methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:50:49'!
rightRotation
	^East2 new! !

Orientation subclass: #South2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

!classDefinition: #South2 category: 'MarsRoverTDD' stamp: 'PJ 10/24/2020 18:51:24'!
Orientation subclass: #South2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

South2 class
	instanceVariableNames: ''!

!classDefinition: 'South2 class' category: 'MarsRoverTDD' stamp: 'PJ 10/24/2020 18:51:24'!
South2 class
	instanceVariableNames: ''!
!South2 methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:51:24'!
backwardDelta
	^0@-1! !
!South2 methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:51:24'!
forwardDelta
	^0@1! !
!South2 methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:51:24'!
leftRotation
	^West new! !
!South2 methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:51:24'!
rightRotation
	^East2 new! !

!classRemoval: #South stamp: 'PJ 10/24/2020 18:51:32'!
Orientation subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!
!North methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:51:43' prior: 50868083!
leftRotation
	^West2 new! !

!classRenamed: #West as: #West3 stamp: 'PJ 10/24/2020 18:52:08'!
Smalltalk renameClassNamed: #West as: #West3!
!West2 methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:52:09' prior: 50868110!
leftRotation
	^West3 new! !
!South2 methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:52:09' prior: 50868142!
leftRotation
	^West3 new! !
!East2 methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:52:09' prior: 50868061!
leftRotation
	^West3 new! !

Orientation subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

!classDefinition: #West category: 'MarsRoverTDD' stamp: 'PJ 10/24/2020 18:53:33'!
Orientation subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

!classRemoval: #West stamp: 'PJ 10/24/2020 18:53:52'!
Orientation subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!

!classRenamed: #West2 as: #West stamp: 'PJ 10/24/2020 18:57:50'!
Smalltalk renameClassNamed: #West2 as: #West!
!North methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:57:51' prior: 50868156!
leftRotation
	^West new! !

!classRenamed: #South2 as: #South stamp: 'PJ 10/24/2020 18:58:16'!
Smalltalk renameClassNamed: #South2 as: #South!

!classRenamed: #East2 as: #East stamp: 'PJ 10/24/2020 18:58:23'!
Smalltalk renameClassNamed: #East2 as: #East!
!East methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:58:24' prior: 50868073!
rightRotation
	^East new! !
!West methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:58:24' prior: 50868114!
rightRotation
	^East new! !
!South methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:58:24' prior: 50868146!
rightRotation
	^East new! !
!North methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:58:24' prior: 50868069!
rightRotation
	^East new! !
!East methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:59:11' prior: 50868054!
backwardDelta
	^-1@0! !
!East methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 18:59:22' prior: 50868058!
forwardDelta
	^1@0! !
!East methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:05:15' prior: 50868172!
leftRotation
	^North new! !
!East methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:05:27' prior: 50868207!
rightRotation
	^South new! !
!South methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:05:46' prior: 50868134!
backwardDelta
	^0@1! !
!South methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:05:58' prior: 50868138!
forwardDelta
	^0@-1! !
!South methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:06:18' prior: 50868168!
leftRotation
	^East new! !
!South methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:06:41' prior: 50868215!
rightRotation
	^West new! !
!West methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:07:20' prior: 50868103!
backwardDelta
	^1@0! !
!West methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:07:33' prior: 50868107!
forwardDelta
	^-1@0! !
!West methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:07:41' prior: 50868164!
leftRotation
	^South new! !
!West methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:07:51' prior: 50868211!
rightRotation
	^North new! !

!classRemoval: #West3 stamp: 'PJ 10/24/2020 19:07:58'!
Orientation subclass: #West3
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverTDD'!
!MarsRover methodsFor: 'commands' stamp: 'PJ 10/24/2020 19:08:54' prior: 50867937!
processCommand: aCommand
	aCommand = 'f'
		ifTrue: [ position := position + orientation forwardDelta
			"orientation = 'N' ifTrue: [0@1]
			ifFalse: [orientation = 'E' ifTrue: [1@0]
			ifFalse: [orientation = 'S' ifTrue: [0@-1]
			ifFalse: [-1@0]]]
			)"].
	aCommand = 'b'
		ifTrue: [ position := position + (
			orientation = 'N' ifTrue: [0@-1]
			ifFalse: [orientation = 'E' ifTrue: [-1@0]
			ifFalse: [orientation = 'S' ifTrue: [0@1]
			ifFalse: [1@0]]]
			)].
		
	aCommand = 'l'
		ifTrue: [orientation = 'N' ifTrue: ['O']
			ifFalse: [orientation = 'E' ifTrue: ['N']
			ifFalse: [orientation = 'S' ifTrue: ['E']
			ifFalse: ['S']]]
		].
	aCommand = 'r'
		ifTrue: [orientation = 'N' ifTrue: ['E']
			ifFalse: [orientation = 'E' ifTrue: ['S']
			ifFalse: [orientation = 'S' ifTrue: ['O']
			ifFalse: ['N']]]
		].
! !
!MarsRover methodsFor: 'initialization' stamp: 'PJ 10/24/2020 19:13:35' prior: 50867851!
initializeStartPoint: aPoint initialOrientation: anOrientation 

	position := aPoint.
	anOrientation = 'N'		ifTrue: [orientation := North new].
	anOrientation = 'S'		ifTrue: [orientation := South new].
	anOrientation = 'E'		ifTrue: [orientation := East new].
	anOrientation = 'O'		ifTrue: [orientation := West new].! !
!MarsRover methodsFor: 'commands' stamp: 'PJ 10/24/2020 19:16:53' prior: 50868277!
processCommand: aCommand
	aCommand = 'f'
		ifTrue: [ position := position + orientation forwardDelta].
	aCommand = 'b'
		ifTrue: [ position := position +			orientation backwardDelta].
		
	aCommand = 'l'
		ifTrue: [orientation := orientation leftRotation].
	aCommand = 'r'
		ifTrue: [orientation := orientation rightRotation].
! !

----SNAPSHOT----(24 October 2020 19:17:35) CuisUniversity-4384.image priorSource: 17162117!

!testRun: #MarsRoverTests #test06 stamp: 'PJ 10/24/2020 19:17:55'!
FAILURE!

!testRun: #MarsRoverTests #test06 stamp: 'PJ 10/24/2020 19:17:55'!
FAILURE!
!East methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:19:04'!
orientationString
	^'E'! !
!North methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:19:15'!
orientationString
	^'N'! !
!South methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:19:45'!
orientationString
	^'S'! !
!West methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:19:57'!
orientationString
	^'O'! !
!MarsRover methodsFor: 'state' stamp: 'PJ 10/24/2020 19:20:31' prior: 50867861!
orientation
	^orientation orientationString! !
!MarsRover methodsFor: 'state' stamp: 'PJ 10/24/2020 19:20:37' prior: 50868356!
orientation
	^orientation orientationString! !

!testRun: #MarsRoverTests #test01 stamp: 'PJ 10/24/2020 19:20:54'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'PJ 10/24/2020 19:20:54'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'PJ 10/24/2020 19:20:54'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'PJ 10/24/2020 19:20:54'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'PJ 10/24/2020 19:20:54'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'PJ 10/24/2020 19:20:54'!
PASSED!

----SNAPSHOT----(24 October 2020 19:21:00) CuisUniversity-4384.image priorSource: 17173801!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:31:38'!
test07
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover processCommand: 'frf'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !

!testRun: #MarsRoverTests #test01 stamp: 'PJ 10/24/2020 19:32:52'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'PJ 10/24/2020 19:32:52'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'PJ 10/24/2020 19:32:52'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'PJ 10/24/2020 19:32:52'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'PJ 10/24/2020 19:32:52'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'PJ 10/24/2020 19:32:52'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'PJ 10/24/2020 19:32:52'!
FAILURE!

!testRun: #MarsRoverTests #test07 stamp: 'PJ 10/24/2020 19:32:52'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'PJ 10/24/2020 19:37:44'!
executeCommandSet: aCommandSet
	aCommandSet do: [:aChar | self processCommand: aChar]
! !

!testRun: #MarsRoverTests #test01 stamp: 'PJ 10/24/2020 19:38:13'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'PJ 10/24/2020 19:38:13'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'PJ 10/24/2020 19:38:13'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'PJ 10/24/2020 19:38:13'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'PJ 10/24/2020 19:38:13'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'PJ 10/24/2020 19:38:13'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'PJ 10/24/2020 19:38:13'!
FAILURE!

!testRun: #MarsRoverTests #test07 stamp: 'PJ 10/24/2020 19:38:13'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'PJ 10/24/2020 19:39:13' prior: 50868319!
processCommand: aCommand
	aCommand = $f
		ifTrue: [ position := position + orientation forwardDelta].
	aCommand = $b
		ifTrue: [ position := position +			orientation backwardDelta].
		
	aCommand = $l
		ifTrue: [orientation := orientation leftRotation].
	aCommand = $r
		ifTrue: [orientation := orientation rightRotation].
! !

!testRun: #MarsRoverTests #test07 stamp: 'PJ 10/24/2020 19:39:18'!
FAILURE!

!testRun: #MarsRoverTests #test07 stamp: 'PJ 10/24/2020 19:39:18'!
FAILURE!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:40:58' prior: 50868382!
test07
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'frf'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:41:16' prior: 50867781!
test01
	| rover initialPoint |
	initialPoint := (1@1).
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	
	self assert: (rover position) equals: initialPoint.! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:41:38' prior: 50867790!
test02
	| rover initialPoint forwardPoint|
	initialPoint := (0@0).
	forwardPoint := (0@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'f'.
	
	self assert: (rover position) equals: forwardPoint.! !

!testRun: #MarsRoverTests #test02 stamp: 'PJ 10/24/2020 19:41:59'!
PASSED!
!MarsRover methodsFor: 'commands' stamp: 'PJ 10/24/2020 19:49:43' prior: 50868438!
processCommand: aCommand
	aCommand = $f
		ifTrue: [ position := position + orientation forwardDelta].
	aCommand = $b
		ifTrue: [ position := position +			orientation backwardDelta].
		
	aCommand = $l
		ifTrue: [orientation := orientation leftRotation].
	aCommand = $r
		ifTrue: [orientation := orientation rightRotation].
! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:50:08' prior: 50867801!
test03
	| rover initialPoint |
	initialPoint := (0@0).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'l'.
	
	self assert: (rover position) equals: initialPoint.
	self assert: (rover orientation) equals: 'O'.! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:50:57' prior: 50867813!
test04
	| rover initialPoint finalPoint|
	initialPoint := (0@0).
	finalPoint := (-1@0).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'r'.
	rover executeCommandSet: 'b'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:51:15' prior: 50867826!
test05
	| rover initialPoint finalPoint|
	initialPoint := (0@0).
	finalPoint := (1@0).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'r'.
	rover executeCommandSet: 'f'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:51:25' prior: 50867923!
test06
	| rover initialPoint |
	initialPoint := (0@0).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'r'.
	rover executeCommandSet: 'l'.
	
	self assert: (rover position) equals: initialPoint.
	self assert: (rover orientation) equals: 'N'.! !

!testRun: #MarsRoverTests #test01 stamp: 'PJ 10/24/2020 19:51:52'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'PJ 10/24/2020 19:51:52'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'PJ 10/24/2020 19:51:52'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'PJ 10/24/2020 19:51:52'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'PJ 10/24/2020 19:51:52'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'PJ 10/24/2020 19:51:52'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'PJ 10/24/2020 19:51:52'!
PASSED!

----SNAPSHOT----(24 October 2020 19:52:00) CuisUniversity-4384.image priorSource: 17175286!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:56:58'!
test08
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'frfzffff'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 19:57:28' prior: 50868578!
test08
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'frfzfflff'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !

!testRun: #MarsRoverTests #test08 stamp: 'PJ 10/24/2020 19:58:22'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'PJ 10/24/2020 20:00:49' prior: 50868492!
processCommand: aCommand
	aCommand = $f
		ifTrue: [ position := position + orientation forwardDelta. ^true].
	aCommand = $b
		ifTrue: [ position := position +			orientation backwardDelta. ^true].
		
	aCommand = $l
		ifTrue: [orientation := orientation leftRotation. ^true].
	aCommand = $r
		ifTrue: [orientation := orientation rightRotation. ^true]
		ifFalse: [^false].
! !
!MarsRover methodsFor: 'commands' stamp: 'PJ 10/24/2020 20:02:59' prior: 50868413!
executeCommandSet: aCommandSet
	aCommandSet do: [:aChar |
		(self processCommand: aChar) ifFalse: [^self]]
! !

!testRun: #MarsRoverTests #test08 stamp: 'PJ 10/24/2020 20:03:03'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'PJ 10/24/2020 20:03:08'!
PASSED!

!testRun: #MarsRoverTests #test01 stamp: 'PJ 10/24/2020 20:03:08'!
PASSED!

!testRun: #MarsRoverTests #test02 stamp: 'PJ 10/24/2020 20:03:08'!
PASSED!

!testRun: #MarsRoverTests #test03 stamp: 'PJ 10/24/2020 20:03:08'!
PASSED!

!testRun: #MarsRoverTests #test04 stamp: 'PJ 10/24/2020 20:03:08'!
PASSED!

!testRun: #MarsRoverTests #test05 stamp: 'PJ 10/24/2020 20:03:08'!
PASSED!

!testRun: #MarsRoverTests #test06 stamp: 'PJ 10/24/2020 20:03:08'!
PASSED!

!testRun: #MarsRoverTests #test07 stamp: 'PJ 10/24/2020 20:03:08'!
PASSED!

!testRun: #MarsRoverTests #test08 stamp: 'PJ 10/24/2020 20:03:08'!
PASSED!

----SNAPSHOT----(24 October 2020 20:03:42) CuisUniversity-4384.image priorSource: 17181561!

!methodRemoval: MarsRoverTests #test01 stamp: 'PJ 10/24/2020 20:14:46'!
test01
	| rover initialPoint |
	initialPoint := (1@1).
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	
	self assert: (rover position) equals: initialPoint.!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:17:08'!
test01RoverCanMoveCorrectly
	| rover initialPoint forwardPoint|
	initialPoint := (0@0).
	forwardPoint := (0@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'f'.
	
	self assert: (rover position) equals: forwardPoint.! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:17:32'!
test01RoverMovesCorrectly
	| rover initialPoint forwardPoint|
	initialPoint := (0@0).
	forwardPoint := (0@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'f'.
	
	self assert: (rover position) equals: forwardPoint.! !

!methodRemoval: MarsRoverTests #test01RoverCanMoveCorrectly stamp: 'PJ 10/24/2020 20:17:32'!
test01RoverCanMoveCorrectly
	| rover initialPoint forwardPoint|
	initialPoint := (0@0).
	forwardPoint := (0@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'f'.
	
	self assert: (rover position) equals: forwardPoint.!

!methodRemoval: MarsRoverTests #test02 stamp: 'PJ 10/24/2020 20:17:36'!
test02
	| rover initialPoint forwardPoint|
	initialPoint := (0@0).
	forwardPoint := (0@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'f'.
	
	self assert: (rover position) equals: forwardPoint.!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:18:03'!
test02RoverRotatesCorrectly
	| rover initialPoint |
	initialPoint := (0@0).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'l'.
	
	self assert: (rover position) equals: initialPoint.
	self assert: (rover orientation) equals: 'O'.! !

!methodRemoval: MarsRoverTests #test03 stamp: 'PJ 10/24/2020 20:18:10'!
test03
	| rover initialPoint |
	initialPoint := (0@0).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'l'.
	
	self assert: (rover position) equals: initialPoint.
	self assert: (rover orientation) equals: 'O'.!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:28:23'!
test03RoverCanExecuteMorethanOneCommand
	| rover initialPoint finalPoint|
	initialPoint := (0@0).
	finalPoint := (-1@0).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'r'.
	rover executeCommandSet: 'b'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !

!methodRemoval: MarsRoverTests #test04 stamp: 'PJ 10/24/2020 20:28:39'!
test04
	| rover initialPoint finalPoint|
	initialPoint := (0@0).
	finalPoint := (-1@0).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'r'.
	rover executeCommandSet: 'b'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.!

!methodRemoval: MarsRoverTests #test05 stamp: 'PJ 10/24/2020 20:29:35'!
test05
	| rover initialPoint finalPoint|
	initialPoint := (0@0).
	finalPoint := (1@0).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'r'.
	rover executeCommandSet: 'f'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.!

!methodRemoval: MarsRoverTests #test06 stamp: 'PJ 10/24/2020 20:30:05'!
test06
	| rover initialPoint |
	initialPoint := (0@0).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'r'.
	rover executeCommandSet: 'l'.
	
	self assert: (rover position) equals: initialPoint.
	self assert: (rover orientation) equals: 'N'.!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:30:37'!
test07RoverCanExecuteAStringOfCommands
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'frf'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !

!methodRemoval: MarsRoverTests #test07 stamp: 'PJ 10/24/2020 20:30:42'!
test07
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'frf'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:31:29'!
test08RoverStopsExecutingWhenACommandIsInvalid
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'frfzfflff'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !

!methodRemoval: MarsRoverTests #test08 stamp: 'PJ 10/24/2020 20:31:32'!
test08
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'frfzfflff'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:31:43'!
test04RoverCanExecuteAStringOfCommands
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'frf'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:31:50'!
test05RoverStopsExecutingWhenACommandIsInvalid
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'frfzfflff'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !

!methodRemoval: MarsRoverTests #test07RoverCanExecuteAStringOfCommands stamp: 'PJ 10/24/2020 20:31:55'!
test07RoverCanExecuteAStringOfCommands
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'frf'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.!

!methodRemoval: MarsRoverTests #test08RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/24/2020 20:31:59'!
test08RoverStopsExecutingWhenACommandIsInvalid
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	rover executeCommandSet: 'frfzfflff'.
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.!

!testRun: #MarsRoverTests #test05RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/24/2020 20:32:12'!
PASSED!

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PJ 10/24/2020 20:32:12'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PJ 10/24/2020 20:32:12'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PJ 10/24/2020 20:32:12'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PJ 10/24/2020 20:32:12'!
PASSED!

!testRun: #MarsRoverTests #test05RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/24/2020 20:32:12'!
PASSED!

----SNAPSHOT----(24 October 2020 20:34:41) CuisUniversity-4384.image priorSource: 17184006!
!Orientation methodsFor: 'nil' stamp: 'PJ 10/24/2020 20:40:16'!
backwardDelta
	self subclassResponsibility ! !
!Orientation methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:40:28'!
forwardDelta
	self subclassResponsibility ! !
!Orientation methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:40:39'!
leftRotation
	self subclassResponsibility ! !
!Orientation methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:40:45'!
rightRotation
	self subclassResponsibility ! !
!Orientation methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:40:58'!
orientationString
	self subclassResponsibility ! !
!Orientation methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:41:43'!
canHandle: anOrientation
	self subclassResponsibility ! !
!East methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:42:21' overrides: 50868927!
canHandle: anOrientation
	^anOrientation = 'E'! !
!North methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:42:33' overrides: 50868927!
canHandle: anOrientation
	^anOrientation = 'N'! !
!South methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:42:51' overrides: 50868927!
canHandle: anOrientation
	^anOrientation = 'S'! !
!West methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:43:09' overrides: 50868927!
canHandle: anOrientation
	^anOrientation = 'O'! !
!Orientation class methodsFor: 'nil' stamp: 'PJ 10/24/2020 20:52:37'!
initializeFor: anOrientationString
	^(self subclasses detect: [:anOrientation | anOrientation canHandle: anOrientationString]) for: anOrientationString! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:55:23'!
for: anOrientationString
	^self new initializeFor: anOrientationString! !
!East class methodsFor: 'nil' stamp: 'PJ 10/24/2020 20:55:48'!
canHandle: anOrientation
	^anOrientation = 'E'! !
!North class methodsFor: 'nil' stamp: 'PJ 10/24/2020 20:55:58'!
canHandle: anOrientation
	^anOrientation = 'N'! !
!South class methodsFor: 'nil' stamp: 'PJ 10/24/2020 20:56:07'!
canHandle: anOrientation
	^anOrientation = 'S'! !
!West class methodsFor: 'nil' stamp: 'PJ 10/24/2020 20:56:23'!
canHandle: anOrientation
	^anOrientation = 'O'! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:57:46'!
canHandle: anOrientationString
	self subclassResponsibility ! !
!East class methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:58:19' prior: 50868964 overrides: 50868981!
canHandle: anOrientationString
	^anOrientationString = 'E'! !
!North class methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:58:27' prior: 50868968 overrides: 50868981!
canHandle: anOrientationString
	^anOrientationString = 'N'! !
!South class methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:58:37' prior: 50868972 overrides: 50868981!
canHandle: anOrientationString
	^anOrientationString = 'S'! !
!West class methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 20:58:48' prior: 50868976 overrides: 50868981!
canHandle: anOrientationString
	^anOrientationString = 'O'! !

!methodRemoval: East #canHandle: stamp: 'PJ 10/24/2020 21:00:50'!
canHandle: anOrientation
	^anOrientation = 'E'!

!methodRemoval: North #canHandle: stamp: 'PJ 10/24/2020 21:01:03'!
canHandle: anOrientation
	^anOrientation = 'N'!

!methodRemoval: South #canHandle: stamp: 'PJ 10/24/2020 21:01:07'!
canHandle: anOrientation
	^anOrientation = 'S'!

!methodRemoval: West #canHandle: stamp: 'PJ 10/24/2020 21:01:13'!
canHandle: anOrientation
	^anOrientation = 'O'!
!Orientation class methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 21:01:49' prior: 50868959!
for: anOrientationString
	^self new! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'PJ 10/24/2020 21:02:08' prior: 50868951!
initializeFor: anOrientationString
	^(self subclasses detect: [:anOrientation | anOrientation canHandle: anOrientationString]) new! !

!methodRemoval: Orientation class #for: stamp: 'PJ 10/24/2020 21:02:17'!
for: anOrientationString
	^self new!

!methodRemoval: Orientation #canHandle: stamp: 'PJ 10/24/2020 21:03:03'!
canHandle: anOrientation
	self subclassResponsibility !
!MarsRover methodsFor: 'initialization' stamp: 'PJ 10/24/2020 21:04:35' prior: 50868306!
initializeStartPoint: aPoint initialOrientation: anOrientation 

	position := aPoint.
	orientation := Orientation initializeFor: anOrientation ! !

----SNAPSHOT----(24 October 2020 21:04:43) CuisUniversity-4384.image priorSource: 17192074!

!testRun: #MarsRoverTests #test05RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/24/2020 21:04:55'!
PASSED!

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PJ 10/24/2020 21:04:55'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PJ 10/24/2020 21:04:55'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PJ 10/24/2020 21:04:55'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PJ 10/24/2020 21:04:55'!
PASSED!

!testRun: #MarsRoverTests #test05RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/24/2020 21:04:55'!
PASSED!
!MarsRover methodsFor: 'state' stamp: 'PJ 10/24/2020 21:06:32' prior: 50867857!
position
	^position.! !

----SNAPSHOT----(24 October 2020 21:07:33) CuisUniversity-4384.image priorSource: 17196850!

----SNAPSHOT----(24 October 2020 21:17:55) CuisUniversity-4384.image priorSource: 17197719!

----SNAPSHOT----(24 October 2020 21:54:19) CuisUniversity-4384.image priorSource: 17197812!

----STARTUP---- (26 October 2020 11:07:17) as C:\Users\paujimenez\Documents\Ingenieria1\cuisWindows64\windows64-MarsRover\CuisUniversity-4384.image!

!MarsRover class methodsFor: 'instance creation' stamp: 'PJ 10/26/2020 11:15:23'!
invalidCommandExeptionDescription: anInvalidCommand
	^'Rover recived an invalid command: ', anInvalidCommand! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 11:20:42' prior: 50868842!
test05RoverStopsExecutingWhenACommandIsInvalid
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	
	
	self should: [rover executeCommandSet: 'frfzfflff']
		raise: Error - MessageNotUnderstood
		description: (rover class invalidCommandExeptionDescription: $z).
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !

!testRun: #MarsRoverTests #test05RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 11:21:15'!
ERROR!

!testRun: #MarsRoverTests #test05RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 11:21:15'!
ERROR!
!MarsRover class methodsFor: 'exeption descriptions' stamp: 'PJ 10/26/2020 11:28:56' prior: 50869093!
invalidCommandExeptionDescription: anInvalidCommand
	^'Rover recived an invalid command: ', anInvalidCommand asString! !

!testRun: #MarsRoverTests #test05RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 11:29:02'!
FAILURE!

!testRun: #MarsRoverTests #test05RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 11:29:46'!
PASSED!
!MarsRover class methodsFor: 'exeption descriptions' stamp: 'PJ 10/26/2020 11:30:13' prior: 50869125!
invalidCommandExeptionDescription: anInvalidCommand
	^'Rover received an invalid command: ', anInvalidCommand asString! !

!testRun: #MarsRoverTests #test05RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 11:30:33'!
FAILURE!

!testRun: #MarsRoverTests #test05RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 11:30:33'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'PJ 10/26/2020 11:34:41' prior: 50868606!
processCommand: aCommand
	aCommand = $f
		ifTrue: [ position := position + orientation forwardDelta].
	aCommand = $b
		ifTrue: [ position := position +			orientation backwardDelta].
		
	aCommand = $l
		ifTrue: [orientation := orientation leftRotation].
	aCommand = $r
		ifTrue: [orientation := orientation rightRotation]
		ifFalse: [self error: (self class invalidCommandExeptionDescription: aCommand)].
! !
!MarsRover methodsFor: 'commands' stamp: 'PJ 10/26/2020 11:35:08' prior: 50868621!
executeCommandSet: aCommandSet
	aCommandSet do: [:aChar |
		self processCommand: aChar]
! !

!testRun: #MarsRoverTests #test05RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 11:35:30'!
FAILURE!

!testRun: #MarsRoverTests #test05RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 11:35:30'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'PJ 10/26/2020 11:38:26' prior: 50869154!
processCommand: aCommand
	aCommand = $f
		ifTrue: [ position := position + orientation forwardDelta].
	aCommand = $b
		ifTrue: [ position := position +			orientation backwardDelta].
		
	aCommand = $l
		ifTrue: [orientation := orientation leftRotation].
	aCommand = $r
		ifTrue: [orientation := orientation rightRotation]
		ifFalse: [^self error: (self class invalidCommandExeptionDescription: aCommand)].
! !

!testRun: #MarsRoverTests #test05RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 11:38:33'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'PJ 10/24/2020 20:02:59' prior: 50869170!
executeCommandSet: aCommandSet
	aCommandSet do: [:aChar |
		(self processCommand: aChar) ifFalse: [^self]]
! !
!MarsRover methodsFor: 'commands' stamp: 'PJ 10/26/2020 11:34:41' prior: 50869183!
processCommand: aCommand
	aCommand = $f
		ifTrue: [ position := position + orientation forwardDelta].
	aCommand = $b
		ifTrue: [ position := position +			orientation backwardDelta].
		
	aCommand = $l
		ifTrue: [orientation := orientation leftRotation].
	aCommand = $r
		ifTrue: [orientation := orientation rightRotation]
		ifFalse: [self error: (self class invalidCommandExeptionDescription: aCommand)].
! !
!MarsRover methodsFor: 'commands' stamp: 'PJ 10/24/2020 20:00:49' prior: 50869210!
processCommand: aCommand
	aCommand = $f
		ifTrue: [ position := position + orientation forwardDelta. ^true].
	aCommand = $b
		ifTrue: [ position := position +			orientation backwardDelta. ^true].
		
	aCommand = $l
		ifTrue: [orientation := orientation leftRotation. ^true].
	aCommand = $r
		ifTrue: [orientation := orientation rightRotation. ^true]
		ifFalse: [^false].
! !
!MarsRover methodsFor: 'commands' stamp: 'PJ 10/26/2020 11:50:34' prior: 50869226!
processCommand: aCommand
	aCommand = $f
		ifTrue: [ position := position + orientation forwardDelta. ^true].
	aCommand = $b
		ifTrue: [ position := position +			orientation backwardDelta. ^true].
		
	aCommand = $l
		ifTrue: [orientation := orientation leftRotation. ^true].
	aCommand = $r
		ifTrue: [orientation := orientation rightRotation. ^true]
		ifFalse: [self error: (self class invalidCommandExeptionDescription: aCommand). ^false].
! !

!testRun: #MarsRoverTests #test05RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 11:50:47'!
PASSED!

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PJ 10/26/2020 11:50:47'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PJ 10/26/2020 11:50:47'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PJ 10/26/2020 11:50:47'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PJ 10/26/2020 11:50:47'!
PASSED!

!testRun: #MarsRoverTests #test05RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 11:50:47'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 11:51:12' prior: 50869100!
test05RoverStopsExecutingWhenACommandIsInvalid
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	
	self should: [rover executeCommandSet: 'frfzfflff']
		raise: Error - MessageNotUnderstood
		description: (rover class invalidCommandExeptionDescription: $z).
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 11:55:38'!
test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	
	self should: [rover executeCommandSet: 'frfzfflff']
		raise: Error - MessageNotUnderstood
		description: (rover class invalidCommandExeptionDescription: $z).
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !

!methodRemoval: MarsRoverTests #test05RoverStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 11:55:43'!
test05RoverStopsExecutingWhenACommandIsInvalid
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	
	self should: [rover executeCommandSet: 'frfzfflff']
		raise: Error - MessageNotUnderstood
		description: (rover class invalidCommandExeptionDescription: $z).
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.!

!testRun: #MarsRoverTests #test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 11:55:59'!
PASSED!

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PJ 10/26/2020 11:55:59'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PJ 10/26/2020 11:55:59'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PJ 10/26/2020 11:55:59'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PJ 10/26/2020 11:55:59'!
PASSED!

!testRun: #MarsRoverTests #test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 11:55:59'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 12:03:03'!
test06RoverAssertsWhenInitializedWithoutAStartingPoint
	|rover|
	self should: [
			rover := MarsRover startPoint: #(1 0) initialOrientation: 'N']
		raise: Error - MessageNotUnderstood
		description: (rover class invalidStartingPointExeptionDescription).! !

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 12:03:15'!
ERROR!
!MarsRover class methodsFor: 'exeption descriptions' stamp: 'PJ 10/26/2020 12:05:53'!
invalidStartingPointExeptionDescription
	^'Invalid starting point'! !

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 12:06:14'!
ERROR!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 12:07:07'!
ERROR!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 12:07:07'!
ERROR!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 12:08:37'!
ERROR!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 12:08:37'!
ERROR!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 12:10:36' prior: 50869353!
test06RoverAssertsWhenInitializedWithoutAStartingPoint
	|rover|
	self should: [
			rover := MarsRover startPoint: #(1 0) initialOrientation: 'N']
		raise: Error - MessageNotUnderstood
		description: [rover class invalidStartingPointExeptionDescription].! !

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 12:10:37'!
FAILURE!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 12:10:37'!
ERROR!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 12:11:30' prior: 50869393!
test06RoverAssertsWhenInitializedWithoutAStartingPoint
	|rover|
	self should: [
			rover := MarsRover startPoint: #(1 0) initialOrientation: 'N']
		raise: Error - MessageNotUnderstood
		description: (rover class invalidStartingPointExeptionDescription).! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 12:13:31' prior: 50869412!
test06RoverAssertsWhenInitializedWithoutAStartingPoint
	|rover|
	self should: [
			rover := MarsRover startPoint: #(1 0) initialOrientation: 'N']
		raise: Error - MessageNotUnderstood
		description: 'Invalid starting point'.
		"description: (rover class invalidStartingPointExeptionDescription). Esto se evalua primero y rover es nil"! !

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 12:13:49'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'PJ 10/26/2020 12:22:36' prior: 50867893!
startPoint: aPoint initialOrientation: anOrientation
	(aPoint isKindOf: Point) ifFalse: [^self error: self invalidStartingPointExeptionDescription].
	
	^self new initializeStartPoint: aPoint initialOrientation: anOrientation! !

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 12:22:47'!
PASSED!

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PJ 10/26/2020 12:22:47'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PJ 10/26/2020 12:22:47'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PJ 10/26/2020 12:22:47'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PJ 10/26/2020 12:22:47'!
PASSED!

!testRun: #MarsRoverTests #test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 12:22:47'!
PASSED!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 12:22:47'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 12:26:36'!
test07RoverAssertsWhenInitializedWithAnInvalidOrientation
	|rover|
	self should: [
			rover := MarsRover startPoint: (1@0) initialOrientation: 'H']
		raise: Error - MessageNotUnderstood
		description: 'Invalid orientation'.
		"description: (rover class invalidOrientationExeptionDescription). Esto se evalua primero y rover es nil"! !

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 12:27:26'!
PASSED!

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PJ 10/26/2020 12:27:26'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PJ 10/26/2020 12:27:26'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PJ 10/26/2020 12:27:26'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PJ 10/26/2020 12:27:26'!
PASSED!

!testRun: #MarsRoverTests #test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 12:27:26'!
PASSED!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 12:27:26'!
PASSED!

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 12:27:26'!
PASSED!

----SNAPSHOT----(26 October 2020 12:30:57) CuisUniversity-4384.image priorSource: 17197905!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 12:32:07' prior: 50869477!
test07RoverAssertsWhenInitializedWithAnInvalidOrientation
	|rover|
	self should: [
			rover := MarsRover startPoint: (1@0) initialOrientation: 'H']
		raise: Error - MessageNotUnderstood
		description: 'Invalid orientation'.
		"description: (rover class invalidOrientationExeptionDescription). Esto se evalua primero y rover es nil"! !

Orientation subclasses detect: [:anOrientation | anOrientation canHandle: 'H']!

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 12:40:55'!
PASSED!

MarsRover startPoint: (1@0) initialOrientation: 'H'!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 12:42:23' prior: 50869522!
test07RoverAssertsWhenInitializedWithAnInvalidOrientation

	self should: [
			MarsRover startPoint: (1@0) initialOrientation: 'H']
		raise: Error - MessageNotUnderstood
		description: 'Invalid orientation'.
		"description: (rover class invalidOrientationExeptionDescription). Esto se evalua primero y rover es nil"! !

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 12:42:28'!
PASSED!

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PJ 10/26/2020 12:42:28'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PJ 10/26/2020 12:42:28'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PJ 10/26/2020 12:42:28'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PJ 10/26/2020 12:42:28'!
PASSED!

!testRun: #MarsRoverTests #test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 12:42:28'!
PASSED!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 12:42:28'!
PASSED!

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 12:42:28'!
PASSED!

MarsRover startPoint: (1@0) initialOrientation: 'H'!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 12:53:25' prior: 50869544!
test07RoverAssertsWhenInitializedWithAnInvalidOrientation

	self should: [
			MarsRover startPoint: (1@0) initialOrientation: 'H']
		raise: Error - MessageNotUnderstood
		description: ''.
		"description: (rover class invalidOrientationExeptionDescription). Esto se evalua primero y rover es nil"! !

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 12:53:26'!
PASSED!

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PJ 10/26/2020 12:53:26'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PJ 10/26/2020 12:53:26'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PJ 10/26/2020 12:53:26'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PJ 10/26/2020 12:53:26'!
PASSED!

!testRun: #MarsRoverTests #test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 12:53:26'!
PASSED!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 12:53:26'!
PASSED!

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 12:53:26'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 12:54:29' prior: 50869588!
test07RoverAssertsWhenInitializedWithAnInvalidOrientation

	self should: [
			MarsRover startPoint: (1@0) initialOrientation: 'H']
		raise: Error - MessageNotUnderstood
		description: 'Invalid orientation'.
		"description: (rover class invalidOrientationExeptionDescription). Esto se evalua primero y rover es nil"! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 12:56:22' prior: 50869629!
test07RoverAssertsWhenInitializedWithAnInvalidOrientation

	self should: [
			MarsRover startPoint: (1@0) initialOrientation: 'H']
		raise: Error - MessageNotUnderstood
		withMessageText: 'Invalid orientation'.
		"description: (rover class invalidOrientationExeptionDescription). Esto se evalua primero y rover es nil"! !

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 12:56:26'!
FAILURE!

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 12:56:57'!
FAILURE!
!Orientation class methodsFor: 'nil' stamp: 'PJ 10/26/2020 13:04:00'!
invalidOrientationErrorDescription
	^'Invalid orientation string'! !
!Orientation class methodsFor: 'instance creation' stamp: 'PJ 10/26/2020 13:10:48' prior: 50869030!
initializeFor: anOrientationString
	
	(self subclasses detect: [:anOrientation | anOrientation canHandle: anOrientationString]) new
		on: Error
		do: [^self error: self invalidOrientationErrorDescription]! !

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 13:11:21'!
FAILURE!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 13:13:03' prior: 50869643!
test07RoverAssertsWhenInitializedWithAnInvalidOrientation

	self should: [
			MarsRover startPoint: (1@0) initialOrientation: 'H']
		raise: Error - MessageNotUnderstood
		withMessageText: Orientation invalidOrientationErrorDescription.! !

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 13:13:06'!
FAILURE!
!Orientation class methodsFor: 'instance creation' stamp: 'PJ 10/26/2020 13:16:02' prior: 50869670!
initializeFor: anOrientationString
	
	((self subclasses detect: [:anOrientation | anOrientation canHandle: anOrientationString]) new)
		on: Error
		do: [^self error: self invalidOrientationErrorDescription]! !

Orientation initializeFor: 'H'!
!Orientation class methodsFor: 'instance creation' stamp: 'PJ 10/26/2020 13:17:14' prior: 50869699!
initializeFor: anOrientationString
	
	(self subclasses detect: [:anOrientation | anOrientation canHandle: anOrientationString])
		on: Error
		do: [^self error: self invalidOrientationErrorDescription]! !
!Orientation class methodsFor: 'instance creation' stamp: 'PJ 10/26/2020 13:20:39' prior: 50869710!
initializeFor: anOrientationString
	
	[self subclasses detect: [:anOrientation | anOrientation canHandle: anOrientationString]]
		on: Error
		do: [^self error: self invalidOrientationErrorDescription]! !

Orientation initializeFor: 'H'!
!Orientation class methodsFor: 'instance creation' stamp: 'PJ 10/26/2020 13:21:24' prior: 50869720!
initializeFor: anOrientationString
	
	[(self subclasses detect: [:anOrientation | anOrientation canHandle: anOrientationString]) new]
		on: Error
		do: [^self error: self invalidOrientationErrorDescription]! !

Orientation initializeFor: 'H'!

Orientation initializeFor: 'N'!
!Orientation class methodsFor: 'instance creation' stamp: 'PJ 10/26/2020 13:22:17' prior: 50869731!
initializeFor: anOrientationString
	
	[^(self subclasses detect: [:anOrientation | anOrientation canHandle: anOrientationString]) new]
		on: Error
		do: [^self error: self invalidOrientationErrorDescription]! !

Orientation initializeFor: 'N'!

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 13:22:59'!
PASSED!

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PJ 10/26/2020 13:22:59'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PJ 10/26/2020 13:22:59'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PJ 10/26/2020 13:22:59'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PJ 10/26/2020 13:22:59'!
PASSED!

!testRun: #MarsRoverTests #test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 13:22:59'!
PASSED!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 13:22:59'!
PASSED!

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 13:22:59'!
PASSED!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 13:24:19' prior: 50869424!
test06RoverAssertsWhenInitializedWithoutAStartingPoint
	|rover|
	self should: [
			rover := MarsRover startPoint: #(1 0) initialOrientation: 'N']
		raise: Error - MessageNotUnderstood
		withMessageText: MarsRover invalidStartingPointExeptionDescription.! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 13:24:34' prior: 50869783!
test06RoverAssertsWhenInitializedWithoutAStartingPoint

	self should: [
			MarsRover startPoint: #(1 0) initialOrientation: 'N']
		raise: Error - MessageNotUnderstood
		withMessageText: MarsRover invalidStartingPointExeptionDescription.! !

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 13:24:40'!
PASSED!

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PJ 10/26/2020 13:24:40'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PJ 10/26/2020 13:24:40'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PJ 10/26/2020 13:24:40'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PJ 10/26/2020 13:24:40'!
PASSED!

!testRun: #MarsRoverTests #test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 13:24:40'!
PASSED!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 13:24:40'!
PASSED!

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 13:24:40'!
PASSED!

----SNAPSHOT----(26 October 2020 13:24:44) CuisUniversity-4384.image priorSource: 17211775!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 13:28:25'!
test08RoverAssertsWhenInitializedWithWrongTypeForOrientation

	self should: [
			MarsRover startPoint: (1@0) initialOrientation: 45]
		raise: Error - MessageNotUnderstood
		withMessageText: Orientation invalidOrientationErrorDescription.! !

!testRun: #MarsRoverTests #test08RoverAssertsWhenInitializedWithWrongTypeForOrientation stamp: 'PJ 10/26/2020 13:28:29'!
PASSED!

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PJ 10/26/2020 13:28:29'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PJ 10/26/2020 13:28:29'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PJ 10/26/2020 13:28:29'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PJ 10/26/2020 13:28:29'!
PASSED!

!testRun: #MarsRoverTests #test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 13:28:29'!
PASSED!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 13:28:29'!
PASSED!

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 13:28:29'!
PASSED!

!testRun: #MarsRoverTests #test08RoverAssertsWhenInitializedWithWrongTypeForOrientation stamp: 'PJ 10/26/2020 13:28:29'!
PASSED!

!methodRemoval: MarsRoverTests #test08RoverAssertsWhenInitializedWithWrongTypeForOrientation stamp: 'PJ 10/26/2020 13:28:41'!
test08RoverAssertsWhenInitializedWithWrongTypeForOrientation

	self should: [
			MarsRover startPoint: (1@0) initialOrientation: 45]
		raise: Error - MessageNotUnderstood
		withMessageText: Orientation invalidOrientationErrorDescription.!
!MarsRover class methodsFor: 'instance creation' stamp: 'PJ 10/26/2020 13:32:43' prior: 50869442!
startPoint: aPoint initialOrientation: anOrientation
	
	(aPoint isKindOf: Point) ifFalse: [^self error: self invalidStartingPointExeptionDescription].
	
	^self new initializeStartPoint: aPoint initialOrientation: anOrientation! !

----SNAPSHOT----(26 October 2020 13:34:06) CuisUniversity-4384.image priorSource: 17221856!
!MarsRover class methodsFor: 'exeption descriptions' stamp: 'PJ 10/26/2020 13:38:36'!
invalidCommandExceptionDescription: anInvalidCommand
	^'Rover received an invalid command: ', anInvalidCommand asString! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 13:38:36' prior: 50869296!
test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid
	| rover initialPoint finalPoint |
	initialPoint := (0@0).
	finalPoint := (1@1).
	
	rover := MarsRover startPoint: initialPoint initialOrientation: 'N'.
	
	self should: [rover executeCommandSet: 'frfzfflff']
		raise: Error - MessageNotUnderstood
		description: (rover class invalidCommandExceptionDescription: $z).
	
	self assert: (rover position) equals: finalPoint.
	self assert: (rover orientation) equals: 'E'.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 13:38:36' prior: 50869241!
processCommand: aCommand
	aCommand = $f
		ifTrue: [ position := position + orientation forwardDelta. ^true].
	aCommand = $b
		ifTrue: [ position := position +			orientation backwardDelta. ^true].
		
	aCommand = $l
		ifTrue: [orientation := orientation leftRotation. ^true].
	aCommand = $r
		ifTrue: [orientation := orientation rightRotation. ^true]
		ifFalse: [self error: (self class invalidCommandExceptionDescription: aCommand). ^false].
! !

!methodRemoval: MarsRover class #invalidCommandExeptionDescription: stamp: 'PJ 10/26/2020 13:38:36'!
invalidCommandExeptionDescription: anInvalidCommand
	^'Rover received an invalid command: ', anInvalidCommand asString!
!MarsRover class methodsFor: 'exeption descriptions' stamp: 'PJ 10/26/2020 13:39:06'!
invalidStartingPointExceptionDescription
	^'Invalid starting point'! !
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 13:39:06' prior: 50869795!
test06RoverAssertsWhenInitializedWithoutAStartingPoint

	self should: [
			MarsRover startPoint: #(1 0) initialOrientation: 'N']
		raise: Error - MessageNotUnderstood
		withMessageText: MarsRover invalidStartingPointExceptionDescription.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'PJ 10/26/2020 13:39:06' prior: 50869892!
startPoint: aPoint initialOrientation: anOrientation
	
	(aPoint isKindOf: Point) ifFalse: [^self error: self invalidStartingPointExceptionDescription].
	
	^self new initializeStartPoint: aPoint initialOrientation: anOrientation! !

!methodRemoval: MarsRover class #invalidStartingPointExeptionDescription stamp: 'PJ 10/26/2020 13:39:06'!
invalidStartingPointExeptionDescription
	^'Invalid starting point'!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 13:39:16'!
PASSED!

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PJ 10/26/2020 13:39:16'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PJ 10/26/2020 13:39:16'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PJ 10/26/2020 13:39:16'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PJ 10/26/2020 13:39:16'!
PASSED!

!testRun: #MarsRoverTests #test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid stamp: 'PJ 10/26/2020 13:39:16'!
PASSED!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PJ 10/26/2020 13:39:16'!
PASSED!

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PJ 10/26/2020 13:39:16'!
PASSED!

----SNAPSHOT----(26 October 2020 13:39:30) CuisUniversity-4384.image priorSource: 17224037!

----STARTUP---- (26 October 2020 15:05:53) as /home/pablo/Documents/Ingenieria1/cuis_TDD/linux64/CuisUniversity-4384.image!

!MarsRover methodsFor: 'state' stamp: 'PGTA 10/26/2020 15:49:45'!
stepForward
	^position.! !
!MarsRover methodsFor: 'commands' stamp: 'PGTA 10/26/2020 15:51:04'!
stepBackwards

	^ position := position +			orientation backwardDelta! !
!MarsRover methodsFor: 'commands' stamp: 'PGTA 10/26/2020 15:51:04' prior: 50867900!
processCommand: aCommand
	aCommand = $f
		ifTrue: [ position := position + orientation forwardDelta. ^true].
	aCommand = $b
		ifTrue: [ self stepBackwards. ^true].
		
	aCommand = $l
		ifTrue: [orientation := orientation leftRotation. ^true].
	aCommand = $r
		ifTrue: [orientation := orientation rightRotation. ^true]
		ifFalse: [self error: (self class invalidCommandExceptionDescription: aCommand). ^false].
! !
!MarsRover methodsFor: 'movements' stamp: 'PGTA 10/26/2020 15:51:46' prior: 50868191!
stepForward
	position := position + orientation forwardDelta! !
!MarsRover methodsFor: 'commands' stamp: 'PGTA 10/26/2020 15:52:06' prior: 50868199!
processCommand: aCommand
	aCommand = $f
		ifTrue: [ self stepForward. ^true].
	aCommand = $b
		ifTrue: [ self stepBackwards. ^true].
		
	aCommand = $l
		ifTrue: [orientation := orientation leftRotation. ^true].
	aCommand = $r
		ifTrue: [orientation := orientation rightRotation. ^true]
		ifFalse: [self error: (self class invalidCommandExceptionDescription: aCommand). ^false].
! !
!MarsRover methodsFor: 'movements' stamp: 'PGTA 10/26/2020 15:52:28' prior: 50868215!
stepForward

	position := position + orientation forwardDelta! !
!MarsRover methodsFor: 'movements' stamp: 'PGTA 10/26/2020 15:52:45'!
stepBackward

	^ position := position +			orientation backwardDelta! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/26/2020 15:52:45' prior: 50868220!
processCommand: aCommand
	aCommand = $f
		ifTrue: [ self stepForward. ^true].
	aCommand = $b
		ifTrue: [ self stepBackward. ^true].
		
	aCommand = $l
		ifTrue: [orientation := orientation leftRotation. ^true].
	aCommand = $r
		ifTrue: [orientation := orientation rightRotation. ^true]
		ifFalse: [self error: (self class invalidCommandExceptionDescription: aCommand). ^false].
! !

!methodRemoval: MarsRover #stepBackwards stamp: 'PGTA 10/26/2020 15:52:45'!
stepBackwards

	^ position := position +			orientation backwardDelta!
!MarsRover methodsFor: 'commands' stamp: 'PGTA 10/26/2020 15:53:10'!
rotateLeft

	^ orientation := orientation leftRotation! !
!MarsRover methodsFor: 'commands' stamp: 'PGTA 10/26/2020 15:53:10' prior: 50868246!
processCommand: aCommand
	aCommand = $f
		ifTrue: [ self stepForward. ^true].
	aCommand = $b
		ifTrue: [ self stepBackward. ^true].
		
	aCommand = $l
		ifTrue: [self rotateLeft. ^true].
	aCommand = $r
		ifTrue: [orientation := orientation rightRotation. ^true]
		ifFalse: [self error: (self class invalidCommandExceptionDescription: aCommand). ^false].
! !
!MarsRover methodsFor: 'commands' stamp: 'PGTA 10/26/2020 15:53:24'!
rotateRight

	^ orientation := orientation rightRotation! !
!MarsRover methodsFor: 'commands' stamp: 'PGTA 10/26/2020 15:53:24' prior: 50868270!
processCommand: aCommand
	aCommand = $f
		ifTrue: [ self stepForward. ^true].
	aCommand = $b
		ifTrue: [ self stepBackward. ^true].
		
	aCommand = $l
		ifTrue: [self rotateLeft. ^true].
	aCommand = $r
		ifTrue: [self rotateRight. ^true]
		ifFalse: [self error: (self class invalidCommandExceptionDescription: aCommand). ^false].
! !
!MarsRover methodsFor: 'commands' stamp: 'PGTA 10/26/2020 15:53:36' prior: 50868289!
processCommand: aCommand
	aCommand = $f
		ifTrue: [ self stepForward. ^true].
	aCommand = $b
		ifTrue: [ self stepBackward. ^true].
		
	aCommand = $l
		ifTrue: [self rotateLeft. ^true].
	aCommand = $r
		ifTrue: [self rotateRight. ^true]
		
		ifFalse: [self error: (self class invalidCommandExceptionDescription: aCommand). ^false].
! !

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PGTA 10/26/2020 15:53:57'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PGTA 10/26/2020 15:53:57'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PGTA 10/26/2020 15:53:57'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PGTA 10/26/2020 15:53:57'!
PASSED!

!testRun: #MarsRoverTests #test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid stamp: 'PGTA 10/26/2020 15:53:57'!
PASSED!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PGTA 10/26/2020 15:53:57'!
PASSED!

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PGTA 10/26/2020 15:53:57'!
PASSED!

!classRenamed: #Orientation as: #RoverOrientation stamp: 'PGTA 10/26/2020 15:55:37'!
Smalltalk renameClassNamed: #Orientation as: #RoverOrientation!
!MarsRoverTests methodsFor: 'as yet unclassified' stamp: 'PGTA 10/26/2020 15:55:37' prior: 50867858!
test07RoverAssertsWhenInitializedWithAnInvalidOrientation

	self should: [
			MarsRover startPoint: (1@0) initialOrientation: 'H']
		raise: Error - MessageNotUnderstood
		withMessageText: RoverOrientation invalidOrientationErrorDescription.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/26/2020 15:55:37' prior: 50867880!
initializeStartPoint: aPoint initialOrientation: anOrientation 

	position := aPoint.
	orientation := RoverOrientation initializeFor: anOrientation ! !

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PGTA 10/26/2020 15:55:56'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PGTA 10/26/2020 15:55:56'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PGTA 10/26/2020 15:55:56'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PGTA 10/26/2020 15:55:56'!
PASSED!

!testRun: #MarsRoverTests #test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid stamp: 'PGTA 10/26/2020 15:55:56'!
PASSED!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PGTA 10/26/2020 15:55:56'!
PASSED!

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PGTA 10/26/2020 15:55:56'!
PASSED!
!RoverOrientation methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:12:54'!
backwardDisplacement
	self subclassResponsibility ! !

!methodRemoval: RoverOrientation #backwardDelta stamp: 'PGTA 10/26/2020 16:12:54'!
backwardDelta
	self subclassResponsibility !
!RoverOrientation methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:13:11'!
backwardDelta
	self subclassResponsibility ! !

!methodRemoval: RoverOrientation #backwardDisplacement stamp: 'PGTA 10/26/2020 16:13:11'!
backwardDisplacement
	self subclassResponsibility !

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PGTA 10/26/2020 16:13:21'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PGTA 10/26/2020 16:13:21'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PGTA 10/26/2020 16:13:21'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PGTA 10/26/2020 16:13:21'!
PASSED!

!testRun: #MarsRoverTests #test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid stamp: 'PGTA 10/26/2020 16:13:21'!
PASSED!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PGTA 10/26/2020 16:13:21'!
PASSED!

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PGTA 10/26/2020 16:13:21'!
PASSED!
!West methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:13:41'!
backwardD
	^1@0! !
!RoverOrientation methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:13:41'!
backwardD
	self subclassResponsibility ! !
!South methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:13:41' overrides: 50868436!
backwardD
	^0@1! !
!East methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:13:41' overrides: 50868436!
backwardD
	^-1@0! !
!North methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:13:41' overrides: 50868436!
backwardD
	^0@-1! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/26/2020 16:13:41' prior: 50868240!
stepBackward

	^ position := position +			orientation backwardD! !

!methodRemoval: West #backwardDelta stamp: 'PGTA 10/26/2020 16:13:41'!
backwardDelta
	^1@0!

!methodRemoval: RoverOrientation #backwardDelta stamp: 'PGTA 10/26/2020 16:13:41'!
backwardDelta
	self subclassResponsibility !

!methodRemoval: South #backwardDelta stamp: 'PGTA 10/26/2020 16:13:41'!
backwardDelta
	^0@1!

!methodRemoval: East #backwardDelta stamp: 'PGTA 10/26/2020 16:13:41'!
backwardDelta
	^-1@0!

!methodRemoval: North #backwardDelta stamp: 'PGTA 10/26/2020 16:13:41'!
backwardDelta
	^0@-1!
!East methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:14:12'!
backwardDisplacement
	^-1@0! !
!RoverOrientation methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:14:12'!
backwardDisplacement
	self subclassResponsibility ! !
!North methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:14:12' overrides: 50868476!
backwardDisplacement
	^0@-1! !
!South methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:14:12' overrides: 50868476!
backwardDisplacement
	^0@1! !
!West methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:14:12' overrides: 50868476!
backwardDisplacement
	^1@0! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/26/2020 16:14:12' prior: 50868452!
stepBackward

	^ position := position +			orientation backwardDisplacement! !

!methodRemoval: East #backwardD stamp: 'PGTA 10/26/2020 16:14:12'!
backwardD
	^-1@0!

!methodRemoval: RoverOrientation #backwardD stamp: 'PGTA 10/26/2020 16:14:12'!
backwardD
	self subclassResponsibility !

!methodRemoval: North #backwardD stamp: 'PGTA 10/26/2020 16:14:12'!
backwardD
	^0@-1!

!methodRemoval: South #backwardD stamp: 'PGTA 10/26/2020 16:14:12'!
backwardD
	^0@1!

!methodRemoval: West #backwardD stamp: 'PGTA 10/26/2020 16:14:12'!
backwardD
	^1@0!
!RoverOrientation methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:14:30'!
forwardDisplacement
	self subclassResponsibility ! !
!West methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:14:30' overrides: 50868513!
forwardDisplacement
	^-1@0! !
!East methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:14:30' overrides: 50868513!
forwardDisplacement
	^1@0! !
!South methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:14:30' overrides: 50868513!
forwardDisplacement
	^0@-1! !
!North methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:14:30' overrides: 50868513!
forwardDisplacement
	^0@1! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/26/2020 16:14:30' prior: 50868235!
stepForward

	position := position + orientation forwardDisplacement! !

!methodRemoval: RoverOrientation #forwardDelta stamp: 'PGTA 10/26/2020 16:14:30'!
forwardDelta
	self subclassResponsibility !

!methodRemoval: West #forwardDelta stamp: 'PGTA 10/26/2020 16:14:30'!
forwardDelta
	^-1@0!

!methodRemoval: East #forwardDelta stamp: 'PGTA 10/26/2020 16:14:30'!
forwardDelta
	^1@0!

!methodRemoval: South #forwardDelta stamp: 'PGTA 10/26/2020 16:14:31'!
forwardDelta
	^0@-1!

!methodRemoval: North #forwardDelta stamp: 'PGTA 10/26/2020 16:14:31'!
forwardDelta
	^0@1!

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PGTA 10/26/2020 16:14:34'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PGTA 10/26/2020 16:14:34'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PGTA 10/26/2020 16:14:34'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PGTA 10/26/2020 16:14:34'!
PASSED!

!testRun: #MarsRoverTests #test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid stamp: 'PGTA 10/26/2020 16:14:34'!
PASSED!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PGTA 10/26/2020 16:14:34'!
PASSED!

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PGTA 10/26/2020 16:14:34'!
PASSED!
!South methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:21:35'!
backwardPointDisplacement
	^0@1! !
!North methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:21:35'!
backwardPointDisplacement
	^0@-1! !
!West methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:21:35'!
backwardPointDisplacement
	^1@0! !
!RoverOrientation methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:21:35'!
backwardPointDisplacement
	self subclassResponsibility ! !
!East methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:21:36' overrides: 50868591!
backwardPointDisplacement
	^-1@0! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/26/2020 16:21:36' prior: 50868493!
stepBackward

	^ position := position +			orientation backwardPointDisplacement! !

!methodRemoval: South #backwardDisplacement stamp: 'PGTA 10/26/2020 16:21:36'!
backwardDisplacement
	^0@1!

!methodRemoval: North #backwardDisplacement stamp: 'PGTA 10/26/2020 16:21:36'!
backwardDisplacement
	^0@-1!

!methodRemoval: West #backwardDisplacement stamp: 'PGTA 10/26/2020 16:21:36'!
backwardDisplacement
	^1@0!

!methodRemoval: RoverOrientation #backwardDisplacement stamp: 'PGTA 10/26/2020 16:21:36'!
backwardDisplacement
	self subclassResponsibility !

!methodRemoval: East #backwardDisplacement stamp: 'PGTA 10/26/2020 16:21:36'!
backwardDisplacement
	^-1@0!
!East methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:21:49'!
forwardPointDisplacement
	^1@0! !
!RoverOrientation methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:21:49'!
forwardPointDisplacement
	self subclassResponsibility ! !
!South methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:21:49' overrides: 50868628!
forwardPointDisplacement
	^0@-1! !
!North methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:21:49' overrides: 50868628!
forwardPointDisplacement
	^0@1! !
!West methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:21:49' overrides: 50868628!
forwardPointDisplacement
	^-1@0! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/26/2020 16:21:49' prior: 50868534!
stepForward

	position := position + orientation forwardPointDisplacement! !

!methodRemoval: East #forwardDisplacement stamp: 'PGTA 10/26/2020 16:21:49'!
forwardDisplacement
	^1@0!

!methodRemoval: RoverOrientation #forwardDisplacement stamp: 'PGTA 10/26/2020 16:21:49'!
forwardDisplacement
	self subclassResponsibility !

!methodRemoval: South #forwardDisplacement stamp: 'PGTA 10/26/2020 16:21:49'!
forwardDisplacement
	^0@-1!

!methodRemoval: North #forwardDisplacement stamp: 'PGTA 10/26/2020 16:21:49'!
forwardDisplacement
	^0@1!

!methodRemoval: West #forwardDisplacement stamp: 'PGTA 10/26/2020 16:21:49'!
forwardDisplacement
	^-1@0!
!RoverOrientation methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:22:48'!
ninetyDegreeClockwiseRotation
	self subclassResponsibility ! !
!North methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:22:48' overrides: 50868669!
ninetyDegreeClockwiseRotation
	^West new! !
!East methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:22:48' overrides: 50868669!
ninetyDegreeClockwiseRotation
	^North new! !
!South methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:22:48' overrides: 50868669!
ninetyDegreeClockwiseRotation
	^East new! !
!West methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:22:48' overrides: 50868669!
ninetyDegreeClockwiseRotation
	^South new! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/26/2020 16:22:48' prior: 50868265!
rotateLeft

	^ orientation := orientation ninetyDegreeClockwiseRotation! !

!methodRemoval: RoverOrientation #leftRotation stamp: 'PGTA 10/26/2020 16:22:48'!
leftRotation
	self subclassResponsibility !

!methodRemoval: North #leftRotation stamp: 'PGTA 10/26/2020 16:22:48'!
leftRotation
	^West new!

!methodRemoval: East #leftRotation stamp: 'PGTA 10/26/2020 16:22:48'!
leftRotation
	^North new!

!methodRemoval: South #leftRotation stamp: 'PGTA 10/26/2020 16:22:48'!
leftRotation
	^East new!

!methodRemoval: West #leftRotation stamp: 'PGTA 10/26/2020 16:22:48'!
leftRotation
	^South new!
!East methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:23:10'!
ninetyDegreeCounterclockwiseRotation
	^South new! !
!South methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:23:10'!
ninetyDegreeCounterclockwiseRotation
	^West new! !
!North methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:23:10'!
ninetyDegreeCounterclockwiseRotation
	^East new! !
!West methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:23:10'!
ninetyDegreeCounterclockwiseRotation
	^North new! !
!RoverOrientation methodsFor: 'actions' stamp: 'PGTA 10/26/2020 16:23:10'!
ninetyDegreeCounterclockwiseRotation
	self subclassResponsibility ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PGTA 10/26/2020 16:23:10' prior: 50868284!
rotateRight

	^ orientation := orientation ninetyDegreeCounterclockwiseRotation! !

!methodRemoval: East #rightRotation stamp: 'PGTA 10/26/2020 16:23:10'!
rightRotation
	^South new!

!methodRemoval: South #rightRotation stamp: 'PGTA 10/26/2020 16:23:10'!
rightRotation
	^West new!

!methodRemoval: North #rightRotation stamp: 'PGTA 10/26/2020 16:23:10'!
rightRotation
	^East new!

!methodRemoval: West #rightRotation stamp: 'PGTA 10/26/2020 16:23:10'!
rightRotation
	^North new!

!methodRemoval: RoverOrientation #rightRotation stamp: 'PGTA 10/26/2020 16:23:10'!
rightRotation
	self subclassResponsibility !

!testRun: #MarsRoverTests #test01RoverMovesCorrectly stamp: 'PGTA 10/26/2020 16:23:23'!
PASSED!

!testRun: #MarsRoverTests #test02RoverRotatesCorrectly stamp: 'PGTA 10/26/2020 16:23:23'!
PASSED!

!testRun: #MarsRoverTests #test03RoverCanExecuteMorethanOneCommand stamp: 'PGTA 10/26/2020 16:23:23'!
PASSED!

!testRun: #MarsRoverTests #test04RoverCanExecuteAStringOfCommands stamp: 'PGTA 10/26/2020 16:23:23'!
PASSED!

!testRun: #MarsRoverTests #test05RoverAssertsAndStopsExecutingWhenACommandIsInvalid stamp: 'PGTA 10/26/2020 16:23:23'!
PASSED!

!testRun: #MarsRoverTests #test06RoverAssertsWhenInitializedWithoutAStartingPoint stamp: 'PGTA 10/26/2020 16:23:23'!
PASSED!

!testRun: #MarsRoverTests #test07RoverAssertsWhenInitializedWithAnInvalidOrientation stamp: 'PGTA 10/26/2020 16:23:23'!
PASSED!

----SNAPSHOT----(26 October 2020 16:27:04) CuisUniversity-4384.image priorSource: 17169088!