----STARTUP---- (26 November 2020 17:32:11) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!


!classRemoval: #ShoppingCashier stamp: 'LH 11/26/2020 17:32:17'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCart stamp: 'LH 11/26/2020 17:32:17'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #NullMerchantProcessor stamp: 'LH 11/26/2020 17:32:18'!
MerchantProcessor subclass: #NullMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ErroredMerchantProcessor stamp: 'LH 11/26/2020 17:32:18'!
MerchantProcessor subclass: #ErroredMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #MerchantProcessor stamp: 'LH 11/26/2020 17:32:18'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #CreditCard stamp: 'LH 11/26/2020 17:32:19'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate nameOfOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCashierTest stamp: 'LH 11/26/2020 17:32:19'!
TestCase subclass: #ShoppingCashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCartTest stamp: 'LH 11/26/2020 17:32:20'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #CreditCardTest stamp: 'LH 11/26/2020 17:32:20'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\Ejercicio-20-Tus-Libros-2.st----!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/26/2020 17:32:30'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/26/2020 17:32:30'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatedInThePastIsExpired stamp: 'LH 11/26/2020 17:32:30'!
PASSED!

!testRun: #CreditCardTest #test04CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/26/2020 17:32:30'!
PASSED!

!testRun: #CreditCardTest #test05CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/26/2020 17:32:30'!
PASSED!

!testRun: #CreditCardTest #test06TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/26/2020 17:32:30'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/26/2020 17:32:30'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test10TheValueOfAnEmptyCartsProductsIs0 stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test11TheValueOfProductsOfACartWithOneProductShouldBeThatProduct stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test12TheValueOfProductsOfACartWithManyProductShouldBeTheirSum stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

----QUIT----(26 November 2020 17:32:43) CuisUniversity-4384.image priorSource: 17513727!

----STARTUP---- (26 November 2020 18:35:37) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!


----QUIT----(26 November 2020 19:12:41) CuisUniversity-4384.image priorSource: 17539138!

----STARTUP---- (26 November 2020 20:32:49) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!

!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/26/2020 20:36:05'!
checkOut: aShoppingCart withCreditCard: aCreditCard writeInList: listOfPurchases 
	"debits the credit card for the contents of the cart"
	
	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	aCreditCard isExpired ifTrue: [^self error: ShoppingCashier invalidCreditCard].
	
	^merchantProcessor debitWith: aCreditCard for: aShoppingCart valueOfProducts.
! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/26/2020 20:36:05' prior: 50879278!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: Dictionary new.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'. 
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new.
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: writeInList]
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/26/2020 20:36:05' prior: 50879334!
test04TheCardShouldNotBeExpired
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self invalidDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self should:[ aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: writeInList]
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/26/2020 20:36:05' prior: 50879314!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: writeInList).! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/26/2020 20:36:05' prior: 50879296!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: writeInList).! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/26/2020 20:36:05' prior: 50879354!
test05ACartShouldNotCheckoutIfMerchantProcessorFails

	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.

	aCashier := ShoppingCashier withMerchanProcessor: ErroredMerchantProcessor new.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: writeInList]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
		
	
! !

!methodRemoval: ShoppingCashier #checkOut:withCreditCard: stamp: 'LH 11/26/2020 20:36:05'!
checkOut: aShoppingCart withCreditCard: aCreditCard
	"debits the credit card for the contents of the cart"
	
	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	aCreditCard isExpired ifTrue: [^self error: ShoppingCashier invalidCreditCard].
	
	^merchantProcessor debitWith: aCreditCard for: aShoppingCart valueOfProducts.
!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/26/2020 20:37:39' prior: 50879779!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart aCreditCard purchaseList|
	
	purchaseList := OrderedCollection new.
	aCart := ShoppingCart withCatalogue: Dictionary new.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'. 
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new.
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: purchaseList]
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.
		
	self assert: purchaseList isEmpty.! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/26/2020 20:45:41' prior: 50879841!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart aCreditCard purchaseList |
	
	purchaseList := OrderedCollection new.
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: purchaseList).
	
	self assert: purchaseList! !

!classDefinition: #Purchase category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/26/2020 20:54:17'!
Object subclass: #Purchase
	instanceVariableNames: 'contentsOfPurchase ammountPaid'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/26/2020 20:53:40' prior: 50879922!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart aCreditCard purchaseList purchase|

	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	purchase := Purchase of: aCart listCart for: aCart valueOfProducts.
	purchaseList := OrderedCollection new.	
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	
	self assert: 100 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: purchaseList).
	
	self assert: purchaseList includes: purchase! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/26/2020 20:56:41' prior: 50879819!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart aCreditCard purchaseList purchase|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	
	purchase := Purchase of: aCart listCart for: aCart valueOfProducts.
	purchaseList := OrderedCollection new.
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: purchaseList).
	self assert: (purchaseList includes: purchase).! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/26/2020 20:56:49' prior: 50879952!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart aCreditCard purchaseList purchase|

	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	purchase := Purchase of: aCart listCart for: aCart valueOfProducts.
	purchaseList := OrderedCollection new.	
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	
	self assert: 100 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: purchaseList).
	
	self assert: (purchaseList includes: purchase).! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/26/2020 20:59:44' prior: 50879798!
test04TheCardShouldNotBeExpired
	|aCashier aCart aCreditCard purchaseList|
	
	purchaseList := OrderedCollection new.
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self invalidDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self should:[ aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: purchaseList]
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
	self assert: purchaseList isEmpty.
		! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/26/2020 21:02:04' prior: 50879861!
test05ACartShouldNotCheckoutIfMerchantProcessorFails

	|aCashier aCart aCreditCard purchaseList|
	purchaseList := OrderedCollection new.

	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.

	aCashier := ShoppingCashier withMerchanProcessor: ErroredMerchantProcessor new.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: purchaseList]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
	self assert: purchaseList isEmpty.
! !

----QUIT----(26 November 2020 21:03:20) CuisUniversity-4384.image priorSource: 17539366!

----STARTUP---- (26 November 2020 21:09:38) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!


!classRemoval: #ShoppingCashier stamp: 'LH 11/26/2020 21:09:44'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCart stamp: 'LH 11/26/2020 21:09:45'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #Purchase stamp: 'LH 11/26/2020 21:09:45'!
Object subclass: #Purchase
	instanceVariableNames: 'contentsOfPurchase ammountPaid'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #NullMerchantProcessor stamp: 'LH 11/26/2020 21:09:46'!
MerchantProcessor subclass: #NullMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ErroredMerchantProcessor stamp: 'LH 11/26/2020 21:09:46'!
MerchantProcessor subclass: #ErroredMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #MerchantProcessor stamp: 'LH 11/26/2020 21:09:46'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #CreditCard stamp: 'LH 11/26/2020 21:09:47'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate nameOfOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCashierTest stamp: 'LH 11/26/2020 21:09:47'!
TestCase subclass: #ShoppingCashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCartTest stamp: 'LH 11/26/2020 21:09:48'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #CreditCardTest stamp: 'LH 11/26/2020 21:09:48'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\TusLibros-33.st----!

TestCase subclass: #InterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceTest category: 'TusLibros' stamp: 'LH 11/26/2020 21:15:09'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ShopInterface category: 'TusLibros' stamp: 'LH 11/26/2020 21:28:21'!
Object subclass: #ShopInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'no messages' stamp: 'LH 11/26/2020 21:28:08'!
test01CreateCartYieldsAnEmptyCart
	|cartID shopInterface|
	
	shopInterface := ShopInterface new.
	
	cartID := shopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: Bag new equals: (shopInterface listCart: cartID).
	
	! !

!classRenamed: #InterfaceTest as: #ShopInterfaceTest stamp: 'LH 11/26/2020 21:29:32'!
Smalltalk renameClassNamed: #InterfaceTest as: #ShopInterfaceTest!

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:30:06'!
ERROR!
!ShopInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/26/2020 21:30:19'!
creatCartFor: aString password: aString2 
	self shouldBeImplemented.! !

!methodRemoval: ShopInterface #creatCartFor:password: stamp: 'LH 11/26/2020 21:30:38'!
creatCartFor: aString password: aString2 
	self shouldBeImplemented.!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:30:55' prior: 50880729!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface|
	
	aShopInterface := ShopInterface new.
	
	cartID := ShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: Bag new equals: (aShopInterface listCart: cartID).
	
	! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:30:56'!
ERROR!
!ShopInterface class methodsFor: 'instance creation' stamp: 'LH 11/26/2020 21:31:02'!
creatCartFor: aString password: aString2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCreatCartFor: aString password: aString2 ! !
!ShopInterface class methodsFor: 'instance creation' stamp: 'LH 11/26/2020 21:31:08' prior: 50880772!
creatCartFor: aString password: aString2 

	^self new initializeCreatCartFor: aString password: aString2 ! !
!ShopInterface class methodsFor: 'instance creation' stamp: 'LH 11/26/2020 21:31:19' prior: 50880782!
creatCartFor: aUserID password: aString2 

	^self new initializeCreatCartFor: aUserID password: aString2 ! !
!ShopInterface class methodsFor: 'instance creation' stamp: 'LH 11/26/2020 21:31:24' prior: 50880789!
creatCartFor: aUserID password: aPassword 

	^self new initializeCreatCartFor: aUserID password: aPassword ! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:31:29'!
ERROR!

!classDefinition: #ShopInterface category: 'TusLibros' stamp: 'LH 11/26/2020 21:31:42'!
Object subclass: #ShopInterface
	instanceVariableNames: 'userID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ShopInterface category: 'TusLibros' stamp: 'LH 11/26/2020 21:31:42'!
Object subclass: #ShopInterface
	instanceVariableNames: 'userID password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ShopInterface methodsFor: 'initialization' stamp: 'LH 11/26/2020 21:31:42'!
initializeCreatCartFor: aUserID password: aPassword 
	self shouldBeImplemented.
	userID := aUserID.
	password := aPassword.! !
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:32:19' prior: 50880758!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface|
	
	aShopInterface := ShopInterface new.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: Bag new equals: (aShopInterface listCart: cartID).
	
	! !

!methodRemoval: ShopInterface class #creatCartFor:password: stamp: 'LH 11/26/2020 21:32:28'!
creatCartFor: aUserID password: aPassword 

	^self new initializeCreatCartFor: aUserID password: aPassword !

!methodRemoval: ShopInterface #initializeCreatCartFor:password: stamp: 'LH 11/26/2020 21:32:31'!
initializeCreatCartFor: aUserID password: aPassword 
	self shouldBeImplemented.
	userID := aUserID.
	password := aPassword.!

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:32:43'!
ERROR!
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:32:58'!
creatCartFor: aString password: aString2 
	self shouldBeImplemented.! !

!methodRemoval: ShopInterface #creatCartFor:password: stamp: 'LH 11/26/2020 21:34:04'!
creatCartFor: aString password: aString2 
	self shouldBeImplemented.!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:34:49' prior: 50880827!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface|
	
	aShopInterface := ShopInterface withCatalogue: (Dictionary newFromPairs: #()).
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: Bag new equals: (aShopInterface listCart: cartID).
	
	! !
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:36:08' prior: 50880864!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface|
	
	aShopInterface := ShopInterface withCatalogue: StoreTestObjectsFactory .
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: Bag new equals: (aShopInterface listCart: cartID).
	
	! !
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:36:32' prior: 50880876!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface|
	
	aShopInterface := ShopInterface withCatalogue: StoreTestObjectsFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: Bag new equals: (aShopInterface listCart: cartID).
	
	! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:36:33'!
ERROR!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:37:22' prior: 50880888!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: Bag new equals: (aShopInterface listCart: cartID).
	
	! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:37:23'!
ERROR!
!ShopInterface class methodsFor: 'instance creation' stamp: 'LH 11/26/2020 21:37:33'!
withCatalogue: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalogue: aDictionary ! !
!ShopInterface class methodsFor: 'instance creation' stamp: 'LH 11/26/2020 21:37:39' prior: 50880921!
withCatalogue: aDictionary 
	
	^self new initializeWithCatalogue: aDictionary ! !
!ShopInterface class methodsFor: 'instance creation' stamp: 'LH 11/26/2020 21:37:50' prior: 50880930!
withCatalogue: aCatalogue 
	
	^self new initializeWithCatalogue: aCatalogue ! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:37:51'!
ERROR!

!classDefinition: #ShopInterface category: 'TusLibros' stamp: 'LH 11/26/2020 21:38:08'!
Object subclass: #ShopInterface
	instanceVariableNames: 'userID password catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ShopInterface methodsFor: 'initialization' stamp: 'LH 11/26/2020 21:38:08'!
initializeWithCatalogue: aCatalogue 
	self shouldBeImplemented.
	catalogue := aCatalogue.! !
!ShopInterface methodsFor: 'initialization' stamp: 'LH 11/26/2020 21:38:12' prior: 50880952!
initializeWithCatalogue: aCatalogue 

	catalogue := aCatalogue.! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:38:14'!
ERROR!
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:38:22'!
creatCartFor: aString password: aString2 
	self shouldBeImplemented.! !

!classDefinition: #ShopInterface category: 'TusLibros' stamp: 'LH 11/26/2020 21:41:19'!
Object subclass: #ShopInterface
	instanceVariableNames: 'userID password catalogue cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:41:17' prior: 50880966!
creatCartFor: aUserId password: aPassword

	cart := Cart acceptingItemsOf: catalogue.
	
	^'uniqueCart'
	! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:41:24'!
ERROR!
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:41:31'!
listCart: aString 
	self shouldBeImplemented.! !
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:43:47' prior: 50880989!
listCart: aCartId 
	
	^cart! !
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:43:52' prior: 50880994!
listCart: aCartId 
	
	^cart.! !
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:44:14' prior: 50880998!
listCart: aCartId 
	
	^Bag new.! !
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:44:26' prior: 50881002!
listCart: aCartId 
	
	^Cart listCart.! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:44:28'!
ERROR!
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:44:36' prior: 50881007!
listCart: aCartId 
	
	^cart listCart.! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:44:37'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'LH 11/26/2020 21:45:12'!
listCart
	self shouldBeImplemented.! !
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:46:09' prior: 50881015!
listCart: aCartId 
	
	^cart copy.! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:46:24'!
FAILURE!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:46:44' prior: 50880904!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: cartID isEmpty).
	
	! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:46:45'!
ERROR!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:47:18' prior: 50881035!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: cartID) isEmpty.
	
	! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:47:19'!
PASSED!

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:47:19'!
PASSED!

!methodRemoval: Cart #listCart stamp: 'LH 11/26/2020 21:47:26'!
listCart
	self shouldBeImplemented.!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:53:33'!
test01ANewStoreHasNoCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	self assert: 0 equals: aShopInterface numberOfActiveCarts.
	
	! !
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:53:49'!
test02CreateCartYieldsAnEmptyCar
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: cartID) isEmpty.
	
	! !

!methodRemoval: ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:53:49'!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: cartID) isEmpty.
	
	!

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/26/2020 21:53:52'!
ERROR!
!ShopInterface methodsFor: 'queries' stamp: 'LH 11/26/2020 21:55:34'!
numberOfActiveCarts
	self shouldBeImplemented.! !
!ShopInterface methodsFor: 'queries' stamp: 'LH 11/26/2020 21:55:41' prior: 50881116!
numberOfActiveCarts
	^0.! !

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/26/2020 21:55:44'!
PASSED!

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/26/2020 21:55:44'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 21:55:44'!
PASSED!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:56:52' prior: 50881086!
test02CreateCartYieldsAnEmptyCar
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.
	self assert: (aShopInterface listCart: cartID) isEmpty.
	
	! !

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 21:57:03'!
FAILURE!
!ShopInterface methodsFor: 'queries' stamp: 'LH 11/26/2020 21:57:59' prior: 50881121!
numberOfActiveCarts
	cart isNil ifTrue:[^0].
	^1.! !

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 21:58:05'!
FAILURE!

cart!

cart!

cart isNil!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:00:00'!
PASSED!

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/26/2020 22:00:00'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:00:00'!
PASSED!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 22:01:28'!
test03aShopInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface creatCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.
	
	! !

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:01:32'!
FAILURE!
!ShopInterface methodsFor: 'initialization' stamp: 'LH 11/26/2020 22:04:36' prior: 50880958!
initializeWithCatalogue: aCatalogue 

	catalogue := aCatalogue.
	cart := OrderedCollection new.! !

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:04:38'!
FAILURE!
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 22:05:29' prior: 50880979!
creatCartFor: aUserId password: aPassword

	cart add: (Cart acceptingItemsOf: catalogue).
	
	^cart size asString.
	! !

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:05:43'!
FAILURE!
!ShopInterface methodsFor: 'queries' stamp: 'LH 11/26/2020 22:06:05' prior: 50881153!
numberOfActiveCarts
	
	^cart size.! !

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:06:07'!
PASSED!

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/26/2020 22:06:07'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:06:07'!
FAILURE!

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:06:07'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:06:07'!
FAILURE!
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 22:07:18' prior: 50881027!
listCart: aCartId 
	
	^(cart at: aCartId asInteger) copy.! !

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:07:19'!
PASSED!

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:07:21'!
PASSED!

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/26/2020 22:07:21'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:07:21'!
PASSED!

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:07:21'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:07:27'!
PASSED!

cartID!

aCartId asInteger!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:08:33'!
PASSED!

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:08:35'!
PASSED!

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/26/2020 22:08:35'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:08:35'!
PASSED!

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:08:35'!
PASSED!

----SNAPSHOT----(26 November 2020 22:08:57) CuisUniversity-4384.image priorSource: 17549706!

----QUIT----(26 November 2020 22:09:35) CuisUniversity-4384.image priorSource: 17587958!

----STARTUP---- (28 November 2020 15:45:36) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!

!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 15:53:14'!
test02CreateCartCreatesAnEmptyCar
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.
	self assert: (aShopInterface listCart: cartID) isEmpty.
	
	! !

!methodRemoval: ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/28/2020 15:53:14'!
test02CreateCartYieldsAnEmptyCar
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.
	self assert: (aShopInterface listCart: cartID) isEmpty.
	
	!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 15:53:23'!
test03AShopInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface creatCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.
	
	! !

!methodRemoval: ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 15:53:23'!
test03aShopInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface creatCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.
	
	!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 16:16:52'!
test04AStoreCanAddItemsToACart
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: objectFactory itemSellByTheStore.
	
	
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 2.
	 
	self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore).
	
	self should: [aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: -1.]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: (aShopInterface listCart: aCartId) invalidQuantityErrorMessage.
				self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore)].
	! !

!testRun: #ShopInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 16:17:04'!
ERROR!
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 16:17:21'!
addToCart: aString theBook: aString2 inQuantity: aSmallInteger 
	self shouldBeImplemented.! !
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 16:19:18' prior: 50881385!
addToCart: aCartID theBook: anISBN inQuantity: aQuantity 
	
	(cart at: aCartID asInteger) add: aQuantity of: anISBN.! !

!testRun: #ShopInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 16:19:19'!
PASSED!

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/28/2020 16:19:19'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartCreatesAnEmptyCar stamp: 'LH 11/28/2020 16:19:19'!
PASSED!

!testRun: #ShopInterfaceTest #test03AShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 16:19:19'!
PASSED!

!testRun: #ShopInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 16:19:19'!
PASSED!

!classDefinition: #ShopInterface category: 'TusLibros' stamp: 'LH 11/28/2020 16:37:54'!
Object subclass: #ShopInterface
	instanceVariableNames: 'userID password catalogue carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ShopInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 16:37:54' prior: 50881190!
initializeWithCatalogue: aCatalogue 

	catalogue := aCatalogue.
	carts := OrderedCollection new.! !
!ShopInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 16:37:54' prior: 50881200!
creatCartFor: aUserId password: aPassword

	carts add: (Cart acceptingItemsOf: catalogue).
	
	^carts size asString.
	! !
!ShopInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 16:37:54' prior: 50881211!
numberOfActiveCarts
	
	^carts size.! !
!ShopInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 16:37:54' prior: 50881232!
listCart: aCartId 
	
	^(carts at: aCartId asInteger) copy.! !
!ShopInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 16:37:54' prior: 50881391!
addToCart: aCartID theBook: anISBN inQuantity: aQuantity 
	
	(carts at: aCartID asInteger) add: aQuantity of: anISBN.! !
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 16:42:27' prior: 50881446!
addToCart: aCartID theBook: anISBN inQuantity: aQuantity 
	
	(carts at: aCartID asInteger) add: aQuantity of: anISBN.! !

----SNAPSHOT----(28 November 2020 16:46:09) CuisUniversity-4384.image priorSource: 17588052!

----QUIT----(28 November 2020 16:46:41) CuisUniversity-4384.image priorSource: 17593880!

----STARTUP---- (28 November 2020 19:21:42) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!

!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:22:15' prior: 50881346!
test04AStoreCanAddItemsToACart
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: objectFactory itemSellByTheStore.
	
	
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 2.
	 
	self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore).
	
	self should: [aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: -1.]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: (aShopInterface listCart: aCartId) invalidQuantityErrorMessage.
				self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore)].
	! !

!testRun: #ShopInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 19:22:16'!
PASSED!

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/28/2020 19:22:16'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartCreatesAnEmptyCar stamp: 'LH 11/28/2020 19:22:16'!
PASSED!

!testRun: #ShopInterfaceTest #test03AShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 19:22:16'!
PASSED!

!testRun: #ShopInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 19:22:16'!
PASSED!

TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'LH 11/28/2020 19:22:31'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/28/2020 19:24:03'!
Object subclass: #StoreInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:23:56'!
test01ANewStoreHasNoActiveCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	self assert: 0 equals: aShopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:24:12'!
ERROR!
!StoreInterface class methodsFor: 'instance creation' stamp: 'LH 11/28/2020 19:24:26'!
withCatalogue: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalogue: aDictionary ! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'LH 11/28/2020 19:24:48' prior: 50881555!
withCatalogue: aCatalogue 
	
	^self new initializeWithCatalogue: aCatalogue ! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:25:12'!
ERROR!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/28/2020 19:25:31'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/28/2020 19:25:31'!
initializeWithCatalogue: aCatalogue 
	self shouldBeImplemented.
	catalogue := aCatalogue.! !
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/28/2020 19:25:36' prior: 50881580!
initializeWithCatalogue: aCatalogue 
	
	catalogue := aCatalogue.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:25:37'!
ERROR!
!StoreInterface methodsFor: 'queries' stamp: 'LH 11/28/2020 19:25:48'!
numberOfActiveCarts
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'queries' stamp: 'LH 11/28/2020 19:25:57' prior: 50881594!
numberOfActiveCarts
	^0.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:25:59'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:25:59'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:34:12'!
test02ACartCanBeCreatedInAStore
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self deny: aShopInterface isEmpty.
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:34:38' prior: 50881609!
test02ACartCanBeCreatedInAStore
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self deny: aShopInterface isEmpty.
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 19:34:41'!
ERROR!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 19:35:21'!
creatCartFor: aString password: aString2 
	self shouldBeImplemented.! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/28/2020 19:36:33'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 19:36:31' prior: 50881641!
creatCartFor: aUserID password: aPassword 
	
	cart := Cart acceptingItemsOf: catalogue.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 19:37:12'!
isEmpty
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 19:38:06' prior: 50881660!
isEmpty
	^false.! !
!StoreInterface methodsFor: 'queries' stamp: 'LH 11/28/2020 19:39:32' prior: 50881599!
numberOfActiveCarts
	cart ifNil: [^0].
	^1.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 19:39:36'!
FAILURE!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 19:39:56'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:39:56'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 19:39:56'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:40:04' prior: 50881624!
test02ACartCanBeCreatedInAStore
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !

!methodRemoval: StoreInterface #isEmpty stamp: 'LH 11/28/2020 19:40:14'!
isEmpty
	^false.!

----SNAPSHOT----(28 November 2020 19:40:35) CuisUniversity-4384.image priorSource: 17593974!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:42:49'!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface creatCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 19:42:51'!
FAILURE!
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/28/2020 19:43:27' prior: 50881586!
initializeWithCatalogue: aCatalogue 
	
	catalogue := aCatalogue.
	cart := OrderedCollection new.! !
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 19:43:46' prior: 50881654!
creatCartFor: aUserID password: aPassword 
	
	cart add: (Cart acceptingItemsOf: catalogue).! !
!StoreInterface methodsFor: 'queries' stamp: 'LH 11/28/2020 19:44:03' prior: 50881669!
numberOfActiveCarts
	
	^ cart size.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 19:44:06'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:44:06'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 19:44:06'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 19:44:06'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:50:27' prior: 50881706!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface creatCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 19:50:31'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:50:31'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 19:50:32'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 19:50:32'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:51:38'!
test04AStoreCanAddItemsToACart
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: objectFactory itemSellByTheStore.
	
	
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 2.
	 
	self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore).
	
	self should: [aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: -1.]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: (aShopInterface listCart: aCartId) invalidQuantityErrorMessage.
				self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore)].
	! !

!testRun: #StoreInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 19:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 19:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 19:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 19:51:40'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:51:54' prior: 50881785!
test04AStoreCanAddItemsToACart
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: objectFactory itemSellByTheStore.
	
	
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 2.
	 
	self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore).
	
	self should: [aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: -1.]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: (aShopInterface listCart: aCartId) invalidQuantityErrorMessage.
				self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore)].
	! !

!testRun: #StoreInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 19:51:55'!
ERROR!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 19:52:05'!
addToCart: aStoreInterface theBook: aString inQuantity: aSmallInteger 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 19:53:13' prior: 50881877!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(cart at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 19:53:16'!
ERROR!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 19:54:00' prior: 50881732!
creatCartFor: aUserID password: aPassword 
	
	cart add: (Cart acceptingItemsOf: catalogue).
	^ cart size.! !

!testRun: #StoreInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 19:54:02'!
ERROR!

!methodRemoval: StoreInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 20:00:36'!
test04AStoreCanAddItemsToACart
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: objectFactory itemSellByTheStore.
	
	
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 2.
	 
	self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore).
	
	self should: [aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: -1.]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: (aShopInterface listCart: aCartId) invalidQuantityErrorMessage.
				self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore)].
	!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:02:39'!
test04ANewCartInAStoreIsEmpty
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: aCartId) isEmpty.! !

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 20:02:42'!
ERROR!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 20:02:53'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 20:03:30' prior: 50881956!
listCart: aCartId 
	
	^ cart at: aCartId asInteger.! !
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 20:03:59' prior: 50881894!
creatCartFor: aUserID password: aPassword 
	
	cart add: (Cart acceptingItemsOf: catalogue).
	^ cart size asString.! !

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 20:04:01'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 20:04:01'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 20:04:01'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 20:04:01'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 20:04:01'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:10:04'!
test05AStoreCanAddItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:10:07'!
ERROR!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 20:10:31' prior: 50881884!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(cart at: aCartId asInteger) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:10:32'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 20:10:33'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 20:10:33'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 20:10:33'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 20:10:33'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:10:33'!
PASSED!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 20:13:32' prior: 50882012!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(cart at: aCartId asInteger) add: anISBN.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 20:13:33'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 20:13:33'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 20:13:33'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 20:13:33'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:13:33'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:14:12'!
test05AStoreCanAddItemsToOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !

!methodRemoval: StoreInterfaceTest #test05AStoreCanAddItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:14:12'!
test05AStoreCanAddItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:14:19'!
test05AStoreCanAddItemsToItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !

!methodRemoval: StoreInterfaceTest #test05AStoreCanAddItemsToOfItsCarts stamp: 'LH 11/28/2020 20:14:19'!
test05AStoreCanAddItemsToOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:14:46'!
test05AStoreCanAddItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !

!methodRemoval: StoreInterfaceTest #test05AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 20:14:47'!
test05AStoreCanAddItemsToItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:15:00'!
test05AStoreCanAddAnItemToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !

!methodRemoval: StoreInterfaceTest #test05AStoreCanAddItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:15:00'!
test05AStoreCanAddItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:15:50'!
test06AStoreCanAddVariousItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurencessOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:16:07' prior: 50882214!
test06AStoreCanAddVariousItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:16:09'!
FAILURE!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 20:16:45' prior: 50882040!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(cart at: 1) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 20:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 20:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 20:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 20:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 20:16:47'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:16:47'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:18:10'!
test07AStoreCanAddItemsToItsCarts
	|aShopInterface objectFactory aCartId2 aCartId1 anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId1 := aShopInterface creatCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface creatCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 20:18:11'!
FAILURE!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 20:18:46' prior: 50882258!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(cart at: aCartId asInteger) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 20:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 20:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 20:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 20:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 20:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 20:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 20:18:48'!
PASSED!

!classRemoval: #ShopInterfaceTest stamp: 'LH 11/28/2020 20:19:16'!
TestCase subclass: #ShopInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #ShopInterface stamp: 'LH 11/28/2020 20:19:19'!
Object subclass: #ShopInterface
	instanceVariableNames: 'userID password catalogue carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 20:19:23'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 20:19:23'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 20:19:23'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 20:19:23'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 20:19:23'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:19:23'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 20:19:23'!
PASSED!

----SNAPSHOT----(28 November 2020 20:28:10) CuisUniversity-4384.image priorSource: 17601660!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:59:17'!
test08CanNotCheckOutWithInvalidCartId
	|aShopInterface objectFactory aCreditCard|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	aCreditCard := objectFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 20:59:24'!
ERROR!
!StoreInterface class methodsFor: 'error descriptions' stamp: 'LH 11/28/2020 20:59:39'!
invalidCartId
	self shouldBeImplemented.! !
!StoreInterface class methodsFor: 'error descriptions' stamp: 'LH 11/28/2020 20:59:56' prior: 50882415!
invalidCartId
	^'The Cart ID is not valid'! !

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:00:11'!
FAILURE!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:00:50'!
FAILURE!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:02:00'!
FAILURE!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:02:00'!
FAILURE!
!StoreInterface methodsFor: 'check out' stamp: 'LH 11/28/2020 21:02:44'!
checkOut: aSmallInteger withCreditCard: aCreditCard 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'check out' stamp: 'LH 11/28/2020 21:03:17' prior: 50882438!
checkOut: aSmallInteger withCreditCard: aCreditCard 
	^ self error: StoreInterface invalidCartId.! !

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:03:18'!
ERROR!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:03:28'!
hasNoSales
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:03:36' prior: 50882454!
hasNoSales
	^true.! !

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:03:39'!
PASSED!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 21:05:43'!
createCartFor: aUserID password: aPassword 
	
	cart add: (Cart acceptingItemsOf: catalogue).
	^ cart size asString.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:05:43' prior: 50882176!
test05AStoreCanAddAnItemToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:05:43' prior: 50881939!
test04ANewCartInAStoreIsEmpty
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: aCartId) isEmpty.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:05:43' prior: 50882288!
test07AStoreCanAddItemsToItsCarts
	|aShopInterface objectFactory aCartId2 aCartId1 anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:05:43' prior: 50882234!
test06AStoreCanAddVariousItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:05:43' prior: 50881756!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:05:43' prior: 50881687!
test02ACartCanBeCreatedInAStore
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !

!methodRemoval: StoreInterface #creatCartFor:password: stamp: 'LH 11/28/2020 21:05:43'!
creatCartFor: aUserID password: aPassword 
	
	cart add: (Cart acceptingItemsOf: catalogue).
	^ cart size asString.!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:06:03'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 21:06:03'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 21:06:03'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 21:06:03'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 21:06:03'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 21:06:03'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 21:06:03'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 21:06:03'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:06:03'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:08:48'!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface objectFactory aCreditCard aSale aCartID|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	aCreditCard := objectFactory notExpiredCreditCard.
	
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: objectFactory itemSellByTheStore inQuantity: 2.
	
	aSale := aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: aSale).! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:08:49'!
ERROR!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/28/2020 21:16:25'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cart merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/28/2020 21:16:27'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cart merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'checkout' stamp: 'LH 11/28/2020 21:16:23' prior: 50882444!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	cart isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier initializeToCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor registeringOn: salesBook.
	
	^ aCashier checkOut.! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'LH 11/28/2020 21:18:21'!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProcessor  
	
	^self new initializeWithCatalogue: aCatalogue ! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:22' prior: 50882621!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface objectFactory aCreditCard aSale aCartID|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	aCreditCard := objectFactory notExpiredCreditCard.
	
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: objectFactory itemSellByTheStore inQuantity: 2.
	
	aSale := aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: aSale).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:22' prior: 50881540!
test01ANewStoreHasNoActiveCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	
	self assert: 0 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:22' prior: 50882473!
test05AStoreCanAddAnItemToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:22' prior: 50882571!
test02ACartCanBeCreatedInAStore
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:22' prior: 50882393!
test08CanNotCheckOutWithInvalidCartId
	|aShopInterface objectFactory aCreditCard|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	aCreditCard := objectFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:22' prior: 50882493!
test04ANewCartInAStoreIsEmpty
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: aCartId) isEmpty.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:23' prior: 50882555!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:23' prior: 50882535!
test06AStoreCanAddVariousItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:23' prior: 50882507!
test07AStoreCanAddItemsToItsCarts
	|aShopInterface objectFactory aCartId2 aCartId1 anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !

!methodRemoval: StoreInterface class #withCatalogue: stamp: 'LH 11/28/2020 21:18:23'!
withCatalogue: aCatalogue 
	
	^self new initializeWithCatalogue: aCatalogue !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:24' prior: 50882708!
test01ANewStoreHasNoActiveCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	
	self assert: 0 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:30' prior: 50882742!
test02ACartCanBeCreatedInAStore
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:39' prior: 50882794!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:43' prior: 50882778!
test04ANewCartInAStoreIsEmpty
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: aCartId) isEmpty.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:46' prior: 50882721!
test05AStoreCanAddAnItemToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:50' prior: 50882811!
test06AStoreCanAddVariousItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:53' prior: 50882833!
test07AStoreCanAddItemsToItsCarts
	|aShopInterface objectFactory aCartId2 aCartId1 anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:56' prior: 50882757!
test08CanNotCheckOutWithInvalidCartId
	|aShopInterface objectFactory aCreditCard|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := objectFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:59' prior: 50882684!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface objectFactory aCreditCard aSale aCartID|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := objectFactory notExpiredCreditCard.
	
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: objectFactory itemSellByTheStore inQuantity: 2.
	
	aSale := aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: aSale).! !
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/28/2020 21:21:15'!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor  
	
	catalogue := aCatalogue.
	cart := OrderedCollection new.! !
!StoreInterface class methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:21:15' prior: 50882676!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProcessor  
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor ! !

!methodRemoval: StoreInterface #initializeWithCatalogue: stamp: 'LH 11/28/2020 21:21:15'!
initializeWithCatalogue: aCatalogue 
	
	catalogue := aCatalogue.
	cart := OrderedCollection new.!
!StoreInterface class methodsFor: 'instance creation' stamp: 'LH 11/28/2020 21:21:24' prior: 50883045!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor  
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor ! !
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/28/2020 21:22:06' prior: 50883037!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor  
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.
	
	salesBook := OrderedCollection new.
	cart := OrderedCollection new.! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/28/2020 21:22:10'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:22:10' prior: 50882466!
createCartFor: aUserID password: aPassword 
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^ carts size asString.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:22:10' prior: 50882319!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(carts at: aCartId asInteger) add: aQuantity of: anISBN.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:22:10' prior: 50883069!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor  
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.
	
	salesBook := OrderedCollection new.
	carts := OrderedCollection new.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:22:10' prior: 50881961!
listCart: aCartId 
	
	^ carts at: aCartId asInteger.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:22:10' prior: 50882663!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier initializeToCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor registeringOn: salesBook.
	
	^ aCashier checkOut.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:22:10' prior: 50881738!
numberOfActiveCarts
	
	^ carts size.! !

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'LH 11/28/2020 21:24:14'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'LH 11/28/2020 21:24:16'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/28/2020 21:24:11' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ]! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:24:53' prior: 50882867!
test01ANewStoreHasNoActiveCarts
	|aShopInterface |
	
	self setUp.
	
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	self assert: 0 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:25:08' prior: 50882879!
test02ACartCanBeCreatedInAStore
	|aShopInterface |
	
	self setUp.
	
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:25:20' prior: 50882893!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:25:31' prior: 50883183!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface |
	
	self setUp.
	
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:25:42' prior: 50882910!
test04ANewCartInAStoreIsEmpty
	|aShopInterface aCartId|
	
	self setUp.
	
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: aCartId) isEmpty.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:26:01' prior: 50882925!
test05AStoreCanAddAnItemToOneOfItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:26:21' prior: 50882945!
test06AStoreCanAddVariousItemsToOneOfItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:26:39' prior: 50882966!
test07AStoreCanAddItemsToItsCarts
	|aShopInterface aCartId2 aCartId1 anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:26:56' prior: 50882994!
test08CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:27:18' prior: 50883014!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aSale aCartID|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	aSale := aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: aSale).! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:27:22'!
ERROR!
!StoreInterface methodsFor: 'checkout' stamp: 'LH 11/28/2020 21:28:04' prior: 50883118!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor registeringOn: salesBook.
	
	^ aCashier checkOut.! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:28:08'!
ERROR!
!StoreInterface methodsFor: 'checkout' stamp: 'LH 11/28/2020 21:31:25' prior: 50883339!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.
	
	^ aCashier checkOut.! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:31:26'!
ERROR!
!StoreInterfaceTest methodsFor: 'debit' stamp: 'LH 11/28/2020 21:31:44'!
debit: aSmallInteger from: aCreditCard 
	self shouldBeImplemented.! !
!StoreInterfaceTest methodsFor: 'debit' stamp: 'LH 11/28/2020 21:32:52' prior: 50883371!
debit: anAmmount from: aCreditCard 
	^debitBehavior value: anAmmount value: aCreditCard.! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:32:54'!
FAILURE!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:33:17' prior: 50882459!
hasNoSales
	^salesBook isEmpty.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 21:33:35'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 21:33:35'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 21:33:35'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 21:33:36'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 21:33:36'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 21:33:36'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 21:33:36'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:33:36'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:33:36'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:33:36'!
ERROR!
!StoreInterface methodsFor: 'queries' stamp: 'LH 11/28/2020 21:33:46'!
hasMadeTheSale: aSmallInteger 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'queries' stamp: 'LH 11/28/2020 21:34:11' prior: 50883424!
hasMadeTheSale: aSale 
	^salesBook includes: aSale.! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:34:25'!
FAILURE!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:36:03' prior: 50883313!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aSaleTotalDebited aCartID|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	aSaleTotalDebited := aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: aSaleTotalDebited)).! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:36:04'!
FAILURE!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:36:09'!
FAILURE!

self createSale!

aSaleTotalDebited!

aSaleTotalDebited!

Sale of: aSaleTotalDebited!

salesBook!

salesBook includes: aSale!

self indexOf: anObject!

anElement!

(self at: i)!

anElement!

(self at: i) = anElement!
!Sale methodsFor: 'queries' stamp: 'LH 11/28/2020 21:42:43' overrides: 16881029!
= aSale

	^ total = aSale total.! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:42:50'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:42:53'!
PASSED!
!StoreInterface methodsFor: 'checkout' stamp: 'LH 11/28/2020 21:44:36' prior: 50883355!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier toCheckout: (self listCart: 1) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.
	
	^ aCashier checkOut.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 21:44:39'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 21:44:39'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 21:44:39'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 21:44:39'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 21:44:39'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 21:44:39'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 21:44:39'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:44:39'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:44:39'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:47:24'!
test10ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aSaleTotalDebited aCartID1 aCartID2|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aSaleTotalDebited := aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: aSaleTotalDebited)).
	
	aSaleTotalDebited := aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: aSaleTotalDebited)).! !

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/28/2020 21:47:25'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:48:28' prior: 50883559!
test10ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).
	
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/28/2020 21:48:30'!
FAILURE!
!StoreInterface methodsFor: 'checkout' stamp: 'LH 11/28/2020 21:49:13' prior: 50883516!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier toCheckout: (self listCart: aCartId asInteger) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.
	
	^ aCashier checkOut.! !

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/28/2020 21:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 21:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 21:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 21:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 21:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 21:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 21:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 21:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/28/2020 21:49:16'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:49:34' prior: 50883437!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:49:35'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 21:49:35'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 21:49:35'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 21:49:36'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 21:49:36'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 21:49:36'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 21:49:36'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 21:49:36'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:49:36'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:49:36'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/28/2020 21:49:36'!
PASSED!

----SNAPSHOT----(28 November 2020 21:49:49) CuisUniversity-4384.image priorSource: 17623663!

----QUIT----(28 November 2020 21:51:08) CuisUniversity-4384.image priorSource: 17668149!

----STARTUP---- (29 November 2020 15:38:31) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!


----End fileIn of /Users/ilanolkies/uba/ingsoft1/ingeSoft-2020-2c/20-TusLibros-3/TusLibros-3.st----!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/29/2020 16:08:21' prior: 50868530!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	^Cashier toCheckout: (self listCart: aCartId asInteger) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook checkOut.
	
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:08:24'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:08:24'!
ERROR!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/29/2020 16:08:28' prior: 50868631!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier toCheckout: (self listCart: aCartId asInteger) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook checkOut.
	
	^ aCashier checkOut.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:08:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:08:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:08:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:08:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:08:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:08:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:08:30'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:08:30'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:08:35'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:08:35'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:09:01'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:09:01'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:10:45'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:10:45'!
ERROR!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/29/2020 16:11:13' prior: 50868723!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier toCheckout: (self listCart: aCartId asInteger) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.
	
	^ aCashier checkOut.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:12:05'!
PASSED!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 16:14:52' prior: 50868519!
createCartFor: aUserID password: aPassword 
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^ carts size.! !
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 16:15:00' prior: 50868512!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 16:15:06' prior: 50868526!
listCart: aCartId 
	
	^ carts at: aCartId.! !
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/29/2020 16:15:37' prior: 50868982!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.
	
	^ aCashier checkOut.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:15:45'!
PASSED!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 16:16:58' prior: 50869241!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(carts at: aCartId) add: aQuantity of: 'validBook'.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:17:00'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:18:21'!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !

!methodRemoval: StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:18:21'!
test06AStoreCanAddVariousItemsToOneOfItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:18:28'!
test08AStoreCanAddItemsToItsCarts
	|aShopInterface aCartId2 aCartId1 anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !

!methodRemoval: StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:18:28'!
test07AStoreCanAddItemsToItsCarts
	|aShopInterface aCartId2 aCartId1 anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:18:34'!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !

!methodRemoval: StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:18:34'!
test08CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:18:43'!
test10ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!methodRemoval: StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:18:43'!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:18:51'!
test11ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).
	
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!methodRemoval: StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:18:51'!
test10ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).
	
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'IO 11/29/2020 16:20:15'!
anotherItemSellByTheStore
	
	^ 'validBook2'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'IO 11/29/2020 16:21:18'!
anotherItemSellByTheStorePrice
	
	^ 20! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'IO 11/29/2020 16:21:52' prior: 50868598!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		at: self anotherItemSellByTheStore put: self anotherItemSellByTheStorePrice;
		yourself ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:21:53'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:22:17'!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:22:49' prior: 50869775!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem :=
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 2.

	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:22:52' prior: 50869795!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.

	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 2.

	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:22:54'!
FAILURE!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:22:58'!
FAILURE!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:23:04' prior: 50869814!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.

	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 2.

	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:23:06'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:23:21' prior: 50869840!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.

	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 2.
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory anotherItemSellByTheStore ) inQuantity: 3.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:23:50' prior: 50869900!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId listedCart |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.

	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 2.
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory anotherItemSellByTheStore ) inQuantity: 3.
	
	listedCart := (aShopInterface listCart: aCartId).
	self assert: 2 equals: (listedCart occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:24:04' prior: 50869922!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId listedCart |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.

	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 2.
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory anotherItemSellByTheStore ) inQuantity: 3.
	
	listedCart := (aShopInterface listCart: aCartId).
	self assert: 2 equals: (listedCart occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (listedCart occurrencesOf: testObjectsFactory anotherItemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:24:05'!
FAILURE!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 16:24:24' prior: 50869346!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(carts at: aCartId) add: aQuantity of: aQuantity.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:24:25'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:24:25'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:24:25'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:24:25'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:24:25'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:24:25'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:24:25'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:24:25'!
ERROR!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:24:25'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:24:25'!
ERROR!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:24:25'!
ERROR!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 16:24:34' prior: 50869975!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:24:35'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:25:30' prior: 50868087!
test05AStoreCanAddAnItemToOneOfItsCarts
	|aShopInterface aCartId |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: (testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:25:34'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:25:41' prior: 50868047!
test02ACartCanBeCreatedInAStore
	|aShopInterface |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:25:42'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:25:47' prior: 50868059!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:25:48'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:25:55' prior: 50870169!
test02ACartCanBeCreatedInAStore
	|aShopInterface |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:25:59' prior: 50870223!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:26:04' prior: 50870110!
test05AStoreCanAddAnItemToOneOfItsCarts
	|aShopInterface aCartId |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: (testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:26:05'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:26:12' prior: 50869432!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:26:13'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:26:24' prior: 50869945!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId listedCart |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.

	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 2.
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory anotherItemSellByTheStore ) inQuantity: 3.
	
	listedCart := (aShopInterface listCart: aCartId).
	self assert: 2 equals: (listedCart occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (listedCart occurrencesOf: testObjectsFactory anotherItemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:26:26'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:26:38' prior: 50869471!
test08AStoreCanAddItemsToItsCarts
	|aShopInterface aCartId2 aCartId1 anAvailableItem|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:26:39'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:26:49'!
test08AStoreCanAddItemsToMultipleCarts
	|aShopInterface aCartId2 aCartId1 anAvailableItem|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !

!methodRemoval: StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:26:49'!
test08AStoreCanAddItemsToItsCarts
	|aShopInterface aCartId2 aCartId1 anAvailableItem|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:26:55' prior: 50869525!
test09CanNotCheckOutWithInvalidCartId

	|aShopInterface aCreditCard|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:26:56' prior: 50870619!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:26:58' prior: 50870638!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:27:00'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:27:29' prior: 50869562!
test10ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.

	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:27:30'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:28:31' prior: 50869608!
test11ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).
	
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:28:32'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:28:53' prior: 50870782!
test11ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:28:54'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:29:04' prior: 50870858!
test11ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:29:05'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:29:14' prior: 50870929!
test11ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:30:45' prior: 50870657!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:30:46'!
FAILURE!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:30:57' prior: 50871032!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:30:59' prior: 50871056!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:31:06' prior: 50871075!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self should: [aShopInterface checkOut: -4 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:31:07'!
FAILURE!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:32:28'!
FAILURE!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/29/2020 16:32:44' prior: 50869253!
checkOut: aCartId withCreditCard: aCreditCard
 
	|aCashier|

	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.
	
	^ aCashier checkOut.! !
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/29/2020 16:33:19' prior: 50871124!
checkOut: aCartId withCreditCard: aCreditCard
 
	|aCashier|
	
	aCashier := Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.
	
	^ aCashier checkOut.! !
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 16:33:46' prior: 50869248!
listCart: aCartId 
	
	^ carts at: aCartId.! !

!testRun: #IntervalTest #testAt stamp: 'IO 11/29/2020 16:36:19'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludeNumbersOutsideTheInInterval stamp: 'IO 11/29/2020 16:36:19'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludeObjectsThatAreNotNumbers stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludedNumbersThatAreInRangeButNotReachedByTheStep stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludedNumbersThatAreInRangeButNotReachedByTheStepWithReversedIntervals stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testFloatInterval stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testFloatToByDo stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIncludedNumbersRespectAStepDifferentToOne stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIncludedNumbersRespectNegativeSteps stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIncludesNumbersInsideTheInterval stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIncludesNumbersInsideTheIntervalEvenForReversedIntervals stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIntegerInterval stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIntegerToByDo stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndNegativeStepBiggerThanOneIncludeOnlyThatNumber stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndNegativeStepIncludeOnlyThatNumber stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndStepBiggerThanOneIncludesOnlyTheNumber stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberIncludesOnlyTheNumber stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #OrderedCollectionTest #testIsCollection stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #OrderedCollectionTest #testStreamContentsWorksAsExpected stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #OrderedCollectionTest #testWriteStreamOnOrderedCollectionGrowsAsExpected stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #OrderedDictionaryTest #testOrder stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #OrderedDictionaryTest #testRemove stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #BinarySearchTest #testquickFindFirst stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #BinarySearchTest #testquickFindLast stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #BinarySearchTest #testquickIndexOf stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #BinarySearchTest #testquickIndexOfWithSemistableOrder stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #ReferenceStreamTest #testDiskProxy stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #ReferenceStreamTest #testSortedCollection stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #ReferenceStreamTest #testWeakDumps stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #SmartRefStreamTest #testDiskProxy stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #SmartRefStreamTest #testSortedCollection stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #SmartRefStreamTest #testWeakDumps stamp: 'IO 11/29/2020 16:36:20'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:37:25' prior: 50871096!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self should: [aShopInterface checkOut: 0 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.].
			
	
	self should: [aShopInterface checkOut: 2 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:37:28'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:37:28'!
FAILURE!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:37:28'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:37:28'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:37:28'!
FAILURE!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:39:15'!
FAILURE!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/29/2020 16:40:46' prior: 50871137!
checkOut: aCartId withCreditCard: aCreditCard
 
	|aCashier|
	
	(aCartId >= 1 and: aCartId <= carts size) ifFalse: [self error: StoreInterface invalidCartId ].
	
	aCashier := Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.
	
	^ aCashier checkOut.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:40:48'!
PASSED!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/29/2020 16:43:01' prior: 50871375!
checkOut: aCartId withCreditCard: aCreditCard
 
	
	
	^(Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook) checkOut.
	
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:43:05'!
FAILURE!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:43:05'!
FAILURE!

!methodRemoval: StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:43:12'!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self should: [aShopInterface checkOut: 0 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.].
			
	
	self should: [aShopInterface checkOut: 2 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:43:18'!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.

	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!methodRemoval: StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:43:18'!
test10ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.

	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:43:22'!
test10ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!methodRemoval: StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:43:22'!
test11ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:43:23'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:48:28' prior: 50871506!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.

	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:48:33' prior: 50871552!
test10ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!methodRemoval: StoreInterface #hasNoSales stamp: 'IO 11/29/2020 16:48:41'!
hasNoSales
	^salesBook isEmpty.!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 21:26:13'!
test11CannotModiffyACart
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.

	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 21:26:58' prior: 50871704!
test11CannotModiffyACart
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.

	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 21:27:19' prior: 50871728!
test11CannotModiffyACart
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.

	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: (aShopInterface listCart: aCartID) equals: listedCart.! !

!testRun: #StoreInterfaceTest #test11CannotModiffyACart stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModiffyACart stamp: 'IO 11/29/2020 21:27:20'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 21:27:46' prior: 50871754!
test11CannotModiffyACart
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: (aShopInterface listCart: aCartID) equals: listedCart.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 21:28:27' prior: 50871819!
test11CannotModiffyACart
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: (aShopInterface).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 21:29:17' prior: 50871842!
test11CannotModiffyACart
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemNotSellByTheStore).! !

!testRun: #StoreInterfaceTest #test11CannotModiffyACart stamp: 'IO 11/29/2020 21:29:21'!
FAILURE!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 21:29:36' prior: 50871864!
test11CannotModiffyACart
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test11CannotModiffyACart stamp: 'IO 11/29/2020 21:29:39'!
FAILURE!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 21:30:36'!
test11CannotModiffyACartFromOutsideStore
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!methodRemoval: StoreInterfaceTest #test11CannotModiffyACart stamp: 'IO 11/29/2020 21:30:41'!
test11CannotModiffyACart
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:34:25'!
FAILURE!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 23:34:33' prior: 50871148!
listCart: aCartId 
	
	^ carts at: aCartId copy.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:34:34'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:34:34'!
FAILURE!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 23:34:43' prior: 50871970!
listCart: aCartId 
	
	^ carts at: aCartId copy.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:34:44'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:34:44'!
FAILURE!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 23:35:39' prior: 50872017!
listCart: aCartId 
	
	^(carts at: aCartId) copy.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:35:40'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:35:40'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:36:06'!
FAILURE!
!Cart methodsFor: 'initialization' stamp: 'IO 11/29/2020 23:38:38' overrides: 16881170!
copy
"
	| cart |
	cart := Cart acceptingItemsOf: catalog.
	items do: [ :item | cart add ]
	items"! !
!Cart methodsFor: 'initialization' stamp: 'IO 11/29/2020 23:39:56' prior: 50872159 overrides: 16881170!
copy

	| cart |
	cart := Cart acceptingItemsOf: catalog.
	items do: [ :item | cart add: (self occurrencesOf: item) of: item ].
	^cart.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 23:39:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 23:39:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 23:39:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 23:39:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 23:39:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:39:59'!
FAILURE!

!methodRemoval: Cart #copy stamp: 'IO 11/29/2020 23:40:21'!
copy

	| cart |
	cart := Cart acceptingItemsOf: catalog.
	items do: [ :item | cart add: (self occurrencesOf: item) of: item ].
	^cart.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 23:40:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 23:40:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 23:40:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 23:40:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 23:40:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 23:40:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 23:40:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 23:40:23'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 23:40:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 23:40:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 23:40:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 23:40:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 23:40:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 23:40:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 23:40:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 23:40:26'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:40:28'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:40:28'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 01:58:16'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 01:58:16'!
FAILURE!

listedCart!

listedCart!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 01:59:39'!
FAILURE!

listedCart!

listedCart!

aShopInterface!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:02:50' prior: 50871918!
test11CannotModiffyACartFromOutsideStore
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:03:08' prior: 50872369!
test11CannotModiffyACartFromOutsideStore
	|aShopInterface aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.

	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:03:13' prior: 50872394!
test11CannotModiffyACartFromOutsideStore
	|aShopInterface aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:03:17'!
FAILURE!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/30/2020 02:03:42' prior: 50872109!
listCart: aCartId 
	
	^(carts copy at: aCartId).! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:03:43'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:03:43'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:03:48'!
FAILURE!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/30/2020 02:04:01' prior: 50872442!
listCart: aCartId 
	
	^(carts at: aCartId) copy.! !
!Cart methodsFor: 'nil' stamp: 'IO 11/30/2020 02:06:00' overrides: 16881170!
copy
	| cartCopy |
	
	cartCopy := Cart acceptingItemsOf: catalog.
	
	^cartCopy.
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:06:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:06:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:06:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:06:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:06:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:06:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:06:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:06:00'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:06:02'!
FAILURE!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:06:02'!
FAILURE!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:06:02'!
FAILURE!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:06:02'!
FAILURE!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:06:02'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:06:02'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:06:02'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:06:50' prior: 50872497 overrides: 16881170!
copy
	| cartCopy |
	
	cartCopy := Cart acceptingItemsOf: catalog.
	items do: [ :item | cartCopy add: (self occurrencesOf: item) of: item].
	
	^cartCopy.
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:06:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:06:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:06:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:06:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:06:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:06:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:06:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:06:55'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:06:57'!
FAILURE!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:06:57'!
FAILURE!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:06:57'!
FAILURE!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:06:57'!
FAILURE!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:06:57'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:06:57'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:07:17' prior: 50872613 overrides: 16881170!
copy
	| cartCopy |
	
	cartCopy := Cart acceptingItemsOf: catalog.
	items do: [ :item | cartCopy add: 1 of: item].
	
	^cartCopy.
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:07:29'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:07:33' prior: 50872731 overrides: 16881170!
copy
	| cartCopy |
	
	cartCopy := Cart acceptingItemsOf: catalog.
	items do: [ :item | cartCopy add: 1 of: item].
	
	^cartCopy.
! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:07:52'!
test11CannotModifyACartFromOutsideStore
	|aShopInterface aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!methodRemoval: StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:07:52'!
test11CannotModiffyACartFromOutsideStore
	|aShopInterface aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/30/2020 02:12:41'!
checkOutCart: aCartId with: aCreditCard
 
	
	
	^(Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook) checkOut.
	
! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:12:41' prior: 50871671!
test10ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOutCart: aCartID1 with: aCreditCard.
	aShopInterface checkOutCart: aCartID2 with: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:12:41' prior: 50871649!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.

	aShopInterface checkOutCart: aCartID with: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!methodRemoval: StoreInterface #checkOut:withCreditCard: stamp: 'IO 11/30/2020 02:12:41'!
checkOut: aCartId withCreditCard: aCreditCard
 
	
	
	^(Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook) checkOut.
	
!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:12:45'!
PASSED!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/30/2020 02:12:50' prior: 50872957!
checkOutCart: aCartId with: aCreditCard
	
	^(Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook) checkOut.
	
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:12:51'!
PASSED!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/30/2020 02:13:29' prior: 50873112!
checkOutCart: aCartId with: aCreditCard
	
	^(Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProcessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:14:30' prior: 50869234!
createCartFor: aUserID password: aPassword 
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:14:33' prior: 50873170!
createCartFor: aUserID password: aPassword 
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:15:20'!
addToCart: aCartId book: anISBN quantity: aQuantity 
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:15:20' prior: 50872997!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aShopInterface checkOutCart: aCartID with: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:15:20' prior: 50872913!
test11CannotModifyACartFromOutsideStore
	|aShopInterface aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:15:20' prior: 50870367!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId book: anAvailableItem quantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:15:20' prior: 50870564!
test08AStoreCanAddItemsToMultipleCarts
	|aShopInterface aCartId2 aCartId1 anAvailableItem|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 book: anAvailableItem quantity: 2.
	aShopInterface addToCart: aCartId2 book: anAvailableItem quantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:15:20' prior: 50870428!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId listedCart |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.

	aShopInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aShopInterface addToCart: aCartId book: (testObjectsFactory anotherItemSellByTheStore ) quantity: 3.
	
	listedCart := (aShopInterface listCart: aCartId).
	self assert: 2 equals: (listedCart occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (listedCart occurrencesOf: testObjectsFactory anotherItemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:15:20' prior: 50872967!
test10ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 book: testObjectsFactory itemSellByTheStore quantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 book: testObjectsFactory itemSellByTheStore quantity: 10.
	
	aShopInterface checkOutCart: aCartID1 with: aCreditCard.
	aShopInterface checkOutCart: aCartID2 with: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:15:20' prior: 50870308!
test05AStoreCanAddAnItemToOneOfItsCarts
	|aShopInterface aCartId |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: (testObjectsFactory itemSellByTheStore).! !

!methodRemoval: StoreInterface #addToCart:theBook:inQuantity: stamp: 'IO 11/30/2020 02:15:20'!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(carts at: aCartId) add: aQuantity of: anISBN.!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 11/30/2020 02:16:06' prior: 50868494!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor  
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.! !
!StoreInterface methodsFor: 'testing' stamp: 'IO 11/30/2020 02:16:13' prior: 50868504!
hasMadeTheSale: aSale

	^salesBook includes: aSale.! !
!StoreInterface methodsFor: 'testing' stamp: 'IO 11/30/2020 02:16:56' prior: 50868508!
numberOfActiveCarts
	
	^carts size.! !
!StoreInterface methodsFor: 'initialization' stamp: 'IO 11/30/2020 02:17:02' prior: 50873363!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor  
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.
! !
!StoreInterfaceTest methodsFor: 'nil' stamp: 'IO 11/30/2020 02:18:58'!
test12CannotCreateCartWithInvalidUser
	
	self setUp.
	
	! !
!StoreInterfaceTest methodsFor: 'invalid cart creation' stamp: 'IO 11/30/2020 02:19:28' prior: 50873393!
test12CannotCreateCartWithInvalidUser
	
	| aCartId aShopInterface |
	self setUp.
	
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	! !
!StoreInterfaceTest methodsFor: 'invalid cart creation' stamp: 'IO 11/30/2020 02:19:45' prior: 50873399!
test12CannotCreateCartWithInvalidUser
	
	| aCartId aShopInterface |
	self setUp.
	
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartId := aShopInterface createCartFor: 'admin2' password: 'password'.
	
	! !

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'IO 11/30/2020 02:23:51'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior shopInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'IO 11/30/2020 02:23:50' prior: 50868031 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:24:08' prior: 50868037!
test01ANewStoreHasNoActiveCarts
	
	
	self setUp.
	
	self assert: 0 equals: shopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:24:10'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:24:13' prior: 50873442!
test01ANewStoreHasNoActiveCarts
	
	self setUp.
	
	self assert: 0 equals: shopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:24:20' prior: 50870280!
test02ACartCanBeCreatedInAStore
	|aShopInterface |
	
	self setUp.
	
	shopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:24:24'!
ERROR!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:24:27' prior: 50873501!
test02ACartCanBeCreatedInAStore
	
	
	self setUp.
	
	shopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: shopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:24:30'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:24:32' prior: 50873514!
test02ACartCanBeCreatedInAStore

	self setUp.
	
	shopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: shopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:24:46' prior: 50870293!
test03AStoreInterfaceCanCreateMultipleCarts
	
	self setUp.
	
	shopInterface createCartFor: 'admin' password: 'password'.
	shopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: shopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:24:47'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:25:15' prior: 50868074!
test04ANewCartInAStoreIsEmpty
	| aCartId |
	
	self setUp.
	
	aCartId := shopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: (shopInterface listCart: aCartId) isEmpty.! !

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:25:16'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:25:32' prior: 50873339!
test05AStoreCanAddAnItemToOneOfItsCarts
	| aCartId |
	
	self setUp.

	aCartId := shopInterface createCartFor: 'admin' password: 'password'.
	
	shopInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: (shopInterface listCart: aCartId) includes: (testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:25:33'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:25:53' prior: 50873235!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	| aCartId anAvailableItem |
	
	self setUp.

	anAvailableItem := testObjectsFactory itemSellByTheStore.
	aCartId := shopInterface createCartFor: 'admin' password: 'password'.
	
	shopInterface addToCart: aCartId book: anAvailableItem quantity: 2.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:25:54'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:26:17' prior: 50873283!
test07AStoreCanAddDifferentItemsToItsCarts
	| aCartId listedCart |
	
	self setUp.

	aCartId := shopInterface createCartFor: 'admin' password: 'password'.

	shopInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	shopInterface addToCart: aCartId book: (testObjectsFactory anotherItemSellByTheStore ) quantity: 3.
	
	listedCart := (shopInterface listCart: aCartId).
	self assert: 2 equals: (listedCart occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (listedCart occurrencesOf: testObjectsFactory anotherItemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:26:19'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:26:21'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:27:22' prior: 50873255!
test08AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 |
	
	self setUp.

	aCartId1 := shopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := shopInterface createCartFor: 'admin1' password: 'password1'.
	
	shopInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	shopInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((shopInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:27:23'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:28:05' prior: 50873190!
test09ACartWithItemsCanBeCheckedOut
	| aCartID |
	
	self setUp.

	aCartID := shopInterface createCartFor: 'admin' password: 'password'.
	shopInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	shopInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (shopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:28:07'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:28:44' prior: 50873309!
test10ManyCartsCanBeCheckedOut
	| aCartID1 aCartID2 |
	
	self setUp.

	aCartID1 := shopInterface createCartFor: 'admin' password: 'password'.
	shopInterface addToCart: aCartID1 book: testObjectsFactory itemSellByTheStore quantity: 2.
	aCartID2 := shopInterface createCartFor: 'admin1' password: 'password1'.
	shopInterface addToCart: aCartID2 book: testObjectsFactory itemSellByTheStore quantity: 10.
	
	shopInterface checkOutCart: aCartID1 with: (testObjectsFactory notExpiredCreditCard).
	shopInterface checkOutCart: aCartID2 with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (shopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:28:45'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:29:15' prior: 50873212!
test11CannotModifyACartFromOutsideStore
	| aCartID listedCart |
	
	self setUp.

	aCartID := shopInterface createCartFor: 'admin' password: 'password'.
	shopInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := shopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((shopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:29:18'!
PASSED!
!StoreInterfaceTest methodsFor: 'invalid cart creation' stamp: 'IO 11/30/2020 02:29:34' prior: 50873411!
test12CannotCreateCartWithInvalidUser
	
	| aCartId |
	self setUp.

	aCartId := shopInterface createCartFor: 'admin2' password: 'password'.
	
	! !

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:29:39'!
PASSED!
!StoreInterface class methodsFor: 'instance creation' stamp: 'IO 11/30/2020 02:30:29'!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withUsers: aUserPasswordDictionary 
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withUsers: aUserPasswordDictionary ! !
!StoreInterface methodsFor: 'initialization' stamp: 'IO 11/30/2020 02:30:37'!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withUsers: aUserPasswordDictionary 
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.
! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'IO 11/30/2020 02:30:47'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts merchantProcessor salesBook users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 11/30/2020 02:30:46' prior: 50874079!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withUsers: aUserPasswordDictionary 
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.
	
	users := aUserPasswordDictionary.

! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:30:51'!
PASSED!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'IO 11/30/2020 02:31:52' prior: 50873432 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self
		withUsers: nil.! !

Dictionary!
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'IO 11/30/2020 02:33:38'!
users

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: 'admin' value: 'password').
! !
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'IO 11/30/2020 02:34:10'!
validUserName
	^'admin'.! !
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'IO 11/30/2020 02:34:20'!
validUserPassword
	^'password'.! !
!StoreInterfaceTest methodsFor: 'set up' stamp: 'IO 11/30/2020 02:34:44' prior: 50874199 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self
		withUsers: testObjectsFactory users.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:34:45'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'IO 11/30/2020 02:35:18'!
anotherValidUserName
	^'admin2'.! !
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'IO 11/30/2020 02:35:31'!
anotherValidUserPassword
	^'password2'.! !
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'IO 11/30/2020 02:35:56'!
invalidUserName
	^'bad-user'.! !
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'IO 11/30/2020 02:36:09'!
invalidUserPassword
	^'bad-pass'.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:36:49' prior: 50873568!
test02ACartCanBeCreatedInAStore

	self setUp.
	
	shopInterface createCartFor: testObjectsFactory validUserName password: testObjectsFactory validUserPassword.
	
	self assert: 1 equals: shopInterface numberOfActiveCarts.! !
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'IO 11/30/2020 02:37:34' prior: 50874210!
users

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: self validUserName value: self validUserPassword).
	userPasswordDictionary add: (Association key: self anotherValidUserName value: self anotherValidUserPassword).
! !
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'IO 11/30/2020 02:37:41' prior: 50874306!
users

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: self validUserName value: self validUserPassword).
	userPasswordDictionary add: (Association key: self anotherValidUserName value: self anotherValidUserPassword).

	^userPasswordDictionary.
! !
!StoreInterfaceTest methodsFor: 'nil' stamp: 'IO 11/30/2020 02:38:27'!
createValidCart

	^shopInterface createCartFor: testObjectsFactory validUserName password: testObjectsFactory validUserPassword.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:38:48' prior: 50874296!
test02ACartCanBeCreatedInAStore

	self setUp.
	
	self createValidCart.
	
	self assert: 1 equals: shopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:39:07' prior: 50873577!
test03AStoreInterfaceCanCreateMultipleCarts
	
	self setUp.
	
	self createValidCart.
	shopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: shopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:39:09'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:39:25' prior: 50873633!
test04ANewCartInAStoreIsEmpty
	| aCartId |
	
	self setUp.
	
	aCartId := self createValidCart.
	
	self assert: (shopInterface listCart: aCartId) isEmpty.! !

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:39:26'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:39:31' prior: 50873687!
test05AStoreCanAddAnItemToOneOfItsCarts
	| aCartId |
	
	self setUp.

	aCartId := self createValidCart.
	
	shopInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: (shopInterface listCart: aCartId) includes: (testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:39:32'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:39:40' prior: 50873746!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	| aCartId anAvailableItem |
	
	self setUp.

	anAvailableItem := testObjectsFactory itemSellByTheStore.
	aCartId := self createValidCart.
	
	shopInterface addToCart: aCartId book: anAvailableItem quantity: 2.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:39:41'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:39:54' prior: 50874512!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	| aCartId anAvailableItem |
	
	self setUp.

	anAvailableItem := 
	aCartId := self createValidCart.
	
	shopInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId) occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:39:59' prior: 50874572!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	| aCartId |
	
	self setUp.

	aCartId := self createValidCart.
	
	shopInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:40:03'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:40:15' prior: 50873807!
test07AStoreCanAddDifferentItemsToItsCarts
	| aCartId listedCart |
	
	self setUp.

	aCartId := self createValidCart.

	shopInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	shopInterface addToCart: aCartId book: (testObjectsFactory anotherItemSellByTheStore ) quantity: 3.
	
	listedCart := (shopInterface listCart: aCartId).
	self assert: 2 equals: (listedCart occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (listedCart occurrencesOf: testObjectsFactory anotherItemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:40:22' prior: 50873836!
test08AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 |
	
	self setUp.

	aCartId1 := self createValidCart.
	aCartId2 := shopInterface createCartFor: 'admin1' password: 'password1'.
	
	shopInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	shopInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((shopInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:40:28' prior: 50873905!
test09ACartWithItemsCanBeCheckedOut
	| aCartID |
	
	self setUp.

	aCartID := self createValidCart.
	shopInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	shopInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (shopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:40:37' prior: 50873925!
test10ManyCartsCanBeCheckedOut
	| aCartID1 aCartID2 |
	
	self setUp.

	aCartID1 := self createValidCart.
	shopInterface addToCart: aCartID1 book: testObjectsFactory itemSellByTheStore quantity: 2.
	aCartID2 := shopInterface createCartFor: 'admin1' password: 'password1'.
	shopInterface addToCart: aCartID2 book: testObjectsFactory itemSellByTheStore quantity: 10.
	
	shopInterface checkOutCart: aCartID1 with: (testObjectsFactory notExpiredCreditCard).
	shopInterface checkOutCart: aCartID2 with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (shopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:40:50' prior: 50873994!
test11CannotModifyACartFromOutsideStore
	| aCartID listedCart |
	
	self setUp.

	aCartID := self createValidCart.
	shopInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := shopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((shopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:41:30' prior: 50874661!
test10ManyCartsCanBeCheckedOut
	| aCartID1 aCartID2 |
	
	self setUp.

	aCartID1 := self createValidCart.
	shopInterface addToCart: aCartID1 book: testObjectsFactory itemSellByTheStore quantity: 2.
	aCartID2 := shopInterface createCartFor: testObjectsFactory anotherValidUserName password: testObjectsFactory anotherValidUserPassword.
	shopInterface addToCart: aCartID2 book: testObjectsFactory itemSellByTheStore quantity: 10.
	
	shopInterface checkOutCart: aCartID1 with: (testObjectsFactory notExpiredCreditCard).
	shopInterface checkOutCart: aCartID2 with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (shopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:41:33'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:42:06' prior: 50874346!
test03AStoreInterfaceCanCreateMultipleCarts
	
	self setUp.
	
	self createValidCart.
	shopInterface createCartFor: testObjectsFactory anotherValidUserName password: testObjectsFactory anotherValidUserPassword.
	
	self assert: 2 equals: shopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:46:36' prior: 50874016!
test12CannotCreateCartWithInvalidUser
	
	
	self setUp.
	
	self
		should: [shopInterface createCartFor: testObjectsFactory invalidUserName password: testObjectsFactory invalidUserPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	
	! !

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:46:50'!
ERROR!
!StoreInterface class methodsFor: 'error descriptions' stamp: 'IO 11/30/2020 02:47:12'!
invalidUserName
	^'The user name is not valid'! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:47:14'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:47:14'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:49:17' prior: 50873177!
createCartFor: aUserID password: aPassword

	aUserID = 'admin' not ifTrue: [^self error: StoreInterface invalidUserName].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:49:19'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:49:32' prior: 50874849!
createCartFor: aUserID password: aPassword

	(aUserID = 'admin' not) ifTrue: [^self error: StoreInterface invalidUserName].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:49:34'!
FAILURE!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:50:16'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:50:16'!
FAILURE!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:50:21'!
ERROR!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:50:21'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:51:16' prior: 50874945!
createCartFor: aUserID password: aPassword

	(aUserID = 'admin') ifFalse: [^self error: StoreInterface invalidUserName].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:51:18'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:51:18'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:51:18'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:51:18'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:51:25' prior: 50875089!
createCartFor: aUserID password: aPassword

	(aUserID = 'admin') ifFalse: [^self error: StoreInterface invalidUserName].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:51:52' prior: 50875185!
createCartFor: aUserID password: aPassword

	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidUserName].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:51:54'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:51:54'!
ERROR!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:52:36' prior: 50874624!
test08AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 |
	
	self setUp.

	aCartId1 := self createValidCart.
	aCartId2 := shopInterface createCartFor: testObjectsFactory anotherValidUserName password: testObjectsFactory anotherValidUserPassword.
	
	shopInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	shopInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((shopInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:52:38'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:52:45' prior: 50874784!
test12CannotCreateCartWithInvalidUser
	
	
	self setUp.
	
	self
		should: [shopInterface createCartFor: testObjectsFactory invalidUserName password: testObjectsFactory invalidUserPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:53:20'!
test12CannotCreateCartWithInvalidClientId
	
	
	self setUp.
	
	self
		should: [shopInterface createCartFor: testObjectsFactory invalidUserName password: testObjectsFactory invalidUserPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	! !

!methodRemoval: StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:53:20'!
test12CannotCreateCartWithInvalidUser
	
	
	self setUp.
	
	self
		should: [shopInterface createCartFor: testObjectsFactory invalidUserName password: testObjectsFactory invalidUserPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'IO 11/30/2020 02:53:47'!
anotherValidClientId
	^'admin2'.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:53:47' prior: 50874702!
test10ManyCartsCanBeCheckedOut
	| aCartID1 aCartID2 |
	
	self setUp.

	aCartID1 := self createValidCart.
	shopInterface addToCart: aCartID1 book: testObjectsFactory itemSellByTheStore quantity: 2.
	aCartID2 := shopInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidUserPassword.
	shopInterface addToCart: aCartID2 book: testObjectsFactory itemSellByTheStore quantity: 10.
	
	shopInterface checkOutCart: aCartID1 with: (testObjectsFactory notExpiredCreditCard).
	shopInterface checkOutCart: aCartID2 with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (shopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:53:47' prior: 50874772!
test03AStoreInterfaceCanCreateMultipleCarts
	
	self setUp.
	
	self createValidCart.
	shopInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidUserPassword.
	
	self assert: 2 equals: shopInterface numberOfActiveCarts.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:53:47' prior: 50874319!
users

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: self validUserName value: self validUserPassword).
	userPasswordDictionary add: (Association key: self anotherValidClientId value: self anotherValidUserPassword).

	^userPasswordDictionary.
! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:53:47' prior: 50875294!
test08AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 |
	
	self setUp.

	aCartId1 := self createValidCart.
	aCartId2 := shopInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidUserPassword.
	
	shopInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	shopInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((shopInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !

!methodRemoval: StoreTestObjectsFactory #anotherValidUserName stamp: 'IO 11/30/2020 02:53:47'!
anotherValidUserName
	^'admin2'.!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'IO 11/30/2020 02:54:00'!
anotherValidClientPassword
	^'password2'.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:00' prior: 50875497!
test08AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 |
	
	self setUp.

	aCartId1 := self createValidCart.
	aCartId2 := shopInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	shopInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	shopInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((shopInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:00' prior: 50875483!
users

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: self validUserName value: self validUserPassword).
	userPasswordDictionary add: (Association key: self anotherValidClientId value: self anotherValidClientPassword).

	^userPasswordDictionary.
! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:00' prior: 50875445!
test10ManyCartsCanBeCheckedOut
	| aCartID1 aCartID2 |
	
	self setUp.

	aCartID1 := self createValidCart.
	shopInterface addToCart: aCartID1 book: testObjectsFactory itemSellByTheStore quantity: 2.
	aCartID2 := shopInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	shopInterface addToCart: aCartID2 book: testObjectsFactory itemSellByTheStore quantity: 10.
	
	shopInterface checkOutCart: aCartID1 with: (testObjectsFactory notExpiredCreditCard).
	shopInterface checkOutCart: aCartID2 with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (shopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:00' prior: 50875471!
test03AStoreInterfaceCanCreateMultipleCarts
	
	self setUp.
	
	self createValidCart.
	shopInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	self assert: 2 equals: shopInterface numberOfActiveCarts.! !

!methodRemoval: StoreTestObjectsFactory #anotherValidUserPassword stamp: 'IO 11/30/2020 02:54:00'!
anotherValidUserPassword
	^'password2'.!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'IO 11/30/2020 02:54:10'!
invalidClientId
	^'bad-user'.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:10' prior: 50875417!
test12CannotCreateCartWithInvalidClientId
	
	
	self setUp.
	
	self
		should: [shopInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory invalidUserPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	! !

!methodRemoval: StoreTestObjectsFactory #invalidUserName stamp: 'IO 11/30/2020 02:54:10'!
invalidUserName
	^'bad-user'.!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'IO 11/30/2020 02:54:24'!
invalidClientPassword
	^'bad-pass'.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:24' prior: 50875616!
test12CannotCreateCartWithInvalidClientId
	
	
	self setUp.
	
	self
		should: [shopInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	! !

!methodRemoval: StoreTestObjectsFactory #invalidUserPassword stamp: 'IO 11/30/2020 02:54:24'!
invalidUserPassword
	^'bad-pass'.!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'IO 11/30/2020 02:54:34'!
clients

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: self validUserName value: self validUserPassword).
	userPasswordDictionary add: (Association key: self anotherValidClientId value: self anotherValidClientPassword).

	^userPasswordDictionary.
! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:34' prior: 50874227 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self
		withUsers: testObjectsFactory clients.! !

!methodRemoval: StoreTestObjectsFactory #users stamp: 'IO 11/30/2020 02:54:34'!
users

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: self validUserName value: self validUserPassword).
	userPasswordDictionary add: (Association key: self anotherValidClientId value: self anotherValidClientPassword).

	^userPasswordDictionary.
!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'IO 11/30/2020 02:54:45'!
validClientId
	^'admin'.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:45' prior: 50874332!
createValidCart

	^shopInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validUserPassword.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:45' prior: 50875651!
clients

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: self validClientId value: self validUserPassword).
	userPasswordDictionary add: (Association key: self anotherValidClientId value: self anotherValidClientPassword).

	^userPasswordDictionary.
! !

!methodRemoval: StoreTestObjectsFactory #validUserName stamp: 'IO 11/30/2020 02:54:45'!
validUserName
	^'admin'.!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'IO 11/30/2020 02:54:58'!
validClientPassword
	^'password'.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:58' prior: 50875694!
createValidCart

	^shopInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:58' prior: 50875702!
clients

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: self validClientId value: self validClientPassword).
	userPasswordDictionary add: (Association key: self anotherValidClientId value: self anotherValidClientPassword).

	^userPasswordDictionary.
! !

!methodRemoval: StoreTestObjectsFactory #validUserPassword stamp: 'IO 11/30/2020 02:54:58'!
validUserPassword
	^'password'.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'IO 11/30/2020 02:55:02'!
PASSED!
!StoreInterface class methodsFor: 'instance creation' stamp: 'IO 11/30/2020 02:55:21'!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClients: aUserPasswordDictionary 
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withUsers: aUserPasswordDictionary ! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:55:21' prior: 50875665 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self
		withClients: testObjectsFactory clients.! !

!methodRemoval: StoreInterface class #withCatalogue:withMerchantProccessor:withUsers: stamp: 'IO 11/30/2020 02:55:21'!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withUsers: aUserPasswordDictionary 
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withUsers: aUserPasswordDictionary !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'IO 11/30/2020 02:55:24'!
PASSED!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 11/30/2020 02:55:40'!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withClients: aUserPasswordDictionary 
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.
	
	users := aUserPasswordDictionary.

! !
!StoreInterface class methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:55:40' prior: 50875837!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClients: aUserPasswordDictionary 
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withClients: aUserPasswordDictionary ! !

!methodRemoval: StoreInterface #initializeWithCatalogue:andMerchantProccessor:withUsers: stamp: 'IO 11/30/2020 02:55:40'!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withUsers: aUserPasswordDictionary 
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.
	
	users := aUserPasswordDictionary.

!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 11/30/2020 02:55:49' prior: 50875959!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withClients: aClientDictionary 
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.
	
	users := aClientDictionary.

! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'IO 11/30/2020 02:55:59' prior: 50875972!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClients: aClientDictionary 
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withClients: aClientDictionary ! !

!methodRemoval: StoreInterface class #withCatalogue:withMerchantProccessor: stamp: 'IO 11/30/2020 02:56:02'!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor  
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor !

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'IO 11/30/2020 02:56:32'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:56:41' prior: 50875636!
test12CannotCreateCartWithInvalidClientId

	self setUp.

	self
		should: [shopInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:57:13'!
test13CannotCreateCartWithInvalidClientPassword

	self setUp.

	self
		should: [shopInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:57:22' prior: 50876032!
test12CannotCreateCartWithInvalidClientId

	self setUp.

	self
		should: [shopInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	! !

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'IO 11/30/2020 02:57:27'!
FAILURE!
!StoreInterface class methodsFor: 'error descriptions' stamp: 'IO 11/30/2020 02:57:48'!
invalidClientId
	^'The user name is not valid'! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:57:48' prior: 50876043!
test13CannotCreateCartWithInvalidClientPassword

	self setUp.

	self
		should: [shopInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:57:48' prior: 50876055!
test12CannotCreateCartWithInvalidClientId

	self setUp.

	self
		should: [shopInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:57:48' prior: 50875194!
createCartFor: aUserID password: aPassword

	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !

!methodRemoval: StoreInterface class #invalidUserName stamp: 'IO 11/30/2020 02:57:48'!
invalidUserName
	^'The user name is not valid'!
!StoreInterface class methodsFor: 'error descriptions' stamp: 'IO 11/30/2020 02:58:04'!
invalidClientPassword
	^'The client password is not valid'! !
!StoreInterface class methodsFor: 'error descriptions' stamp: 'IO 11/30/2020 02:58:11' prior: 50876070!
invalidClientId
	^'The client id is not valid'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'IO 11/30/2020 02:58:14'!
FAILURE!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'IO 11/30/2020 02:58:14'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:59:06' prior: 50876099!
createCartFor: aUserID password: aPassword

	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	(users at: aUserID = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:59:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'IO 11/30/2020 02:59:08'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'IO 11/30/2020 02:59:08'!
FAILURE!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:59:14'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:59:59' prior: 50876219!
createCartFor: aUserID password: aPassword

	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	(users associationAt: aUserID = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 03:00:05'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'IO 11/30/2020 03:00:19'!
FAILURE!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 03:00:33'!
ERROR!

users!

self!

self associationAt: 'admin'!

self associationAt: 'admin' value !

self associationAt: 'admin' value!

self at: 'admin'!

self at: 'admin'!
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 03:01:58' prior: 50876280!
createCartFor: aUserID password: aPassword

	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	(users at: aUserID = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 03:02:09' prior: 50876395!
createCartFor: aUserID password: aPassword

	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	((users at: aUserID) = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 03:02:18'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

----SNAPSHOT----(30 November 2020 03:11:02) CuisUniversity-4384.image priorSource: 17155564!

----QUIT----(30 November 2020 03:11:07) CuisUniversity-4384.image priorSource: 17435594!

----STARTUP---- (30 November 2020 14:01:32) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!


!classRemoval: #StoreTestObjectsFactory stamp: 'LH 11/30/2020 14:01:38'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterface stamp: 'LH 11/30/2020 14:01:39'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'LH 11/30/2020 14:01:39'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'LH 11/30/2020 14:01:40'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'LH 11/30/2020 14:01:40'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'LH 11/30/2020 14:01:40'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterfaceTest stamp: 'LH 11/30/2020 14:01:41'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'LH 11/30/2020 14:01:41'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'LH 11/30/2020 14:01:42'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\TusLibros-3.st----!

----QUIT----(30 November 2020 14:45:52) CuisUniversity-4384.image priorSource: 17668243!

----STARTUP---- (30 November 2020 17:47:36) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!

!StoreInterfaceTest methodsFor: 'tests 30 minutos' stamp: 'LH 11/30/2020 18:35:22'!
test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	self setUp.
	aStoreInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog 
								withMerchantProccessor: self 
								withClients: testObjectsFactory clients 
								withTimeManager: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError equals: StoreInterface invalidCartOutOfTime.
				self assert: aStoreInterface aCartIsNotValid: aCartId.]
	
	! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:35:30'!
ERROR!
!StoreInterface class methodsFor: 'instance creation' stamp: 'LH 11/30/2020 18:35:42'!
withCatalogue: aDictionary withMerchantProccessor: aStoreInterfaceTest withClients: aDictionary3 withTimeManager: aStoreInterfaceTest4 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aStoreInterfaceTest withClients: aDictionary3 withTimeManager: aStoreInterfaceTest4 ! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'LH 11/30/2020 18:36:23' prior: 50884845!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager ! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:36:25'!
ERROR!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/30/2020 18:36:35'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts merchantProcessor salesBook users dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/30/2020 18:36:35'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts merchantProcessor salesBook users dictionary merchantProccessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/30/2020 18:36:35'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts merchantProcessor salesBook users dictionary merchantProccessor clientBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/30/2020 18:36:35'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts merchantProcessor salesBook users dictionary merchantProccessor clientBook timeManager'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/30/2020 18:36:36'!
initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 
	self shouldBeImplemented.
	dictionary := aDictionary.
	merchantProccessor := aMerchantProccessor.
	clientBook := aClientBook.
	timeManager := aTimeManager.! !
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/30/2020 18:37:28' prior: 50884915!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientBook.
	timeManager := aTimeManager.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:37:29'!
ERROR!
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/30/2020 18:38:35' prior: 50884928!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientBook.
	timeManager := aTimeManager.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:38:37'!
ERROR!

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'LH 11/30/2020 18:39:54'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior shopInterface timeManager'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/30/2020 18:39:51' prior: 50884119 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	timeManager := [^ DateAndTime current ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self
		withClients: testObjectsFactory clients.! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/30/2020 18:42:37'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts merchantProcessor salesBook users dictionary merchantProccessor clientBook timeManager lastActionForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 18:42:34' prior: 50884643!
createCartFor: aUserID password: aPassword

	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	((users at: aUserID) = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts := timeManager currentTime.
	
	^carts size.
! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 18:42:52' prior: 50884996!
createCartFor: aUserID password: aPassword

	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	((users at: aUserID) = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts := timeManager currentTime.
	
	^carts size.
! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:42:57'!
ERROR!
!StoreInterfaceTest methodsFor: 'timeManager' stamp: 'LH 11/30/2020 18:43:15'!
currentTime
	self shouldBeImplemented.! !
!StoreInterfaceTest methodsFor: 'timeManager' stamp: 'LH 11/30/2020 18:43:35' prior: 50885028!
currentTime
	^timeManager value.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:43:37'!
ERROR!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:43:48'!
ERROR!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/30/2020 18:44:43' prior: 50884972 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	timeManager := [^ DateAndTime today ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self
		withClients: testObjectsFactory clients.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:44:55'!
ERROR!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:44:55'!
ERROR!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/30/2020 18:45:30' prior: 50885047 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	timeManager := [ DateAndTime today ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self
		withClients: testObjectsFactory clients.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:45:35'!
ERROR!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:45:35'!
ERROR!
!StoreInterfaceTest methodsFor: 'timeManager' stamp: 'LH 11/30/2020 18:45:55'!
leap30minIntoTheFuture
	self shouldBeImplemented.! !
!StoreInterfaceTest methodsFor: 'timeManager' stamp: 'LH 11/30/2020 18:47:07' prior: 50885090!
leap30minIntoTheFuture

	timeManager := [DateAndTime today + 30 minutes].! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:47:13'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 18:51:37' prior: 50884627!
addToCart: aCartId book: anISBN quantity: aQuantity 

	timeManager currentTime - lastActionForCarts < 30 minutes ifFalse:[self error: StoreInterface invalidCartOutOfTime].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 18:51:48' prior: 50885105!
addToCart: aCartId book: anISBN quantity: aQuantity 

	timeManager currentTime - lastActionForCarts < 30 minutes ifFalse:[^self error: StoreInterface invalidCartOutOfTime].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:51:52'!
ERROR!
!StoreInterface class methodsFor: 'error descriptions' stamp: 'LH 11/30/2020 18:52:09'!
invalidCartOutOfTime
	self shouldBeImplemented.! !
!StoreInterface class methodsFor: 'error descriptions' stamp: 'LH 11/30/2020 18:52:42' prior: 50885130!
invalidCartOutOfTime
	^ 'The Cart has Expired due to no usage for more than 30 minutes'! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:52:45'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests 30 minutos' stamp: 'LH 11/30/2020 18:53:08' prior: 50884814!
test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	self setUp.
	aStoreInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog 
								withMerchantProccessor: self 
								withClients: testObjectsFactory clients 
								withTimeManager: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self assert: aStoreInterface aCartIsNotValid: aCartId.]
	
	! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:53:11'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests 30 minutos' stamp: 'LH 11/30/2020 18:53:50' prior: 50885146!
test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	self setUp.
	aStoreInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog 
								withMerchantProccessor: self 
								withClients: testObjectsFactory clients 
								withTimeManager: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self assert: (aStoreInterface aCartIsNotValid: aCartId).]
	
	! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:53:57'!
ERROR!
!StoreInterface methodsFor: 'testing' stamp: 'LH 11/30/2020 18:54:30'!
aCartIsNotValid: aSmallInteger 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'testing' stamp: 'LH 11/30/2020 18:56:21' prior: 50885209!
aCartIsNotValid: aCartId 
	
	^ timeManager currentTime - lastActionForCarts < 30 minutes.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:56:22'!
FAILURE!

timeManager currentTime!

lastActionForCarts!

timeManager currentTime - lastActionForCarts!
!StoreInterface methodsFor: 'testing' stamp: 'LH 11/30/2020 18:57:49' prior: 50885214!
aCartIsNotValid: aCartId 
	
	^ timeManager currentTime - lastActionForCarts >= 30 minutes.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:57:50'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:57:54'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 18:58:39' prior: 50885115!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self aCartIsNotValid: aCartId) ifFalse:[^self error: StoreInterface invalidCartOutOfTime].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 18:58:41'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 18:58:41'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 18:58:41'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:58:41'!
FAILURE!
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/30/2020 19:01:23' prior: 50884944!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientBook.
	timeManager := aTimeManager.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.
	lastActionForCarts := OrderedCollection new.! !
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/30/2020 19:02:34' prior: 50885301!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientBook.
	timeManager := aTimeManager.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 19:05:59' prior: 50885010!
createCartFor: aUserID password: aPassword
	|aCartID|
	
	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	((users at: aUserID) = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	aCartID := carts size.
	
	lastActionForCarts add: (Association key: aCartID value: timeManager currentTime).
	
	^aCartID.
! !
!StoreInterface methodsFor: 'testing' stamp: 'LH 11/30/2020 19:06:27' prior: 50885227!
aCartIsNotValid: aCartId 
	
	^ timeManager currentTime - lastActionForCarts at: aCartId >= 30 minutes.! !
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/30/2020 19:06:56' prior: 50885069 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	timeManager := [ DateAndTime now ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self
		withClients: testObjectsFactory clients.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 19:06:58'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 19:06:58'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 19:06:58'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:06:58'!
FAILURE!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:07:09'!
FAILURE!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:07:09'!
FAILURE!
!StoreInterface methodsFor: 'testing' stamp: 'LH 11/30/2020 19:07:49' prior: 50885347!
aCartIsNotValid: aCartId 
	
	^ timeManager currentTime - (lastActionForCarts at: aCartId) >= 30 minutes.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:07:50'!
FAILURE!
!StoreTestObjectsFactory methodsFor: 'store' stamp: 'LH 11/30/2020 19:10:21'!
aStoreInterfaceWithSimulator: aSimulator

	^ StoreInterface withCatalogue: self defaultCatalog 
								withMerchantProccessor: aSimulator 
								withClients: self clients 
								withTimeManager: aSimulator. ! !

TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior timeManager'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'LH 11/30/2020 19:10:44'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior timeManager'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/30/2020 19:10:52' prior: 50885354 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	timeManager := [ DateAndTime now ].
! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:12:14' prior: 50884130!
test01ANewStoreHasNoActiveCarts
	|aShopInterface|
	
	self setUp.
	aShopInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: 0 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:12:44' prior: 50884136!
test02ACartCanBeCreatedInAStore
	|aShopInterface|
	
	self setUp.
	aShopInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self createValidCart.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:12:46'!
ERROR!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:12:46'!
ERROR!
!StoreInterfaceTest methodsFor: 'tools' stamp: 'LH 11/30/2020 19:13:17' prior: 50884317!
createValidCart

	^StoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:13:18'!
ERROR!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:14:48' prior: 50885524!
test02ACartCanBeCreatedInAStore
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:14:50'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:15:08' prior: 50885514!
test01ANewStoreHasNoActiveCarts
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: 0 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:16:45' prior: 50884143!
test03AStoreInterfaceCanCreateMultipleCarts
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.


	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	self assert: 2 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:17:23' prior: 50884155!
test04ANewCartInAStoreIsEmpty
	| aCartId aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.


	
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: (aStoreInterface listCart: aCartId) isEmpty.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:17:56' prior: 50884163!
test05AStoreCanAddAnItemToOneOfItsCarts
	| aCartId aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: (aStoreInterface listCart: aCartId) includes: (testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:18:28' prior: 50884175!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	| aCartId aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId) occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:18:57' prior: 50884188!
test07AStoreCanAddDifferentItemsToItsCarts
	| aCartId listedCart aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId book: (testObjectsFactory anotherItemSellByTheStore ) quantity: 3.
	
	listedCart := (aStoreInterface listCart: aCartId).
	self assert: 2 equals: (listedCart occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (listedCart occurrencesOf: testObjectsFactory anotherItemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:19:31' prior: 50884208!
test08AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aCartId2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	aStoreInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((aStoreInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:19:55' prior: 50884232!
test09ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:20:29' prior: 50884247!
test10ManyCartsCanBeCheckedOut
	| aCartID1 aCartID2 aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.

	aStoreInterface addToCart: aCartID1 book: testObjectsFactory itemSellByTheStore quantity: 2.
	aCartID2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	aStoreInterface addToCart: aCartID2 book: testObjectsFactory itemSellByTheStore quantity: 10.
	
	aStoreInterface checkOutCart: aCartID1 with: (testObjectsFactory notExpiredCreditCard).
	aStoreInterface checkOutCart: aCartID2 with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:21:00' prior: 50884272!
test11CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:21:38' prior: 50884289!
test12CannotCreateCartWithInvalidClientId
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:21:55' prior: 50884300!
test13CannotCreateCartWithInvalidClientPassword
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !
!StoreInterfaceTest methodsFor: 'tests 30 minutos' stamp: 'LH 11/30/2020 19:22:17' prior: 50885178!
test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self assert: (aStoreInterface aCartIsNotValid: aCartId).]
	
	! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:22:18'!
FAILURE!

timeManager currentTime!

timeManager currentTime - (lastActionForCarts at: aCartId)!

lastActionForCarts at: aCartId!
!StoreInterfaceTest methodsFor: 'timeManager' stamp: 'LH 11/30/2020 19:23:24' prior: 50885095!
leap30minIntoTheFuture

	timeManager := [DateAndTime now + 30 minutes].! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:23:33'!
FAILURE!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:23:33'!
FAILURE!

timeManager currentTime - (lastActionForCarts at: aCartId)!
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 19:24:42' prior: 50885242!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self aCartIsNotValid: aCartId) ifTrue:[^self error: StoreInterface invalidCartOutOfTime].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:24:43'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:24:46'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 19:24:46'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:24:57'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:25:58'!
ERROR!

merchantProcessor!

merchantProcessor!

aSimulator!

merchantProcessor!

merchantProcessor!

aStoreInterface!

self!

merchantProcessor!

self!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:33:56' prior: 50885707!
test09ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	self setUp.
	aStoreInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog 
								withMerchantProccessor: self 
								withClients: testObjectsFactory clients 
								withTimeManager: self. 
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:33:57'!
ERROR!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:34:32'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:34:35'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 19:34:35'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:35:46'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:35:46'!
ERROR!

merchantProcessor!

self!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:37:34'!
ERROR!

aMerchantProccessor!

aMerchantProccessor!

aStoreInterface!

merchantProcessor!
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 19:42:48' prior: 50884633!
checkOutCart: aCartId with: aCreditCard
	
	^(Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	
! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:42:49'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:42:55'!
PASSED!

----SNAPSHOT----(30 November 2020 19:43:19) CuisUniversity-4384.image priorSource: 17700970!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/30/2020 19:48:08' prior: 50885506 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	timeManager := [ DateAndTime now ].
! !
!StoreInterfaceTest methodsFor: 'tests 30 minutos' stamp: 'LH 11/30/2020 19:48:51' prior: 50885813!
test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self assert: (aStoreInterface aCartIsNotValid: aCartId).]
	
	! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:48:54'!
PASSED!

aSimulator!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:53:08'!
PASSED!

!methodRemoval: StoreInterface #initializeWithCatalogue:andMerchantProccessor: stamp: 'LH 11/30/2020 20:05:04'!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor  
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.
!

!methodRemoval: StoreInterface #initializeWithCatalogue:andMerchantProccessor:withClients: stamp: 'LH 11/30/2020 20:05:40'!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withClients: aClientDictionary 
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.
	
	users := aClientDictionary.

!

!methodRemoval: StoreInterface class #withCatalogue:withMerchantProccessor:withClients: stamp: 'LH 11/30/2020 20:05:44'!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClients: aClientDictionary 
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withClients: aClientDictionary !

----SNAPSHOT----(30 November 2020 20:06:02) CuisUniversity-4384.image priorSource: 17742607!

Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook users merchantProccessor timeManager lastActionForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/30/2020 20:07:08'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook users merchantProccessor timeManager lastActionForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:07:11'!
PASSED!
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/30/2020 20:12:35' prior: 50885316!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientBook.
	timeManager := aTimeManager.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 20:14:56' prior: 50885331!
createCartFor: aUserID password: aPassword
	|aCartID|
	
	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	((users at: aUserID) = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	
	aCartID := carts keys size + 1.
	carts at: aCartID put: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts add: (Association key: aCartID value: timeManager currentTime).
	
	^aCartID.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'LH 11/30/2020 20:16:32'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior timeManager clientsBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/30/2020 20:16:28' prior: 50886111 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	timeManager := [ DateAndTime now ].
	clientsBook := testObjectsFactory clients.
! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/30/2020 20:17:31'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook users merchantProccessor clock lastActionForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/30/2020 20:17:31' prior: 50886270!
createCartFor: aUserID password: aPassword
	|aCartID|
	
	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	((users at: aUserID) = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	
	aCartID := carts keys size + 1.
	carts at: aCartID put: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts add: (Association key: aCartID value: clock currentTime).
	
	^aCartID.
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/30/2020 20:17:31' prior: 50886255!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientBook.
	clock := aTimeManager.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/30/2020 20:17:31' prior: 50885425!
aCartIsNotValid: aCartId 
	
	^ clock currentTime - (lastActionForCarts at: aCartId) >= 30 minutes.! !

TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clock clientsBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'LH 11/30/2020 20:17:38'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clock clientsBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/30/2020 20:17:54' prior: 50886346 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	clock := [ DateAndTime now ].
	clientsBook := testObjectsFactory clients.
! !
!StoreInterfaceTest methodsFor: 'timeManager' stamp: 'LH 11/30/2020 20:18:19' prior: 50885033!
currentTime
	^clock value.! !
!StoreInterfaceTest methodsFor: 'timeManager' stamp: 'LH 11/30/2020 20:18:29' prior: 50885845!
leap30minIntoTheFuture

	clock := [DateAndTime now + 30 minutes].! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!methodRemoval: StoreInterfaceTest #createValidCart stamp: 'LH 11/30/2020 20:19:32'!
createValidCart

	^StoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.!
!StoreInterfaceTest methodsFor: 'clientsBook' stamp: 'LH 11/30/2020 20:20:38'!
validateUser: aUserID andPassword: aPassword

	(clientsBook keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	((clientsBook at: aUserID) = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'LH 11/30/2020 20:22:36'!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withTimeManager: aTimeManager 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager ! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/30/2020 20:22:36' prior: 50885940!
test09ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	self setUp.
	aStoreInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog 
								withMerchantProccessor: self 
								withClientDatabase: testObjectsFactory clients 
								withTimeManager: self. 
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'LH 11/30/2020 20:22:36' prior: 50885481!
aStoreInterfaceWithSimulator: aSimulator

	^ StoreInterface withCatalogue: self defaultCatalog 
								withMerchantProccessor: aSimulator 
								withClientDatabase: self clients 
								withTimeManager: aSimulator. ! !

!methodRemoval: StoreInterface class #withCatalogue:withMerchantProccessor:withClients:withTimeManager: stamp: 'LH 11/30/2020 20:22:36'!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager !
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/30/2020 20:23:01'!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientBook.
	clock := aTimeManager.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.! !
!StoreInterface class methodsFor: 'as yet unclassified' stamp: 'LH 11/30/2020 20:23:01' prior: 50886505!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withTimeManager: aTimeManager 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withTimeManager: aTimeManager ! !

!methodRemoval: StoreInterface #initializeWithCatalogue:withMerchantProccessor:withClients:withTimeManager: stamp: 'LH 11/30/2020 20:23:01'!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientBook.
	clock := aTimeManager.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.!
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/30/2020 20:23:17' prior: 50886567!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientDatabase.
	clock := aTimeManager.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/30/2020 20:23:27'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/30/2020 20:23:27' prior: 50886365!
createCartFor: aUserID password: aPassword
	|aCartID|
	
	(clientDatabase keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	((clientDatabase at: aUserID) = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	
	aCartID := carts keys size + 1.
	carts at: aCartID put: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts add: (Association key: aCartID value: clock currentTime).
	
	^aCartID.
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/30/2020 20:23:27' prior: 50886610!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aTimeManager.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.! !
!StoreTestObjectsFactory methodsFor: 'store' stamp: 'LH 11/30/2020 20:24:04' prior: 50886544!
aStoreInterfaceWithSimulator: aSimulator

	^ StoreInterface withCatalogue: self defaultCatalog 
								withMerchantProccessor: aSimulator 
								withClientDatabase: aSimulator
								withTimeManager: aSimulator. ! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 20:24:57' prior: 50886635!
createCartFor: aUserID password: aPassword
	|aCartID|
	
	clientDatabase validateUser: aUserID andPassword: aPassword.
	
	aCartID := carts keys size + 1.
	carts at: aCartID put: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts add: (Association key: aCartID value: clock currentTime).
	
	^aCartID.
! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 20:25:02' prior: 50886678!
createCartFor: aUserID password: aPassword
	|aCartID|
	
	clientDatabase validateUser: aUserID andPassword: aPassword.
	
	aCartID := carts keys size + 1.
	carts at: aCartID put: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts add: (Association key: aCartID value: clock currentTime).
	
	^aCartID.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 20:25:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 20:25:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 20:25:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 20:25:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:25:06'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:25:06'!
ERROR!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 20:25:34' prior: 50886518!
test09ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:25:37'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 20:25:37'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 20:25:37'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 20:25:37'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 20:25:37'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:25:37'!
PASSED!

----SNAPSHOT----(30 November 2020 20:29:12) CuisUniversity-4384.image priorSource: 17745119!

!methodRemoval: StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 20:30:35'!
test05AStoreCanAddAnItemToOneOfItsCarts
	| aCartId aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: (aStoreInterface listCart: aCartId) includes: (testObjectsFactory itemSellByTheStore).!

!methodRemoval: StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 20:30:37'!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	| aCartId aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId) occurrencesOf: testObjectsFactory itemSellByTheStore).!

!methodRemoval: StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 20:31:09'!
test10ManyCartsCanBeCheckedOut
	| aCartID1 aCartID2 aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.

	aStoreInterface addToCart: aCartID1 book: testObjectsFactory itemSellByTheStore quantity: 2.
	aCartID2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	aStoreInterface addToCart: aCartID2 book: testObjectsFactory itemSellByTheStore quantity: 10.
	
	aStoreInterface checkOutCart: aCartID1 with: (testObjectsFactory notExpiredCreditCard).
	aStoreInterface checkOutCart: aCartID2 with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).!

!methodRemoval: StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 20:31:34'!
test07AStoreCanAddDifferentItemsToItsCarts
	| aCartId listedCart aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId book: (testObjectsFactory anotherItemSellByTheStore ) quantity: 3.
	
	listedCart := (aStoreInterface listCart: aCartId).
	self assert: 2 equals: (listedCart occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (listedCart occurrencesOf: testObjectsFactory anotherItemSellByTheStore).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 20:33:16'!
test05AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aCartId2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	aStoreInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((aStoreInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !

!methodRemoval: StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 20:33:16'!
test08AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aCartId2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	aStoreInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((aStoreInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 20:33:20'!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!methodRemoval: StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:33:20'!
test09ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 20:33:27'!
test07CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!methodRemoval: StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 20:33:27'!
test11CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 20:33:32'!
test08CannotCreateCartWithInvalidClientId
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !

!methodRemoval: StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 20:33:33'!
test12CannotCreateCartWithInvalidClientId
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 20:33:39'!
test09CannotCreateCartWithInvalidClientPassword
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !

!methodRemoval: StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 20:33:39'!
test13CannotCreateCartWithInvalidClientPassword
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	!
!StoreInterfaceTest methodsFor: 'tests 30 minutos' stamp: 'LH 11/30/2020 20:33:58'!
test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self assert: (aStoreInterface aCartIsNotValid: aCartId).]
	
	! !

!methodRemoval: StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:33:59'!
test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self assert: (aStoreInterface aCartIsNotValid: aCartId).]
	
	!

----SNAPSHOT----(30 November 2020 20:40:42) CuisUniversity-4384.image priorSource: 17765769!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'LH 11/30/2020 20:43:01' prior: 50887139!
test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
	
	! !

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:43:03'!
ERROR!
!StoreInterface methodsFor: 'testing' stamp: 'LH 11/30/2020 20:43:20'!
isActiveCart: aSmallInteger 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'testing' stamp: 'LH 11/30/2020 20:44:11' prior: 50887217!
isActiveCart: aCartID 
	
	^ carts includesKey: aCartID.! !

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:44:14'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 20:45:34' prior: 50885861!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self aCartIsNotValid: aCartId) ifTrue:[      carts remove: aCartId.
  									^self error: StoreInterface invalidCartOutOfTime.].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:45:35'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 20:46:43' prior: 50887232!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self aCartIsNotValid: aCartId) ifTrue:[      carts removeKey: aCartId.
  									^self error: StoreInterface invalidCartOutOfTime.].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:46:44'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 20:46:44'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 20:46:44'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 20:46:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 20:46:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 20:46:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:46:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 20:46:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 20:46:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 20:46:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:46:45'!
PASSED!

----SNAPSHOT----(30 November 2020 20:46:57) CuisUniversity-4384.image priorSource: 17777129!

----SNAPSHOT----(30 November 2020 20:47:22) CuisUniversity-4384.image priorSource: 17780692!

----QUIT----(30 November 2020 20:47:47) CuisUniversity-4384.image priorSource: 17780786!

----STARTUP---- (1 December 2020 18:33:38) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!


----End fileIn of /Users/ilanolkies/uba/ingsoft1/ingeSoft-2020-2c/20-TusLibros-3/TusLibros-3.st----!
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:34:55' prior: 50868215!
test09CannotCreateCartWithInvalidClientPassword
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:34:58'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:36:13' prior: 50868071!
test01ANewStoreHasNoActiveCarts
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: 0 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:36:14'!
PASSED!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/1/2020 18:36:54'!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aTimeManager.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.! !
!StoreInterface class methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 18:36:54' prior: 50868607!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withTimeManager: aTimeManager 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aTimeManager ! !

!methodRemoval: StoreInterface #initializeWithCatalogue:withMerchantProccessor:withClientDatabase:withTimeManager: stamp: 'IO 12/1/2020 18:36:54'!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aTimeManager.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:36:57'!
PASSED!
!StoreInterface class methodsFor: 'instance creation' stamp: 'IO 12/1/2020 18:37:16'!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aTimeManager 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aTimeManager ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 18:37:16' prior: 50868674!
aStoreInterfaceWithSimulator: aSimulator

	^ StoreInterface withCatalogue: self defaultCatalog 
								withMerchantProccessor: aSimulator 
								withClientDatabase: aSimulator
								withClock: aSimulator. ! !

!methodRemoval: StoreInterface class #withCatalogue:withMerchantProccessor:withClientDatabase:withTimeManager: stamp: 'IO 12/1/2020 18:37:16'!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withTimeManager: aTimeManager 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aTimeManager !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:37:19'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'store' stamp: 'IO 12/1/2020 18:38:51'!
aStoreInterfaceWithSimulator: aSimulator andClock: aClock

	^ StoreInterface withCatalogue: self defaultCatalog 
								withMerchantProccessor: aSimulator 
								withClientDatabase: aSimulator
								withClock: aClock. ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 18:38:52'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:39:16' prior: 50868859!
test01ANewStoreHasNoActiveCarts
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.
	
	self assert: 0 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:39:19'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:39:33' prior: 50868081!
test02ACartCanBeCreatedInAStore
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.
	
	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:39:34'!
ERROR!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/1/2020 18:40:56' prior: 50868907!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'IO 12/1/2020 18:41:04' prior: 50869032!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aClock 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aClock ! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'IO 12/1/2020 18:41:09' prior: 50869325!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aTimeManager 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aTimeManager ! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'IO 12/1/2020 18:43:23' prior: 50869337!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aClock 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aClock ! !
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 18:44:00' prior: 50868543!
aCartIsNotValid: aCartId 
	
	^ clock now - (lastActionForCarts at: aCartId) >= 30 minutes.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:44:02'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:44:02'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:44:02'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:44:02'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:44:02'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:44:43' prior: 50868582!
createCartFor: aUserID password: aPassword
	|aCartID|
	
	clientDatabase validateUser: aUserID andPassword: aPassword.
	
	aCartID := carts keys size + 1.
	carts at: aCartID put: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts add: (Association key: aCartID value: clock now).
	
	^aCartID.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:44:44'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:44:44'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:44:44'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:44:44'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:44:44'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:44:44'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:44:44'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:44:44'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:44:44'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:44:44'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:44:54' prior: 50868094!
test03AStoreInterfaceCanCreateMultipleCarts
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.


	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	self assert: 2 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:44:55'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:44:55'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:44:55'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:44:55'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:44:55'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:45:03' prior: 50868112!
test04ANewCartInAStoreIsEmpty
	| aCartId aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.


	
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: (aStoreInterface listCart: aCartId) isEmpty.! !

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:45:04'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:45:04'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:45:04'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:45:04'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:45:11' prior: 50868126!
test05AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.
	aCartId1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aCartId2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	aStoreInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((aStoreInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:45:12'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:45:12'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:45:12'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:45:12'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:45:12'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:45:12'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:45:12'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:45:12'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:45:12'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:45:12'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:45:12'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:45:17' prior: 50868157!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:45:18'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:45:18'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:45:32' prior: 50868178!
test07CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:45:32'!
ERROR!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:45:32'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:45:38'!
ERROR!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:45:38'!
ERROR!
!StoreInterfaceTest methodsFor: 'clock' stamp: 'IO 12/1/2020 18:46:12'!
now
	^DateAndTime now.! !
!StoreInterfaceTest methodsFor: 'clock' stamp: 'IO 12/1/2020 18:46:24' prior: 50869850!
now
	^DateAndTime now + 30 minutes.! !

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'IO 12/1/2020 18:46:53'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clock clientsBook timeLeap'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'clock' stamp: 'IO 12/1/2020 18:46:52' prior: 50869854!
now
	^DateAndTime now + timeLeap.! !
!StoreInterfaceTest methodsFor: 'clock' stamp: 'IO 12/1/2020 18:47:05'!
leap: aTime

	clock := [DateAndTime now + aTime].! !
!StoreInterfaceTest methodsFor: 'clock' stamp: 'IO 12/1/2020 18:47:16' prior: 50869871!
leap: aTime

	timeLeap := [DateAndTime now + aTime].! !
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:47:33' prior: 50869740!
test07CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:47:34'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:47:39' prior: 50868201!
test08CannotCreateCartWithInvalidClientId
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:47:52' prior: 50869939!
test08CannotCreateCartWithInvalidClientId
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:47:57' prior: 50868764!
test09CannotCreateCartWithInvalidClientPassword
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:47:58'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:48:11' prior: 50868230!
test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
	
	! !
!StoreInterfaceTest methodsFor: 'set up' stamp: 'IO 12/1/2020 18:48:28' prior: 50868037 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	clock := [ DateAndTime now ].
	clientsBook := testObjectsFactory clients.
	timeLeap := 0 seconds
! !
!StoreInterfaceTest methodsFor: 'set up' stamp: 'IO 12/1/2020 18:48:29' prior: 50870044 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	clock := [ DateAndTime now ].
	clientsBook := testObjectsFactory clients.
	timeLeap := 0 seconds.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:48:31'!
FAILURE!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:48:31'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:48:41' prior: 50870020!
test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 30 minutes.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
	
	! !

!methodRemoval: StoreInterfaceTest #currentTime stamp: 'IO 12/1/2020 18:49:04'!
currentTime
	^clock value.!

!methodRemoval: StoreInterfaceTest #leap30minIntoTheFuture stamp: 'IO 12/1/2020 18:49:06'!
leap30minIntoTheFuture

	clock := [DateAndTime now + 30 minutes].!
!StoreInterfaceTest methodsFor: 'clock' stamp: 'IO 12/1/2020 18:49:15' prior: 50869876!
leap: aTime

	timeLeap := DateAndTime now + aTime.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:49:19'!
PASSED!
!StoreInterfaceTest methodsFor: 'clock' stamp: 'IO 12/1/2020 18:49:36' prior: 50870181!
leap: aTime

	timeLeap := aTime.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:49:39'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:50:08' prior: 50869239!
test01ANewStoreHasNoActiveCarts
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: 0 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:50:08'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:50:12' prior: 50869292!
test02ACartCanBeCreatedInAStore
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:50:13'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:50:17' prior: 50869496!
test03AStoreInterfaceCanCreateMultipleCarts
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.


	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	self assert: 2 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:50:17'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:50:25' prior: 50869554!
test04ANewCartInAStoreIsEmpty
	| aCartId aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.


	
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: (aStoreInterface listCart: aCartId) isEmpty.! !

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:50:26'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:50:36' prior: 50870292!
test01ANewStoreHasNoActiveCarts
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.
	
	self assert: 0 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:50:42' prior: 50869608!
test05AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aCartId2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	aStoreInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((aStoreInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:50:43'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:51:17' prior: 50869679!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:51:18'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:51:22' prior: 50869881!
test07CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:51:22'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:51:26' prior: 50869954!
test08CannotCreateCartWithInvalidClientId
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:51:26'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:51:30' prior: 50869969!
test09CannotCreateCartWithInvalidClientPassword
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:51:31'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:52:24'!
test10CannotAdd30MinutesAfterCreation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 30 minutes.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
	
	! !

!methodRemoval: StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:52:24'!
test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 30 minutes.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
	
	!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:53:02' prior: 50868562!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self aCartIsNotValid: aCartId) ifTrue:[
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:53:29' prior: 50870814!
test10CannotAdd30MinutesAfterCreation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 30 minutes.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:53:39'!
test10CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 30 minutes.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:54:03' prior: 50870895!
test10CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 30 minutes.
	
	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:54:04'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:54:18' prior: 50870861!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self aCartIsNotValid: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:54:33' prior: 50868594!
listCart: aCartId 
	
	^(carts at: aCartId) copy.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:54:36' prior: 50870955!
listCart: aCartId

	
	
	^(carts at: aCartId) copy.! !
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 18:55:01' prior: 50869361!
aCartIsNotValid: aCartId 
	
	^clock now - (lastActionForCarts at: aCartId) >= 30 minutes.! !
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 18:55:12'!
isInvalidCart: aCartId 
	
	^clock now - (lastActionForCarts at: aCartId) >= 30 minutes.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 18:55:12' prior: 50870945!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self isInvalidCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !

!methodRemoval: StoreInterface #aCartIsNotValid: stamp: 'IO 12/1/2020 18:55:12'!
aCartIsNotValid: aCartId 
	
	^clock now - (lastActionForCarts at: aCartId) >= 30 minutes.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:55:16'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:55:16'!
FAILURE!
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 18:55:31'!
isExpiredCart: aCartId 
	
	^clock now - (lastActionForCarts at: aCartId) >= 30 minutes.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 18:55:31' prior: 50870977!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !

!methodRemoval: StoreInterface #isInvalidCart: stamp: 'IO 12/1/2020 18:55:31'!
isInvalidCart: aCartId 
	
	^clock now - (lastActionForCarts at: aCartId) >= 30 minutes.!
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 18:55:42' prior: 50868558!
numberOfActiveCarts

	^carts size.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:55:43'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:55:43'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:56:08' prior: 50870960!
listCart: aCartId

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].

	^(carts at: aCartId) copy.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:56:09'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:57:19' prior: 50870918!
test10CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 20 minutes.
	
	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:57:23'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:57:28' prior: 50871239!
test10CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 20 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:57:30'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:57:37'!
test11CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 20 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!methodRemoval: StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:57:37'!
test10CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 20 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:57:48' prior: 50871085!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].

	(carts at: aCartId) add: aQuantity of: anISBN.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:58:27' prior: 50871353!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
	lastActionForCarts add: (Association key: aCartId value: clock now).

	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:58:28'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:58:28'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:58:35' prior: 50871363!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].

	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:58:36'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:58:36'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:58:45' prior: 50871300!
test11CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface listCart: aCartId.
	
	self leap: 20 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:58:46'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:59:02' prior: 50871469!
test11CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	
	self leap: 30 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:59:02'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:59:17' prior: 50871499!
test11CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:59:17'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:59:20'!
PASSED!
!StoreInterfaceTest methodsFor: 'clock' stamp: 'IO 12/1/2020 19:00:11' prior: 50870217!
leap: aTime

	timeLeap := timeLeap + aTime.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:00:12'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:00:12'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:00:29' prior: 50871417!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
	

	(carts at: aCartId) add: aQuantity of: anISBN.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:00:41' prior: 50871765!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
	lastActionForCarts add: (Association key: aCartId value: clock now).

	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:00:55'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:01:03' prior: 50869448!
createCartFor: aUserID password: aPassword
	|aCartId|
	
	clientDatabase validateUser: aUserID andPassword: aPassword.
	
	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts add: (Association key: aCartId value: clock now).
	
	^aCartId.
! !

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:01:42'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:01:58' prior: 50868572!
checkOutCart: aCartId with: aCreditCard
	
	^(Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	
! !
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:03:00'!
test12CannotCheckout30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should:[aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test12CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:03:08'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:03:41' prior: 50871926!
checkOutCart: aCartId with: aCreditCard
	
	^(Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:03:42' prior: 50872055!
checkOutCart: aCartId with: aCreditCard
	
	^(Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
! !
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:04:01'!
test11CannotCheckout30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should:[aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!methodRemoval: StoreInterfaceTest #test12CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:04:01'!
test12CannotCheckout30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should:[aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:04:04'!
test12CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!methodRemoval: StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:04:04'!
test11CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:04:15' prior: 50872075!
test11CannotCheckout30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 30 minutes.

	self should:[aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:04:16'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:04:32' prior: 50872185!
test11CannotCheckout30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 30 minutes.

	self should:[aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:04:33'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:04:53'!
test12CannotList30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!methodRemoval: StoreInterfaceTest #test12CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:04:53'!
test12CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:05:00'!
test11CannotCheckout30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 30 minutes.

	self should:[aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!methodRemoval: StoreInterfaceTest #test11CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:05:00'!
test11CannotCheckout30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 30 minutes.

	self should:[aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:06:11' prior: 50872328!
test12CannotList30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should: [aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:07:19'!
test13CanListDuring30MinutesAfterLastListing
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
! !

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:07:20'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:07:44' prior: 50871147!
listCart: aCartId

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
		lastActionForCarts add: (Association key: aCartId value: clock now).

	^(carts at: aCartId) copy.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:07:45'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:07:49' prior: 50872484!
listCart: aCartId

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
	lastActionForCarts add: (Association key: aCartId value: clock now).

	^(carts at: aCartId) copy.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:07:49'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:07:49'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:07:49'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:07:49'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:07:50'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:08:26'!
afterUseCart: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:08:39'!
beforeUsingCart: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:08:44'!
afterUsingCart: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
! !

!methodRemoval: StoreInterface #afterUseCart: stamp: 'IO 12/1/2020 19:08:44'!
afterUseCart: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:08:57' prior: 50872602!
beforeUsingCart: aCartId

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:09:58'!
resetLastCartUsage: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
! !

!methodRemoval: StoreInterface #afterUsingCart: stamp: 'IO 12/1/2020 19:09:58'!
afterUsingCart: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:10:08'!
validateCart: aCartId

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !

!methodRemoval: StoreInterface #beforeUsingCart: stamp: 'IO 12/1/2020 19:10:08'!
beforeUsingCart: aCartId

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:10:19' prior: 50871776!
addToCart: aCartId book: anISBN quantity: aQuantity 

	self validateCart: aCartId.
	
	lastActionForCarts add: (Association key: aCartId value: clock now).

	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:10:20'!
PASSED!
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 19:11:10' prior: 50868549!
hasMadeTheSale: aSale

	^salesBook includes: aSale.! !
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 19:11:15' prior: 50868553!
isActiveCart: aCartID 
	
	^carts includesKey: aCartID.! !
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 19:11:16' prior: 50872714!
isActiveCart: aCartID 
	
	^carts includesKey: aCartID.
! !
!StoreInterface methodsFor: 'cart invalidation' stamp: 'IO 12/1/2020 19:12:07'!
afterCartUsage: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
! !

!methodRemoval: StoreInterface #resetLastCartUsage: stamp: 'IO 12/1/2020 19:12:07'!
resetLastCartUsage: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
!
!StoreInterface methodsFor: 'cart invalidation' stamp: 'IO 12/1/2020 19:12:19'!
setCartUsageTime: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
! !

!methodRemoval: StoreInterface #afterCartUsage: stamp: 'IO 12/1/2020 19:12:19'!
afterCartUsage: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:12:38' prior: 50872654!
addToCart: aCartId book: anISBN quantity: aQuantity 

	self validateCart: aCartId.
	
	self setCartUsageTime: aCartId.

	(carts at: aCartId) add: aQuantity of: anISBN.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:12:48' prior: 50872748!
addToCart: aCartId book: anISBN quantity: aQuantity 

	self validateCart: aCartId.

	(carts at: aCartId) add: aQuantity of: anISBN.

	self setCartUsageTime: aCartId.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:12:53'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:13:34' prior: 50871872!
createCartFor: aUserID password: aPassword
	|aCartId|
	
	clientDatabase validateUser: aUserID andPassword: aPassword.
	
	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).
	
	self setCartUsageTime: aCartId.
	
	^aCartId.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:13:35'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:13:35'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:13:35'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:13:47' prior: 50872540!
listCart: aCartId

	self validateCart: aCartId.
	
	lastActionForCarts add: (Association key: aCartId value: clock now).

	^(carts at: aCartId) copy.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:14:20' prior: 50872868!
listCart: aCartId

	| cart |
	self validateCart: aCartId.
	
	lastActionForCarts add: (Association key: aCartId value: clock now).

	cart := (carts at: aCartId) copy.
	
	self setCartUsageTime: aCartId.
	
	^cart.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:14:23' prior: 50872876!
listCart: aCartId

	| cart |

	self validateCart: aCartId.
	
	lastActionForCarts add: (Association key: aCartId value: clock now).

	cart := (carts at: aCartId) copy.
	
	self setCartUsageTime: aCartId.
	
	^cart.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:14:23'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:14:44' prior: 50872886!
listCart: aCartId

	| cart |

	self validateCart: aCartId.

	cart := (carts at: aCartId) copy.
	
	self setCartUsageTime: aCartId.
	
	^cart.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:14:45'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:15:30'!
addCart
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/1/2020 19:15:55'!
createCart
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	^aCartId.
! !

!methodRemoval: StoreInterface #addCart stamp: 'IO 12/1/2020 19:15:55'!
addCart
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	^aCartId.
!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:16:09' prior: 50872811!
createCartFor: aUserID password: aPassword
	|aCartId|
	
	clientDatabase validateUser: aUserID andPassword: aPassword.
	
	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).
	

	
	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/1/2020 19:16:14' prior: 50873000!
createCart
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:16:33' prior: 50873014!
createCartFor: aUserID password: aPassword
	|aCartId|
	
	clientDatabase validateUser: aUserID andPassword: aPassword.

	^self createCart.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:16:37' prior: 50873032!
createCartFor: aUserID password: aPassword
	
	clientDatabase validateUser: aUserID andPassword: aPassword.

	^self createCart.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

[:item | item + 1]!

[:item | item + 1]!

[:item | item + 1] value!

[:item | item + 1] valueWithArguments: (1)!

[:item | item + 1] valueWithArguments: #(1)!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:20:39'!
do: anOperation onCart: aCartId

	self validateCart: aCartId.
	self setCartUsageTime: aCartId.

	^anOperation valueWithArguments: #(aCartId).
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:21:32' prior: 50872757!
addToCart: aCartId book: anISBN quantity: aQuantity 

	self do: [(carts at: aCartId) add: aQuantity of: anISBN] onCart: aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:21:42' prior: 50873097!
do: anOperation onCart: aCartId

	self validateCart: aCartId.
	self setCartUsageTime: aCartId.

	^anOperation value.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:21:42'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:22:20' prior: 50872941!
listCart: aCartId

	^self do: [(carts at: aCartId) copy] onCart: aCartId.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:22:20'!
PASSED!
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 19:23:14' prior: 50871079!
isExpiredCart: aCartId 
	
	^'a'.! !
!StoreInterface methodsFor: 'cart invalidation' stamp: 'IO 12/1/2020 19:23:42' prior: 50872639!
validateCart: aCartId

	(clock now - (lastActionForCarts at: aCartId) < 30 minutes) ifFalse: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!methodRemoval: StoreInterface #isExpiredCart: stamp: 'IO 12/1/2020 19:23:48'!
isExpiredCart: aCartId 
	
	^'a'.!
!StoreInterfaceTest methodsFor: 'nil' stamp: 'IO 12/1/2020 19:28:42'!
test14clientHasinitialyNoPurchases

	! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 19:30:11'!
test14clientHasInitialyNoPurchases

	! !

!methodRemoval: StoreInterfaceTest #test14clientHasinitialyNoPurchases stamp: 'IO 12/1/2020 19:30:11'!
test14clientHasinitialyNoPurchases

	!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:31:08' prior: 50870341!
test02ACartCanBeCreatedInAStore
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 19:31:30' prior: 50873281!
test14clientHasInitialyNoPurchases

	|aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 19:31:33' prior: 50873304!
test14clientHasInitialyNoPurchases

	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:31:36' prior: 50870503!
test01ANewStoreHasNoActiveCarts
	|aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.
	
	self assert: 0 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:31:40' prior: 50873290!
test02ACartCanBeCreatedInAStore
	|aStoreInterface|
	

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:31:41' prior: 50873341!
test02ACartCanBeCreatedInAStore
	|aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:31:50' prior: 50870393!
test03AStoreInterfaceCanCreateMultipleCarts
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.


	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	self assert: 2 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:31:52' prior: 50873367!
test03AStoreInterfaceCanCreateMultipleCarts
	|aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.


	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	self assert: 2 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:31:53'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:32:02' prior: 50870450!
test04ANewCartInAStoreIsEmpty
	| aCartId aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.


	
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: (aStoreInterface listCart: aCartId) isEmpty.! !
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:32:03' prior: 50873455!
test04ANewCartInAStoreIsEmpty
	| aCartId aStoreInterface|
	

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.


	
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: (aStoreInterface listCart: aCartId) isEmpty.! !

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:32:05'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:32:11' prior: 50870514!
test05AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aCartId2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	aStoreInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((aStoreInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:32:12'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:32:17' prior: 50870584!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:32:18'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:32:22' prior: 50870644!
test07CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:32:23'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:32:27' prior: 50870706!
test08CannotCreateCartWithInvalidClientId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:32:27'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:32:31' prior: 50870760!
test09CannotCreateCartWithInvalidClientPassword
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:32:31'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 19:35:30' prior: 50873318!
test14clientHasInitialyNoPurchases
"
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.
"! !

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:35:34'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:40:54' prior: 50873331!
test01ANewStoreHasNoActiveCarts
	|aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: 0 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:40:55'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:41:02' prior: 50873965!
test01ANewStoreHasNoActiveCarts

	|aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: 0 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:41:26' prior: 50870872!
test10CannotAdd30MinutesAfterCreation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 30 minutes.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:41:28'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:48:08'!
test14CannotListNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface listCart: 1]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:48:12' prior: 50874110!
test14CannotListNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface listCart: 1]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!testRun: #StoreInterfaceTest #test14CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:48:13'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:49:15' prior: 50873164!
listCart: aCartId

	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	^self do: [(carts at: aCartId) copy] onCart: aCartId.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:49:41'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:50:41'!
test15CannotAddOnNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface addToCart: 1 book: testObjectsFactory itemSellByTheStore quantity: 1]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!testRun: #StoreInterfaceTest #test15CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:50:42'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:51:04' prior: 50873105!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	self do: [(carts at: aCartId) add: aQuantity of: anISBN] onCart: aCartId.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:51:05'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:51:57' prior: 50874247!
test15CannotAddOnNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface checkOutCart: 1 with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!testRun: #StoreInterfaceTest #test15CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:51:58'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:52:04'!
test14CannotAddOnNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface checkOutCart: 1 with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!methodRemoval: StoreInterfaceTest #test15CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:52:04'!
test15CannotAddOnNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface checkOutCart: 1 with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:52:08'!
test15CannotListNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface listCart: 1]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!methodRemoval: StoreInterfaceTest #test14CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:52:08'!
test14CannotListNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface listCart: 1]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:52:15'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:52:27' prior: 50874135!
listCart: aCartId


	^self do: [(carts at: aCartId) copy] onCart: aCartId.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:52:30' prior: 50872065!
checkOutCart: aCartId with: aCreditCard
	
		(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	^(Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:52:31'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:52:31'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:52:51' prior: 50874511!
checkOutCart: aCartId with: aCreditCard
	
	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	^(Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:52:52'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:52:52'!
FAILURE!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:53:05'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:53:05'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:53:47' prior: 50874582!
checkOutCart: aCartId with: aCreditCard

	^(Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:53:51' prior: 50874505!
listCart: aCartId

	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	^self do: [(carts at: aCartId) copy] onCart: aCartId.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:53:52'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:53:56' prior: 50874722!
listCart: aCartId

	
	^self do: [(carts at: aCartId) copy] onCart: aCartId.! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/1/2020 19:54:05' prior: 50873112!
do: anOperation onCart: aCartId

	self validateCart: aCartId.
	self setCartUsageTime: aCartId.
	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].

	^anOperation value.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:54:05'!
FAILURE!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:54:05'!
FAILURE!
!StoreInterface methodsFor: 'private' stamp: 'IO 12/1/2020 19:54:13' prior: 50874791!
do: anOperation onCart: aCartId

	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	self validateCart: aCartId.
	self setCartUsageTime: aCartId.


	^anOperation value.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/1/2020 19:54:15' prior: 50874856!
do: anOperation onCart: aCartId

	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	self validateCart: aCartId.
	self setCartUsageTime: aCartId.

	^anOperation value.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:54:15'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:54:21' prior: 50874263!
addToCart: aCartId book: anISBN quantity: aQuantity 

	self do: [(carts at: aCartId) add: aQuantity of: anISBN] onCart: aCartId.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:54:22'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:54:29' prior: 50874785!
listCart: aCartId

	^self do: [(carts at: aCartId) copy] onCart: aCartId.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:54:29'!
PASSED!
!StoreInterface methodsFor: 'private' stamp: 'IO 12/1/2020 19:54:52' prior: 50874866!
do: anOperation onCart: aCartId

	self validateCart: aCartId.
	self setCartUsageTime: aCartId.

	^anOperation value.
! !
!StoreInterface methodsFor: 'cart invalidation' stamp: 'IO 12/1/2020 19:55:01' prior: 50873220!
validateCart: aCartId

	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	(clock now - (lastActionForCarts at: aCartId) < 30 minutes) ifFalse: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:55:02'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:58:08'!
test16CannotListAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard.
	
	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withMessageText: StoreInterface cartLAlreadyCheckedOut.

	! !

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 19:58:11'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:59:21' prior: 50875129!
test16CannotListAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.
	aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard.

	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withMessageText: StoreInterface cartLAlreadyCheckedOut.

	! !

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 19:59:21'!
ERROR!
!StoreInterface class methodsFor: 'error descriptions' stamp: 'IO 12/1/2020 19:59:35'!
cartLAlreadyCheckedOut
	self shouldBeImplemented.! !
!StoreInterface class methodsFor: 'error descriptions' stamp: 'IO 12/1/2020 19:59:48' prior: 50875175!
cartLAlreadyCheckedOut
	^'Cart was already cehcked out'.! !

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 19:59:50'!
FAILURE!
!StoreInterface class methodsFor: 'error descriptions' stamp: 'IO 12/1/2020 20:00:09'!
cartAlreadyCheckedOut
	^'Cart was already cehcked out'.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:00:09' prior: 50875151!
test16CannotListAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.
	aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard.

	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withMessageText: StoreInterface cartAlreadyCheckedOut.

	! !

!methodRemoval: StoreInterface class #cartLAlreadyCheckedOut stamp: 'IO 12/1/2020 20:00:09'!
cartLAlreadyCheckedOut
	^'Cart was already cehcked out'.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 20:00:12'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 20:00:12'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 20:01:08' prior: 50875194!
test16CannotListAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.
	aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard.

	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!methodRemoval: StoreInterface class #cartAlreadyCheckedOut stamp: 'IO 12/1/2020 20:01:13'!
cartAlreadyCheckedOut
	^'Cart was already cehcked out'.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 20:01:17'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 20:01:17'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:01:51' prior: 50874712!
checkOutCart: aCartId with: aCreditCard
	
	| total |
	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	
	^total
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:02:51' prior: 50875459!
checkOutCart: aCartId with: aCreditCard
	
	| total |
	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	carts remove: aCartId.
	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:02:51'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 20:02:51'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:03:18'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:03:18'!
ERROR!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:03:40'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 20:03:40'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:03:44'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:03:44'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:04:08' prior: 50875470!
checkOutCart: aCartId with: aCreditCard
	
	| total |
	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	carts removeKey: aCartId.
	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 20:04:09'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 20:04:56'!
test16CannotOperateAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.
	aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard.

	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!methodRemoval: StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 20:04:56'!
test16CannotListAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.
	aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard.

	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 20:07:10'!
test14CannotAddOnNotExistentCart
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface checkOutCart: 1 with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!methodRemoval: StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 20:07:10'!
test14CannotAddOnNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface checkOutCart: 1 with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 20:07:14'!
test15CannotListNotExistentCart
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface listCart: 1]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!methodRemoval: StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 20:07:14'!
test15CannotListNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface listCart: 1]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	!

----SNAPSHOT----(1 December 2020 20:10:44) CuisUniversity-4384.image priorSource: 17155564!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 20:12:42' prior: 50873618!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:12:49'!
ERROR!
!CreditCard methodsFor: 'nil' stamp: 'IO 12/1/2020 20:13:47'!
ccn
	^'5400000000000001'! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:14:15'!
ccd
	^expiration! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:14:21'!
cced
	^expiration! !

!methodRemoval: CreditCard #ccd stamp: 'IO 12/1/2020 20:14:22'!
ccd
	^expiration!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:14:44'!
cco
	^'PEPE SANCHEZ'.! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:14:57'!
ERROR!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:15:14'!
checkOutCart: aSmallInteger ccn: aString cced: aMonth cco: aString4 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:15:50' prior: 50875821!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner 
	self checkOutCart: aCartId with: aCCExpirationDate.! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:15:52'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:15:55'!
ERROR!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:16:35' prior: 50875828!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner 
	self checkOutCart: aCartId with: (CreditCard with: aCCExpirationDate).! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:16:43'!
ERROR!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:16:59' prior: 50875842!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner 
	self checkOutCart: aCartId with: (CreditCard expiringOn: aCCExpirationDate).! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:17:03'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 20:17:48' prior: 50875681!
test16CannotOperateAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	aStoreInterface checkOutCart: aCartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:17:49'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 20:18:12' prior: 50872381!
test11CannotCheckout30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 30 minutes.

	self should:[
		aStoreInterface checkOutCart: aCartId
			ccn: testObjectsFactory notExpiredCreditCard ccn
			cced: testObjectsFactory notExpiredCreditCard cced
			cco: testObjectsFactory notExpiredCreditCard cco.]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:18:13'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:18:34' prior: 50875611!
checkOutCart: aCartId with: aCreditCard

! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:18:50' prior: 50875854!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner 

	
	| total |
	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	carts removeKey: aCartId.
	^total
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:18:51' prior: 50876162!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner 

	
	| total |
	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	carts removeKey: aCartId.

	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:18:54'!
FAILURE!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:18:54'!
FAILURE!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:19:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:19:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:19:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:19:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:19:08'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:19:08'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:19:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:19:08'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:19:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:19:09'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:19:09'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:19:09'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:19:09'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:19:09'!
FAILURE!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:19:09'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:19:09'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:19:09'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:19:09'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:19:27'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:19:27'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:19:27'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:19:27'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:19:27'!
FAILURE!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:19:27'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:19:27'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:19:27'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:19:27'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 20:21:05' prior: 50875723!
test14CannotAddOnNotExistentCart
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface addToCart: 1 book: testObjectsFactory itemSellByTheStore quantity: 1]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:21:06'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/1/2020 20:23:33' prior: 50867981!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:24:30' prior: 50876176!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner 

	
	| total |

	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	carts removeKey: aCartId.

	^total
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:24:34' prior: 50876521!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner 

	
	| total |

	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.

	^total
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:24:45' prior: 50876535!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner

	
	| total |

	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.

	^total
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 20:27:05'!
test17clientHasInitialyNoPurchases
"
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.
"! !

!methodRemoval: StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:27:05'!
test14clientHasInitialyNoPurchases
"
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.
"!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 20:28:29' prior: 50876563!
test17clientHasInitialyNoPurchases

	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: (OrderedCollection with: 0) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:28:31'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:28:41'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:28:53'!
listPurchasesFor: aString password: aString2 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:28:56' prior: 50876609!
listPurchasesFor: aString password: aString2 
	^0.! !

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:28:57'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:29:26' prior: 50876615!
listPurchasesFor: aString password: aString2 
	^OrderedCollection with: 0.! !

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:29:27'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 20:29:38'!
test18clientPurchases

	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: (OrderedCollection with: 0) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 20:30:33'!
test18clientAfterCheckoutHasPurchasedBooks

	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: (OrderedCollection with: 0) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !

!methodRemoval: StoreInterfaceTest #test18clientPurchases stamp: 'IO 12/1/2020 20:30:54'!
test18clientPurchases

	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: (OrderedCollection with: 0) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 20:32:00' prior: 50876702!
test18clientAfterCheckoutHasPurchasedBooks

	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: (OrderedCollection
		with: testObjectsFactory itemSellByTheStore
		with: 2
		with: testObjectsFactory anotherItemSellByTheStore 
		with: 2
		with: testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2
	) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:32:01'!
FAILURE!

!methodRemoval: StoreInterface #checkOutCart:with: stamp: 'IO 12/1/2020 20:32:18'!
checkOutCart: aCartId with: aCreditCard

!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:33:06' prior: 50876549!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner

	| total |

	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.

	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:33:07'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:33:07'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:33:29' prior: 50876756!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner

	| total |

	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.

	^total
! !
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/1/2020 20:33:59' prior: 50869310!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.
! !
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/1/2020 20:34:10' prior: 50876849!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.

! !
!Sale class methodsFor: 'instance creation' stamp: 'IO 12/1/2020 20:36:39'!
withProducts: aBagOfProducts withTotal: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeWithProducts: aBagOfProducts withTotal: aTotal! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'IO 12/1/2020 20:37:00'!
Object subclass: #Sale
	instanceVariableNames: 'total products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'IO 12/1/2020 20:36:59'!
initializeWithProducts: aBagOfProducts withTotal: aTotal

	products := aBagOfProducts.
	total := aTotal ! !
!Sale methodsFor: 'initialization' stamp: 'IO 12/1/2020 20:37:04' prior: 50876892!
initializeWithProducts: aBagOfProducts withTotal: aTotal

	products := aBagOfProducts.
	total := aTotal ! !
!Sale methodsFor: 'initialization' stamp: 'IO 12/1/2020 20:37:07' prior: 50876898!
initializeWithProducts: aBagOfProducts withTotal: aTotal

	products := aBagOfProducts.
	total := aTotal.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:37:08'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:37:08'!
FAILURE!
!Cashier methodsFor: 'checkout - private' stamp: 'IO 12/1/2020 20:41:03' prior: 50868361!
createSale
	| sale |
	sale := Sale of: total.
	^sale.
	
! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 20:41:04'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 20:41:04'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 20:41:04'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 20:41:04'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 20:41:04'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 20:41:04'!
PASSED!
!Cashier methodsFor: 'checkout - private' stamp: 'IO 12/1/2020 20:41:19' prior: 50876976!
createSale
	| sale |
	sale := Sale of: total.
	cart addToSale: sale.
	^sale.

! !
!Cart methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:42:16'!
addToSale: aSale

	aSale addItems: items copy.
! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'IO 12/1/2020 20:43:16'!
Object subclass: #Sale
	instanceVariableNames: 'total products items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'nil' stamp: 'IO 12/1/2020 20:43:08'!
addItems: aBagOfItems

	items := aBagOfItems.
! !
!Cart methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:44:24' prior: 50877006!
addToSale: aSale

	aSale addItems: (Bag from: items copy).
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 20:44:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 20:44:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 20:44:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 20:44:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 20:44:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 20:44:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 20:44:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 20:44:25'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 20:44:41'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 20:44:41'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 20:44:41'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:44:41'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:44:41'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:44:41'!
FAILURE!

Bag from: items!

Bag!

Bag new addAll: items!

items!
!Cart methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:48:49' prior: 50877022!
addToSale: aSale

	| itemsBag |
	itemsBag := Bag new.
	items copy do: [ :item | itemsBag add: item].
	aSale addItems: itemsBag.
! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 20:48:53'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:48:56'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:48:56'!
FAILURE!
!Sale methodsFor: 'total' stamp: 'IO 12/1/2020 20:49:11' prior: 50868486!
total

	^ total! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:51:18' prior: 50876623!
listPurchasesFor: aString password: aString2 
	| purchases |
	purchases := OrderedCollection new.
	salesBook do: [ :sale | sale listPurchasesOn: purchases ].
	purchases add: (salesBook sum: [ :sale | sale total ]).
	^OrderedCollection with: 0.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:52:48' prior: 50877286!
listPurchasesFor: aString password: aString2 
	| purchases |
	(salesBook size = 0) ifTrue: [^OrderedCollection with: 0.].

	purchases := OrderedCollection new.
	salesBook first listPurchasesOn: purchases.
	purchases add: (salesBook sum: [ :sale | sale total ]).
	! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:53:19'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:53:19'!
FAILURE!

!methodRemoval: Cart #addToSale: stamp: 'IO 12/1/2020 20:56:38'!
addToSale: aSale

	| itemsBag |
	itemsBag := Bag new.
	items copy do: [ :item | itemsBag add: item].
	aSale addItems: itemsBag.
!

!methodRemoval: Sale #initializeWithProducts:withTotal: stamp: 'IO 12/1/2020 20:56:49'!
initializeWithProducts: aBagOfProducts withTotal: aTotal

	products := aBagOfProducts.
	total := aTotal.
!

!methodRemoval: Sale #addItems: stamp: 'IO 12/1/2020 20:56:51'!
addItems: aBagOfItems

	items := aBagOfItems.
!
!Cashier methodsFor: 'checkout - private' stamp: 'IO 12/1/2020 20:57:01' prior: 50877001!
createSale
	| sale |
	sale := Sale of: total.

	^sale.

! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:57:15'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:57:15'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 20:57:27' prior: 50876728!
test18clientAfterCheckoutHasPurchasedBooks

	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	"
	self assert: (OrderedCollection
		with: testObjectsFactory itemSellByTheStore
		with: 2
		with: testObjectsFactory anotherItemSellByTheStore 
		with: 2
		with: testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2
	) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)"
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

----SNAPSHOT----(1 December 2020 21:09:14) CuisUniversity-4384.image priorSource: 17411790!

----STARTUP---- (2 December 2020 11:40:22) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!


!classRemoval: #StoreTestObjectsFactory stamp: 'LH 12/2/2020 11:40:28'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterface stamp: 'LH 12/2/2020 11:40:28'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'LH 12/2/2020 11:40:29'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'LH 12/2/2020 11:40:29'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'LH 12/2/2020 11:40:29'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'LH 12/2/2020 11:40:30'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterfaceTest stamp: 'LH 12/2/2020 11:40:30'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clock clientsBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'LH 12/2/2020 11:40:31'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'LH 12/2/2020 11:40:31'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\TusLibros-3.st----!
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 11:41:40' prior: 50888363!
listPurchasesFor: aUserId password: aString2 
	| purchases |
	(salesBook size = 0) ifTrue: [^OrderedCollection with: 0.].

	purchases := OrderedCollection new.
	salesBook first listPurchasesOn: purchases.
	purchases add: (salesBook sum: [ :sale | sale total ]).
	! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 11:41:50' prior: 50888581!
listPurchasesFor: aUserId password: aPassword 
	| purchases |
	(salesBook size = 0) ifTrue: [^OrderedCollection with: 0.].

	purchases := OrderedCollection new.
	salesBook first listPurchasesOn: purchases.
	purchases add: (salesBook sum: [ :sale | sale total ]).
	! !
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/2/2020 11:47:28' prior: 50887779!
test07CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: testObjectsFactory itemSellByTheStore withOccurrences: 2.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/2/2020 11:47:30'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 11:48:16' prior: 50888358!
listCart: aCartId

	^self do: [(carts at: aCartId) listItems] onCart: aCartId.! !

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/2/2020 11:48:21'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'LH 12/2/2020 11:48:28'!
listItems
	self shouldBeImplemented.! !
!Cart methodsFor: 'accessing' stamp: 'LH 12/2/2020 11:48:50' prior: 50888639!
listItems
	^ items copy.! !

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/2/2020 11:48:54'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/2/2020 11:48:55'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/2/2020 11:48:55'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/2/2020 11:48:55'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/2/2020 11:48:58'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 11:49:55' prior: 50888338!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner

	| total |

	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.

	^total
! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/2/2020 11:49:56'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/2/2020 11:49:59'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'LH 12/2/2020 11:50:45' prior: 50888042!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'adding' stamp: 'LH 12/2/2020 11:51:18' prior: 50888069!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/2/2020 11:51:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/2/2020 11:51:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/2/2020 11:51:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/2/2020 11:51:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/2/2020 11:51:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/2/2020 11:51:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/2/2020 11:51:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/2/2020 11:51:26'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/2/2020 11:52:49'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/2/2020 11:52:49'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 11:55:04' prior: 50888716!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner

	| total |
	self validateCart: aCartId.
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.

	^total
! !

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/2/2020 11:55:24'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/2/2020 11:55:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/2/2020 11:55:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/2/2020 11:55:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/2/2020 11:55:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/2/2020 11:55:31'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/2/2020 11:55:31'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/2/2020 11:55:31'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/2/2020 11:55:31'!
PASSED!
!StoreInterface methodsFor: 'private' stamp: 'LH 12/2/2020 11:57:09' prior: 50888391!
createCart
	|aCartId|

	aCartId := carts keys size + 1.
	self do: [carts at: aCartId put: (Cart acceptingItemsOf: catalogue)] onCart: aCartId.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'LH 12/2/2020 11:57:29' prior: 50889010!
createCart
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/2/2020 11:57:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/2/2020 11:57:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/2/2020 11:57:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/2/2020 11:57:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/2/2020 11:57:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/2/2020 11:57:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/2/2020 11:57:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/2/2020 11:57:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/2/2020 11:57:39'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/2/2020 12:03:03' prior: 50887815!
test09CannotCreateCartWithInvalidClientPassword
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withExceptionDo:[:anError |
			self assert: anError messageText equals: StoreInterface invalidClientId.
			self assert: 0 equals: aStoreInterface numberOfActiveCarts.].

	! !

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/2/2020 12:03:06'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/2/2020 12:04:24' prior: 50887829!
test14CannotAddOnNotExistentCart
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface addToCart: 1 book: testObjectsFactory itemSellByTheStore quantity: 1]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/2/2020 12:04:25'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/2/2020 12:06:32' prior: 50887853!
test16CannotOperateAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	aStoreInterface checkOutCart: aCartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: StoreInterface invalidCartId.
			self assert: 0 equals: aStoreInterface numberOfActiveCarts].

	! !

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/2/2020 12:06:34'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/2/2020 12:06:39'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/2/2020 12:06:39'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/2/2020 12:06:39'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/2/2020 12:06:39'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/2/2020 12:06:39'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'LH 12/2/2020 12:11:26'!
assertThatACart: aCartId fromTheStore: aStoreInterface IsNotValidAfter30MinutesWhenDoing: aStoreInterfaceAction
	
	self leap: 30 minutes.
	
	self should: aStoreInterfaceAction
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'LH 12/2/2020 12:12:39' prior: 50887877!
test10CannotAdd30MinutesAfterCreation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self  assertThatACart: aCartId
		fromTheStore: aStoreInterface 
		IsNotValidAfter30MinutesWhenDoing: [aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2].
	
! !

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/2/2020 12:12:41'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'LH 12/2/2020 12:13:40' prior: 50887899!
test11CannotCheckout30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self  assertThatACart: aCartId
	fromTheStore: aStoreInterface 
	IsNotValidAfter30MinutesWhenDoing: [
			aStoreInterface checkOutCart: aCartId
				ccn: testObjectsFactory notExpiredCreditCard ccn
				cced: testObjectsFactory notExpiredCreditCard cced
				cco: testObjectsFactory notExpiredCreditCard cco.].
! !

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/2/2020 12:13:42'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'LH 12/2/2020 12:14:47' prior: 50887928!
test12CannotList30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self  assertThatACart: aCartId
		fromTheStore: aStoreInterface 
		IsNotValidAfter30MinutesWhenDoing: [aStoreInterface listCart: aCartId].! !

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/2/2020 12:14:49'!
PASSED!
!StoreInterface methodsFor: 'testing' stamp: 'LH 12/2/2020 12:16:25' prior: 50888318!
hasMadeTheSale: aSale

	^salesBook includes: aSale.! !
!StoreInterface methodsFor: 'testing' stamp: 'LH 12/2/2020 12:17:13' prior: 50888322!
isActiveCart: aCartID 
	"awnsers if there is a usable cart associated with a cart ID"
	^carts includesKey: aCartID.
! !
!StoreInterface methodsFor: 'testing' stamp: 'LH 12/2/2020 12:18:25' prior: 50888327!
numberOfActiveCarts
	"awnsers the number of carts that exist in the store"
	^carts size.! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 12:19:22' prior: 50888331!
addToCart: aCartId book: anItem quantity: aQuantity 
	"adds a quantity of an item to the cart associated with a cart ID"
	self do: [(carts at: aCartId) add: aQuantity of: anItem] onCart: aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 12:21:19' prior: 50888885!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total |
	self validateCart: aCartId.
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.

	^total
! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 12:22:59' prior: 50888351!
createCartFor: anUserID password: aPassword
	"creates a new cart for an user with a password"
	clientDatabase validateUser: anUserID andPassword: aPassword.

	^self createCart.
! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 12:23:22' prior: 50888631!
listCart: aCartId
	"lists the contentes of the cart associated to a cart ID"
	^self do: [(carts at: aCartId) listItems] onCart: aCartId.! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 12:23:54' prior: 50888593!
listPurchasesFor: aUserId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| purchases |
	(salesBook size = 0) ifTrue: [^OrderedCollection with: 0.].

	purchases := OrderedCollection new.
	salesBook first listPurchasesOn: purchases.
	purchases add: (salesBook sum: [ :sale | sale total ]).
	! !
!StoreInterface methodsFor: 'cart invalidation' stamp: 'LH 12/2/2020 12:24:51' prior: 50888374!
setCartUsageTime: aCartId
	"registers the current Date and Time as the last usage of the cart associated with a cart ID"
	lastActionForCarts add: (Association key: aCartId value: clock now).
! !
!StoreInterface methodsFor: 'cart invalidation' stamp: 'LH 12/2/2020 12:26:29' prior: 50888380!
validateCart: aCartId
	"validates if the cart associated with a cart ID is usable at this moment.
	In the case it is not, the cart is deleted from the list if necessary and an error is returned"
	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	(clock now - (lastActionForCarts at: aCartId) < 30 minutes) ifFalse: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !
!StoreInterface methodsFor: 'private' stamp: 'LH 12/2/2020 12:26:49' prior: 50889021!
createCart
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'LH 12/2/2020 12:28:14' prior: 50888399!
do: anOperation onCart: aCartId
	"this method validates that we operate on a valid cart, then it sets the time of operation as the last known use of the cart and executes the operation"
	self validateCart: aCartId.
	self setCartUsageTime: aCartId.

	^anOperation value.
! !

----SNAPSHOT----(2 December 2020 12:28:29) CuisUniversity-4384.image priorSource: 17780880!

----QUIT----(2 December 2020 12:28:53) CuisUniversity-4384.image priorSource: 17850737!

----STARTUP---- (2 December 2020 21:21:36) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!


!classRemoval: #StoreTestObjectsFactory stamp: 'IO 12/2/2020 21:21:47'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterface stamp: 'IO 12/2/2020 21:21:47'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'IO 12/2/2020 21:21:48'!
Object subclass: #Sale
	instanceVariableNames: 'total products items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'IO 12/2/2020 21:21:48'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'IO 12/2/2020 21:21:48'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'IO 12/2/2020 21:21:49'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterfaceTest stamp: 'IO 12/2/2020 21:21:49'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clock clientsBook timeLeap'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'IO 12/2/2020 21:21:49'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'IO 12/2/2020 21:21:50'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /Users/ilanolkies/uba/ingsoft1/ingeSoft-2020-2c/20-TusLibros-3/TusLibros-3.st----!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:27:09' prior: 50878291!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2.

	self assert: #(items itemsTotal) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:27:25' prior: 50878916!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2.

	self assert: #(items, itemsTotal) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:27:34' prior: 50878939!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2.

	self assert: #(items itemsTotal) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:27:37'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 21:29:23' prior: 50878681!
listPurchasesFor: aUserId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |
	(salesBook size = 0) ifTrue: [^OrderedCollection with: 0.].

	items := Bag new.
	itemsTotal := 0.

	salesBook do: [ :sale |
		items addAll: sale lis
	]
	! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 21:31:44' prior: 50878988!
listPurchasesFor: aUserId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |
	(salesBook size = 0) ifTrue: [^OrderedCollection with: 0.].

	items := Bag new.
	itemsTotal := 0.

	salesBook do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^#(items, itemsTotal).
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:31:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:31:46'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 21:32:05' prior: 50879001!
listPurchasesFor: aUserId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |
	(salesBook size = 0) ifTrue: [#(nil, 0)].

	items := Bag new.
	itemsTotal := 0.

	salesBook do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^#(items, itemsTotal).
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:32:33' prior: 50878278!
test17clientHasInitialyNoPurchases

	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: #(Bag new, 0) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 21:32:46' prior: 50879082!
listPurchasesFor: aUserId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |

	items := Bag new.
	itemsTotal := 0.

	salesBook do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^#(items, itemsTotal).
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 21:32:49'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 21:32:49'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:32:49'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:32:49'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:32:52'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:32:52'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:33:06'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:33:35' prior: 50879097!
test17clientHasInitialyNoPurchases

	|aStoreInterface items |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	items := Bag new.
	self assert: #(Bag new, 0) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:33:48' prior: 50879195!
test17clientHasInitialyNoPurchases

	|aStoreInterface items |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	items := Bag new.
	self assert: #(items 0) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !

#(items, itemsTotal)!

{items, itemsTotal}!

{items. itemsTotal}!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 21:36:21' prior: 50879109!
listPurchasesFor: aUserId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |

	items := Bag new.
	itemsTotal := 0.

	salesBook do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^{items. itemsTotal}.
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:36:39' prior: 50879209!
test17clientHasInitialyNoPurchases

	|aStoreInterface |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self assert: {Bag new. 0} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:36:59' prior: 50878962!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2.

	self assert: {items/ itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:37:00'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:37:12' prior: 50879251!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2.

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:37:13'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:37:31'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:40:28' prior: 50879277!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStorePrice quantity: 2.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2.

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:40:29'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:40:43' prior: 50879307!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2.

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:40:44'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:41:47' prior: 50879344!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2.

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:41:48'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:41:57'!
ERROR!
!Sale methodsFor: 'accessing' stamp: 'IO 12/2/2020 21:42:08'!
listItems
	self shouldBeImplemented.! !
!Sale methodsFor: 'accessing' stamp: 'IO 12/2/2020 21:42:20' prior: 50879426!
listItems
	^items copy.! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:42:23'!
ERROR!
!Sale methodsFor: 'initialization' stamp: 'IO 12/2/2020 21:43:21'!
initializeTotal: aTotal withItems: anItemsBag

	total := aTotal.
! !
!Sale methodsFor: 'initialization' stamp: 'IO 12/2/2020 21:43:30' prior: 50879437!
initializeTotal: aTotal withItems: anItemsBag

	total := aTotal.
	items := anItemsBag.
! !
!Cashier methodsFor: 'checkout - private' stamp: 'IO 12/2/2020 21:44:04' prior: 50878419!
createSale

	^Sale of: total.

! !
!Sale class methodsFor: 'instance creation' stamp: 'IO 12/2/2020 21:44:53'!
of: aTotal withItems: aBagOfItems

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal! !

!methodRemoval: Sale class #withProducts:withTotal: stamp: 'IO 12/2/2020 21:44:57'!
withProducts: aBagOfProducts withTotal: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeWithProducts: aBagOfProducts withTotal: aTotal!
!Sale class methodsFor: 'instance creation' stamp: 'IO 12/2/2020 21:45:11' prior: 50879452!
of: aTotal withItems: aBagOfItems

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withItems: aBagOfItems.
! !
!Cashier methodsFor: 'checkout - private' stamp: 'IO 12/2/2020 21:46:14' prior: 50879448!
createSale

	^Sale of: total withItems: cart listItems.

! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:46:22'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:47:52' prior: 50879381!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 2) + (testObjectsFactory anotherItemSellByTheStorePrice * 2).

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:47:53'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:51:28' prior: 50879484!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 4.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 4.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 6.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 6.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 6) + (testObjectsFactory anotherItemSellByTheStorePrice * 6).

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:51:40'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:53:43'!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 4.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 4.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 2) + (testObjectsFactory anotherItemSellByTheStorePrice * 2).

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 4.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 4.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 4) + (testObjectsFactory anotherItemSellByTheStorePrice * 4).

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 21:53:44'!
FAILURE!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'IO 12/2/2020 21:54:39'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts clientsForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/2/2020 21:54:37' prior: 50878608!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.
	clientsForCarts := Dictionary new.

! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/2/2020 21:55:59' prior: 50878720!
createCart
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 21:56:31' prior: 50878666!
createCartFor: aUserId password: aPassword
	"creates a new cart for an user with a password"
	clientDatabase validateUser: aUserId andPassword: aPassword.

	^self createCartFor: aUserId.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/2/2020 21:58:01'!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.
	
	clientsForCarts at: aClientId

	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/2/2020 21:59:04' prior: 50879893!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.
	
	clientsForCarts at: aCartId put: aClientId.

	^aCartId.
! !

!methodRemoval: StoreInterface #createCart stamp: 'IO 12/2/2020 21:59:44'!
createCart
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 21:59:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 21:59:46'!
FAILURE!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/2/2020 22:05:37' prior: 50879858!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := Dictionary new.
	lastActionForCarts := Dictionary new.
	clientsForCarts := Dictionary new.

! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:06:37' prior: 50878647!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total |
	self validateCart: aCartId.
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook
		forClient: (clientsForCarts at: aCartId)) checkOut.

	carts removeKey: aCartId.

	^total
! !
!Cashier methodsFor: 'checkout - private' stamp: 'IO 12/2/2020 22:07:12'!
registerSaleFor: aClientId

	salesBook at: aClientId put: self createSale.! !
!Cashier class methodsFor: 'instance creation' stamp: 'IO 12/2/2020 22:07:59'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook forClient: aClientId
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook forClient: aClientId.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'IO 12/2/2020 22:08:28'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'IO 12/2/2020 22:08:26'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook forClient: aClientId
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	clientId := aClientId.
! !

!methodRemoval: Cashier #registerSaleFor: stamp: 'IO 12/2/2020 22:08:32'!
registerSaleFor: aClientId

	salesBook at: aClientId put: self createSale.!
!Cashier methodsFor: 'checkout - private' stamp: 'IO 12/2/2020 22:08:50' prior: 50878429!
registerSale

	salesBook at: clientId put: self createSale.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:08:51'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:08:51'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:08:51'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:08:51'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:08:51'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:08:57'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:08:57'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:08:57'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:08:57'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:08:57'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:09:29' prior: 50877794!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:09:50' prior: 50880345!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new
		forClient: Dictionary new.

	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:09:52'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:10:34' prior: 50880361!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: Dictionary new
		forClient: testObjectsFactory validClientId.

	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:10:35'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:10:35'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:10:35'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:10:47' prior: 50877832!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: Dictionary new
		forClient: testObjectsFactory validClientId.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:11:15' prior: 50877776!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := Dictionary new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook
			forClient: testObjectsFactory validClientId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:11:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:11:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:11:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:11:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:11:19'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:11:19'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:11:19'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:11:32' prior: 50877810!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:11:52' prior: 50880483!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook
				forClient: testObjectsFactory validClientId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:12:11' prior: 50880421!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		forClient: testObjectsFactory validClientId.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:12:12'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:12:55' prior: 50880526!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		forClient: testObjectsFactory validClientId.
		
	total := cashier checkOut.
					
	self assert: (salesBook at: testObjectsFactory validClientId total) = total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:12:55'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:13:02' prior: 50880548!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		forClient: testObjectsFactory validClientId.
		
	total := cashier checkOut.
					
	self assert: (salesBook at: testObjectsFactory validClientId total) = total.! !
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:13:10' prior: 50880570!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		forClient: testObjectsFactory validClientId.
		
	total := cashier checkOut.
					
	self assert: (salesBook at: (testObjectsFactory validClientId) total) = total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:13:10'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:13:44' prior: 50880589!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		forClient: testObjectsFactory validClientId.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.
! !
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:14:17' prior: 50880611!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		forClient: testObjectsFactory validClientId.
		
	total := cashier checkOut.
					
	self assert: ((salesBook at: testObjectsFactory validClientId) total) = total.
! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:14:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:14:18'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:14:18'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:14:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:14:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:14:18'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:14:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:14:18'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:14:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:14:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:14:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:14:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:14:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:14:32'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:14:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:14:32'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:15:21' prior: 50877850!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		forClient: testObjectsFactory validClientId.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:15:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:15:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:15:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:15:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:15:23'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:15:23'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:15:23'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:15:34' prior: 50877875!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := Dictionary new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:15:59' prior: 50880751!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := Dictionary new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		forClient: testObjectsFactory validClientId.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:16:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:16:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:16:00'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:16:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:16:00'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:16:00'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:16:00'!
PASSED!

!methodRemoval: Cashier class #toCheckout:charging:throught:on:registeringOn: stamp: 'IO 12/2/2020 22:16:11'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook!

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn: stamp: 'IO 12/2/2020 22:16:16'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:16:21'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:16:21'!
FAILURE!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/2/2020 22:26:53' prior: 50880039!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := Dictionary new.
	lastActionForCarts := OrderedCollection new.


! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/2/2020 22:27:03'!
createCart
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
! !

!methodRemoval: StoreInterface #createCartFor: stamp: 'IO 12/2/2020 22:27:06'!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.
	
	clientsForCarts at: aCartId put: aClientId.

	^aCartId.
!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/2/2020 22:27:43' prior: 50880963!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := Dictionary new.
	lastActionForCarts := Dictionary new.


! !
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/2/2020 22:28:10' prior: 50880998!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.


! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:28:20' prior: 50880055!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total |
	self validateCart: aCartId.
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.

	^total
! !
!Cashier methodsFor: 'initialization' stamp: 'IO 12/2/2020 22:28:33'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.

! !
!Cashier class methodsFor: 'instance creation' stamp: 'IO 12/2/2020 22:28:42'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook! !
!Cashier methodsFor: 'checkout - private' stamp: 'IO 12/2/2020 22:29:03' prior: 50880119!
registerSale

	salesBook add: self createSale.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:50' prior: 50880441!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:51' prior: 50880381!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:51' prior: 50880504!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:04' prior: 50880630!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:00' prior: 50880702!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'IO 12/1/2020 20:23:33' prior: 50880777!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:29:49'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:30:12' prior: 50879884!
createCartFor: aUserId password: aPassword
	"creates a new cart for an user with a password"
	clientDatabase validateUser: aUserId andPassword: aPassword.

	^self createCart.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:30:14'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:30:14'!
FAILURE!

!methodRemoval: Cashier class #toCheckout:charging:throught:on:registeringOn:forClient: stamp: 'IO 12/2/2020 22:30:35'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook forClient: aClientId
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook forClient: aClientId.!

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn:forClient: stamp: 'IO 12/2/2020 22:30:38'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook forClient: aClientId
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	clientId := aClientId.
!

Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts clientForCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'IO 12/2/2020 22:31:22'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts clientForCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'private' stamp: 'IO 12/2/2020 22:31:38'!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/2/2020 22:31:55' prior: 50881481!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.
	clientForCart at: aCartId put: aClientId.

	^aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:32:13' prior: 50881314!
createCartFor: aClientId password: aPassword
	"creates a new cart for an user with a password"
	clientDatabase validateUser: aClientId andPassword: aPassword.

	^self createCart for: aClientId.
! !

!methodRemoval: StoreInterface #createCart stamp: 'IO 12/2/2020 22:32:26'!
createCart
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:32:27'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:32:43' prior: 50881503!
createCartFor: aClientId password: aPassword
	"creates a new cart for an user with a password"
	clientDatabase validateUser: aClientId andPassword: aPassword.

	^self createCartFor: aClientId.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:32:44'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:32:44'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:32:44'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:32:44'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:32:44'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:32:44'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:32:47'!
ERROR!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/2/2020 22:33:10' prior: 50881013!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.
	clientForCart := Dictionary new.


! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:33:12'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:33:12'!
FAILURE!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'IO 12/2/2020 22:33:47'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts clientForCart clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:33:45' prior: 50881028!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total |
	self validateCart: aCartId.
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.
	
	clientId := clientForCart at: aCartId.

	^total
! !

Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts clientForCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'IO 12/2/2020 22:33:54'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts clientForCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:34:08' prior: 50881957!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |
	self validateCart: aCartId.
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.
	
	clientId := clientForCart at: aCartId.

	^total
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:35:53' prior: 50881995!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |
	self validateCart: aCartId.
	clientId := clientForCart at: aCartId.
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: clientId)) checkOut.

	carts removeKey: aCartId.
	


	^total
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/2/2020 22:37:23' prior: 50881491!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.
	clientForCart at: aCartId put: aClientId.
	(salesBook keys includes: aClientId) ifFalse: [salesBook at: aClientId put: OrderedCollection new].

	^aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:37:56' prior: 50879224!
listPurchasesFor: aClientId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |

	items := Bag new.
	itemsTotal := 0.

	(salesBook at: aClientId) do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^{items. itemsTotal}.
! !
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/2/2020 22:38:06' prior: 50881817!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := Dictionary new.
	lastActionForCarts := Dictionary new.
	clientForCart := Dictionary new.


! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:38:08'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:38:08'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:38:08'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:38:18'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:38:18'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:38:18'!
FAILURE!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:38:22'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:38:22'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:39:14'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/2/2020 22:41:26' prior: 50878046!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2) for: testObjectsFactory validClientId).! !
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/2/2020 22:41:48'!
hasMadeTheSale: aSale for: aClientId

	^(salesBook at: aClientId) includes: aSale.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:41:50'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:41:50'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:42:43'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:42:43'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:42:55'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:44:10' prior: 50882053!
listPurchasesFor: aClientId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |

	items := Bag new.
	itemsTotal := 0.

	(salesBook at: aClientId ifAbsent: OrderedCollection new) do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^{items. itemsTotal}.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:44:11'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:44:11'!
FAILURE!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:44:16'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:44:16'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 22:45:09' prior: 50879775!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 4.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 4.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 2) + (testObjectsFactory anotherItemSellByTheStorePrice * 2).

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 4.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 4.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 4) + (testObjectsFactory anotherItemSellByTheStorePrice * 4).

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

----SNAPSHOT----(2 December 2020 22:46:32) CuisUniversity-4384.image priorSource: 17470191!

----QUIT----(2 December 2020 22:46:38) CuisUniversity-4384.image priorSource: 17638784!

----STARTUP---- (2 December 2020 23:56:23) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!

!Cart methodsFor: 'copying' stamp: 'IO 12/2/2020 23:58:31' prior: 50878378 overrides: 16881170!
copy

	| cartCopy |
	
	cartCopy := Cart acceptingItemsOf: catalog.
	items do: [ :item | cartCopy add: 1 of: item].
	
	^cartCopy.
! !
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/3/2020 00:01:27' prior: 50882314!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2 withItems: testObjectsFactory itemSellByTheStore) for: testObjectsFactory validClientId).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!methodRemoval: Sale class #of: stamp: 'IO 12/3/2020 00:01:56'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !

!methodRemoval: Sale #initializeTotal: stamp: 'IO 12/3/2020 00:02:01'!
initializeTotal: aTotal

	total := aTotal !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:02:03'!
PASSED!
!Sale methodsFor: 'queries' stamp: 'IO 12/3/2020 00:03:12' prior: 50878562 overrides: 16881029!
= aSale

	^(total = aSale total) and: items = aSale items.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:03:14'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:03:14'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:03:22'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:03:22'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/3/2020 00:04:27' prior: 50882881!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface items |
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2 withItems: items) for: testObjectsFactory validClientId).! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:04:32'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:04:37'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:04:37'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:05:06'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:05:06'!
ERROR!
!Sale methodsFor: 'queries' stamp: 'IO 12/3/2020 00:05:31' prior: 50883138 overrides: 16881029!
= aSale

	^(total = aSale total) and: items = aSale listItems.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:05:34'!
PASSED!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/3/2020 00:07:52' prior: 50882067!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new. "cartId -> Cart"
	salesBook := Dictionary new. "clientId -> Sale[]"
	lastActionForCarts := Dictionary new. "cartId -> DateAndTime"
	clientForCart := Dictionary new. "cartId -> clientId"


! !

!methodRemoval: StoreInterface #hasMadeTheSale: stamp: 'IO 12/3/2020 00:08:11'!
hasMadeTheSale: aSale

	^salesBook includes: aSale.!
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 00:12:20' prior: 50882038!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.
	clientForCart at: aCartId put: aClientId.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

TestSuite subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'IO 12/3/2020 00:14:05'!
TestSuite subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'no messages' stamp: 'IO 12/3/2020 00:14:28'!
test01cannotCreateCreditCardWithoutOwner
	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:17:55' prior: 50883972!
test01cannotCreateCreditCardWithoutOwner
	
	self
		should: [CreditCard newWithCco: nil withCced: DateAndTime now + 1 year withCcn: '5400000000000001']
		raise: Error
		withMessageText: CreditCard invalidCco.! !

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'IO 12/3/2020 00:18:24'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:18:26'!
ERROR!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:18:26'!
ERROR!
!CreditCard class methodsFor: 'error messages' stamp: 'IO 12/3/2020 00:19:06'!
invalidCco
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'IO 12/3/2020 00:19:16' prior: 50884004!
invalidCco
	^'Invalid credit card owner'.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:19:20'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:22:09'!
assertInvalidCardNumberErrorWithNumber: aCCNumber 

    self should: [CreditCard
	withCcn: aCCNumber
	withCced: DateAndTime now + 1 year 
	withCco: 'PEPE SANCHEZ'.]
        raise: Error
        withMessageText: CreditCard invalidCcn.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:23:50'!
test01cannotCreateCreditCardWithInvalidCcn
	
    self assertInvalidCardNumberErrorWithNumber: '00000000000000000'.
    self assertInvalidCardNumberErrorWithNumber: '000000000000000'.! !

!methodRemoval: CreditCardTest #test01cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:23:53'!
test01cannotCreateCreditCardWithoutOwner
	
	self
		should: [CreditCard newWithCco: nil withCced: DateAndTime now + 1 year withCcn: '5400000000000001']
		raise: Error
		withMessageText: CreditCard invalidCco.!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:24:06' prior: 50884027!
test01cannotCreateCreditCardWithInvalidCcn
	
	self assertInvalidCardNumberErrorWithNumber: '00000000000000000'.
	self assertInvalidCardNumberErrorWithNumber: '000000000000000'.
! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:24:06'!
ERROR!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:24:14'!
ERROR!
!CreditCard class methodsFor: 'error messages' stamp: 'IO 12/3/2020 00:24:33'!
invalidCcn
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'IO 12/3/2020 00:24:43' prior: 50884061!
invalidCcn
	^'Invalid credit card number'.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:24:45'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:25:34'!
test01cannotCreateCreditCardWithNotNumericCcn
	
	self assertInvalidCardNumberErrorWithNumber: '0000000000000000A'.
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:25:39'!
test02cannotCreateCreditCardWithNotNumericCcn
	
	self assertInvalidCardNumberErrorWithNumber: '0000000000000000A'.
! !

!methodRemoval: CreditCardTest #test01cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:25:39'!
test01cannotCreateCreditCardWithNotNumericCcn
	
	self assertInvalidCardNumberErrorWithNumber: '0000000000000000A'.
!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:26:01'!
FAILURE!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:26:01'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:26:05'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:26:05'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:26:32' prior: 50884017!
assertInvalidCardNumberErrorWithNumber: aCCNumber 

    self
	should: [CreditCard withCcn: aCCNumber withCced: DateAndTime now + 1 year withCco: 'PEPE SANCHEZ'.]
        raise: Error
        withMessageText: CreditCard invalidCcn.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:26:33'!
FAILURE!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:26:33'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:26:37'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:26:37'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:26:44'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:26:44'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 12/3/2020 00:27:53'!
withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner

	^self basicNew initializeWithCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'IO 12/3/2020 00:28:39'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'IO 12/3/2020 00:28:40'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'IO 12/3/2020 00:28:38'!
initializeWithCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner.

	number := aCCNumber.
	expiration := aCCExpirationDate.
	owner := aCCOwner.
 ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:28:44'!
FAILURE!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:28:44'!
FAILURE!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:28:44'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 12/3/2020 00:29:41' prior: 50884140!
withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner

	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCcn].

	^self basicNew initializeWithCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:29:42'!
FAILURE!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:29:42'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:29:50'!
FAILURE!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:29:50'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:30:05'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:30:32' prior: 50884109!
assertInvalidCardNumberErrorWithNumber: aCCNumber 

    self
	should: [CreditCard withCcn: aCCNumber withCced: DateAndTime now + (1 year) withCco: 'PEPE SANCHEZ'.]
        raise: Error
        withMessageText: CreditCard invalidCcn.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:30:33'!
FAILURE!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:30:33'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:30:45'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:30:55' prior: 50884319!
assertInvalidCardNumberErrorWithNumber: aCCNumber 

    self
	should: [CreditCard withCcn: aCCNumber withCced: DateAndTime now + (1 month) withCco: 'PEPE SANCHEZ'.]
        raise: Error
        withMessageText: CreditCard invalidCcn.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:30:56'!
FAILURE!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:30:56'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:31:02' prior: 50884341!
assertInvalidCardNumberErrorWithNumber: aCCNumber 

    self
	should: [CreditCard withCcn: aCCNumber withCced: DateAndTime now + 1 month withCco: 'PEPE SANCHEZ'.]
        raise: Error
        withMessageText: CreditCard invalidCcn.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:31:40' prior: 50884359!
assertInvalidCardNumberErrorWithNumber: aCCNumber 

    self
	should: [CreditCard withCcn: aCCNumber withCced: DateAndTime now + 31 days withCco: 'PEPE SANCHEZ'.]
        raise: Error
        withMessageText: CreditCard invalidCcn.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:31:40'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:31:40'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:32:17'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:32:17'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:32:51'!
test03cannotCreateCreditCardWithoutOwner
	
	self assertInvalidCardNumberErrorWithNumber: '0000000000000000A'.
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:33:24' prior: 50884394!
test03cannotCreateCreditCardWithoutOwner
    self
	should: [CreditCard withCcn: '540000000001' withCced: DateAndTime now + 31 days withCco: ''.]
        raise: Error
        withMessageText: CreditCard invalidCcn.
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:33:27' prior: 50884401!
test03cannotCreateCreditCardWithoutOwner
    self
	should: [CreditCard withCcn: '540000000001' withCced: DateAndTime now + 31 days withCco: ''.]
        raise: Error
        withMessageText: CreditCard invalidCco.
! !

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:33:28'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 12/3/2020 00:34:21' prior: 50884288!
withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner

	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCcn].
	
	(aCCOwner size > 0) ifFalse: [^self error: CreditCard invalidCco].

	^self basicNew initializeWithCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:34:22'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:34:22'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:34:22'!
FAILURE!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:34:22'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:34:29'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:34:29'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:34:29'!
FAILURE!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:34:29'!
FAILURE!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:34:40'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:35:09' prior: 50884411!
test03cannotCreateCreditCardWithoutOwner
    self
	should: [CreditCard withCcn: '5400000000000001' withCced: DateAndTime now + 31 days withCco: ''.]
        raise: Error
        withMessageText: CreditCard invalidCco.
! !

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:35:10'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:35:10'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:35:10'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:35:10'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'IO 12/3/2020 00:36:29' prior: 50878858!
notExpiredCreditCard
	
	^CreditCard withCcn: '5400000000000001' withCced: (Month month: today monthIndex year: today yearNumber + 1) withCco: 'PEPE SANCHEZ'.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'IO 12/3/2020 00:36:45' prior: 50878851!
expiredCreditCard
	
	^CreditCard withCcn: '5400000000000001' withCced: (Month month: today monthIndex year: today yearNumber - 1) withCco: 'PEPE SANCHEZ'.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:36:50'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:38:32'!
test04storesCcnAndCco

	| creditCard |
	creditCard := CreditCard withCcn: '5400000000000002' withCced: DateAndTime now + 31 days withCco: 'PEPE GOMEZ'.

	self assert: '5400000000000002' equals: creditCard ccn.
	self assert: 'PEPE GOMEZ' equals: creditCard cco.! !

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 00:38:36'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:38:55' prior: 50878526!
ccn
	^number! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:39:06' prior: 50878530!
cco
	^owner.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:39:07'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:39:07'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:39:07'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 00:39:07'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:39:09'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/3/2020 00:42:23'!
test20CannotUseInvalidCreditCard
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	self
		should: [aStoreInterface checkOutCart: aCartId
		ccn: '5041'
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: CreditCard invalidCcn.
			self assert: 0 equals: aStoreInterface numberOfActiveCarts].

	! !

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:42:23'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:42:26'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 00:43:11' prior: 50882016!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |
	self validateCart: aCartId.
	clientId := clientForCart at: aCartId.
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: clientId)) checkOut.

	carts removeKey: aCartId.
	


	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:43:12'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:43:12'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:43:45'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 00:44:54' prior: 50884946!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId creditCard |
	self validateCart: aCartId.
	clientId := clientForCart at: aCartId.
	creditCard := (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner).
	(creditCard isKindOf: Error) ifTrue: [^creditCard].
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: creditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: clientId)) checkOut.

	carts removeKey: aCartId.
	


	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:44:55'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:44:55'!
FAILURE!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:45:04'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:45:04'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 00:45:44' prior: 50885044!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |
	self validateCart: aCartId.
	clientId := clientForCart at: aCartId.

	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: clientId)) checkOut.

	carts removeKey: aCartId.
	


	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:45:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:45:46'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/3/2020 00:46:50' prior: 50884914!
test20CannotUseInvalidCreditCard
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	self
		should: [aStoreInterface checkOutCart: aCartId
		ccn: '5041'
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: CreditCard invalidCcn.
			self assert: 1 equals: aStoreInterface numberOfActiveCarts.
			self assert: {Bag new. 0} equals: (aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
		].

	! !

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:46:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:47:05'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/3/2020 00:50:04' prior: 50879238!
test17clientHasInitialyNoPurchases

	|aStoreInterface |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self assert: (Sale of: 0 withItems: Bag new) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/3/2020 00:50:50' prior: 50879589!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 4.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 4.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 6.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 6.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 6) + (testObjectsFactory anotherItemSellByTheStorePrice * 6).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/3/2020 00:52:20' prior: 50882724!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 4.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 4.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 2) + (testObjectsFactory anotherItemSellByTheStorePrice * 2).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 4.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 4.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 4) + (testObjectsFactory anotherItemSellByTheStorePrice * 4).


	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/3/2020 00:52:22' prior: 50885623!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 4.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 4.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 2) + (testObjectsFactory anotherItemSellByTheStorePrice * 2).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 4.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 4.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 4) + (testObjectsFactory anotherItemSellByTheStorePrice * 4).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:52:23'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/3/2020 00:53:25' prior: 50885554!
test17clientHasInitialyNoPurchases

	|aStoreInterface |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self assert: (testObjectsFactory emptySale) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'IO 12/3/2020 00:53:36'!
emtpySale
	^Sale of: 0 withItems: Bag new! !
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/3/2020 00:54:06' prior: 50885310!
test20CannotUseInvalidCreditCard
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	self
		should: [aStoreInterface checkOutCart: aCartId
		ccn: '5041'
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: CreditCard invalidCcn.
			self assert: 1 equals: aStoreInterface numberOfActiveCarts.
			self assert: testObjectsFactory emtpySale equals: (aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
		].

	! !

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:54:07'!
ERROR!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:54:34'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:54:34'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:54:34'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:54:34'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 00:55:00' prior: 50882570!
listPurchasesFor: aClientId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |

	items := Bag new.
	itemsTotal := 0.

	(salesBook at: aClientId ifAbsent: OrderedCollection new) do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^Sale of: itemsTotal withItems: items.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:55:01'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:55:01'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:55:10'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:55:10'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'sale' stamp: 'IO 12/3/2020 00:55:28'!
emptySale
	^Sale of: 0 withItems: Bag new! !

!methodRemoval: StoreTestObjectsFactory #emtpySale stamp: 'IO 12/3/2020 00:55:31'!
emtpySale
	^Sale of: 0 withItems: Bag new!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/3/2020 00:55:40' prior: 50885787!
test20CannotUseInvalidCreditCard
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	self
		should: [aStoreInterface checkOutCart: aCartId
		ccn: '5041'
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: CreditCard invalidCcn.
			self assert: 1 equals: aStoreInterface numberOfActiveCarts.
			self assert: testObjectsFactory emptySale equals: (aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
		].

	! !

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:55:42'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:55:42'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:57:39'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/3/2020 00:58:12' prior: 50885694!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 4.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 4.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 2) + (testObjectsFactory anotherItemSellByTheStorePrice * 2).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 4.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 4.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 4) + (testObjectsFactory anotherItemSellByTheStorePrice * 4).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword
	)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/3/2020 00:58:20' prior: 50886100!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 4.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 4.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 2) + (testObjectsFactory anotherItemSellByTheStorePrice * 2).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 4.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 4.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 4) + (testObjectsFactory anotherItemSellByTheStorePrice * 4).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!methodRemoval: CreditCard class #expiringOn: stamp: 'IO 12/3/2020 00:59:06'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'IO 12/3/2020 00:59:08'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !

Object subclass: #CartSession
	instanceVariableNames: 'cart lastAction client'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'IO 12/3/2020 01:02:13'!
Object subclass: #CartSession
	instanceVariableNames: 'cart lastAction client'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'IO 12/3/2020 01:03:47'!
Object subclass: #CartSession
	instanceVariableNames: 'cart lastAction client clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'no messages' stamp: 'IO 12/3/2020 01:03:46'!
setLastUsageTime
	
	lastAction = clock now.
! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:05:05'!
validate
	"validates if the cart associated with a cart ID is usable at this moment.
	In the case it is not, the cart is deleted from the list if necessary and an error is returned"

	(clock now - lastAction < 30 minutes) ifFalse: [
		^self error: StoreInterface invalidCartOutOfTime].
! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:06:17'!
add: aQuantity of: anItem
	cart add: aQuantity of: anItem.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:08:42'!
total
	^cart total! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:08:50'!
listItems
	^cart listItems! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 01:11:39' prior: 50883837!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock).

	self setCartUsageTime: aCartId.
	clientForCart at: aCartId put: aClientId.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !
!CartSession class methodsFor: 'no messages' stamp: 'IO 12/3/2020 01:12:18'!
withCart: aCart withClock: aClock
	^self basicNew initializeWithCart: aCart withClock: aClock.! !
!CartSession methodsFor: 'nil' stamp: 'IO 12/3/2020 01:12:39'!
initializeWithCart: aCart withClock: aClock
	cart := aCart.
	clock := aClock.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:12:40'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:12:40'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:12:40'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:12:40'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:13:11'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:13:11'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:13:11'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:13:11'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:13:11'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:13:26' prior: 50885214!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |
	self validateCart: aCartId.
	clientId := clientForCart at: aCartId.

	total := (Cashier
		toCheckout: (carts at: aCartId) cart
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: clientId)) checkOut.

	carts removeKey: aCartId.
	


	^total
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:13:57' prior: 50886723!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |
	self validateCart: aCartId.
	clientId := clientForCart at: aCartId.

	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: clientId)) checkOut.

	carts removeKey: aCartId.
	


	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:13:59'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:13:59'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:13:59'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:13:59'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:14:33'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:15:24'!
isEmtpy
	^cart isEmpty.! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:15:29'!
ERROR!
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 01:16:57' prior: 50886500!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock).

	clientForCart at: aCartId put: aClientId.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:17:52' prior: 50878638!
addToCart: aCartId book: anItem quantity: aQuantity 
	"adds a quantity of an item to the cart associated with a cart ID"
	(carts at: aCartId) add: aQuantity of: anItem
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:18:10' prior: 50878674!
listCart: aCartId
	"lists the contentes of the cart associated to a cart ID"
	^(carts at: aCartId) listItems.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:19:45' prior: 50886487!
add: aQuantity of: anItem
	self beforeOperation.
	cart add: aQuantity of: anItem.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:20:04'!
beforeOperation
	self validate.
	self setLastUsageTime.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:20:31' prior: 50886496!
listItems
	self beforeOperation.
	^cart listItems! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:20:34'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:20:34'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:20:34'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:20:42'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:20:42'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:21:07'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:21:12'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:21:21'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:21:21'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:21:29'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:21:34'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:21:34'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:22:26' prior: 50886521!
initializeWithCart: aCart withClock: aClock
	cart := aCart.
	clock := aClock.
	lastAction := clock now.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:22:29'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:22:29'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:22:29'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:22:29'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:22:29'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:22:29'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:22:29'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:22:29'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:22:29'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:22:29'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:22:29'!
FAILURE!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:22:33'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:22:33'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:23:04'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:23:26'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:23:38' prior: 50886746!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |

	clientId := clientForCart at: aCartId.

	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: clientId)) checkOut.

	carts removeKey: aCartId.
	


	^total
! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:23:49'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:24:35'!
isEmpty
	^cart isEmpty.! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:25:10'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:25:14'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:25:15'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:25:15'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:25:15'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:25:15'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:25:15'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:25:15'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:25:17'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:25:17'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:25:40'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:25:56'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:25:56'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:26:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:26:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:26:46'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:26:46'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:26:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:26:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:26:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:26:48'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:26:48'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:28:01'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:28:01'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:28:01'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:28:01'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:28:01'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:28:01'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:28:01'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:28:06'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:28:06'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:28:23'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:28:27'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:28:33'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:28:33'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:28:49'!
FAILURE!

clock now - lastAction!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:31:00'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:31:00'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:31:00'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:31:00'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:31:00'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:31:00'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:31:00'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:31:05'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:31:05'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:31:49' prior: 50886471!
setLastUsageTime
	
	lastAction := clock now.
! !

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:31:50'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:31:56'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:31:56'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:31:56'!
FAILURE!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:31:56'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:31:56'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:31:56'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:31:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:31:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:32:06'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:32:06'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:32:52'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:32:52'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:34:05'!
FAILURE!
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:36:46'!
isValid
	"validates if the cart associated with a cart ID is usable at this moment.
	In the case it is not, the cart is deleted from the list if necessary and an error is returned"

	^(clock now - lastAction < 30 minutes)
! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:36:55' prior: 50886884!
beforeOperation

	self setLastUsageTime.! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 01:37:49' prior: 50878729!
do: anOperation onCart: aCartId
	"this method validates that we operate on a valid cart, then it sets the time of operation as the last known use of the cart and executes the operation"
	(carts at: aCartId) isValid ifFalse: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime].

	^anOperation value.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:37:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:37:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:37:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:37:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:37:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:37:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:37:59'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:38:27' prior: 50886862!
addToCart: aCartId book: anItem quantity: aQuantity 
	"adds a quantity of an item to the cart associated with a cart ID"
	self do:[(carts at: aCartId) add: aQuantity of: anItem] onCart: aCartId.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:38:51' prior: 50886871!
listCart: aCartId
	"lists the contentes of the cart associated to a cart ID"
	^self do: [(carts at: aCartId) listItems] onCart: aCartId.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:38:53'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:38:53'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:38:53'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:38:53'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:38:53'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:39:04' prior: 50887197!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |

	clientId := clientForCart at: aCartId.

	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: clientId)) checkOut.

	carts removeKey: aCartId.

	^total
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:39:44' prior: 50888200!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |

	self do: [
		clientId := clientForCart at: aCartId.

		total := (Cashier
			toCheckout: (carts at: aCartId)
			charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
			throught: merchantProccessor
			on: DateAndTime now
			registeringOn: (salesBook at: clientId)) checkOut.
	] onCart: aCartId.

	carts removeKey: aCartId.

	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:39:45'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:39:45'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:39:45'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:40:13'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:40:13'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:40:13'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:40:16'!
FAILURE!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:40:16'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:40:53' prior: 50888056!
addToCart: aCartId book: anItem quantity: aQuantity 
	"adds a quantity of an item to the cart associated with a cart ID"
	self do:[
		(carts at: aCartId ifAbsent: [^self error: StoreInterface invalidCartId]) add: aQuantity of: anItem] onCart: aCartId.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:40:54'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:40:54'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:40:54'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:40:54'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:41:08' prior: 50888448!
addToCart: aCartId book: anItem quantity: aQuantity 
	"adds a quantity of an item to the cart associated with a cart ID"
	self do:[
		(carts at: aCartId) add: aQuantity of: anItem] onCart: aCartId.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:41:09'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:41:09'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:41:09'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:41:11'!
FAILURE!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:41:11'!
FAILURE!
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 01:41:32' prior: 50887973!
do: anOperation onCart: aCartId
	"this method validates that we operate on a valid cart, then it sets the time of operation as the last known use of the cart and executes the operation"
	(carts at: aCartId ifAbsent: [^self error: StoreInterface invalidCartId]) isValid ifFalse: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime].

	^anOperation value.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

----SNAPSHOT----(3 December 2020 01:51:35) CuisUniversity-4384.image priorSource: 17638877!

----QUIT----(3 December 2020 01:51:37) CuisUniversity-4384.image priorSource: 17831410!

----STARTUP---- (3 December 2020 10:30:24) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!


!classRemoval: #StoreTestObjectsFactory stamp: 'LH 12/3/2020 10:30:51'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterface stamp: 'LH 12/3/2020 10:30:52'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'LH 12/3/2020 10:30:52'!
Object subclass: #Sale
	instanceVariableNames: 'total products items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'LH 12/3/2020 10:30:52'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'LH 12/3/2020 10:30:53'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'LH 12/3/2020 10:30:53'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterfaceTest stamp: 'LH 12/3/2020 10:30:54'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clock clientsBook timeLeap'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'LH 12/3/2020 10:30:54'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'LH 12/3/2020 10:30:55'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\TusLibros-3.st----!

!methodRemoval: CartSession #isEmtpy stamp: 'LH 12/3/2020 10:33:26'!
isEmtpy
	^cart isEmpty.!

!methodRemoval: CartSession #validate stamp: 'LH 12/3/2020 10:33:57'!
validate
	"validates if the cart associated with a cart ID is usable at this moment.
	In the case it is not, the cart is deleted from the list if necessary and an error is returned"

	(clock now - lastAction < 30 minutes) ifFalse: [
		^self error: StoreInterface invalidCartOutOfTime].
!
!CartSession methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 10:34:29' prior: 50890557!
listItems
	self setLastUsageTime.
	^cart listItems! !
!CartSession methodsFor: 'adding' stamp: 'LH 12/3/2020 10:34:44' prior: 50890523!
add: aQuantity of: anItem
	self setLastUsageTime .
	cart add: aQuantity of: anItem.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 10:34:51'!
PASSED!
!CartSession methodsFor: 'adding' stamp: 'LH 12/3/2020 10:35:59'!
add: anItem
	"adds 1 of an item to this session's cart"
	self add: 1 of: anItem.! !

!methodRemoval: CartSession #beforeOperation stamp: 'LH 12/3/2020 10:36:07'!
beforeOperation

	self setLastUsageTime.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 10:38:28'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'LH 12/3/2020 10:38:44' prior: 50889589!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/3/2020 10:39:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/3/2020 10:39:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/3/2020 10:39:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/3/2020 10:39:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/3/2020 10:39:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/3/2020 10:39:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/3/2020 10:39:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/3/2020 10:39:03'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/3/2020 10:46:25' prior: 50890901!
listPurchasesFor: aClientId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |

	items := Bag new.
	itemsTotal := 0.

	(salesBook at: aClientId ifAbsent: OrderedCollection new) do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^Sale of: itemsTotal withItems: items.! !
!StoreInterface methodsFor: 'cart invalidation' stamp: 'LH 12/3/2020 10:51:21' prior: 50890925!
validateCart: aCartId
	"validates if the cart associated with a cart ID is usable at this moment.
	In the case it is not, the cart is deleted from the list if necessary and an error is returned"
	
	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	(carts at: aCartId) isValid ifFalse: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 10:51:24'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 10:51:24'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 10:51:24'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 10:51:24'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 10:51:24'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 10:51:24'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 10:51:24'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!methodRemoval: StoreInterface #setCartUsageTime: stamp: 'LH 12/3/2020 10:51:42'!
setCartUsageTime: aCartId
	"registers the current Date and Time as the last usage of the cart associated with a cart ID"
	lastActionForCarts add: (Association key: aCartId value: clock now).
!
!StoreInterface methodsFor: 'private' stamp: 'LH 12/3/2020 10:53:07' prior: 50890954!
do: anOperation onCart: aCartId
	"this method validates that we operate on a valid cart, then it sets the time of operation as the last known use of the cart and executes the operation"
	self validateCart: aCartId.

	^anOperation value.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 10:53:09'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 10:53:09'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 10:53:09'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 10:53:09'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 10:53:09'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 10:53:09'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 10:53:09'!
PASSED!
!StoreInterface methodsFor: 'private' stamp: 'LH 12/3/2020 10:53:18' prior: 50891585!
do: anOperation onCart: aCartId
	"this method validates that we operate on a valid cart, then it sets the time of operation as the last known use of the cart and executes the operation"
	
	self validateCart: aCartId.
	^anOperation value.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 10:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 10:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 10:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 10:53:20'!
PASSED!
!StoreInterface methodsFor: 'private' stamp: 'LH 12/3/2020 10:54:09' prior: 50890941!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys last + 1.
	carts at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock).

	clientForCart at: aCartId put: aClientId.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 10:54:11'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 10:54:11'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 10:54:11'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 10:54:11'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 10:54:11'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 10:54:11'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 10:54:17'!
ERROR!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 12/3/2020 11:00:24'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts clientForCart smallestAvailableCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'private' stamp: 'LH 12/3/2020 11:00:22' prior: 50891745!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := smallestAvailableCartId.
	smallestAvailableCartId := aCartId + 1.
	carts at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock).

	clientForCart at: aCartId put: aClientId.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !
!StoreInterface methodsFor: 'initialization' stamp: 'LH 12/3/2020 11:00:37' prior: 50890818!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new. "cartId -> Cart"
	salesBook := Dictionary new. "clientId -> Sale[]"
	lastActionForCarts := Dictionary new. "cartId -> DateAndTime"
	clientForCart := Dictionary new. "cartId -> clientId"
	smallestAvailableCartId := 0.


! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 11:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 11:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 11:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 11:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 11:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 11:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 11:00:47'!
PASSED!
!StoreInterface methodsFor: 'initialization' stamp: 'LH 12/3/2020 11:04:11' prior: 50891856!
initializeWithCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalogue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new. "cartId -> CartSession"
	salesBook := Dictionary new. "clientId -> Sale[]"
	clientForCart := Dictionary new. "cartId -> clientId"
	smallestAvailableCartId := 0.


! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 11:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 11:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 11:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 11:04:16'!
PASSED!
!CartSession methodsFor: 'accesing' stamp: 'LH 12/3/2020 11:04:32'!
client

	^client copy.! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/3/2020 11:07:58' prior: 50890862!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total |

	self do: [ |aCartSession clientId|
		aCartSession := carts at: aCartId.
		clientId := aCartSession client.

		total := (Cashier
			toCheckout: aCartSession
			charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
			throught: merchantProccessor
			on: DateAndTime now
			registeringOn: (salesBook at: clientId)) checkOut.
	] onCart: aCartId.

	carts removeKey: aCartId.

	^total
! !
!CartSession class methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:23:25'!
withCart: aCart withClock: aClock andClient: aClientId 
	^self basicNew initializeWithCart: aCart withClock: aClock.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:23:25' prior: 50891841!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := smallestAvailableCartId.
	smallestAvailableCartId := aCartId + 1.
	carts at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).

	clientForCart at: aCartId put: aClientId.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !

!methodRemoval: CartSession class #withCart:withClock: stamp: 'LH 12/3/2020 11:23:25'!
withCart: aCart withClock: aClock
	^self basicNew initializeWithCart: aCart withClock: aClock.!
!CartSession methodsFor: 'initialization' stamp: 'LH 12/3/2020 11:24:22'!
initializeWithCart: aCart withClock: aClock andClientId: aClientId 
	cart := aCart.
	clock := aClock.
	lastAction := clock now.! !
!CartSession class methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:24:22' prior: 50892058!
withCart: aCart withClock: aClock andClient: aClientId 
	^self basicNew initializeWithCart: aCart withClock: aClock andClientId: aClientId.! !

!methodRemoval: CartSession #initializeWithCart:withClock: stamp: 'LH 12/3/2020 11:24:22'!
initializeWithCart: aCart withClock: aClock
	cart := aCart.
	clock := aClock.
	lastAction := clock now.!
!CartSession methodsFor: 'initialization' stamp: 'LH 12/3/2020 11:24:41' prior: 50892086!
initializeWithCart: aCart withClock: aClock andClientId: aClientId 
	cart := aCart.
	clock := aClock.
	client := aClientId.
	lastAction := clock now.! !
!StoreInterface methodsFor: 'private' stamp: 'LH 12/3/2020 11:25:02' prior: 50892065!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := smallestAvailableCartId.
	smallestAvailableCartId := aCartId + 1.
	carts at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).

	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !
!StoreInterface methodsFor: 'initialization' stamp: 'LH 12/3/2020 11:25:10' prior: 50891944!
initializeWithCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalogue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new. "cartId -> CartSession"
	salesBook := Dictionary new. "clientId -> Sale[]"
	smallestAvailableCartId := 0.


! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 11:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 11:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 11:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 11:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 11:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 11:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 11:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts smallestAvailableCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 12/3/2020 11:25:22'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts smallestAvailableCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'private' stamp: 'LH 12/3/2020 11:27:10' prior: 50892116!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := smallestAvailableCartId.
	carts at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).
	smallestAvailableCartId := aCartId + 1.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 12/3/2020 11:28:40'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cartsSessions salesBook clientDatabase merchantProccessor clock lastActionForCarts smallestAvailableCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:28:40' prior: 50892131!
initializeWithCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalogue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	cartsSessions := Dictionary new. "cartId -> CartSession"
	salesBook := Dictionary new. "clientId -> Sale[]"
	smallestAvailableCartId := 0.


! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:28:40' prior: 50890841!
isActiveCart: aCartID 
	"awnsers if there is a usable cart associated with a cart ID"
	^cartsSessions includesKey: aCartID.
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:28:40' prior: 50891492!
validateCart: aCartId
	"validates if the cart associated with a cart ID is usable at this moment.
	In the case it is not, the cart is deleted from the list if necessary and an error is returned"
	
	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	(cartsSessions at: aCartId) isValid ifFalse: [
		cartsSessions removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:28:40' prior: 50890847!
numberOfActiveCarts
	"awnsers the number of carts that exist in the store"
	^cartsSessions size.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:28:40' prior: 50892034!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total |

	self do: [ |aCartSession clientId|
		aCartSession := cartsSessions at: aCartId.
		clientId := aCartSession client.

		total := (Cashier
			toCheckout: aCartSession
			charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
			throught: merchantProccessor
			on: DateAndTime now
			registeringOn: (salesBook at: clientId)) checkOut.
	] onCart: aCartId.

	cartsSessions removeKey: aCartId.

	^total
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:28:40' prior: 50890894!
listCart: aCartId
	"lists the contentes of the cart associated to a cart ID"
	^self do: [(cartsSessions at: aCartId) listItems] onCart: aCartId.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:28:40' prior: 50892233!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := smallestAvailableCartId.
	cartsSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).
	smallestAvailableCartId := aCartId + 1.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:28:40' prior: 50890853!
addToCart: aCartId book: anItem quantity: aQuantity 
	"adds a quantity of an item to the cart associated with a cart ID"
	self do:[
		(cartsSessions at: aCartId) add: aQuantity of: anItem] onCart: aCartId.! !

!methodRemoval: CartSession #add: stamp: 'LH 12/3/2020 11:34:44'!
add: anItem
	"adds 1 of an item to this session's cart"
	self add: 1 of: anItem.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 12/3/2020 11:40:26'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cartsSessions salesBook clientDatabase merchantProccessor clock lastActionForCarts availableCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:40:26' prior: 50892258!
initializeWithCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalogue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	cartsSessions := Dictionary new. "cartId -> CartSession"
	salesBook := Dictionary new. "clientId -> Sale[]"
	availableCartId := 0.


! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:40:26' prior: 50892339!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := availableCartId.
	cartsSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).
	availableCartId := aCartId + 1.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 12/3/2020 11:41:01'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cartsSessions salesBook clientDatabase merchantProccessor clock lastActionForCarts nextCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:41:01' prior: 50892506!
initializeWithCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalogue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	cartsSessions := Dictionary new. "cartId -> CartSession"
	salesBook := Dictionary new. "clientId -> Sale[]"
	nextCartId := 0.


! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:41:01' prior: 50892522!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := nextCartId.
	cartsSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).
	nextCartId := aCartId + 1.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/3/2020 11:48:13' prior: 50892354!
addToCart: aCartId book: anItem quantity: aQuantity 
	"adds a quantity of an item to the cart associated with a cart ID"
	
	self validateCart: aCartId.

	(cartsSessions at: aCartId) add: aQuantity of: anItem! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 11:48:16'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/3/2020 11:49:53' prior: 50892306!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total aCartSession |
	
	self validateCart: aCartId.
	
	aCartSession := cartsSessions at: aCartId.

	total := (Cashier
		toCheckout: aCartSession
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: aCartSession client)) checkOut.

	cartsSessions removeKey: aCartId.

	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 11:49:55'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/3/2020 11:50:40' prior: 50892331!
listCart: aCartId
	"lists the contentes of the cart associated to a cart ID"
	
	self validateCart: aCartId.
	^(cartsSessions at: aCartId) listItems.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 11:50:41'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 11:50:41'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 11:50:41'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 11:50:41'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 11:50:41'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!methodRemoval: StoreInterface #do:onCart: stamp: 'LH 12/3/2020 11:51:40'!
do: anOperation onCart: aCartId
	"this method validates that we operate on a valid cart, then it sets the time of operation as the last known use of the cart and executes the operation"
	
	self validateCart: aCartId.
	^anOperation value.
!

----SNAPSHOT----(3 December 2020 11:53:12) CuisUniversity-4384.image priorSource: 17851282!

Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cartsSessions salesBook clientDatabase merchantProccessor clock nextCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 12/3/2020 11:54:07'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cartsSessions salesBook clientDatabase merchantProccessor clock nextCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'LH 12/3/2020 11:54:45'!
Object subclass: #CartSession
	instanceVariableNames: 'cart lastAction clientID clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:54:45' prior: 50892108!
initializeWithCart: aCart withClock: aClock andClientId: aClientId 
	cart := aCart.
	clock := aClock.
	clientID := aClientId.
	lastAction := clock now.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:54:45' prior: 50892030!
client

	^clientID copy.! !

!classDefinition: #CartSession category: 'TusLibros' stamp: 'LH 12/3/2020 11:54:55'!
Object subclass: #CartSession
	instanceVariableNames: 'cart lastAction clientId clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:54:55' prior: 50892863!
initializeWithCart: aCart withClock: aClock andClientId: aClientId 
	cart := aCart.
	clock := aClock.
	clientId := aClientId.
	lastAction := clock now.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:54:55' prior: 50892871!
client

	^clientId copy.! !
!CartSession methodsFor: 'accesing' stamp: 'LH 12/3/2020 11:55:09'!
clientId

	^clientId copy.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:55:09' prior: 50892656!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total aCartSession |
	
	self validateCart: aCartId.
	
	aCartSession := cartsSessions at: aCartId.

	total := (Cashier
		toCheckout: aCartSession
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: aCartSession clientId)) checkOut.

	cartsSessions removeKey: aCartId.

	^total
! !

!methodRemoval: CartSession #client stamp: 'LH 12/3/2020 11:55:09'!
client

	^clientId copy.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard totals'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'LH 12/3/2020 11:57:41'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard totals'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LH 12/3/2020 11:57:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LH 12/3/2020 11:57:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LH 12/3/2020 11:57:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LH 12/3/2020 11:57:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LH 12/3/2020 11:57:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LH 12/3/2020 11:57:44'!
PASSED!

Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'LH 12/3/2020 12:00:01'!
Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'LH 12/3/2020 12:12:04' prior: 50890013!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface items aClientId aClientPassword |
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aClientId := testObjectsFactory validClientId.
	aClientPassword := testObjectsFactory validClientPassword.
	aCartID := aStoreInterface createCartFor: aClientId password: aClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	aStoreInterface checkOutCart: aCartID
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	
	self  assert: (Sale of: testObjectsFactory itemSellByTheStorePrice *2 withItems: items)
		equals: (aStoreInterface listPurchasesFor: aClientId password: aClientPassword).! !
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'LH 12/3/2020 12:12:38' prior: 50893096!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface items aClientId aClientPassword |
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aClientId := testObjectsFactory validClientId.
	aClientPassword := testObjectsFactory validClientPassword.
	aCartID := aStoreInterface createCartFor: aClientId password: aClientPassword.
	
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: aCartID
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	
	self  assert: (Sale of: testObjectsFactory itemSellByTheStorePrice *2 withItems: items)
		equals: (aStoreInterface listPurchasesFor: aClientId password: aClientPassword).! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!methodRemoval: StoreInterface #hasMadeTheSale:for: stamp: 'LH 12/3/2020 12:13:28'!
hasMadeTheSale: aSale for: aClientId

	^(salesBook at: aClientId) includes: aSale.!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'LH 12/3/2020 12:14:13'!
test05AStoreCanAddItemsToCarts
	| aCartId1 aCartId2 aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aCartId2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	aStoreInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((aStoreInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !

!methodRemoval: StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 12:14:13'!
test05AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aCartId2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	aStoreInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((aStoreInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:16:39' prior: 50890042!
test07CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface anItem|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aStoreInterface addToCart: aCartID book: anItem quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: anItem withOccurrences: 2.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: anItem).! !
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:16:43' prior: 50893298!
test07CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface anItem|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	
	aStoreInterface addToCart: aCartID book: anItem quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: anItem withOccurrences: 2.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: anItem).! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 12:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 12:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 12:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 12:16:46'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:23:34' prior: 50890149!
test20CannotUseInvalidCreditCard
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	self should: [
			aStoreInterface checkOutCart: aCartId
						 ccn: '5041'
						 cced: testObjectsFactory notExpiredCreditCard cced
						 cco: testObjectsFactory notExpiredCreditCard cco.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: CreditCard invalidCcn.
			self assert: 1 equals: aStoreInterface numberOfActiveCarts.
			self assert: testObjectsFactory emptySale equals: (
				aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)].

	! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 12:23:37'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:25:48' prior: 50893411!
test20CannotUseInvalidCreditCard
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	self should: [aStoreInterface 
				checkOutCart: aCartId
				ccn: '5041'
				cced: testObjectsFactory notExpiredCreditCard cced
				cco: testObjectsFactory notExpiredCreditCard cco.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: CreditCard invalidCcn.
			self assert: 1 equals: aStoreInterface numberOfActiveCarts.
			self 
				assert: testObjectsFactory emptySale 
				equals: (aStoreInterface 
						listPurchasesFor: testObjectsFactory 
						validClientId password: testObjectsFactory validClientPassword)].

	! !
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:26:07' prior: 50890121!
test16CannotOperateAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	aStoreInterface 
		checkOutCart: aCartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: StoreInterface invalidCartId.
			self assert: 0 equals: aStoreInterface numberOfActiveCarts].

	! !
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:29:08'!
assertThatDoing: aClosure onANewStoreInterfaceShouldRasieErrorWithText: errorText
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aClosure value: aStoreInterface]
		raise: Error
		withMessageText: errorText.

	! !
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:30:16' prior: 50890065!
test08CannotCreateCartWithInvalidClientId
	
	self 
		assertThatDoing: [:aStoreInterface | aStoreInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		onANewStoreInterfaceShouldRasieErrorWithText: StoreInterface invalidClientId.
	

	

	! !

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 12:30:18'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:31:06' prior: 50890097!
test14CannotAddOnNotExistentCart
	
	self
		assertThatDoing: [:aStoreInterface | aStoreInterface addToCart: 1 book: testObjectsFactory itemSellByTheStore quantity: 1]
		onANewStoreInterfaceShouldRasieErrorWithText: StoreInterface invalidCartId

	! !
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:31:44' prior: 50890110!
test15CannotListNotExistentCart
	
	self
		assertThatDoing: [:aStoreInterface | aStoreInterface listCart: 1]
		onANewStoreInterfaceShouldRasieErrorWithText: StoreInterface invalidCartId

	! !

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 12:31:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 12:31:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 12:31:45'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 12:31:45'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 12:31:45'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 12:31:45'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 12:31:45'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'LH 12/3/2020 12:36:58'!
puchaseWithCart: aCartId inTheStore: aStoreInterface forQuantityOfBooks: aQuantity

	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: aQuantity.
	aStoreInterface addToCart: aCartId book: testObjectsFactory anotherItemSellByTheStore quantity: aQuantity.
	aStoreInterface checkOutCart: aCartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'LH 12/3/2020 12:38:12' prior: 50890294!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.

	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 6.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 6.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 6) + (testObjectsFactory anotherItemSellByTheStorePrice * 6).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:38:14'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'LH 12/3/2020 12:39:37' prior: 50890349!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.
	
	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 2) + (testObjectsFactory anotherItemSellByTheStorePrice * 2).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 4.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 4.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 4) + (testObjectsFactory anotherItemSellByTheStorePrice * 4).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 12:39:38'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'sale' stamp: 'LH 12/3/2020 12:41:14'!
aSaleWithDiferentItemsInQuantity: aQuantity

	|items itemsTotal|
	items := Bag new.
	items add: self itemSellByTheStore withOccurrences: aQuantity.
	items add: self anotherItemSellByTheStore withOccurrences: aQuantity.
	itemsTotal := (self itemSellByTheStorePrice * aQuantity) + (self anotherItemSellByTheStorePrice * aQuantity).! !
!StoreTestObjectsFactory methodsFor: 'sale' stamp: 'LH 12/3/2020 12:41:45' prior: 50893760!
aSaleWithDiferentItemsInQuantity: aQuantity

	|items itemsTotal|
	items := Bag new.
	items add: self itemSellByTheStore withOccurrences: aQuantity.
	items add: self anotherItemSellByTheStore withOccurrences: aQuantity.
	itemsTotal := (self itemSellByTheStorePrice * aQuantity) + (self anotherItemSellByTheStorePrice * aQuantity).
	
	^Sale of: itemsTotal withItems: items.! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'LH 12/3/2020 12:42:57' prior: 50893665!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface aSale cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.

	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 6.

	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:43:00'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'LH 12/3/2020 12:44:06' prior: 50893705!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface aSale cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.
	
	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 2.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 4.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 12:44:07'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

----SNAPSHOT----(3 December 2020 12:45:26) CuisUniversity-4384.image priorSource: 17957904!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'LH 12/3/2020 12:47:21' prior: 50893789!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface aSale cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 2.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).

	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 6.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 12:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 12:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 12:47:25'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'LH 12/3/2020 12:47:34' prior: 50893932!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface aSale cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 2.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).


	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 6.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).
! !

----SNAPSHOT----(3 December 2020 12:51:21) CuisUniversity-4384.image priorSource: 17992891!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'LH 12/3/2020 12:59:54'!
test18clientAfterCheckoutHasPurchasedItems

	| aStoreInterface aSale cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 2.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).


	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 6.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).
! !

!methodRemoval: StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:59:54'!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface aSale cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 2.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).


	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 6.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).
!

----QUIT----(3 December 2020 13:01:36) CuisUniversity-4384.image priorSource: 17997519!

----STARTUP---- (3 December 2020 13:56:19) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!


!classRemoval: #StoreTestObjectsFactory stamp: 'IO 12/3/2020 13:56:31'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterface stamp: 'IO 12/3/2020 13:56:32'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts clientForCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'IO 12/3/2020 13:56:32'!
Object subclass: #Sale
	instanceVariableNames: 'total products items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'IO 12/3/2020 13:56:32'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'IO 12/3/2020 13:56:32'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartSession stamp: 'IO 12/3/2020 13:56:33'!
Object subclass: #CartSession
	instanceVariableNames: 'cart lastAction client clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'IO 12/3/2020 13:56:33'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterfaceTest stamp: 'IO 12/3/2020 13:56:33'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clock clientsBook timeLeap'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'IO 12/3/2020 13:56:33'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'IO 12/3/2020 13:56:34'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'IO 12/3/2020 13:56:34'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /Users/ilanolkies/uba/ingsoft1/ingeSoft-2020-2c/20-TusLibros-3/TusLibros-3.st----!
!Sale methodsFor: 'initialization' stamp: 'IO 12/3/2020 13:58:17'!
addTotal: aTotal withItems: anItemsBag

	total := aTotal.
	items := anItemsBag.
! !

!methodRemoval: Sale #addTotal:withItems: stamp: 'IO 12/3/2020 13:58:38'!
addTotal: aTotal withItems: anItemsBag

	total := aTotal.
	items := anItemsBag.
!

Sale subclass: #CumulativeSales
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CumulativeSales category: 'TusLibros' stamp: 'IO 12/3/2020 13:59:12'!
Sale subclass: #CumulativeSales
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CumulativeSales methodsFor: 'no messages' stamp: 'IO 12/3/2020 13:59:57' overrides: 16896425!
initialize
	self initializeTotal: 0 withItems: Bag new.! !
!CumulativeSales methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:00:20'!
addTotal: aTotal withItems: anItemsBag

	total := total + aTotal.
	items addAll: anItemsBag.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 14:00:41' prior: 50890257!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	| aCartId |

	aCartId := nextCartId.

	cartsSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).
	nextCartId := aCartId + 1.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 14:00:46' prior: 50890513!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	| aCartId |

	aCartId := nextCartId.

	cartsSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).

	nextCartId := aCartId + 1.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 14:00:50' prior: 50890527!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	| aCartId |

	aCartId := nextCartId.

	cartsSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).
		
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	nextCartId := aCartId + 1.
	

	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 14:00:54' prior: 50890541!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	| aCartId |

	aCartId := nextCartId.

	cartsSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).

	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	nextCartId := aCartId + 1.
	

	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 14:01:33' prior: 50890555!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	| aCartId |

	aCartId := nextCartId.

	cartsSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).

	salesBook at: aClientId ifAbsentPut: CumulativeSales new.

	nextCartId := aCartId + 1.
	

	^aCartId.
! !
!CumulativeSales methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:02:02'!
add: aSale

	total := total + aSale total.
	items addAll: aSale listItems.
! !

!methodRemoval: CumulativeSales #addTotal:withItems: stamp: 'IO 12/3/2020 14:02:04'!
addTotal: aTotal withItems: anItemsBag

	total := total + aTotal.
	items addAll: anItemsBag.
!

!classRenamed: #CumulativeSales as: #SalesBook stamp: 'IO 12/3/2020 14:03:10'!
Smalltalk renameClassNamed: #CumulativeSales as: #SalesBook!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:03:11' prior: 50890569!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	| aCartId |

	aCartId := nextCartId.

	cartsSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).

	salesBook at: aClientId ifAbsentPut: SalesBook new.

	nextCartId := aCartId + 1.
	

	^aCartId.
! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'IO 12/3/2020 14:03:26'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cartsSessions salesBooks clientDatabase merchantProccessor clock nextCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:03:26' prior: 50890242!
listPurchasesFor: aClientId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |

	items := Bag new.
	itemsTotal := 0.

	(salesBooks at: aClientId ifAbsent: OrderedCollection new) do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^Sale of: itemsTotal withItems: items.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:03:26' prior: 50890203!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total aCartSession |
	
	self validateCart: aCartId.
	
	aCartSession := cartsSessions at: aCartId.

	total := (Cashier
		toCheckout: aCartSession
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBooks at: aCartSession clientId)) checkOut.

	cartsSessions removeKey: aCartId.

	^total
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:03:26' prior: 50890166!
initializeWithCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalogue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	cartsSessions := Dictionary new. "cartId -> CartSession"
	salesBooks := Dictionary new. "clientId -> Sale[]"
	nextCartId := 0.


! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:03:26' prior: 50890599!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	| aCartId |

	aCartId := nextCartId.

	cartsSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).

	salesBooks at: aClientId ifAbsentPut: SalesBook new.

	nextCartId := aCartId + 1.
	

	^aCartId.
! !

Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cartsSessions salesBooks clientDatabase merchantProccessor clock nextCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'IO 12/3/2020 14:03:35'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cartsSessions salesBooks clientDatabase merchantProccessor clock nextCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 14:04:41' prior: 50890623!
listPurchasesFor: aClientId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |

	items := Bag new.
	itemsTotal := 0.

	^salesBooks at: aClientId ifAbsent: SalesBook new.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 14:04:50' prior: 50890708!
listPurchasesFor: aClientId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 

	^salesBooks at: aClientId ifAbsent: SalesBook new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:04:52'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:04:52'!
PASSED!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/3/2020 14:07:05' prior: 50890662!
initializeWithCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock
	
	catalogue := aCatalogue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	cartsSessions := Dictionary new. "cartId -> CartSession"
	salesBooks := Dictionary new. "clientId -> Sale[]"
	nextCartId := 0.


! !
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/3/2020 14:07:50' prior: 50890855!
initializeWithCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock
	
	catalogue := aCatalogue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	cartsSessions := Dictionary new. "stores the cart session for each cart id"
	salesBooks := Dictionary new. "stores the sales book for each client id"
	nextCartId := 0.


! !

Object subclass: #SalesBook
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #SalesBook category: 'TusLibros' stamp: 'IO 12/3/2020 14:21:46'!
Object subclass: #SalesBook
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:22:01'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:22:01'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:22:01'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:22:01'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:22:01'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:22:01'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:22:01'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:22:01'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:22:01'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:22:01'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:22:01'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:22:01'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:22:01'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:22:01'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:22:01'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:22:01'!
ERROR!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:22:05'!
ERROR!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:22:05'!
ERROR!
!SalesBook methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:22:27' prior: 50890502 overrides: 16896425!
initialize
	total := 0.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:22:29'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:22:29'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:22:29'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:22:29'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:22:29'!
ERROR!
!SalesBook methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:22:33' prior: 50891033 overrides: 16896425!
initialize
	total := 0.
	items := Bag new.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:22:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:22:38'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:22:38'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:22:38'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:22:38'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:22:38'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:22:38'!
ERROR!
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 14:23:37' prior: 50890678!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	| aCartId |

	aCartId := nextCartId.

	cartsSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).

	nextCartId := aCartId + 1.
	

	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 14:03:26' prior: 50891296!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	| aCartId |

	aCartId := nextCartId.

	cartsSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).

	salesBooks at: aClientId ifAbsentPut: SalesBook new.

	nextCartId := aCartId + 1.
	

	^aCartId.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:24:23'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:24:23'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:24:23'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:24:23'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:24:23'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:24:23'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:24:31'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:24:31'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:24:31'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:24:31'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:24:31'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:24:31'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:24:31'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:24:31'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:24:31'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:24:31'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:24:31'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:24:31'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:24:31'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:24:31'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:24:31'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:24:31'!
ERROR!
!SalesBook methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:26:23'!
listItems
	^items copy.! !
!SalesBook methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:26:30'!
total

	^ total! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:26:33'!
PASSED!

Object subclass: #Items
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Items category: 'TusLibros' stamp: 'IO 12/3/2020 14:26:49'!
Object subclass: #Items
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Items subclass: #Sale
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'IO 12/3/2020 14:26:57'!
Items subclass: #Sale
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Items subclass: #SalesBook
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #SalesBook category: 'TusLibros' stamp: 'IO 12/3/2020 14:27:03'!
Items subclass: #SalesBook
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Items methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:27:09'!
listItems
	^items copy.! !

!methodRemoval: SalesBook #listItems stamp: 'IO 12/3/2020 14:27:09'!
listItems
	^items copy.!
!Items methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:27:15'!
total

	^ total! !

!methodRemoval: SalesBook #total stamp: 'IO 12/3/2020 14:27:15'!
total

	^ total!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:27:16'!
PASSED!

!methodRemoval: Sale #listItems stamp: 'IO 12/3/2020 14:27:21'!
listItems
	^items copy.!

!methodRemoval: Sale #total stamp: 'IO 12/3/2020 14:27:24'!
total

	^ total!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:27:25'!
PASSED!

!methodRemoval: Sale #= stamp: 'IO 12/3/2020 14:29:53'!
= aSale

	^(total = aSale total) and: items = aSale listItems.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:29:55'!
FAILURE!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:29:55'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:29:55'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:29:55'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:29:55'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:29:55'!
FAILURE!
!Sale methodsFor: 'queries' stamp: 'IO 12/3/2020 14:30:48' overrides: 16881029!
= aSale
	^(aSale total = total) and: aSale listItems = items.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:30:49'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:30:50'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:30:50'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:30:50'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:30:50'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:30:50'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:30:50'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:30:50'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:30:50'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:30:50'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:30:50'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:30:50'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:30:50'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:30:50'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:30:50'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:30:50'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:30:50'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/3/2020 14:31:25' prior: 50889407!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface items aClientId aClientPassword |
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aClientId := testObjectsFactory validClientId.
	aClientPassword := testObjectsFactory validClientPassword.
	aCartID := aStoreInterface createCartFor: aClientId password: aClientPassword.
	
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: aCartID
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	
	self  assert: (SalesBook new add: (Sale of: testObjectsFactory itemSellByTheStorePrice *2 withItems: items))
		equals: (aStoreInterface listPurchasesFor: aClientId password: aClientPassword).! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:31:26'!
FAILURE!
!Items methodsFor: 'queries' stamp: 'IO 12/3/2020 14:31:37' overrides: 16881029!
= aSale
	^(aSale total = total) and: aSale listItems = items.! !

!methodRemoval: Sale #= stamp: 'IO 12/3/2020 14:31:37'!
= aSale
	^(aSale total = total) and: aSale listItems = items.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:31:39'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'sale' stamp: 'IO 12/3/2020 14:33:18'!
saleOfDiferentItemsWithQuantity: aQuantity

	|items itemsTotal|
	items := Bag new.
	items add: self itemSellByTheStore withOccurrences: aQuantity.
	items add: self anotherItemSellByTheStore withOccurrences: aQuantity.
	itemsTotal := (self itemSellByTheStorePrice * aQuantity) + (self anotherItemSellByTheStorePrice * aQuantity).
	
	^Sale of: itemsTotal withItems: items.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:33:18' prior: 50889716!
test18clientAfterCheckoutHasPurchasedItems

	| aStoreInterface aSale cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.

	aSale := testObjectsFactory saleOfDiferentItemsWithQuantity: 2.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).


	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.

	aSale := testObjectsFactory saleOfDiferentItemsWithQuantity: 6.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).
! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:33:18' prior: 50889751!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface aSale cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.
	
	aSale := testObjectsFactory saleOfDiferentItemsWithQuantity: 2.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	aSale := testObjectsFactory saleOfDiferentItemsWithQuantity: 4.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword
	)
! !

!methodRemoval: StoreTestObjectsFactory #aSaleWithDiferentItemsInQuantity: stamp: 'IO 12/3/2020 14:33:18'!
aSaleWithDiferentItemsInQuantity: aQuantity

	|items itemsTotal|
	items := Bag new.
	items add: self itemSellByTheStore withOccurrences: aQuantity.
	items add: self anotherItemSellByTheStore withOccurrences: aQuantity.
	itemsTotal := (self itemSellByTheStorePrice * aQuantity) + (self anotherItemSellByTheStorePrice * aQuantity).
	
	^Sale of: itemsTotal withItems: items.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:33:21'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:33:21'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'sale' stamp: 'IO 12/3/2020 14:33:42' prior: 50892448!
saleOfDiferentItemsWithQuantity: aQuantity

	|items itemsTotal|
	items := Bag new.
	items add: self itemSellByTheStore withOccurrences: aQuantity.
	items add: self anotherItemSellByTheStore withOccurrences: aQuantity.
	itemsTotal := (self itemSellByTheStorePrice * aQuantity) + (self anotherItemSellByTheStorePrice * aQuantity).
	
	^SalesBook new add: (Sale of: itemsTotal withItems: items).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:33:44'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:33:44'!
PASSED!
!Items methodsFor: 'accessing' stamp: 'IO 12/3/2020 14:33:58' prior: 50891747!
total

	^total.! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 14:35:03' prior: 50891308!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	| aCartId |

	aCartId := nextCartId.

	cartsSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).

	nextCartId := aCartId + 1.
	

	^aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 14:35:18' prior: 50890638!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total aCartSession |
	
	self validateCart: aCartId.
	
	aCartSession := cartsSessions at: aCartId.

	total := (Cashier
		toCheckout: aCartSession
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBooks at: aCartSession clientId ifAbsentPut: SalesBook new)) checkOut.

	cartsSessions removeKey: aCartId.

	^total
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:35:19'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:35:19'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 14:36:28' prior: 50892834!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total aCartSession aCreditCard aSalesBook |
	
	self validateCart: aCartId.
	
	aCartSession := cartsSessions at: aCartId.
	
	aCreditCard := CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner.
	aSalesBook := salesBooks at: aCartSession clientId ifAbsentPut: SalesBook new.

	total := (Cashier
		toCheckout: aCartSession
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: aSalesBook) checkOut.

	cartsSessions removeKey: aCartId.

	^total
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 14:37:23' prior: 50892986!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total aCartSession aCreditCard aSalesBook |
	
	self validateCart: aCartId.
	
	aCartSession := cartsSessions at: aCartId.
	
	aCreditCard := CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner.
	aSalesBook := salesBooks at: aCartSession clientId ifAbsentPut: SalesBook new.

	total := (Cashier
		toCheckout: aCartSession
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: aSalesBook) checkOut.

	self removeCart: aCartId.

	^total
! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'IO 12/3/2020 14:38:43'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cartSessions salesBooks clientDatabase merchantProccessor clock nextCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:38:43' prior: 50893013!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total aCartSession aCreditCard aSalesBook |
	
	self validateCart: aCartId.
	
	aCartSession := cartSessions at: aCartId.
	
	aCreditCard := CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner.
	aSalesBook := salesBooks at: aCartSession clientId ifAbsentPut: SalesBook new.

	total := (Cashier
		toCheckout: aCartSession
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: aSalesBook) checkOut.

	self removeCart: aCartId.

	^total
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:38:43' prior: 50890235!
listCart: aCartId
	"lists the contentes of the cart associated to a cart ID"
	
	self validateCart: aCartId.
	^(cartSessions at: aCartId) listItems.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:38:43' prior: 50890270!
validateCart: aCartId
	"validates if the cart associated with a cart ID is usable at this moment.
	In the case it is not, the cart is deleted from the list if necessary and an error is returned"
	
	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	(cartSessions at: aCartId) isValid ifFalse: [
		cartSessions removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:38:43' prior: 50890181!
isActiveCart: aCartID 
	"awnsers if there is a usable cart associated with a cart ID"
	^cartSessions includesKey: aCartID.
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:38:43' prior: 50890871!
initializeWithCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock
	
	catalogue := aCatalogue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	cartSessions := Dictionary new. "stores the cart session for each cart id"
	salesBooks := Dictionary new. "stores the sales book for each client id"
	nextCartId := 0.


! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:38:43' prior: 50890188!
numberOfActiveCarts
	"awnsers the number of carts that exist in the store"
	^cartSessions size.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:38:43' prior: 50892822!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	| aCartId |

	aCartId := nextCartId.

	cartSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).

	nextCartId := aCartId + 1.
	

	^aCartId.
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 14:38:43' prior: 50890194!
addToCart: aCartId book: anItem quantity: aQuantity 
	"adds a quantity of an item to the cart associated with a cart ID"
	
	self validateCart: aCartId.

	(cartSessions at: aCartId) add: aQuantity of: anItem! !

Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue clientDatabase merchantProccessor clock cartSessions salesBooks nextCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'IO 12/3/2020 14:39:01'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue clientDatabase merchantProccessor clock cartSessions salesBooks nextCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 14:39:21'!
deleteCart: aCartId

	cartSessions removeKey: aCartId! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:39:22'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:39:22'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:39:22'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:39:22'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:39:22'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:39:22'!
PASSED!
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 14:39:31'!
removeCart: aCartId

	cartSessions removeKey: aCartId! !

!methodRemoval: StoreInterface #deleteCart: stamp: 'IO 12/3/2020 14:39:31'!
deleteCart: aCartId

	cartSessions removeKey: aCartId!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedItems stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 14:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 14:39:32'!
PASSED!
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 14:40:01' prior: 50893133!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	| aCartId |

	aCartId := nextCartId.

	cartSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).

	nextCartId := aCartId + 1.

	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 14:40:44' prior: 50893302!
removeCart: aCartId

	"removes the cart of the store"

	cartSessions removeKey: aCartId! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 14:40:48' prior: 50893084!
validateCart: aCartId

	"validates if the cart associated with a cart ID is usable at this moment.
	In the case it is not, the cart is deleted from the list if necessary and an error is returned"
	
	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	(cartSessions at: aCartId) isValid ifFalse: [
		cartSessions removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 14:41:50' prior: 50893456!
validateCart: aCartId

	"
		validates if a cart associated with a given cart Id didnt expire.
		if it did so, it is deleted from the list carts and an error is raised
	"
	
	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	(cartSessions at: aCartId) isValid ifFalse: [
		cartSessions removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 14:41:56' prior: 50893438!
createCartFor: aClientId

	"creates a new cart in this Store interface"

	| aCartId |

	aCartId := nextCartId.

	cartSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).

	nextCartId := aCartId + 1.

	^aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 14:42:15' prior: 50890226!
createCartFor: aClientId password: aPassword

	"creates a new cart for a client given its password"

	clientDatabase validateUser: aClientId andPassword: aPassword.

	^self createCartFor: aClientId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 14:43:15' prior: 50893146!
addToCart: aCartId book: anItem quantity: aQuantity 

	"adds a an item in quantity to a cart given its Id"
	
	self validateCart: aCartId.

	(cartSessions at: aCartId) add: aQuantity of: anItem! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 14:43:37' prior: 50893076!
listCart: aCartId

	"lists the items of the cart given its Id"
	
	self validateCart: aCartId.
	^(cartSessions at: aCartId) listItems.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 14:44:04' prior: 50890719!
listPurchasesFor: aClientId password: aPassword

	"lists all the purchases that have been made by a client" 

	^salesBooks at: aClientId ifAbsent: SalesBook new.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 14:46:38' prior: 50893049!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner

	"
		checksout the cart given its Id and removes it, debiting from the given credit card.
			The sale is registered on the sales book
		implementation details: the Cashier is a method object that performs payment and adds the sale to the clients book
	"
	| total aCartSession aCreditCard aSalesBook |
	
	self validateCart: aCartId.
	
	aCartSession := cartSessions at: aCartId.
	
	aCreditCard := CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner.
	aSalesBook := salesBooks at: aCartSession clientId ifAbsentPut: SalesBook new.

	total := (Cashier
		toCheckout: aCartSession
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: aSalesBook) checkOut.

	self removeCart: aCartId.

	^total
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 14:46:41' prior: 50893535!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner

	"
		checksout the cart given its Id and removes it, debiting from the given credit card.
			The sale is registered on the sales book
		implementation details: the Cashier is a method object that performs payment and adds the sale to the clients book
	"

	| total aCartSession aCreditCard aSalesBook |
	
	self validateCart: aCartId.
	
	aCartSession := cartSessions at: aCartId.
	
	aCreditCard := CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner.
	aSalesBook := salesBooks at: aCartSession clientId ifAbsentPut: SalesBook new.

	total := (Cashier
		toCheckout: aCartSession
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: aSalesBook) checkOut.

	self removeCart: aCartId.

	^total
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 14:47:18' prior: 50893527!
listPurchasesFor: aClientId password: aPassword

	"lists all the purchases that have been made by a client" 

	^salesBooks at: aClientId ifAbsent: SalesBook new.
! !
!Items methodsFor: 'adding' stamp: 'IO 12/3/2020 14:48:25'!
add: aSale

	total := total + aSale total.
	items addAll: aSale listItems.
! !

!methodRemoval: SalesBook #add: stamp: 'IO 12/3/2020 14:48:25'!
add: aSale

	total := total + aSale total.
	items addAll: aSale listItems.
!
!Items methodsFor: 'initialization' stamp: 'IO 12/3/2020 14:48:29' overrides: 16896425!
initialize
	total := 0.
	items := Bag new.
! !

!methodRemoval: SalesBook #initialize stamp: 'IO 12/3/2020 14:48:30'!
initialize
	total := 0.
	items := Bag new.
!
!Sale methodsFor: 'adding' stamp: 'IO 12/3/2020 14:49:17' overrides: 50893601!
add: aSale

	total := total + aSale total.
	items addAll: aSale listItems.
! !
!SalesBook methodsFor: 'adding' stamp: 'IO 12/3/2020 14:49:17' overrides: 50893601!
add: aSale

	total := total + aSale total.
	items addAll: aSale listItems.
! !

!methodRemoval: Items #add: stamp: 'IO 12/3/2020 14:49:17'!
add: aSale

	total := total + aSale total.
	items addAll: aSale listItems.
!
!Sale methodsFor: 'initialization' stamp: 'IO 12/3/2020 14:49:24' overrides: 50893611!
initialize
	total := 0.
	items := Bag new.
! !
!SalesBook methodsFor: 'initialization' stamp: 'IO 12/3/2020 14:49:24' overrides: 50893611!
initialize
	total := 0.
	items := Bag new.
! !

!methodRemoval: Items #initialize stamp: 'IO 12/3/2020 14:49:24'!
initialize
	total := 0.
	items := Bag new.
!

!methodRemoval: Sale #initialize stamp: 'IO 12/3/2020 14:49:29'!
initialize
	total := 0.
	items := Bag new.
!

!methodRemoval: Sale #add: stamp: 'IO 12/3/2020 14:49:33'!
add: aSale

	total := total + aSale total.
	items addAll: aSale listItems.
!
!CartSession methodsFor: 'private' stamp: 'IO 12/3/2020 14:51:26' prior: 50889889!
setLastUsageTime
	
	lastAction := clock now.
! !
!CreditCardTest methodsFor: 'test' stamp: 'IO 12/3/2020 14:57:25'!
test05CannotModifyCreditCard

	| testObjectsFactory creditCard cco cced ccn |
	testObjectsFactory := StoreTestObjectsFactory new.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	cco := creditCard cco.
	cced := creditCard cced.
	ccn := creditCard ccn.
	
	cco := 'PEPE GOMEZ'.
	cced := creditCard cced + 365 days.
	ccn := '5400000000000003'.

	self assert: 'PEPE SANCHEZ' equals: testObjectsFactory notExpiredCreditCard cco.
	self assert: 'PEPE SANCHEZ' equals: testObjectsFactory notExpiredCreditCard cced.
	self assert: '5400000000000001' equals: testObjectsFactory notExpiredCreditCard ccn.! !
!CreditCardTest methodsFor: 'test' stamp: 'IO 12/3/2020 14:58:57' prior: 50893660!
test05CannotModifyCreditCard

	| testObjectsFactory creditCard cco cced ccn |
	testObjectsFactory := StoreTestObjectsFactory new.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	cco := creditCard cco.
	cced := creditCard cced.
	ccn := creditCard ccn.
	
	cco := 'PEPE GOMEZ'.
	cced := creditCard cced + 365 days.
	ccn := '5400000000000003'.

	self assert: 'PEPE SANCHEZ' equals: testObjectsFactory notExpiredCreditCard cco.
	self assert: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) equals: testObjectsFactory notExpiredCreditCard cced.
	self assert: '5400000000000001' equals: testObjectsFactory notExpiredCreditCard ccn.! !

!testRun: #CreditCardTest #test05CannotModifyCreditCard stamp: 'IO 12/3/2020 14:59:07'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 14:59:07'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 14:59:07'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 14:59:07'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 14:59:07'!
PASSED!

!testRun: #CreditCardTest #test05CannotModifyCreditCard stamp: 'IO 12/3/2020 14:59:07'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'IO 12/3/2020 14:59:17' prior: 50893682!
test05CannotModifyCreditCard

	| testObjectsFactory creditCard cco cced ccn |
	testObjectsFactory := StoreTestObjectsFactory new.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	cco := creditCard cco.
	creditCard cced + 365 days.
	ccn := creditCard ccn.
	
	cco := 'PEPE GOMEZ'.
	cced := creditCard cced .
	ccn := '5400000000000003'.

	self assert: 'PEPE SANCHEZ' equals: testObjectsFactory notExpiredCreditCard cco.
	self assert: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) equals: testObjectsFactory notExpiredCreditCard cced.
	self assert: '5400000000000001' equals: testObjectsFactory notExpiredCreditCard ccn.! !
!CreditCardTest methodsFor: 'test' stamp: 'IO 12/3/2020 14:59:40' prior: 50893726!
test05CannotModifyCreditCard

	| testObjectsFactory creditCard cco cced ccn |
	testObjectsFactory := StoreTestObjectsFactory new.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	cco := creditCard cco.
	creditCard cced add: 365 days.
	ccn := creditCard ccn.
	
	cco := 'PEPE GOMEZ'.
	cced := creditCard cced .
	ccn := '5400000000000003'.

	self assert: 'PEPE SANCHEZ' equals: testObjectsFactory notExpiredCreditCard cco.
	self assert: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) equals: testObjectsFactory notExpiredCreditCard cced.
	self assert: '5400000000000001' equals: testObjectsFactory notExpiredCreditCard ccn.! !

!testRun: #CreditCardTest #test05CannotModifyCreditCard stamp: 'IO 12/3/2020 14:59:47'!
ERROR!
!CreditCardTest methodsFor: 'test' stamp: 'IO 12/3/2020 15:00:16' prior: 50893750!
test05CannotModifyCreditCard

	| testObjectsFactory creditCard cced ccn |
	testObjectsFactory := StoreTestObjectsFactory new.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	creditCard cco append: ' LOPEZ'.
	cced := creditCard cced + 365 days.
	ccn := creditCard ccn.

	self assert: 'PEPE SANCHEZ' equals: testObjectsFactory notExpiredCreditCard cco.
	self assert: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) equals: testObjectsFactory notExpiredCreditCard cced.
	self assert: '5400000000000001' equals: testObjectsFactory notExpiredCreditCard ccn.! !

!testRun: #CreditCardTest #test05CannotModifyCreditCard stamp: 'IO 12/3/2020 15:00:22'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 15:00:22'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 15:00:22'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 15:00:22'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 15:00:22'!
PASSED!

!testRun: #CreditCardTest #test05CannotModifyCreditCard stamp: 'IO 12/3/2020 15:00:22'!
PASSED!

!methodRemoval: CreditCardTest #test05CannotModifyCreditCard stamp: 'IO 12/3/2020 15:00:30'!
test05CannotModifyCreditCard

	| testObjectsFactory creditCard cced ccn |
	testObjectsFactory := StoreTestObjectsFactory new.
	creditCard := testObjectsFactory notExpiredCreditCard.
	
	creditCard cco append: ' LOPEZ'.
	cced := creditCard cced + 365 days.
	ccn := creditCard ccn.

	self assert: 'PEPE SANCHEZ' equals: testObjectsFactory notExpiredCreditCard cco.
	self assert: (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1) equals: testObjectsFactory notExpiredCreditCard cced.
	self assert: '5400000000000001' equals: testObjectsFactory notExpiredCreditCard ccn.!

----SNAPSHOT----(3 December 2020 15:01:05) CuisUniversity-4384.image priorSource: 17831503!