
----STARTUP---- (29 October 2020 17:21:11) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/linux64/CuisUniversity-4384.image!

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliTest category: 'Terni Lapilli' stamp: 'AM 10/29/2020 17:21:57'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'AM 10/29/2020 17:36:40'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'AM 10/29/2020 17:36:16'!
test01
	
	| boardTerniLapilli |
	boardTerniLapilli := TerniLapilli new.
	self assert: boardTerniLapilli isXPlayingNext.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:36:45' prior: 50872502!
test01
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self assert: boardTerniLapilli isXPlayingNext.! !

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 17:36:47'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 17:37:01'!
isXPlayingNext
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 17:37:07' prior: 50872518!
isXPlayingNext
	^true! !

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 17:37:09'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 17:37:09'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:37:53'!
test02
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self deny: boardTerniLapilli isOPlayingNext.! !

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 17:37:56'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 17:38:09'!
isOPlayingNext
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 17:38:13' prior: 50872540!
isOPlayingNext
	^false! !

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 17:38:16'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 17:38:16'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 17:38:16'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:39:59'!
test03
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self deny: boardTerniLapilli isOver.! !

!testRun: #TerniLapilliTest #test03 stamp: 'AM 10/29/2020 17:40:08'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 17:40:18'!
isOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 17:40:21' prior: 50872564!
isOver
	^false! !

!testRun: #TerniLapilliTest #test03 stamp: 'AM 10/29/2020 17:40:23'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 17:40:23'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 17:40:23'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'AM 10/29/2020 17:40:23'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:40:29'!
test04
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self deny: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:40:53'!
test05
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self deny: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:41:30' prior: 50872581!
test04
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self deny: boardTerniLapilli isTied.! !

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 17:42:13'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 17:42:26'!
isTied
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 17:42:34' prior: 50872604!
isTied
	^true! !

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 17:42:36'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:42:43' prior: 50872595!
test04
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self assert: boardTerniLapilli isTied.! !

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 17:42:45'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 17:42:45'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 17:42:45'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'AM 10/29/2020 17:42:45'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 17:42:45'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 17:42:45'!
PASSED!

!methodRemoval: TerniLapilliTest #test05 stamp: 'AM 10/29/2020 17:42:52'!
test05
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self deny: boardTerniLapilli isOver.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:44:16'!
test05
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self assert: boardTerniLapilli hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:44:23' prior: 50872642!
test05
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self deny: boardTerniLapilli hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 17:44:24'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 17:44:34'!
hasPlayerXWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 17:44:40' prior: 50872659!
hasPlayerXWon
	^false! !

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 17:44:43'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 17:44:43'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 17:44:43'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'AM 10/29/2020 17:44:43'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 17:44:43'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 17:44:43'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:44:51'!
test06
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self deny: boardTerniLapilli hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 17:44:53'!
ERROR!
!TerniLapilli methodsFor: '*DenotativeObject' stamp: 'AM 10/29/2020 17:45:01'!
hasPlayerOWon
	self shouldBeImplemented.! !

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 17:45:23'!
ERROR!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 17:45:23'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 17:45:36' prior: 50872691!
hasPlayerOWon
	^false! !

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 17:45:40'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:47:24'!
test07
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self deny: boardTerniLapilli hasPlayerOWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:48:39' prior: 50872706!
test07
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeAnXAt: 0@0
	self assert: boardTerniLapilli isXPlayingNext! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 17:48:57' prior: 50872713!
test07
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeAnXAt: 0@0.
	self assert: boardTerniLapilli isOPlayingNext! !

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 17:49:33'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 17:49:50'!
placeAnXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 17:50:09' prior: 50872732!
placeAnXAt: aPoint 
	! !

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 17:50:15'!
FAILURE!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'AM 10/29/2020 17:50:44'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'lastPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 17:50:42' prior: 50872737!
placeAnXAt: aPoint 
	lastPlayer := 'X'
	! !

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 17:52:27'!
FAILURE!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 17:52:37'!
FAILURE!

boardTerniLapilli!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:13:29' prior: 50872544!
isOPlayingNext
	^lastPlayer == 'X'! !

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 18:13:34'!
FAILURE!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 18:14:04'!
FAILURE!

boardTerniLapilli isOPlayingNext!

lastPlayer == 'X'!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:15:02' prior: 50872761!
isOPlayingNext
	^lastPlayer = 'X'! !

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 18:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'AM 10/29/2020 18:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 18:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 18:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 18:15:13'!
PASSED!

!methodRemoval: TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:17:26'!
test01
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self assert: boardTerniLapilli isXPlayingNext.!

!methodRemoval: TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:17:29'!
test02
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self deny: boardTerniLapilli isOPlayingNext.!

!methodRemoval: TerniLapilliTest #test03 stamp: 'AM 10/29/2020 18:17:31'!
test03
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self deny: boardTerniLapilli isOver.!

!methodRemoval: TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:17:32'!
test04
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self assert: boardTerniLapilli isTied.!

!methodRemoval: TerniLapilliTest #test05 stamp: 'AM 10/29/2020 18:17:34'!
test05
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self deny: boardTerniLapilli hasPlayerXWon.!

!methodRemoval: TerniLapilliTest #test06 stamp: 'AM 10/29/2020 18:17:35'!
test06
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self deny: boardTerniLapilli hasPlayerOWon.!

!methodRemoval: TerniLapilli #hasPlayerOWon stamp: 'AM 10/29/2020 18:17:41'!
hasPlayerOWon
	^false!

!methodRemoval: TerniLapilli #hasPlayerXWon stamp: 'AM 10/29/2020 18:17:43'!
hasPlayerXWon
	^false!

!methodRemoval: TerniLapilli #isOPlayingNext stamp: 'AM 10/29/2020 18:17:46'!
isOPlayingNext
	^lastPlayer = 'X'!

!methodRemoval: TerniLapilli #isOver stamp: 'AM 10/29/2020 18:17:48'!
isOver
	^false!

!methodRemoval: TerniLapilli #isTied stamp: 'AM 10/29/2020 18:17:50'!
isTied
	^true!

!methodRemoval: TerniLapilli #isXPlayingNext stamp: 'AM 10/29/2020 18:17:51'!
isXPlayingNext
	^true!

!methodRemoval: TerniLapilli #placeAnXAt: stamp: 'AM 10/29/2020 18:17:59'!
placeAnXAt: aPoint 
	lastPlayer := 'X'
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:18:10'!
test01
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeAnXAt: 0@0.
	self assert: boardTerniLapilli isOPlayingNext! !

!methodRemoval: TerniLapilliTest #test07 stamp: 'AM 10/29/2020 18:18:10'!
test07
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeAnXAt: 0@0.
	self assert: boardTerniLapilli isOPlayingNext!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:18:13'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:18:28'!
placeAnXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:18:34' prior: 50872871!
placeAnXAt: aPoint ! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:18:39' prior: 50872876!
placeAnXAt: aCell ! !

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:18:43'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:18:55'!
isOPlayingNext
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:18:59' prior: 50872886!
isOPlayingNext
	^true! !

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:19:11'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:19:11'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:19:32'!
test02
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeAnXAt: 0@0.
	boardTerniLapilli placeAnOAt: 0@1.
	self assert: boardTerniLapilli isXPlayingNext! !

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:19:42'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:20:02'!
placeAnOAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:20:08' prior: 50872910!
placeAnOAt: aCell 
	! !

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:20:10'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:20:22'!
isXPlayingNext
	self shouldBeImplemented.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:26:44'!
test00
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeAnXAt: 0@0.
	self assert: boardTerniLapilli isOPlayingNext! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:26:52' prior: 50872926!
test00
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self assert: boardTerniLapilli isXPlayingNext! !

!testRun: #TerniLapilliTest #test00 stamp: 'AM 10/29/2020 18:27:07'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:27:17' prior: 50872921!
isXPlayingNext
	^true! !

!testRun: #TerniLapilliTest #test00 stamp: 'AM 10/29/2020 18:27:19'!
PASSED!

!testRun: #TerniLapilliTest #test00 stamp: 'AM 10/29/2020 18:27:20'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:27:20'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:27:20'!
PASSED!

!methodRemoval: TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:28:08'!
test01
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeAnXAt: 0@0.
	self assert: boardTerniLapilli isOPlayingNext!

!methodRemoval: TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:28:12'!
test02
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeAnXAt: 0@0.
	boardTerniLapilli placeAnOAt: 0@1.
	self assert: boardTerniLapilli isXPlayingNext!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:28:17'!
test01
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self assert: boardTerniLapilli isXPlayingNext! !

!methodRemoval: TerniLapilliTest #test00 stamp: 'AM 10/29/2020 18:28:17'!
test00
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self assert: boardTerniLapilli isXPlayingNext!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:28:32' prior: 50872973!
test01
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self assert: boardTerniLapilli isXPlayingNext
	self deny: boardTerniLapilli isOPlayingNext! !

!methodRemoval: TerniLapilli #placeAnOAt: stamp: 'AM 10/29/2020 18:28:40'!
placeAnOAt: aCell 
	!

!methodRemoval: TerniLapilli #placeAnXAt: stamp: 'AM 10/29/2020 18:28:42'!
placeAnXAt: aCell !

!methodRemoval: TerniLapilli #isXPlayingNext stamp: 'AM 10/29/2020 18:28:46'!
isXPlayingNext
	^true!

!methodRemoval: TerniLapilli #isOPlayingNext stamp: 'AM 10/29/2020 18:28:51'!
isOPlayingNext
	^true!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:28:59' prior: 50872987!
test01
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:29:01'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:29:10'!
isXPlayingNext
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:29:14' prior: 50873018!
isXPlayingNext
	^true! !

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:29:16'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:29:28'!
isOPlayingNext
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:29:31' prior: 50873028!
isOPlayingNext
	^false! !

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:29:34'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:29:34'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:29:55'!
test02
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:30:04' prior: 50873041!
test02
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	self deny: boardTerniLapilli isXPlayingNext.
	self assert boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:30:07' prior: 50873051!
test02
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	self deny: boardTerniLapilli isXPlayingNext.
	self assert: boardTerniLapilli isOPlayingNext.! !

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:30:14'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:30:25'!
placeXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:30:31' prior: 50873072!
placeXAt: aCell 
! !

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:30:32'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:31:13' prior: 50873077!
placeXAt: aCell 
	lastPlayer := 'X'
! !

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:31:15'!
FAILURE!

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:31:42'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:32:27' prior: 50873022!
isXPlayingNext
	^lastPlayer ~= 'X'! !

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:32:31'!
FAILURE!

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:32:31'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:32:59' prior: 50873032!
isOPlayingNext
	^lastPlayer ~= 'O'! !

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:33:05'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:33:20'!
test03
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	boardTerniLapilli placeXAt: 0@1.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !

!testRun: #TerniLapilliTest #test03 stamp: 'AM 10/29/2020 18:33:22'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:33:39' prior: 50873108!
test03
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	boardTerniLapilli placeOAt: 0@1.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !

!testRun: #TerniLapilliTest #test03 stamp: 'AM 10/29/2020 18:33:42'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:33:51'!
placeOAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:34:00' prior: 50873134!
placeOAt: aPoint 
	lastPlayer := 'O'! !

!testRun: #TerniLapilliTest #test03 stamp: 'AM 10/29/2020 18:34:02'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:34:02'!
FAILURE!

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:34:02'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'AM 10/29/2020 18:34:02'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:34:02'!
FAILURE!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:34:17'!
FAILURE!

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:34:17'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'AM 10/29/2020 18:34:17'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:34:18'!
FAILURE!
!TerniLapilli methodsFor: 'nil' stamp: 'AM 10/29/2020 18:34:53'!
intialize
	lastPlayer := 'X'! !

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'AM 10/29/2020 18:35:14'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'lastPlayer nextPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:35:12' prior: 50873101!
isOPlayingNext
	^nextPlayer = 'O'! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:35:22' prior: 50873092!
isXPlayingNext
	^nextPlayer = 'X'! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:35:31' prior: 50873139!
placeOAt: aPoint 
	nextPlayer := 'X'! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:35:40' prior: 50873083!
placeXAt: aCell 
	nextPlayer := 'O'
! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'AM 10/29/2020 18:36:21'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:36:24'!
FAILURE!

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:36:24'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'AM 10/29/2020 18:36:24'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:36:24'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:36:41' prior: 50873165!
intialize
	nextPlayer := 'X'! !

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:36:43'!
FAILURE!

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:36:43'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'AM 10/29/2020 18:36:43'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:36:43'!
FAILURE!

 boardTerniLapilli isXPlayingNext!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:38:02' prior: 50873008!
test01
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:38:02'!
FAILURE!

boardTerniLapilli!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:38:45' overrides: 16896425!
initialize
	nextPlayer := 'X'! !

!methodRemoval: TerniLapilli #intialize stamp: 'AM 10/29/2020 18:38:45'!
intialize
	nextPlayer := 'X'!

!testRun: #TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:38:47'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:38:47'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'AM 10/29/2020 18:38:47'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:39:46'!
test01FirstPlayerIsX
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !

!methodRemoval: TerniLapilliTest #test01 stamp: 'AM 10/29/2020 18:39:46'!
test01
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.!
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 18:40:35'!
test02SecondPlayerIsO
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	self deny: boardTerniLapilli isXPlayingNext.
	self assert: boardTerniLapilli isOPlayingNext.! !

!methodRemoval: TerniLapilliTest #test02 stamp: 'AM 10/29/2020 18:40:35'!
test02
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	self deny: boardTerniLapilli isXPlayingNext.
	self assert: boardTerniLapilli isOPlayingNext.!
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 18:40:47'!
test03ThirdPlayerIsX
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	boardTerniLapilli placeOAt: 0@1.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !

!methodRemoval: TerniLapilliTest #test03 stamp: 'AM 10/29/2020 18:40:47'!
test03
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	boardTerniLapilli placeOAt: 0@1.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.!
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 18:43:09'!
test04
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	self should: [ boardTerniLapilli placeOAt: 0@0 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCell.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 18:43:37' prior: 50873320!
test04
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	self should: [ boardTerniLapilli placeOAt: 0@0 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCell.! !

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:43:47'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 18:44:06' prior: 50873334!
test04
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	self should: [ boardTerniLapilli placeOAt: 0@0 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription.! !

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:44:08'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/29/2020 18:44:23'!
canNotPlaceChipInOccupiedCellErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/29/2020 18:44:45' prior: 50873362!
canNotPlaceChipInOccupiedCellErrorDescription
	^ 'Chip can not be placed in an occupied cell'! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/29/2020 18:44:59' prior: 50873368!
canNotPlaceChipInOccupiedCellErrorDescription
	^ 'Chip can not be placed in an occupied cell.'! !

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:45:00'!
FAILURE!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'AM 10/29/2020 18:45:48'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer cell'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:45:55' prior: 50873189!
placeXAt: aCell 
	cell := aCell.
	nextPlayer := 'O'
! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:46:18' prior: 50873185!
placeOAt: aPoint 
	nextPlayer := 'X'
	cell = aPoint ifTrue: [self class canNotPlaceChipInOccupiedCellErrorDescription ]! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:46:23' prior: 50873396!
placeOAt: aPoint 
	nextPlayer := 'X'
	cell = aPoint ifTrue: [^ self class canNotPlaceChipInOccupiedCellErrorDescription ]! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:46:34' prior: 50873403!
placeOAt: aCell 
	nextPlayer := 'X'
	cell = aCell ifTrue: [^ self class canNotPlaceChipInOccupiedCellErrorDescription ]! !

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:46:47'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:47:13' prior: 50873410!
placeOAt: aCell 
	nextPlayer := 'X'.
	cell = aCell ifTrue: [^ self class canNotPlaceChipInOccupiedCellErrorDescription ]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 18:47:15'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 18:47:15'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 18:47:15'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:47:15'!
FAILURE!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:47:15'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:49:05' prior: 50873419!
placeOAt: aCell 
	nextPlayer := 'X'.
	cell = aCell ifTrue: [^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ]! !
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 18:50:21' prior: 50873348!
test04
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	boardTerniLapilli placeOAt: 0@1.
	self should: [ boardTerniLapilli placeXAt: 0@0 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription.! !

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:50:37'!
FAILURE!

----End fileIn of /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/linux64/Packages/TerseGuide.pck.st----!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:55:33' prior: 50873391!
placeXAt: aCell 
	(cell includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cell add: aCell.
	nextPlayer := 'O'
! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 18:55:45' prior: 50873439!
placeOAt: aCell 
	(cell includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cell add: aCell.
	nextPlayer := 'X'.! !

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'AM 10/29/2020 18:55:54'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer cells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:55:54' prior: 50876399!
placeXAt: aCell 
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'O'
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:55:54' prior: 50876407!
placeOAt: aCell 
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'X'.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 18:56:10' prior: 50873248 overrides: 16896425!
initialize
	cells := OrderedCollection new.
	nextPlayer := 'X'! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 18:56:37'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 18:56:37'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 18:56:37'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:56:37'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 18:57:02'!
test05
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	boardTerniLapilli placeOAt: 0@1.
	self should: [ boardTerniLapilli placeXAt: 0@0 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 18:57:05' prior: 50873447!
test04
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	self should: [ boardTerniLapilli placeOAt: 0@0 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCell.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 18:57:10'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 18:57:10'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 18:57:10'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:57:10'!
ERROR!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 18:57:10'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:57:10'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 18:57:24' prior: 50876470!
test04
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	self should: [ boardTerniLapilli placeOAt: 0@0 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 18:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 18:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 18:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:57:28'!
FAILURE!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 18:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:57:28'!
FAILURE!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:57:36'!
FAILURE!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:57:36'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 18:57:49' prior: 50876500!
test04
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	self should: [ boardTerniLapilli placeOAt: 0@0 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 18:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 18:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 18:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 18:57:54'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 18:57:54'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 18:59:32' prior: 50876457!
test05
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 3@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 18:59:38'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/29/2020 18:59:54'!
cellIsOutOfBoundsErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/29/2020 19:00:08' prior: 50876573!
cellIsOutOfBoundsErrorDescription
	^'Cell is out of the board'! !

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:00:10'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:01:18' prior: 50876423!
placeXAt: aCell 
	aCell x <= 2 ifTrue: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'O'
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:01:28'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:01:28'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:01:28'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:01:28'!
ERROR!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:01:28'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:01:59' prior: 50876587!
placeXAt: aCell 
	aCell x <= 2 ifFlase: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'O'
! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:02:03' prior: 50876611!
placeXAt: aCell 
	aCell x <= 2 ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'O'
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:02:06'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:02:06'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:02:06'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:02:06'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:02:06'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:02:25'!
test06
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeOAt: 3@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:02:44' prior: 50876647!
test06
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	
	self should: [boardTerniLapilli placeXAt: 3@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:02:57' prior: 50876657!
test06
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2
	self should: [ ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:03:03' prior: 50876668!
test06
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeOAt: 3@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:03:06'!
FAILURE!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:03:06'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:03:51' prior: 50876432!
placeOAt: aCell 
	aCell x <= 2 ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'X'.! !
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:04:16' prior: 50876679!
test06
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: -1@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:04:16' prior: 50876707!
test06
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: -1@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:03:03' prior: 50876717!
test06
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeOAt: 3@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:05:21'!
test07
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: -1@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:05:25'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:05:51' prior: 50876622!
placeXAt: aCell 
	(aCell x between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'O'
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:05:57'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:05:57'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:06:08'!
test08
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeOAt: -1@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:06:09'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:06:27' prior: 50876695!
placeOAt: aCell 
	(aCell between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'X'.! !
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:06:48'!
test09
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 2@-1 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:06:57'!
FAILURE!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:06:57'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:07:28' prior: 50876750!
placeXAt: aCell 
	(aCell x between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y >= 0) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'O'
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:07:37'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:07:37'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:07:37'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:07:37'!
FAILURE!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:07:37'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:07:37'!
FAILURE!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:07:37'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:07:37'!
FAILURE!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:07:37'!
PASSED!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:08:14' prior: 50876819!
placeXAt: aCell 
	(aCell x between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(0 <= aCell y) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'O'
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:08:16'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:08:16'!
FAILURE!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:08:16'!
FAILURE!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:08:16'!
FAILURE!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:08:20'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:08:53' prior: 50876857!
placeXAt: aCell 
	(aCell x between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(0 <= (aCell y)) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'O'
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:08:56'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:08:56'!
FAILURE!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:08:56'!
FAILURE!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:08:56'!
FAILURE!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:08:59'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:09:31'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:09:31'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:09:51' prior: 50876793!
placeOAt: aCell 
	(aCell x between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'X'.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:09:53'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:10:05' prior: 50876780!
test08
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeOAt: 2@-1 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:06:08' prior: 50876978!
test08
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeOAt: -1@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:10:27'!
test10
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeOAt: 2@-1 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 19:10:29'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:10:43' prior: 50876943!
placeOAt: aCell 
	(aCell x between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(0 <= (aCell y)) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'X'.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:10:48'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:10:48'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:10:48'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:10:48'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:10:48'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:10:48'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:10:48'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:10:48'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:10:48'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 19:10:48'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:11:20' prior: 50876804!
test09
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 2@3 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:11:21'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:06:48' prior: 50877055!
test09
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 2@-1 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:11:43'!
test11
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 2@3 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 19:11:46'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:12:05' prior: 50876897!
placeXAt: aCell 
	(aCell x between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'O'
! !
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:12:18'!
test12
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeOAt: 2@3 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 19:12:20'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:12:36' prior: 50877014!
placeOAt: aCell 
	(aCell x between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'X'.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 19:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 19:12:42'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 19:12:42'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclssified' stamp: 'AM 10/29/2020 19:14:15'!
test04B
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	boardTerniLapilli placeOAt: 0@1.
	self should: [ boardTerniLapilli placeXAt: 0@0 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:14:19'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:14:19'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:14:19'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:14:19'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 19:14:19'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:14:19'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:14:19'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:14:19'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:14:19'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:14:19'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 19:14:19'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 19:14:19'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 19:14:19'!
PASSED!
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/29/2020 19:16:53' prior: 50877105!
test12
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeOAt: 2@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription.! !

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 19:17:00'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/29/2020 19:17:16'!
canNotPlayOnOtherPlayersTurnErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/29/2020 19:18:09' prior: 50877222!
canNotPlayOnOtherPlayersTurnErrorDescription
	^'Can not play when it is not your turn.'! !

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 19:18:12'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:19:05' prior: 50877118!
placeOAt: aCell 
	(aCell x between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer ~= 'O' ifTrue: [ ^ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'X'.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:19:08'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:19:08'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:19:08'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:19:08'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 19:19:08'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:19:08'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:19:08'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:19:08'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:19:08'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:19:08'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 19:19:08'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 19:19:08'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 19:19:08'!
PASSED!
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/29/2020 19:12:18' prior: 50877209!
test12
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeOAt: 2@3 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/29/2020 19:19:55'!
test13
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeOAt: 2@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing turns' stamp: 'AM 10/29/2020 19:21:05'!
test14
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeXAt: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription.! !

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 19:21:08'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:21:24' prior: 50877090!
placeXAt: aCell 
	(aCell x between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer ~= 'O' ifTrue: [ ^ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'O'
! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:21:31' prior: 50877323!
placeXAt: aCell 
	(aCell x between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer ~= 'X' ifTrue: [ ^ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'O'
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:21:34'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:21:34'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:21:34'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:21:34'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 19:21:34'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:21:34'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:21:34'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:21:34'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:21:34'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:21:34'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 19:21:34'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 19:21:34'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 19:21:34'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 19:21:34'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 19:21:34'!
PASSED!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:24:46' prior: 50877341!
placeXAt: aCell 
	(aCell x between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = 'O' ifTrue: [ ^ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'O'
! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:24:55' prior: 50877236!
placeOAt: aCell 
	(aCell x between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ ^ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = 'X' ifTrue: [ ^ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells includes: aCell) ifTrue: [ ^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'X'.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:25:28' prior: 50877415!
placeOAt: aCell 
	(aCell x between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = 'X' ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells includes: aCell) ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'X'.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:25:38' prior: 50877397!
placeXAt: aCell 
	(aCell x between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = 'O' ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells includes: aCell) ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'O'
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:25:43'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:25:44'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:25:44'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:25:44'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 19:25:44'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:25:44'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:25:44'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:25:44'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:25:44'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:25:44'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 19:25:44'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 19:25:44'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 19:25:44'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 19:25:44'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 19:25:44'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:26:07'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:26:07'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:26:07'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:26:07'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 19:26:07'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:26:07'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:26:07'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:26:07'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:26:07'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:26:07'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 19:26:07'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 19:26:07'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 19:26:07'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 19:26:07'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 19:26:07'!
PASSED!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:26:47'!
placeAt: aCell

	(aCell x between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = 'O' ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells includes: aCell) ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'O'! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:26:47' prior: 50877451!
placeXAt: aCell 
	self placeAt: aCell
! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:28:34'!
placeAt: aCell nextPlayer: nextMovingPlayer

	(aCell x between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells includes: aCell) ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := nextMovingPlayer! !

!methodRemoval: TerniLapilli #placeAt:nextPlayer: stamp: 'AM 10/29/2020 19:28:39'!
placeAt: aCell nextPlayer: nextMovingPlayer

	(aCell x between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells includes: aCell) ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := nextMovingPlayer!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:29:04'!
placeAt: aCell nextPlayer: nextMovingPlayer

	(aCell x between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells includes: aCell) ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := nextMovingPlayer! !

!methodRemoval: TerniLapilli #placeAt: stamp: 'AM 10/29/2020 19:29:10'!
placeAt: aCell

	(aCell x between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = 'O' ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells includes: aCell) ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := 'O'!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:29:29' prior: 50877433!
placeOAt: aCell 
	self placeAt: aCell nextPlayer: 'X'! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:29:41' prior: 50877561!
placeXAt: aCell 
	self placeAt: aCell nextPlayer: 'o'
! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:29:44' prior: 50877643!
placeXAt: aCell 
	self placeAt: aCell nextPlayer: 'O'
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:29:47'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:29:48'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:29:48'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:29:48'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 19:29:48'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:29:48'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:29:48'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:29:48'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:29:48'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:29:48'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 19:29:48'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 19:29:48'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 19:29:48'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 19:29:48'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 19:29:48'!
PASSED!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/29/2020 19:31:53'!
test15
	! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/29/2020 19:32:08' prior: 50877691!
test15
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeXAt: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/29/2020 19:33:29' prior: 50877695!
test15
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [ boardTerniLapilli distanceFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class temporaryExistsInOtherMethodsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/29/2020 19:33:39' prior: 50877707!
test15
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.! !

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 19:33:45'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/29/2020 19:34:04'!
canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/29/2020 19:34:22' prior: 50877732!
canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription
	^ 'Can not move a chip before placing the three chips on the board'.! !

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 19:34:24'!
FAILURE!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 19:34:34'!
FAILURE!
!TerniLapilli methodsFor: 'nil' stamp: 'AM 10/29/2020 19:35:00'!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 19:35:22' prior: 50877750!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription ! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:35:27'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:35:27'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:35:27'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:35:27'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 19:35:27'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:35:27'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:35:27'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:35:27'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:35:27'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:35:27'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 19:35:27'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 19:35:27'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 19:35:27'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 19:35:27'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 19:35:27'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 19:35:27'!
PASSED!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/29/2020 19:35:59'!
test16
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeAnXAt: 2@2.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/29/2020 19:36:06' prior: 50877803!
test16
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeAnXAt: 2@2.
	self should: [ boardTerniLapilli moveAnOFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 19:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 19:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 19:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 19:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 19:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 19:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 19:36:14'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 19:36:14'!
ERROR!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 19:36:14'!
ERROR!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/29/2020 19:36:29' prior: 50877816!
test16
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [ boardTerniLapilli moveAnOFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.! !

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 19:36:30'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 19:36:43'!
moveAnOFrom: anOccupiedCell to: anAdjacentFreeCell
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription ! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:36:48'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:36:48'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:36:48'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:36:48'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 19:36:48'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:36:48'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:36:48'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:36:48'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:36:48'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:36:48'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 19:36:48'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 19:36:48'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 19:36:48'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 19:36:48'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 19:36:48'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 19:36:48'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 19:36:48'!
PASSED!
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/29/2020 19:39:20'!
test05XShouldNotPlaceAChipToTheRightOfTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 3@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !

!methodRemoval: TerniLapilliTest #test05 stamp: 'AM 10/29/2020 19:39:20'!
test05
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 3@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.!
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/29/2020 19:39:25'!
test06XShouldNotPlaceAChipToTheRightOfTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 3@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !

!methodRemoval: TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 19:39:25'!
test05XShouldNotPlaceAChipToTheRightOfTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 3@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/29/2020 19:40:29'!
test17
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self deny: boardTerniLapilli isOver.! !

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 19:40:47'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:41:03'!
isOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 19:41:07' prior: 50877991!
isOver
	^false! !

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 19:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 19:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 19:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 19:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 19:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 19:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 19:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test06XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 19:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 19:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 19:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 19:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 19:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 19:41:18'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 19:41:18'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 19:41:18'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 19:41:18'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 19:41:18'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 19:41:18'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 19:41:18'!
PASSED!
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/29/2020 19:42:37'!
test18
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	boardTerniLapilli placeOAt: 0@1.
	boardTerniLapilli placeXAt: 1@0.
	boardTerniLapilli placeOAt: 0@2.
	boardTerniLapilli placeXAt: 2@0.
	self assert: boardTerniLapilli isOver.! !

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:17:07'!
FAILURE!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:19:13'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 20:25:23' prior: 50877995!
isOver
	^(cells includes: 0@0) and:
		[ (cells includes: 1@0) and: [
			cells includes: 2@0]] ! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test06XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:25:28'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:25:28'!
PASSED!
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/29/2020 20:26:11' prior: 50878047!
test18
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	boardTerniLapilli placeOAt: 1@0.
	boardTerniLapilli placeXAt: 2@0.
	self assert: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/29/2020 20:26:29'!
test19
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	boardTerniLapilli placeOAt: 1@0.
	boardTerniLapilli placeXAt: 2@0.
	self deny: boardTerniLapilli isOver.! !

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 20:26:31'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 20:31:32' prior: 50876441 overrides: 16896425!
initialize
	cells := Array2D height: 3  width: 3.
	nextPlayer := 'X'! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 20:32:39' prior: 50878142 overrides: 16896425!
initialize
	cells := Array2D height: 3  width: 3.
	nextPlayer := 'X'! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 20:34:29' prior: 50877602!
placeAt: aCell nextPlayer: nextMovingPlayer

	| actualPlayer |
	(aCell x between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells at: aCell ~= 'Empty') ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells at: aCell put: actualPlayer.
	nextPlayer := nextMovingPlayer! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 20:35:32' prior: 50878153!
placeAt: aCell nextPlayer: nextMovingPlayer

	| actualPlayer |
	(aCell x between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells at: aCell ~= 'Empty') ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells at: aCell put: actualPlayer.
	nextPlayer := nextMovingPlayer! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 20:35:54' prior: 50878173!
placeAt: aCell nextPlayer: nextMovingPlayer

	| actualPlayer2 |
	(aCell x between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells at: aCell ~= 'Empty') ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells at: aCell put: actualPlayer2.
	nextPlayer := nextMovingPlayer! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 20:36:17'!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer

	(aCell x between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells at: aCell ~= 'Empty') ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells at: aCell put: actualPlayer.
	nextPlayer := nextMovingPlayer! !

!methodRemoval: TerniLapilli #placeAt:nextPlayer: stamp: 'AM 10/29/2020 20:36:27'!
placeAt: aCell nextPlayer: nextMovingPlayer

	| actualPlayer2 |
	(aCell x between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 0 and: 2) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells at: aCell ~= 'Empty') ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells at: aCell put: actualPlayer2.
	nextPlayer := nextMovingPlayer!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 20:36:37' prior: 50877638!
placeOAt: aCell 
	self placeAt: aCell nextPlayer: 'X' actualPlayer: 'O'.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 20:36:47' prior: 50877648!
placeXAt: aCell 
	self placeAt: aCell nextPlayer: 'O' actualPlayer: 'X'
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 20:36:54'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 20:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 20:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 20:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 20:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test06XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 20:36:54'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 20:36:54'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 20:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 20:36:54'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 20:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 20:36:54'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 20:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 20:36:54'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 20:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 20:36:54'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 20:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 20:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:36:59'!
ERROR!
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/29/2020 20:37:35' prior: 50873280!
test02SecondPlayerIsO
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	self deny: boardTerniLapilli isXPlayingNext.
	self assert: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/29/2020 20:37:41' prior: 50873299!
test03ThirdPlayerIsX
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing no repetition' stamp: 'AM 10/29/2020 20:37:52' prior: 50876536!
test04
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	self should: [ boardTerniLapilli placeOAt: 1@1 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing no repetition' stamp: 'AM 10/29/2020 20:38:02' prior: 50877163!
test04B
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	self should: [ boardTerniLapilli placeXAt: 1@1 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/29/2020 20:38:14'!
test05XShouldNotPlaceAChipToTheRightOfTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 3@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !

!methodRemoval: TerniLapilliTest #test06XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 20:38:14'!
test06XShouldNotPlaceAChipToTheRightOfTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 3@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.!
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/29/2020 20:38:22' prior: 50878367!
test05XShouldNotPlaceAChipToTheRightOfTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 4@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/29/2020 20:38:27' prior: 50876727!
test06
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeOAt: 4@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/29/2020 20:38:31' prior: 50876738!
test07
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 0@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/29/2020 20:38:36' prior: 50876990!
test08
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeOAt: 0@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/29/2020 20:38:39' prior: 50877068!
test09
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 2@0 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/29/2020 20:38:43' prior: 50877001!
test10
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeOAt: 2@0 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/29/2020 20:38:49' prior: 50877078!
test11
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 2@4 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/29/2020 20:38:57' prior: 50877288!
test12
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeOAt: 2@4 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/29/2020 20:39:14' prior: 50878119!
test18
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	self assert: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/29/2020 20:39:23' prior: 50878129!
test19
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	self deny: boardTerniLapilli isOver.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 20:39:44' prior: 50878213!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer

	(aCell x between: 1 and: 3) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 1 and: 3) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells at: aCell ~= 'Empty') ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells at: aCell put: actualPlayer.
	nextPlayer := nextMovingPlayer! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 20:39:46'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:39:46'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 20:39:46'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 20:39:46'!
ERROR!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 20:39:46'!
ERROR!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 20:39:46'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 20:39:46'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 20:39:46'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 20:39:46'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 20:39:46'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 20:39:46'!
ERROR!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 20:39:46'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 20:39:46'!
ERROR!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 20:39:46'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 20:39:46'!
ERROR!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 20:39:46'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 20:39:46'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:39:46'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:39:46'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 20:39:46'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:39:49'!
ERROR!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 20:40:28'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:40:28'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 20:40:28'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 20:40:28'!
ERROR!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 20:40:28'!
ERROR!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 20:40:28'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 20:40:28'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 20:40:28'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 20:40:28'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 20:40:28'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 20:40:28'!
ERROR!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 20:40:28'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 20:40:28'!
ERROR!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 20:40:28'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 20:40:28'!
ERROR!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 20:40:28'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 20:40:28'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:40:28'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:40:28'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 20:40:28'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:40:35'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 20:40:59' prior: 50878502!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer

	(aCell x between: 1 and: 3) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 1 and: 3) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	((cells at: aCell) ~= 'Empty') ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells at: aCell put: actualPlayer.
	nextPlayer := nextMovingPlayer! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 20:41:02'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:41:02'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 20:41:02'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 20:41:02'!
ERROR!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 20:41:02'!
ERROR!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 20:41:02'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 20:41:02'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 20:41:02'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 20:41:02'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 20:41:02'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 20:41:02'!
ERROR!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 20:41:02'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 20:41:02'!
ERROR!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 20:41:02'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 20:41:02'!
ERROR!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 20:41:02'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 20:41:02'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:41:02'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:41:02'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 20:41:02'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:41:05'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 20:42:07' prior: 50878148 overrides: 16896425!
initialize
	cells := Array2D height: 3  width: 3.
	cells fillWith: 'Empty'.
	nextPlayer := 'X'! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 20:42:10'!
ERROR!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 20:42:15'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 20:44:38' prior: 50878706 overrides: 16896425!
initialize
	cells := Array2D height: 3  width: 3.
	cells replaceValues: [:aHeight :aWidth | 'Empty' ].
	nextPlayer := 'X'! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:44:41'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 20:44:41'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/29/2020 20:45:25' prior: 50878767 overrides: 16896425!
initialize
	cells := Array2D height: 3  width: 3.
	cells replaceValues: [:aHeight :aWidth :previousValue | 'Empty' ].
	nextPlayer := 'X'! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 20:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:45:29'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:45:29'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 20:45:29'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 20:47:03' prior: 50878064!
isOver
	^(cells at: 0@0 = 'X') and:
		[ (cells at: 1@0 = 'X') and: [
			cells at: 2@0 = 'X']] ! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 20:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:47:05'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:47:05'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 20:47:05'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:47:09'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 20:47:41' prior: 50878885!
isOver
	^(cells at: 1@1 = 'X') and:
		[ (cells at: 2@1 = 'X') and: [
			cells at: 3@1 = 'X']] ! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 20:47:49'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:47:49'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:47:49'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 20:47:49'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:47:51'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:48:48'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:48:48'!
ERROR!

j !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 20:49:32' prior: 50878945!
isOver
	^((cells at: 1@1) = 'X') and:
		[ ((cells at: 2@1) = 'X') and: [
			(cells at: 3@1) = 'X']] ! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:49:36'!
FAILURE!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 20:49:36'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:49:36'!
FAILURE!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 20:50:08'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:50:16'!
FAILURE!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 20:50:16'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:50:16'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/29/2020 20:26:11' prior: 50878482!
test18
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	boardTerniLapilli placeOAt: 1@0.
	boardTerniLapilli placeXAt: 2@0.
	self assert: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/29/2020 19:42:37' prior: 50879127!
test18
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 0@0.
	boardTerniLapilli placeOAt: 0@1.
	boardTerniLapilli placeXAt: 1@0.
	boardTerniLapilli placeOAt: 0@2.
	boardTerniLapilli placeXAt: 2@0.
	self assert: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/29/2020 20:50:50' prior: 50879137!
test18
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@1.
	self assert: boardTerniLapilli isOver.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 20:50:53'!
PASSED!
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/29/2020 20:51:40' prior: 50878492!
test19
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@3.
	self assert: boardTerniLapilli isOver.! !

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 20:51:44'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 20:52:36' prior: 50879010!
isOver
	(((cells at: 1@1) = 'X') and:
		[ ((cells at: 2@1) = 'X') and: [
			(cells at: 3@1) = 'X'] ]) or: [.
	((cells at: 1@1) = 'X') and:
		[ ((cells at: 2@1) = 'X') and: [
			(cells at: 3@1) = 'X']] ]! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 20:52:53' prior: 50879227!
isOver
	^(((cells at: 1@1) = 'X') and:
		[ ((cells at: 2@1) = 'X') and: [
			(cells at: 3@1) = 'X'] ]) or: [.
	((cells at: 1@1) = 'X') and:
		[ ((cells at: 2@2) = 'X') and: [
			(cells at: 3@3) = 'X']] ]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 20:52:56'!
PASSED!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'AM 10/29/2020 20:58:25'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer cells adjacentToNeighboringCell'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer cells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'AM 10/29/2020 20:59:19'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer cells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 21:01:13' prior: 50879236!
isOver
	| adjacentNeighbouringCell |
	^cells do: [:aCell |
		aCell eightNeighbors do: [ :aNeighbouringCell |
			(self isValid: aNeighbouringCell) ifTrue: [
					adjacentNeighbouringCell := 2 * aCell - aNeighbouringCell .
				
				]
		]
	]! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 21:02:41' prior: 50879317!
isOver
	| adjacentNeighbouringCell value1 value2 value3 |
	^cells do: [:aCell |
		aCell eightNeighbors do: [ :aNeighbouringCell |
			(self isValid: aNeighbouringCell) ifTrue: [
					adjacentNeighbouringCell := 2 * aCell - aNeighbouringCell .
					(self isValid: adjacentNeighbouringCell) ifTrue: [
							value1 := cells at: aCell.
							value2 := cells at: aNeighbouringCell.
							value3 := cells at: adjacentNeighbouringCell.
						]
				]
		]
	]! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 21:04:13' prior: 50879328!
isOver
	| adjacentNeighbouringCell value1 value2 value3 |
	^cells do: [:aCell |
		aCell eightNeighbors do: [ :aNeighbouringCell |
			(self isValid: aNeighbouringCell) ifTrue: [
					adjacentNeighbouringCell := 2 * aCell - aNeighbouringCell .
					(self isValid: adjacentNeighbouringCell) ifTrue: [
							value1 := cells at: aCell.
							value2 := cells at: aNeighbouringCell.
							value3 := cells at: adjacentNeighbouringCell.
							^ (value1 = value2 and: [value2 = value3 and: [value1 ~= 'Empty' ] ] ) 
						]
				]
		]
	]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 21:04:26'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 21:04:26'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 21:04:26'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 21:04:26'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 21:04:30'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 21:07:17' prior: 50879345!
isOver
	| adjacentNeighbouringCell value1 value2 value3 aCell |
	^cells withIndexesDo: [:i :j |
		aCell := i@j.
		aCell eightNeighbors do: [ :aNeighbouringCell |
			(self isValid: aNeighbouringCell) ifTrue: [
					adjacentNeighbouringCell := 2 * aCell - aNeighbouringCell .
					(self isValid: adjacentNeighbouringCell) ifTrue: [
							value1 := cells at: aCell.
							value2 := cells at: aNeighbouringCell.
							value3 := cells at: adjacentNeighbouringCell.
							^ (value1 = value2 and: [value2 = value3 and: [value1 ~= 'Empty' ] ] ) 
						]
				]
		]
	]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 21:07:26'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 21:07:26'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 21:07:26'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 21:07:26'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 21:07:30'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 21:08:23' prior: 50879418!
isOver
	| adjacentNeighbouringCell value1 value2 value3 aCell |
	^cells withIndexesDo: [:i :j :value|
		aCell := i@j.
		aCell eightNeighbors do: [ :aNeighbouringCell |
			(self isValid: aNeighbouringCell) ifTrue: [
					adjacentNeighbouringCell := 2 * aCell - aNeighbouringCell .
					(self isValid: adjacentNeighbouringCell) ifTrue: [
							value1 := cells at: aCell.
							value2 := cells at: aNeighbouringCell.
							value3 := cells at: adjacentNeighbouringCell.
							^ (value1 = value2 and: [value2 = value3 and: [value1 ~= 'Empty' ] ] ) 
						]
				]
		]
	]! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 21:08:47' prior: 50879492!
isOver
	| adjacentNeighbouringCell value2 value3 aCell |
	^cells withIndexesDo: [:i :j :value|
		aCell := i@j.
		aCell eightNeighbors do: [ :aNeighbouringCell |
			(self isValid: aNeighbouringCell) ifTrue: [
					adjacentNeighbouringCell := 2 * aCell - aNeighbouringCell .
					(self isValid: adjacentNeighbouringCell) ifTrue: [
							value2 := cells at: aNeighbouringCell.
							value3 := cells at: adjacentNeighbouringCell.
							^ (value = value2 and: [value2 = value3 and: [value ~= 'Empty' ] ] ) 
						]
				]
		]
	]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 21:08:56'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 21:08:56'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 21:08:56'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 21:08:56'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 21:08:58'!
ERROR!
!TerniLapilli methodsFor: 'xxxxx' stamp: 'AM 10/29/2020 21:09:12'!
isValid: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'xxxxx' stamp: 'AM 10/29/2020 21:09:20' prior: 50879586!
isValid: aCell
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'xxxxx' stamp: 'AM 10/29/2020 21:11:11' prior: 50879591!
isValid: aCell
	^((aCell x) between: 1 and: 3) and: [(aCell x) between: 1 and: 3]! !

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 21:11:13'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 21:12:10' prior: 50879513!
isOver
	| adjacentNeighbouringCell value2 value3 aCell |
	cells withIndexesDo: [:i :j :value|
		aCell := i@j.
		aCell eightNeighbors do: [ :aNeighbouringCell |
			(self isValid: aNeighbouringCell) ifTrue: [
					adjacentNeighbouringCell := 2 * aCell - aNeighbouringCell .
					(self isValid: adjacentNeighbouringCell) ifTrue: [
							value2 := cells at: aNeighbouringCell.
							value3 := cells at: adjacentNeighbouringCell.
							^ (value = value2 and: [value2 = value3 and: [value ~= 'Empty' ] ] ) 
						] 
				]
		]
	].
^false.! !

aCell!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 21:14:35'!
ERROR!
!TerniLapilli methodsFor: 'xxxxx' stamp: 'AM 10/29/2020 21:15:08' prior: 50879595!
isValid: aCell
	^((aCell x) between: 1 and: 3) and: [(aCell y) between: 1 and: 3]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 21:15:18'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 21:15:18'!
FAILURE!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 21:15:18'!
FAILURE!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 21:15:22'!
FAILURE!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 21:16:15'!
FAILURE!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 21:16:15'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 21:17:11' prior: 50879603!
isOver
	| adjacentNeighbouringCell value2 value3 aCell |
	cells withIndexesDo: [:i :j :value|
		aCell := i@j.
		aCell eightNeighbors do: [ :aNeighbouringCell |
			(self isValid: aNeighbouringCell) ifTrue: [
					adjacentNeighbouringCell := 2 * aCell - aNeighbouringCell .
					(self isValid: adjacentNeighbouringCell) ifTrue: [
							value2 := cells at: aNeighbouringCell.
							value3 := cells at: adjacentNeighbouringCell.
							((value = value2 and: [value2 = value3 and: [value ~= 'Empty' ] ]) ifTrue: [^true]) 
						] 
				]
		]
	].
^false.! !

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 21:17:13'!
FAILURE!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 21:17:18'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 21:17:19'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 21:17:19'!
FAILURE!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 21:17:19'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 21:17:19'!
FAILURE!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 21:19:44'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 21:20:53' prior: 50879691!
isOver
	| adjacentNeighbouringCell value2 value3 aCell value1 |
	cells withIndexesDo: [:i :j :value|
		aCell := i@j.
		aCell eightNeighbors do: [ :aNeighbouringCell |
			(self isValid: aNeighbouringCell) ifTrue: [
					adjacentNeighbouringCell := 2 * aCell - aNeighbouringCell .
					(self isValid: adjacentNeighbouringCell) ifTrue: [
						value1 := cells at: aCell.
							value2 := cells at: aNeighbouringCell.
							value3 := cells at: adjacentNeighbouringCell.
							((value1 = value2 and: [value2 = value3 and: [value1 ~= 'Empty' ] ]) ifTrue: [^true]) 
						] 
				]
		]
	].
^false.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/29/2020 21:20:59'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/29/2020 21:20:59'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/29/2020 21:20:59'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'AM 10/29/2020 21:20:59'!
PASSED!

!testRun: #TerniLapilliTest #test04B stamp: 'AM 10/29/2020 21:20:59'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/29/2020 21:20:59'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'AM 10/29/2020 21:20:59'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/29/2020 21:20:59'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'AM 10/29/2020 21:20:59'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/29/2020 21:20:59'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'AM 10/29/2020 21:20:59'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/29/2020 21:20:59'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'AM 10/29/2020 21:20:59'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/29/2020 21:20:59'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/29/2020 21:20:59'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/29/2020 21:21:00'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/29/2020 21:21:00'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/29/2020 21:21:00'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/29/2020 21:21:00'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/29/2020 21:21:00'!
PASSED!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 21:22:19' prior: 50878630!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer

	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	(aCell y between: 1 and: 3) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	((cells at: aCell) ~= 'Empty') ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells at: aCell put: actualPlayer.
	nextPlayer := nextMovingPlayer! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/29/2020 21:22:32' prior: 50879843!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer

	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	((cells at: aCell) ~= 'Empty') ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells at: aCell put: actualPlayer.
	nextPlayer := nextMovingPlayer! !

!methodRemoval: TerniLapilliTest #test04B stamp: 'AM 10/29/2020 21:25:22'!
test04B
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	self should: [ boardTerniLapilli placeXAt: 1@1 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription.!
!TerniLapilliTest methodsFor: 'testing no repetition' stamp: 'AM 10/29/2020 21:26:11'!
test04PlayersShouldNotPlayOnOccupiedCell
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	self should: [ boardTerniLapilli placeOAt: 1@1 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription.! !

!methodRemoval: TerniLapilliTest #test04 stamp: 'AM 10/29/2020 21:26:11'!
test04
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	self should: [ boardTerniLapilli placeOAt: 1@1 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription.!

!methodRemoval: TerniLapilliTest #test06 stamp: 'AM 10/29/2020 21:27:06'!
test06
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeOAt: 4@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.!

!methodRemoval: TerniLapilliTest #test08 stamp: 'AM 10/29/2020 21:27:13'!
test08
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeOAt: 0@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.!

!methodRemoval: TerniLapilliTest #test10 stamp: 'AM 10/29/2020 21:27:18'!
test10
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeOAt: 2@0 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.!

!methodRemoval: TerniLapilliTest #test12 stamp: 'AM 10/29/2020 21:27:24'!
test12
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeOAt: 2@4 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.!

----QUIT----(29 October 2020 23:28:57) CuisUniversity-4384.image priorSource: 17283955!

----STARTUP---- (30 October 2020 19:35:17) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/linux64/CuisUniversity-4384.image!


!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'AM 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 19:36:59'!
PASSED!

!methodRemoval: TerniLapilliTest #test16 stamp: 'AM 10/30/2020 19:37:51'!
test16
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [ boardTerniLapilli moveAnOFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.!

!methodRemoval: TerniLapilliTest #test14 stamp: 'AM 10/30/2020 19:37:56'!
test14
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@2.
	self should: [boardTerniLapilli placeXAt: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription.!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 19:38:25'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 19:38:25'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 19:38:25'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 19:38:25'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 19:38:25'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 19:38:25'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 19:38:25'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 19:38:25'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 19:38:25'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 19:38:25'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 19:38:25'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 19:38:25'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 19:38:25'!
PASSED!

Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer cells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'AM 10/30/2020 19:40:57'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer cells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'AM 10/30/2020 19:41:07'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer cellsForX'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 19:41:07' prior: 50879770!
isOver
	| adjacentNeighbouringCell value2 value3 aCell value1 |
	cellsForX withIndexesDo: [:i :j :value|
		aCell := i@j.
		aCell eightNeighbors do: [ :aNeighbouringCell |
			(self isValid: aNeighbouringCell) ifTrue: [
					adjacentNeighbouringCell := 2 * aCell - aNeighbouringCell .
					(self isValid: adjacentNeighbouringCell) ifTrue: [
						value1 := cellsForX at: aCell.
							value2 := cellsForX at: aNeighbouringCell.
							value3 := cellsForX at: adjacentNeighbouringCell.
							((value1 = value2 and: [value2 = value3 and: [value1 ~= 'Empty' ] ]) ifTrue: [^true]) 
						] 
				]
		]
	].
^false.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 19:41:07' prior: 50878826 overrides: 16896425!
initialize
	cellsForX := Array2D height: 3  width: 3.
	cellsForX replaceValues: [:aHeight :aWidth :previousValue | 'Empty' ].
	nextPlayer := 'X'! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 19:41:07' prior: 50879864!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer

	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	((cellsForX at: aCell) ~= 'Empty') ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cellsForX at: aCell put: actualPlayer.
	nextPlayer := nextMovingPlayer! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 19:41:20' prior: 50880104 overrides: 16896425!
initialize
	cellsForX := OrderedCollection new.
	nextPlayer := 'X'! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 19:41:38' prior: 50880112!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer

	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	((cellsForX at: aCell) ~= 'Empty') ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cellsForX add: aCell.
	nextPlayer := nextMovingPlayer! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 19:41:56' prior: 50880136!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer

	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cellsForX includes: aCell) ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cellsForX add: aCell.
	nextPlayer := nextMovingPlayer! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 19:43:43' prior: 50880153!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer

	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cellsForX includes: aCell) ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cellsForX add: aCell.
	nextPlayer := nextMovingPlayer! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 19:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 19:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 19:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 19:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 19:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 19:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 19:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 19:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 19:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 19:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 19:43:56'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 19:43:56'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 19:43:56'!
ERROR!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'AM 10/30/2020 19:45:00'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer cells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 19:45:00' prior: 50880081!
isOver
	| adjacentNeighbouringCell value2 value3 aCell value1 |
	cells withIndexesDo: [:i :j :value|
		aCell := i@j.
		aCell eightNeighbors do: [ :aNeighbouringCell |
			(self isValid: aNeighbouringCell) ifTrue: [
					adjacentNeighbouringCell := 2 * aCell - aNeighbouringCell .
					(self isValid: adjacentNeighbouringCell) ifTrue: [
						value1 := cells at: aCell.
							value2 := cells at: aNeighbouringCell.
							value3 := cells at: adjacentNeighbouringCell.
							((value1 = value2 and: [value2 = value3 and: [value1 ~= 'Empty' ] ]) ifTrue: [^true]) 
						] 
				]
		]
	].
^false.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 19:45:00' prior: 50880131 overrides: 16896425!
initialize
	cells := OrderedCollection new.
	nextPlayer := 'X'! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 19:45:01' prior: 50880170!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer

	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells includes: aCell) ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	cells add: aCell.
	nextPlayer := nextMovingPlayer! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 19:46:40' prior: 50880253 overrides: 16896425!
initialize
	cells := Dictionary new.
	cells at: 'X' put: OrderedCollection new.
	cells at: 'O' put: OrderedCollection new.
	nextPlayer := 'X'! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 19:47:26' prior: 50880259!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer

	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(cells includes: aCell) ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	(cells at: actualPlayer) add: aCell.
	nextPlayer := nextMovingPlayer! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 19:47:30'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 19:47:30'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 19:47:30'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 19:47:31'!
FAILURE!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 19:47:31'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 19:47:31'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 19:47:31'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 19:47:31'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 19:47:31'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 19:47:31'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 19:47:31'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 19:47:31'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 19:47:31'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 19:48:42' prior: 50880285!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer

	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((cells at: 'X') includes: aCell)
		or: [(cells at: 'O') includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	(cells at: actualPlayer) add: aCell.
	nextPlayer := nextMovingPlayer! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 19:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 19:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 19:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 19:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 19:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 19:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 19:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 19:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 19:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 19:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 19:48:46'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 19:48:46'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 19:48:46'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 19:50:45' prior: 50880230!
isOver
	
	(cells at: 'X') size = 3 and:
		[ (cells at: 'X') detect: [:aCell | 3 * aCell = (cells at: 'X') sum ] ]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 19:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 19:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 19:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 19:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 19:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 19:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 19:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 19:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 19:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 19:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 19:50:56'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 19:50:56'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 19:50:56'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 19:51:00'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 19:51:12' prior: 50880392!
isOver
	
	^(cells at: 'X') size = 3 and:
		[ (cells at: 'X') detect: [:aCell | 3 * aCell = (cells at: 'X') sum ] ]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 19:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 19:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 19:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 19:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 19:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 19:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 19:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 19:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 19:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 19:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 19:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 19:51:19'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 19:51:19'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 19:51:28'!
ERROR!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 19:52:14'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 19:52:14'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 19:52:14'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 19:52:14'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 19:52:14'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 19:52:14'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 19:52:14'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 19:52:14'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 19:52:14'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 19:52:14'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 19:52:14'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 19:52:14'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 19:52:14'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 19:52:16'!
ERROR!

(cells at: 'X') sum!

3 * aCell = (cells at: 'X') sum !

boardTerniLapilli isOver!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 19:57:39' prior: 50880436!
isOver
	
	^(cells at: 'X') size = 3 and:
		[ (cells at: 'X') detect: [:aCell | 3 * aCell = (cells at: 'X') sum ] ifNone: [ ^false ] ]! !

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 19:57:56'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 19:58:15'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 19:58:15'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 19:58:15'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 19:58:15'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 19:58:15'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 19:58:15'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 19:58:15'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 19:58:15'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 19:58:15'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 19:58:15'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 19:58:15'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 19:58:15'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 19:58:15'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 19:58:18'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 19:58:52' prior: 50880521!
isOver
	
	(cells at: 'X') size = 3 and:
		[ (cells at: 'X') detect: [:aCell | 3 * aCell = (cells at: 'X') sum ] ifNone: [ ^false ] ].
	^true! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 19:59:00'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 19:59:00'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 19:59:00'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 19:59:00'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 19:59:00'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 19:59:00'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 19:59:00'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 19:59:00'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 19:59:00'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 19:59:00'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 19:59:00'!
FAILURE!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 19:59:00'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 19:59:00'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 19:59:00'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:00:00' prior: 50880568!
isOver
	
	((cells at: 'X') size = 3 and:
		[ (cells at: 'X') detect: [:aCell | 3 * aCell = (cells at: 'X') sum ] ifNone: [ ^false ] ]) ifFalse: [^false].
	^true! !

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 20:00:02'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 20:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 20:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 20:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 20:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 20:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 20:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 20:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 20:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 20:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 20:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 20:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:00:05'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:00:05'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:00:09'!
ERROR!

(cells at: 'X') sum!

boardTerniLapilli isOver!

boardTerniLapilli isOver!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:07:16' prior: 50880613!
isOver
	
	((cells at: 'X') size = 3 and:
		[ (cells at: 'X') allSatisfy: [:aCell | 3 * aCell = (cells at: 'X') sum ] not ]) ifFalse: [^false].
	^true! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:07:22' prior: 50880664!
isOver
	
	((cells at: 'X') size = 3 and:
		[ (cells at: 'X') allSatisfy: [:aCell | 3 * aCell ~= (cells at: 'X') sum ] not ]) ifFalse: [^false].
	^true! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:07:34' prior: 50880672!
isOver
	
	^ ((cells at: 'X') size = 3 and:
		[ (cells at: 'X') allSatisfy: [:aCell | 3 * aCell ~= (cells at: 'X') sum ] not ])! !

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:07:40'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:08:25' prior: 50880680!
isOver
	
	^ ((cells at: 'X') size = 3 and:
		[ (  (cells at: 'X') allSatisfy: [:aCell | 3 * aCell ~= (cells at: 'X') sum ]   ) not ])! !

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 20:08:41'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 20:08:41'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 20:08:41'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 20:08:41'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 20:08:41'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 20:08:41'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 20:08:41'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 20:08:41'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 20:08:41'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 20:08:41'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 20:08:41'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:08:41'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:08:41'!
PASSED!
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/30/2020 20:10:17' prior: 50879213!
test19
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@3.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self assert: boardTerniLapilli isOver.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 20:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 20:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 20:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 20:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 20:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 20:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 20:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 20:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 20:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 20:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 20:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:10:23'!
FAILURE!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:10:23'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:11:19' prior: 50880689!
isOver
	
	^ (((cells at: 'X') size = 3 and:
		[ (  (cells at: 'X') allSatisfy: [:aCell | 3 * aCell ~= (cells at: 'X') sum ]   ) not ])) or: [
	(((cells at: 'O') size = 3 and:
		[ (  (cells at: 'O') allSatisfy: [:aCell | 3 * aCell ~= (cells at: 'O') sum ]   ) not ]))		]! !

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:11:25'!
PASSED!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:12:55'!
hasAlreadyWon: aPlayer
	
	^ (((cells at: 'X') size = 3 and:
		[ (  (cells at: 'X') allSatisfy: [:aCell | 3 * aCell ~= (cells at: 'X') sum ]   ) not ]))! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:13:17' prior: 50880799!
hasAlreadyWon: aPlayer
	
	^ (((cells at: aPlayer) size = 3 and:
		[ (  (cells at: aPlayer) allSatisfy: [:aCell | 3 * aCell ~= (cells at: aPlayer) sum ]   ) not ]))! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:13:55' prior: 50880786!
isOver
	
	^ (self hasAlreadyWon: 'X') or: [ self hasAlreadyWon: 'O']! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:14:31'!
hasPlayedThreeChips: aPlayer

	^ (cells at: aPlayer) size = 3! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:14:31' prior: 50880807!
hasAlreadyWon: aPlayer
	
	^ (((self hasPlayedThreeChips: aPlayer) and:
		[ (  (cells at: aPlayer) allSatisfy: [:aCell | 3 * aCell ~= (cells at: aPlayer) sum ]   ) not ]))! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:15:14' prior: 50880825!
hasAlreadyWon: aPlayer
	
	^ (((self hasPlayedThreeChips: aPlayer) and:
		[ (  (cells at: aPlayer) allSatisfy: [:aCell | 3 * aCell ~= (cells at: aPlayer) sum ]   ) not ]))! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:15:59' prior: 50880833!
hasAlreadyWon: aPlayer
	
	^ (((self hasPlayedThreeChips: aPlayer) and:
		[ ((  (cells at: aPlayer) allSatisfy: [:aCell | 3 * aCell ~= (cells at: aPlayer) sum ]   ) not )]))! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:16:46' prior: 50880841!
hasAlreadyWon: aPlayer
	
	^ (((self hasPlayedThreeChips: aPlayer) and:
		[ self hasThreeAlignedChips: aPlayer ]))! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:16:58'!
hasThreeAlignedChips: aPlayer
	
	^ (((self hasPlayedThreeChips: aPlayer) and:
		[ self hasThreeAlignedChips: aPlayer ]))! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:17:18' prior: 50880856!
hasThreeAlignedChips: aPlayer
	^ ((cells at: aPlayer) allSatisfy: [:aCell | 3 * aCell ~= (cells at: aPlayer) sum ]) not! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 20:17:42'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 20:17:42'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 20:17:42'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 20:17:42'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 20:17:42'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 20:17:42'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 20:17:42'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 20:17:42'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 20:17:42'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 20:17:42'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 20:17:42'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:17:42'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:17:42'!
PASSED!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:18:23' prior: 50880338!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer

	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	(cells at: actualPlayer) add: aCell.
	nextPlayer := nextMovingPlayer! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:18:32' prior: 50873177!
isOPlayingNext
	^nextPlayer =#O! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:18:34' prior: 50880924!
isOPlayingNext
	^nextPlayer = #O! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:18:42' prior: 50880815!
isOver
	
	^ (self hasAlreadyWon: 'X') or: [ self hasAlreadyWon: #O]! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:18:46' prior: 50880932!
isOver
	
	^ (self hasAlreadyWon: #X) or: [ self hasAlreadyWon: #O]! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:19:04' prior: 50873181!
isXPlayingNext
	^nextPlayer =#X! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:19:16' prior: 50878254!
placeOAt: aCell 
	self placeAt: aCell nextPlayer: #X actualPlayer: #O.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:19:28' prior: 50878259!
placeXAt: aCell 
	self placeAt: aCell nextPlayer: #O actualPlayer: #X
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:19:43' prior: 50880277 overrides: 16896425!
initialize
	cells := Dictionary new.
	cells at: #X put: OrderedCollection new.
	cells at: #O put: OrderedCollection new.
	nextPlayer := #X! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:20:05' prior: 50880942!
isXPlayingNext
	^nextPlayer = #X! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 20:20:20'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 20:20:20'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 20:20:20'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 20:20:20'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 20:20:20'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 20:20:20'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 20:20:20'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 20:20:20'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 20:20:20'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 20:20:20'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 20:20:20'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:20:20'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:20:20'!
PASSED!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:20:45' prior: 50880820!
hasPlayedThreeChips: aPlayer

	^ (cells at: aPlayer) size = 2! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 20:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 20:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 20:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 20:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 20:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 20:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 20:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 20:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 20:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 20:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 20:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:20:51'!
FAILURE!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:20:51'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:20:57' prior: 50881003!
hasPlayedThreeChips: aPlayer

	^ (cells at: aPlayer) size = 4! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 20:20:58'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 20:20:58'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 20:20:58'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 20:20:58'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 20:20:58'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 20:20:58'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 20:20:58'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 20:20:58'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 20:20:58'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 20:20:58'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 20:20:58'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:20:58'!
FAILURE!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:20:58'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:21:03' prior: 50881043!
hasPlayedThreeChips: aPlayer

	^ (cells at: aPlayer) size = 3! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:21:13' prior: 50880863!
hasThreeAlignedChips: aPlayer
	^ ((cells at: aPlayer) allSatisfy: [:aCell | 3 * aCell ~= (cells at: aPlayer) sum ])! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 20:21:15'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 20:21:15'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 20:21:15'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 20:21:15'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 20:21:15'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 20:21:15'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 20:21:15'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 20:21:15'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 20:21:15'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 20:21:15'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 20:21:15'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:21:15'!
FAILURE!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:21:15'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:21:15'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:21:24' prior: 50881088!
hasThreeAlignedChips: aPlayer
	^ ((cells at: aPlayer) allSatisfy: [:aCell | 3 * aCell ~= (cells at: aPlayer) sum ]) not! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/30/2020 20:23:38'!
test16
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.! !

!methodRemoval: TerniLapilliTest #test16 stamp: 'AM 10/30/2020 20:23:51'!
test16
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/30/2020 20:24:24'!
test16
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [ boardTerniLapilli moveAnOFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/30/2020 20:24:45' prior: 50881161!
test16
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	self should: [ boardTerniLapilli moveAnOFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 20:24:50'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 20:24:50'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 20:24:50'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 20:24:50'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 20:24:50'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 20:24:50'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 20:24:50'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 20:24:50'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 20:24:50'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 20:24:50'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 20:24:50'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 20:24:50'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:24:50'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:24:50'!
PASSED!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/30/2020 20:27:24' prior: 50881172!
test16
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnOFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/30/2020 20:28:52' prior: 50881222!
test16
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/30/2020 20:29:17' prior: 50881240!
test16
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/30/2020 20:24:24' prior: 50881258!
test16
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [ boardTerniLapilli moveAnOFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/30/2020 20:31:48'!
test20	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription .! !

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 20:32:13'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:33:41' prior: 50877755!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	(cells at: #O) size = 3 ifFalse: [
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription ].

	self error: self class canNotPlaceChipInOccupiedCellErrorDescription.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 20:33:43'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 20:33:43'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 20:33:43'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 20:33:43'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 20:33:43'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 20:33:43'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 20:33:43'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 20:33:43'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 20:33:43'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 20:33:43'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 20:33:43'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 20:33:43'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:33:43'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:33:43'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 20:33:43'!
PASSED!
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/30/2020 20:36:57'!
test21
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@1.
	self should: [boardTerniLapilli placeOAt: 2@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription! !

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 20:37:02'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/30/2020 20:37:30'!
canNotPlayWhenGameIsAlreadyOverErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/30/2020 20:37:43' prior: 50881375!
canNotPlayWhenGameIsAlreadyOverErrorDescription
	^'Can not play when game is already over.'! !

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 20:37:45'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 20:39:21' prior: 50880905!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	self isOver ifTrue: [self error: self class canNotPlayWhenGameIsAlreadyOverErrorDescription ].
	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	(cells at: actualPlayer) add: aCell.
	nextPlayer := nextMovingPlayer! !

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 20:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 20:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 20:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 20:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 20:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 20:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 20:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 20:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 20:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 20:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 20:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 20:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 20:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 20:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 20:39:27'!
PASSED!
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/30/2020 20:41:04' prior: 50881357!
test21
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@1.
	self should: [boardTerniLapilli placeOAt: 2@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/30/2020 20:42:25'!
test22
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 1@1.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@3.
	self should: [boardTerniLapilli moveAnXFrom: 3@1 to: 3@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/30/2020 20:43:00' prior: 50881473!
test22
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 1@1.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@3.
	boardTerniLapilli moveAnXFrom: 3@1 to: 3@2.
	self assert: boardTerniLapilli isOver
		! !
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/30/2020 20:43:08' prior: 50881490!
test22
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 1@1.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@3.
	boardTerniLapilli moveAnXFrom: 3@1 to: 3@2.
	self assert: boardTerniLapilli isOver.
		! !

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 20:44:12'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:45:28' prior: 50881306!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	(cells at: #O) size = 3 ifFalse: [
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription ].
	self placeXAt: anAdjacentFreeCell 
	self error: self class canNotPlaceChipInOccupiedCellErrorDescription.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:45:50' prior: 50881522!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	(cells at: #O) size = 3 ifFalse: [
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription ].
	self placeXAt: anAdjacentFreeCell nextPlayer: #O actualPlayer: #X.
	self error: self class canNotPlaceChipInOccupiedCellErrorDescription.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:45:58' prior: 50881534!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	(cells at: #O) size = 3 ifFalse: [
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription ].
	self placeAt: anAdjacentFreeCell nextPlayer: #O actualPlayer: #X.
	self error: self class canNotPlaceChipInOccupiedCellErrorDescription.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:47:06' prior: 50881547!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	(cells at: #O) size = 3 ifFalse: [
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription ].
	self placeAt: anAdjacentFreeCell nextPlayer: #O actualPlayer: #X.
	((cells at: #X) includes: anOccupiedCell) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] ! !

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 20:47:09'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 20:47:30'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:47:57' prior: 50881560!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	(cells at: #O) size = 3 ifFalse: [
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription ].
	((cells at: #X) includes: anAdjacentFreeCell ) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] 
	self placeAt: anAdjacentFreeCell nextPlayer: #O actualPlayer: #X.
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:48:00' prior: 50881580!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	(cells at: #O) size = 3 ifFalse: [
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription ].
	((cells at: #X) includes: anAdjacentFreeCell ) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	self placeAt: anAdjacentFreeCell nextPlayer: #O actualPlayer: #X.
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 20:48:02'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 20:48:02'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 20:48:02'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 20:48:02'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 20:48:02'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 20:48:02'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 20:48:02'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 20:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 20:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 20:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 20:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 20:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 20:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 20:48:03'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 20:48:03'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 20:48:03'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:49:32' prior: 50881595!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	(cells at: #O) size = 3 ifFalse: [
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription ].
	((cells at: #X) includes: anAdjacentFreeCell ) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	(cells at: #X) remove: anAdjacentFreeCell.
	self placeAt: anAdjacentFreeCell nextPlayer: #O actualPlayer: #X.
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 20:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 20:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 20:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 20:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 20:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 20:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 20:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 20:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 20:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 20:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 20:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 20:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 20:49:38'!
FAILURE!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 20:49:38'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 20:49:38'!
ERROR!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 20:49:44'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:50:38' prior: 50881658!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	(cells at: #O) size = 3 ifFalse: [
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription ].
	((cells at: #X) includes: anAdjacentFreeCell ) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	(cells at: #X) remove: anOccupiedCell.
	self placeAt: anAdjacentFreeCell nextPlayer: #O actualPlayer: #X.
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 20:50:43'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 20:50:43'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 20:50:43'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 20:50:43'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 20:50:43'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 20:50:43'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 20:50:43'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 20:50:43'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 20:50:43'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 20:50:43'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 20:50:43'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 20:50:43'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:50:43'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:50:43'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 20:50:43'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 20:50:43'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 20:50:43'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:51:42' prior: 50881722!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	(cells at: #O) size = 3 ifFalse: [
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription ].
	((cells at: #X) includes: anAdjacentFreeCell ) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	(cells at: #X) remove: anOccupiedCell.
	self placeAt: anAdjacentFreeCell nextPlayer: #O actualPlayer: #X.
! !
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/30/2020 20:53:01' prior: 50881505!
test22
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 1@3.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 2@3.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli moveAnXFrom: 2@3 to: 3@3.
	boardTerniLapilli moveAnOFrom: 3@1 to: 3@2.
	self assert: boardTerniLapilli isOver.
		! !

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 20:53:02'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:54:48' prior: 50877889!
moveAnOFrom: anOccupiedCell to: anAdjacentFreeCell
	(cells at: #O ) size = 3 ifFalse: [ 
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription  ].
	(cells at: #X) remove: anOccupiedCell.
	self placeAt: anAdjacentFreeCell nextPlayer: #O actualPlayer: #X.! !

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 20:54:50'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:55:16' prior: 50881818!
moveAnOFrom: anOccupiedCell to: anAdjacentFreeCell
	(cells at: #O ) size = 3 ifFalse: [ 
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription  ].
	(cells at: #O) remove: anOccupiedCell.
	self placeAt: anAdjacentFreeCell nextPlayer: #O actualPlayer: #X.! !

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 20:55:18'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:55:34' prior: 50881833!
moveAnOFrom: anOccupiedCell to: anAdjacentFreeCell
	(cells at: #O ) size = 3 ifFalse: [ 
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription  ].
	(cells at: #O) remove: anOccupiedCell.
	self placeAt: anAdjacentFreeCell nextPlayer: #X actualPlayer: #O.! !

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 20:55:36'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 20:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 20:55:57'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:57:03'!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(cells at: #O) size = 3 ifFalse: [
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription ].
	((cells at: #X) includes: anAdjacentFreeCell ) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	(cells at: #X) remove: anOccupiedCell.
	self placeAt: anAdjacentFreeCell nextPlayer: #O actualPlayer: #X.
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:57:57' prior: 50881910!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(cells at: #O) size = 3 ifFalse: [
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription ].
	((cells at: actualPlayer) includes: anAdjacentFreeCell ) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	(cells at: actualPlayer) remove: anOccupiedCell.
	self placeAt: anAdjacentFreeCell nextPlayer: followingPlayer actualPlayer: actualPlayer.
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:58:50' prior: 50881848!
moveAnOFrom: anOccupiedCell to: anAdjacentFreeCell
	self moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #O nextPlayer: #X! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 20:59:00' prior: 50881783!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	self moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #X nextPlayer: #O
! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/30/2020 21:01:12'!
test23	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription .! !

!methodRemoval: TerniLapilliTest #test23 stamp: 'AM 10/30/2020 21:01:36'!
test23	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription .!

Object subclass: #TerniLapilliState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliState category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:02:28'!
Object subclass: #TerniLapilliState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilli subclass: #TerniLapilliPlacingChips
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliPlacingChips category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:02:54'!
TerniLapilli subclass: #TerniLapilliPlacingChips
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilli subclass: #TerniLapilliStatePlacingChips
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliStatePlacingChips category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:02:59'!
TerniLapilli subclass: #TerniLapilliStatePlacingChips
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliPlacingChips stamp: 'AM 10/30/2020 21:03:05'!
TerniLapilli subclass: #TerniLapilliPlacingChips
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliStatePlacingChips stamp: 'AM 10/30/2020 21:03:27'!
TerniLapilli subclass: #TerniLapilliStatePlacingChips
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliState subclass: #TerniLapilliStatePlacingChips
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliStatePlacingChips category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:03:37'!
TerniLapilliState subclass: #TerniLapilliStatePlacingChips
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliState subclass: #TerniLapilliStateMovingChips
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliStateMovingChips category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:03:44'!
TerniLapilliState subclass: #TerniLapilliStateMovingChips
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliState subclass: #TerniLapilliStateGameOver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliStateGameOver category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:03:52'!
TerniLapilliState subclass: #TerniLapilliStateGameOver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliStateMovingChips category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:05:26'!
TerniLapilliState subclass: #TerniLapilliStateMovingChips
	instanceVariableNames: 'nextPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliStateMovingChips category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:05:29'!
TerniLapilliState subclass: #TerniLapilliStateMovingChips
	instanceVariableNames: 'nextPlayer cells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliStateMovingChips methodsFor: 'nil' stamp: 'AM 10/30/2020 21:05:23'!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	self isOver ifTrue: [self error: self class canNotPlayWhenGameIsAlreadyOverErrorDescription ].
	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	(cells at: actualPlayer) add: aCell.
	nextPlayer := nextMovingPlayer! !
!TerniLapilliStateGameOver methodsFor: 'nil' stamp: 'AM 10/30/2020 21:06:09'!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
! !

!classDefinition: #TerniLapilliStateGameOver category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:06:40'!
TerniLapilliState subclass: #TerniLapilliStateGameOver
	instanceVariableNames: 'cells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliStateGameOver methodsFor: 'nil' stamp: 'AM 10/30/2020 21:06:36'!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(cells at: #O) size = 3 ifFalse: [
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription ].
	((cells at: actualPlayer) includes: anAdjacentFreeCell ) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	(cells at: actualPlayer) remove: anOccupiedCell.
	self placeAt: anAdjacentFreeCell nextPlayer: followingPlayer actualPlayer: actualPlayer.
! !

!classDefinition: #TerniLapilliStateMovingChips category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:07:25'!
TerniLapilliState subclass: #TerniLapilliStateMovingChips
	instanceVariableNames: 'nextPlayer cells board'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliStateMovingChips methodsFor: 'nil' stamp: 'AM 10/30/2020 21:07:22'!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	board error: board class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription 
! !

!classRenamed: #TerniLapilliStatePlacingChips as: #TerniLapilliStateGameOverBien stamp: 'AM 10/30/2020 21:07:54'!
Smalltalk renameClassNamed: #TerniLapilliStatePlacingChips as: #TerniLapilliStateGameOverBien!

!classRenamed: #TerniLapilliStateGameOver as: #TerniLapilliStatePlacing stamp: 'AM 10/30/2020 21:08:10'!
Smalltalk renameClassNamed: #TerniLapilliStateGameOver as: #TerniLapilliStatePlacing!

!classRenamed: #TerniLapilliStateMovingChips as: #TerniLapilliStatePlacingChips2 stamp: 'AM 10/30/2020 21:08:55'!
Smalltalk renameClassNamed: #TerniLapilliStateMovingChips as: #TerniLapilliStatePlacingChips2!

!classRenamed: #TerniLapilliStatePlacing as: #TerniLapilliStateMoving stamp: 'AM 10/30/2020 21:09:02'!
Smalltalk renameClassNamed: #TerniLapilliStatePlacing as: #TerniLapilliStateMoving!

!classRenamed: #TerniLapilliStatePlacingChips2 as: #TerniLapilliStatePlacing stamp: 'AM 10/30/2020 21:09:09'!
Smalltalk renameClassNamed: #TerniLapilliStatePlacingChips2 as: #TerniLapilliStatePlacing!

!classRenamed: #TerniLapilliStateGameOverBien as: #TerniLapilliStateGameOver stamp: 'AM 10/30/2020 21:09:15'!
Smalltalk renameClassNamed: #TerniLapilliStateGameOverBien as: #TerniLapilliStateGameOver!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:10:08'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer cells state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 21:10:06' prior: 50881389!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	state placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 21:10:20' prior: 50880946!
placeOAt: aCell 
	state placeAt: aCell nextPlayer: #X actualPlayer: #O.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 21:10:35' prior: 50880951!
placeXAt: aCell 
	state placeAt: aCell nextPlayer: #O actualPlayer: #X
! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 21:10:43' prior: 50882230!
placeOAt: aCell 
	state placeAt: aCell nextPlayer: #X actualPlayer: #O.! !

!methodRemoval: TerniLapilli #placeAt:nextPlayer:actualPlayer: stamp: 'AM 10/30/2020 21:10:48'!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	state placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 21:11:09' prior: 50881947!
moveAnOFrom: anOccupiedCell to: anAdjacentFreeCell
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #O nextPlayer: #X! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 21:11:13' prior: 50881955!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #X nextPlayer: #O
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 21:11:34' prior: 50881928!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer	
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	
! !

!methodRemoval: TerniLapilli #moveFrom:to:actualPlayer:nextPlayer: stamp: 'AM 10/30/2020 21:11:44'!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer	
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	
!

!methodRemoval: TerniLapilli #moveAnXFrom:to: stamp: 'AM 10/30/2020 21:11:51'!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #X nextPlayer: #O
!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 21:12:37' prior: 50880937!
isOver
	
	^ state isOver! !
!TerniLapilliStateGameOver methodsFor: 'nil' stamp: 'AM 10/30/2020 21:12:55'!
isOver
	^true! !
!TerniLapilliStateMoving methodsFor: 'nil' stamp: 'AM 10/30/2020 21:13:03'!
isOver
	^false! !
!TerniLapilliStatePlacing methodsFor: 'nil' stamp: 'AM 10/30/2020 21:13:12'!
isOver
	^false! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 21:13:26'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:13:26'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 21:13:26'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 21:13:26'!
ERROR!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 21:13:26'!
FAILURE!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 21:13:26'!
FAILURE!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 21:13:26'!
FAILURE!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 21:13:26'!
FAILURE!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 21:13:26'!
FAILURE!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 21:13:26'!
FAILURE!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 21:13:26'!
FAILURE!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 21:13:26'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 21:13:26'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 21:13:26'!
ERROR!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 21:13:26'!
ERROR!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 21:13:26'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 21:13:26'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 21:14:49' prior: 50880957 overrides: 16896425!
initialize
	cells := Dictionary new.
	cells at: #X put: OrderedCollection new.
	cells at: #O put: OrderedCollection new.
	nextPlayer := #X.
	state := TerniLapilliStatePlacing for: self with: cells playing: nextPlayer.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 21:14:57'!
ERROR!
!TerniLapilliState class methodsFor: 'instance creation' stamp: 'AM 10/30/2020 21:15:09'!
for: aTerniLapilli with: aDictionary playing: aSymbol 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aTerniLapilli with: aDictionary playing: aSymbol ! !
!TerniLapilliState class methodsFor: 'instance creation' stamp: 'AM 10/30/2020 21:15:43' prior: 50882415!
for: aTerniLapilli with: aBoard playing: aPlayer 
	^self new initializeFor: aTerniLapilli with: aBoard playing: aPlayer ! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 21:15:44'!
ERROR!

!classDefinition: #TerniLapilliState category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:16:03'!
Object subclass: #TerniLapilliState
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliState subclass: #TerniLapilliStateMoving
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliStateMoving category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:16:25'!
TerniLapilliState subclass: #TerniLapilliStateMoving
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliState subclass: #TerniLapilliStatePlacing
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliStatePlacing category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:16:31'!
TerniLapilliState subclass: #TerniLapilliStatePlacing
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 21:16:35'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:16:35'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 21:16:35'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 21:16:35'!
ERROR!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 21:16:35'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 21:16:36'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 21:16:36'!
ERROR!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 21:16:36'!
ERROR!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 21:16:36'!
ERROR!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 21:16:36'!
ERROR!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 21:16:36'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 21:16:36'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 21:16:36'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 21:16:36'!
ERROR!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 21:16:36'!
ERROR!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 21:16:36'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 21:16:36'!
ERROR!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 21:16:38'!
ERROR!

!classDefinition: #TerniLapilliState category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:16:54'!
Object subclass: #TerniLapilliState
	instanceVariableNames: 'terniLapilli board'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliState category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:16:56'!
Object subclass: #TerniLapilliState
	instanceVariableNames: 'terniLapilli board player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliState methodsFor: 'initializing' stamp: 'AM 10/30/2020 21:16:56'!
initializeFor: aTerniLapilli with: aBoard playing: aPlayer 
	self shouldBeImplemented.
	terniLapilli := aTerniLapilli.
	board := aBoard.
	player := aPlayer.! !
!TerniLapilliState methodsFor: 'initializing' stamp: 'AM 10/30/2020 21:17:05' prior: 50882533!
initializeFor: aTerniLapilli with: aBoard playing: aPlayer
	terniLapilli := aTerniLapilli.
	board := aBoard.
	player := aPlayer.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 21:17:07'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:17:10'!
ERROR!

!classDefinition: #TerniLapilliState category: 'Terni Lapilli' stamp: 'AM 10/30/2020 21:19:25'!
Object subclass: #TerniLapilliState
	instanceVariableNames: 'terniLapilli board nextPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 21:19:25' prior: 50882541!
initializeFor: aTerniLapilli with: aBoard playing: aPlayer
	terniLapilli := aTerniLapilli.
	board := aBoard.
	nextPlayer := aPlayer.! !
!TerniLapilliStatePlacing methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 21:19:37' prior: 50882104!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	self isOver ifTrue: [self error: self class canNotPlayWhenGameIsAlreadyOverErrorDescription ].
	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = nextMovingPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((board at: #X) includes: aCell)
		or: [(board at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	(board at: actualPlayer) add: aCell.
	nextPlayer := nextMovingPlayer! !
!TerniLapilliStatePlacing methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 21:19:42' prior: 50882571!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	(board at: actualPlayer) add: aCell.
	nextPlayer := nextMovingPlayer! !
!TerniLapilli methodsFor: 'nil' stamp: 'AM 10/30/2020 21:20:59'!
canBePlacedAt: aCell by: actualPlayer
	self isOver ifTrue: [self error: self class canNotPlayWhenGameIsAlreadyOverErrorDescription ].
	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = actualPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 21:21:34' prior: 50882235!
placeXAt: aCell 
	self canBePlacedAt: aCell by: #X.
	state placeAt: aCell nextPlayer: #O actualPlayer: #X
! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 21:21:40' prior: 50882240!
placeOAt: aCell 
	self canBePlacedAt: aCell by: #X.
	state placeAt: aCell nextPlayer: #X actualPlayer: #O.! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 21:22:03' prior: 50882626!
placeOAt: aCell 
	self canBePlacedAt: aCell by: #O.
	state placeAt: aCell nextPlayer: #X actualPlayer: #O.! !
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 21:22:56' prior: 50882140!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	((board at: actualPlayer) includes: anAdjacentFreeCell ) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	(board at: actualPlayer) remove: anOccupiedCell.
	self placeAt: anAdjacentFreeCell nextPlayer: followingPlayer actualPlayer: actualPlayer.
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 21:23:15'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:23:15'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 21:23:15'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 21:23:15'!
ERROR!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 21:23:15'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 21:23:15'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 21:23:15'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 21:23:15'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 21:23:15'!
FAILURE!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 21:23:15'!
FAILURE!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 21:23:15'!
FAILURE!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 21:23:15'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 21:23:15'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 21:23:15'!
ERROR!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 21:23:15'!
ERROR!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 21:23:15'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 21:23:15'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 21:23:44' prior: 50880928!
isOPlayingNext
	^state nextPlayer = #O! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 21:23:50' prior: 50880964!
isXPlayingNext
	^state nextPlayer = #X! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 21:26:18' prior: 50882254!
moveAnOFrom: anOccupiedCell to: anAdjacentFreeCell
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #O nextPlayer: #X! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 21:26:47'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:26:47'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 21:26:47'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 21:26:47'!
ERROR!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 21:26:47'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 21:26:47'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 21:26:47'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 21:26:47'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 21:26:47'!
FAILURE!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 21:26:47'!
FAILURE!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 21:26:47'!
FAILURE!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 21:26:47'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 21:26:47'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 21:26:47'!
ERROR!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 21:26:47'!
ERROR!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 21:26:47'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 21:26:47'!
ERROR!
!TerniLapilliState methodsFor: 'nil' stamp: 'AM 10/30/2020 21:27:15'!
nextPlayer
	^nextPlayer! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 21:27:17'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:27:17'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 21:27:17'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 21:27:17'!
ERROR!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 21:27:17'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 21:27:17'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 21:27:17'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 21:27:17'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 21:27:17'!
FAILURE!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 21:27:17'!
FAILURE!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 21:27:17'!
FAILURE!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 21:27:17'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 21:27:17'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 21:27:17'!
ERROR!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 21:27:17'!
ERROR!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 21:27:17'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 21:27:17'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:27:29'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:27:29'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 21:27:49' prior: 50882601!
canBePlacedAt: aCell by: actualPlayer
	self isOver ifTrue: [self error: self class canNotPlayWhenGameIsAlreadyOverErrorDescription ].
	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	state nextPlayer = actualPlayer ifTrue: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 21:27:53'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:27:53'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 21:27:53'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 21:27:53'!
ERROR!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 21:27:53'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 21:27:53'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 21:27:53'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 21:27:53'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 21:27:53'!
FAILURE!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 21:27:53'!
FAILURE!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 21:27:53'!
FAILURE!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 21:27:53'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 21:27:53'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 21:27:53'!
ERROR!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 21:27:53'!
ERROR!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 21:27:53'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 21:27:53'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:28:03'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:28:03'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:28:58'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:28:58'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:29:11'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 21:29:31' prior: 50882815!
canBePlacedAt: aCell by: actualPlayer
	self isOver ifTrue: [self error: self class canNotPlayWhenGameIsAlreadyOverErrorDescription ].
	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	state nextPlayer = actualPlayer ifFalse: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].! !

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:29:34'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 21:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 21:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 21:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 21:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 21:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 21:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 21:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 21:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 21:29:41'!
FAILURE!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 21:29:41'!
FAILURE!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 21:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 21:29:41'!
FAILURE!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 21:29:41'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 21:29:41'!
FAILURE!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 21:29:41'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 21:29:41'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 21:29:47'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 21:30:30'!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #X nextPlayer: #O! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 21:30:35'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 21:30:35'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 21:30:35'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 21:30:35'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 21:30:35'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 21:30:35'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 21:30:35'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 21:30:35'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 21:30:35'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 21:30:35'!
FAILURE!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 21:30:35'!
FAILURE!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 21:30:35'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 21:30:35'!
FAILURE!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 21:30:35'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 21:30:35'!
FAILURE!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 21:30:35'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 21:30:35'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 21:30:38'!
ERROR!
!TerniLapilliStatePlacing methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 21:31:03' prior: 50882168!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	terniLapilli error: terniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription 
! !

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 21:31:05'!
ERROR!

----QUIT----(30 October 2020 22:55:05) CuisUniversity-4384.image priorSource: 17545782!

----STARTUP---- (30 October 2020 22:55:10) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/linux64/CuisUniversity-4384.image!


!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 22:55:44'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 22:55:44'!
FAILURE!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 22:55:44'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 22:55:44'!
FAILURE!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 22:55:44'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 22:55:44'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 22:55:56'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 22:56:30'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 22:56:30'!
FAILURE!
!TerniLapilliState class methodsFor: 'instance creation' stamp: 'AM 10/30/2020 23:00:15' prior: 50882426!
for: aTerniLapilli with: aBoard playing: aPlayer 
	(aTerniLapilli aPlayerHasThreeAlignedChips) ifTrue: [ ^TerniLapilliStateGameOver new initializeFor: aTerniLapilli with: aBoard playing: aPlayer ].
	(aBoard at: #O) size = 3 ifTrue: [^ TerniLapilliStateMoving new initializeFor: aTerniLapilli with: aBoard playing: aPlayer ].
	^TerniLapilliStatePlacing new initializeFor: aTerniLapilli with: aBoard playing: aPlayer ! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:00:24'!
ERROR!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:00:27'!
ERROR!
!TerniLapilli methodsFor: 'sadada' stamp: 'AM 10/30/2020 23:00:39'!
aPlayerHasThreeAlignedChips
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'sadada' stamp: 'AM 10/30/2020 23:02:02' prior: 50883154!
aPlayerHasThreeAlignedChips
	((self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #X]) or: [
		(self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #X]]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:02:04'!
ERROR!
!TerniLapilli methodsFor: 'sadada' stamp: 'AM 10/30/2020 23:02:26' prior: 50883159!
aPlayerHasThreeAlignedChips
	^((self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #X]) or: [
		(self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #X]]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:02:32'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:02:36'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:02:38'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:02:38'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:03:03'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:03:05'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:03:06'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:03:07'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:03:08'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:03:09'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:03:09'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:03:11'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:04:23' prior: 50882963!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #X nextPlayer: #O.
	self updateState.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:04:32' prior: 50882708!
moveAnOFrom: anOccupiedCell to: anAdjacentFreeCell
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #O nextPlayer: #X.
	self updateState! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 23:04:48' prior: 50882620!
placeXAt: aCell 
	self canBePlacedAt: aCell by: #X.
	state placeAt: aCell nextPlayer: #O actualPlayer: #X
	self updateState
! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 23:04:55' prior: 50882632!
placeOAt: aCell 
	self canBePlacedAt: aCell by: #O.
	state placeAt: aCell nextPlayer: #X actualPlayer: #O.
	self updateState! !
!TerniLapilli methodsFor: 'nil' stamp: 'AM 10/30/2020 23:06:05'!
updateState
	state := TerniLapilliState for: self with: cells playing: self nextPlayer! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:06:19'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:06:19'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:06:19'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:06:19'!
ERROR!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:06:19'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:06:19'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:06:19'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:06:19'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:06:19'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:06:19'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:06:19'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:06:19'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:06:19'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:06:19'!
ERROR!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:06:19'!
ERROR!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:06:19'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:06:19'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:06:23'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 23:07:39' prior: 50883233!
placeXAt: aCell 
	self canBePlacedAt: aCell by: #X.
	state placeAt: aCell nextPlayer: #O actualPlayer: #X.
	self updateState
! !

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:07:44'!
ERROR!
!TerniLapilli methodsFor: 'msda' stamp: 'AM 10/30/2020 23:08:02'!
nextPlayer
	self shouldBeImplemented.
	^nextPlayer! !
!TerniLapilli methodsFor: 'msda' stamp: 'AM 10/30/2020 23:08:14' prior: 50883310!
nextPlayer
	^state nextPlayer! !

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:08:25'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:08:25'!
FAILURE!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:08:25'!
FAILURE!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:08:30'!
FAILURE!
!TerniLapilli methodsFor: 'sadada' stamp: 'AM 10/30/2020 23:09:01' prior: 50883171!
aPlayerHasThreeAlignedChips
	^((self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #X]) or: [
		(self hasPlayedThreeChips: #O) and: [self hasThreeAlignedChips: #O]]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:09:04'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:09:04'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:09:04'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:09:04'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:09:04'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:09:04'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:09:04'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:09:04'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:09:04'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:09:04'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:09:04'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:09:04'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:09:04'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:09:04'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:09:04'!
FAILURE!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:09:04'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:09:04'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:09:07'!
FAILURE!
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:11:05' prior: 50882639!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(((board at: actualPlayer) includes: anAdjacentFreeCell ) or: [
		(board at: nextPlayer) includes: anAdjacentFreeCell 
		]) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	(board at: actualPlayer) remove: anOccupiedCell.
	self placeAt: anAdjacentFreeCell nextPlayer: followingPlayer actualPlayer: actualPlayer.
! !

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:11:15'!
FAILURE!
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:11:53' prior: 50883427!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(((board at: actualPlayer) includes: anAdjacentFreeCell ) or: [
		(board at: nextPlayer) includes: anAdjacentFreeCell 
		]) ifTrue: [terniLapilli error: terniLapilli class canNotPlaceChipInOccupiedCellErrorDescription] .
	(board at: actualPlayer) remove: anOccupiedCell.
	self placeAt: anAdjacentFreeCell nextPlayer: followingPlayer actualPlayer: actualPlayer.
! !

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:11:59'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:12:02'!
FAILURE!
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:14:31' prior: 50883447!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(((board at: actualPlayer) includes: anAdjacentFreeCell ) or: [
		(board at: nextPlayer) includes: anAdjacentFreeCell 
		]) ifTrue: [terniLapilli error: terniLapilli class canNotPlaceChipInOccupiedCellErrorDescription] .
	(board at: actualPlayer) remove: anOccupiedCell.	
	(board at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:14:40'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:14:40'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:14:40'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:14:40'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:14:40'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:14:40'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:14:40'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:14:40'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:14:40'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:14:40'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:14:40'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:14:41'!
FAILURE!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:14:41'!
FAILURE!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:15:05'!
FAILURE!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:15:05'!
FAILURE!
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:16:07' prior: 50883470!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(((board at: actualPlayer) includes: anAdjacentFreeCell ) or: [
		(board at: followingPlayer) includes: anAdjacentFreeCell 
		]) ifTrue: [terniLapilli error: terniLapilli class canNotPlaceChipInOccupiedCellErrorDescription] .
	(board at: actualPlayer) remove: anOccupiedCell.	
	(board at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer
! !

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:16:10'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:16:16'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:16:16'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:16:16'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:16:16'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:16:16'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:16:16'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:16:16'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:16:16'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:16:16'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:16:16'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:16:16'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:16:16'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:16:16'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:16:16'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:16:16'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:16:16'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:16:16'!
PASSED!
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:17:07' prior: 50883584!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(board at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:17:56' prior: 50883225!
moveAnOFrom: anOccupiedCell to: anAdjacentFreeCell
	(((cells at: #O) includes: anAdjacentFreeCell ) or: [
		(cells at: #X) includes: anAdjacentFreeCell 
		]) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #O nextPlayer: #X.
	self updateState! !
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:18:12' prior: 50883650!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(board at: #O) remove: anOccupiedCell.	
	(board at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:18:58' prior: 50883216!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	(((cells at: #O) includes: anAdjacentFreeCell ) or: [
		(cells at: #X) includes: anAdjacentFreeCell 
		]) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #X nextPlayer: #O.
	self updateState.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:19:05'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:19:05'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:19:05'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:19:05'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:19:05'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:19:05'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:19:05'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:19:05'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:19:05'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:19:05'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:19:05'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:19:05'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:19:05'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:19:05'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:19:05'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:19:05'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:19:05'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:19:05'!
ERROR!
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:19:31' prior: 50883674!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(board at: #O) remove: anOccupiedCell.	
	(board at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer
! !
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:19:42' prior: 50883747!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(board at: actualPlayer ) remove: anOccupiedCell.	
	(board at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:19:46'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:19:46'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:19:46'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:19:46'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:19:46'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:19:46'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:19:46'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:19:46'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:19:46'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:19:46'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:19:46'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:19:46'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:19:46'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:19:46'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:19:46'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:19:46'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:19:46'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:25:05'!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(((cells at: #O) includes: anAdjacentFreeCell ) or: [
		(cells at: #X) includes: anAdjacentFreeCell 
		]) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #X nextPlayer: #O.
	(cells at: actualPlayer ) remove: anOccupiedCell.	
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer
	self updateState.
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:25:36' prior: 50883814!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(((cells at: #O) includes: anAdjacentFreeCell ) or: [
		(cells at: #X) includes: anAdjacentFreeCell 
		]) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	(cells at: actualPlayer ) remove: anOccupiedCell.	
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer
	self updateState.
! !
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:25:54' prior: 50883758!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	terniLapilli moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:26:17' prior: 50883834!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(((cells at: #O) includes: anAdjacentFreeCell ) or: [
		(cells at: #X) includes: anAdjacentFreeCell 
		]) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	(cells at: actualPlayer ) remove: anOccupiedCell.	
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer.
	self updateState.
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:26:36' prior: 50883685!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #X nextPlayer: #O.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:26:43' prior: 50883863!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(((cells at: #O) includes: anAdjacentFreeCell ) or: [
		(cells at: #X) includes: anAdjacentFreeCell 
		]) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	(cells at: actualPlayer ) remove: anOccupiedCell.	
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer.
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:26:54' prior: 50883881!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #X nextPlayer: #O.
	self updateState ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:27:08' prior: 50883889!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(((cells at: #O) includes: anAdjacentFreeCell ) or: [
		(cells at: #X) includes: anAdjacentFreeCell 
		]) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	(cells at: actualPlayer ) remove: anOccupiedCell.	
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer.
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:27:26'!
PASSED!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 23:27:50' prior: 50883240!
placeOAt: aCell 
	state placeAt: aCell nextPlayer: #X actualPlayer: #O.
	self updateState! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 23:27:58' prior: 50883977!
placeOAt: aCell 
	self canBePlacedAt: aCell by: #O.
	state placeAt: aCell nextPlayer: #X actualPlayer: #O.
	self updateState! !
!TerniLapilliStatePlacing methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:28:33' prior: 50882594!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	terniLapilli placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:28:48'!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	(cells at: actualPlayer) add: aCell.
	nextPlayer := nextMovingPlayer! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:29:09' prior: 50883999!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	self canBePlacedAt: aCell by: actualPlayer.
	(cells at: actualPlayer) add: aCell.
	nextPlayer := nextMovingPlayer! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:29:12'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:29:12'!
FAILURE!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:29:12'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:29:12'!
FAILURE!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:29:12'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:29:12'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:29:12'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:29:12'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:29:12'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:29:12'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:29:12'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:29:12'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:29:12'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:29:12'!
ERROR!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:29:12'!
ERROR!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:29:12'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:29:12'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:29:15'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:29:49'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:29:49'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:30:04'!
ERROR!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 23:30:39' prior: 50883301!
placeXAt: aCell 
	state placeAt: aCell nextPlayer: #O actualPlayer: #X.
	self updateState
! !
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 23:30:43' prior: 50883983!
placeOAt: aCell 
	state placeAt: aCell nextPlayer: #X actualPlayer: #O.
	self updateState! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:30:45'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:30:45'!
FAILURE!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:30:45'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:30:45'!
FAILURE!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:30:45'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:30:45'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:30:45'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:30:45'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:30:45'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:30:45'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:30:45'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:30:45'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:30:45'!
ERROR!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:30:45'!
ERROR!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:30:45'!
ERROR!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:30:45'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:30:45'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:31:11' prior: 50882894!
canBePlacedAt: aCell by: actualPlayer
	self isOver ifTrue: [self error: self class canNotPlayWhenGameIsAlreadyOverErrorDescription ].
	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = actualPlayer ifFalse: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:31:16'!
FAILURE!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:31:16'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:32:32'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 23:33:00' prior: 50882703!
isXPlayingNext
	^nextPlayer = #X! !

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:33:02'!
FAILURE!
!TerniLapilli methodsFor: 'xxx' stamp: 'AM 10/30/2020 23:33:17' prior: 50882699!
isOPlayingNext
	^nextPlayer = #O! !

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:33:22'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:33:24'!
FAILURE!
!TerniLapilliStateGameOver methodsFor: 'nil' stamp: 'AM 10/30/2020 23:34:53'!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	terniLapilli error: terniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription ! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:34:59'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:34:59'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:34:59'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:34:59'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:34:59'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:34:59'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:34:59'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:34:59'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:34:59'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:34:59'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:34:59'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:34:59'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:34:59'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:34:59'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:34:59'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:34:59'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:34:59'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:35:13' prior: 50883659!
moveAnOFrom: anOccupiedCell to: anAdjacentFreeCell
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #O nextPlayer: #X.
	self updateState! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:35:17'!
PASSED!

Object subclass: #TerniLapilli
	instanceVariableNames: 'actualPlayer nextPlayer cells state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer cells state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'AM 10/30/2020 23:36:06'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer cells state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:37:14' prior: 50884129!
canBePlacedAt: aCell by: playerWantingToPlay
	self isOver ifTrue: [self error: self class canNotPlayWhenGameIsAlreadyOverErrorDescription ].
	(self isValid: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = playerWantingToPlay ifFalse: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].! !
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/30/2020 23:38:36'!
test23
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@2
	self should: [boardTerniLapilli placeOAt: 2@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/30/2020 23:38:48' prior: 50884356!
test23
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 2@2.
	self should: [boardTerniLapilli placeOAt: 2@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/30/2020 23:39:02' prior: 50884373!
test23
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@3.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 2@2.
	self should: [boardTerniLapilli placeOAt: 2@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/30/2020 23:39:08' prior: 50884390!
test23
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@3.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [boardTerniLapilli placeOAt: 2@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription.! !

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/30/2020 23:39:11'!
PASSED!
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/30/2020 23:39:33' prior: 50884407!
test23
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@3.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [boardTerniLapilli moveAnXFrom: 3@2 to: 2@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription.! !

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/30/2020 23:39:36'!
FAILURE!
!TerniLapilliStateGameOver methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:40:03'!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	terniLapilli moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/30/2020 23:40:07'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/30/2020 23:40:07'!
FAILURE!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:42:41'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/30/2020 23:42:41'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/30/2020 23:42:41'!
FAILURE!
!TerniLapilliStateGameOver methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:44:43' prior: 50884494!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	terniLapilli error: terniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription 
! !

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/30/2020 23:44:45'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:45:50' prior: 50883915!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(((cells at: #O) includes: anAdjacentFreeCell ) or: [
		(cells at: #X) includes: anAdjacentFreeCell 
		]) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	(cells at: actualPlayer ) remove: anOccupiedCell.	
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	"nextPlayer := followingPlayer."
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:45:52'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/30/2020 23:45:52'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:46:04' prior: 50884617!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(((cells at: #O) includes: anAdjacentFreeCell ) or: [
		(cells at: #X) includes: anAdjacentFreeCell 
		]) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	(cells at: actualPlayer ) remove: anOccupiedCell.	
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer.
! !
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/30/2020 23:46:43' prior: 50878330!
test03ThirdPlayerIsX
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/30/2020 23:47:09' prior: 50884699!
test03ThirdPlayerIsX
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	boardTerniLapilli moveAnXFrom: 2@2 to: 3@2. 
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/30/2020 23:47:18' prior: 50884715!
test03ThirdPlayerIsX
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	boardTerniLapilli moveAnXFrom: 2@2 to: 2@3. 
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/30/2020 23:47:29' prior: 50884732!
test03ThirdPlayerIsX
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	boardTerniLapilli moveAnXFrom: 2@2 to: 2@3. 
	self deny: boardTerniLapilli isXPlayingNext.
	self assert: boardTerniLapilli isOPlayingNext.! !

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:47:31'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:47:31'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:47:31'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/30/2020 23:47:32'!
PASSED!
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/29/2020 20:37:41' prior: 50884749!
test03ThirdPlayerIsX
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/30/2020 23:48:02'!
test24
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/30/2020 23:48:14' prior: 50884828!
test24
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/30/2020 23:48:46' prior: 50884839!
test24
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	boardTerniLapilli moveAnXFrom: 2@2 to: 2@3 
	self deny: boardTerniLapilli isXPlayingNext.
	self assert: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/30/2020 23:48:51' prior: 50884855!
test24
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	boardTerniLapilli moveAnXFrom: 2@2 to: 2@3.
	self deny: boardTerniLapilli isXPlayingNext.
	self assert: boardTerniLapilli isOPlayingNext.! !

!testRun: #TerniLapilliTest #test24 stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/30/2020 23:48:53'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'AM 10/30/2020 23:48:53'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:49:25' prior: 50884682!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(((cells at: #O) includes: anAdjacentFreeCell ) or: [
		(cells at: #X) includes: anAdjacentFreeCell 
		]) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	(cells at: actualPlayer ) remove: anOccupiedCell.	
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	"nextPlayer := followingPlayer."
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/30/2020 23:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'AM 10/30/2020 23:49:26'!
FAILURE!

!testRun: #TerniLapilliTest #test24 stamp: 'AM 10/30/2020 23:49:26'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:49:34' prior: 50884941!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(((cells at: #O) includes: anAdjacentFreeCell ) or: [
		(cells at: #X) includes: anAdjacentFreeCell 
		]) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription] .
	(cells at: actualPlayer ) remove: anOccupiedCell.	
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer.
! !

!methodRemoval: TerniLapilli #nextPlayer stamp: 'AM 10/30/2020 23:52:05'!
nextPlayer
	^state nextPlayer!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:52:13' prior: 50883247!
updateState
	state := TerniLapilliState for: self with: cells playing: nextPlayer! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/30/2020 23:53:30'!
isWithinBoardLimits: aCell
	^((aCell x) between: 1 and: 3) and: [(aCell y) between: 1 and: 3]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/30/2020 23:53:30' prior: 50884337!
canBePlacedAt: aCell by: playerWantingToPlay
	self isOver ifTrue: [self error: self class canNotPlayWhenGameIsAlreadyOverErrorDescription ].
	(self isWithinBoardLimits: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = playerWantingToPlay ifFalse: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].! !

!methodRemoval: TerniLapilli #isValid: stamp: 'AM 10/30/2020 23:53:30'!
isValid: aCell
	^((aCell x) between: 1 and: 3) and: [(aCell y) between: 1 and: 3]!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 10/30/2020 23:56:07' prior: 50885043!
canBePlacedAt: aCell by: playerWantingToPlay
	(self isWithinBoardLimits: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = playerWantingToPlay ifFalse: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].! !
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/30/2020 23:57:23'!
test25
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	boardTerniLapilli moveAnXFrom: 2@2 to: 2@3.
	self deny: boardTerniLapilli isXPlayingNext.
	self assert: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/30/2020 23:58:41' prior: 50885085!
test25
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [boardTerniLapilli moveAnOFrom: 2@2 to: 2@3]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription .! !

!testRun: #TerniLapilliTest #test25 stamp: 'AM 10/30/2020 23:58:43'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/30/2020 23:59:00' prior: 50885102!
test25
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [boardTerniLapilli moveAnOFrom: 3@2 to: 2@3]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription .! !

!testRun: #TerniLapilliTest #test25 stamp: 'AM 10/30/2020 23:59:03'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'AM 10/30/2020 23:59:29'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'AM 10/31/2020 00:00:31'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'AM 10/31/2020 00:00:44'!
FAILURE!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 00:03:49' prior: 50885011!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(((cells at: #O) includes: anAdjacentFreeCell ) or: [
		(cells at: #X) includes: anAdjacentFreeCell 
		]) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription].
	actualPlayer = nextPlayer ifFalse: [ self error: self canNotPlayOnOtherPlayersTurnErrorDescription .].
	(cells at: actualPlayer ) remove: anOccupiedCell.	
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer.
! !

!testRun: #TerniLapilliTest #test25 stamp: 'AM 10/31/2020 00:03:52'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'AM 10/31/2020 00:04:36'!
FAILURE!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 00:05:05' prior: 50885149!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	(((cells at: #O) includes: anAdjacentFreeCell ) or: [
		(cells at: #X) includes: anAdjacentFreeCell 
		]) ifTrue: [self error: self class canNotPlaceChipInOccupiedCellErrorDescription].
	actualPlayer = nextPlayer ifFalse: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription .].
	(cells at: actualPlayer ) remove: anOccupiedCell.	
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer.
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'AM 10/31/2020 00:05:07'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'AM 10/31/2020 00:05:07'!
PASSED!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 00:06:14' prior: 50885174!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	(cells at: actualPlayer ) remove: anOccupiedCell.	
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer.
! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 00:07:18'!
test206
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 00:07:26'!
test26
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription .! !

!methodRemoval: TerniLapilliTest #test206 stamp: 'AM 10/31/2020 00:07:26'!
test206
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription .!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 00:07:38' prior: 50885276!
test26
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 00:07:52' prior: 50885310!
test26
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromEmptyCellErrorDescription .! !

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 00:07:56'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/31/2020 00:08:15'!
canNotMoveFromEmptyCellErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/31/2020 00:08:40' prior: 50885346!
canNotMoveFromEmptyCellErrorDescription
	^'Can not move from a cell that does not belong to you'.! !

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 00:08:55'!
FAILURE!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 00:09:42' prior: 50885247!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromEmptyCellErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer.
! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/31/2020 00:11:33'!
canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription
	^'Can not move from a cell that does not belong to you'.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/31/2020 00:11:33' prior: 50885327!
test26
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription .! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/31/2020 00:11:33' prior: 50885361!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer.
! !

!methodRemoval: TerniLapilli class #canNotMoveFromEmptyCellErrorDescription stamp: 'AM 10/31/2020 00:11:33'!
canNotMoveFromEmptyCellErrorDescription
	^'Can not move from a cell that does not belong to you'.!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'AM 10/31/2020 00:11:43'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 00:11:43'!
FAILURE!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 00:11:43'!
FAILURE!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'AM 10/31/2020 00:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 00:12:01'!
FAILURE!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 00:12:01'!
FAILURE!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 00:12:15'!
FAILURE!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 10/31/2020 00:12:58' prior: 50885068!
canBePlacedAt: aCell by: playerWantingToPlay
	(self isWithinBoardLimits: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = playerWantingToPlay ifFalse: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 00:13:07' prior: 50884007!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].
	self canBePlacedAt: aCell by: actualPlayer.
	(cells at: actualPlayer) add: aCell.
	nextPlayer := nextMovingPlayer! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 00:13:22'!
FAILURE!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 00:13:22'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 00:13:22'!
FAILURE!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 10/30/2020 23:56:07' prior: 50885541!
canBePlacedAt: aCell by: playerWantingToPlay
	(self isWithinBoardLimits: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = playerWantingToPlay ifFalse: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 00:14:18' prior: 50885553!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	self canBePlacedAt: aCell by: actualPlayer.
	(cells at: actualPlayer) add: aCell.
	nextPlayer := nextMovingPlayer! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 00:15:26' prior: 50885384!
test26
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 1@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription .! !

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test24 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 00:16:23'!
PASSED!
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/31/2020 00:16:54'!
test05ShouldNotPlaceAChipToTheRightOfTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 4@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !

!methodRemoval: TerniLapilliTest #test05XShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 00:16:54'!
test05XShouldNotPlaceAChipToTheRightOfTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 4@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.!
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/31/2020 00:17:29'!
test07ShouldNotPlaceAChipToTheLeftOfTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 0@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !

!methodRemoval: TerniLapilliTest #test07 stamp: 'AM 10/31/2020 00:17:29'!
test07
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 0@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.!
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/31/2020 00:17:51'!
test09ShouldNotPlaceAChipBelowTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 2@0 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !

!methodRemoval: TerniLapilliTest #test09 stamp: 'AM 10/31/2020 00:17:51'!
test09
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 2@0 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.!
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 10/31/2020 00:18:04'!
test11ShouldNotPlaceAChipAboveTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 2@4 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !

!methodRemoval: TerniLapilliTest #test11 stamp: 'AM 10/31/2020 00:18:04'!
test11
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeXAt: 2@4 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 00:18:54' prior: 50885402!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	self changePlayer.
! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 00:19:09' prior: 50885641!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	self canBePlacedAt: aCell by: actualPlayer.
	(cells at: actualPlayer) add: aCell.
	self changePlayer.! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 00:19:19' prior: 50885823!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	self canBePlacedAt: aCell by: actualPlayer.
	(cells at: actualPlayer) add: aCell.
	nextPlayer := nextMovingPlayer! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 00:19:33' prior: 50885808!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/31/2020 00:20:06'!
test24AfterAMovingOperationOfXIsOTurn
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	boardTerniLapilli moveAnXFrom: 2@2 to: 2@3.
	self deny: boardTerniLapilli isXPlayingNext.
	self assert: boardTerniLapilli isOPlayingNext.! !

!methodRemoval: TerniLapilliTest #test24 stamp: 'AM 10/31/2020 00:20:06'!
test24
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	boardTerniLapilli moveAnXFrom: 2@2 to: 2@3.
	self deny: boardTerniLapilli isXPlayingNext.
	self assert: boardTerniLapilli isOPlayingNext.!
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/31/2020 00:20:27'!
test25AfterAMovingOperationOfOIsXTUrn
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [boardTerniLapilli moveAnOFrom: 3@2 to: 2@3]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription .! !

!methodRemoval: TerniLapilliTest #test25 stamp: 'AM 10/31/2020 00:20:27'!
test25
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [boardTerniLapilli moveAnOFrom: 3@2 to: 2@3]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription .!
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/31/2020 00:20:32'!
test25AfterAMovingOperationOfOIsXTurn
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [boardTerniLapilli moveAnOFrom: 3@2 to: 2@3]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription .! !

!methodRemoval: TerniLapilliTest #test25AfterAMovingOperationOfOIsXTUrn stamp: 'AM 10/31/2020 00:20:32'!
test25AfterAMovingOperationOfOIsXTUrn
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [boardTerniLapilli moveAnOFrom: 3@2 to: 2@3]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription .!
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 10/31/2020 00:21:42'!
test25MovingOperationDoesNotAllowPlayingOnOthersTurn
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [boardTerniLapilli moveAnOFrom: 3@2 to: 2@3]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription .! !

!methodRemoval: TerniLapilliTest #test25AfterAMovingOperationOfOIsXTurn stamp: 'AM 10/31/2020 00:21:43'!
test25AfterAMovingOperationOfOIsXTurn
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [boardTerniLapilli moveAnOFrom: 3@2 to: 2@3]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription .!
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/31/2020 00:21:58'!
test17InitialGameIsNotOver
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self deny: boardTerniLapilli isOver.! !

!methodRemoval: TerniLapilliTest #test17 stamp: 'AM 10/31/2020 00:21:58'!
test17
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self deny: boardTerniLapilli isOver.!
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/31/2020 00:22:24'!
test18FirstRowForXIsWinningGame
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@1.
	self assert: boardTerniLapilli isOver.! !

!methodRemoval: TerniLapilliTest #test18 stamp: 'AM 10/31/2020 00:22:24'!
test18
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@1.
	self assert: boardTerniLapilli isOver.!
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 10/31/2020 00:22:59'!
test19FirstColumnForOISWinningGame
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@3.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self assert: boardTerniLapilli isOver.! !

!methodRemoval: TerniLapilliTest #test19 stamp: 'AM 10/31/2020 00:22:59'!
test19
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@3.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self assert: boardTerniLapilli isOver.!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 00:27:39'!
test27
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 1@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 00:28:31' prior: 50886059!
test27
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@1 to: 3@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription .! !

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 00:28:35'!
FAILURE!

----QUIT----(31 October 2020 00:32:50) CuisUniversity-4384.image priorSource: 17644154!

----STARTUP---- (31 October 2020 09:28:41) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/linux64/CuisUniversity-4384.image!

!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 09:29:39' prior: 50886077!
test27
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@1 to: 3@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 09:30:08' prior: 50886104!
test27
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@1 to: 3@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.! !

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 09:30:16'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/31/2020 09:30:26'!
canNotMoveChipToNonAdjacentCellErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/31/2020 09:30:39' prior: 50886142!
canNotMoveChipToNonAdjacentCellErrorDescription
	^'Can not move a chip to a non adjacent cell.'! !

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 09:30:41'!
FAILURE!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 09:34:01' prior: 50885841!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	(anOccupiedCell = 3@1 and: [3@3 = anAdjacentFreeCell]) ifTrue: [self error: self class canNotMoveChipToNonAdjacentCellErrorDescription ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 09:34:04'!
FAILURE!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 09:34:17'!
FAILURE!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 09:34:57' prior: 50886157!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	(anOccupiedCell = (3@1 )and: [3@3 = anAdjacentFreeCell]) ifTrue: [self error: self class canNotMoveChipToNonAdjacentCellErrorDescription ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 09:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 09:35:11'!
PASSED!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 09:40:41'!
test28
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [ boardTerniLapilli moveAnXFrom: 3@2 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.! !

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 09:40:44'!
FAILURE!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 09:42:20' prior: 50886182!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	(anOccupiedCell fourNeighbors includes: anAdjacentFreeCell ) ifTrue: [self error: self class canNotMoveChipToNonAdjacentCellErrorDescription ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 09:42:22'!
FAILURE!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 09:42:49'!
FAILURE!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 09:43:57'!
FAILURE!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 09:43:57'!
FAILURE!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 09:45:34'!
ERROR!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 09:45:34'!
ERROR!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 09:45:34'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 09:45:34'!
FAILURE!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 09:45:34'!
FAILURE!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 09:45:40'!
FAILURE!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 09:47:23' prior: 50886289!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	(anOccupiedCell fourNeighbors includes: anAdjacentFreeCell ) ifFalse: [self error: self class canNotMoveChipToNonAdjacentCellErrorDescription ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 09:47:24'!
FAILURE!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 09:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 09:47:24'!
FAILURE!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 09:47:32'!
FAILURE!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 09:47:32'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 09:47:32'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 09:48:10' prior: 50885650!
test26
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription .! !

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 09:48:11'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 09:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 09:49:39'!
PASSED!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 09:56:24' prior: 50886269!
test28
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.
	self assert: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 09:56:39' prior: 50886638!
test28
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.
	self assert: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 09:56:52' prior: 50886653!
test28
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@1.
	boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.
	self assert: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 09:57:06'!
test29
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@1.
	boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.
	self assert: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 09:57:12' prior: 50886668!
test28
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [ boardTerniLapilli moveAnXFrom: 3@2 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.! !

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 09:57:14'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 09:57:14'!
ERROR!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 09:57:14'!
ERROR!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 09:57:27'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 09:57:31'!
ERROR!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 09:57:31'!
ERROR!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 09:58:28' prior: 50886389!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	((anOccupiedCell eightNeighbors includes: anAdjacentFreeCell )
	and: [    ]) ifFalse: [self error: self class canNotMoveChipToNonAdjacentCellErrorDescription ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 09:59:20' prior: 50886796!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	((anOccupiedCell eightNeighbors includes: anAdjacentFreeCell )
	and: [  (anOccupiedCell x + anOccupiedCell y) odd and: [(anOccupiedCell x + anOccupiedCell y) odd] ]) ifFalse: [self error: self class canNotMoveChipToNonAdjacentCellErrorDescription ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 09:59:35' prior: 50886817!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	((anOccupiedCell eightNeighbors includes: anAdjacentFreeCell )
	and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(anOccupiedCell x + anOccupiedCell y) even] ]) ifFalse: [self error: self class canNotMoveChipToNonAdjacentCellErrorDescription ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 09:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 09:59:43'!
ERROR!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 09:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 09:59:43'!
ERROR!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:00:50'!
ERROR!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:00:50'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:00:50'!
ERROR!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:01:01'!
ERROR!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:01:01'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:01:01'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:01:19'!
ERROR!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:01:34'!
ERROR!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:01:34'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:01:34'!
ERROR!

(anOccupiedCell x + anOccupiedCell y) even or: [(anOccupiedCell x + anOccupiedCell y) even]!

(anOccupiedCell x + anOccupiedCell y) even!

[(anOccupiedCell x + anOccupiedCell y) even]!

(anOccupiedCell x + anOccupiedCell y) even!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 10:04:06' prior: 50886841!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	((anOccupiedCell eightNeighbors includes: anAdjacentFreeCell )
	and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(anAdjacentFreeCell x + anAdjacentFreeCell y) even] ]) ifFalse: [self error: self class canNotMoveChipToNonAdjacentCellErrorDescription ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:04:08'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:04:12'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:09:44' prior: 50883370!
aPlayerHasThreeAlignedChips
	^((self hasPlayedThreeChips: #O) and: [self hasThreeAlignedChips: #X]) or: [
		(self hasPlayedThreeChips: #O) and: [self hasThreeAlignedChips: #O]]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:09:46'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:09:46'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:09:46'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:09:46'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:09:55' prior: 50887267!
aPlayerHasThreeAlignedChips
	^((self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #O]) or: [
		(self hasPlayedThreeChips: #O) and: [self hasThreeAlignedChips: #O]]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:09:56'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:09:56'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:09:56'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:09:56'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:10:01' prior: 50887346!
aPlayerHasThreeAlignedChips
	^((self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #X]) or: [
		(self hasPlayedThreeChips: #O) and: [self hasThreeAlignedChips: #O]]! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:10:04' prior: 50887425!
aPlayerHasThreeAlignedChips
	^((self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #X]) or: [
		(self hasPlayedThreeChips: #O) and: [self hasThreeAlignedChips: #X]]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:10:05'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:10:05'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:10:05'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:10:05'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:10:05'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:10:10' prior: 50887434!
aPlayerHasThreeAlignedChips
	^((self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #X]) or: [
		(self hasPlayedThreeChips: #O) and: [self hasThreeAlignedChips: #O]]! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:10:33' prior: 50887513!
aPlayerHasThreeAlignedChips
	^((self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #X]) or: [
		(self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #O]]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:10:34'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:10:34'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:11:02' prior: 50887522!
aPlayerHasThreeAlignedChips
	^((self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #X]) or: [
		(self hasPlayedThreeChips: #O) and: [self hasThreeAlignedChips: #O]]! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:11:14' prior: 50887601!
aPlayerHasThreeAlignedChips
"X tiene 3 => O tiene 3"
	^((self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #X]) or: [
		(self hasPlayedThreeChips: #O) and: [self hasThreeAlignedChips: #O]]! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:11:24' prior: 50887610!
aPlayerHasThreeAlignedChips
"X tiene 3 => O tiene 3 MIRAR ACA ANTES DE ENTREGAR"
	^((self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #X]) or: [
		(self hasPlayedThreeChips: #O) and: [self hasThreeAlignedChips: #O]]! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:14:46' prior: 50881083!
hasPlayedThreeChips: aPlayer

	^ (cells at: aPlayer) size = 2! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:14:46'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:14:46'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:14:46'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:14:46'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:14:46'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:14:46'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:14:46'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:14:50' prior: 50887630!
hasPlayedThreeChips: aPlayer

	^ (cells at: aPlayer) size = 4! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:14:52'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:14:52'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:14:52'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:14:52'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:14:52'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:14:52'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:15:02' prior: 50881133!
hasThreeAlignedChips: aPlayer
	^ ((cells at: aPlayer) allSatisfy: [:aCell | 2 * aCell ~= (cells at: aPlayer) sum ]) not! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:15:05'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:15:05'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:15:05'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:15:05'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:15:05'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:15:05'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:15:05'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:15:09' prior: 50887780!
hasThreeAlignedChips: aPlayer
	^ ((cells at: aPlayer) allSatisfy: [:aCell | 4 * aCell ~= (cells at: aPlayer) sum ]) not! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:15:10'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:15:10'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:15:10'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:15:10'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:15:10'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:15:10'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:15:15' prior: 50887857!
hasThreeAlignedChips: aPlayer
	^ ((cells at: aPlayer) allSatisfy: [:aCell | 3 * aCell ~= (cells at: aPlayer) sum ]) not! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:15:34' prior: 50887934!
hasThreeAlignedChips: aPlayer
	^ ((cells at: aPlayer) allSatisfy: [:aCell | 3 * aCell = (cells at: aPlayer) sum ]) not! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:15:35'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:15:35'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:15:35'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:15:35'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:15:35'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:15:35'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:15:36'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:15:36'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:15:36'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:15:36'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:15:36'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:15:36'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:15:36'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:15:36'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:15:36'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:15:36'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:15:36'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:15:36'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:15:36'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:15:36'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:15:36'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:15:36'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:15:36'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:15:36'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:15:41' prior: 50887941!
hasThreeAlignedChips: aPlayer
	^ ((cells at: aPlayer) allSatisfy: [:aCell | 3 * aCell ~= (cells at: aPlayer) sum ]) not! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:17:55' prior: 50884203!
isOPlayingNext
	^nextPlayer = #X! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:17:56'!
FAILURE!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:17:56'!
FAILURE!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:17:56'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:17:56'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:17:56'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:17:56'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:17:56'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:17:56'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:17:56'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:17:56'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:17:56'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:17:56'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:17:56'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:17:56'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:17:56'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:17:56'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:17:56'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:17:56'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:17:56'!
FAILURE!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:17:56'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:17:56'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:17:56'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:17:56'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:17:56'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:18:00' prior: 50888025!
isOPlayingNext
	^nextPlayer = #O! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:18:06' prior: 50885036!
isWithinBoardLimits: aCell
	^((aCell x) between: 0 and: 3) and: [(aCell y) between: 1 and: 3]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:18:08'!
FAILURE!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:18:08'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:18:08'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:18:08'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:18:08'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:18:08'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:18:08'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:18:13' prior: 50888104!
isWithinBoardLimits: aCell
	^((aCell x) between: 1 and: 3) and: [(aCell y) between: 1 and: 3]! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:18:15' prior: 50888180!
isWithinBoardLimits: aCell
	^((aCell x) between: 1 and: 4) and: [(aCell y) between: 1 and: 3]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:18:16'!
FAILURE!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:18:16'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:18:16'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:18:16'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:18:17'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:18:17'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:18:17'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:18:17'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:18:17'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:18:17'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:18:17'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:18:17'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:18:20' prior: 50888186!
isWithinBoardLimits: aCell
	^((aCell x) between: 1 and: 3) and: [(aCell y) between: 1 and: 3]! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:18:23' prior: 50888262!
isWithinBoardLimits: aCell
	^((aCell x) between: 1 and: 3) and: [(aCell y) between: 0 and: 3]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:18:25'!
FAILURE!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:18:25'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:18:25'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:18:25'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:18:25'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:18:25'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:18:25'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:18:25'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:18:35' prior: 50888268!
isWithinBoardLimits: aCell
	^((aCell x) between: 1 and: 3) and: [(aCell y) between: 1 and: 4]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:18:36'!
FAILURE!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:18:36'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:18:36'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:18:36'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:18:36'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:18:36'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:18:36'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:18:36'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:18:40' prior: 50888344!
isWithinBoardLimits: aCell
	^((aCell x) between: 1 and: 3) and: [(aCell y) between: 1 and: 3]! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:18:48' prior: 50884196!
isXPlayingNext
	^nextPlayer = #O! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:18:49'!
FAILURE!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:18:49'!
FAILURE!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:18:49'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:18:50'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:18:50'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:18:50'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:18:50'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:18:50'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:18:50'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:18:50'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:18:50'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:18:50'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:18:50'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:18:50'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:18:50'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:18:50'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:18:50'!
FAILURE!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:18:50'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:18:50'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:18:50'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:18:50'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:18:50'!
FAILURE!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 10/31/2020 10:19:00' prior: 50885624!
canBePlacedAt: aCell by: playerWantingToPlay
	(self isWithinBoardLimits: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = playerWantingToPlay ifFalse: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((cells at: #O) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:19:01'!
FAILURE!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:19:01'!
FAILURE!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:19:01'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:19:01'!
FAILURE!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:19:01'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:19:01'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:19:01'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:19:01'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:19:01'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:19:01'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:19:01'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:19:01'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:19:01'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:19:01'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:19:01'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:19:01'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:19:01'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:19:01'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:19:01'!
FAILURE!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:19:01'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:19:01'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:19:01'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:19:01'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:19:01'!
FAILURE!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 10/31/2020 10:19:16' prior: 50888501!
canBePlacedAt: aCell by: playerWantingToPlay
	(self isWithinBoardLimits: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = playerWantingToPlay ifFalse: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #X) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:19:17'!
FAILURE!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:19:17'!
FAILURE!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:19:17'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:19:17'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:19:17'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:19:17'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:19:17'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:19:17'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:19:17'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:19:17'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:19:17'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:19:17'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:19:17'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:19:17'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:19:17'!
FAILURE!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:19:17'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:19:17'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:19:18'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:19:18'!
FAILURE!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:19:18'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:19:18'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:19:18'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:19:18'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:19:18'!
FAILURE!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:19:43'!
FAILURE!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:19:43'!
FAILURE!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:19:43'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:19:43'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:19:43'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:19:43'!
FAILURE!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:19:43'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:19:43'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:19:43'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:19:43'!
FAILURE!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:19:43'!
FAILURE!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 10/31/2020 10:19:47' prior: 50888588!
canBePlacedAt: aCell by: playerWantingToPlay
	(self isWithinBoardLimits: aCell) ifFalse: [ self error: self class cellIsOutOfBoundsErrorDescription ].
	nextPlayer = playerWantingToPlay ifFalse: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 10:19:59' prior: 50884266!
moveAnOFrom: anOccupiedCell to: anAdjacentFreeCell
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #X nextPlayer: #O.
	self updateState! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:20:00'!
FAILURE!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:20:00'!
FAILURE!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:20:00'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:20:00'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:20:00'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:20:00'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:20:00'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:20:00'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:20:00'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:20:00'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:20:00'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:20:00'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:20:00'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:20:00'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:20:00'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:20:00'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:20:00'!
ERROR!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:20:00'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:20:00'!
FAILURE!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:20:00'!
FAILURE!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:20:00'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:20:00'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:20:00'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:20:00'!
FAILURE!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 10:20:07' prior: 50888762!
moveAnOFrom: anOccupiedCell to: anAdjacentFreeCell
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #O nextPlayer: #X.
	self updateState! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 10:20:14' prior: 50883906!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #O nextPlayer: #X.
	self updateState ! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:20:15'!
FAILURE!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:20:15'!
FAILURE!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:20:15'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:20:15'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:20:15'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:20:15'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:20:15'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:20:15'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:20:15'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:20:15'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:20:15'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:20:15'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:20:15'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:20:15'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:20:15'!
FAILURE!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:20:15'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:20:15'!
ERROR!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:20:15'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:20:15'!
ERROR!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:20:15'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:20:15'!
FAILURE!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:20:15'!
FAILURE!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:20:15'!
FAILURE!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:20:15'!
ERROR!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 10:20:22' prior: 50888849!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: #X nextPlayer: #O.
	self updateState ! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 10:21:33' prior: 50887171!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	((anOccupiedCell eightNeighbors includes: anAdjacentFreeCell )
	and: [  (anOccupiedCell x + anOccupiedCell y) odd or: [(anAdjacentFreeCell x + anAdjacentFreeCell y) even] ]) ifFalse: [self error: self class canNotMoveChipToNonAdjacentCellErrorDescription ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:21:35'!
FAILURE!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:21:35'!
FAILURE!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:21:35'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:21:35'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:21:35'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:21:35'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:21:35'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:21:35'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:21:35'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:21:35'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:21:35'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:21:35'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:21:35'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:21:35'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:21:35'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:21:35'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:21:35'!
ERROR!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:21:35'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:21:35'!
ERROR!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:21:35'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:21:35'!
FAILURE!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:21:35'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:21:35'!
FAILURE!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:21:35'!
FAILURE!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 10:21:40' prior: 50888936!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	((anOccupiedCell eightNeighbors includes: anAdjacentFreeCell )
	and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(anAdjacentFreeCell x + anAdjacentFreeCell y) even] ]) ifFalse: [self error: self class canNotMoveChipToNonAdjacentCellErrorDescription ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 10:21:53' prior: 50889030!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	((anOccupiedCell eightNeighbors includes: anAdjacentFreeCell )
	and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(anAdjacentFreeCell x + anAdjacentFreeCell y) even] ]) ifFalse: [self error: self class canNotMoveChipToNonAdjacentCellErrorDescription ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	"nextPlayer := followingPlayer" .
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:21:55'!
FAILURE!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:21:55'!
FAILURE!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:21:55'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:21:55'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:21:55'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:21:55'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:21:55'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:21:55'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:21:55'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:21:55'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:21:55'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:21:55'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:21:55'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:21:55'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:21:55'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:21:55'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:21:55'!
ERROR!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:21:55'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:21:55'!
FAILURE!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:21:55'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:21:55'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:21:55'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:21:55'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:21:55'!
FAILURE!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 10/31/2020 10:21:59' prior: 50889054!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	((anOccupiedCell eightNeighbors includes: anAdjacentFreeCell )
	and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(anAdjacentFreeCell x + anAdjacentFreeCell y) even] ]) ifFalse: [self error: self class canNotMoveChipToNonAdjacentCellErrorDescription ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !

!methodRemoval: TerniLapilliState #nextPlayer stamp: 'AM 10/31/2020 10:24:55'!
nextPlayer
	^nextPlayer!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 10:25:35'!
test30
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@1.
	boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.
	self assert: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 10:25:44'!
test2830
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [ boardTerniLapilli moveAnXFrom: 3@2 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.! !

!methodRemoval: TerniLapilliTest #test30 stamp: 'AM 10/31/2020 10:25:47'!
test30
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@1.
	boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.
	self assert: boardTerniLapilli isOver.!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 10:25:51'!
test30
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [ boardTerniLapilli moveAnXFrom: 3@2 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.! !

!methodRemoval: TerniLapilliTest #test2830 stamp: 'AM 10/31/2020 10:25:51'!
test2830
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [ boardTerniLapilli moveAnXFrom: 3@2 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 10:26:15' prior: 50889220!
test30
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [ boardTerniLapilli placeXAt: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 10/31/2020 10:26:41' prior: 50889254!
test30
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [ boardTerniLapilli placeXAt: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceAChipAfterSixthMoveErrorDescription.! !

!testRun: #TerniLapilliTest #test30 stamp: 'AM 10/31/2020 10:26:44'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/31/2020 10:26:57'!
canNotPlaceAChipAfterSixthMoveErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/31/2020 10:27:11' prior: 50889290!
canNotPlaceAChipAfterSixthMoveErrorDescription
	^'Can no place a chip after sixth turn.'! !

!testRun: #TerniLapilliTest #test30 stamp: 'AM 10/31/2020 10:27:14'!
FAILURE!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/31/2020 10:27:33'!
canNotPlaceAChipAfterSixthTurnErrorDescription
	^'Can no place a chip after sixth turn.'! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/31/2020 10:27:33' prior: 50889271!
test30
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [ boardTerniLapilli placeXAt: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceAChipAfterSixthTurnErrorDescription.! !

!methodRemoval: TerniLapilli class #canNotPlaceAChipAfterSixthMoveErrorDescription stamp: 'AM 10/31/2020 10:27:33'!
canNotPlaceAChipAfterSixthMoveErrorDescription
	^'Can no place a chip after sixth turn.'!
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 10/31/2020 10:30:47' prior: 50882126!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	! !
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 10/31/2020 10:31:16' prior: 50889336!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	terniLapilli error: terniLapilli class canNotPlaceAChipAfterSixthTurnErrorDescription 
! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/31/2020 10:31:34'!
canNotPlaceAChipAfterPlacingThreeChipsErrorDescription
	^'Can no place a chip after sixth turn.'! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/31/2020 10:31:34' prior: 50889312!
test30
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [ boardTerniLapilli placeXAt: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceAChipAfterPlacingThreeChipsErrorDescription.! !
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 10/31/2020 10:31:34' prior: 50889342!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	terniLapilli error: terniLapilli class canNotPlaceAChipAfterPlacingThreeChipsErrorDescription 
! !

!methodRemoval: TerniLapilli class #canNotPlaceAChipAfterSixthTurnErrorDescription stamp: 'AM 10/31/2020 10:31:34'!
canNotPlaceAChipAfterSixthTurnErrorDescription
	^'Can no place a chip after sixth turn.'!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:31:37'!
FAILURE!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:31:37'!
FAILURE!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:31:37'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:31:37'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:31:37'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:31:37'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:31:37'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:31:37'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:31:37'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:31:37'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:31:37'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:31:37'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:31:37'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:31:37'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:31:37'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:31:37'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:31:37'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:31:37'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:31:37'!
FAILURE!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:31:37'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:31:37'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:31:37'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:31:37'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:31:37'!
FAILURE!

!testRun: #TerniLapilliTest #test30 stamp: 'AM 10/31/2020 10:31:37'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:31:42'!
FAILURE!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:31:53'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:32:15' prior: 50888426!
isXPlayingNext
	^nextPlayer = #X! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:32:16'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:32:16'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:32:16'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:32:16'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:32:16'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:32:16'!
FAILURE!

!testRun: #TerniLapilliTest #test30 stamp: 'AM 10/31/2020 10:32:16'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:32:21'!
FAILURE!

state isOver!

state isOver!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:35:11'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:35:11'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:35:11'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:35:11'!
FAILURE!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:35:11'!
FAILURE!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:35:11'!
FAILURE!

!testRun: #TerniLapilliTest #test30 stamp: 'AM 10/31/2020 10:35:11'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:35:13'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 10/31/2020 10:36:13' prior: 50887705!
hasPlayedThreeChips: aPlayer

	^ (cells at: aPlayer) size = 3! !

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 10/31/2020 10:36:15'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 10/31/2020 10:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 10/31/2020 10:36:18'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 10/31/2020 10:36:18'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 10/31/2020 10:36:19'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 10/31/2020 10:36:19'!
PASSED!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/31/2020 10:43:21' prior: 50885376!
canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription
	^'Can not move from a cell that does not belong to you'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 10/31/2020 10:43:44'!
canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription
	^'Can not move from a cell that does not belong to you'.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 10/31/2020 10:43:44' prior: 50889148!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	((anOccupiedCell eightNeighbors includes: anAdjacentFreeCell )
	and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(anAdjacentFreeCell x + anAdjacentFreeCell y) even] ]) ifFalse: [self error: self class canNotMoveChipToNonAdjacentCellErrorDescription ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 10/31/2020 10:43:44' prior: 50886550!
test26
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription .! !

!methodRemoval: TerniLapilli class #canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription stamp: 'AM 10/31/2020 10:43:45'!
canNotMoveFromACellThatHasNotCorrespondingValueErrorDescription
	^'Can not move from a cell that does not belong to you'.!

----SNAPSHOT----(31 October 2020 11:15:35) CuisUniversity-4384.image priorSource: 17742270!

----STARTUP---- (31 October 2020 11:23:37) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/linux64/CuisUniversity-4384.image!


----QUIT----(31 October 2020 11:33:11) CuisUniversity-4384.image priorSource: 17857934!

----STARTUP---- (1 November 2020 14:44:32) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/imagen ternilapilli/CuisUniversity-4384.image!

!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 14:53:48'!
signalCellIsOutOfBounds

	^ self error: self class cellIsOutOfBoundsErrorDescription! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 14:53:48' prior: 50888745!
canBePlacedAt: aCell by: playerWantingToPlay
	(self isWithinBoardLimits: aCell) ifFalse: [ self signalCellIsOutOfBounds ].
	nextPlayer = playerWantingToPlay ifFalse: [ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 14:54:17'!
signalCanNOtPlayOnOtherPlayersTurn

	^ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 14:54:17' prior: 50889731!
canBePlacedAt: aCell by: playerWantingToPlay
	(self isWithinBoardLimits: aCell) ifFalse: [ self signalCellIsOutOfBounds ].
	nextPlayer = playerWantingToPlay ifFalse: [ self signalCanNOtPlayOnOtherPlayersTurn ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self error: self class canNotPlaceChipInOccupiedCellErrorDescription ].! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 14:54:33'!
signalCanNotPlaceChipInOccupiedCell

	^ self error: self class canNotPlaceChipInOccupiedCellErrorDescription! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 14:54:34' prior: 50889753!
canBePlacedAt: aCell by: playerWantingToPlay
	(self isWithinBoardLimits: aCell) ifFalse: [ self signalCellIsOutOfBounds ].
	nextPlayer = playerWantingToPlay ifFalse: [ self signalCanNOtPlayOnOtherPlayersTurn ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self signalCanNotPlaceChipInOccupiedCell ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 14:56:10' prior: 50887620!
aPlayerHasThreeAlignedChips
"X tiene 3 => O tiene 3 MIRAR ACA ANTES DE ENTREGAR"
	^((self hasPlayedThreeChips: #O) and: [self hasThreeAlignedChips: #X]) or: [
		(self hasPlayedThreeChips: #O) and: [self hasThreeAlignedChips: #O]]! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 14:56:11'!
FAILURE!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 11/1/2020 14:56:11'!
FAILURE!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 11/1/2020 14:56:11'!
PASSED!

!testRun: #TerniLapilliTest #test30 stamp: 'AM 11/1/2020 14:56:11'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 14:56:18' prior: 50889788!
aPlayerHasThreeAlignedChips
"X tiene 3 => O tiene 3 MIRAR ACA ANTES DE ENTREGAR"
	^((self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #X]) or: [
		(self hasPlayedThreeChips: #O) and: [self hasThreeAlignedChips: #O]]! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 14:56:48' prior: 50889870!
aPlayerHasThreeAlignedChips
"X tiene 3 => O tiene 3 MIRAR ACA ANTES DE ENTREGAR"
	^((self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #X]) or: [
		(self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #O]]! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 14:56:57' prior: 50889880!
aPlayerHasThreeAlignedChips
"X tiene 3 => O tiene 3 MIRAR ACA ANTES DE ENTREGAR"
	^((self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #X]) or: [
		(self hasPlayedThreeChips: #O) and: [self hasThreeAlignedChips: #O]]! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 14:57:39'!
signalCanNotMoveChipToNonAdjacentCell

	^ self error: self class canNotMoveChipToNonAdjacentCellErrorDescription! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 14:57:39' prior: 50889662!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	((anOccupiedCell eightNeighbors includes: anAdjacentFreeCell )
	and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(anAdjacentFreeCell x + anAdjacentFreeCell y) even] ]) ifFalse: [self signalCanNotMoveChipToNonAdjacentCell ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self error: self class canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 14:58:02'!
signlaCanNotMoveFromACellThatHasNoCorrespondingChip

	^ self error: self class canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 14:58:02' prior: 50889907!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self canBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	((anOccupiedCell eightNeighbors includes: anAdjacentFreeCell )
	and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(anAdjacentFreeCell x + anAdjacentFreeCell y) even] ]) ifFalse: [self signalCanNotMoveChipToNonAdjacentCell ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self signlaCanNotMoveFromACellThatHasNoCorrespondingChip ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !
!TerniLapilliStateGameOver methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 14:59:01' prior: 50884605!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	terniLapilli signalCanNotPlayWhenGameIsAlreadyOver.
! !
!TerniLapilliStateGameOver methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 14:59:05' prior: 50889960!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	terniLapilli signalCanNotPlayWhenGameIsAlreadyOver.
! !
!TerniLapilliStateGameOver methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 14:59:11' prior: 50889969!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	terniLapilli signalCanNotPlayWhenGameIsAlreadyOver.
! !
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 11/1/2020 14:59:47'!
signalCanNotPlayOnOtherPlayersTurn

	^ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 14:59:48' prior: 50889774!
canBePlacedAt: aCell by: playerWantingToPlay
	(self isWithinBoardLimits: aCell) ifFalse: [ self signalCellIsOutOfBounds ].
	nextPlayer = playerWantingToPlay ifFalse: [ self signalCanNotPlayOnOtherPlayersTurn ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self signalCanNotPlaceChipInOccupiedCell ].! !

!methodRemoval: TerniLapilli #signalCanNOtPlayOnOtherPlayersTurn stamp: 'AM 11/1/2020 14:59:48'!
signalCanNOtPlayOnOtherPlayersTurn

	^ self error: self class canNotPlayOnOtherPlayersTurnErrorDescription!
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 11/1/2020 15:00:11'!
signalCanNotPlayWhenGameIsAlreadyOver

	^ self 	error: self class canNotPlayWhenGameIsAlreadyOverErrorDescription 
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 11/1/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test30 stamp: 'AM 11/1/2020 15:00:13'!
PASSED!
!TerniLapilliStateGameOver methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:00:39' prior: 50884212!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	terniLapilli signalCanNotPlayWhenGameIsAlreadyOver! !
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:01:04' prior: 50889375!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	terniLapilli signalCanNotPlaceAChipAfterPlacingThreeChips 
! !
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 11/1/2020 15:01:31'!
signalCanNotPlaceAChipAfterPlacingThreeChips
	self error: self class canNotPlaceAChipAfterPlacingThreeChipsErrorDescription! !
!TerniLapilliStatePlacing methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:02:20' prior: 50883019!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	terniLapilli signalCanNotMoveAChipBeforePlacingTheThreeChips
! !
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 11/1/2020 15:02:46'!
signalCanNotMoveAChipBeforePlacingTheThreeChips
	self error: self class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription ! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 15:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 15:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 15:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 15:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 15:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 15:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 15:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 15:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 11/1/2020 15:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 11/1/2020 15:02:47'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 11/1/2020 15:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 15:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 15:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 11/1/2020 15:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 11/1/2020 15:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 11/1/2020 15:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 11/1/2020 15:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 11/1/2020 15:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 15:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 15:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 11/1/2020 15:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 11/1/2020 15:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 11/1/2020 15:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 11/1/2020 15:02:48'!
PASSED!

!testRun: #TerniLapilliTest #test30 stamp: 'AM 11/1/2020 15:02:48'!
PASSED!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 15:04:01'!
assertThatCanBePlacedAt: aCell by: playerWantingToPlay
	(self isWithinBoardLimits: aCell) ifFalse: [ self signalCellIsOutOfBounds ].
	nextPlayer = playerWantingToPlay ifFalse: [ self signalCanNotPlayOnOtherPlayersTurn ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self signalCanNotPlaceChipInOccupiedCell ].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:04:01' prior: 50889937!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self assertThatCanBePlacedAt: anAdjacentFreeCell by: actualPlayer.
	((anOccupiedCell eightNeighbors includes: anAdjacentFreeCell )
	and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(anAdjacentFreeCell x + anAdjacentFreeCell y) even] ]) ifFalse: [self signalCanNotMoveChipToNonAdjacentCell ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self signlaCanNotMoveFromACellThatHasNoCorrespondingChip ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:04:01' prior: 50885832!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	self assertThatCanBePlacedAt: aCell by: actualPlayer.
	(cells at: actualPlayer) add: aCell.
	nextPlayer := nextMovingPlayer! !

!methodRemoval: TerniLapilli #canBePlacedAt:by: stamp: 'AM 11/1/2020 15:04:01'!
canBePlacedAt: aCell by: playerWantingToPlay
	(self isWithinBoardLimits: aCell) ifFalse: [ self signalCellIsOutOfBounds ].
	nextPlayer = playerWantingToPlay ifFalse: [ self signalCanNotPlayOnOtherPlayersTurn ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self signalCanNotPlaceChipInOccupiedCell ].!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 15:04:53'!
assertThatCanBeOccupiedAt: aCell by: playerWantingToPlay
	(self isWithinBoardLimits: aCell) ifFalse: [ self signalCellIsOutOfBounds ].
	nextPlayer = playerWantingToPlay ifFalse: [ self signalCanNotPlayOnOtherPlayersTurn ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self signalCanNotPlaceChipInOccupiedCell ].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:04:53' prior: 50890240!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	self assertThatCanBeOccupiedAt: aCell by: actualPlayer.
	(cells at: actualPlayer) add: aCell.
	nextPlayer := nextMovingPlayer! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:04:53' prior: 50890217!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self assertThatCanBeOccupiedAt: anAdjacentFreeCell by: actualPlayer.
	((anOccupiedCell eightNeighbors includes: anAdjacentFreeCell )
	and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(anAdjacentFreeCell x + anAdjacentFreeCell y) even] ]) ifFalse: [self signalCanNotMoveChipToNonAdjacentCell ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self signlaCanNotMoveFromACellThatHasNoCorrespondingChip ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !

!methodRemoval: TerniLapilli #assertThatCanBePlacedAt:by: stamp: 'AM 11/1/2020 15:04:53'!
assertThatCanBePlacedAt: aCell by: playerWantingToPlay
	(self isWithinBoardLimits: aCell) ifFalse: [ self signalCellIsOutOfBounds ].
	nextPlayer = playerWantingToPlay ifFalse: [ self signalCanNotPlayOnOtherPlayersTurn ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self signalCanNotPlaceChipInOccupiedCell ].!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 15:05:15'!
assertThatIsWithinBoardLimits: aCell

	^ (self isWithinBoardLimits: aCell) ifFalse: [ self signalCellIsOutOfBounds ]! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 15:05:15' prior: 50890262!
assertThatCanBeOccupiedAt: aCell by: playerWantingToPlay
	self assertThatIsWithinBoardLimits: aCell.
	nextPlayer = playerWantingToPlay ifFalse: [ self signalCanNotPlayOnOtherPlayersTurn ].
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self signalCanNotPlaceChipInOccupiedCell ].! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 15:05:50'!
assertThatIsItsTurn: playerWantingToPlay

	^ nextPlayer = playerWantingToPlay ifFalse: [ self signalCanNotPlayOnOtherPlayersTurn ]! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 15:05:50' prior: 50890330!
assertThatCanBeOccupiedAt: aCell by: playerWantingToPlay
	self assertThatIsWithinBoardLimits: aCell.
	self assertThatIsItsTurn: playerWantingToPlay.
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self signalCanNotPlaceChipInOccupiedCell ].! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 15:06:02' prior: 50890350!
assertThatCanBeOccupiedAt: aCell by: aPlayerWantingToPlay
	self assertThatIsWithinBoardLimits: aCell.
	self assertThatIsItsTurn: aPlayerWantingToPlay.
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self signalCanNotPlaceChipInOccupiedCell ].! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 15:06:13' prior: 50890343!
assertThatIsItsTurn: aPlayerWantingToPlay

	^ nextPlayer = aPlayerWantingToPlay ifFalse: [ self signalCanNotPlayOnOtherPlayersTurn ]! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 15:06:47'!
assertThatItsTheTurnOf: aPlayerWantingToPlay

	^ nextPlayer = aPlayerWantingToPlay ifFalse: [ self signalCanNotPlayOnOtherPlayersTurn ]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:06:47' prior: 50890362!
assertThatCanBeOccupiedAt: aCell by: aPlayerWantingToPlay
	self assertThatIsWithinBoardLimits: aCell.
	self assertThatItsTheTurnOf: aPlayerWantingToPlay.
	(((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self signalCanNotPlaceChipInOccupiedCell ].! !

!methodRemoval: TerniLapilli #assertThatIsItsTurn: stamp: 'AM 11/1/2020 15:06:48'!
assertThatIsItsTurn: aPlayerWantingToPlay

	^ nextPlayer = aPlayerWantingToPlay ifFalse: [ self signalCanNotPlayOnOtherPlayersTurn ]!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 15:07:14'!
assertThatIsNotAlreadyOccupied: aCell

	^ (((cells at: #X) includes: aCell)
		or: [(cells at: #O) includes: aCell]) 
		ifTrue: [ self signalCanNotPlaceChipInOccupiedCell ]! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 15:07:14' prior: 50890389!
assertThatCanBeOccupiedAt: aCell by: aPlayerWantingToPlay
	self assertThatIsWithinBoardLimits: aCell.
	self assertThatItsTheTurnOf: aPlayerWantingToPlay.
	self assertThatIsNotAlreadyOccupied: aCell.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 11/1/2020 15:10:09'!
PASSED!

!testRun: #TerniLapilliTest #test30 stamp: 'AM 11/1/2020 15:10:09'!
PASSED!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 15:10:22' prior: 50890287!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self assertThatCanBeOccupiedAt: anAdjacentFreeCell by: actualPlayer.
	self halt.
	((anOccupiedCell eightNeighbors includes: anAdjacentFreeCell )
	and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(anAdjacentFreeCell x + anAdjacentFreeCell y) even] ]) ifFalse: [self signalCanNotMoveChipToNonAdjacentCell ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self signlaCanNotMoveFromACellThatHasNoCorrespondingChip ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 15:10:23'!
PASSED!

!testRun: #TerniLapilliTest #test30 stamp: 'AM 11/1/2020 15:10:23'!
PASSED!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 15:10:30' prior: 50890498!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self assertThatCanBeOccupiedAt: anAdjacentFreeCell by: actualPlayer.
	((anOccupiedCell eightNeighbors includes: anAdjacentFreeCell )
	and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(anAdjacentFreeCell x + anAdjacentFreeCell y) even] ]) ifFalse: [self signalCanNotMoveChipToNonAdjacentCell ].
	(cells at: actualPlayer ) remove: anOccupiedCell ifAbsent: [self signlaCanNotMoveFromACellThatHasNoCorrespondingChip ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 15:11:45'!
assertThatMovementIsValidFrom: anOccupiedCell to: aFreeCell
	((anOccupiedCell eightNeighbors includes: aFreeCell ) 	and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(aFreeCell x + aFreeCell y) even] ]) ifFalse: [self signalCanNotMoveChipToNonAdjacentCell ].
! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 15:12:48' prior: 50890577!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self assertThatCanBeOccupiedAt: anAdjacentFreeCell by: actualPlayer.
	self assertThatMovementIsValidFrom: anOccupiedCell to: anAdjacentFreeCell .
	(cells at: actualPlayer ) remove: anOccupiedCell 
		ifAbsent: [self signlaCanNotMoveFromACellThatHasNoCorrespondingChip ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 11/1/2020 15:13:02'!
signalCanNotMoveFromACellThatHasNoCorrespondingChip

	^ self error: self class canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:13:02' prior: 50890611!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self assertThatCanBeOccupiedAt: anAdjacentFreeCell by: actualPlayer.
	self assertThatMovementIsValidFrom: anOccupiedCell to: anAdjacentFreeCell .
	(cells at: actualPlayer ) remove: anOccupiedCell 
		ifAbsent: [self signalCanNotMoveFromACellThatHasNoCorrespondingChip ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
! !

!methodRemoval: TerniLapilli #signlaCanNotMoveFromACellThatHasNoCorrespondingChip stamp: 'AM 11/1/2020 15:13:02'!
signlaCanNotMoveFromACellThatHasNoCorrespondingChip

	^ self error: self class canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription!

Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer waitingPlayer cells state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'AM 11/1/2020 15:14:28'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'nextPlayer waitingPlayer cells state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 15:15:31'!
moveFrom: anOccupiedCell to: anAdjacentFreeCell by: aPlayerWantingToPlay
	self assertThatCanBeOccupiedAt: anAdjacentFreeCell by: aPlayerWantingToPlay.
	self assertThatMovementIsValidFrom: anOccupiedCell to: anAdjacentFreeCell .
	(cells at: aPlayerWantingToPlay ) remove: anOccupiedCell 
		ifAbsent: [self signalCanNotMoveFromACellThatHasNoCorrespondingChip ].
	(cells at: aPlayerWantingToPlay) add: anAdjacentFreeCell .
	self changeTurns.
! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 15:15:59'!
placeAt: aCell by: aPlayerWnatingToPlay
	self assertThatCanBeOccupiedAt: aCell by: aPlayerWnatingToPlay.
	(cells at: aPlayerWnatingToPlay) add: aCell.
	self changTurns.! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 15:16:03' prior: 50890692!
placeAt: aCell by: aPlayerWnatingToPlay
	self assertThatCanBeOccupiedAt: aCell by: aPlayerWnatingToPlay.
	(cells at: aPlayerWnatingToPlay) add: aCell.
	self changeTurns.! !
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:16:27' prior: 50883852!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	terniLapilli moveFrom: anOccupiedCell to: anAdjacentFreeCell by: actualPlayer 
! !

!methodRemoval: TerniLapilli #moveFrom:to:actualPlayer:nextPlayer: stamp: 'AM 11/1/2020 15:16:47'!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	self assertThatCanBeOccupiedAt: anAdjacentFreeCell by: actualPlayer.
	self assertThatMovementIsValidFrom: anOccupiedCell to: anAdjacentFreeCell .
	(cells at: actualPlayer ) remove: anOccupiedCell 
		ifAbsent: [self signalCanNotMoveFromACellThatHasNoCorrespondingChip ].
	(cells at: actualPlayer) add: anAdjacentFreeCell .
	nextPlayer := followingPlayer .
!
!TerniLapilliStatePlacing methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:17:09' prior: 50883991!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	terniLapilli placeAt: aCell by: actualPlayer ! !

!methodRemoval: TerniLapilli #placeAt:nextPlayer:actualPlayer: stamp: 'AM 11/1/2020 15:17:16'!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	self assertThatCanBeOccupiedAt: aCell by: actualPlayer.
	(cells at: actualPlayer) add: aCell.
	nextPlayer := nextMovingPlayer!
!TerniLapilli methodsFor: 'state update' stamp: 'AM 11/1/2020 15:18:44'!
changeTurns
	
	| temporaryPlayer |
	temporaryPlayer := nextPlayer.
	nextPlayer := waitingPlayer.
	waitingPlayer  := temporaryPlayer.! !
!TerniLapilli methodsFor: 'state update' stamp: 'AM 11/1/2020 15:18:49' prior: 50890753!
changeTurns
	
	| temporaryPlayer |
	
	temporaryPlayer := nextPlayer.
	nextPlayer := waitingPlayer.
	waitingPlayer  := temporaryPlayer.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 15:20:24'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 15:20:24'!
FAILURE!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 15:20:24'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 15:20:24'!
FAILURE!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 15:20:24'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 15:20:24'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 15:20:24'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 15:20:24'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 11/1/2020 15:20:24'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 11/1/2020 15:20:24'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 11/1/2020 15:20:24'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 15:20:24'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 15:20:24'!
ERROR!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 11/1/2020 15:20:24'!
ERROR!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 11/1/2020 15:20:24'!
ERROR!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 11/1/2020 15:20:24'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 11/1/2020 15:20:24'!
ERROR!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 11/1/2020 15:20:24'!
ERROR!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 15:20:24'!
ERROR!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 15:20:24'!
ERROR!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 11/1/2020 15:20:24'!
ERROR!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 11/1/2020 15:20:24'!
ERROR!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 11/1/2020 15:20:25'!
ERROR!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 11/1/2020 15:20:25'!
ERROR!

!testRun: #TerniLapilliTest #test30 stamp: 'AM 11/1/2020 15:20:25'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 15:20:28'!
ERROR!
!TerniLapilli methodsFor: 'initializing' stamp: 'AM 11/1/2020 15:20:49' prior: 50882357 overrides: 16896425!
initialize
	cells := Dictionary new.
	cells at: #X put: OrderedCollection new.
	cells at: #O put: OrderedCollection new.
	nextPlayer := #X.
	waitingPlayer := #O.
	state := TerniLapilliStatePlacing for: self with: cells playing: nextPlayer.! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 11/1/2020 15:20:51'!
PASSED!

!testRun: #TerniLapilliTest #test30 stamp: 'AM 11/1/2020 15:20:51'!
PASSED!
!TerniLapilliTest methodsFor: 'testing turns' stamp: 'AM 11/1/2020 15:22:04'!
test13OShouldNotPlayWhenItsXsTurn
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeOAt: 2@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription.! !

!methodRemoval: TerniLapilliTest #test13 stamp: 'AM 11/1/2020 15:22:05'!
test13
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeOAt: 2@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription.!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:22:53'!
test15XShouldNotMoveBeforePlacingThreChips
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.! !

!methodRemoval: TerniLapilliTest #test15 stamp: 'AM 11/1/2020 15:22:53'!
test15
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:23:00'!
test15XShouldNotMoveBeforePlacingThreeChips
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.! !

!methodRemoval: TerniLapilliTest #test15XShouldNotMoveBeforePlacingThreChips stamp: 'AM 11/1/2020 15:23:00'!
test15XShouldNotMoveBeforePlacingThreChips
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.!
!TerniLapilliState class methodsFor: 'instance creation' stamp: 'AM 11/1/2020 15:23:19' prior: 50883091!
for: aTerniLapilli with: aBoard playing: aPlayer 
	(aTerniLapilli aPlayerHasThreeAlignedChips) ifTrue: [ ^TerniLapilliStateGameOver new initializeFor: aTerniLapilli with: aBoard playing: aPlayer ].
	(aBoard at: #O) size = 2 ifTrue: [^ TerniLapilliStateMoving new initializeFor: aTerniLapilli with: aBoard playing: aPlayer ].
	^TerniLapilliStatePlacing new initializeFor: aTerniLapilli with: aBoard playing: aPlayer ! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 15:23:26'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 15:23:26'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 15:23:26'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 15:23:26'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 15:23:26'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 15:23:26'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 15:23:26'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 15:23:26'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlayWhenItsXsTurn stamp: 'AM 11/1/2020 15:23:26'!
PASSED!

!testRun: #TerniLapilliTest #test15XShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 15:23:26'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'AM 11/1/2020 15:23:26'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 15:23:26'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 15:23:26'!
ERROR!

!testRun: #TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 11/1/2020 15:23:26'!
ERROR!

!testRun: #TerniLapilliTest #test20 stamp: 'AM 11/1/2020 15:23:26'!
ERROR!

!testRun: #TerniLapilliTest #test21 stamp: 'AM 11/1/2020 15:23:26'!
ERROR!

!testRun: #TerniLapilliTest #test22 stamp: 'AM 11/1/2020 15:23:26'!
ERROR!

!testRun: #TerniLapilliTest #test23 stamp: 'AM 11/1/2020 15:23:26'!
ERROR!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 15:23:26'!
ERROR!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 15:23:26'!
ERROR!

!testRun: #TerniLapilliTest #test26 stamp: 'AM 11/1/2020 15:23:26'!
ERROR!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 11/1/2020 15:23:26'!
ERROR!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 11/1/2020 15:23:26'!
ERROR!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 11/1/2020 15:23:26'!
ERROR!

!testRun: #TerniLapilliTest #test30 stamp: 'AM 11/1/2020 15:23:26'!
ERROR!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:24:57'!
test15PlayerShouldNotMoveBeforePlacingThreeChips
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.! !

!methodRemoval: TerniLapilliTest #test15XShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 15:24:57'!
test15XShouldNotMoveBeforePlacingThreeChips
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.!

!methodRemoval: TerniLapilliTest #test16 stamp: 'AM 11/1/2020 15:25:02'!
test16
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [ boardTerniLapilli moveAnOFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveAChipBeforePlacingTheThreeChipsErrorDescription.!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:25:28'!
test20ShouldNotMoveChipToOccupiedCell	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription .! !

!methodRemoval: TerniLapilliTest #test20 stamp: 'AM 11/1/2020 15:25:28'!
test20	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription .!
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 11/1/2020 15:25:52'!
test19FirstColumnForOIsWinningGame
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@3.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self assert: boardTerniLapilli isOver.! !

!methodRemoval: TerniLapilliTest #test19FirstColumnForOISWinningGame stamp: 'AM 11/1/2020 15:25:52'!
test19FirstColumnForOISWinningGame
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@3.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self assert: boardTerniLapilli isOver.!
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 11/1/2020 15:26:43'!
test21ShouldNotPlaceWhenGameIsOver
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@1.
	self should: [boardTerniLapilli placeOAt: 2@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription.! !

!methodRemoval: TerniLapilliTest #test21 stamp: 'AM 11/1/2020 15:26:43'!
test21
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@1.
	self should: [boardTerniLapilli placeOAt: 2@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription.!
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 11/1/2020 15:27:26'!
test22GameIsOverAfterOMoves
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 1@3.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 2@3.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli moveAnXFrom: 2@3 to: 3@3.
	boardTerniLapilli moveAnOFrom: 3@1 to: 3@2.
	self assert: boardTerniLapilli isOver.
		! !

!methodRemoval: TerniLapilliTest #test22 stamp: 'AM 11/1/2020 15:27:26'!
test22
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 1@3.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 2@3.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli moveAnXFrom: 2@3 to: 3@3.
	boardTerniLapilli moveAnOFrom: 3@1 to: 3@2.
	self assert: boardTerniLapilli isOver.
		!
!TerniLapilliTest methodsFor: 'testing finish' stamp: 'AM 11/1/2020 15:27:42'!
test23ShouldNotMoveWhenGameIsOver
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@3.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [boardTerniLapilli moveAnXFrom: 3@2 to: 2@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription.! !

!methodRemoval: TerniLapilliTest #test23 stamp: 'AM 11/1/2020 15:27:42'!
test23
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@3.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [boardTerniLapilli moveAnXFrom: 3@2 to: 2@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription.!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:29:38'!
test26ShouldNotMoveFrom
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription .! !

!methodRemoval: TerniLapilliTest #test26 stamp: 'AM 11/1/2020 15:29:38'!
test26
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription .!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:29:50'!
test26
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription .! !

!methodRemoval: TerniLapilliTest #test26ShouldNotMoveFrom stamp: 'AM 11/1/2020 15:29:50'!
test26ShouldNotMoveFrom
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription .!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:31:19'!
test26APlayerShouldNotMoveFromACellWithoutItsChips
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription .! !

!methodRemoval: TerniLapilliTest #test26 stamp: 'AM 11/1/2020 15:31:19'!
test26
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription .!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:32:22'!
test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription .! !

!methodRemoval: TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutItsChips stamp: 'AM 11/1/2020 15:32:22'!
test26APlayerShouldNotMoveFromACellWithoutItsChips
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription .!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 11/1/2020 15:33:07' prior: 50889655!
canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription
	^'Can not move from a cell that does not have a chip belonging to you'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'AM 11/1/2020 15:33:08'!
canNotMoveFromACellWithoutAChipOfItsOwnershipErrorDescription
	^'Can not move from a cell that does not have a chip belonging to you'.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:33:08' prior: 50890628!
signalCanNotMoveFromACellThatHasNoCorrespondingChip

	^ self error: self class canNotMoveFromACellWithoutAChipOfItsOwnershipErrorDescription! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:33:08' prior: 50891380!
test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellWithoutAChipOfItsOwnershipErrorDescription .! !

!methodRemoval: TerniLapilli class #canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription stamp: 'AM 11/1/2020 15:33:08'!
canNotMoveFromACellThatHasNoCorrespondingChipErrorDescription
	^'Can not move from a cell that does not have a chip belonging to you'.!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 15:33:12'!
ERROR!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 15:33:23'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 15:33:23'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 15:33:23'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 15:33:23'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 15:33:23'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 15:33:23'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 15:33:23'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 15:33:23'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlayWhenItsXsTurn stamp: 'AM 11/1/2020 15:33:23'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 15:33:23'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 15:33:23'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 15:33:23'!
ERROR!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 15:33:23'!
ERROR!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 15:33:23'!
ERROR!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 15:33:23'!
ERROR!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 15:33:23'!
ERROR!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 15:33:23'!
ERROR!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 15:33:23'!
ERROR!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 15:33:23'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 15:33:23'!
ERROR!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 11/1/2020 15:33:23'!
ERROR!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 11/1/2020 15:33:23'!
ERROR!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 11/1/2020 15:33:23'!
ERROR!

!testRun: #TerniLapilliTest #test30 stamp: 'AM 11/1/2020 15:33:23'!
ERROR!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 15:33:30'!
ERROR!
!TerniLapilliState class methodsFor: 'instance creation' stamp: 'AM 11/1/2020 15:33:56' prior: 50890992!
for: aTerniLapilli with: aBoard playing: aPlayer 
	(aTerniLapilli aPlayerHasThreeAlignedChips) ifTrue: [ ^TerniLapilliStateGameOver new initializeFor: aTerniLapilli with: aBoard playing: aPlayer ].
	(aBoard at: #O) size = 3 ifTrue: [^ TerniLapilliStateMoving new initializeFor: aTerniLapilli with: aBoard playing: aPlayer ].
	^TerniLapilliStatePlacing new initializeFor: aTerniLapilli with: aBoard playing: aPlayer ! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlayWhenItsXsTurn stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test27 stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test28 stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test29 stamp: 'AM 11/1/2020 15:33:58'!
PASSED!

!testRun: #TerniLapilliTest #test30 stamp: 'AM 11/1/2020 15:33:58'!
PASSED!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:34:34'!
test27PlayerShouldNotMoveChipToNonAdjacentCell
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@1 to: 3@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.! !

!methodRemoval: TerniLapilliTest #test27 stamp: 'AM 11/1/2020 15:34:34'!
test27
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 3@2.
	self should: [ boardTerniLapilli moveAnXFrom: 3@1 to: 3@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:42:58' prior: 50886697!
test28
	| boardTerniLapilli |

	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [ boardTerniLapilli moveAnXFrom: 3@2 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:43:33'!
test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonal
	| boardTerniLapilli |

	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [ boardTerniLapilli moveAnXFrom: 3@2 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.! !

!methodRemoval: TerniLapilliTest #test28 stamp: 'AM 11/1/2020 15:43:33'!
test28
	| boardTerniLapilli |

	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [ boardTerniLapilli moveAnXFrom: 3@2 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:43:45'!
test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals
	| boardTerniLapilli |

	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [ boardTerniLapilli moveAnXFrom: 3@2 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.! !

!methodRemoval: TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonal stamp: 'AM 11/1/2020 15:43:45'!
test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonal
	| boardTerniLapilli |

	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [ boardTerniLapilli moveAnXFrom: 3@2 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:45:53' prior: 50886682!
test29
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@1.
	boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.
	self assert: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:46:12'!
test29GameIsOverAfterMovementAlongMainDiagonal
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@1.
	boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.
	self assert: boardTerniLapilli isOver.! !

!methodRemoval: TerniLapilliTest #test29 stamp: 'AM 11/1/2020 15:46:12'!
test29
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@1.
	boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.
	self assert: boardTerniLapilli isOver.!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 15:46:57' prior: 50890599!
assertThatMovementIsValidFrom: anOccupiedCell to: aFreeCell
	((anOccupiedCell fourNeighbors includes: aFreeCell ) 	and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(aFreeCell x + aFreeCell y) even] ]) ifFalse: [self signalCanNotMoveChipToNonAdjacentCell ].
! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlayWhenItsXsTurn stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test29GameIsOverAfterMovementAlongMainDiagonal stamp: 'AM 11/1/2020 15:46:59'!
ERROR!

!testRun: #TerniLapilliTest #test30 stamp: 'AM 11/1/2020 15:46:59'!
PASSED!

!testRun: #TerniLapilliTest #test29GameIsOverAfterMovementAlongMainDiagonal stamp: 'AM 11/1/2020 15:46:59'!
ERROR!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlayWhenItsXsTurn stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test29GameIsOverAfterMovementAlongMainDiagonal stamp: 'AM 11/1/2020 15:47:07'!
ERROR!

!testRun: #TerniLapilliTest #test30 stamp: 'AM 11/1/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test29GameIsOverAfterMovementAlongMainDiagonal stamp: 'AM 11/1/2020 15:47:07'!
ERROR!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 15:47:51' prior: 50891815!
assertThatMovementIsValidFrom: anOccupiedCell to: aFreeCell
	((anOccupiedCell eightNeighbors includes: aFreeCell ) 	and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(aFreeCell x + aFreeCell y) even] ]) ifFalse: [self signalCanNotMoveChipToNonAdjacentCell ].
! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:49:20' prior: 50891786!
test29GameIsOverAfterMovementAlongMainDiagonal
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@1.
	self shouldnt: [ boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.] 
	raise: Error.
	! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:49:35'!
test29PlayerCanMoveAlongMainDiagonal
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@1.
	self shouldnt: [ boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.] 
	raise: Error.
	! !

!methodRemoval: TerniLapilliTest #test29GameIsOverAfterMovementAlongMainDiagonal stamp: 'AM 11/1/2020 15:49:36'!
test29GameIsOverAfterMovementAlongMainDiagonal
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@1.
	self shouldnt: [ boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.] 
	raise: Error.
	!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:49:41'!
test29PlayerCanMoveAlongMainDiagonals
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@1.
	self shouldnt: [ boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.] 
	raise: Error.
	! !

!methodRemoval: TerniLapilliTest #test29PlayerCanMoveAlongMainDiagonal stamp: 'AM 11/1/2020 15:49:41'!
test29PlayerCanMoveAlongMainDiagonal
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@1.
	self shouldnt: [ boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.] 
	raise: Error.
	!

!testRun: #TerniLapilliTest #test29PlayerCanMoveAlongMainDiagonals stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlayWhenItsXsTurn stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerCanMoveAlongMainDiagonals stamp: 'AM 11/1/2020 15:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test30 stamp: 'AM 11/1/2020 15:49:48'!
PASSED!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:50:00' prior: 50892053!
test29PlayerCanMoveAlongMainDiagonals
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@1.
	self shouldnt: [ boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.] 
		raise: Error.
	! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:50:02' prior: 50892168!
test29PlayerCanMoveAlongMainDiagonals
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@1.
	
	self shouldnt: [ boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.] 
		raise: Error.
	! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:53:23'!
test29PlayerShouldBeAbleToMoveAlongMainDiagonals
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@1.
	
	self shouldnt: [ boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.] 
		raise: Error.
	! !

!methodRemoval: TerniLapilliTest #test29PlayerCanMoveAlongMainDiagonals stamp: 'AM 11/1/2020 15:53:23'!
test29PlayerCanMoveAlongMainDiagonals
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 3@1.
	boardTerniLapilli placeOAt: 2@1.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@2.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@1.
	
	self shouldnt: [ boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.] 
		raise: Error.
	!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 15:53:41' prior: 50891995!
assertThatMovementIsValidFrom: anOccupiedCell to: aFreeCell
	((anOccupiedCell eightNeighbors includes: aFreeCell ) 	
		and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(aFreeCell x + aFreeCell y) even] ]) 
			ifFalse: [self signalCanNotMoveChipToNonAdjacentCell ].
! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 15:54:21'!
test30PlayerShouldNotPlaceAfterPlacingThreeChips
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [ boardTerniLapilli placeXAt: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceAChipAfterPlacingThreeChipsErrorDescription.! !

!methodRemoval: TerniLapilliTest #test30 stamp: 'AM 11/1/2020 15:54:22'!
test30
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 2@1.
	boardTerniLapilli placeOAt: 3@1.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	self should: [ boardTerniLapilli placeXAt: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceAChipAfterPlacingThreeChipsErrorDescription.!
!TerniLapilliTest methodsFor: 'nil' stamp: 'AM 11/1/2020 15:55:55'!
test31XShouldBeDeclaredWinnerIfThreeChipsAligned
	
	
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:56:45' prior: 50892276!
test31XShouldBeDeclaredWinnerIfThreeChipsAligned

	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 1@3.
	boardTerniLapilli placeOAt: 2@3.
	boardTerniLapilli placeXAt: 1@2.
	boardTerniLapilli placeOAt: 3@2.
	
	self assert: boardTerniLapilli hasXAlreadyWon.
		
	
	
	
	
	! !

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 15:56:58'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:57:16' prior: 50892282!
test31XShouldBeDeclaredWinnerIfThreeChipsAligned

	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@2.
	boardTerniLapilli placeXAt: 1@3.
	boardTerniLapilli placeOAt: 2@3.
	boardTerniLapilli placeXAt: 1@2.
	
	self assert: boardTerniLapilli hasXAlreadyWon.
		
	
	
	
	
	! !

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 15:57:19'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 15:57:31'!
hasXAlreadyWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 15:57:44' prior: 50892318!
hasXAlreadyWon
	self hasThreeAlignedChips: #X! !

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 15:57:46'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 15:57:59' prior: 50892323!
hasXAlreadyWon
	^self hasThreeAlignedChips: #X! !

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlayWhenItsXsTurn stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 15:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 15:58:05'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:58:26' prior: 50892301!
test31XShouldBeDeclaredWinnerIfThreeChipsAligned

	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeOAt: 1@1.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 2@3.
	boardTerniLapilli placeOAt: 1@2.
	
	self assert: boardTerniLapilli hasOAlreadyWon.
		
	
	
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 15:58:38' prior: 50892425!
test31XShouldBeDeclaredWinnerIfThreeChipsAligned

	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli  placeXAt: 3@2.
	boardTerniLapilli placeOAt: 1@1.
	boardTerniLapilli placeXAt: 2@2.
	boardTerniLapilli placeOAt: 1@3.
	boardTerniLapilli placeXAt: 2@3.
	boardTerniLapilli placeOAt: 1@2.
	
	self assert: boardTerniLapilli hasOAlreadyWon.
		
	
	
	
	
	! !

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 15:58:39'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 15:58:48'!
hasOAlreadyWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 15:58:54' prior: 50892458!
hasOAlreadyWon
	^self hasThreeAlignedChips: #O! !

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlayWhenItsXsTurn stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 15:59:03'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 15:59:03'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 15:59:23'!
hasXAlreadyWon: aPlayer
	
	^ (((self hasPlayedThreeChips: aPlayer) and:
		[ self hasThreeAlignedChips: aPlayer ]))! !

!methodRemoval: TerniLapilli #hasAlreadyWon: stamp: 'AM 11/1/2020 15:59:23'!
hasAlreadyWon: aPlayer
	
	^ (((self hasPlayedThreeChips: aPlayer) and:
		[ self hasThreeAlignedChips: aPlayer ]))!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 15:59:53'!
hasAlreadyWon: aPlayer
	
	^ (((self hasPlayedThreeChips: aPlayer) and:
		[ self hasThreeAlignedChips: aPlayer ]))! !

!methodRemoval: TerniLapilli #hasXAlreadyWon: stamp: 'AM 11/1/2020 15:59:53'!
hasXAlreadyWon: aPlayer
	
	^ (((self hasPlayedThreeChips: aPlayer) and:
		[ self hasThreeAlignedChips: aPlayer ]))!
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 16:00:05' prior: 50892331!
hasXAlreadyWon
	^self hasAlreadyWon: #X! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 16:00:19' prior: 50892463!
hasOAlreadyWon
	^self hasAlreadyWon: #O! !

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 16:00:23'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlayWhenItsXsTurn stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 16:00:27'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlayWhenItsXsTurn stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 16:00:31'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlayWhenItsXsTurn stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 16:00:45'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 16:00:45'!
PASSED!
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 16:02:03'!
is: aFreeCell adjacentTo: anOccupiedCell

	^ anOccupiedCell eightNeighbors includes: aFreeCell! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 16:02:03' prior: 50892230!
assertThatMovementIsValidFrom: anOccupiedCell to: aFreeCell
	((self is: aFreeCell adjacentTo: anOccupiedCell ) 	
		and: [  (anOccupiedCell x + anOccupiedCell y) even or: [(aFreeCell x + aFreeCell y) even] ]) 
			ifFalse: [self signalCanNotMoveChipToNonAdjacentCell ].
! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 16:03:23'!
isInAMainDiagonal: anOccupiedCell

	^ (anOccupiedCell x + anOccupiedCell y) even! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 16:03:23' prior: 50892856!
assertThatMovementIsValidFrom: anOccupiedCell to: aFreeCell
	((self is: aFreeCell adjacentTo: anOccupiedCell ) 	
		and: [  (self isInAMainDiagonal: anOccupiedCell) or: [(aFreeCell x + aFreeCell y) even] ]) 
			ifFalse: [self signalCanNotMoveChipToNonAdjacentCell ].
! !
!TerniLapilli methodsFor: 'assertions' stamp: 'AM 11/1/2020 16:03:35' prior: 50892873!
assertThatMovementIsValidFrom: anOccupiedCell to: aFreeCell
	((self is: aFreeCell adjacentTo: anOccupiedCell ) 	
		and: [  (self isInAMainDiagonal: anOccupiedCell) or: [self isInAMainDiagonal: aFreeCell] ]) 
			ifFalse: [self signalCanNotMoveChipToNonAdjacentCell ].
! !
!TerniLapilli methodsFor: 'testing cells' stamp: 'AM 11/1/2020 16:05:09' prior: 50892850!
is: aCell adjacentTo: anotherCell

	^ aCell eightNeighbors includes: anotherCell! !
!TerniLapilli methodsFor: 'testing cells' stamp: 'AM 11/1/2020 16:05:22' prior: 50892867!
isInAMainDiagonal: aCell

	^ (aCell x + aCell y) even! !
!TerniLapilli methodsFor: 'testing cells' stamp: 'AM 11/1/2020 16:05:25' prior: 50888420!
isWithinBoardLimits: aCell

	^((aCell x) between: 1 and: 3) and: [(aCell y) between: 1 and: 3]! !
!TerniLapilli methodsFor: 'testing cells' stamp: 'AM 11/1/2020 16:05:35' prior: 50892908!
isWithinBoardLimits: aCell

	^((aCell x) between: 1 and: 3) and: 
		[(aCell y) between: 1 and: 3]! !
!TerniLapilliStateGameOver methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 16:06:43'!
moveFrom: anOccupiedCell to: anAdjacentFreeCell by: aPlayerWantingToPlay
	terniLapilli signalCanNotPlayWhenGameIsAlreadyOver.
! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:07:00' prior: 50888928!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell by: #X.
	self updateState ! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:07:08' prior: 50888841!
moveAnOFrom: anOccupiedCell to: anAdjacentFreeCell
	state moveFrom: anOccupiedCell to: anAdjacentFreeCell by: #O.
	self updateState! !

!methodRemoval: TerniLapilliStateGameOver #moveFrom:to:actualPlayer:nextPlayer: stamp: 'AM 11/1/2020 16:07:20'!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	terniLapilli signalCanNotPlayWhenGameIsAlreadyOver.
!
!TerniLapilliStateGameOver methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 16:08:06'!
placeAt: aCell by: aPlayerWantingToPlayer
	terniLapilli signalCanNotPlayWhenGameIsAlreadyOver! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:08:20' prior: 50884078!
placeOAt: aCell 
	state placeAt: aCell by: #X.
	self updateState! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:08:30' prior: 50884072!
placeXAt: aCell 
	state placeAt: aCell by: #O.
	self updateState
! !

!methodRemoval: TerniLapilliStateGameOver #placeAt:nextPlayer:actualPlayer: stamp: 'AM 11/1/2020 16:08:36'!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	terniLapilli signalCanNotPlayWhenGameIsAlreadyOver!
!TerniLapilliStatePlacing methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 16:09:03'!
moveFrom: anOccupiedCell to: anAdjacentFreeCell by: aPlayerWantingToPlayer
	terniLapilli signalCanNotMoveAChipBeforePlacingTheThreeChips
! !

!methodRemoval: TerniLapilliStatePlacing #moveFrom:to:actualPlayer:nextPlayer: stamp: 'AM 11/1/2020 16:09:11'!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	terniLapilli signalCanNotMoveAChipBeforePlacingTheThreeChips
!
!TerniLapilliStatePlacing methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 16:09:29'!
placeAt: aCell by: aPlayerWantingToPlay
	terniLapilli placeAt: aCell by: aPlayerWantingToPlay ! !

!methodRemoval: TerniLapilliStatePlacing #placeAt:nextPlayer:actualPlayer: stamp: 'AM 11/1/2020 16:09:31'!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	terniLapilli placeAt: aCell by: actualPlayer !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 16:09:36'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 16:09:36'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 16:09:36'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 16:09:36'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 16:09:36'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlayWhenItsXsTurn stamp: 'AM 11/1/2020 16:09:36'!
FAILURE!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 16:09:36'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 16:09:36'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 16:09:36'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 16:09:40'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 16:09:50'!
ERROR!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:10:14' prior: 50890701!
placeAt: aCell by: aPlayerWantingToPlay
	self assertThatCanBeOccupiedAt: aCell by: aPlayerWantingToPlay.
	(cells at: aPlayerWantingToPlay) add: aCell.
	self changeTurns.! !

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 16:10:16'!
ERROR!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 16:10:44'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 16:10:44'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 16:10:44'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 16:10:44'!
ERROR!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 16:10:44'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 16:10:44'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 16:10:44'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 16:10:44'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlayWhenItsXsTurn stamp: 'AM 11/1/2020 16:10:44'!
FAILURE!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 16:10:44'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 16:10:44'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 16:10:44'!
ERROR!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 16:10:44'!
ERROR!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 16:10:44'!
ERROR!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 16:10:44'!
ERROR!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 16:10:44'!
ERROR!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 16:10:44'!
ERROR!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 16:10:44'!
ERROR!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 16:10:45'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 16:10:45'!
ERROR!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 16:10:45'!
ERROR!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 16:10:45'!
ERROR!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 16:10:45'!
ERROR!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 16:10:45'!
ERROR!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 16:10:45'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 16:10:48'!
ERROR!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 16:13:16'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 16:13:16'!
ERROR!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 16:13:16'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 16:13:16'!
ERROR!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 16:13:16'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 16:13:16'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 16:13:16'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 16:13:16'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlayWhenItsXsTurn stamp: 'AM 11/1/2020 16:13:16'!
FAILURE!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 16:13:16'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 16:13:16'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 16:13:16'!
ERROR!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 16:13:16'!
ERROR!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 16:13:16'!
ERROR!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 16:13:17'!
ERROR!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 16:13:17'!
ERROR!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 16:13:17'!
ERROR!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 16:13:17'!
ERROR!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 16:13:17'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 16:13:17'!
ERROR!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 16:13:17'!
ERROR!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 16:13:17'!
ERROR!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 16:13:17'!
ERROR!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 16:13:17'!
ERROR!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 16:13:17'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 16:13:20'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 16:13:32'!
ERROR!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 16:13:40'!
ERROR!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:13:54' prior: 50892962!
placeXAt: aCell 
	state placeAt: aCell by: #X.
	self updateState
! !

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 16:13:55'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 16:13:58'!
ERROR!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:14:07' prior: 50892957!
placeOAt: aCell 
	state placeAt: aCell by: #O.
	self updateState! !

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 16:14:09'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 16:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 16:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 16:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 16:14:14'!
FAILURE!
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 16:14:48'!
moveFrom: anOccupiedCell to: anAdjacentFreeCell by: actualPlayer
	terniLapilli moveFrom: anOccupiedCell to: anAdjacentFreeCell by: actualPlayer 
! !
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 16:14:57' prior: 50893321!
moveFrom: anOccupiedCell to: anAdjacentFreeCell by: aPlayerWantingToPlay
	terniLapilli moveFrom: anOccupiedCell to: anAdjacentFreeCell by: aPlayerWantingToPlay 
! !

!methodRemoval: TerniLapilliStateMoving #moveFrom:to:actualPlayer:nextPlayer: stamp: 'AM 11/1/2020 16:15:01'!
moveFrom: anOccupiedCell to: anAdjacentFreeCell actualPlayer: actualPlayer nextPlayer: followingPlayer
	terniLapilli moveFrom: anOccupiedCell to: anAdjacentFreeCell by: actualPlayer 
!
!TerniLapilliStateMoving methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 16:15:21'!
placeAt: aCell by: aPlayerWantingToPlay
	terniLapilli signalCanNotPlaceAChipAfterPlacingThreeChips 
! !

!methodRemoval: TerniLapilliStateMoving #placeAt:nextPlayer:actualPlayer: stamp: 'AM 11/1/2020 16:15:23'!
placeAt: aCell nextPlayer: nextMovingPlayer actualPlayer: actualPlayer
	terniLapilli signalCanNotPlaceAChipAfterPlacingThreeChips 
!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlayWhenItsXsTurn stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 16:15:29'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 16:15:29'!
PASSED!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:15:47' prior: 50890675!
moveFrom: anOccupiedCell to: anAdjacentFreeCell by: aPlayerWantingToPlay

	self assertThatCanBeOccupiedAt: anAdjacentFreeCell by: aPlayerWantingToPlay.
	self assertThatMovementIsValidFrom: anOccupiedCell to: anAdjacentFreeCell .
	(cells at: aPlayerWantingToPlay ) remove: anOccupiedCell 
		ifAbsent: [self signalCanNotMoveFromACellThatHasNoCorrespondingChip ].
	(cells at: aPlayerWantingToPlay) add: anAdjacentFreeCell .
	self changeTurns.
! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:19:28' prior: 50893095!
placeAt: aCell by: aPlayerWantingToPlay

	self assertThatCanBeOccupiedAt: aCell by: aPlayerWantingToPlay.
	(cells at: aPlayerWantingToPlay) add: aCell.
	self changeTurns.! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:20:00' prior: 50893447!
moveFrom: anOccupiedCell to: anAdjacentFreeCell by: aPlayerWantingToPlay

	self assertThatCanBeOccupiedAt: anAdjacentFreeCell by: aPlayerWantingToPlay.
	self assertThatMovementIsValidFrom: anOccupiedCell to: anAdjacentFreeCell .
	
	(cells at: aPlayerWantingToPlay ) remove: anOccupiedCell 
		ifAbsent: [self signalCanNotMoveFromACellThatHasNoCorrespondingChip ].
	(cells at: aPlayerWantingToPlay) add: anAdjacentFreeCell .
	
	self changeTurns.
! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:20:06' prior: 50893464!
placeAt: aCell by: aPlayerWantingToPlay

	self assertThatCanBeOccupiedAt: aCell by: aPlayerWantingToPlay.
	
	
	(cells at: aPlayerWantingToPlay) add: aCell.
	self changeTurns.! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:20:41' prior: 50893490!
placeAt: aCell by: aPlayerWantingToPlay

	self assertThatCanBeOccupiedAt: aCell by: aPlayerWantingToPlay.
	
	(cells at: aPlayerWantingToPlay) add: aCell.
	self changeTurns.! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:21:15' prior: 50892935!
moveAnOFrom: anOccupiedCell to: anAdjacentFreeCell

	state moveFrom: anOccupiedCell to: anAdjacentFreeCell by: #O.
	self updateState! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:21:18' prior: 50892928!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell

	state moveFrom: anOccupiedCell to: anAdjacentFreeCell by: #X.
	self updateState ! !
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 11/1/2020 16:22:47'!
signalCanNotMoveFromACellWithoutAChipOfItsOwnershipErrorDescription

	^ self error: self class canNotMoveFromACellWithoutAChipOfItsOwnershipErrorDescription! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 16:22:47' prior: 50893473!
moveFrom: anOccupiedCell to: anAdjacentFreeCell by: aPlayerWantingToPlay

	self assertThatCanBeOccupiedAt: anAdjacentFreeCell by: aPlayerWantingToPlay.
	self assertThatMovementIsValidFrom: anOccupiedCell to: anAdjacentFreeCell .
	
	(cells at: aPlayerWantingToPlay ) remove: anOccupiedCell 
		ifAbsent: [self signalCanNotMoveFromACellWithoutAChipOfItsOwnershipErrorDescription ].
	(cells at: aPlayerWantingToPlay) add: anAdjacentFreeCell .
	
	self changeTurns.
! !

!methodRemoval: TerniLapilli #signalCanNotMoveFromACellThatHasNoCorrespondingChip stamp: 'AM 11/1/2020 16:22:47'!
signalCanNotMoveFromACellThatHasNoCorrespondingChip

	^ self error: self class canNotMoveFromACellWithoutAChipOfItsOwnershipErrorDescription!
!TerniLapilli methodsFor: 'error signals' stamp: 'AM 11/1/2020 16:23:20'!
signalCanNotMoveFromACellWithoutAChipOfItsOwnership

	^ self error: self class canNotMoveFromACellWithoutAChipOfItsOwnershipErrorDescription! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 16:23:20' prior: 50893530!
moveFrom: anOccupiedCell to: anAdjacentFreeCell by: aPlayerWantingToPlay

	self assertThatCanBeOccupiedAt: anAdjacentFreeCell by: aPlayerWantingToPlay.
	self assertThatMovementIsValidFrom: anOccupiedCell to: anAdjacentFreeCell .
	
	(cells at: aPlayerWantingToPlay ) remove: anOccupiedCell 
		ifAbsent: [self signalCanNotMoveFromACellWithoutAChipOfItsOwnership ].
	(cells at: aPlayerWantingToPlay) add: anAdjacentFreeCell .
	
	self changeTurns.
! !

!methodRemoval: TerniLapilli #signalCanNotMoveFromACellWithoutAChipOfItsOwnershipErrorDescription stamp: 'AM 11/1/2020 16:23:21'!
signalCanNotMoveFromACellWithoutAChipOfItsOwnershipErrorDescription

	^ self error: self class canNotMoveFromACellWithoutAChipOfItsOwnershipErrorDescription!
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:24:08' prior: 50893508!
moveAnOFrom: anOccupiedCell to: anAdjacentFreeCell

	state moveFrom: anOccupiedCell to: anAdjacentFreeCell by: #O.! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:24:12' prior: 50893515!
moveAnXFrom: anOccupiedCell to: anAdjacentFreeCell

	state moveFrom: anOccupiedCell to: anAdjacentFreeCell by: #X.! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:24:20' prior: 50893499!
placeAt: aCell by: aPlayerWantingToPlay

	self assertThatCanBeOccupiedAt: aCell by: aPlayerWantingToPlay.
	
	(cells at: aPlayerWantingToPlay) add: aCell.
	self updateState.! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:24:26' prior: 50893563!
moveFrom: anOccupiedCell to: anAdjacentFreeCell by: aPlayerWantingToPlay

	self assertThatCanBeOccupiedAt: anAdjacentFreeCell by: aPlayerWantingToPlay.
	self assertThatMovementIsValidFrom: anOccupiedCell to: anAdjacentFreeCell .
	
	(cells at: aPlayerWantingToPlay ) remove: anOccupiedCell 
		ifAbsent: [self signalCanNotMoveFromACellWithoutAChipOfItsOwnership ].
	(cells at: aPlayerWantingToPlay) add: anAdjacentFreeCell .
	
	self updateState.
! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:24:30' prior: 50893299!
placeOAt: aCell 

	state placeAt: aCell by: #O.! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:24:36' prior: 50893288!
placeXAt: aCell 

	state placeAt: aCell by: #X.
! !
!TerniLapilli methodsFor: 'state update' stamp: 'AM 11/1/2020 16:24:51' prior: 50885031!
updateState
	state := TerniLapilliState for: self with: cells playing: nextPlayer.
	self changeTurns ! !
!TerniLapilli methodsFor: 'state update' stamp: 'AM 11/1/2020 16:24:53' prior: 50893639!
updateState

	state := TerniLapilliState for: self with: cells playing: nextPlayer.
	self changeTurns ! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 16:25:01' prior: 50889890!
aPlayerHasThreeAlignedChips

	^((self hasPlayedThreeChips: #X) and: [self hasThreeAlignedChips: #X]) or: [
		(self hasPlayedThreeChips: #O) and: [self hasThreeAlignedChips: #O]]! !
!TerniLapilli methodsFor: 'testing' stamp: 'AM 11/1/2020 16:25:19' prior: 50888018!
hasThreeAlignedChips: aPlayer

	^ ((cells at: aPlayer) allSatisfy: [:aCell | 3 * aCell ~= (cells at: aPlayer) sum ]) not! !
!TerniLapilliState methodsFor: 'testing' stamp: 'AM 11/1/2020 16:29:55'!
isOver
	self subclassResponsibility ! !
!TerniLapilliState methodsFor: 'board operations' stamp: 'AM 11/1/2020 16:30:12'!
placeAt: aCell by: aPlayerWantingToPlay
	self subclassResponsibility ! !
!TerniLapilliState methodsFor: 'board operations' stamp: 'AM 11/1/2020 16:30:33'!
moveFrom: anOccupiedCell to: aFreeCell by: aPlayerWantingToPlay
	self subclassResponsibility ! !
!TerniLapilliStateGameOver methodsFor: 'board operations' stamp: 'AM 11/1/2020 16:31:33' prior: 50892921 overrides: 50893677!
moveFrom: anOccupiedCell to: aFreeCell by: aPlayerWantingToPlay
	terniLapilli signalCanNotPlayWhenGameIsAlreadyOver.
! !
!TerniLapilliStateMoving methodsFor: 'board operations' stamp: 'AM 11/1/2020 16:31:50' prior: 50893329 overrides: 50893677!
moveFrom: anOccupiedCell to: aFreeCell by: aPlayerWantingToPlay
	terniLapilli moveFrom: anOccupiedCell to: aFreeCell by: aPlayerWantingToPlay 
! !
!TerniLapilliStatePlacing methodsFor: 'board operations' stamp: 'AM 11/1/2020 16:32:05' prior: 50892975 overrides: 50893677!
moveFrom: anOccupiedCell to: aFreeCell by: aPlayerWantingToPlayer
	terniLapilli signalCanNotMoveAChipBeforePlacingTheThreeChips
! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:32:26' prior: 50893589!
moveAnOFrom: anOccupiedCell to: aFreeCell

	state moveFrom: anOccupiedCell to: aFreeCell by: #O.! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:32:33' prior: 50893596!
moveAnXFrom: anOccupiedCell to: aFreeCell

	state moveFrom: anOccupiedCell to: aFreeCell by: #X.! !
!TerniLapilli methodsFor: 'board plays' stamp: 'AM 11/1/2020 16:32:41' prior: 50893612!
moveFrom: anOccupiedCell to: aFreeCell by: aPlayerWantingToPlay

	self assertThatCanBeOccupiedAt: aFreeCell by: aPlayerWantingToPlay.
	self assertThatMovementIsValidFrom: anOccupiedCell to: aFreeCell .
	
	(cells at: aPlayerWantingToPlay ) remove: anOccupiedCell 
		ifAbsent: [self signalCanNotMoveFromACellWithoutAChipOfItsOwnership ].
	(cells at: aPlayerWantingToPlay) add: aFreeCell .
	
	self updateState.
! !

----SNAPSHOT----(1 November 2020 16:33:31) CuisUniversity-4384.image priorSource: 17858159!
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 11/1/2020 16:33:42' prior: 50873263!
test01FirstPlayerIsX
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 11/1/2020 16:33:52' prior: 50878319!
test02SecondPlayerIsO
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	
	self deny: boardTerniLapilli isXPlayingNext.
	self assert: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing turn alternation' stamp: 'AM 11/1/2020 16:33:56' prior: 50884817!
test03ThirdPlayerIsX
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing turns' stamp: 'AM 11/1/2020 16:34:30'!
test13OShouldNotPlaceWhenItsXsTurn
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeOAt: 2@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription.! !

!methodRemoval: TerniLapilliTest #test13OShouldNotPlayWhenItsXsTurn stamp: 'AM 11/1/2020 16:34:30'!
test13OShouldNotPlayWhenItsXsTurn
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	self should: [boardTerniLapilli placeOAt: 2@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription.!

!classDefinition: #TerniLapilliTest category: 'Terni Lapilli' stamp: 'AM 11/1/2020 16:46:42'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: 'board'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 16:47:00'!
terniLapilliWith: aCollectionOfMoves

	| index |
	board := TerniLapilli new.
	index := 1.
	[ index < 6 and: [index < aCollectionOfMoves size ]] whileTrue: [
			index even ifTrue: [board placeXAt: (aCollectionOfMoves at: index) ] 
				ifFalse: [board placeXAt: (aCollectionOfMoves at: index) ]
		]! !

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliTest category: 'Terni Lapilli' stamp: 'AM 11/1/2020 16:47:13'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 16:47:25' prior: 50893802!
terniLapilliWith: aCollectionOfMoves

	| index board |
	board := TerniLapilli new.
	index := 1.
	[ index < 6 and: [index < aCollectionOfMoves size ]] whileTrue: [
			index even ifTrue: [board placeXAt: (aCollectionOfMoves at: index) ] 
				ifFalse: [board placeXAt: (aCollectionOfMoves at: index) ]
		]! !
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 16:47:31' prior: 50893827!
terniLapilliWith: aCollectionOfMoves

	| index board |
	
	board := TerniLapilli new.
	index := 1.
	[ index < 6 and: [index < aCollectionOfMoves size ]] whileTrue: [
			index even ifTrue: [board placeXAt: (aCollectionOfMoves at: index) ] 
				ifFalse: [board placeXAt: (aCollectionOfMoves at: index) ]
		]! !
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 16:51:34'!
terniLapilliWith: aCollectionOfPlaces and: aCollectionOfMoves

	| indexOfPlacing board indexOfMoving |
	
	board := TerniLapilli new.
	indexOfPlacing := 1.
	[ indexOfPlacing < aCollectionOfMoves size ] whileTrue: [
			indexOfPlacing even ifTrue: [board placeXAt: (aCollectionOfMoves at: indexOfPlacing) ] 
				ifFalse: [board placeXAt: (aCollectionOfMoves at: indexOfPlacing) ].
			indexOfPlacing := indexOfPlacing + 1.
		].
	
	indexOfMoving := 1.
	[ indexOfPlacing < aCollectionOfMoves size ] whileTrue: [
			indexOfPlacing even ifTrue: [board moveFrom: (aCollectionOfMoves at: indexOfPlacing) ] 
				ifFalse: [board placeXAt: (aCollectionOfMoves at: indexOfPlacing) ].
			indexOfPlacing := indexOfPlacing + 1.
		]
	
	! !
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 16:52:51' prior: 50893853!
terniLapilliWith: aCollectionOfPlaces and: aCollectionOfMoves

	| indexOfPlacing board indexOfMoving |
	
	board := TerniLapilli new.
	indexOfPlacing := 1.
	[ indexOfPlacing < aCollectionOfMoves size ] whileTrue: [
			indexOfPlacing even ifTrue: [board placeXAt: (aCollectionOfMoves at: indexOfPlacing) ] 
				ifFalse: [board placeXAt: (aCollectionOfMoves at: indexOfPlacing) ].
			indexOfPlacing := indexOfPlacing + 1.
		].
	
	indexOfMoving := 1.
	[ indexOfPlacing < aCollectionOfMoves size ] whileTrue: [
			indexOfPlacing even ifTrue: [board moveAnOFrom: (aCollectionOfMoves at: indexOfPlacing) first to:  (aCollectionOfMoves at: indexOfPlacing) second] 
				ifFalse: [board moveAnOFrom: (aCollectionOfMoves at: indexOfPlacing) first to:  (aCollectionOfMoves at: indexOfPlacing) second].
			indexOfPlacing := indexOfPlacing + 1.
		]
	
	! !
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 16:54:19' prior: 50893879!
terniLapilliWith: aCollectionOfPlaces and: aCollectionOfMoves

	| indexOfPlacing board indexOfMoving |
	
	board := TerniLapilli new.
	indexOfPlacing := 1.
	[ indexOfPlacing < aCollectionOfMoves size ] whileTrue: [
			indexOfPlacing even ifTrue: [board placeXAt: (aCollectionOfMoves at: indexOfPlacing) ] 
				ifFalse: [board placeXAt: (aCollectionOfMoves at: indexOfPlacing) ].
			indexOfPlacing := indexOfPlacing + 1.
		].
	
	indexOfMoving := 1.
	[ indexOfMoving < aCollectionOfMoves size ] whileTrue: [
			indexOfMoving even ifTrue: [board moveAnOFrom: (aCollectionOfMoves at: indexOfMoving) first to:  (aCollectionOfMoves at: indexOfMoving) second] 
				ifFalse: [board moveAnOFrom: (aCollectionOfMoves at: indexOfMoving) first to:  (aCollectionOfMoves at: indexOfMoving) second].
			indexOfMoving := indexOfMoving + 1.
		]
	
	! !
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 16:54:33' prior: 50893909!
terniLapilliWith: aCollectionOfPlaces and: aCollectionOfMoves

	| indexOfPlacing board indexOfMoving |
	
	board := TerniLapilli new.
	indexOfPlacing := 1.
	[ indexOfPlacing < aCollectionOfMoves size ] whileTrue: [
			indexOfPlacing even ifTrue: [board placeOAt: (aCollectionOfMoves at: indexOfPlacing) ] 
				ifFalse: [board placeXAt: (aCollectionOfMoves at: indexOfPlacing) ].
			indexOfPlacing := indexOfPlacing + 1.
		].
	
	indexOfMoving := 1.
	[ indexOfMoving < aCollectionOfMoves size ] whileTrue: [
			indexOfMoving even ifTrue: [board moveAnOFrom: (aCollectionOfMoves at: indexOfMoving) first to:  (aCollectionOfMoves at: indexOfMoving) second] 
				ifFalse: [board moveAnOFrom: (aCollectionOfMoves at: indexOfMoving) first to:  (aCollectionOfMoves at: indexOfMoving) second].
			indexOfMoving := indexOfMoving + 1.
		]
	
	! !
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 16:54:46' prior: 50893939!
terniLapilliWith: aCollectionOfPlaces and: aCollectionOfMoves

	| indexOfPlacing board indexOfMoving |
	
	board := TerniLapilli new.
	indexOfPlacing := 1.
	[ indexOfPlacing < aCollectionOfMoves size ] whileTrue: [
			indexOfPlacing even ifTrue: [board placeOAt: (aCollectionOfMoves at: indexOfPlacing) ] 
				ifFalse: [board placeXAt: (aCollectionOfMoves at: indexOfPlacing) ].
			indexOfPlacing := indexOfPlacing + 1.
		].
	
	indexOfMoving := 1.
	[ indexOfMoving < aCollectionOfMoves size ] whileTrue: [
			indexOfMoving even ifTrue: [board moveAnOFrom: (aCollectionOfMoves at: indexOfMoving) first to:  (aCollectionOfMoves at: indexOfMoving) second] 
				ifFalse: [board moveAnXFrom: (aCollectionOfMoves at: indexOfMoving) first to:  (aCollectionOfMoves at: indexOfMoving) second].
			indexOfMoving := indexOfMoving + 1.
		]
	
	! !
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 16:57:29' prior: 50893969!
terniLapilliWith: aCollectionOfPlaces and: aCollectionOfMoves

	| board |
	
	board := TerniLapilli new.
	
	1 to: aCollectionOfPlaces size do: [:indexOfPlacing |
			indexOfPlacing even ifTrue: [board placeOAt: (aCollectionOfMoves at: indexOfPlacing) ] 
				ifFalse: [board placeXAt: (aCollectionOfMoves at: indexOfPlacing) ].
		].
	
	1 to: aCollectionOfMoves do: [: indexOfMoving |
			indexOfMoving even ifTrue: [board moveAnOFrom: (aCollectionOfMoves at: indexOfMoving) first to:  (aCollectionOfMoves at: indexOfMoving) second] 
				ifFalse: [board moveAnXFrom: (aCollectionOfMoves at: indexOfMoving) first to:  (aCollectionOfMoves at: indexOfMoving) second].
		]
	
	! !
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 16:57:43' prior: 50893999!
terniLapilliWith: aCollectionOfPlaces and: aCollectionOfMoves

	| board |
	
	board := TerniLapilli new.
	
	1 to: aCollectionOfPlaces size do: [:indexOfPlacing |
			indexOfPlacing even ifTrue: [board placeOAt: (aCollectionOfMoves at: indexOfPlacing) ] 
				ifFalse: [board placeXAt: (aCollectionOfMoves at: indexOfPlacing) ].
		].
	
	1 to: aCollectionOfMoves do: [: indexOfMoving |
			indexOfMoving even ifTrue: [board moveAnOFrom: (aCollectionOfMoves at: indexOfMoving) first to:  (aCollectionOfMoves at: indexOfMoving) second] 
				ifFalse: [board moveAnXFrom: (aCollectionOfMoves at: indexOfMoving) first to:  (aCollectionOfMoves at: indexOfMoving) second].
		].
	
	^board
	
	
	
	! !
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 16:59:12' prior: 50894024!
terniLapilliWith: aCollectionOfPlaces and: aCollectionOfMoves

	| board |
	
	board := TerniLapilli new.
	
	1 to: aCollectionOfPlaces size do: [:indexOfPlacing | | cellToPlace |
			cellToPlace := aCollectionOfPlaces.
			indexOfPlacing even ifTrue: [board placeOAt: cellToPlace ] 
				ifFalse: [board placeXAt: cellToPlace ].
		].
	
	1 to: aCollectionOfMoves do: [: indexOfMoving |
			indexOfMoving even ifTrue: [board moveAnOFrom: (aCollectionOfMoves at: indexOfMoving) first to:  (aCollectionOfMoves at: indexOfMoving) second] 
				ifFalse: [board moveAnXFrom: (aCollectionOfMoves at: indexOfMoving) first to:  (aCollectionOfMoves at: indexOfMoving) second].
		].
	
	^board
	
	
	
	! !
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 17:00:22' prior: 50894049!
terniLapilliWith: aCollectionOfPlaces and: aCollectionOfMoves

	| board |
	
	board := TerniLapilli new.
	
	1 to: aCollectionOfPlaces size do: [:indexOfPlacing | | cellToPlace |
			cellToPlace := aCollectionOfPlaces.
			indexOfPlacing even ifTrue: [board placeOAt: cellToPlace ] 
				ifFalse: [board placeXAt: cellToPlace ].
		].
	
	1 to: aCollectionOfMoves do: [: indexOfMoving | | fromCell toCell |
			fromCell :=  (aCollectionOfMoves at: indexOfMoving) first.
			toCell := (aCollectionOfMoves at: indexOfMoving) second.
			indexOfMoving even ifTrue: [board moveAnOFrom: fromCell to:  toCell] 
				ifFalse: [board moveAnXFrom: (aCollectionOfMoves at: indexOfMoving) first to:  (aCollectionOfMoves at: indexOfMoving) second].
		].
	
	^board
	
	
	
	! !
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 17:00:32' prior: 50894074!
terniLapilliWith: aCollectionOfPlaces and: aCollectionOfMoves

	| board |
	
	board := TerniLapilli new.
	
	1 to: aCollectionOfPlaces size do: [:indexOfPlacing | | cellToPlace |
			cellToPlace := aCollectionOfPlaces.
			indexOfPlacing even ifTrue: [board placeOAt: cellToPlace ] 
				ifFalse: [board placeXAt: cellToPlace ].
		].
	
	1 to: aCollectionOfMoves do: [: indexOfMoving | | fromCell toCell |
			fromCell :=  (aCollectionOfMoves at: indexOfMoving) first.
			toCell := (aCollectionOfMoves at: indexOfMoving) second.
			indexOfMoving even ifTrue: [board moveAnOFrom: fromCell to:  toCell] 
				ifFalse: [board moveAnXFrom: (aCollectionOfMoves at: indexOfMoving) first to:  toCell].
		].
	
	^board
	
	
	
	! !
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 17:00:40' prior: 50894101!
terniLapilliWith: aCollectionOfPlaces and: aCollectionOfMoves

	| board |
	
	board := TerniLapilli new.
	
	1 to: aCollectionOfPlaces size do: [:indexOfPlacing | | cellToPlace |
			cellToPlace := aCollectionOfPlaces.
			indexOfPlacing even ifTrue: [board placeOAt: cellToPlace ] 
				ifFalse: [board placeXAt: cellToPlace ].
		].
	
	1 to: aCollectionOfMoves do: [: indexOfMoving | | fromCell toCell |
			fromCell :=  (aCollectionOfMoves at: indexOfMoving) first.
			toCell := (aCollectionOfMoves at: indexOfMoving) second.
			indexOfMoving even ifTrue: [board moveAnOFrom: fromCell to:  toCell] 
				ifFalse: [board moveAnXFrom: fromCell first to:  toCell].
		].
	
	^board
	
	
	
	! !
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 17:02:11'!
addAsMoves: aCollectionOfMoves to: aTerniLapilli

	1 to: aCollectionOfMoves do: [: indexOfMoving | | fromCell toCell |
			fromCell :=  (aCollectionOfMoves at: indexOfMoving) first.
			toCell := (aCollectionOfMoves at: indexOfMoving) second.
			indexOfMoving even ifTrue: [aTerniLapilli moveAnOFrom: fromCell to:  toCell] 
				ifFalse: [aTerniLapilli moveAnXFrom: fromCell first to:  toCell].
		].
	
	^aTerniLapilli
	
	
	
	! !

!methodRemoval: TerniLapilliTest #terniLapilliWith: stamp: 'AM 11/1/2020 17:02:17'!
terniLapilliWith: aCollectionOfMoves

	| index board |
	
	board := TerniLapilli new.
	index := 1.
	[ index < 6 and: [index < aCollectionOfMoves size ]] whileTrue: [
			index even ifTrue: [board placeXAt: (aCollectionOfMoves at: index) ] 
				ifFalse: [board placeXAt: (aCollectionOfMoves at: index) ]
		]!
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 17:03:00'!
addAsPlaces: aCollectionOfPlaces to: aTerniLapilli
	
	1 to: aCollectionOfPlaces size do: [:indexOfPlacing | | cellToPlace |
			cellToPlace := aCollectionOfPlaces.
			indexOfPlacing even ifTrue: [aTerniLapilli placeOAt: cellToPlace ] 
				ifFalse: [aTerniLapilli placeXAt: cellToPlace ].
		].
	^aTerniLapilli
	
	
	
	! !
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 17:04:39' prior: 50894127!
terniLapilliWith: aCollectionOfPlaces and: aCollectionOfMoves

	| board |
	
	board := TerniLapilli new.
	
	board := self addAsPlaces: aCollectionOfPlaces to: board .
	board := self addAsMoves: aCollectionOfPlaces to: board .
	
	1 to: aCollectionOfMoves do: [: indexOfMoving | | fromCell toCell |
			fromCell :=  (aCollectionOfMoves at: indexOfMoving) first.
			toCell := (aCollectionOfMoves at: indexOfMoving) second.
			indexOfMoving even ifTrue: [board moveAnOFrom: fromCell to:  toCell] 
				ifFalse: [board moveAnXFrom: fromCell first to:  toCell].
		].
	
	^board
	
	
	
	! !
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 17:04:47' prior: 50894195!
terniLapilliWith: aCollectionOfPlaces and: aCollectionOfMoves

	| board |
	
	board := TerniLapilli new.
	
	board := self addAsPlaces: aCollectionOfPlaces to: board .
	board := self addAsMoves: aCollectionOfMoves to: board .
	
	^board
	
	
	
	! !
!TerniLapilliTest methodsFor: 'testing no repetition' stamp: 'AM 11/1/2020 17:05:19' prior: 50879893!
test04PlayersShouldNotPlayOnOccupiedCell
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: [ 1@1 ] and: [ ] .
	
	self should: [ boardTerniLapilli placeOAt: 1@1 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription.! !

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 17:05:22'!
ERROR!
!TerniLapilliTest methodsFor: 'testing no repetition' stamp: 'AM 11/1/2020 17:05:42' prior: 50894228!
test04PlayersShouldNotPlayOnOccupiedCell
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: { 1@1 }and: { } .
	
	self should: [ boardTerniLapilli placeOAt: 1@1 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing no repetition' stamp: 'AM 11/1/2020 17:05:46' prior: 50894244!
test04PlayersShouldNotPlayOnOccupiedCell
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: { 1@1 } and: { } .
	
	self should: [ boardTerniLapilli placeOAt: 1@1 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription.! !

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 17:05:47'!
ERROR!
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 17:06:37' prior: 50894181!
addAsPlaces: aCollectionOfPlaces to: aTerniLapilli
	
	1 to: aCollectionOfPlaces size do: [:indexOfPlacing | | cellToPlace |
			cellToPlace := aCollectionOfPlaces at: indexOfPlacing.
			indexOfPlacing even ifTrue: [aTerniLapilli placeOAt: cellToPlace ] 
				ifFalse: [aTerniLapilli placeXAt: cellToPlace ].
		].
	^aTerniLapilli
	
	
	
	! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 17:06:43'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 17:06:43'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 17:06:43'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 17:06:43'!
ERROR!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 17:06:43'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 17:06:43'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 17:06:43'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 17:06:43'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlaceWhenItsXsTurn stamp: 'AM 11/1/2020 17:06:43'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 17:06:43'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 17:06:43'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 17:06:43'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 17:06:43'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 17:06:43'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 17:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 17:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 17:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 17:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 17:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 17:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 17:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 17:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 17:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 17:06:44'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 17:06:44'!
ERROR!
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 17:07:32' prior: 50894152!
addAsMoves: aCollectionOfMoves to: aTerniLapilli

	1 to: aCollectionOfMoves size do: [: indexOfMoving | | fromCell toCell |
			fromCell :=  (aCollectionOfMoves at: indexOfMoving) first.
			toCell := (aCollectionOfMoves at: indexOfMoving) second.
			indexOfMoving even ifTrue: [aTerniLapilli moveAnOFrom: fromCell to:  toCell] 
				ifFalse: [aTerniLapilli moveAnXFrom: fromCell first to:  toCell].
		].
	
	^aTerniLapilli
	
	
	
	! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlaceWhenItsXsTurn stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 17:07:35'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 17:07:35'!
PASSED!
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 11/1/2020 17:07:52' prior: 50885725!
test05ShouldNotPlaceAChipToTheRightOfTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {} and: {}.
	self should: [boardTerniLapilli placeXAt: 4@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 11/1/2020 17:08:06' prior: 50885748!
test07ShouldNotPlaceAChipToTheLeftOfTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {} and: {}.
	self should: [boardTerniLapilli placeXAt: 0@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 11/1/2020 17:08:12' prior: 50885768!
test09ShouldNotPlaceAChipBelowTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {} and: {}.
	self should: [boardTerniLapilli placeXAt: 2@0 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing cells in bounds' stamp: 'AM 11/1/2020 17:08:17' prior: 50885788!
test11ShouldNotPlaceAChipAboveTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {} and: {}.
	self should: [boardTerniLapilli placeXAt: 2@4 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing game over' stamp: 'AM 11/1/2020 17:08:23' prior: 50885996!
test17InitialGameIsNotOver
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {} and: {}.
	self deny: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'testing game over' stamp: 'AM 11/1/2020 17:09:00' prior: 50886009!
test18FirstRowForXIsWinningGame
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: { 1@1. 1@2. 2@1. 1@3. 3@1} and: {}.
	
	self assert: boardTerniLapilli isOver.! !

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlaceWhenItsXsTurn stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 17:09:03'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 17:09:03'!
PASSED!
!TerniLapilliTest methodsFor: 'testing game over' stamp: 'AM 11/1/2020 17:10:03' prior: 50891150!
test19FirstColumnForOIsWinningGame
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {2@3. 1@2. 2@2. 1@3. 3@2. 1@1} and: {}.
	
	self assert: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'testing game over' stamp: 'AM 11/1/2020 17:10:50' prior: 50892440!
test31XShouldBeDeclaredWinnerIfThreeChipsAligned

	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {3@2. 1@1. 2@2. 1@3. 2@3. 1@2} and: {}.
		
	self assert: boardTerniLapilli hasOAlreadyWon.
		
	
	
	
	
	! !

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlaceWhenItsXsTurn stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 17:10:52'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 17:10:52'!
PASSED!
!TerniLapilliTest methodsFor: 'testing placing' stamp: 'AM 11/1/2020 17:11:02' prior: 50893740!
test01FirstPlayerIsX
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {} and: {}.
	
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing placing' stamp: 'AM 11/1/2020 17:11:11' prior: 50893750!
test02SecondPlayerIsO
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {1@1} and: {}.
	
	self deny: boardTerniLapilli isXPlayingNext.
	self assert: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing placing' stamp: 'AM 11/1/2020 17:11:23' prior: 50893761!
test03ThirdPlayerIsX
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {1@1. 2@1} and: {}.
	boardTerniLapilli placeXAt: 1@1.
	boardTerniLapilli placeOAt: 2@1.
	
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing placing' stamp: 'AM 11/1/2020 17:11:26' prior: 50894763!
test03ThirdPlayerIsX
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {1@1. 2@1} and: {}.
	
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlaceWhenItsXsTurn stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 17:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 17:11:28'!
PASSED!
!TerniLapilliTest methodsFor: 'testing placing' stamp: 'AM 11/1/2020 17:11:36' prior: 50893772!
test13OShouldNotPlaceWhenItsXsTurn
	
	| boardTerniLapilli |
	
	boardTerniLapilli := TerniLapilli new.
	
	self should: [boardTerniLapilli placeOAt: 2@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing placing' stamp: 'AM 11/1/2020 17:12:01' prior: 50891178!
test21ShouldNotPlaceWhenGameIsOver
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {1@1. 1@2. 2@1. 2@1. 1@3. 3@1} and: {}.
	
	self should: [boardTerniLapilli placeOAt: 2@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing placing' stamp: 'AM 11/1/2020 17:12:40' prior: 50892242!
test30PlayerShouldNotPlaceAfterPlacingThreeChips
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {2@1. 3@1. 1@2. 2@2. 3@2. 1@1} and: {}.
	
	self should: [ boardTerniLapilli placeXAt: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceAChipAfterPlacingThreeChipsErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 17:13:17' prior: 50891116!
test20ShouldNotMoveChipToOccupiedCell	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {1@1. 2@1. 3@1. 1@2. 2@2. 3@2} and: {}.
	
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription .! !

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 17:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 17:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 17:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 17:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 17:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 17:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 17:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 17:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 17:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlaceWhenItsXsTurn stamp: 'AM 11/1/2020 17:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 17:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 17:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 17:13:19'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 17:13:20'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 17:13:20'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 17:13:20'!
ERROR!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:13:20'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 17:13:20'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 17:13:20'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 17:13:20'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 17:13:20'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 17:13:20'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 17:13:20'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 17:13:20'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 17:13:20'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 17:13:20'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 17:13:20'!
ERROR!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 17:14:16'!
ERROR!
!TerniLapilliTest methodsFor: 'testing placing' stamp: 'AM 11/1/2020 17:16:30' prior: 50894886!
test21ShouldNotPlaceWhenGameIsOver
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {1@1. 1@2. 2@1. 1@3. 3@1} and: {}.
	
	self should: [boardTerniLapilli placeOAt: 2@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription.! !

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 17:16:31'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 17:16:31'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlaceWhenItsXsTurn stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 17:16:32'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 17:16:32'!
PASSED!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 17:17:32' prior: 50891209!
test22GameIsOverAfterOMoves
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {1@1. 1@2. 1@3. 2@2. 2@3. 3@1} and: {(2@3, 3@3). (3@1, 3@2)}.
	
	self assert: boardTerniLapilli isOver.
		! !

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:17:32'!
ERROR!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 17:18:20' prior: 50895124!
test22GameIsOverAfterOMoves
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {1@1. 1@2. 1@3. 2@2. 2@3. 3@1} and: {{2@3. 3@3}. {3@1. 3@2}}.
	
	self assert: boardTerniLapilli isOver.
		! !

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:18:22'!
ERROR!
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 17:18:54' prior: 50894376!
addAsMoves: aCollectionOfMoves to: aTerniLapilli

	1 to: aCollectionOfMoves size do: [: indexOfMoving | | fromCell toCell |
			fromCell :=  (aCollectionOfMoves at: indexOfMoving) x.
			toCell := (aCollectionOfMoves at: indexOfMoving) y.
			indexOfMoving even ifTrue: [aTerniLapilli moveAnOFrom: fromCell to:  toCell] 
				ifFalse: [aTerniLapilli moveAnXFrom: fromCell first to:  toCell].
		].
	
	^aTerniLapilli
	
	
	
	! !
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 17:20:09' prior: 50895150!
addAsMoves: aCollectionOfMoves to: aTerniLapilli

	1 to: aCollectionOfMoves size do: [: indexOfMoving | | fromCell toCell |
			fromCell :=  (aCollectionOfMoves at: indexOfMoving) at: 1.
			toCell := (aCollectionOfMoves at: indexOfMoving) at: 2.
			indexOfMoving even ifTrue: [aTerniLapilli moveAnOFrom: fromCell to:  toCell] 
				ifFalse: [aTerniLapilli moveAnXFrom: fromCell first to:  toCell].
		].
	
	^aTerniLapilli
	
	
	
	! !

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlaceWhenItsXsTurn stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:20:14'!
ERROR!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 17:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 17:20:15'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 17:20:15'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 17:20:15'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 17:20:15'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 17:20:15'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 17:20:15'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:20:15'!
ERROR!

(aCollectionOfMoves at: indexOfMoving)!
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 17:21:44' prior: 50895167!
addAsMoves: aCollectionOfMoves to: aTerniLapilli

	1 to: aCollectionOfMoves size do: [: indexOfMoving | | fromCell toCell |
			fromCell :=  (aCollectionOfMoves at: indexOfMoving) first.
			toCell := (aCollectionOfMoves at: indexOfMoving) second.
			indexOfMoving even ifTrue: [aTerniLapilli moveAnOFrom: fromCell to:  toCell] 
				ifFalse: [aTerniLapilli moveAnXFrom: fromCell to:  toCell].
		].
	
	^aTerniLapilli
	
	
	
	! !

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlaceWhenItsXsTurn stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 17:21:53'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 17:21:53'!
PASSED!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 17:22:49' prior: 50891241!
test23ShouldNotMoveWhenGameIsOver
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {2@3. 1@2. 2@1. 1@3. 3@2. 1@1} and: {}.
	
	self should: [boardTerniLapilli moveAnXFrom: 3@2 to: 2@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 17:23:32' prior: 50885857!
test24AfterAMovingOperationOfXIsOTurn
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {1@1. 2@1. 3@1. 1@2. 2@2. 3@2} and: {{2@2. 2@3}}.
	
	boardTerniLapilli moveAnXFrom: 2@2 to: 2@3.
	self deny: boardTerniLapilli isXPlayingNext.
	self assert: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 17:23:40' prior: 50895392!
test24AfterAMovingOperationOfXIsOTurn
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {1@1. 2@1. 3@1. 1@2. 2@2. 3@2} and: {{2@2. 2@3}}.
	
	self deny: boardTerniLapilli isXPlayingNext.
	self assert: boardTerniLapilli isOPlayingNext.! !

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlaceWhenItsXsTurn stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 17:23:41'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 17:23:42'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 17:23:42'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 17:23:42'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 17:23:42'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 17:23:42'!
PASSED!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 17:24:06' prior: 50885960!
test25MovingOperationDoesNotAllowPlayingOnOthersTurn
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {1@1. 2@1. 3@1. 1@2. 2@2. 3@2} and: {}.
	
	self should: [boardTerniLapilli moveAnOFrom: 3@2 to: 2@3]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 17:24:36' prior: 50891442!
test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {1@1. 2@1. 3@1. 1@2. 2@2. 3@2} and: {}.
	
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellWithoutAChipOfItsOwnershipErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 17:25:06' prior: 50891647!
test27PlayerShouldNotMoveChipToNonAdjacentCell
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {1@1. 2@1. 3@1. 1@2. 2@2. 3@2} and: {}.
	
	self should: [ boardTerniLapilli moveAnXFrom: 3@1 to: 3@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 17:25:51' prior: 50891734!
test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals
	| boardTerniLapilli |

	boardTerniLapilli := self terniLapilliWith: {2@1. 3@1. 1@2. 1@2. 2@2. 3@2. 1@1} and: {}.
	
	self should: [ boardTerniLapilli moveAnXFrom: 3@2 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 17:26:17' prior: 50892199!
test29PlayerShouldBeAbleToMoveAlongMainDiagonals
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWith: {3@1. 2@1. 3@2. 1@2. 2@2. 1@1} and: {}.
		
	self shouldnt: [ boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.] 
		raise: Error.
	! !

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 17:26:19'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 17:26:19'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 17:26:19'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 17:26:19'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 17:26:19'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 17:26:19'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 17:26:19'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 17:26:19'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 17:26:19'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlaceWhenItsXsTurn stamp: 'AM 11/1/2020 17:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 17:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 17:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 17:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 17:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 17:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 17:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 17:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 17:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 17:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 17:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 17:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 17:26:20'!
ERROR!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 17:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 17:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 17:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 17:26:20'!
ERROR!
!TerniLapilliTest methodsFor: 'testing moving' stamp: 'AM 11/1/2020 17:26:39' prior: 50895549!
test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals
	| boardTerniLapilli |

	boardTerniLapilli := self terniLapilliWith: {2@1. 3@1. 1@2. 2@2. 3@2. 1@1} and: {}.
	
	self should: [ boardTerniLapilli moveAnXFrom: 3@2 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.! !

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlaceWhenItsXsTurn stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 17:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 17:26:54'!
PASSED!
!TerniLapilliTest methodsFor: 'instance terni lapilli' stamp: 'AM 11/1/2020 17:27:41'!
terniLapilliWithPlaces: aCollectionOfPlaces andMoves: aCollectionOfMoves

	| board |
	
	board := TerniLapilli new.
	
	board := self addAsPlaces: aCollectionOfPlaces to: board .
	board := self addAsMoves: aCollectionOfMoves to: board .
	
	^board
	
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:41' prior: 50895405!
test24AfterAMovingOperationOfXIsOTurn
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {1@1. 2@1. 3@1. 1@2. 2@2. 3@2} andMoves: {{2@2. 2@3}}.
	
	self deny: boardTerniLapilli isXPlayingNext.
	self assert: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:41' prior: 50895520!
test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {1@1. 2@1. 3@1. 1@2. 2@2. 3@2} andMoves: {}.
	
	self should: [ boardTerniLapilli moveAnXFrom: 3@3 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveFromACellWithoutAChipOfItsOwnershipErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:41' prior: 50895667!
test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals
	| boardTerniLapilli |

	boardTerniLapilli := self terniLapilliWithPlaces: {2@1. 3@1. 1@2. 2@2. 3@2. 1@1} andMoves: {}.
	
	self should: [ boardTerniLapilli moveAnXFrom: 3@2 to: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:42' prior: 50894913!
test20ShouldNotMoveChipToOccupiedCell	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {1@1. 2@1. 3@1. 1@2. 2@2. 3@2} andMoves: {}.
	
	self should: [ boardTerniLapilli moveAnXFrom: 2@2 to: 1@2.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:42' prior: 50894515!
test11ShouldNotPlaceAChipAboveTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {} andMoves: {}.
	self should: [boardTerniLapilli placeXAt: 2@4 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:42' prior: 50894899!
test30PlayerShouldNotPlaceAfterPlacingThreeChips
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {2@1. 3@1. 1@2. 2@2. 3@2. 1@1} andMoves: {}.
	
	self should: [ boardTerniLapilli placeXAt: 2@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceAChipAfterPlacingThreeChipsErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:42' prior: 50894633!
test19FirstColumnForOIsWinningGame
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {2@3. 1@2. 2@2. 1@3. 3@2. 1@1} andMoves: {}.
	
	self assert: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:42' prior: 50894503!
test09ShouldNotPlaceAChipBelowTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {} andMoves: {}.
	self should: [boardTerniLapilli placeXAt: 2@0 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:43' prior: 50895535!
test27PlayerShouldNotMoveChipToNonAdjacentCell
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {1@1. 2@1. 3@1. 1@2. 2@2. 3@2} andMoves: {}.
	
	self should: [ boardTerniLapilli moveAnXFrom: 3@1 to: 3@3.]
		raise: Error
		withMessageText: boardTerniLapilli class canNotMoveChipToNonAdjacentCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:43' prior: 50895137!
test22GameIsOverAfterOMoves
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {1@1. 1@2. 1@3. 2@2. 2@3. 3@1} andMoves: {{2@3. 3@3}. {3@1. 3@2}}.
	
	self assert: boardTerniLapilli isOver.
		! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:43' prior: 50894535!
test18FirstRowForXIsWinningGame
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: { 1@1. 1@2. 2@1. 1@3. 3@1} andMoves: {}.
	
	self assert: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:43' prior: 50894257!
test04PlayersShouldNotPlayOnOccupiedCell
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: { 1@1 } andMoves: { } .
	
	self should: [ boardTerniLapilli placeOAt: 1@1 ]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlaceChipInOccupiedCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:43' prior: 50894479!
test05ShouldNotPlaceAChipToTheRightOfTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {} andMoves: {}.
	self should: [boardTerniLapilli placeXAt: 4@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:44' prior: 50894743!
test01FirstPlayerIsX
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {} andMoves: {}.
	
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:44' prior: 50895563!
test29PlayerShouldBeAbleToMoveAlongMainDiagonals
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {3@1. 2@1. 3@2. 1@2. 2@2. 1@1} andMoves: {}.
		
	self shouldnt: [ boardTerniLapilli moveAnXFrom: 2@2 to: 3@3.] 
		raise: Error.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:44' prior: 50895506!
test25MovingOperationDoesNotAllowPlayingOnOthersTurn
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {1@1. 2@1. 3@1. 1@2. 2@2. 3@2} andMoves: {}.
	
	self should: [boardTerniLapilli moveAnOFrom: 3@2 to: 2@3]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayOnOtherPlayersTurnErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:44' prior: 50895022!
test21ShouldNotPlaceWhenGameIsOver
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {1@1. 1@2. 2@1. 1@3. 3@1} andMoves: {}.
	
	self should: [boardTerniLapilli placeOAt: 2@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:44' prior: 50895379!
test23ShouldNotMoveWhenGameIsOver
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {2@3. 1@2. 2@1. 1@3. 3@2. 1@1} andMoves: {}.
	
	self should: [boardTerniLapilli moveAnXFrom: 3@2 to: 2@2]
		raise: Error
		withMessageText: boardTerniLapilli class canNotPlayWhenGameIsAlreadyOverErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:45' prior: 50894491!
test07ShouldNotPlaceAChipToTheLeftOfTheBoard
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {} andMoves: {}.
	self should: [boardTerniLapilli placeXAt: 0@2 ]
		raise: Error
		withMessageText: boardTerniLapilli class cellIsOutOfBoundsErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:45' prior: 50894527!
test17InitialGameIsNotOver
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {} andMoves: {}.
	self deny: boardTerniLapilli isOver.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:45' prior: 50894775!
test03ThirdPlayerIsX
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {1@1. 2@1} andMoves: {}.
	
	self assert: boardTerniLapilli isXPlayingNext.
	self deny: boardTerniLapilli isOPlayingNext.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:45' prior: 50894643!
test31XShouldBeDeclaredWinnerIfThreeChipsAligned

	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {3@2. 1@1. 2@2. 1@3. 2@3. 1@2} andMoves: {}.
		
	self assert: boardTerniLapilli hasOAlreadyWon.
		
	
	
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'AM 11/1/2020 17:27:45' prior: 50894753!
test02SecondPlayerIsO
	
	| boardTerniLapilli |
	
	boardTerniLapilli := self terniLapilliWithPlaces: {1@1} andMoves: {}.
	
	self deny: boardTerniLapilli isXPlayingNext.
	self assert: boardTerniLapilli isOPlayingNext.! !

!methodRemoval: TerniLapilliTest #terniLapilliWith:and: stamp: 'AM 11/1/2020 17:27:45'!
terniLapilliWith: aCollectionOfPlaces and: aCollectionOfMoves

	| board |
	
	board := TerniLapilli new.
	
	board := self addAsPlaces: aCollectionOfPlaces to: board .
	board := self addAsMoves: aCollectionOfMoves to: board .
	
	^board
	
	
	
	!

!testRun: #TerniLapilliTest #test01FirstPlayerIsX stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test02SecondPlayerIsO stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test03ThirdPlayerIsX stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayersShouldNotPlayOnOccupiedCell stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test05ShouldNotPlaceAChipToTheRightOfTheBoard stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test07ShouldNotPlaceAChipToTheLeftOfTheBoard stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test09ShouldNotPlaceAChipBelowTheBoard stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test11ShouldNotPlaceAChipAboveTheBoard stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test13OShouldNotPlaceWhenItsXsTurn stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerShouldNotMoveBeforePlacingThreeChips stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test17InitialGameIsNotOver stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test18FirstRowForXIsWinningGame stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test19FirstColumnForOIsWinningGame stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test20ShouldNotMoveChipToOccupiedCell stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test21ShouldNotPlaceWhenGameIsOver stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test22GameIsOverAfterOMoves stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test23ShouldNotMoveWhenGameIsOver stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test24AfterAMovingOperationOfXIsOTurn stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test25MovingOperationDoesNotAllowPlayingOnOthersTurn stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerShouldNotMoveFromACellWithoutAChipOfItsOwnership stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerShouldNotMoveChipToNonAdjacentCell stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerShouldNotMoveDiagonallyOutsideMainDiagonals stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerShouldBeAbleToMoveAlongMainDiagonals stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerShouldNotPlaceAfterPlacingThreeChips stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

!testRun: #TerniLapilliTest #test31XShouldBeDeclaredWinnerIfThreeChipsAligned stamp: 'AM 11/1/2020 17:27:50'!
PASSED!

----QUIT----(1 November 2020 17:30:19) CuisUniversity-4384.image priorSource: 17986715!