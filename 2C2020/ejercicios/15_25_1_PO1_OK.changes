

----End fileIn of /Users/monteagudo/Desktop/Inge1/18-Portfolio1/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'HG 11/2/2020 19:23:14'!
FAILURE!
!Withdraw methodsFor: 'value' stamp: 'HG 11/2/2020 19:23:54' prior: 50877490 overrides: 50877419!
value

	^ value! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HG 11/2/2020 19:28:58' prior: 50877534!
balance

	^transactions sum: [ :aTransaction | aTransaction balanceTransaction ] ifEmpty: [ 0 ]! !
!Deposit methodsFor: 'value' stamp: 'HG 11/2/2020 19:29:07'!
balanceTransaction

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'HG 11/2/2020 19:29:21'!
balanceTransaction

	^ value negated.! !

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'HG 11/2/2020 19:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'HG 11/2/2020 19:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'HG 11/2/2020 19:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'HG 11/2/2020 19:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'HG 11/2/2020 19:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'HG 11/2/2020 19:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'HG 11/2/2020 19:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'HG 11/2/2020 19:29:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'HG 11/2/2020 19:31:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'HG 11/2/2020 19:31:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'HG 11/2/2020 19:31:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'HG 11/2/2020 19:31:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'HG 11/2/2020 19:31:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'HG 11/2/2020 19:31:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'HG 11/2/2020 19:31:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'HG 11/2/2020 19:31:45'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: #'Portfolio-Ejercicio' stamp: 'HG 11/2/2020 19:32:01'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/2/2020 19:40:40'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'HG 11/2/2020 19:40:09'!
test01
	
	| aPortfolio |
	aPortfolio _ Portfolio new.
	self assert: aPortfolio balance equals: 0.! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/2/2020 19:40:46'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/2/2020 19:42:19'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'HG 11/2/2020 19:42:30'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'balance' stamp: 'HG 11/2/2020 19:42:39' prior: 50877657!
balance
	^0.! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/2/2020 19:42:41'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/2/2020 19:42:41'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 19:43:34' prior: 50877647!
test01
	
	| aPortfolio |
	aPortfolio _ Portfolio new.
	self assert: aPortfolio balance equals: 0.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 19:46:32' prior: 50877670!
test01
	
	| aPortfolio |
	aPortfolio _ Portfolio new.
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 19:49:18' prior: 50877677!
test01
	
	| aPortfolio |
	aPortfolio _ Portfolio new.
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/2/2020 19:49:19'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 19:49:35'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 19:49:46' prior: 50877695!
transactions
	^OrderedCollection new.! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/2/2020 19:49:50'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/2/2020 19:49:50'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 19:50:55'!
test02
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 19:52:16' prior: 50877709!
test02
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 19:52:55' prior: 50877685!
test01
	
	| aPortfolio |
	aPortfolio _ Portfolio new.
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 19:53:49' prior: 50877729!
test01
	
	| aPortfolio |
	aPortfolio _ Portfolio new.
	self assert: aPortfolio balance equals: 0.
	! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HG 11/2/2020 20:30:55' prior: 50877556!
balance

	^transactions do: [ :aTransaction | | balance | aTransaction addToBalance: balance ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HG 11/2/2020 20:31:23' prior: 50877743!
balance

	| balance | 
	
	^transactions do: [ :aTransaction | aTransaction addToBalance: balance ].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HG 11/2/2020 20:31:30' prior: 50877750!
balance

	| balance | 
	balance _ 0.
	^transactions do: [ :aTransaction | aTransaction addToBalance: balance ].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HG 11/2/2020 20:31:46' prior: 50877756!
balance

	| balance | 
	balance _ 0.
	transactions do: [ :aTransaction | aTransaction addToBalance: balance ].
	^balance.! !
!Withdraw methodsFor: 'value' stamp: 'HG 11/2/2020 20:32:42'!
addToBalance: aBalance

	^ aBalance become: (aBalance-(self value)).! !
!Withdraw methodsFor: 'value' stamp: 'HG 11/2/2020 20:32:47' prior: 50877769!
addToBalance: aBalance
	^aBalance become: (aBalance-(self value)).! !

!methodRemoval: Withdraw #balanceTransaction stamp: 'HG 11/2/2020 20:32:58'!
balanceTransaction

	^ value negated.!
!Deposit methodsFor: 'value' stamp: 'HG 11/2/2020 20:33:15'!
addToBalance: aBalance
	^aBalance become: (aBalance+(self value)).! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'HG 11/2/2020 20:33:19'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'HG 11/2/2020 20:36:05' prior: 50877763!
balance

	| balanceListValues | 
	balanceListValues _ OrderedCollection new.
	transactions do: [ :aTransaction | aTransaction addToBalance: balanceListValues ].
	^balanceListValues.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HG 11/2/2020 20:42:13' prior: 50877791!
balance

	| balanceListValues | 
	balanceListValues _ OrderedCollection new.
	transactions do: [ :aTransaction | aTransaction addToBalance: balanceListValues ].
	^balanceListValues sum.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HG 11/2/2020 20:47:38' prior: 50877800!
balance

	| balanceListValues balance | 
"	balanceListValues _ OrderedCollection new."
	balance _ 0.
	transactions do: [ :aTransaction | aTransaction addToBalance: balanceListValues ].
	^balanceListValues sum.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HG 11/2/2020 20:48:06' prior: 50877809!
balance

	| balance | 
"	balanceListValues _ OrderedCollection new."
	balance _ 0.
	transactions do: [ :aTransaction | aTransaction addToBalance: balance ].
	^balance.! !
!Deposit methodsFor: 'value' stamp: 'HG 11/2/2020 21:05:47' prior: 50877782!
addToBalance: aReceptiveAccount
	^aReceptiveAccount contributeToBalanceAsDeposit: self value.! !
!Withdraw methodsFor: 'value' stamp: 'HG 11/2/2020 21:06:19' prior: 50877774!
addToBalance: aReceptiveAccount
	^aReceptiveAccount contributeToBalanceAsWithdraw: self.! !
!ReceptiveAccount methodsFor: 'balance contributions --private' stamp: 'HG 11/2/2020 21:09:41'!
contributeToBalanceAsDeposit: xxx! !
!ReceptiveAccount methodsFor: 'balance contributions --private' stamp: 'HG 11/2/2020 21:09:56' prior: 50877839!
contributeToBalanceAsDeposit: anAccountTransaction! !
!ReceptiveAccount methodsFor: 'balance contributions --private' stamp: 'HG 11/2/2020 21:10:16' prior: 50877844!
contributeToBalanceAsDeposit: anAccountTransactionValue! !
!ReceptiveAccount methodsFor: 'balance contributions --private' stamp: 'HG 11/2/2020 21:10:29' prior: 50877850!
contributeToBalanceAsDeposit: anAccountTransactionValue
	! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HG 11/2/2020 21:12:38' prior: 50877819!
balance

	| balance | 
"	balanceListValues _ OrderedCollection new."
	balance _ 0.
	transactions sum: [ :aTransaction | aTransaction addToBalance: balance ].
	^balance.! !

----QUIT----(3 November 2020 17:40:31) CuisUniversity-4137.image priorSource: 17413082!

----STARTUP---- (6 November 2020 10:14:24) as /Users/monteagudo/Downloads/macos64/CuisUniversity-4137.image!

!ReceptiveAccount methodsFor: 'balance' stamp: 'HG 11/6/2020 10:24:39' prior: 50877861!
balance

	| balance | 
"	balanceListValues _ OrderedCollection new."
	balance _ 0.
	^transactions sum: [ :aTransaction | aTransaction addToBalance: balance ].
	! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HG 11/6/2020 10:42:19' prior: 50877876!
balance

	| balance | 
"	balanceListValues _ OrderedCollection new."
	balance _ 0.
	^transactions sum: [ :aTransaction | aTransaction addToBalance: self ].
	! !

Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions balanceCount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: #'Portfolio-Ejercicio' stamp: 'HG 11/6/2020 10:42:59'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions balanceCount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'balance' stamp: 'HG 11/6/2020 10:43:22' prior: 50877884!
balance

	transactions do: [ :aTransaction | aTransaction addToBalance: self ].
	^balanceCount. ! !
!ReceptiveAccount methodsFor: 'balance contributions --private' stamp: 'HG 11/6/2020 10:43:42' prior: 50877856!
contributeToBalanceAsDeposit: anAccountTransactionValue
	balanceCount _ balanceCount + anAccountTransactionValue. ! !
!ReceptiveAccount methodsFor: 'balance contributions --private' stamp: 'HG 11/6/2020 10:43:51'!
contributeToBalanceAsWithdraw: anAccountTransactionValue
	balanceCount _ balanceCount - anAccountTransactionValue. ! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'HG 11/6/2020 10:44:00'!
ERROR!
!Withdraw methodsFor: 'value' stamp: 'HG 11/6/2020 10:44:20' prior: 50877833!
addToBalance: aReceptiveAccount
	^aReceptiveAccount contributeToBalanceAsWithdraw: self value.! !

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'HG 11/6/2020 10:44:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'HG 11/6/2020 10:44:23'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'HG 11/6/2020 10:44:23'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'HG 11/6/2020 10:44:23'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'HG 11/6/2020 10:44:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'HG 11/6/2020 10:44:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'HG 11/6/2020 10:44:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'HG 11/6/2020 10:44:23'!
PASSED!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'HG 11/6/2020 10:44:46' prior: 50877520 overrides: 16896425!
initialize

	transactions := OrderedCollection new.
	balanceCount _ 0.! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'HG 11/6/2020 10:44:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'HG 11/6/2020 10:44:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'HG 11/6/2020 10:44:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'HG 11/6/2020 10:44:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'HG 11/6/2020 10:44:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'HG 11/6/2020 10:44:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'HG 11/6/2020 10:44:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'HG 11/6/2020 10:44:49'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 10:57:20' prior: 50877737!
test01
	
	| aPortfolio |
	aPortfolio _ Portfolio new.
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 10:57:21'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 10:57:21'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 10:57:21'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 11:01:49' prior: 50877719!
test02
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: aPortfolio hasRegistered: aReceptiveAccount.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 11:01:56' prior: 50878023!
test02
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio hasRegistered: aReceptiveAccount).! !

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 11:01:59'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'HG 11/6/2020 11:03:16'!
hasRegistered: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'HG 11/6/2020 11:03:22' prior: 50878048!
hasRegistered: aReceptiveAccount 
	^false.! !

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 11:03:24'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 11:03:24'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 11:03:24'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 11:03:54'!
test03
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	
	aPortfolio add: aReceptiveAccount.
	 
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio hasRegistered: aReceptiveAccount).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 11:04:01' prior: 50878064!
test03
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	
	aPortfolio add: aReceptiveAccount.
	 
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aReceptiveAccount).! !

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 11:04:05'!
ERROR!
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/6/2020 11:07:07'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/6/2020 11:07:40'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/6/2020 11:07:33' prior: 50878092!
add: aReceptiveAccount 
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 11:07:43'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'HG 11/6/2020 11:08:44' overrides: 16896425!
initialize
	accounts _ OrderedCollection new.! !

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 11:08:48'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'HG 11/6/2020 11:09:07' prior: 50878053!
hasRegistered: aReceptiveAccount 
	^accounts includes: aReceptiveAccount.! !

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 11:10:31'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 11:10:31'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 11:10:31'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 11:10:31'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 11:11:29'!
test04
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	Deposit register: 100 on: aReceptiveAccount.
	
	aPortfolio add: aReceptiveAccount.
	 
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aReceptiveAccount).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 11:11:43' prior: 50878135!
test04
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	Deposit register: 100 on: aReceptiveAccount.
	
	aPortfolio add: aReceptiveAccount.
	 
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aReceptiveAccount).! !

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 11:11:43'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'HG 11/6/2020 11:12:22' prior: 50877661!
balance
	^accounts sum: [:anAccount | anAccount balance].! !

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 11:12:26'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/6/2020 11:18:53' prior: 50877700!
transactions
	accounts do: [:anAccount | 
		(anAccount transactions isEmpty)
			ifFalse: [^true.]
		] ! !
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/6/2020 11:18:55' prior: 50878174!
transactions
	accounts do: [:anAccount | 
		(anAccount transactions isEmpty)
			ifFalse: [^true.].
		] ! !
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/6/2020 11:19:46' prior: 50878180!
transactions
	| transactionList |
	transactionList _ OrderedCollection new.
	accounts do: [:anAccount | 
		(anAccount transactions isEmpty)
			ifFalse: [^true.].
		].
	^transactionList. ! !
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/6/2020 11:21:08' prior: 50878187!
transactions
	| transactionList |
	transactionList _ OrderedCollection new.
	accounts do: [:anAccount | 
		anAccount transactions
			do: [:aTransaction | transactionList add: aTransaction ]
		].
	^transactionList. ! !
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/6/2020 11:21:18' prior: 50878196!
transactions
	| transactionList |
	transactionList _ OrderedCollection new.
	accounts do: [:anAccount | 
		anAccount transactions
			do: [:aTransaction | transactionList add: aTransaction ]].
	^transactionList. ! !

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 11:21:22'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 11:21:22'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 11:21:22'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 11:21:22'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 11:21:22'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 11:22:03'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 11:22:39'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'HG 11/6/2020 11:23:50' prior: 50878167!
balance
	accounts isEmpty ifTrue: [^0].
	^accounts sum: [:anAccount | anAccount balance].! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 11:23:52'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 11:23:53'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 11:23:53'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 11:23:53'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 11:23:53'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 11:35:03'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 11:35:03'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 11:35:03'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 11:35:03'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 11:35:03'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 11:35:27' prior: 50878150!
test04
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 100 on: aReceptiveAccount.
	
	aPortfolio add: aReceptiveAccount.
	 
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aReceptiveAccount).! !

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 11:35:28'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 11:46:39' prior: 50878262!
test04
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 100 on: aReceptiveAccount.
	
	aPortfolio add: aReceptiveAccount.
	 
	self assert: aPortfolio balance equals: 0.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aReceptiveAccount).! !

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 11:46:39'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 11:46:39'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 11:46:39'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 11:46:39'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 11:46:39'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 11:46:53' prior: 50878280!
test04
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	Deposit register: 100 on: aReceptiveAccount.
	
	aPortfolio add: aReceptiveAccount.
	 
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aReceptiveAccount).! !

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 11:46:54'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 11:46:54'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 11:46:54'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 11:46:54'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 11:46:54'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'HG 11/6/2020 11:49:27' prior: 50877911!
balance
	transactions do: [ :aTransaction | aTransaction addToBalance: self ].
	^balanceCount. ! !
!AccountTransaction methodsFor: 'operations' stamp: 'HG 11/6/2020 11:50:40'!
addToBalance: aReceptiveAccount
	self subclassResponsibility. ! !

!methodRemoval: Deposit #balanceTransaction stamp: 'HG 11/6/2020 11:50:58'!
balanceTransaction

	^ value!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'HG 11/6/2020 11:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'HG 11/6/2020 11:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'HG 11/6/2020 11:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'HG 11/6/2020 11:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'HG 11/6/2020 11:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'HG 11/6/2020 11:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'HG 11/6/2020 11:52:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'HG 11/6/2020 11:52:30'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 11:52:55'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 11:53:40' prior: 50878008!
test01
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio hasRegistered: aReceptiveAccount).! !

!methodRemoval: PortfolioTest #test02 stamp: 'HG 11/6/2020 11:53:57'!
test02
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio hasRegistered: aReceptiveAccount).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 11:54:00'!
test02
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	
	aPortfolio add: aReceptiveAccount.
	 
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aReceptiveAccount).! !

!methodRemoval: PortfolioTest #test03 stamp: 'HG 11/6/2020 11:54:03'!
test03
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	
	aPortfolio add: aReceptiveAccount.
	 
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aReceptiveAccount).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 11:54:05'!
test03
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	Deposit register: 100 on: aReceptiveAccount.
	
	aPortfolio add: aReceptiveAccount.
	 
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aReceptiveAccount).! !

!methodRemoval: PortfolioTest #test04 stamp: 'HG 11/6/2020 11:54:08'!
test04
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	Deposit register: 100 on: aReceptiveAccount.
	
	aPortfolio add: aReceptiveAccount.
	 
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aReceptiveAccount).!

!methodRemoval: PortfolioTest #test02 stamp: 'HG 11/6/2020 11:58:53'!
test02
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	
	aPortfolio add: aReceptiveAccount.
	 
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aReceptiveAccount).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 11:58:56'!
test02
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	Deposit register: 100 on: aReceptiveAccount.
	
	aPortfolio add: aReceptiveAccount.
	 
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aReceptiveAccount).! !

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 11:58:57'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 11:58:57'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 11:58:57'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 11:58:57'!
PASSED!

!methodRemoval: PortfolioTest #test03 stamp: 'HG 11/6/2020 11:59:01'!
test03
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	Deposit register: 100 on: aReceptiveAccount.
	
	aPortfolio add: aReceptiveAccount.
	 
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aReceptiveAccount).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:01:03'!
test03
	
	| aPortfolio anAccountWithPositiveBalance anAccountWithNegativeBalance |
	aPortfolio _ Portfolio new.
	
	anAccountWithPositiveBalance _ ReceptiveAccount new.
	Deposit register: 500 on: anAccountWithPositiveBalance.
	aPortfolio add: anAccountWithPositiveBalance.
	anAccountWithPositiveBalance _ ReceptiveAccount new.
	Deposit register: 100 on: anAccountWithPositiveBalance.
	aPortfolio add: anAccountWithPositiveBalance.
	
	anAccountWithNegativeBalance _ ReceptiveAccount new.
	Withdraw register: 100 on: anAccountWithNegativeBalance.
	aPortfolio add: anAccountWithNegativeBalance.

	
	 
	self assert: aPortfolio balance equals: 500.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: anAccountWithPositiveBalance).	
	self assert: (aPortfolio hasRegistered: anAccountWithNegativeBalance).! !

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:01:11'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 12:01:11'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 12:01:11'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:01:11'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:02:33' prior: 50878504!
test03
	
	| aPortfolio anAccountWithPositiveBalance anAccountWithNegativeBalance |
	aPortfolio _ Portfolio new.
	
	anAccountWithPositiveBalance _ ReceptiveAccount new.
	Deposit register: 500 on: anAccountWithPositiveBalance.
	aPortfolio add: anAccountWithPositiveBalance.
	anAccountWithPositiveBalance _ ReceptiveAccount new.
	Deposit register: 100 on: anAccountWithPositiveBalance.
	aPortfolio add: anAccountWithPositiveBalance.
	
	anAccountWithNegativeBalance _ ReceptiveAccount new.
	Withdraw register: 100 on: anAccountWithNegativeBalance.
	aPortfolio add: anAccountWithNegativeBalance.
	 
	self assert: aPortfolio balance equals: 500.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: anAccountWithPositiveBalance).	
	self assert: (aPortfolio hasRegistered: anAccountWithNegativeBalance).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:03:23'!
test04
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio hasRegistered: aReceptiveAccount).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:03:50' prior: 50878572!
test04
	
	| aPortfolio aPortfolioToAdd |
	aPortfolio _ Portfolio new.
	aPortfolioToAdd _ Portfolio new.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio hasRegistered: aPortfolioToAdd).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:04:21' prior: 50878584!
test04
	
	| aPortfolio aPortfolioToAdd |
	aPortfolio _ Portfolio new.
	aPortfolioToAdd _ Portfolio new.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aPortfolioToAdd).! !

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:04:23'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:05:10' prior: 50878596!
test04
	
	| aPortfolio aPortfolioToAdd |
	aPortfolio _ Portfolio new.
	aPortfolioToAdd _ Portfolio new.
	
	aPortfolio add: aPortfolioToAdd.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aPortfolioToAdd).! !

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:05:13'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 12:05:13'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 12:05:13'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:05:13'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:05:13'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:06:43' prior: 50878610!
test04
	
	| aPortfolio aPortfolioToAdd aReceptiveAccount |
	aPortfolio _ Portfolio new.
	
	aPortfolioToAdd _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	Deposit register: 100 on: aReceptiveAccount.
	aPortfolioToAdd add: aReceptiveAccount.
	
	aPortfolio add: aPortfolioToAdd.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aPortfolioToAdd).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:06:55' prior: 50878634!
test04
	
	| aPortfolio aPortfolioToAdd aReceptiveAccount |
	aPortfolio _ Portfolio new.
	
	aPortfolioToAdd _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	Deposit register: 100 on: aReceptiveAccount.
	aPortfolioToAdd add: aReceptiveAccount.
	
	aPortfolio add: aPortfolioToAdd.
	
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aPortfolioToAdd).! !

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:06:56'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:07:07' prior: 50878651!
test04
	
	| aPortfolio aPortfolioToAdd aReceptiveAccount |
	aPortfolio _ Portfolio new.
	
	aPortfolioToAdd _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	Deposit register: 100 on: aReceptiveAccount.
	aPortfolioToAdd add: aReceptiveAccount.
	
	aPortfolio add: aPortfolioToAdd.
	
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aPortfolioToAdd).! !

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:07:08'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 12:07:08'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 12:07:08'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:07:08'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:07:08'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:07:41' prior: 50878671!
test04
	
	| aPortfolio aPortfolioToAdd aReceptiveAccount |
	aPortfolio _ Portfolio new.
	
	aPortfolioToAdd _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	Deposit register: 100 on: aReceptiveAccount.
	aPortfolioToAdd add: aReceptiveAccount.
	
	aPortfolio add: aPortfolioToAdd.
	
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aReceptiveAccount).! !

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:07:47'!
FAILURE!
!ReceptiveAccount methodsFor: 'testing' stamp: 'HG 11/6/2020 12:14:25' prior: 50877539!
hasRegistered: aTransaction
	^ transactions includes: aTransaction 
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:15:47' prior: 50878381!
test01
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio includes: aReceptiveAccount).! !
!Portfolio methodsFor: 'testing' stamp: 'HG 11/6/2020 12:18:15' prior: 50878120!
hasRegistered: aReceptiveAccount 
	^accounts includes: aReceptiveAccount.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:19:24' prior: 50878726!
test01
	
	| aPortfolio aReceptiveAccount aTransaction |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	aTransaction _ Deposit for: 100 .
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:20:29' prior: 50878743!
test01
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: aPortfolio hasRegistered: aTransaction. 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:20:36' prior: 50878755!
test01
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio hasRegistered: aTransaction). 
	! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 12:20:37'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 12:20:37'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 12:20:37'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:20:37'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:20:37'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:20:37'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'HG 11/6/2020 12:20:49' prior: 50878737!
hasRegistered: aReceptiveAccount 
	^false.! !
!Portfolio methodsFor: 'testing' stamp: 'HG 11/6/2020 12:20:54' prior: 50878795!
hasRegistered: aTransaction 
	^false.! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 12:20:59'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 12:20:59'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 12:20:59'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:20:59'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:20:59'!
FAILURE!

!methodRemoval: PortfolioTest #test02 stamp: 'HG 11/6/2020 12:21:09'!
test02
	
	| aPortfolio aReceptiveAccount |
	aPortfolio _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	Deposit register: 100 on: aReceptiveAccount.
	
	aPortfolio add: aReceptiveAccount.
	 
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aReceptiveAccount).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:21:12'!
test02
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio hasRegistered: aTransaction). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:21:40' prior: 50878828!
test02
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	! !

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 12:21:41'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'HG 11/6/2020 12:23:42' prior: 50878799!
hasRegistered: aTransaction 
	(self transactions isEmpty) 
		ifTrue: [^false.].
	^true.! !

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 12:23:46'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 12:23:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 12:23:46'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:23:46'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:23:46'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:24:35' prior: 50878543!
test03
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:25:38' prior: 50878875!
test03
	
	| aPortfolio anAccount aTransaction a100Deposit a100Withdraw a300Deposit |
	aPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 300.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:26:18' prior: 50878889!
test03
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit |
	aPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 300.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	   
	! !

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:26:19'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 12:26:19'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 12:26:19'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:26:19'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:26:19'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:27:16' prior: 50878912!
test03
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit aNonAgregateAccount aNonAgregateTransaction |
	aPortfolio _ Portfolio new.
	
	aNonAgregateAccount _ ReceptiveAccount new.
	aNonAgregateTransaction _ Deposit register: 100 on: aNonAgregateAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 300.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	   
	! !

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:27:20'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 12:27:20'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 12:27:20'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:27:20'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:27:20'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:27:35' prior: 50878950!
test03
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit aNonAgregateAccount aNonAgregateTransaction |
	aPortfolio _ Portfolio new.
	
	aNonAgregateAccount _ ReceptiveAccount new.
	aNonAgregateTransaction _ Deposit register: 100 on: aNonAgregateAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 300.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	self deny: (aPortfolio hasRegistered: aNonAgregateTransaction).
	   
	! !

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:27:35'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'HG 11/6/2020 12:29:52' prior: 50878857!
hasRegistered: aTransaction 
	^self transactions includes: aTransaction.
	! !
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/6/2020 12:31:59' prior: 50878206!
transactions
	"transactionList _ OrderedCollection new."
	
	^accounts collect: [:anAccount | anAccount transactions ].
	"
	^transactionList. 
	"! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:32:02' prior: 50878993!
test03
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit 
	aNonAgregateAccount aNonAgregateTransaction |
	
	aPortfolio _ Portfolio new.
	
	aNonAgregateAccount _ ReceptiveAccount new.
	aNonAgregateTransaction _ Deposit register: 100 on: aNonAgregateAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 300.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	self deny: (aPortfolio hasRegistered: aNonAgregateTransaction).
	   
	! !

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:32:02'!
FAILURE!

accounts collect: [:anAccount | anAccount transactions ]!
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/6/2020 12:35:38' prior: 50879034!
transactions
	"transactionList _ OrderedCollection new."  
	^accounts collect: [:anAccount | anAccount transactions ].
	"
	^transactionList. 
	"! !
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/6/2020 12:41:34' prior: 50879079!
transactions
	| transactionList |
	transactionList _ accounts collect: [:anAccount | anAccount transactions first  ].
	
	
	^transactionList. ! !

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:41:37'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 12:41:37'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 12:41:37'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:41:37'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:41:37'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:41:37'!
FAILURE!

self transactions!

aPortfolio transactions!

!methodRemoval: PortfolioTest #test04 stamp: 'HG 11/6/2020 12:43:56'!
test04
	
	| aPortfolio aPortfolioToAdd aReceptiveAccount |
	aPortfolio _ Portfolio new.
	
	aPortfolioToAdd _ Portfolio new.
	aReceptiveAccount _ ReceptiveAccount new.
	Deposit register: 100 on: aReceptiveAccount.
	aPortfolioToAdd add: aReceptiveAccount.
	
	aPortfolio add: aPortfolioToAdd.
	
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aReceptiveAccount).!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:43:58'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 12:43:58'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 12:43:58'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:43:58'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/6/2020 12:45:07' prior: 50879087!
transactions
	| transactionList |
	transactionList _ OrderedCollection new.
	accounts do: [:anAccount | transactionList addAll: anAccount transactions ]
	
	^transactionList. ! !
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/6/2020 12:45:12' prior: 50879135!
transactions
	| transactionList |
	transactionList _ OrderedCollection new.
	accounts do: [:anAccount | transactionList addAll: anAccount transactions ].	
	^transactionList. ! !

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:45:15'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 12:45:15'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 12:45:15'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:45:15'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:46:20' prior: 50879042!
test03
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit 
	aNonAgregateAccount aNonAgregateTransaction another100Withdraw another300Deposit |
	
	aPortfolio _ Portfolio new.
	
	aNonAgregateAccount _ ReceptiveAccount new.
	aNonAgregateTransaction _ Deposit register: 100 on: aNonAgregateAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	another300Deposit _ Deposit register: 300 on: anAccount.
	another100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 300.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	self assert: (aPortfolio hasRegistered: another100Withdraw). 
	self assert: (aPortfolio hasRegistered: another300Deposit). 
	self deny: (aPortfolio hasRegistered: aNonAgregateTransaction).
	   
	! !

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:46:22'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:46:35' prior: 50879162!
test03
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit 
	aNonAgregateAccount aNonAgregateTransaction another100Withdraw another300Deposit |
	
	aPortfolio _ Portfolio new.
	
	aNonAgregateAccount _ ReceptiveAccount new.
	aNonAgregateTransaction _ Deposit register: 100 on: aNonAgregateAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	another300Deposit _ Deposit register: 300 on: anAccount.
	another100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 500.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	self assert: (aPortfolio hasRegistered: another100Withdraw). 
	self assert: (aPortfolio hasRegistered: another300Deposit). 
	self deny: (aPortfolio hasRegistered: aNonAgregateTransaction).
	   
	! !

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:46:36'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 12:46:36'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 12:46:36'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:46:36'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:46:52' prior: 50879207!
test03
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit 
	aNonAgregateAccount aNonAgregateTransaction another100Withdraw another300Deposit |
	
	aPortfolio _ Portfolio new.
	
	aNonAgregateAccount _ ReceptiveAccount new.
	aNonAgregateTransaction _ Deposit register: 100 on: aNonAgregateAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	another300Deposit _ Deposit register: 300 on: anAccount.
	another100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 500.
	self deny: aPortfolio transactions size = 5.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	self assert: (aPortfolio hasRegistered: another100Withdraw). 
	self assert: (aPortfolio hasRegistered: another300Deposit). 
	self deny: (aPortfolio hasRegistered: aNonAgregateTransaction).
	   
	! !

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:46:54'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:47:42' prior: 50879259!
test03
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit 
	aNonAgregateAccount aNonAgregateTransaction another100Withdraw another300Deposit |
	
	aPortfolio _ Portfolio new.
	
	aNonAgregateAccount _ ReceptiveAccount new.
	aNonAgregateTransaction _ Deposit register: 100 on: aNonAgregateAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	another300Deposit _ Deposit register: 300 on: anAccount.
	another100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 500.
	self assert: aPortfolio transactions size = 5.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	self assert: (aPortfolio hasRegistered: another100Withdraw). 
	self assert: (aPortfolio hasRegistered: another300Deposit). 
	self deny: (aPortfolio hasRegistered: aNonAgregateTransaction).
	   
	! !

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:47:42'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 12:47:42'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 12:47:42'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:47:42'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:52:09'!
test04
	
	| aPortfolio anAccount aTransaction aPortfolioToAdd |
	aPortfolio _ Portfolio new.
	
	aPortfolioToAdd _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	aPortfolioToAdd add: anAccount.
	
	aPortfolio add: aPortfolioToAdd.
		
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio hasRegistered: aTransaction). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:52:24' prior: 50879355!
test04
	
	| aPortfolio anAccount aTransaction aPortfolioToAdd |
	aPortfolio _ Portfolio new.
	
	aPortfolioToAdd _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	aPortfolioToAdd add: anAccount.
	
	aPortfolio add: aPortfolioToAdd.
		
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self deny: (aPortfolio hasRegistered: aTransaction). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 12:52:30' prior: 50879372!
test04
	
	| aPortfolio anAccount aTransaction aPortfolioToAdd |
	aPortfolio _ Portfolio new.
	
	aPortfolioToAdd _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	aPortfolioToAdd add: anAccount.
	
	aPortfolio add: aPortfolioToAdd.
		
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	! !

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:52:32'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 12:52:32'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 12:52:33'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 12:52:33'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 12:52:33'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 18:47:41'!
test05
	
	| aPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: 'You cant add an already added account.'.
		
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 18:47:46' prior: 50879417!
test05
	
	| aPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: 'You cant add an already added account.'.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	! !

!testRun: #PortfolioTest #test05 stamp: 'HG 11/6/2020 18:48:06'!
FAILURE!
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/6/2020 18:49:49' prior: 50878105!
add: aReceptiveAccount 
	(accounts includes: aReceptiveAccount)
		ifFalse: [accounts add: aReceptiveAccount.]. 
	! !
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/6/2020 18:53:05' prior: 50879457!
add: aReceptiveAccount 
	(accounts includes: aReceptiveAccount)
		ifTrue: [self signalAlreadyAddedAccount. ]. 
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test05 stamp: 'HG 11/6/2020 18:53:16'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 18:55:24' prior: 50879436!
test05
	
	| aPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAccount.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	! !

!testRun: #PortfolioTest #test05 stamp: 'HG 11/6/2020 18:55:30'!
ERROR!
!Portfolio class methodsFor: 'error description' stamp: 'HG 11/6/2020 18:55:47'!
alreadyAddedAccount
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'error description' stamp: 'HG 11/6/2020 18:56:23'!
alreadyAddedAccountErrorDescription
	^'You cant add an already added account.'.! !

!methodRemoval: Portfolio class #alreadyAddedAccount stamp: 'HG 11/6/2020 18:56:26'!
alreadyAddedAccount
	self shouldBeImplemented.!
!Portfolio methodsFor: 'exceptions' stamp: 'HG 11/6/2020 18:57:22'!
signalCantAddAlreadyAddedAccount
	^self error: self class alreadyAddedAccountErrorDescription. ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 18:57:31' prior: 50879474!
test05
	
	| aPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAccountErrorDescription.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	! !

!testRun: #PortfolioTest #test05 stamp: 'HG 11/6/2020 18:57:32'!
FAILURE!
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/6/2020 18:58:22' prior: 50879464!
add: aReceptiveAccount 
	(accounts includes: aReceptiveAccount)
		ifTrue: [self signalCantAddAlreadyAddedAccount. ]. 
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test05 stamp: 'HG 11/6/2020 18:58:27'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/6/2020 18:58:30'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 18:58:31'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 18:58:31'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 18:58:31'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 18:58:31'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/6/2020 18:58:31'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 19:00:56'!
test06
	
	| aPortfolio aChildPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	aChildPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aChildPortfolio add: anAccount.
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAccountErrorDescription.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	! !

!testRun: #PortfolioTest #test06 stamp: 'HG 11/6/2020 19:00:56'!
FAILURE!
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/6/2020 19:04:21' prior: 50879536!
add: aReceptiveAccount 
	(accounts allContents includes: aReceptiveAccount)
		ifTrue: [self signalCantAddAlreadyAddedAccount. ]. 
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test06 stamp: 'HG 11/6/2020 19:05:54'!
ERROR!
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/6/2020 19:06:28' prior: 50879583!
add: aReceptiveAccount 
	(self allContents includes: aReceptiveAccount)
		ifTrue: [self signalCantAddAlreadyAddedAccount. ]. 
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test06 stamp: 'HG 11/6/2020 19:06:31'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/6/2020 19:06:37'!
allContents
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/6/2020 19:07:05' prior: 50879604!
allContents
	
	| accountsList |
	accountsList _ OrderedCollection new.! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/6/2020 19:09:39' prior: 50879608!
allContents
	
	| accountsList |
	accountsList _ OrderedCollection new.
	
	accounts do: [:anAccount | 
			(anAccount isKindOf: Portfolio) 
				ifTrue: [accountsList addAll: (anAccount allContents)] 
				ifFalse: [accountsList add: anAccount]. 
		].
	^accountsList.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 19:12:17' prior: 50879560!
test06
	
	| aPortfolio aChildPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	aChildPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aChildPortfolio add: anAccount.
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAccountErrorDescription.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	! !

!testRun: #PortfolioTest #test06 stamp: 'HG 11/6/2020 19:15:24'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/6/2020 19:15:28'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 19:15:28'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 19:15:28'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 19:15:28'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 19:15:28'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/6/2020 19:15:28'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/6/2020 19:15:28'!
PASSED!

padre _ Portfolio new.
hijo _ Portfolio new.

padre add: hijo.
padre add: hijo.
!

padre !

hijo add: (ReceptiveAccount new)!

padre!

Portfolio!

accounts first!

accounts!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/6/2020 19:26:52' prior: 50879613!
allContents
	
	| accountsList |
	accountsList _ OrderedCollection new.
	
	accounts do: [:anAccount | 
			(anAccount isKindOf: Portfolio) 
				ifTrue: [accountsList addAll: (anAccount allContents)] 
				ifFalse: [accountsList add: anAccount]. 
		].
	^accountsList.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 19:29:16'!
test07
	
	| aPortfolio aChildPortfolio |
	aPortfolio _ Portfolio new.
	aChildPortfolio _ Portfolio new.
	
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: aChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions size = 0.
	! !

!testRun: #PortfolioTest #test07 stamp: 'HG 11/6/2020 19:29:18'!
ERROR!
!Portfolio class methodsFor: 'error description' stamp: 'HG 11/6/2020 19:29:34'!
alreadyAddedAssetErrorDescription
	^'You cant add an already added asset.'.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 19:30:01' prior: 50879625!
test06
	
	| aPortfolio aChildPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	aChildPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aChildPortfolio add: anAccount.
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 19:30:04' prior: 50879515!
test05
	
	| aPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	! !

!testRun: #PortfolioTest #test07 stamp: 'HG 11/6/2020 19:30:10'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/6/2020 19:30:33' prior: 50879670!
allContents
	
	| accountsList |
	accountsList _ OrderedCollection new.
	
	accounts do: [:anAccount | 
			(anAccount isKindOf: Portfolio) 
				ifTrue: [accountsList add: anAccount. accountsList addAll: (anAccount allContents)] 
				ifFalse: [accountsList add: anAccount]. 
		].
	^accountsList.! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/6/2020 19:30:50' prior: 50879745!
allContents
	
	| accountsList |
	accountsList _ OrderedCollection new.
	
	accounts do: [:anAccount | 
			accountsList add: anAccount. 
			(anAccount isKindOf: Portfolio) 
				ifTrue: [accountsList addAll: (anAccount allContents)] 
		].
	^accountsList.! !

!testRun: #PortfolioTest #test07 stamp: 'HG 11/6/2020 19:30:55'!
FAILURE!
!Portfolio methodsFor: 'exceptions' stamp: 'HG 11/6/2020 19:31:18'!
signalCantAddAlreadyAddedAsset
	^self error: self class alreadyAddedAccountErrorDescription. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 19:31:18' prior: 50879594!
add: aReceptiveAccount 
	(self allContents includes: aReceptiveAccount)
		ifTrue: [self signalCantAddAlreadyAddedAsset. ]. 
	accounts add: aReceptiveAccount.! !

!methodRemoval: Portfolio #signalCantAddAlreadyAddedAccount stamp: 'HG 11/6/2020 19:31:18'!
signalCantAddAlreadyAddedAccount
	^self error: self class alreadyAddedAccountErrorDescription. !
!Portfolio methodsFor: 'exceptions' stamp: 'HG 11/6/2020 19:31:25' prior: 50879770!
signalCantAddAlreadyAddedAsset
	^self error: self class alreadyAddedAssetErrorDescription. ! !

!testRun: #PortfolioTest #test07 stamp: 'HG 11/6/2020 19:31:28'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 19:31:28'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 19:31:28'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 19:31:28'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 19:31:28'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/6/2020 19:31:28'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/6/2020 19:31:28'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/6/2020 19:31:28'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/6/2020 19:32:08' prior: 50879757!
allContents
	
	| accountsList |
	accountsList _ OrderedCollection new.
	
	accounts do: [:anAsset | 
			accountsList add: anAsset. 
			(anAsset isKindOf: Portfolio) 
				ifTrue: [accountsList addAll: (anAsset allContents)] 
		].
	^accountsList.! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/6/2020 19:39:06' prior: 50879815!
allContents
	
	| accountsList |
	accountsList _ OrderedCollection new.
	
	accounts do: [:anAsset |
			accountsList add: anAsset. 
			accountsList addAll: (anAsset allContents)
				
				
		].
	^accountsList.! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/6/2020 19:42:01' prior: 50879826!
allContents
	
	| accountsList |
	accountsList _ OrderedCollection new.
	accountsList add: self.
	accounts do: [:anAsset | accountsList addAll: (anAsset allContents)
				
				
		].
	^accountsList.! !
!ReceptiveAccount methodsFor: 'accesing' stamp: 'HG 11/6/2020 19:42:48'!
allContents
	^{self}.! !

	^{self}.!

^{self} asOrderedCollection.!
!ReceptiveAccount methodsFor: 'accesing' stamp: 'HG 11/6/2020 19:43:14' prior: 50879845!
allContents
	^{self} asOrderedCollection.! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/6/2020 19:43:31' prior: 50879836!
allContents
	
	| accountsList |
	accountsList _ OrderedCollection new.
	accountsList add: self.
	accounts do: [:anAsset | accountsList addAll: (anAsset allContents)].
	^accountsList.! !

!testRun: #PortfolioTest #test07 stamp: 'HG 11/6/2020 19:43:35'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 19:43:35'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 19:43:35'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 19:43:35'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 19:43:35'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/6/2020 19:43:35'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/6/2020 19:43:35'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/6/2020 19:43:35'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 19:44:17'!
test08
	
	| aPortfolio aChildPortfolio |
	aPortfolio _ Portfolio new.
	aChildPortfolio _ Portfolio new.
	
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: aChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions size = 0.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 19:51:43' prior: 50879881!
test08
	
	| aParentPortfolio aPortfolio aChildPortfolio |
	
	aParentPortfolio _ Portfolio new.
	aChildPortfolio _ Portfolio new.
	aPortfolio _ Portfolio new.
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: aChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions size = 0.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 19:52:10' prior: 50879896!
test08
	
	| aParentPortfolio aPortfolio aChildPortfolio a100Deposit anAccount |
	
	aParentPortfolio _ Portfolio new.
	aChildPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	
	aPortfolio _ Portfolio new.
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: aChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions size = 0.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 19:53:08' prior: 50879913!
test08
	
	| aParentPortfolio aPortfolio aChildPortfolio a100Deposit anAccount |
	
	aParentPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aParentPortfolio add: anAccount.
	
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	aPortfolio _ Portfolio new.
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: aChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions size = 0.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 19:54:44' prior: 50879934!
test08
	
	| aParentPortfolio aPortfolioToAdd aChildPortfolio a100Deposit anAccount |
	
	aParentPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aParentPortfolio add: anAccount.
	
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	aPortfolioToAdd _ Portfolio new.
	aPortfolioToAdd add: anAccount.
	
	
	self should: [ aChildPortfolio add: aPortfolioToAdd.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 100.
	self assert: aParentPortfolio transactions size = 1.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	! !

!testRun: #PortfolioTest #test08 stamp: 'HG 11/6/2020 19:54:49'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/6/2020 19:54:57' prior: 50879957!
test08
	
	| aParentPortfolio aPortfolioToAdd aChildPortfolio a100Deposit anAccount |
	aParentPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aParentPortfolio add: anAccount.
	
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	aPortfolioToAdd _ Portfolio new.
	aPortfolioToAdd add: anAccount.
	
	
	self should: [ aChildPortfolio add: aPortfolioToAdd.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 100.
	self assert: aParentPortfolio transactions size = 1.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	! !
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/6/2020 20:04:41' prior: 50879776!
add: anAssetToAdd 
	(self roots anySatisfy: 
		[:aRootAsset | aRootAsset allContents includes: anAssetToAdd.]) 
		ifTrue: [self signalCantAddAlreadyAddedAsset. ]. 
	accounts add: anAssetToAdd.! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 20:04:51'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 20:04:51'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 20:04:51'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 20:04:51'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/6/2020 20:04:51'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/6/2020 20:04:51'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/6/2020 20:04:51'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/6/2020 20:04:51'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 20:04:55'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/6/2020 20:05:02'!
roots
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/6/2020 20:15:30'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfoliosWhoAddMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/6/2020 20:15:24' prior: 50880039!
roots

	| rootsList |
	rootsList _ OrderedCollection new.
	portfoliosWhoAddMe isEmpty ifTrue: [rootsList add: self].
	
	portfoliosWhoAddMe do: [:aParentPortfolio | rootsList addAll: aParentPortfolio roots. ].! !
!Portfolio methodsFor: 'initialization' stamp: 'HG 11/6/2020 20:15:53' prior: 50878113 overrides: 16896425!
initialize
	accounts _ OrderedCollection new.
	portfoliosWhoAddMe _ OrderedCollection new.! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/6/2020 20:16:03' prior: 50880051!
roots

	| rootsList |
	rootsList _ OrderedCollection new.
	portfoliosWhoAddMe isEmpty ifTrue: [rootsList add: self].
	
	portfoliosWhoAddMe do: [:aParentPortfolio | rootsList addAll: aParentPortfolio roots. ].
	^portfoliosWhoAddMe. ! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/6/2020 20:16:11' prior: 50880067!
roots

	| rootsList |
	rootsList _ OrderedCollection new.
	portfoliosWhoAddMe isEmpty ifTrue: [rootsList add: self].
	portfoliosWhoAddMe do: [:aParentPortfolio | rootsList addAll: aParentPortfolio roots. ].
	^rootsList. ! !
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/6/2020 20:20:46' prior: 50880010!
add: anAssetToAdd 
	(self roots anySatisfy: 
		[:aRootAsset | aRootAsset allContents includes: anAssetToAdd.]) 
		ifTrue: [self signalCantAddAlreadyAddedAsset. ]. 
	accounts add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !
!ReceptiveAccount methodsFor: '-- private' stamp: 'HG 11/6/2020 20:21:43'!
addParentPortfolio: aPortfolioWhoAddTheAsset

	^nil.! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/6/2020 20:23:02'!
addParentPortfolio: aPortfolioWhoAddTheAsset
	portfoliosWhoAddMe add: aPortfolioWhoAddTheAsset.! !

!testRun: #PortfolioTest #test08 stamp: 'HG 11/6/2020 20:25:59'!
FAILURE!
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/6/2020 20:33:37' prior: 50880087!
add: anAssetToAdd 
	(self roots anySatisfy: 
		[:aRootAsset | (aRootAsset allContents intersection: (anAssetToAdd allContents)) isEmpty not.]) 
		ifTrue: [self signalCantAddAlreadyAddedAsset. ]. 
	accounts add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !

!testRun: #PortfolioTest #test08 stamp: 'HG 11/6/2020 20:33:39'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/6/2020 20:33:41'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/6/2020 20:33:41'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/6/2020 20:33:41'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/6/2020 20:33:41'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/6/2020 20:33:41'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/6/2020 20:33:41'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/6/2020 20:33:41'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/6/2020 20:33:41'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/6/2020 20:33:41'!
PASSED!

----SNAPSHOT----(6 November 2020 20:42:54) CuisUniversity-4137.image priorSource: 17478987!

Object subclass: #FinancialAssets
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialAssets category: #'Portfolio-Ejercicio' stamp: 'HG 11/7/2020 19:11:12'!
Object subclass: #FinancialAssets
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!FinancialAssets methodsFor: 'nil' stamp: 'HG 11/7/2020 19:14:12'!
balance
	self shouldBeImplemented. ! !
!FinancialAssets methodsFor: 'as yet unclassified' stamp: 'HG 11/7/2020 19:14:20' prior: 50880159!
balance
	self subclassResponsibility. ! !

FinancialAssets subclass: #Portfolio
	instanceVariableNames: 'accounts portfoliosWhoAddMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/7/2020 19:15:12'!
FinancialAssets subclass: #Portfolio
	instanceVariableNames: 'accounts portfoliosWhoAddMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialAssets subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions balanceCount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: #'Portfolio-Ejercicio' stamp: 'HG 11/7/2020 19:15:19'!
FinancialAssets subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions balanceCount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:16:46'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 19:16:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 19:16:46'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 19:16:46'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 19:16:46'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:16:46'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 19:16:46'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 19:16:46'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:16:46'!
PASSED!

Object subclass: #FinancialAsset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialAsset category: #'Portfolio-Ejercicio' stamp: 'HG 11/7/2020 19:17:08'!
Object subclass: #FinancialAsset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #FinancialAsset stamp: 'HG 11/7/2020 19:17:14'!
Object subclass: #FinancialAsset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRenamed: #FinancialAssets as: #FinancialAsset stamp: 'HG 11/7/2020 19:17:19'!
Smalltalk renameClassNamed: #FinancialAssets as: #FinancialAsset!
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/7/2020 19:20:10' prior: 50880110!
add: anAssetToAdd 
	(self roots anySatisfy: 
		[:aRootAsset | (aRootAsset allContents intersection: (anAssetToAdd allContents)) isEmpty not.]) 
		ifTrue: [self signalCantAddAlreadyAddedAsset. ]. 
		
	accounts add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !
!Portfolio methodsFor: 'balance' stamp: 'HG 11/7/2020 19:20:31' prior: 50878232 overrides: 50880164!
balance
	accounts isEmpty ifTrue: [^0].
	^accounts sum: [:aFinancialAsset | aFinancialAsset balance].! !

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/7/2020 19:21:14'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets portfoliosWhoAddMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/7/2020 19:21:14' prior: 50879854!
allContents
	
	| accountsList |
	accountsList _ OrderedCollection new.
	accountsList add: self.
	assets do: [:anAsset | accountsList addAll: (anAsset allContents)].
	^accountsList.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/7/2020 19:21:14' prior: 50879144!
transactions
	| transactionList |
	transactionList _ OrderedCollection new.
	assets do: [:anAccount | transactionList addAll: anAccount transactions ].	
	^transactionList. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/7/2020 19:21:14' prior: 50880061 overrides: 16896425!
initialize
	assets _ OrderedCollection new.
	portfoliosWhoAddMe _ OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/7/2020 19:21:14' prior: 50880252 overrides: 50880164!
balance
	assets isEmpty ifTrue: [^0].
	^assets sum: [:aFinancialAsset | aFinancialAsset balance].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/7/2020 19:21:14' prior: 50880240!
add: anAssetToAdd 
	(self roots anySatisfy: 
		[:aRootAsset | (aRootAsset allContents intersection: (anAssetToAdd allContents)) isEmpty not.]) 
		ifTrue: [self signalCantAddAlreadyAddedAsset. ]. 
		
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !
!Portfolio methodsFor: 'balance' stamp: 'HG 11/7/2020 19:21:59' prior: 50880293 overrides: 50880164!
balance
	
	"
	assets isEmpty ifTrue: [^0].
	"
	
	^assets sum: [:aFinancialAsset | aFinancialAsset balance].! !

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:22:04'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'HG 11/7/2020 19:22:33' prior: 50880312 overrides: 50880164!
balance
	
	assets isEmpty ifTrue: [^0].
	^assets sum: [:aFinancialAsset | aFinancialAsset balance].! !
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/7/2020 19:23:15' prior: 50880276!
transactions
	"
	| transactionList |
	transactionList _ OrderedCollection new.
	"
	^assets collect: [:anAccount |  anAccount transactions ].	
	"
	^transactionList. 
	"! !

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 19:23:21'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/7/2020 19:24:14' prior: 50880327!
transactions
	
	| transactionList |
	transactionList _ OrderedCollection new.
	assets do: [:anAccount |  anAccount transactions ].	
	^transactionList. 
	! !
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/7/2020 19:24:37' prior: 50880338!
transactions
	
	| transactionList |
	transactionList _ OrderedCollection new.
	assets do: [:anAsset |  transactionList  addAll: anAsset transactions ].	
	^transactionList. 
	! !
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/7/2020 19:24:53' prior: 50880300!
add: anAssetToAdd 

	(self roots anySatisfy: 
		[:aRootAsset | (aRootAsset allContents intersection: (anAssetToAdd allContents)) isEmpty not.]) 
		ifTrue: [self signalCantAddAlreadyAddedAsset. ]. 
		
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/7/2020 19:28:20' prior: 50880346!
transactions
	
	| transactionList |
	transactionList _ OrderedCollection new.
	assets do: [:anAsset |  transactionList addAll: anAsset transactions ].	
	^transactionList. 
	
	
	! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/7/2020 19:30:02'!
xxx
	
	| accountsList |
	accountsList _ OrderedCollection new.
	accountsList add: self.
	assets do: [:anAsset | accountsList addAll: (anAsset allContents)].
	^accountsList.! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/7/2020 19:30:16'!
xxx: anActionBlock
	
	| accountsList |
	accountsList _ OrderedCollection new.
	accountsList add: self.
	assets do: [:anAsset | accountsList addAll: (anAsset allContents)].
	^accountsList.! !

!methodRemoval: Portfolio #xxx stamp: 'HG 11/7/2020 19:30:19'!
xxx
	
	| accountsList |
	accountsList _ OrderedCollection new.
	accountsList add: self.
	assets do: [:anAsset | accountsList addAll: (anAsset allContents)].
	^accountsList.!
!Portfolio methodsFor: '-- private' stamp: 'HG 11/7/2020 19:31:25' prior: 50880383!
xxx: anAssetPropertyBlock
	
	| accountsList |
	accountsList _ OrderedCollection new.
	assets do: [:anAsset | accountsList addAll: (anAssetPropertyBlock value: anAsset)].
	^accountsList.! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/7/2020 19:32:02' prior: 50880400!
xxx: anAssetPropertyBlock
	
	| anAssetPropertyList |
	anAssetPropertyList _ OrderedCollection new.
	assets do: [:anAsset | anAssetPropertyList addAll: (anAssetPropertyBlock value: anAsset)].
	^anAssetPropertyList.! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/7/2020 19:32:23'!
collectAssetPropertyWith: anAssetPropertyBlock
	
	| anAssetPropertyList |
	anAssetPropertyList _ OrderedCollection new.
	assets do: [:anAsset | anAssetPropertyList addAll: (anAssetPropertyBlock value: anAsset)].
	^anAssetPropertyList.! !

!methodRemoval: Portfolio #xxx: stamp: 'HG 11/7/2020 19:32:25'!
xxx: anAssetPropertyBlock
	
	| anAssetPropertyList |
	anAssetPropertyList _ OrderedCollection new.
	assets do: [:anAsset | anAssetPropertyList addAll: (anAssetPropertyBlock value: anAsset)].
	^anAssetPropertyList.!
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/7/2020 19:33:27' prior: 50880367!
transactions
	
	| transactionList |
	transactionList _ OrderedCollection new.
	assets do: [:anAsset |  transactionList addAll: anAsset transactions ].	
	^transactionList. 
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/7/2020 19:34:56' prior: 50880437!
transactions

	
	| transactionList |
	transactionList _ assets collect: [:anAsset |  anAsset transactions ].	
	^transactionList flatten . 
	
	
	! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 19:34:59'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 19:34:59'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 19:34:59'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 19:34:59'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:34:59'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 19:34:59'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 19:34:59'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:34:59'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/7/2020 19:35:21' prior: 50880446!
transactions
	^assets collect: [:anAsset | anAsset transactions ] flatten.	
	
	
	! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 19:35:21'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 19:35:21'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 19:35:21'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 19:35:21'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:35:21'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 19:35:21'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 19:35:21'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:35:22'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/7/2020 19:35:31' prior: 50880472!
transactions
	^(assets collect: [:anAsset | anAsset transactions ]) flatten.	
	
	
	! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 19:35:32'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 19:35:32'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 19:35:32'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 19:35:32'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:35:32'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 19:35:32'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 19:35:32'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:35:32'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:36:39' prior: 50880267!
allContents
	
	^((assets collect: [:anAsset | (anAsset allContents)]) flatten) add: self.! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 19:36:40'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 19:36:40'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 19:36:40'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 19:36:40'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:36:40'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 19:36:40'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 19:36:40'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:36:40'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:37:14' prior: 50880520!
allContents
	
	| accountsList |
	accountsList _ OrderedCollection new.
	accountsList _ (assets collect: [:anAsset | (anAsset allContents)]) flatten.
	accountsList add: self.

	^accountsList.! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 19:37:15'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 19:37:15'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 19:37:15'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 19:37:15'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:37:15'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 19:37:15'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 19:37:15'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:37:15'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:37:39' prior: 50880544!
allContents
	
	^(((assets collect: [:anAsset | (anAsset allContents)]) flatten) add: self).
	! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 19:37:40'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 19:37:40'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 19:37:40'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 19:37:40'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:37:40'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 19:37:40'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 19:37:40'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:37:40'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:38:24' prior: 50880572!
allContents
	
	| accountsList |
	accountsList _ (assets collect: [:anAsset | (anAsset allContents)]) flatten.
	accountsList add: self.

	^accountsList.! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 19:38:24'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 19:38:24'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 19:38:24'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 19:38:24'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:38:24'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 19:38:24'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 19:38:24'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:38:24'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:38:30' prior: 50880596!
allContents
	
	| accountsList |
	accountsList _ (assets collect: [:anAsset | (anAsset allContents)]) flatten.
	^accountsList add: self.
! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 19:38:31'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 19:38:31'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 19:38:31'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 19:38:31'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:38:31'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 19:38:31'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 19:38:31'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:38:31'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:38:35' prior: 50880622!
allContents
	
	| accountsList |
	accountsList _ (assets collect: [:anAsset | (anAsset allContents)]) flatten.
	accountsList add: self.

	^accountsList.! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:39:34' prior: 50880648!
allContents
	
	| accountsList |
	accountsList _ (assets collect: [:anAsset | (anAsset allContents)]) flatten.
	accountsList add: self.
	^accountsList.! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:40:02' prior: 50880656!
allContents
	
	| accountsList |
	accountsList _ (assets collect: [:anAsset | anAsset allContents]) flatten.
	accountsList add: self.
	^accountsList.! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/7/2020 19:41:03' prior: 50880418!
collectAssetPropertyWith: anAssetPropertyBlock
	
	^(assets collect: [:anAsset | anAssetPropertyBlock value: anAsset ]) flatten.! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/7/2020 19:41:08' prior: 50880672!
collectAssetPropertyWith: anAssetPropertyBlock
	^(assets collect: [:anAsset | anAssetPropertyBlock value: anAsset ]) flatten.! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/7/2020 19:41:22'!
collectAssetWithProperty: anAssetPropertyBlock
	^(assets collect: [:anAsset | anAssetPropertyBlock value: anAsset ]) flatten.! !

!methodRemoval: Portfolio #collectAssetPropertyWith: stamp: 'HG 11/7/2020 19:41:24'!
collectAssetPropertyWith: anAssetPropertyBlock
	^(assets collect: [:anAsset | anAssetPropertyBlock value: anAsset ]) flatten.!
!Portfolio methodsFor: '-- private' stamp: 'HG 11/7/2020 19:42:03'!
collectAssetPropertiesWith: anAssetPropertyBlock
	^(assets collect: [:anAsset | anAssetPropertyBlock value: anAsset ]) flatten.! !

!methodRemoval: Portfolio #collectAssetWithProperty: stamp: 'HG 11/7/2020 19:42:05'!
collectAssetWithProperty: anAssetPropertyBlock
	^(assets collect: [:anAsset | anAssetPropertyBlock value: anAsset ]) flatten.!
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/7/2020 19:42:49' prior: 50880496!
transactions
	^self collectAssetPropertiesWith: [:anAsset | anAsset transactions ].	
	
	
	! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:43:25' prior: 50880664!
allContents
	
	| accountsList |
	accountsList _ self collectAssetPropertiesWith: [:anAsset | anAsset allContents ].
	accountsList add: self.
	^accountsList.! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:43:50'!
allAssets
	
	| accountsList |
	accountsList _ self collectAssetPropertiesWith: [:anAsset | anAsset allContents ].
	accountsList add: self.
	^accountsList.! !
!ReceptiveAccount methodsFor: 'accesing' stamp: 'HG 11/7/2020 19:43:50'!
allAssets
	^{self} asOrderedCollection.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/7/2020 19:43:50' prior: 50880719!
allContents
	
	| accountsList |
	accountsList _ self collectAssetPropertiesWith: [:anAsset | anAsset allAssets ].
	accountsList add: self.
	^accountsList.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/7/2020 19:43:50' prior: 50880355!
add: anAssetToAdd 

	(self roots anySatisfy: 
		[:aRootAsset | (aRootAsset allAssets intersection: (anAssetToAdd allAssets)) isEmpty not.]) 
		ifTrue: [self signalCantAddAlreadyAddedAsset. ]. 
		
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/7/2020 19:43:50' prior: 50880727!
allAssets
	
	| accountsList |
	accountsList _ self collectAssetPropertiesWith: [:anAsset | anAsset allAssets ].
	accountsList add: self.
	^accountsList.! !

!methodRemoval: Portfolio #allContents stamp: 'HG 11/7/2020 19:43:50'!
allContents
	
	| accountsList |
	accountsList _ self collectAssetPropertiesWith: [:anAsset | anAsset allAssets ].
	accountsList add: self.
	^accountsList.!

!methodRemoval: ReceptiveAccount #allContents stamp: 'HG 11/7/2020 19:43:50'!
allContents
	^{self} asOrderedCollection.!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:44:08' prior: 50880760!
allAssets
	
	| assetsList |
	assetsList _ self collectAssetPropertiesWith: [:anAsset | anAsset allAssets ].
	assetsList add: self.
	^assetsList.! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:45:11' prior: 50880779!
allAssets
	
	| containedAssets |
	containedAssets _ self collectAssetPropertiesWith: [:anAsset | anAsset allAssets ].
	containedAssets add: self.
	^containedAssets.! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:47:23' prior: 50880077!
roots

	| rootsList |
	rootsList _ OrderedCollection new.
	portfoliosWhoAddMe isEmpty ifTrue: [rootsList add: self].
	portfoliosWhoAddMe do: [:aParentPortfolio | rootsList addAll: aParentPortfolio roots. ].
	^rootsList. ! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:49:30' prior: 50880787!
allAssets
	
	| containedAssets |
	containedAssets _ self collectAssetPropertiesWith: [:anAsset | anAsset allAssets ] over: assets.
	containedAssets add: self.
	^containedAssets.! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/7/2020 19:49:57'!
collectAssetPropertiesWith: anAssetPropertyBlock over: anAssetListToCollectFrom
	^(anAssetListToCollectFrom collect: [:anAsset | anAssetPropertyBlock value: anAsset ]) flatten.! !

!methodRemoval: Portfolio #collectAssetPropertiesWith: stamp: 'HG 11/7/2020 19:50:03'!
collectAssetPropertiesWith: anAssetPropertyBlock
	^(assets collect: [:anAsset | anAssetPropertyBlock value: anAsset ]) flatten.!
!Portfolio methodsFor: 'transactions' stamp: 'HG 11/7/2020 19:50:09' prior: 50880713!
transactions
	^self collectAssetPropertiesWith: [:anAsset | anAsset transactions ] over: assets.	
	
	
	! !

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 19:50:14'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 19:50:14'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 19:50:14'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 19:50:14'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 19:50:14'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:50:14'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 19:50:14'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 19:50:14'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:50:14'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:51:19' prior: 50880795!
roots

	| rootsList |
	rootsList _ OrderedCollection new.
	portfoliosWhoAddMe isEmpty ifTrue: [rootsList add: self].
	rootsList _ self collectAssetPropertiesWith: [:anAsset | anAsset roots ] over: portfoliosWhoAddMe.
	^rootsList.
	
	"
	portfoliosWhoAddMe do: [:aParentPortfolio | rootsList addAll: aParentPortfolio roots. ].
	^rootsList. 
	"! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 19:51:20'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 19:51:20'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 19:51:20'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 19:51:20'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:51:20'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 19:51:20'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 19:51:20'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:51:20'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:51:33'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:51:42'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:54:09' prior: 50880856!
roots

	| rootsList |
	rootsList _ self collectAssetPropertiesWith: [:anAsset | anAsset roots ] over: portfoliosWhoAddMe.
	portfoliosWhoAddMe isEmpty ifTrue: [rootsList add: self].

	^rootsList.
	
	"
	portfoliosWhoAddMe do: [:aParentPortfolio | rootsList addAll: aParentPortfolio roots. ].
	^rootsList. 
	"! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 19:54:10'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 19:54:10'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 19:54:10'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 19:54:10'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:54:10'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 19:54:10'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 19:54:10'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:54:10'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:54:18' prior: 50880893!
roots

	| rootsList |
	rootsList _ self collectAssetPropertiesWith: [:anAsset | anAsset roots ] over: portfoliosWhoAddMe.
	portfoliosWhoAddMe isEmpty ifTrue: [rootsList add: self].
	^rootsList.
	! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:58:44' prior: 50880924!
roots

	| rootsList |
	portfoliosWhoAddMe isEmpty 
		ifFalse: [ ^self collectAssetPropertiesWith: [:anAsset | anAsset roots ] over: portfoliosWhoAddMe.]
		ifTrue: [^{self}].
	! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 19:58:47'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 19:58:48'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 19:58:48'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 19:58:48'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:58:48'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 19:58:48'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 19:58:48'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:58:48'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 19:58:51'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 19:58:51'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 19:58:51'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 19:58:51'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:58:51'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 19:58:51'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 19:58:51'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:58:51'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 19:59:01' prior: 50880933!
roots

	
	^portfoliosWhoAddMe isEmpty 
		ifFalse: [ self collectAssetPropertiesWith: [:anAsset | anAsset roots ] over: portfoliosWhoAddMe.]
		ifTrue: [{self}].
	! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 19:59:04'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 19:59:04'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 19:59:04'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 19:59:04'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 19:59:04'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 19:59:04'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 19:59:04'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 19:59:04'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 20:01:18'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 20:01:18'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 20:01:18'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 20:01:18'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 20:01:18'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 20:01:18'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 20:01:18'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 20:01:18'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 20:01:41' prior: 50880979!
roots

	
	portfoliosWhoAddMe isEmpty 
		ifFalse: [ ^self collectAssetPropertiesWith: [:anAsset | anAsset roots ] over: portfoliosWhoAddMe.].
	^{self}.! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/7/2020 20:01:41'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/7/2020 20:01:41'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/7/2020 20:01:42'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 20:01:42'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/7/2020 20:01:42'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 20:01:42'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 20:01:42'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/7/2020 20:01:42'!
PASSED!

Portfolio subclass: #ContainedPortfolio
	instanceVariableNames: 'assets portfoliosWhoAddMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Portfolio subclass: #ContainedPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ContainedPortfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/7/2020 20:05:26'!
Portfolio subclass: #ContainedPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Portfolio subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #RootPortfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/7/2020 20:05:36'!
Portfolio subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 20:08:22' prior: 50881024!
roots
	
	
	portfoliosWhoAddMe isEmpty 
		ifFalse: [ ^self collectAssetPropertiesWith: [:anAsset | anAsset roots ] over: portfoliosWhoAddMe.].
	^{self}.! !

!methodRemoval: Portfolio class #alreadyAddedAccountErrorDescription stamp: 'HG 11/7/2020 20:08:45'!
alreadyAddedAccountErrorDescription
	^'You cant add an already added account.'.!
!Portfolio class methodsFor: 'instance creation' stamp: 'HG 11/7/2020 20:10:13' overrides: 16783533!
new
	^RootPortfolio basicNew.! !
!Portfolio methodsFor: 'initialization' stamp: 'HG 11/7/2020 20:11:04' prior: 50880286 overrides: 16896425!
initialize
	assets _ OrderedCollection new.! !

FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/7/2020 20:11:11'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Portfolio subclass: #ContainedPortfolio
	instanceVariableNames: 'portfoliosWhoAddMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ContainedPortfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/7/2020 20:11:16'!
Portfolio subclass: #ContainedPortfolio
	instanceVariableNames: 'portfoliosWhoAddMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Portfolio subclass: #ContainedPortfolio
	instanceVariableNames: 'portfoliosThatContainsMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ContainedPortfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/7/2020 20:11:32'!
Portfolio subclass: #ContainedPortfolio
	instanceVariableNames: 'portfoliosThatContainsMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ContainedPortfolio methodsFor: 'initialization' stamp: 'HG 11/7/2020 20:12:12' overrides: 50881099!
initialize
	portfoliosThatContainsMe _ OrderedCollection new.! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/7/2020 20:15:03' prior: 50880101!
addParentPortfolio: aPortfolioWhoAddTheAsset
	self subclassResponsibility.! !
!ContainedPortfolio methodsFor: 'portfolio operations --private' stamp: 'HG 11/7/2020 20:15:34' overrides: 50881149!
addParentPortfolio: aPortfolioWhoAddTheAsset
	portfoliosThatContainsMe add: aPortfolioWhoAddTheAsset. ! !
!RootPortfolio methodsFor: 'portfolio operations --private' stamp: 'HG 11/7/2020 20:17:36' overrides: 50881149!
addParentPortfolio: aPortfolioWhoAddTheAsset
	self become: ContainedPortfolio.
	self addParentPortfolio: aPortfolioWhoAddTheAsset.! !

!testRun: #PortfolioTest #test06 stamp: 'HG 11/7/2020 20:18:22'!
ERROR!
!RootPortfolio methodsFor: 'nil' stamp: 'HG 11/7/2020 20:19:18' overrides: 50881080!
roots
	^{self}.! !
!ContainedPortfolio methodsFor: 'nil' stamp: 'HG 11/7/2020 20:19:28' overrides: 50881080!
roots
	^self collectAssetPropertiesWith: [:anAsset | anAsset roots ] over: portfoliosThatContainsMe.! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 20:19:36' prior: 50881080!
roots
	self subclassResponsibility. ! !

!testRun: #PortfolioTest #test04 stamp: 'HG 11/7/2020 20:19:39'!
ERROR!
!RootPortfolio methodsFor: 'portfolio operations --private' stamp: 'HG 11/7/2020 20:20:15' prior: 50881163 overrides: 50881149!
addParentPortfolio: aPortfolioWhoAddTheAsset
	self become: ContainedPortfolio new.
	self addParentPortfolio: aPortfolioWhoAddTheAsset.! !

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 20:20:23'!
ERROR!
!RootPortfolio methodsFor: 'portfolio operations --private' stamp: 'HG 11/7/2020 20:21:35' prior: 50881191 overrides: 50881149!
addParentPortfolio: aPortfolioWhoAddTheAsset
	
	self become: ContainedPortfolio new.
	self addParentPortfolio: aPortfolioWhoAddTheAsset.! !
!RootPortfolio methodsFor: 'portfolio operations --private' stamp: 'HG 11/7/2020 20:21:56' prior: 50881202 overrides: 50881149!
addParentPortfolio: aPortfolioWhoAddTheAsset
	| originalAssets |
	originalAssets _ assets.
	self become: ContainedPortfolio new.
	assets _ originalAssets.
	self addParentPortfolio: aPortfolioWhoAddTheAsset.! !

!testRun: #PortfolioTest #test07 stamp: 'HG 11/7/2020 20:22:03'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/7/2020 20:08:22' prior: 50881183!
roots
	
	
	portfoliosWhoAddMe isEmpty 
		ifFalse: [ ^self collectAssetPropertiesWith: [:anAsset | anAsset roots ] over: portfoliosWhoAddMe.].
	^{self}.! !

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/8/2020 18:14:08'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets portfoliosWhoAddMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/8/2020 18:14:06' prior: 50881223!
roots
	
	
	portfoliosWhoAddMe isEmpty 
		ifFalse: [ ^self collectAssetPropertiesWith: [:anAsset | anAsset roots ] over: portfoliosWhoAddMe.].
	^{self}.! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/8/2020 18:14:16' prior: 50881239!
roots
	
	portfoliosWhoAddMe isEmpty 
		ifFalse: [ ^self collectAssetPropertiesWith: [:anAsset | anAsset roots ] over: portfoliosWhoAddMe.].
	^{self}.! !

FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets portfoliosWhoAddMe containState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/8/2020 18:15:00'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets portfoliosWhoAddMe containState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets portfoliosWhoAddMe containerState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/8/2020 18:15:12'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets portfoliosWhoAddMe containerState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets portfoliosWhoAddMe containedState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/8/2020 18:15:19'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets portfoliosWhoAddMe containedState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #PortfolioContainedState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioContainedState category: #'Portfolio-Ejercicio' stamp: 'HG 11/8/2020 18:15:42'!
Object subclass: #PortfolioContainedState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioContainedState subclass: #RootState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #RootState category: #'Portfolio-Ejercicio' stamp: 'HG 11/8/2020 18:16:17'!
PortfolioContainedState subclass: #RootState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioContainedState subclass: #ContainedState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ContainedState category: #'Portfolio-Ejercicio' stamp: 'HG 11/8/2020 18:16:23'!
PortfolioContainedState subclass: #ContainedState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRenamed: #PortfolioContainedState as: #PortfolioHierarchyState stamp: 'HG 11/8/2020 18:17:00'!
Smalltalk renameClassNamed: #PortfolioContainedState as: #PortfolioHierarchyState!
!Portfolio methodsFor: 'initialization' stamp: 'HG 11/8/2020 18:19:21' prior: 50881099 overrides: 16896425!
initialize
	assets _ OrderedCollection new.
	! !

FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets portfoliosWhoAddMe hierarchyState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/8/2020 18:19:32'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets portfoliosWhoAddMe hierarchyState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'HG 11/8/2020 18:20:21' prior: 50881343 overrides: 16896425!
initialize
	assets _ OrderedCollection new.
	hierarchyState _ RootState new.! !
!Portfolio methodsFor: 'initialization' stamp: 'HG 11/8/2020 18:20:37' prior: 50881363 overrides: 16896425!
initialize
	assets _ OrderedCollection new.
	hierarchyState _ RootState new.
	portfoliosWhoAddMe _ OrderedCollection new.! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/8/2020 18:24:37' prior: 50881149!
addParentPortfolio: aPortfolioWhoAddTheAsset
	hierarchyState _ ContainedState new.
	! !

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/8/2020 18:26:00'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets portfoliosWhoAddMe hierarchyState portfoliosThatContainsMee'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: '-- private' stamp: 'HG 11/8/2020 18:25:55' prior: 50881376!
addParentPortfolio: aPortfolioWhoAddMe
	hierarchyState _ ContainedState new.
	portfoliosThatContainsMee add: aPortfolioWhoAddMe. ! !

Portfolio subclass: #ContainedPortfolio
	instanceVariableNames: 'portfoliosThatContainsM'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ContainedPortfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/8/2020 18:26:09'!
Portfolio subclass: #ContainedPortfolio
	instanceVariableNames: 'portfoliosThatContainsM'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/8/2020 18:26:23'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets portfoliosWhoAddMe hierarchyState portfoliosThatContainsMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 18:26:23' prior: 50881391!
addParentPortfolio: aPortfolioWhoAddMe
	hierarchyState _ ContainedState new.
	portfoliosThatContainsMe add: aPortfolioWhoAddMe. ! !

FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets hierarchyState portfoliosThatContainsMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'HG 11/8/2020 18:26:25'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets hierarchyState portfoliosThatContainsMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'HG 11/8/2020 18:26:35' prior: 50881369 overrides: 16896425!
initialize
	assets _ OrderedCollection new.
	hierarchyState _ RootState new.
	portfoliosThatContainsMe _ OrderedCollection new.! !

!methodRemoval: RootPortfolio #addParentPortfolio: stamp: 'HG 11/8/2020 18:27:06'!
addParentPortfolio: aPortfolioWhoAddTheAsset
	| originalAssets |
	originalAssets _ assets.
	self become: ContainedPortfolio new.
	assets _ originalAssets.
	self addParentPortfolio: aPortfolioWhoAddTheAsset.!

!methodRemoval: ContainedPortfolio #addParentPortfolio: stamp: 'HG 11/8/2020 18:27:14'!
addParentPortfolio: aPortfolioWhoAddTheAsset
	portfoliosThatContainsMe add: aPortfolioWhoAddTheAsset. !

!methodRemoval: ContainedPortfolio #initialize stamp: 'HG 11/8/2020 18:27:17'!
initialize
	portfoliosThatContainsMe _ OrderedCollection new.!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/8/2020 18:28:42' prior: 50881247!
roots
	portfoliosThatContainsMe isEmpty 
		ifFalse: [ ^self collectAssetPropertiesWith: [:anAsset | anAsset roots ] over: portfoliosThatContainsMe.].
	^{self}.! !
!Portfolio methodsFor: 'initialization' stamp: 'HG 11/8/2020 18:29:02' prior: 50881445 overrides: 16896425!
initialize
	assets _ OrderedCollection new.
	hierarchyState _ RootState for: self.
	portfoliosThatContainsMe _ OrderedCollection new.! !
!PortfolioHierarchyState class methodsFor: 'instance creation' stamp: 'HG 11/8/2020 18:29:49'!
for: aPortfolio
	^self new initializeFor: aPortfolio. ! !

!classDefinition: #PortfolioHierarchyState category: #'Portfolio-Ejercicio' stamp: 'HG 11/8/2020 18:30:08'!
Object subclass: #PortfolioHierarchyState
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioHierarchyState methodsFor: 'initialization' stamp: 'HG 11/8/2020 18:30:06'!
initializeFor: aPortfolio
	portfolio _ aPortfolio. ! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/8/2020 18:30:37' prior: 50881472!
roots
	^hierarchyState roots.
	"
	portfoliosThatContainsMe isEmpty 
		ifFalse: [ ^self collectAssetPropertiesWith: [:anAsset | anAsset roots ] over: portfoliosThatContainsMe.].
	^{self}.
	"! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/8/2020 18:31:02' prior: 50881422!
addParentPortfolio: aPortfolioWhoAddMe
	hierarchyState _ ContainedState for: self.
	portfoliosThatContainsMe add: aPortfolioWhoAddMe. ! !
!PortfolioHierarchyState methodsFor: '-- private hierarchy' stamp: 'HG 11/8/2020 18:31:50'!
roots
	self subclassResponsibility. ! !
!ContainedState methodsFor: '-- private hierarchy' stamp: 'HG 11/8/2020 18:32:08' overrides: 50881524!
roots
	self shouldBeImplemented. ! !
!RootState methodsFor: '-- private hierarchy' stamp: 'HG 11/8/2020 18:32:19' overrides: 50881524!
roots
	self shouldBeImplemented. ! !
!RootState methodsFor: '-- private hierarchy' stamp: 'HG 11/8/2020 18:32:35' prior: 50881534 overrides: 50881524!
roots
	^{portfolio}. ! !
!RootState methodsFor: '-- private hierarchy' stamp: 'HG 11/8/2020 18:33:14' prior: 50881539 overrides: 50881524!
roots
	^portfolio lookUpRootsBeingRootPortfolio. ! !
!ContainedState methodsFor: '-- private hierarchy' stamp: 'HG 11/8/2020 18:33:37' prior: 50881529 overrides: 50881524!
roots
	^portfolio lookUpRootsBeingContainedPortfolio.! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/8/2020 18:33:50'!
lookUpRootsBeingContainedPortfolio
	self shouldBeImplemented ! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/8/2020 18:33:54'!
lookUpRootsBeingRootPortfolio
	self shouldBeImplemented ! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/8/2020 18:34:33' prior: 50881559!
lookUpRootsBeingRootPortfolio
	^{self}.! !
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/8/2020 18:35:19' prior: 50881507!
roots
	^hierarchyState roots.
	"
	portfoliosThatContainsMe isEmpty 
		ifFalse: [ ^self collectAssetPropertiesWith: [:anAsset | anAsset roots ] over: portfoliosThatContainsMe.].
	^{self}.
	"! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/8/2020 18:35:26' prior: 50881554!
lookUpRootsBeingContainedPortfolio
	^self collectAssetPropertiesWith: [:anAsset | anAsset roots ] over: portfoliosThatContainsMe.! !

!testRun: #PortfolioTest #test03 stamp: 'HG 11/8/2020 18:35:36'!
ERROR!

!methodRemoval: Portfolio class #new stamp: 'HG 11/8/2020 18:36:32'!
new
	^RootPortfolio basicNew.!

!classRemoval: #RootPortfolio stamp: 'HG 11/8/2020 18:36:39'!
Portfolio subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ContainedPortfolio stamp: 'HG 11/8/2020 18:36:42'!
Portfolio subclass: #ContainedPortfolio
	instanceVariableNames: 'portfoliosThatContainsM'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/8/2020 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/8/2020 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/8/2020 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/8/2020 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/8/2020 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/8/2020 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/8/2020 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/8/2020 18:36:49'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/8/2020 18:36:49'!
PASSED!
!FinancialAsset methodsFor: 'nil' stamp: 'HG 11/8/2020 18:37:55'!
hasRegistered: aTransaction
	self subclassResponsibility. ! !
!FinancialAsset methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 18:38:04'!
transactions
	self subclassResponsibility. ! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/8/2020 18:39:34'!
collectAssetPropertiesWith: anAssetPropertyBlock in: anAssetListToCollectFrom
	^(anAssetListToCollectFrom collect: [:anAsset | anAssetPropertyBlock value: anAsset ]) flatten.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 18:39:34' prior: 50880805!
allAssets
	
	| containedAssets |
	containedAssets _ self collectAssetPropertiesWith: [:anAsset | anAsset allAssets ] in: assets.
	containedAssets add: self.
	^containedAssets.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 18:39:34' prior: 50880829 overrides: 50881629!
transactions
	^self collectAssetPropertiesWith: [:anAsset | anAsset transactions ] in: assets.	
	
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 18:39:34' prior: 50881577!
lookUpRootsBeingContainedPortfolio
	^self collectAssetPropertiesWith: [:anAsset | anAsset roots ] in: portfoliosThatContainsMe.! !

!methodRemoval: Portfolio #collectAssetPropertiesWith:over: stamp: 'HG 11/8/2020 18:39:34'!
collectAssetPropertiesWith: anAssetPropertyBlock over: anAssetListToCollectFrom
	^(anAssetListToCollectFrom collect: [:anAsset | anAssetPropertyBlock value: anAsset ]) flatten.!
!Portfolio methodsFor: 'accessing' stamp: 'HG 11/8/2020 18:39:51' prior: 50881568!
roots
	^hierarchyState roots.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 18:47:25'!
test09
	
	| aParentPortfolio aPortfolioToAdd aChildPortfolio a100Deposit anAccount another100Deposit anotherAccount anotherChildPortfolio anotherParentPortfolio |
	aParentPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aParentPortfolio add: anAccount.
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	
	
	anotherParentPortfolio _ Portfolio new.
	anotherAccount _ ReceptiveAccount new.
	another100Deposit _ Deposit register: 100 on: anotherAccount.
	anotherParentPortfolio add: anotherAccount.
	anotherChildPortfolio _ Portfolio new.
	anotherParentPortfolio add: anotherChildPortfolio.
	
	
	
	
	aPortfolioToAdd _ Portfolio new.
	aPortfolioToAdd add: anAccount.
	
	
	self should: [ aChildPortfolio add: aPortfolioToAdd.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 100.
	self assert: aParentPortfolio transactions size = 1.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 18:49:29' prior: 50881679!
test09
	
	| aParentPortfolio aChildPortfolio a100Deposit anAccount another100Deposit anotherAccount anotherChildPortfolio anotherParentPortfolio |
	
	aParentPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aParentPortfolio add: anAccount.
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	
	
	anotherParentPortfolio _ Portfolio new.
	anotherAccount _ ReceptiveAccount new.
	another100Deposit _ Deposit register: 100 on: anotherAccount.
	anotherParentPortfolio add: anotherAccount.
	anotherChildPortfolio _ Portfolio new.
	anotherParentPortfolio add: anotherChildPortfolio.
	
	
	self should: [ aChildPortfolio add: anotherChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 200.
	self assert: aParentPortfolio transactions size = 2.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	self assert: (anotherParentPortfolio hasRegistered: a100Deposit).
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 18:49:46' prior: 50881716!
test09
	
	| aParentPortfolio aChildPortfolio a100Deposit anAccount another100Deposit anotherAccount anotherChildPortfolio anotherParentPortfolio |
	
	aParentPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aParentPortfolio add: anAccount.
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	
	
	anotherParentPortfolio _ Portfolio new.
	anotherAccount _ ReceptiveAccount new.
	another100Deposit _ Deposit register: 100 on: anotherAccount.
	anotherParentPortfolio add: anotherAccount.
	anotherChildPortfolio _ Portfolio new.
	anotherParentPortfolio add: anotherChildPortfolio.
	
	
	self should: [ aChildPortfolio add: anotherChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 200.
	self assert: aParentPortfolio transactions size = 2.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	self assert: (anotherParentPortfolio hasRegistered: another100Deposit).
	! !

!testRun: #PortfolioTest #test09 stamp: 'HG 11/8/2020 18:49:47'!
FAILURE!

Portfolio!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 18:50:30' prior: 50881753!
test09
	
	| aParentPortfolio aChildPortfolio a100Deposit anAccount another100Deposit anotherAccount anotherChildPortfolio anotherParentPortfolio |
	
	aParentPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aParentPortfolio add: anAccount.
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	anotherParentPortfolio _ Portfolio new.
	anotherAccount _ ReceptiveAccount new.
	another100Deposit _ Deposit register: 100 on: anotherAccount.
	anotherParentPortfolio add: anotherAccount.
	anotherChildPortfolio _ Portfolio new.
	anotherParentPortfolio add: anotherChildPortfolio.
	
	
	self should: [ aChildPortfolio add: anotherChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 200.
	self assert: aParentPortfolio transactions size = 2.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	self assert: (anotherParentPortfolio hasRegistered: another100Deposit).
	! !
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:00:22' prior: 50880748!
add: anAssetToAdd 

	(self roots) anySatisfy: 
		[:aRootAsset | anAssetToAdd roots anySatisfy: 
			[:anAssetToAddRoot | 
				((anAssetToAddRoot allAssets) intersection: (aRootAsset allAssets)) isEmpty not
			] ifTrue: [self signalCantAddAlreadyAddedAsset].
		].
			
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/8/2020 19:00:27'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/8/2020 19:00:27'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/8/2020 19:00:27'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/8/2020 19:00:27'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/8/2020 19:00:27'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/8/2020 19:00:27'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/8/2020 19:00:27'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/8/2020 19:00:27'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'HG 11/8/2020 19:00:27'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/8/2020 19:00:30'!
ERROR!
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:04:17' prior: 50881828!
add: anAssetToAdd 
	
	self roots do: [:aRootAsset | 
		((anAssetToAdd roots) anySatisfy: [:anAssetToAddRoot |
			(anAssetToAddRoot allAssets) intersection: (aRootAsset allAssets) isEmpty not.
			]) ifTrue: [^self signalCantAddAlreadyAddedAsset].
		].
			
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:04:28' prior: 50881865!
add: anAssetToAdd 
	
	self roots do: [:aRootAsset | 
		((anAssetToAdd roots) anySatisfy: [:anAssetToAddRoot |
			anAssetToAddRoot allAssets intersection: (aRootAsset allAssets) isEmpty not.
			]) ifTrue: [^self signalCantAddAlreadyAddedAsset].
		].
			
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/8/2020 19:04:30'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/8/2020 19:04:30'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/8/2020 19:04:30'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/8/2020 19:04:30'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/8/2020 19:04:30'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/8/2020 19:04:30'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/8/2020 19:04:30'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/8/2020 19:04:30'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'HG 11/8/2020 19:04:30'!
ERROR!
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:04:45' prior: 50881879!
add: anAssetToAdd 
	
	self roots do: [:aRootAsset | 
		((anAssetToAdd roots) anySatisfy: [:anAssetToAddRoot |
			((anAssetToAddRoot allAssets) intersection: (aRootAsset allAssets)) isEmpty not.
			]) ifTrue: [^self signalCantAddAlreadyAddedAsset].
		].
			
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/8/2020 19:04:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/8/2020 19:04:46'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/8/2020 19:04:46'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/8/2020 19:04:46'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/8/2020 19:04:46'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/8/2020 19:04:46'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/8/2020 19:04:46'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/8/2020 19:04:46'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'HG 11/8/2020 19:04:46'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/8/2020 19:04:51'!
ERROR!
!ReceptiveAccount methodsFor: 'accesing' stamp: 'HG 11/8/2020 19:05:25'!
roots
	^{self} asOrderedCollection.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'HG 11/8/2020 19:05:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'HG 11/8/2020 19:05:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'HG 11/8/2020 19:05:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'HG 11/8/2020 19:05:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'HG 11/8/2020 19:05:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'HG 11/8/2020 19:05:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'HG 11/8/2020 19:05:30'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/8/2020 19:05:35'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/8/2020 19:05:35'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/8/2020 19:05:35'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/8/2020 19:05:35'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/8/2020 19:05:35'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/8/2020 19:05:35'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/8/2020 19:05:35'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/8/2020 19:05:35'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'HG 11/8/2020 19:05:35'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'HG 11/8/2020 19:05:35'!
FAILURE!

self roots!

anAssetToAdd roots!

aRootAsset allAssets!

anAssetToAddRoot allAssets!

(anAssetToAddRoot allAssets) intersection: (aRootAsset allAssets)!

(aRootAsset allAssets)!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:11:25' prior: 50881792!
test09
	
	| aParentPortfolio aChildPortfolio a100Deposit anAccount anotherChildPortfolio anotherParentPortfolio |
	
	aParentPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aParentPortfolio add: anAccount.
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	anotherParentPortfolio _ Portfolio new.
	anotherParentPortfolio add: anAccount.
	anotherChildPortfolio _ Portfolio new.
	anotherParentPortfolio add: anotherChildPortfolio.
	
	
	self should: [ aChildPortfolio add: anotherChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 100.
	self assert: aParentPortfolio transactions size = 1.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	! !

!testRun: #PortfolioTest #test09 stamp: 'HG 11/8/2020 19:11:26'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'HG 11/8/2020 19:11:26'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/8/2020 19:11:26'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/8/2020 19:11:26'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/8/2020 19:11:26'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/8/2020 19:11:26'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/8/2020 19:11:26'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/8/2020 19:11:26'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/8/2020 19:11:26'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'HG 11/8/2020 19:11:26'!
PASSED!
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:19:59'!
xxx: aRootAsset yyy: anAssetToAdd

	^ (anAssetToAdd roots) anySatisfy: [:anAssetToAddRoot |
			((anAssetToAddRoot allAssets) intersection: (aRootAsset allAssets)) isEmpty not.
			]! !
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:19:59' prior: 50881913!
add: anAssetToAdd 
	
	self roots do: [:aRootAsset | 
		(self xxx: aRootAsset yyy: anAssetToAdd) ifTrue: [^self signalCantAddAlreadyAddedAsset].
		].
			
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:20:46' prior: 50882070!
add: anAssetToAdd 
	
	self roots do: [:aRootAsset | 
		(self xxx: aRootAsset yyy: anAssetToAdd) 
			ifTrue: [^self signalCantAddAlreadyAddedAsset].
		].
	
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/8/2020 19:22:48' prior: 50882061!
xxx: aRootAsset yyy: anAssetToAdd

	^anAssetToAdd roots anySatisfy: 
		[:anAssetToAddRoot | ((anAssetToAddRoot allAssets) intersection: (aRootAsset allAssets)) isEmpty not].! !
!Portfolio methodsFor: '-- private' stamp: 'HG 11/8/2020 19:25:19'!
shouldAddAssetInHierarchy: anAssetToAdd checkingAlreadyContentOf: aRootAsset

	^anAssetToAdd roots anySatisfy: 
		[:anAssetToAddRoot | ((anAssetToAddRoot allAssets) intersection: (aRootAsset allAssets)) isEmpty not].! !

!methodRemoval: Portfolio #xxx:yyy: stamp: 'HG 11/8/2020 19:25:23'!
xxx: aRootAsset yyy: anAssetToAdd

	^anAssetToAdd roots anySatisfy: 
		[:anAssetToAddRoot | ((anAssetToAddRoot allAssets) intersection: (aRootAsset allAssets)) isEmpty not].!
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:25:59' prior: 50882080!
add: anAssetToAdd 
	
	self roots do: [:aRootAsset | 
		(self shouldAddAssetInHierarchy: anAssetToAdd checkingAlreadyContentOf: aRootAsset) 
			ifTrue: [^self signalCantAddAlreadyAddedAsset].
		].
	
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:04:45' prior: 50882116!
add: anAssetToAdd 
	
	self roots do: [:aRootAsset | 
		((anAssetToAdd roots) anySatisfy: [:anAssetToAddRoot |
			((anAssetToAddRoot allAssets) intersection: (aRootAsset allAssets)) isEmpty not.
			]) ifTrue: [^self signalCantAddAlreadyAddedAsset].
		].
			
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !

!testRun: #PortfolioTest #test01 stamp: 'HG 11/8/2020 19:27:20'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'HG 11/8/2020 19:27:20'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'HG 11/8/2020 19:27:20'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'HG 11/8/2020 19:27:20'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'HG 11/8/2020 19:27:20'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'HG 11/8/2020 19:27:20'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'HG 11/8/2020 19:27:20'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'HG 11/8/2020 19:27:20'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'HG 11/8/2020 19:27:20'!
PASSED!
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:27:47' prior: 50882128!
add: anAssetToAdd 
	
	self roots do: [:aRootAsset | 
		((anAssetToAdd roots) anySatisfy: [:anAssetToAddRoot |
			((anAssetToAddRoot allAssets) intersection: (aRootAsset allAssets)) isEmpty.
			]) ifFalse: [^self signalCantAddAlreadyAddedAsset].
		].
			
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:32:08'!
checkPortfolioHierarchy: aRootAsset isDisjointWith: anAssetToAddRoot

	^ ((anAssetToAddRoot allAssets) intersection: (aRootAsset allAssets)) isEmpty! !
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:32:08' prior: 50882162!
add: anAssetToAdd 
	
	self roots do: [:aRootAsset | 
		((anAssetToAdd roots) anySatisfy: [:anAssetToAddRoot |
			self checkPortfolioHierarchy: aRootAsset isDisjointWith: anAssetToAddRoot.
			]) ifFalse: [^self signalCantAddAlreadyAddedAsset].
		].
			
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:32:50'!
portfolioHierarchy: aRootAsset isDisjointWith: anAssetToAddRoot

	^ ((anAssetToAddRoot allAssets) intersection: (aRootAsset allAssets)) isEmpty! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:32:50' prior: 50882183!
add: anAssetToAdd 
	
	self roots do: [:aRootAsset | 
		((anAssetToAdd roots) anySatisfy: [:anAssetToAddRoot |
			self portfolioHierarchy: aRootAsset isDisjointWith: anAssetToAddRoot.
			]) ifFalse: [^self signalCantAddAlreadyAddedAsset].
		].
			
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !

!methodRemoval: Portfolio #checkPortfolioHierarchy:isDisjointWith: stamp: 'HG 11/8/2020 19:32:50'!
checkPortfolioHierarchy: aRootAsset isDisjointWith: anAssetToAddRoot

	^ ((anAssetToAddRoot allAssets) intersection: (aRootAsset allAssets)) isEmpty!
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:34:48'!
checkHierarchyOf: aRootAsset isDisjointWithRootsHierarchiesOf: anAssetToAdd

	^ (anAssetToAdd roots) anySatisfy: [:anAssetToAddRoot |
			self portfolioHierarchy: aRootAsset isDisjointWith: anAssetToAddRoot.
			]! !
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:34:48' prior: 50882204!
add: anAssetToAdd 
	
	self roots do: [:aRootAsset | 
		(self checkHierarchyOf: aRootAsset isDisjointWithRootsHierarchiesOf: anAssetToAdd) ifFalse: [^self signalCantAddAlreadyAddedAsset].
		].
			
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:35:13' prior: 50882235!
add: anAssetToAdd 
	
	self roots do: [:aRootAsset | 
		(self checkHierarchyOf: aRootAsset isDisjointWithRootsHierarchiesOf: anAssetToAdd) 
			ifFalse: [^self signalCantAddAlreadyAddedAsset]].
			
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:39:18'!
hasRepeatedElements: aRootAsset inRootsHierarchiesOf: anAssetToAdd

	^ (anAssetToAdd roots) anySatisfy: [:anAssetToAddRoot |
			self portfolioHierarchy: aRootAsset isDisjointWith: anAssetToAddRoot.
			]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:39:18' prior: 50882247!
add: anAssetToAdd 
	
	self roots do: [:aRootAsset | 
		(self hasRepeatedElements: aRootAsset inRootsHierarchiesOf: anAssetToAdd) 
			ifFalse: [^self signalCantAddAlreadyAddedAsset]].
			
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !

!methodRemoval: Portfolio #checkHierarchyOf:isDisjointWithRootsHierarchiesOf: stamp: 'HG 11/8/2020 19:39:18'!
checkHierarchyOf: aRootAsset isDisjointWithRootsHierarchiesOf: anAssetToAdd

	^ (anAssetToAdd roots) anySatisfy: [:anAssetToAddRoot |
			self portfolioHierarchy: aRootAsset isDisjointWith: anAssetToAddRoot.
			]!
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:39:57' prior: 50882258!
hasRepeatedElements: aRootAsset inRootsHierarchiesOf: anAssetToAdd

	^(anAssetToAdd roots) 
		anySatisfy: [:anAssetToAddRoot | self portfolioHierarchy: aRootAsset isDisjointWith: anAssetToAddRoot].! !
!Portfolio methodsFor: 'accounts operations' stamp: 'HG 11/8/2020 19:43:37'!
checkForRepeatedElementsBetween: aRootAsset andRootsHierarchiesOf: anAssetToAdd

	^(anAssetToAdd roots) 
		anySatisfy: [:anAssetToAddRoot | self portfolioHierarchy: aRootAsset isDisjointWith: anAssetToAddRoot].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:43:37' prior: 50882268!
add: anAssetToAdd 
	
	self roots do: [:aRootAsset | 
		(self checkForRepeatedElementsBetween: aRootAsset andRootsHierarchiesOf: anAssetToAdd) 
			ifFalse: [^self signalCantAddAlreadyAddedAsset]].
			
	assets add: anAssetToAdd.
	anAssetToAdd addParentPortfolio: self.  ! !

!methodRemoval: Portfolio #hasRepeatedElements:inRootsHierarchiesOf: stamp: 'HG 11/8/2020 19:43:37'!
hasRepeatedElements: aRootAsset inRootsHierarchiesOf: anAssetToAdd

	^(anAssetToAdd roots) 
		anySatisfy: [:anAssetToAddRoot | self portfolioHierarchy: aRootAsset isDisjointWith: anAssetToAddRoot].!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:50:37'!
test01portfolioShouldBeEmptyWhenCreated
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio hasRegistered: aTransaction). 
	! !

!methodRemoval: PortfolioTest #test01 stamp: 'HG 11/8/2020 19:50:37'!
test01
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio hasRegistered: aTransaction). 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:52:51'!
test02portfolioRegisterTransactionOfAdddedAccount
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	! !

!methodRemoval: PortfolioTest #test02 stamp: 'HG 11/8/2020 19:52:51'!
test02
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:53:37'!
test03portfolioRegisterTransactionsOfMultipleAccounts
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit 
	aNonAgregateAccount aNonAgregateTransaction another100Withdraw another300Deposit |
	
	aPortfolio _ Portfolio new.
	
	aNonAgregateAccount _ ReceptiveAccount new.
	aNonAgregateTransaction _ Deposit register: 100 on: aNonAgregateAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	another300Deposit _ Deposit register: 300 on: anAccount.
	another100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 500.
	self assert: aPortfolio transactions size = 5.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	self assert: (aPortfolio hasRegistered: another100Withdraw). 
	self assert: (aPortfolio hasRegistered: another300Deposit). 
	self deny: (aPortfolio hasRegistered: aNonAgregateTransaction).
	   
	! !

!methodRemoval: PortfolioTest #test03 stamp: 'HG 11/8/2020 19:53:37'!
test03
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit 
	aNonAgregateAccount aNonAgregateTransaction another100Withdraw another300Deposit |
	
	aPortfolio _ Portfolio new.
	
	aNonAgregateAccount _ ReceptiveAccount new.
	aNonAgregateTransaction _ Deposit register: 100 on: aNonAgregateAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	another300Deposit _ Deposit register: 300 on: anAccount.
	another100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 500.
	self assert: aPortfolio transactions size = 5.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	self assert: (aPortfolio hasRegistered: another100Withdraw). 
	self assert: (aPortfolio hasRegistered: another300Deposit). 
	self deny: (aPortfolio hasRegistered: aNonAgregateTransaction).
	   
	!

----SNAPSHOT----(8 November 2020 19:53:42) CuisUniversity-4137.image priorSource: 17551793!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:54:19'!
test04portfolioRegisterTransactionOfAnotherAddedPortfolio
	
	| aPortfolio anAccount aTransaction aPortfolioToAdd |
	aPortfolio _ Portfolio new.
	
	aPortfolioToAdd _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	aPortfolioToAdd add: anAccount.
	
	aPortfolio add: aPortfolioToAdd.
		
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	! !

!methodRemoval: PortfolioTest #test04 stamp: 'HG 11/8/2020 19:54:19'!
test04
	
	| aPortfolio anAccount aTransaction aPortfolioToAdd |
	aPortfolio _ Portfolio new.
	
	aPortfolioToAdd _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	aPortfolioToAdd add: anAccount.
	
	aPortfolio add: aPortfolioToAdd.
		
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:54:56'!
test04registerTransactionOfAddedPortfolio
	
	| aPortfolio anAccount aTransaction aPortfolioToAdd |
	aPortfolio _ Portfolio new.
	
	aPortfolioToAdd _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	aPortfolioToAdd add: anAccount.
	
	aPortfolio add: aPortfolioToAdd.
		
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	! !

!methodRemoval: PortfolioTest #test04portfolioRegisterTransactionOfAnotherAddedPortfolio stamp: 'HG 11/8/2020 19:54:56'!
test04portfolioRegisterTransactionOfAnotherAddedPortfolio
	
	| aPortfolio anAccount aTransaction aPortfolioToAdd |
	aPortfolio _ Portfolio new.
	
	aPortfolioToAdd _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	aPortfolioToAdd add: anAccount.
	
	aPortfolio add: aPortfolioToAdd.
		
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:55:06'!
test03registerTransactionsOfMultipleAccounts
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit 
	aNonAgregateAccount aNonAgregateTransaction another100Withdraw another300Deposit |
	
	aPortfolio _ Portfolio new.
	
	aNonAgregateAccount _ ReceptiveAccount new.
	aNonAgregateTransaction _ Deposit register: 100 on: aNonAgregateAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	another300Deposit _ Deposit register: 300 on: anAccount.
	another100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 500.
	self assert: aPortfolio transactions size = 5.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	self assert: (aPortfolio hasRegistered: another100Withdraw). 
	self assert: (aPortfolio hasRegistered: another300Deposit). 
	self deny: (aPortfolio hasRegistered: aNonAgregateTransaction).
	   
	! !

!methodRemoval: PortfolioTest #test03portfolioRegisterTransactionsOfMultipleAccounts stamp: 'HG 11/8/2020 19:55:06'!
test03portfolioRegisterTransactionsOfMultipleAccounts
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit 
	aNonAgregateAccount aNonAgregateTransaction another100Withdraw another300Deposit |
	
	aPortfolio _ Portfolio new.
	
	aNonAgregateAccount _ ReceptiveAccount new.
	aNonAgregateTransaction _ Deposit register: 100 on: aNonAgregateAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	another300Deposit _ Deposit register: 300 on: anAccount.
	another100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 500.
	self assert: aPortfolio transactions size = 5.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	self assert: (aPortfolio hasRegistered: another100Withdraw). 
	self assert: (aPortfolio hasRegistered: another300Deposit). 
	self deny: (aPortfolio hasRegistered: aNonAgregateTransaction).
	   
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:55:14'!
test02registerTransactionOfAdddedAccount
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	! !

!methodRemoval: PortfolioTest #test02portfolioRegisterTransactionOfAdddedAccount stamp: 'HG 11/8/2020 19:55:14'!
test02portfolioRegisterTransactionOfAdddedAccount
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:55:54'!
test05CanNotAddAlreadyAddedAccount
	
	| aPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	! !

!methodRemoval: PortfolioTest #test05 stamp: 'HG 11/8/2020 19:55:54'!
test05
	
	| aPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:56:01'!
test04RegisterTransactionOfAddedPortfolio
	
	| aPortfolio anAccount aTransaction aPortfolioToAdd |
	aPortfolio _ Portfolio new.
	
	aPortfolioToAdd _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	aPortfolioToAdd add: anAccount.
	
	aPortfolio add: aPortfolioToAdd.
		
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	! !

!methodRemoval: PortfolioTest #test04registerTransactionOfAddedPortfolio stamp: 'HG 11/8/2020 19:56:01'!
test04registerTransactionOfAddedPortfolio
	
	| aPortfolio anAccount aTransaction aPortfolioToAdd |
	aPortfolio _ Portfolio new.
	
	aPortfolioToAdd _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	aPortfolioToAdd add: anAccount.
	
	aPortfolio add: aPortfolioToAdd.
		
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:56:09'!
test03RegisterTransactionsOfMultipleAccounts
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit 
	aNonAgregateAccount aNonAgregateTransaction another100Withdraw another300Deposit |
	
	aPortfolio _ Portfolio new.
	
	aNonAgregateAccount _ ReceptiveAccount new.
	aNonAgregateTransaction _ Deposit register: 100 on: aNonAgregateAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	another300Deposit _ Deposit register: 300 on: anAccount.
	another100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 500.
	self assert: aPortfolio transactions size = 5.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	self assert: (aPortfolio hasRegistered: another100Withdraw). 
	self assert: (aPortfolio hasRegistered: another300Deposit). 
	self deny: (aPortfolio hasRegistered: aNonAgregateTransaction).
	   
	! !

!methodRemoval: PortfolioTest #test03registerTransactionsOfMultipleAccounts stamp: 'HG 11/8/2020 19:56:09'!
test03registerTransactionsOfMultipleAccounts
	
	| aPortfolio anAccount a100Deposit a100Withdraw a300Deposit 
	aNonAgregateAccount aNonAgregateTransaction another100Withdraw another300Deposit |
	
	aPortfolio _ Portfolio new.
	
	aNonAgregateAccount _ ReceptiveAccount new.
	aNonAgregateTransaction _ Deposit register: 100 on: aNonAgregateAccount.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	a300Deposit _ Deposit register: 300 on: anAccount.
	a100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	anAccount _ ReceptiveAccount new.
	another300Deposit _ Deposit register: 300 on: anAccount.
	another100Withdraw _ Withdraw register: 100 on: anAccount.
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 500.
	self assert: aPortfolio transactions size = 5.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	self assert: (aPortfolio hasRegistered: a100Withdraw). 
	self assert: (aPortfolio hasRegistered: a300Deposit). 
	self assert: (aPortfolio hasRegistered: another100Withdraw). 
	self assert: (aPortfolio hasRegistered: another300Deposit). 
	self deny: (aPortfolio hasRegistered: aNonAgregateTransaction).
	   
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:56:17'!
test02RegisterTransactionOfAdddedAccount
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	! !

!methodRemoval: PortfolioTest #test02registerTransactionOfAdddedAccount stamp: 'HG 11/8/2020 19:56:17'!
test02registerTransactionOfAdddedAccount
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	aPortfolio add: anAccount.
	
	self assert: aPortfolio balance equals: 100.
	self deny: aPortfolio transactions isEmpty.
	self assert: (aPortfolio hasRegistered: aTransaction). 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:56:23'!
test01PortfolioShouldBeEmptyWhenCreated
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio hasRegistered: aTransaction). 
	! !

!methodRemoval: PortfolioTest #test01portfolioShouldBeEmptyWhenCreated stamp: 'HG 11/8/2020 19:56:24'!
test01portfolioShouldBeEmptyWhenCreated
	
	| aPortfolio anAccount aTransaction |
	aPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	aTransaction _ Deposit register: 100 on: anAccount.
	
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions isEmpty.
	self deny: (aPortfolio hasRegistered: aTransaction). 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:57:50'!
test06CanNotAddAccountAlreadyAddedInHierarchy
	
	| aPortfolio aChildPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	aChildPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aChildPortfolio add: anAccount.
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	! !

!methodRemoval: PortfolioTest #test06 stamp: 'HG 11/8/2020 19:57:50'!
test06
	
	| aPortfolio aChildPortfolio anAccount a100Deposit  |
	aPortfolio _ Portfolio new.
	
	aChildPortfolio _ Portfolio new.
	
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aChildPortfolio add: anAccount.
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: anAccount. ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 100.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: a100Deposit). 
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:58:20'!
test07CanNotAddRepeatedPortfolio
	
	| aPortfolio aChildPortfolio |
	aPortfolio _ Portfolio new.
	aChildPortfolio _ Portfolio new.
	
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: aChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions size = 0.
	! !

!methodRemoval: PortfolioTest #test07 stamp: 'HG 11/8/2020 19:58:20'!
test07
	
	| aPortfolio aChildPortfolio |
	aPortfolio _ Portfolio new.
	aChildPortfolio _ Portfolio new.
	
	aPortfolio add: aChildPortfolio. 
	
	self should: [ aPortfolio add: aChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aPortfolio balance equals: 0.
	self assert: aPortfolio transactions size = 0.
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:59:06'!
test08CanNotAddAccountAlreadyAddedByRoot
	
	| aParentPortfolio aPortfolioToAdd aChildPortfolio a100Deposit anAccount |
	aParentPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aParentPortfolio add: anAccount.
	
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	aPortfolioToAdd _ Portfolio new.
	aPortfolioToAdd add: anAccount.
	
	
	self should: [ aChildPortfolio add: aPortfolioToAdd.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 100.
	self assert: aParentPortfolio transactions size = 1.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	! !

!methodRemoval: PortfolioTest #test08 stamp: 'HG 11/8/2020 19:59:06'!
test08
	
	| aParentPortfolio aPortfolioToAdd aChildPortfolio a100Deposit anAccount |
	aParentPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aParentPortfolio add: anAccount.
	
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	aPortfolioToAdd _ Portfolio new.
	aPortfolioToAdd add: anAccount.
	
	
	self should: [ aChildPortfolio add: aPortfolioToAdd.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 100.
	self assert: aParentPortfolio transactions size = 1.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 19:59:32'!
test08CanNotAddPortfolioWithRepeatedAccountsInHierarchy
	
	| aParentPortfolio aPortfolioToAdd aChildPortfolio a100Deposit anAccount |
	aParentPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aParentPortfolio add: anAccount.
	
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	aPortfolioToAdd _ Portfolio new.
	aPortfolioToAdd add: anAccount.
	
	
	self should: [ aChildPortfolio add: aPortfolioToAdd.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 100.
	self assert: aParentPortfolio transactions size = 1.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	! !

!methodRemoval: PortfolioTest #test08CanNotAddAccountAlreadyAddedByRoot stamp: 'HG 11/8/2020 19:59:32'!
test08CanNotAddAccountAlreadyAddedByRoot
	
	| aParentPortfolio aPortfolioToAdd aChildPortfolio a100Deposit anAccount |
	aParentPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aParentPortfolio add: anAccount.
	
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	aPortfolioToAdd _ Portfolio new.
	aPortfolioToAdd add: anAccount.
	
	
	self should: [ aChildPortfolio add: aPortfolioToAdd.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 100.
	self assert: aParentPortfolio transactions size = 1.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'HG 11/8/2020 20:00:29'!
test09CanNotAddPortfolioWithRepeatedElementsInAddedAssetHierarchy
	
	| aParentPortfolio aChildPortfolio a100Deposit anAccount anotherChildPortfolio anotherParentPortfolio |
	
	aParentPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aParentPortfolio add: anAccount.
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	anotherParentPortfolio _ Portfolio new.
	anotherParentPortfolio add: anAccount.
	anotherChildPortfolio _ Portfolio new.
	anotherParentPortfolio add: anotherChildPortfolio.
	
	
	self should: [ aChildPortfolio add: anotherChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 100.
	self assert: aParentPortfolio transactions size = 1.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	! !

!methodRemoval: PortfolioTest #test09 stamp: 'HG 11/8/2020 20:00:29'!
test09
	
	| aParentPortfolio aChildPortfolio a100Deposit anAccount anotherChildPortfolio anotherParentPortfolio |
	
	aParentPortfolio _ Portfolio new.
	anAccount _ ReceptiveAccount new.
	a100Deposit _ Deposit register: 100 on: anAccount.
	aParentPortfolio add: anAccount.
	aChildPortfolio _ Portfolio new.
	aParentPortfolio add: aChildPortfolio.
	
	anotherParentPortfolio _ Portfolio new.
	anotherParentPortfolio add: anAccount.
	anotherChildPortfolio _ Portfolio new.
	anotherParentPortfolio add: anotherChildPortfolio.
	
	
	self should: [ aChildPortfolio add: anotherChildPortfolio.  ]
		raise: Error
		withMessageText: Portfolio alreadyAddedAssetErrorDescription.
				
	self assert: aParentPortfolio balance equals: 100.
	self assert: aParentPortfolio transactions size = 1.
	self assert: (aParentPortfolio hasRegistered: a100Deposit).
	!

----SNAPSHOT----(8 November 2020 20:00:35) CuisUniversity-4137.image priorSource: 17626153!

!classRemoval: #RootState stamp: 'HG 11/9/2020 16:43:35'!
PortfolioHierarchyState subclass: #RootState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ContainedState stamp: 'HG 11/9/2020 16:43:36'!
PortfolioHierarchyState subclass: #ContainedState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioHierarchyState stamp: 'HG 11/9/2020 16:43:36'!
Object subclass: #PortfolioHierarchyState
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccount stamp: 'HG 11/9/2020 16:43:37'!
FinancialAsset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions balanceCount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'HG 11/9/2020 16:43:37'!
FinancialAsset subclass: #Portfolio
	instanceVariableNames: 'assets hierarchyState portfoliosThatContainsMe'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #FinancialAsset stamp: 'HG 11/9/2020 16:43:38'!
Object subclass: #FinancialAsset
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'HG 11/9/2020 16:43:38'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'HG 11/9/2020 16:43:38'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'HG 11/9/2020 16:43:39'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'HG 11/9/2020 16:43:39'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'HG 11/9/2020 16:43:39'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /Users/monteagudo/Desktop/Inge1/18-Portfolio1/Portfolio-Ejercicio.st----!

!testRun: #PortfolioTest #test04PortfolioRegistersTransactionOfAddedPortfolio stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioShouldBeEmptyWhenCreated stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioRegistersTransactionOfAdddedAccount stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioRegistersTransactionsOfMultipleAddedAccounts stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioRegistersTransactionOfAddedPortfolio stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test05CannotAddAlreadyAddedAccount stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test06CannotAddAccountAlreadyInASubPortfolio stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test07CannotAddAlreadyAddedPortfolio stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test08ContainedPortfolioCannotAddAnotherPortfolioContainingAssetThatExistsInRootPortfolio stamp: 'HG 11/9/2020 16:43:53'!
PASSED!

!testRun: #PortfolioTest #test09ContainedPortfolioWithAssetInRootPortfolioCannotAddAnotherContainedPortofolioWithSameAssetWithinItsRootPortfolio stamp: 'HG 11/9/2020 16:43:53'!
PASSED!