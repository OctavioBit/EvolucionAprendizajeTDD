----STARTUP---- (26 November 2020 12:38:54) as /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/CuisUniversity-4384.image!

!CreditCardTest methodsFor: 'tests' stamp: 'VP 11/26/2020 12:39:33'!
test04CreditCardWithNonPositiveNumberCanNotBeCreated

	self should: [ CreditCard withNumber: -1 expiration: expirationDate previous owner: '' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: CreditCard emptyNameErrorMessage equals: anError messageText.	
		].! !
!CreditCardTest methodsFor: 'tests' stamp: 'VP 11/26/2020 12:39:45' prior: 50904044!
test04CreditCardWithNonPositiveNumberCanNotBeCreated

	self should: [ CreditCard withNumber: -1 expiration: expirationDate previous owner: '' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: CreditCard invalidCardNumberErrorMessage equals: anError messageText.	
		].! !

!testRun: #CreditCardTest #test04CreditCardWithNonPositiveNumberCanNotBeCreated stamp: 'VP 11/26/2020 12:39:46'!
ERROR!
!CreditCard class methodsFor: 'error messages -- private' stamp: 'VP 11/26/2020 12:39:59'!
invalidCardNumberErrorMessage
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages -- private' stamp: 'VP 11/26/2020 12:40:17' prior: 50904072!
invalidCardNumberErrorMessage
	
	^'Can not create credit card with the given number'.! !

!testRun: #CreditCardTest #test04CreditCardWithNonPositiveNumberCanNotBeCreated stamp: 'VP 11/26/2020 12:40:19'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'VP 11/26/2020 12:41:17'!
verifyValidCreditCardNumber: aCardNumber

	^ aCardNumber < 0 ifTrue: [ self error: self invalidCardNumberErrorMessage ].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'VP 11/26/2020 12:41:20' prior: 50904088!
verifyValidCreditCardNumber: aCardNumber

	aCardNumber < 0 ifTrue: [ self error: self invalidCardNumberErrorMessage ].! !

!testRun: #CreditCardTest #test01CreditCardWithFutureDateCorrectlyStoresCardDataAndIsNotExpired stamp: 'VP 11/26/2020 12:41:27'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithPastExpirationDateIsExpired stamp: 'VP 11/26/2020 12:41:27'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithEmptyOwnerCanNotBeCreated stamp: 'VP 11/26/2020 12:41:27'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithNonPositiveNumberCanNotBeCreated stamp: 'VP 11/26/2020 12:41:27'!
FAILURE!

!testRun: #CreditCardTest #test04CreditCardWithNonPositiveNumberCanNotBeCreated stamp: 'VP 11/26/2020 12:41:27'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'VP 11/26/2020 12:41:40' prior: 50904056!
test04CreditCardWithNonPositiveNumberCanNotBeCreated

	self should: [ CreditCard withNumber: -1 expiration: expirationDate previous owner: owner ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: CreditCard invalidCardNumberErrorMessage equals: anError messageText.	
		].! !

!testRun: #CreditCardTest #test04CreditCardWithNonPositiveNumberCanNotBeCreated stamp: 'VP 11/26/2020 12:41:41'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'VP 11/26/2020 12:42:11' prior: 50901826!
withNumber: aNumber expiration: anExpirationDate owner: anOwner
	
	self verifyOwnerNotEmpty: anOwner.
	self verifyValidCreditCardNumber: 	aNumber.

	^self new initializeWithNumber: aNumber expiration: anExpirationDate owner: anOwner.! !

!testRun: #CreditCardTest #test01CreditCardWithFutureDateCorrectlyStoresCardDataAndIsNotExpired stamp: 'VP 11/26/2020 12:42:18'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithPastExpirationDateIsExpired stamp: 'VP 11/26/2020 12:42:18'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithEmptyOwnerCanNotBeCreated stamp: 'VP 11/26/2020 12:42:18'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithNonPositiveNumberCanNotBeCreated stamp: 'VP 11/26/2020 12:42:18'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'VP 11/26/2020 12:42:39'!
test05CreditCardWithNonIntegerNumberCanNotBeCreated

	self should: [ CreditCard withNumber: 1.5 expiration: expirationDate previous owner: owner ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: CreditCard invalidCardNumberErrorMessage equals: anError messageText.	
		].! !

!testRun: #CreditCardTest #test05CreditCardWithNonIntegerNumberCanNotBeCreated stamp: 'VP 11/26/2020 12:42:41'!
FAILURE!
!CreditCard class methodsFor: 'error messages -- private' stamp: 'VP 11/26/2020 12:42:59' prior: 50904078!
invalidCardNumberErrorMessage
	
	^'Can not create credit card with the given number. Card numbers must be positive, integer numbers'.! !
!CreditCard class methodsFor: 'error messages -- private' stamp: 'VP 11/26/2020 12:43:09' prior: 50904179!
invalidCardNumberErrorMessage
	
	^'Can not create credit card with the given number. Card numbers must be positive, integers'.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'VP 11/26/2020 12:43:24' prior: 50904095!
verifyValidCreditCardNumber: aCardNumber

	aCardNumber < 0 ifTrue: [ self error: self invalidCardNumberErrorMessage ].
	aCardNumber isInteger ifFalse: [ self error: self invalidCardNumberErrorMessage ].! !

!testRun: #CreditCardTest #test01CreditCardWithFutureDateCorrectlyStoresCardDataAndIsNotExpired stamp: 'VP 11/26/2020 12:43:25'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithPastExpirationDateIsExpired stamp: 'VP 11/26/2020 12:43:25'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithEmptyOwnerCanNotBeCreated stamp: 'VP 11/26/2020 12:43:25'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithNonPositiveNumberCanNotBeCreated stamp: 'VP 11/26/2020 12:43:25'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithNonIntegerNumberCanNotBeCreated stamp: 'VP 11/26/2020 12:43:25'!
PASSED!

!testRun: #CashierTest #test01CheckoutOfEmptyCartIsNotAllowed stamp: 'VP 11/26/2020 12:43:28'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfSingleProductCartWithValidCardSuccedsAndReturnsCorrectPrice stamp: 'VP 11/26/2020 12:43:28'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfMultipleProductsCartWithValidCardSuccedsAndReturnsCorrectPrice stamp: 'VP 11/26/2020 12:43:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCardFails stamp: 'VP 11/26/2020 12:43:28'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithInvalidCreditCardFails stamp: 'VP 11/26/2020 12:43:28'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithNonRespondingMerchantProcessorCreatesOrderFile stamp: 'VP 11/26/2020 12:43:28'!
ERROR!

!testRun: #CashierTest #test06CheckoutWithNonRespondingMerchantProcessorCreatesOrderFile stamp: 'VP 11/26/2020 12:43:28'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardWithFutureDateCorrectlyStoresCardDataAndIsNotExpired stamp: 'VP 11/26/2020 12:43:34'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithPastExpirationDateIsExpired stamp: 'VP 11/26/2020 12:43:34'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithEmptyOwnerCanNotBeCreated stamp: 'VP 11/26/2020 12:43:34'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithNonPositiveNumberCanNotBeCreated stamp: 'VP 11/26/2020 12:43:34'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithNonIntegerNumberCanNotBeCreated stamp: 'VP 11/26/2020 12:43:34'!
PASSED!

!testRun: #CashierTest #test01CheckoutOfEmptyCartIsNotAllowed stamp: 'VP 11/26/2020 12:43:36'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfSingleProductCartWithValidCardSuccedsAndReturnsCorrectPrice stamp: 'VP 11/26/2020 12:43:36'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfMultipleProductsCartWithValidCardSuccedsAndReturnsCorrectPrice stamp: 'VP 11/26/2020 12:43:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCardFails stamp: 'VP 11/26/2020 12:43:36'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithInvalidCreditCardFails stamp: 'VP 11/26/2020 12:43:36'!
PASSED!

!testRun: #CashierTest #test06CheckoutWithNonRespondingMerchantProcessorCreatesOrderFile stamp: 'VP 11/26/2020 12:43:36'!
ERROR!

!testRun: #CashierTest #test06CheckoutWithNonRespondingMerchantProcessorCreatesOrderFile stamp: 'VP 11/26/2020 12:43:36'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'VP 11/26/2020 12:44:28' prior: 50903954!
test06CheckoutWithNonRespondingMerchantProcessorCreatesOrderFile

	| cart cashier chargedAmount creditCard pendingTransactionsFile |
	
	chargedAmount := nil.
	cart := self createCart.
	cashier := self createCashierWithProcessorResponse: [ self error: Cashier processorTimeOutErrorMessage. ].
	creditCard := CreditCard withNumber: cardNumber expiration: expirationDate owner: owner.
	
	cart add: validBookOf100.
	
	chargedAmount := cashier checkout: cart with: creditCard.
	
	self assert: 100 equals: chargedAmount.
	
	"Nota: estamos usando un Dictionary y una OrderedCollection porque no sab�amos manejar archivos."
	pendingTransactionsFile := cashier pendingTransactionsLedger at: Cashier ledgerEntryNameForToday.
	self assert: 2 equals: pendingTransactionsFile size.
	self assert: (self addProductFileLineFor: validBookOf100 withQuantity: 1) equals: (pendingTransactionsFile at: 1).
	self assert: (Cashier pendingCheckoutFileLineFor: creditCard) equals: (pendingTransactionsFile at: 2).! !

!methodRemoval: CashierTest #test06CheckoutWithNonRespondingMerchantProcessorCreatesOrderFile stamp: 'VP 11/26/2020 14:07:51'!
test06CheckoutWithNonRespondingMerchantProcessorCreatesOrderFile

	| cart cashier chargedAmount creditCard pendingTransactionsFile |
	
	chargedAmount := nil.
	cart := self createCart.
	cashier := self createCashierWithProcessorResponse: [ self error: Cashier processorTimeOutErrorMessage. ].
	creditCard := CreditCard withNumber: cardNumber expiration: expirationDate owner: owner.
	
	cart add: validBookOf100.
	
	chargedAmount := cashier checkout: cart with: creditCard.
	
	self assert: 100 equals: chargedAmount.
	
	"Nota: estamos usando un Dictionary y una OrderedCollection porque no sab�amos manejar archivos."
	pendingTransactionsFile := cashier pendingTransactionsLedger at: Cashier ledgerEntryNameForToday.
	self assert: 2 equals: pendingTransactionsFile size.
	self assert: (self addProductFileLineFor: validBookOf100 withQuantity: 1) equals: (pendingTransactionsFile at: 1).
	self assert: (Cashier pendingCheckoutFileLineFor: creditCard) equals: (pendingTransactionsFile at: 2).!

!testRun: #CashierTest #test01CheckoutOfEmptyCartIsNotAllowed stamp: 'VP 11/26/2020 14:07:54'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfSingleProductCartWithValidCardSuccedsAndReturnsCorrectPrice stamp: 'VP 11/26/2020 14:07:54'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfMultipleProductsCartWithValidCardSuccedsAndReturnsCorrectPrice stamp: 'VP 11/26/2020 14:07:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutWithExpiredCreditCardFails stamp: 'VP 11/26/2020 14:07:54'!
PASSED!

!testRun: #CashierTest #test05CheckoutWithInvalidCreditCardFails stamp: 'VP 11/26/2020 14:07:54'!
PASSED!

----QUIT----(26 November 2020 14:09:28) CuisUniversity-4384.image priorSource: 18316347!

----STARTUP---- (26 November 2020 21:07:34) as /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/CuisUniversity-4384.image!


!classRemoval: #MerchantProcessorSimulator stamp: 'VP 11/26/2020 21:07:43'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'cardValidationBlock processorResponseBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'VP 11/26/2020 21:07:44'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expiration owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'VP 11/26/2020 21:07:44'!
Object subclass: #Cashier
	instanceVariableNames: 'productCatalog merchantProcessor pendingTransactionLedger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'VP 11/26/2020 21:07:45'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'VP 11/26/2020 21:07:45'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'cardNumber expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'VP 11/26/2020 21:07:45'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'validBookOf100 productCatalog validBookOf25 cardNumber expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'VP 11/26/2020 21:07:46'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/TusLibros-33.st----!

----QUIT----(27 November 2020 00:22:21) CuisUniversity-4384.image priorSource: 18327482!

----STARTUP---- (28 November 2020 10:33:53) as /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/CuisUniversity-4384.image!


TestCase subclass: #TusLibrosSaleSystemTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosSaleSystemTest category: 'TusLibros' stamp: 'VP 11/28/2020 10:36:27'!
TestCase subclass: #TusLibrosSaleSystemTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #TusLibrosSaleSystemTest as: #TusLibrosStoreTest stamp: 'VP 11/28/2020 10:38:41'!
Smalltalk renameClassNamed: #TusLibrosSaleSystemTest as: #TusLibrosStoreTest!
!TusLibrosStoreTest methodsFor: 'no messages' stamp: 'VP 11/28/2020 10:41:18'!
test01CreateCartWithEmptyIDFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory cartCanNotBeEmptyErrorMessage .! !

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/28/2020 10:42:47'!
Object subclass: #TusLibrosStore
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/28/2020 10:42:41' prior: 50905021!
test01CreateCartWithEmptyIDFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthSystem: self.! !
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/28/2020 10:43:57'!
authenticate: aClientID withPassword: aPassword

	^true.! !
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/28/2020 10:47:22' prior: 50905036!
test01CreateCartWithEmptyIDFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthSystem: self.
	
	self should: [ tusLibrosStore createCartFor: '' withPassword: '123456' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore emptyIDErrorMessage equals: anError messageText.
		].! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 10:47:24'!
ERROR!
!TusLibrosStore class methodsFor: 'instance creation' stamp: 'VP 11/28/2020 10:47:29'!
newWithAuthSystem: aTusLibrosStoreTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNewWithAuthSystem: aTusLibrosStoreTest ! !
!TusLibrosStore class methodsFor: 'instance creation' stamp: 'VP 11/28/2020 10:48:15' prior: 50905066!
newWithAuthSystem: anAuthenticationSystem 
	
	^self new initializeNewWithAuthenticationSystem: anAuthenticationSystem.! !
!TusLibrosStore class methodsFor: 'instance creation' stamp: 'VP 11/28/2020 10:48:22'!
newWithAuthenticationSystem: anAuthenticationSystem 
	
	^self new initializeNewWithAuthenticationSystem: anAuthenticationSystem.! !
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/28/2020 10:48:22' prior: 50905049!
test01CreateCartWithEmptyIDFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	self should: [ tusLibrosStore createCartFor: '' withPassword: '123456' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore emptyIDErrorMessage equals: anError messageText.
		].! !

!methodRemoval: TusLibrosStore class #newWithAuthSystem: stamp: 'VP 11/28/2020 10:48:22'!
newWithAuthSystem: anAuthenticationSystem 
	
	^self new initializeNewWithAuthenticationSystem: anAuthenticationSystem.!

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 10:48:29'!
ERROR!

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/28/2020 10:48:45'!
Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/28/2020 10:48:45'!
initializeNewWithAuthenticationSystem: anAuthenticationSystem 
	self shouldBeImplemented.
	authenticationSystem := anAuthenticationSystem.! !
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/28/2020 10:48:59' prior: 50905122!
initializeNewWithAuthenticationSystem: anAuthenticationSystem
	authenticationSystem := anAuthenticationSystem.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 10:49:01'!
ERROR!
!TusLibrosStore class methodsFor: 'error messages -- private' stamp: 'VP 11/28/2020 10:49:15'!
emptyIDErrorMessage
	self shouldBeImplemented.! !
!TusLibrosStore class methodsFor: 'error messages -- private' stamp: 'VP 11/28/2020 10:49:28' prior: 50905140!
emptyIDErrorMessage
	
	^'Client ID should not be empty'.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 10:49:30'!
FAILURE!
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/28/2020 10:50:09'!
createCartFor: aClientID withPassword: aPassword

	self error: self class emptyIDErrorMessage.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 10:50:20'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 10:51:43'!
test02CreateCartWithWrongPasswordFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	self should: [ tusLibrosStore createCartFor: '1234' withPassword: 'a wrong password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore invalidPasswordErrorMessage equals: anError messageText.
		].! !

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 10:51:44'!
ERROR!
!TusLibrosStore class methodsFor: 'error messages -- private' stamp: 'VP 11/28/2020 10:51:54'!
invalidPasswordErrorMessage
	self shouldBeImplemented.! !
!TusLibrosStore class methodsFor: 'error messages -- private' stamp: 'VP 11/28/2020 10:52:12' prior: 50905181!
invalidPasswordErrorMessage
	
	^'Invalid client id - password combination'.! !

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 10:52:14'!
FAILURE!
!TusLibrosStoreTest methodsFor: 'authenticator protocol' stamp: 'VP 11/28/2020 10:52:46' prior: 50905043!
authenticate: aClientID withPassword: aPassword

	^aPassword ~= 'a wrong password'.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 10:52:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 10:52:49'!
FAILURE!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 10:52:49'!
FAILURE!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 10:52:58'!
FAILURE!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 10:52:58'!
FAILURE!
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/28/2020 10:54:11' prior: 50905154!
createCartFor: aClientID withPassword: aPassword

	aClientID isEmpty ifTrue: [ self error: self class emptyIDErrorMessage ].
	(authenticationSystem authenticate: aClientID withPassword: aPassword) ifTrue: [ self error: self class invalidPasswordErrorMessage ].! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 10:54:12'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 10:54:12'!
FAILURE!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 10:54:12'!
FAILURE!
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/28/2020 10:54:23' prior: 50905220!
createCartFor: aClientID withPassword: aPassword

	aClientID isEmpty ifTrue: [ self error: self class emptyIDErrorMessage ].
	(authenticationSystem authenticate: aClientID withPassword: aPassword) ifFalse: [ self error: self class invalidPasswordErrorMessage ].! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 10:54:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 10:54:23'!
PASSED!
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/28/2020 10:54:44'!
assertNonEmpty: aClientID

	^ aClientID isEmpty ifTrue: [ self error: self class emptyIDErrorMessage ]! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/28/2020 10:54:44' prior: 50905242!
createCartFor: aClientID withPassword: aPassword

	self assertNonEmpty: aClientID.
	(authenticationSystem authenticate: aClientID withPassword: aPassword) ifFalse: [ self error: self class invalidPasswordErrorMessage ].! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/28/2020 10:55:42'!
assert: aClientID correspondsWith: aPassword

	^ (authenticationSystem authenticate: aClientID withPassword: aPassword) ifFalse: [ self error: self class invalidPasswordErrorMessage ]! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/28/2020 10:55:42' prior: 50905266!
createCartFor: aClientID withPassword: aPassword

	self assertNonEmpty: aClientID.
	self assert: aClientID correspondsWith: aPassword.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 10:55:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 10:55:45'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 10:58:18'!
test03ListOfCreatedCartIsEmpty

	| tusLibrosStore cartId |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	self assert: (tusLibrosStore listCart: cartId) isEmpty.! !

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/28/2020 10:58:21'!
ERROR!
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/28/2020 10:58:36'!
listCart: aTusLibrosStore 
	self shouldBeImplemented.! !
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/28/2020 10:58:56' prior: 50905313!
listCart: aTusLibrosStore 
	
	^OrderedCollection new.! !

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/28/2020 10:58:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 10:58:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 10:58:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/28/2020 10:58:57'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:01:58'!
test04CreateAlreadyExistingCartFails

	"MAYBE TODO
	| tusLibrosStore cartId |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	self assert: (tusLibrosStore listCart: cartId) isEmpty."! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:02:50'!
test05ListOfCartWithAddedItemContainsItem

	"MAYBE TODO
	| tusLibrosStore cartId |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	self assert: (tusLibrosStore listCart: cartId) isEmpty."! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:05:03' prior: 50905348!
test05ListOfCartWithAddedItemContainsItem

	| tusLibrosStore cartId |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	"tusLibrosStore addToCart: cartId book:  inQuantity: 2."
	
	self assert: (tusLibrosStore listCart: cartId) isEmpty.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:06:13' prior: 50905361!
test05ListOfCartWithAddedItemContainsItem

	| tusLibrosStore cartId |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory to: cartId.
	
	self assert: (tusLibrosStore listCart: cartId) isEmpty.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:06:35' prior: 50905375!
test05ListOfCartWithAddedItemContainsItem

	| tusLibrosStore cartId |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	self assert: (tusLibrosStore listCart: cartId) isEmpty.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:08:01' prior: 50905389!
test05ListOfCartWithAddedItemContainsItem

	| tusLibrosStore cartId cartList |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cartList := tusLibrosStore listCart: cartId.
	
	self assert: 2 equals: cartList size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList second.! !

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/28/2020 11:08:06'!
ERROR!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:08:31' overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.! !

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/28/2020 11:08:36'!
ERROR!
!TusLibrosStore methodsFor: 'add' stamp: 'VP 11/28/2020 11:08:43'!
add: aSmallInteger of: aString to: aTusLibrosStore 
	self shouldBeImplemented.! !
!TusLibrosStore methodsFor: 'add' stamp: 'VP 11/28/2020 11:09:22' prior: 50905437!
add: aQuantity of: aBook to: aCartID 
	
	^OrderedCollection with: aBook with: aBook.! !

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/28/2020 11:09:23'!
FAILURE!

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/28/2020 11:10:25'!
Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStore methodsFor: 'add' stamp: 'VP 11/28/2020 11:10:21' prior: 50905443!
add: aQuantity of: aBook to: aCartID 
	
	aQuantity times: [ books add: aBook ].! !
!TusLibrosStore methodsFor: 'add' stamp: 'VP 11/28/2020 11:11:02' prior: 50905460!
add: aQuantity of: aBook to: aCartID 
	
	books add: aBook.
	books add: aBook.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 11:11:06'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 11:11:06'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/28/2020 11:11:06'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/28/2020 11:11:06'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/28/2020 11:11:06'!
ERROR!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/28/2020 11:11:06'!
ERROR!
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/28/2020 11:11:21' prior: 50905130!
initializeNewWithAuthenticationSystem: anAuthenticationSystem
	authenticationSystem := anAuthenticationSystem.
	books := OrderedCollection new.! !
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/28/2020 11:11:28' prior: 50905318!
listCart: aTusLibrosStore 
	
	^books.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 11:11:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 11:11:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/28/2020 11:11:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/28/2020 11:11:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/28/2020 11:11:29'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:14:47'!
test05ListOfEachCartHasBooksCorrespondingToEach

	| tusLibrosStore cartId1 cartId2 cartList1 cartList2 |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId1 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: '4321' withPassword: '4321 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	cartList1 := tusLibrosStore listCart: cartId1.
	cartList2 := tusLibrosStore listCart: cartId2.
	
	self assert: 2 equals: cartList1 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 second.
	
	self assert: 2 equals: cartList2 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList2 first.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:14:49' prior: 50905522!
test05ListOfEachCartHasBooksCorrespondingToEach

	| tusLibrosStore cartId1 cartId2 cartList1 cartList2 |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId1 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: '4321' withPassword: '4321 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	cartList1 := tusLibrosStore listCart: cartId1.
	cartList2 := tusLibrosStore listCart: cartId2.
	
	self assert: 2 equals: cartList1 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 second.
	
	self assert: 1 equals: cartList2 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList2 first.! !

!testRun: #TusLibrosStoreTest #test05ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/28/2020 11:14:50'!
FAILURE!

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/28/2020 11:15:04'!
Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStore methodsFor: 'as yet unclassified' stamp: 'VP 11/28/2020 11:15:04' prior: 50905466!
add: aQuantity of: aBook to: aCartID 
	
	carts add: aBook.
	carts add: aBook.! !
!TusLibrosStore methodsFor: 'as yet unclassified' stamp: 'VP 11/28/2020 11:15:04' prior: 50905493!
initializeNewWithAuthenticationSystem: anAuthenticationSystem
	authenticationSystem := anAuthenticationSystem.
	carts := OrderedCollection new.! !
!TusLibrosStore methodsFor: 'as yet unclassified' stamp: 'VP 11/28/2020 11:15:04' prior: 50905501!
listCart: aTusLibrosStore 
	
	^carts.! !
!TusLibrosStore methodsFor: 'add' stamp: 'VP 11/28/2020 11:16:03' prior: 50905598!
add: aQuantity of: aBook to: aCartID 
	
	(carts at: aCartID) add: aQuantity of: aBook.! !
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/28/2020 11:16:19' prior: 50905604!
initializeNewWithAuthenticationSystem: anAuthenticationSystem
	authenticationSystem := anAuthenticationSystem.
	carts := Dictionary new.! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/28/2020 11:16:40' prior: 50905285!
createCartFor: aClientID withPassword: aPassword

	self assertNonEmpty: aClientID.
	self assert: aClientID correspondsWith: aPassword.
	
	carts at: aClientID put: Cart new.! !

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/28/2020 11:17:27'!
Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem carts bookCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/28/2020 11:17:25' prior: 50905630!
createCartFor: aClientID withPassword: aPassword

	self assertNonEmpty: aClientID.
	self assert: aClientID correspondsWith: aPassword.
	
	carts at: aClientID put: (Cart acceptingItemsOf: bookCatalog).! !
!TusLibrosStore class methodsFor: 'instance creation' stamp: 'VP 11/28/2020 11:18:52'!
createStoreCatalog
	
	^Dictionary new
		at: 'validISBN' put: 10;
		yourself.! !
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/28/2020 11:19:12' prior: 50905622!
initializeNewWithAuthenticationSystem: anAuthenticationSystem
	authenticationSystem := anAuthenticationSystem.
	carts := Dictionary new.
	bookCatalog := self class createStoreCatalog.! !
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/28/2020 11:19:15' prior: 50905663!
initializeNewWithAuthenticationSystem: anAuthenticationSystem

	authenticationSystem := anAuthenticationSystem.
	carts := Dictionary new.
	bookCatalog := self class createStoreCatalog.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:19:31'!
test06ListOfEachCartHasBooksCorrespondingToEach

	| tusLibrosStore cartId1 cartId2 cartList1 cartList2 |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId1 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: '4321' withPassword: '4321 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	cartList1 := tusLibrosStore listCart: cartId1.
	cartList2 := tusLibrosStore listCart: cartId2.
	
	self assert: 2 equals: cartList1 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 second.
	
	self assert: 1 equals: cartList2 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList2 first.! !

!methodRemoval: TusLibrosStoreTest #test05ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/28/2020 11:19:31'!
test05ListOfEachCartHasBooksCorrespondingToEach

	| tusLibrosStore cartId1 cartId2 cartList1 cartList2 |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId1 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: '4321' withPassword: '4321 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	cartList1 := tusLibrosStore listCart: cartId1.
	cartList2 := tusLibrosStore listCart: cartId2.
	
	self assert: 2 equals: cartList1 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 second.
	
	self assert: 1 equals: cartList2 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList2 first.!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/28/2020 11:24:06'!
ERROR!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/28/2020 11:24:06'!
ERROR!
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/28/2020 11:26:02' prior: 50905647!
createCartFor: aClientID withPassword: aPassword

	self assertNonEmpty: aClientID.
	self assert: aClientID correspondsWith: aPassword.
	
	carts at: aClientID put: (Cart acceptingItemsOf: bookCatalog).
	
	^self nextCartID.! !

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/28/2020 11:26:28'!
Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem carts bookCatalog lastCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/28/2020 11:26:26'!
nextCartID
	
	lastCartID := lastCartID + 1.
	^lastCartID.! !
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/28/2020 11:26:36' prior: 50905672!
initializeNewWithAuthenticationSystem: anAuthenticationSystem

	authenticationSystem := anAuthenticationSystem.
	carts := Dictionary new.
	bookCatalog := self class createStoreCatalog.
	lastCartID := 0.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 11:26:39'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 11:26:39'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/28/2020 11:26:39'!
FAILURE!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/28/2020 11:26:39'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/28/2020 11:26:39'!
ERROR!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/28/2020 11:26:39'!
ERROR!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/28/2020 11:26:40'!
ERROR!
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/28/2020 11:27:24' prior: 50905752!
createCartFor: aClientID withPassword: aPassword

	| cartID |
	self assertNonEmpty: aClientID.
	self assert: aClientID correspondsWith: aPassword.
	
	cartID := self nextCartID.
	
	carts at: cartID put: (Cart acceptingItemsOf: bookCatalog).
	
	^cartID.! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/28/2020 11:27:28' prior: 50905809!
createCartFor: aClientID withPassword: aPassword

	| cartID |
	
	self assertNonEmpty: aClientID.
	self assert: aClientID correspondsWith: aPassword.
	
	cartID := self nextCartID.
	
	carts at: cartID put: (Cart acceptingItemsOf: bookCatalog).
	
	^cartID.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 11:27:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 11:27:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/28/2020 11:27:29'!
FAILURE!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/28/2020 11:27:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/28/2020 11:27:29'!
ERROR!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/28/2020 11:27:29'!
ERROR!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/28/2020 11:27:31'!
ERROR!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:27:53' prior: 50905404!
test05ListOfCartWithAddedItemContainsItem

	| tusLibrosStore cartId cartList |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: 'validISBN' to: cartId.
	
	cartList := tusLibrosStore listCart: cartId.
	
	self assert: 2 equals: cartList size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList second.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:28:09' prior: 50905681!
test06ListOfEachCartHasBooksCorrespondingToEach

	| tusLibrosStore cartId1 cartId2 cartList1 cartList2 |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId1 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: '4321' withPassword: '4321 password'.
	
	tusLibrosStore add: 2 of: 'validISBN' to: cartId1.
	tusLibrosStore add: 1 of: 'validISBN' to: cartId2.
	
	cartList1 := tusLibrosStore listCart: cartId1.
	cartList2 := tusLibrosStore listCart: cartId2.
	
	self assert: 2 equals: cartList1 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 second.
	
	self assert: 1 equals: cartList2 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList2 first.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:28:33' prior: 50905876!
test06ListOfEachCartHasBooksCorrespondingToEach

	| tusLibrosStore cartId1 cartId2 cartList1 cartList2 |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId1 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: '4321' withPassword: '4321 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	cartList1 := tusLibrosStore listCart: cartId1.
	cartList2 := tusLibrosStore listCart: cartId2.
	
	self assert: 2 equals: cartList1 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 second.
	
	self assert: 1 equals: cartList2 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList2 first.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:28:45' prior: 50905856!
test05ListOfCartWithAddedItemContainsItem

	| tusLibrosStore cartId cartList |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cartList := tusLibrosStore listCart: cartId.
	
	self assert: 2 equals: cartList size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList second.! !
!TusLibrosStore class methodsFor: 'catalog' stamp: 'VP 11/28/2020 11:28:57' prior: 50905657!
createStoreCatalog
	
	^Dictionary new
		at: 'validBook' put: 10;
		yourself.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 11:28:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 11:28:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/28/2020 11:28:59'!
FAILURE!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/28/2020 11:28:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/28/2020 11:28:59'!
FAILURE!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/28/2020 11:28:59'!
ERROR!

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 11:29:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 11:29:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/28/2020 11:29:03'!
FAILURE!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/28/2020 11:29:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/28/2020 11:29:03'!
FAILURE!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/28/2020 11:29:03'!
ERROR!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/28/2020 11:29:04'!
ERROR!
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/28/2020 11:29:32' prior: 50905612!
listCart: aCartID 
	
	^carts .! !
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/28/2020 11:29:38' prior: 50906010!
listCart: aCartID 
	
	^(carts at: aCartID).! !
!Cart methodsFor: 'queries' stamp: 'VP 11/28/2020 11:38:57' prior: 50904481!
occurrencesOf: anItem

	^items copy.  ! !
!Cart methodsFor: 'queries' stamp: 'VP 11/28/2020 11:39:05' prior: 50906018!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'queries' stamp: 'VP 11/28/2020 11:39:11'!
list

	^items copy.  ! !
!Cart methodsFor: 'queries' stamp: 'VP 11/28/2020 11:39:21'!
listItems

	^items copy.  ! !

!methodRemoval: Cart #list stamp: 'VP 11/28/2020 11:39:21'!
list

	^items copy.  !
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/28/2020 11:39:33' prior: 50906014!
listCart: aCartID 
	
	^(carts at: aCartID) listItems.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 11:39:34'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 11:39:34'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/28/2020 11:39:34'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/28/2020 11:39:34'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/28/2020 11:39:34'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/28/2020 11:39:34'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:43:56'!
test07CheckoutCartReturnsTransactionID

	| tusLibrosStore cartId transactionID |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	transactionID := tusLibrosStore checkout: cartId withCardNumber: 1 expiration:'' owner: 'An Owner'.
	
	! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:46:03' prior: 50906062!
test07CheckoutCartReturnsTransactionID

	| tusLibrosStore cartId transactionID |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	transactionID := tusLibrosStore checkout: cartId 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.! !

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/28/2020 11:47:08'!
Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem carts bookCatalog lastCartID salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/28/2020 11:47:06' prior: 50905775!
initializeNewWithAuthenticationSystem: anAuthenticationSystem

	authenticationSystem := anAuthenticationSystem.
	bookCatalog := self class createStoreCatalog.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.! !

!methodRemoval: TusLibrosStore #nextCartID stamp: 'VP 11/28/2020 11:47:13'!
nextCartID
	
	lastCartID := lastCartID + 1.
	^lastCartID.!
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/28/2020 11:47:28' prior: 50905820!
createCartFor: aClientID withPassword: aPassword

	
	
	self assertNonEmpty: aClientID.
	self assert: aClientID correspondsWith: aPassword.
	
	carts add: (Cart acceptingItemsOf: bookCatalog).
	
	^carts size.! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/28/2020 11:47:31' prior: 50906121!
createCartFor: aClientID withPassword: aPassword
	
	self assertNonEmpty: aClientID.
	self assert: aClientID correspondsWith: aPassword.
	
	carts add: (Cart acceptingItemsOf: bookCatalog).
	
	^carts size.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 11:47:39'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 11:47:39'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/28/2020 11:47:39'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/28/2020 11:47:39'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/28/2020 11:47:39'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/28/2020 11:47:39'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/28/2020 11:47:39'!
ERROR!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/28/2020 11:47:39'!
ERROR!
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/28/2020 11:48:11'!
checkout: aSmallInteger charging: aCreditCard throught: aTusLibrosStoreTest on: aDateAndTime 
	self shouldBeImplemented.! !
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/28/2020 11:49:42' prior: 50906168!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor on: aDate

	Cashier toCheckout: (carts at: aCartID)
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: aDate
		 registeringOn: salesBook.! !

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/28/2020 11:50:43'!
Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem carts bookCatalog lastCartID salesBook cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/28/2020 11:50:40' prior: 50906175!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor on: aDate

	cashier := Cashier toCheckout: (carts at: aCartID)
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: aDate
		 registeringOn: salesBook.
		
	cashier checkOut.
	
	^salesBook size.! !
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/28/2020 11:50:47' prior: 50906194!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor on: aDate

	cashier := Cashier toCheckout: (carts at: aCartID)
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: aDate
		 registeringOn: salesBook.
		
	cashier checkOut.
	
	^salesBook size.! !

Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem carts bookCatalog lastCartID salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/28/2020 11:50:55'!
Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem carts bookCatalog lastCartID salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/28/2020 11:51:06' prior: 50906206!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor on: aDate

	| cashier |

	cashier := Cashier toCheckout: (carts at: aCartID)
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: aDate
		 registeringOn: salesBook.
		
	cashier checkOut.
	
	^salesBook size.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 11:51:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 11:51:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/28/2020 11:51:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/28/2020 11:51:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/28/2020 11:51:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/28/2020 11:51:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/28/2020 11:51:08'!
ERROR!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/28/2020 11:51:08'!
ERROR!

!classDefinition: #TusLibrosStoreTest category: 'TusLibros' stamp: 'VP 11/28/2020 11:51:43'!
TestCase subclass: #TusLibrosStoreTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStoreTest methodsFor: 'authenticator protocol' stamp: 'VP 11/28/2020 11:51:40'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:54:12' prior: 50906079!
test07CheckoutCartReturnsTransactionID

	| tusLibrosStore cartId transactionID |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	transactionID := tusLibrosStore checkout: cartId 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	self assert: tusLibrosStore salesBook size equals: transactionID.
	self assert: tusLibrosStore salesBook last equals: ''.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:54:37' prior: 50906287!
test07CheckoutCartReturnsTransactionID

	| tusLibrosStore cartId transactionID |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	transactionID := tusLibrosStore checkout: cartId 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	self assert: tusLibrosStore salesBook size equals: transactionID.
	self assert: tusLibrosStore salesBook last equals: ''.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:55:26' prior: 50906311!
test07CheckoutCartReturnsTransactionID

	| tusLibrosStore cartId transactionID |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	transactionID := tusLibrosStore checkout: cartId 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	self assert: tusLibrosStore salesBook size equals: transactionID.
	self assert: tusLibrosStore salesBook last total equals: testObjectsFactory itemSellByTheStorePrice * 2.! !

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/28/2020 11:55:28'!
ERROR!
!TusLibrosStore methodsFor: 'as yet unclassified' stamp: 'VP 11/28/2020 11:55:36'!
salesBook
	self shouldBeImplemented.
	^salesBook! !
!TusLibrosStore methodsFor: 'as yet unclassified' stamp: 'VP 11/28/2020 11:55:43' prior: 50906369!
salesBook
	^salesBook copy.! !
!TusLibrosStore methodsFor: 'as yet unclassified' stamp: 'VP 11/28/2020 11:55:44' prior: 50906374!
salesBook

	^salesBook copy.! !

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/28/2020 11:55:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/28/2020 11:55:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/28/2020 11:55:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/28/2020 11:55:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/28/2020 11:55:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/28/2020 11:55:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/28/2020 11:55:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/28/2020 11:55:45'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:58:45' prior: 50906338!
test07CheckoutCartReturnsTransactionID

	| tusLibrosStore cartId transactionID |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	transactionID := tusLibrosStore checkout: cartId 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	self assert: tusLibrosStore salesBook size equals: transactionID.
	self assert: tusLibrosStore salesBook last total equals: testObjectsFactory itemSellByTheStorePrice * 2.
	self assert: (tusLibrosStore listCart: cartId) isEmpty.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 11:59:13'!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore cartId transactionID |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	transactionID := tusLibrosStore checkout: cartId 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	self assert: tusLibrosStore salesBook size equals: transactionID.
	self assert: tusLibrosStore salesBook last total equals: testObjectsFactory itemSellByTheStorePrice * 2.
	self assert: (tusLibrosStore listCart: cartId) isEmpty.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 12:02:47' prior: 50906441!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore cartId1 cartId2 |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId1 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	tusLibrosStore checkout: cartId1
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.

	tusLibrosStore checkout: cartId2
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	self assert: (tusLibrosStore listPurchasesFor: '1234' withPassword: '1234 password').
		
	! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 12:02:55' prior: 50906411!
test07CheckoutCartReturnsTransactionID

	| tusLibrosStore cartId transactionID |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	transactionID := tusLibrosStore checkout: cartId 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	self assert: tusLibrosStore salesBook size equals: transactionID.
	self assert: tusLibrosStore salesBook last total equals: testObjectsFactory itemSellByTheStorePrice * 2.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/28/2020 12:05:47' prior: 50906472!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore cartId1 cartId2 purchaseList |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	cartId1 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	tusLibrosStore checkout: cartId1
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.

	tusLibrosStore checkout: cartId2
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	purchaseList := tusLibrosStore listPurchasesFor: '1234' withPassword: '1234 password'.
	self assert: 3 equals: purchaseList size.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList first.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList second.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList third.
		
	! !
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/28/2020 12:06:23'!
listPurchasesFor: aCartID withPassword: aPassword

	! !

Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'VP 11/28/2020 12:08:31'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/28/2020 12:09:17' prior: 50906233!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor on: aDate

	| cashier |

	cashier := Cashier toCheckout: (carts at: aCartID)
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: aDate
		 registeringOn: OrderedCollection new.
		
	cashier checkOut.
	
	^salesBook size.! !

!classDefinition: #CartSale category: 'TusLibros' stamp: 'VP 11/28/2020 12:14:47'!
Object subclass: #CartSale
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/28/2020 12:14:34' prior: 50906593!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor on: aDate

	| cashier cart clientID total |

	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: aDate
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	salesBook add: (CartSale of: clientID for: cart withTotal: total).
	
	^salesBook size.! !

----QUIT----(28 November 2020 12:14:55) CuisUniversity-4384.image priorSource: 18347025!

----STARTUP---- (29 November 2020 10:40:37) as /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/CuisUniversity-4384.image!

!CartSale class methodsFor: 'no messages' stamp: 'VP 11/29/2020 10:42:45'!
of: aClientID for: aCart withTotal: aTotal

	^self new initializeWith: aClientID forProductsIn: aCart withTotal: aTotal.! !
!CartSale class methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 10:42:57'!
of: aClientID forProductsIn: aCart withTotal: aTotal

	^self new initializeWith: aClientID forProductsIn: aCart withTotal: aTotal.! !
!TusLibrosStore methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 10:42:57' prior: 50906612!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor on: aDate

	| cashier cart clientID total |

	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: aDate
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	salesBook add: (CartSale of: clientID forProductsIn: cart withTotal: total).
	
	^salesBook size.! !

!methodRemoval: CartSale class #of:for:withTotal: stamp: 'VP 11/29/2020 10:42:57'!
of: aClientID for: aCart withTotal: aTotal

	^self new initializeWith: aClientID forProductsIn: aCart withTotal: aTotal.!

!classDefinition: #CartSale category: 'TusLibros' stamp: 'VP 11/29/2020 10:43:44'!
Object subclass: #CartSale
	instanceVariableNames: 'clientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSale category: 'TusLibros' stamp: 'VP 11/29/2020 10:43:45'!
Object subclass: #CartSale
	instanceVariableNames: 'clientID products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSale category: 'TusLibros' stamp: 'VP 11/29/2020 10:43:46'!
Object subclass: #CartSale
	instanceVariableNames: 'clientID products total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSale methodsFor: 'no messages' stamp: 'VP 11/29/2020 10:43:42'!
initializeWith: aClientID forProductsIn: aCart withTotal: aTotal

	clientID := aClientID.
	products := aCart.
	total := aTotal.! !
!CartSale methodsFor: 'initialization' stamp: 'VP 11/29/2020 10:44:05' prior: 50906696!
initializeWith: aClientID forProductsIn: aCart withTotal: aTotal

	clientID := aClientID.
	products := aCart listItems.
	total := aTotal.! !
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/29/2020 10:44:59'!
clientIDFor: aCartID

	! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/29/2020 10:45:43' prior: 50906131!
createCartFor: aClientID withPassword: aPassword
	
	self assertNonEmpty: aClientID.
	self assert: aClientID correspondsWith: aPassword.
	
	carts add: (Cart acceptingItemsOf: bookCatalog).
	
	^carts size.! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/29/2020 10:46:09' prior: 50906714!
createCartFor: aClientID withPassword: aPassword
	
	self assertNonEmpty: aClientID.
	self assert: aClientID correspondsWith: aPassword.
	
	carts add: (Cart acceptingItemsOf: bookCatalog).
	
	^carts size.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 10:55:43'!
test01CreateCartWithNonExistingClientIDFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	self should: [ tusLibrosStore createCartFor: '' withPassword: '123456' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore emptyIDErrorMessage equals: anError messageText.
		].! !

!classDefinition: #Client category: 'TusLibros' stamp: 'VP 11/29/2020 10:56:43'!
Object subclass: #Client
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'VP 11/29/2020 10:56:36'!
clientList

	^OrderedCollection with: (Client withID: 'Yenny').! !
!Client class methodsFor: 'no messages' stamp: 'VP 11/29/2020 10:57:06'!
withID: aClientID

	^self new initializeWith: aClientID.! !

!classDefinition: #Client category: 'TusLibros' stamp: 'VP 11/29/2020 10:57:25'!
Object subclass: #Client
	instanceVariableNames: 'clientID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Client methodsFor: 'no messages' stamp: 'VP 11/29/2020 10:57:22'!
initializeWith: aClientID

	clientID := aClientID.! !
!Client methodsFor: 'initialization' stamp: 'VP 11/29/2020 10:57:39'!
id

	^clientID.! !

!classDefinition: #Client category: 'TusLibros' stamp: 'VP 11/29/2020 10:57:47'!
Object subclass: #Client
	instanceVariableNames: 'id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Client methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 10:57:47' prior: 50906772!
initializeWith: aClientID

	id := aClientID.! !
!Client methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 10:57:47' prior: 50906776!
id

	^id.! !

!methodRemoval: TusLibrosStoreTest #test01CreateCartWithEmptyIDFails stamp: 'VP 11/29/2020 10:58:27'!
test01CreateCartWithEmptyIDFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self.
	
	self should: [ tusLibrosStore createCartFor: '' withPassword: '123456' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore emptyIDErrorMessage equals: anError messageText.
		].!
!TusLibrosStore class methodsFor: 'instance creation' stamp: 'VP 11/29/2020 10:59:00'!
newWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList
	
	^self new initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList.! !

!methodRemoval: TusLibrosStore class #newWithAuthenticationSystem: stamp: 'VP 11/29/2020 10:59:04'!
newWithAuthenticationSystem: anAuthenticationSystem 
	
	^self new initializeNewWithAuthenticationSystem: anAuthenticationSystem.!

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/29/2020 10:59:22'!
Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem carts bookCatalog lastCartID salesBook clients'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/29/2020 10:59:20'!
initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList

	authenticationSystem := anAuthenticationSystem.
	clients := aClientList.
	bookCatalog := self class createStoreCatalog.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.! !

!methodRemoval: TusLibrosStore #initializeNewWithAuthenticationSystem: stamp: 'VP 11/29/2020 10:59:24'!
initializeNewWithAuthenticationSystem: anAuthenticationSystem

	authenticationSystem := anAuthenticationSystem.
	bookCatalog := self class createStoreCatalog.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 10:59:31'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 10:59:40' prior: 50905163!
test02CreateCartWithWrongPasswordFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	self should: [ tusLibrosStore createCartFor: '1234' withPassword: 'a wrong password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore invalidPasswordErrorMessage equals: anError messageText.
		].! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 10:59:43' prior: 50905299!
test03ListOfCreatedCartIsEmpty

	| tusLibrosStore cartId |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	self assert: (tusLibrosStore listCart: cartId) isEmpty.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 10:59:46' prior: 50905336!
test04CreateAlreadyExistingCartFails

	"MAYBE TODO
	| tusLibrosStore cartId |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	self assert: (tusLibrosStore listCart: cartId) isEmpty."! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 10:59:49' prior: 50905938!
test05ListOfCartWithAddedItemContainsItem

	| tusLibrosStore cartId cartList |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cartList := tusLibrosStore listCart: cartId.
	
	self assert: 2 equals: cartList size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList second.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 10:59:52' prior: 50905906!
test06ListOfEachCartHasBooksCorrespondingToEach

	| tusLibrosStore cartId1 cartId2 cartList1 cartList2 |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId1 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: '4321' withPassword: '4321 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	cartList1 := tusLibrosStore listCart: cartId1.
	cartList2 := tusLibrosStore listCart: cartId2.
	
	self assert: 2 equals: cartList1 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 second.
	
	self assert: 1 equals: cartList2 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList2 first.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 10:59:55' prior: 50906507!
test07CheckoutCartReturnsTransactionID

	| tusLibrosStore cartId transactionID |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	transactionID := tusLibrosStore checkout: cartId 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	self assert: tusLibrosStore salesBook size equals: transactionID.
	self assert: tusLibrosStore salesBook last total equals: testObjectsFactory itemSellByTheStorePrice * 2.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 10:59:58' prior: 50906535!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore cartId1 cartId2 purchaseList |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId1 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	tusLibrosStore checkout: cartId1
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.

	tusLibrosStore checkout: cartId2
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	purchaseList := tusLibrosStore listPurchasesFor: '1234' withPassword: '1234 password'.
	self assert: 3 equals: purchaseList size.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList first.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList second.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList third.
		
	! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/29/2020 11:01:20' prior: 50906724!
createCartFor: aClientID withPassword: aPassword
	
	| cartID |
	self assertNonEmpty: aClientID.
	self assert: aClientID correspondsWith: aPassword.
	
	carts add: (Cart acceptingItemsOf: bookCatalog).
	
	cartID := carts size.
	(clients select: [ :aClient | aClient id = aClientID ]) addCart: cartID.
	
	^cartID.! !

!classDefinition: #Client category: 'TusLibros' stamp: 'VP 11/29/2020 11:01:44'!
Object subclass: #Client
	instanceVariableNames: 'id carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Client methodsFor: 'accessing' stamp: 'VP 11/29/2020 11:01:42'!
addCart: aCartID

	carts add: aCartID.! !
!Client methodsFor: 'initialization' stamp: 'VP 11/29/2020 11:01:57' prior: 50906786!
initializeWith: aClientID

	id := aClientID.
	carts := OrderedCollection new.! !
!Client methodsFor: 'accessing' stamp: 'VP 11/29/2020 11:03:15'!
carts

	^carts copy.! !
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/29/2020 11:04:07' prior: 50906710!
clientIDFor: aCartID

	^(clients select: [ :aClient | aClient carts includes: aCartID ]) id.! !
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/29/2020 11:04:35'!
clientWithCart: aCartID

	^ clients select: [ :aClient | aClient carts includes: aCartID ]! !
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/29/2020 11:04:35' prior: 50907065!
clientIDFor: aCartID

	^(self clientWithCart: aCartID) id.! !
!CartSale methodsFor: 'initialization' stamp: 'VP 11/29/2020 11:05:38'!
clientID

	^clientID.! !
!CartSale methodsFor: 'initialization' stamp: 'VP 11/29/2020 11:05:43'!
products

	^products copy.! !
!CartSale methodsFor: 'accessing' stamp: 'VP 11/29/2020 11:06:01'!
total

	^total.! !
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/29/2020 11:10:07' prior: 50906578!
listPurchasesFor: aClientID withPassword: aPassword

	^salesBook select: [ :aCartSale | aCartSale clientID = aClientID ].! !
!TusLibrosStore methodsFor: 'checkout -- private' stamp: 'VP 11/29/2020 11:11:03' prior: 50907071!
clientWithCart: aCartID

	^clients detect: [ :aClient | aClient carts includes: aCartID ].! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:12:56' prior: 50906988!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore cartId1 cartId2 purchaseList |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId1 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	tusLibrosStore checkout: cartId1
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.

	tusLibrosStore checkout: cartId2
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	purchaseList := tusLibrosStore listPurchasesFor: '1234' withPassword: '1234 password'.
	self assert: 2 equals: purchaseList size.
	self assert: 2 * testObjectsFactory itemSellByTheStorePrice equals: purchaseList first total.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList first products first.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList first products second.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second total.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second products first.
		
	! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:12:59' prior: 50907107!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore cartId1 cartId2 purchaseList |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId1 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	tusLibrosStore checkout: cartId1
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.

	tusLibrosStore checkout: cartId2
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	purchaseList := tusLibrosStore listPurchasesFor: '1234' withPassword: '1234 password'.
	self assert: 2 equals: purchaseList size.
	self assert: 2 * testObjectsFactory itemSellByTheStorePrice equals: purchaseList first total.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList first products first.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList first products second.
	
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second total.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second products first.
		
	! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:13:04' prior: 50907160!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore cartId1 cartId2 purchaseList |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId1 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: '1234' withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	tusLibrosStore checkout: cartId1
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.

	tusLibrosStore checkout: cartId2
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	purchaseList := tusLibrosStore listPurchasesFor: '1234' withPassword: '1234 password'.
	
	self assert: 2 equals: purchaseList size.
	
	self assert: 2 * testObjectsFactory itemSellByTheStorePrice equals: purchaseList first total.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList first products first.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList first products second.
	
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second total.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second products first.
		
	! !

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:13:07'!
ERROR!
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/29/2020 11:13:17' prior: 50907033!
createCartFor: aClientID withPassword: aPassword
	
	| cartID |
	self assertNonEmpty: aClientID.
	self assert: aClientID correspondsWith: aPassword.
	
	carts add: (Cart acceptingItemsOf: bookCatalog).
	
	cartID := carts size.
	(clients detect: [ :aClient | aClient id = aClientID ]) addCart: cartID.
	
	^cartID.! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/29/2020 11:13:45' prior: 50907272!
createCartFor: aClientID withPassword: aPassword
	
	| cartID |
	self assertNonEmpty: aClientID.
	self assert: aClientID correspondsWith: aPassword.
	
	carts add: (Cart acceptingItemsOf: bookCatalog).
	
	cartID := carts size.
	(clients detect: [ :aClient | aClient id = aClientID ]) addCart: cartID.
	
	^cartID.! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/29/2020 11:13:55'!
clientWithID: aClientID

	^ clients detect: [ :aClient | aClient id = aClientID ]! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/29/2020 11:13:55' prior: 50907285!
createCartFor: aClientID withPassword: aPassword
	
	| cartID |
	self assertNonEmpty: aClientID.
	self assert: aClientID correspondsWith: aPassword.
	
	carts add: (Cart acceptingItemsOf: bookCatalog).
	
	cartID := carts size.
	(self clientWithID: aClientID) addCart: cartID.
	
	^cartID.! !

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:13:58'!
ERROR!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:14:46' prior: 50906860!
test02CreateCartWithWrongPasswordFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	self should: [ tusLibrosStore createCartFor: testObjectsFactory clientList first withPassword: 'a wrong password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore invalidPasswordErrorMessage equals: anError messageText.
		].! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'VP 11/29/2020 11:15:15'!
clientID
	^'Yenny'.! !
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'VP 11/29/2020 11:15:31' prior: 50906756!
clientList

	^OrderedCollection with: (Client withID: self clientID).! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:15:41' prior: 50907320!
test02CreateCartWithWrongPasswordFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	self should: [ tusLibrosStore createCartFor: testObjectsFactory clientID withPassword: 'a wrong password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore invalidPasswordErrorMessage equals: anError messageText.
		].! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:15:47' prior: 50906876!
test03ListOfCreatedCartIsEmpty

	| tusLibrosStore cartId |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientID withPassword: '1234 password'.
	
	self assert: (tusLibrosStore listCart: cartId) isEmpty.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:15:51' prior: 50906889!
test04CreateAlreadyExistingCartFails

	"MAYBE TODO
	| tusLibrosStore cartId |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientID withPassword: '1234 password'.
	
	self assert: (tusLibrosStore listCart: cartId) isEmpty."! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:15:55' prior: 50906903!
test05ListOfCartWithAddedItemContainsItem

	| tusLibrosStore cartId cartList |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientID withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cartList := tusLibrosStore listCart: cartId.
	
	self assert: 2 equals: cartList size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList second.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:15:59' prior: 50906925!
test06ListOfEachCartHasBooksCorrespondingToEach

	| tusLibrosStore cartId1 cartId2 cartList1 cartList2 |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId1 := tusLibrosStore createCartFor: testObjectsFactory clientID withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: '4321' withPassword: '4321 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	cartList1 := tusLibrosStore listCart: cartId1.
	cartList2 := tusLibrosStore listCart: cartId2.
	
	self assert: 2 equals: cartList1 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 second.
	
	self assert: 1 equals: cartList2 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList2 first.! !
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'VP 11/29/2020 11:16:15'!
clientIDYenny
	^'Yenny'.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 11:16:15' prior: 50907341!
clientList

	^OrderedCollection with: (Client withID: self clientIDYenny).! !
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 11:16:15' prior: 50907347!
test02CreateCartWithWrongPasswordFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	self should: [ tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: 'a wrong password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore invalidPasswordErrorMessage equals: anError messageText.
		].! !
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 11:16:15' prior: 50907416!
test06ListOfEachCartHasBooksCorrespondingToEach

	| tusLibrosStore cartId1 cartId2 cartList1 cartList2 |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId1 := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: '4321' withPassword: '4321 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	cartList1 := tusLibrosStore listCart: cartId1.
	cartList2 := tusLibrosStore listCart: cartId2.
	
	self assert: 2 equals: cartList1 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 second.
	
	self assert: 1 equals: cartList2 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList2 first.! !
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 11:16:15' prior: 50907393!
test05ListOfCartWithAddedItemContainsItem

	| tusLibrosStore cartId cartList |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cartList := tusLibrosStore listCart: cartId.
	
	self assert: 2 equals: cartList size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList second.! !
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 11:16:15' prior: 50907364!
test03ListOfCreatedCartIsEmpty

	| tusLibrosStore cartId |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	self assert: (tusLibrosStore listCart: cartId) isEmpty.! !

!methodRemoval: StoreTestObjectsFactory #clientID stamp: 'VP 11/29/2020 11:16:15'!
clientID
	^'Yenny'.!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'VP 11/29/2020 11:16:22'!
clientIDAteneo
	^'Ateneo'.! !
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'VP 11/29/2020 11:16:34' prior: 50907455!
clientList

	^OrderedCollection with: (Client withID: self clientIDYenny) with: (Client withID: self clientIDAteneo).! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:16:50' prior: 50907478!
test06ListOfEachCartHasBooksCorrespondingToEach

	| tusLibrosStore cartId1 cartId2 cartList1 cartList2 |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId1 := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: testObjectsFactory clientIDAteneo withPassword: '4321 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	cartList1 := tusLibrosStore listCart: cartId1.
	cartList2 := tusLibrosStore listCart: cartId2.
	
	self assert: 2 equals: cartList1 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 second.
	
	self assert: 1 equals: cartList2 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList2 first.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:16:58' prior: 50906958!
test07CheckoutCartReturnsTransactionID

	| tusLibrosStore cartId transactionID |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	transactionID := tusLibrosStore checkout: cartId 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	self assert: tusLibrosStore salesBook size equals: transactionID.
	self assert: tusLibrosStore salesBook last total equals: testObjectsFactory itemSellByTheStorePrice * 2.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:17:10' prior: 50907214!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore cartId1 cartId2 purchaseList |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId1 := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	tusLibrosStore checkout: cartId1
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.

	tusLibrosStore checkout: cartId2
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	purchaseList := tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	self assert: 2 equals: purchaseList size.
	
	self assert: 2 * testObjectsFactory itemSellByTheStorePrice equals: purchaseList first total.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList first products first.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList first products second.
	
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second total.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second products first.
		
	! !

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:17:11'!
FAILURE!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:17:32' prior: 50907628!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore cartId1 cartId2 purchaseList |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId1 := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	tusLibrosStore checkout: cartId1
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.

	tusLibrosStore checkout: cartId2
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	purchaseList := tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	self assert: 2 equals: purchaseList size.
	
	self assert: 2 * testObjectsFactory itemSellByTheStorePrice equals: purchaseList first total.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList first products first.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList first products second.
	
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second total.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second products first.
		
	! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:17:33' prior: 50907688!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore cartId1 cartId2 purchaseList |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId1 := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	tusLibrosStore checkout: cartId1
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.

	tusLibrosStore checkout: cartId2
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	purchaseList := tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	self assert: 2 equals: purchaseList size.
	
	self assert: 2 * testObjectsFactory itemSellByTheStorePrice equals: purchaseList first total.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList first products first.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList first products second.
	
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second total.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList second products first.
		
	! !

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:17:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 11:17:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/29/2020 11:17:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/29/2020 11:17:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/29/2020 11:17:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:17:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:17:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:17:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:17:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:17:38'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:18:37' prior: 50907744!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore purchaseList |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
		
	tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	self assert: 2 equals: purchaseList size.
	
	self assert: 2 * testObjectsFactory itemSellByTheStorePrice equals: purchaseList first total.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList first products first.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList first products second.
	
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second total.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList second products first.
		
	! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:17:33' prior: 50907837!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore cartId1 cartId2 purchaseList |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId1 := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	tusLibrosStore checkout: cartId1
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.

	tusLibrosStore checkout: cartId2
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	purchaseList := tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	self assert: 2 equals: purchaseList size.
	
	self assert: 2 * testObjectsFactory itemSellByTheStorePrice equals: purchaseList first total.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList first products first.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList first products second.
	
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second total.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList second products first.
		
	! !

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:19:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 11:19:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/29/2020 11:19:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/29/2020 11:19:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/29/2020 11:19:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:19:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:19:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:19:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:19:08'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:19:49'!
test09ListPurchasesOfNonExistingClientFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	self should: [ tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: '1234 password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore emptyIDErrorMessage equals: anError messageText.
		].! !
!TusLibrosStore class methodsFor: 'error messages -- private' stamp: 'VP 11/29/2020 11:20:03'!
nonExistingClientErrorMessage
	
	^'Client ID should not be empty'.! !
!TusLibrosStore methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 11:20:03' prior: 50905260!
assertNonEmpty: aClientID

	^ aClientID isEmpty ifTrue: [ self error: self class nonExistingClientErrorMessage ]! !
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 11:20:03' prior: 50906734!
test01CreateCartWithNonExistingClientIDFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	self should: [ tusLibrosStore createCartFor: '' withPassword: '123456' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore nonExistingClientErrorMessage equals: anError messageText.
		].! !
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 11:20:03' prior: 50907955!
test09ListPurchasesOfNonExistingClientFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	self should: [ tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: '1234 password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore nonExistingClientErrorMessage equals: anError messageText.
		].! !

!methodRemoval: TusLibrosStore class #emptyIDErrorMessage stamp: 'VP 11/29/2020 11:20:03'!
emptyIDErrorMessage
	
	^'Client ID should not be empty'.!
!TusLibrosStore class methodsFor: 'error messages -- private' stamp: 'VP 11/29/2020 11:20:30' prior: 50907972!
nonExistingClientErrorMessage
	
	^'There is no Client associated with the given ClientID'.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:20:37' prior: 50908001!
test09ListPurchasesOfNonExistingClientFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	self should: [ tusLibrosStore listPurchasesFor: '' withPassword: '1234 password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore nonExistingClientErrorMessage equals: anError messageText.
		].! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:20:45' prior: 50908029!
test09ListPurchasesOfNonExistingClientFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	self should: [ tusLibrosStore listPurchasesFor: 'Inexistent Client' withPassword: '1234 password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore nonExistingClientErrorMessage equals: anError messageText.
		].! !

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:20:51'!
FAILURE!
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/29/2020 11:21:12' prior: 50907094!
listPurchasesFor: aClientID withPassword: aPassword

	self assertNonEmpty: aClientID.

	^salesBook select: [ :aCartSale | aCartSale clientID = aClientID ].! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 11:21:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/29/2020 11:21:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/29/2020 11:21:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/29/2020 11:21:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:21:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:21:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:21:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:21:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:21:19'!
FAILURE!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:21:19'!
FAILURE!
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/29/2020 11:22:39' prior: 50907978!
assertNonEmpty: aClientID

	^(clients anySatisfy: [ :aClient | aClient id = aClientID ])
		ifTrue: [ self error: self class nonExistingClientErrorMessage ]! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/29/2020 11:22:50'!
assertClientExists: aClientID

	^(clients anySatisfy: [ :aClient | aClient id = aClientID ])
		ifTrue: [ self error: self class nonExistingClientErrorMessage ]! !
!TusLibrosStore methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 11:22:50' prior: 50907303!
createCartFor: aClientID withPassword: aPassword
	
	| cartID |
	self assertClientExists: aClientID.
	self assert: aClientID correspondsWith: aPassword.
	
	carts add: (Cart acceptingItemsOf: bookCatalog).
	
	cartID := carts size.
	(self clientWithID: aClientID) addCart: cartID.
	
	^cartID.! !
!TusLibrosStore methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 11:22:50' prior: 50908065!
listPurchasesFor: aClientID withPassword: aPassword

	self assertClientExists: aClientID.

	^salesBook select: [ :aCartSale | aCartSale clientID = aClientID ].! !

!methodRemoval: TusLibrosStore #assertNonEmpty: stamp: 'VP 11/29/2020 11:22:50'!
assertNonEmpty: aClientID

	^(clients anySatisfy: [ :aClient | aClient id = aClientID ])
		ifTrue: [ self error: self class nonExistingClientErrorMessage ]!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:22:56'!
FAILURE!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:23:07'!
FAILURE!
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/29/2020 11:23:30' prior: 50908118!
assertClientExists: aClientID

	^(clients anySatisfy: [ :aClient | aClient id = aClientID ])
		ifFalse: [ self error: self class nonExistingClientErrorMessage ]! !

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:23:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 11:23:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/29/2020 11:23:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/29/2020 11:23:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/29/2020 11:23:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:23:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:23:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:23:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:23:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:23:32'!
PASSED!
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/29/2020 11:23:53' prior: 50908163!
assertClientExists: aClientID

	^(clients noneSatisfy: [ :aClient | aClient id = aClientID ])
		ifTrue: [ self error: self class nonExistingClientErrorMessage ]! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 11:23:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/29/2020 11:23:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/29/2020 11:23:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/29/2020 11:23:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:23:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:23:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:23:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:23:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:23:55'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:25:27'!
test10ListPurchasesWithWrongPasswordFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	self should: [ tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: 'a wrong password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore invalidPasswordErrorMessage equals: anError messageText.
		].! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:25:39' prior: 50908249!
test10ListPurchasesWithWrongPasswordFails

	| tusLibrosStore |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	self should: [ tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: 'a wrong password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore invalidPasswordErrorMessage equals: anError messageText.
		].! !

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/29/2020 11:25:41'!
FAILURE!
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/29/2020 11:25:57' prior: 50908140!
listPurchasesFor: aClientID withPassword: aPassword

	self assertClientExists: aClientID.
	self assert: aClientID correspondsWith: aPassword.

	^salesBook select: [ :aCartSale | aCartSale clientID = aClientID ].! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 11:25:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/29/2020 11:25:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/29/2020 11:25:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/29/2020 11:25:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:25:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:25:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:25:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:25:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:25:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/29/2020 11:25:58'!
PASSED!
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/29/2020 11:28:19'!
validate: aClientID with: aPassword andDo: aValidatedClosure

	self assertClientExists: aClientID.
	self assert: aClientID correspondsWith: aPassword.

	aValidatedClosure value.! !
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/29/2020 11:29:10' prior: 50908286!
listPurchasesFor: aClientID withPassword: aPassword

	self validate: aClientID with: aPassword andDo: [
		^salesBook select: [ :aCartSale | aCartSale clientID = aClientID ].
	].! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/29/2020 11:29:35' prior: 50908127!
createCartFor: aClientID withPassword: aPassword
	
	self validate: aClientID with: aPassword andDo: [
		| cartID |
		
		carts add: (Cart acceptingItemsOf: bookCatalog).
		
		cartID := carts size.
		(self clientWithID: aClientID) addCart: cartID.
		
		^cartID.
	]! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/29/2020 11:29:44' prior: 50908350!
createCartFor: aClientID withPassword: aPassword
	
	self validate: aClientID with: aPassword andDo: [ | cartID |
		
		carts add: (Cart acceptingItemsOf: bookCatalog).
		
		cartID := carts size.
		(self clientWithID: aClientID) addCart: cartID.
		
		^cartID.
	]! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/29/2020 11:29:46' prior: 50908361!
createCartFor: aClientID withPassword: aPassword
	
	self validate: aClientID with: aPassword andDo: [ | cartID |
		carts add: (Cart acceptingItemsOf: bookCatalog).
		
		cartID := carts size.
		(self clientWithID: aClientID) addCart: cartID.
		
		^cartID.
	]! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 11:29:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/29/2020 11:29:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/29/2020 11:29:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/29/2020 11:29:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:29:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:29:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:29:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:29:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:29:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/29/2020 11:29:49'!
PASSED!
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/29/2020 11:32:51'!
registerSaleOf: clientID by: total withTotal: cart

	^ salesBook add: (CartSale of: clientID forProductsIn: cart withTotal: total)! !
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/29/2020 11:32:51' prior: 50906651!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor on: aDate

	| cashier cart clientID total |

	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: aDate
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: clientID by: total withTotal: cart.
	
	^salesBook size.! !
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/29/2020 11:33:00' prior: 50908426!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor on: aDate

	| cashier cart clientID total |

	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: aDate
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'VP 11/29/2020 11:34:38'!
createTusLibrosStore
	
	^TusLibrosStore newWithAuthenticationSystem: self withClients: self clientList.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:35:07' prior: 50907985!
test01CreateCartWithNonExistingClientIDFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createTusLibrosStore.
	
	self should: [ tusLibrosStore createCartFor: '' withPassword: '123456' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore nonExistingClientErrorMessage equals: anError messageText.
		].! !
!StoreTestObjectsFactory methodsFor: 'store' stamp: 'VP 11/29/2020 11:35:50'!
createStoreWithAuthenticationSystem: anAuthenticationSystem
	
	^TusLibrosStore newWithAuthenticationSystem: anAuthenticationSystem withClients: self clientList.! !

!methodRemoval: StoreTestObjectsFactory #createTusLibrosStore stamp: 'VP 11/29/2020 11:35:52'!
createTusLibrosStore
	
	^TusLibrosStore newWithAuthenticationSystem: self withClients: self clientList.!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:36:00' prior: 50908467!
test01CreateCartWithNonExistingClientIDFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	self should: [ tusLibrosStore createCartFor: '' withPassword: '123456' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore nonExistingClientErrorMessage equals: anError messageText.
		].! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:36:06' prior: 50907461!
test02CreateCartWithWrongPasswordFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	self should: [ tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: 'a wrong password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore invalidPasswordErrorMessage equals: anError messageText.
		].! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:36:11' prior: 50907535!
test03ListOfCreatedCartIsEmpty

	| tusLibrosStore cartId |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	self assert: (tusLibrosStore listCart: cartId) isEmpty.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:36:19' prior: 50907512!
test05ListOfCartWithAddedItemContainsItem

	| tusLibrosStore cartId cartList |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cartList := tusLibrosStore listCart: cartId.
	
	self assert: 2 equals: cartList size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList second.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:36:23' prior: 50907563!
test06ListOfEachCartHasBooksCorrespondingToEach

	| tusLibrosStore cartId1 cartId2 cartList1 cartList2 |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId1 := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: testObjectsFactory clientIDAteneo withPassword: '4321 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	cartList1 := tusLibrosStore listCart: cartId1.
	cartList2 := tusLibrosStore listCart: cartId2.
	
	self assert: 2 equals: cartList1 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 first.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList1 second.
	
	self assert: 1 equals: cartList2 size.
	self assert: testObjectsFactory itemSellByTheStore equals: cartList2 first.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:36:29' prior: 50907598!
test07CheckoutCartReturnsTransactionID

	| tusLibrosStore cartId transactionID |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	transactionID := tusLibrosStore checkout: cartId 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	self assert: tusLibrosStore salesBook size equals: transactionID.
	self assert: tusLibrosStore salesBook last total equals: testObjectsFactory itemSellByTheStorePrice * 2.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:36:33' prior: 50907867!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore cartId1 cartId2 purchaseList |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId1 := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	tusLibrosStore checkout: cartId1
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.

	tusLibrosStore checkout: cartId2
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	purchaseList := tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	self assert: 2 equals: purchaseList size.
	
	self assert: 2 * testObjectsFactory itemSellByTheStorePrice equals: purchaseList first total.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList first products first.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList first products second.
	
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second total.
	self assert: testObjectsFactory itemSellByTheStore equals: purchaseList second products first.
		
	! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:36:37' prior: 50908045!
test09ListPurchasesOfNonExistingClientFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	self should: [ tusLibrosStore listPurchasesFor: 'Inexistent Client' withPassword: '1234 password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore nonExistingClientErrorMessage equals: anError messageText.
		].! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:36:43' prior: 50908266!
test10ListPurchasesWithWrongPasswordFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	self should: [ tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: 'a wrong password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore invalidPasswordErrorMessage equals: anError messageText.
		].! !

(OrderedCollection with: 1) = #(1)!

#(1) = #(1)!
!TusLibrosStoreTest methodsFor: 'merchant processor protocol' stamp: 'VP 11/29/2020 11:39:24'!
assertArray: anExpectedArray equals: aCollection

	self assert: anExpectedArray equals: aCollection array."
	self assert: anExpectedCollection size equals: aCollection size.
	(1 to: anExpectedCollection size) do: [ :aCollectionIndex |
		self assert: (anExpectedCollection at: aCollectionIndex) equals: (aCollection at: aCollectionIndex).
	]."! !

	(OrderedCollection new) array!

	(OrderedCollection new) asArray!
!TusLibrosStoreTest methodsFor: 'merchant processor protocol' stamp: 'VP 11/29/2020 11:39:57' prior: 50908714!
assertArray: anExpectedArray equals: aCollection

	self assert: anExpectedArray equals: aCollection asArray.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:40:54' prior: 50908540!
test05ListOfCartWithAddedItemContainsItem

	| tusLibrosStore cartId cartList |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cartList := tusLibrosStore listCart: cartId.
	
	self assertArray: { 
		testObjectsFactory itemSellByTheStore. 
		testObjectsFactory itemSellByTheStore.
	} equals: cartList.! !

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:40:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 11:40:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/29/2020 11:40:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/29/2020 11:40:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/29/2020 11:40:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:40:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:40:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:40:55'!
ERROR!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:40:55'!
ERROR!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:40:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/29/2020 11:40:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:41:01'!
ERROR!
!TusLibrosStore methodsFor: 'sales -- private' stamp: 'VP 11/29/2020 11:41:41' prior: 50908419!
registerSaleOf: cart by: clientID withTotal: total

	^ salesBook add: (CartSale of: clientID forProductsIn: cart withTotal: total)! !

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:41:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:41:44'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 11:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/29/2020 11:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/29/2020 11:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/29/2020 11:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/29/2020 11:41:45'!
PASSED!
!TusLibrosStoreTest methodsFor: 'assertions' stamp: 'VP 11/29/2020 11:42:13'!
assertArray: anExpectedArray isEquivalentTo: aCollection

	self assert: anExpectedArray equals: aCollection asArray.! !
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 11:42:13' prior: 50908738!
test05ListOfCartWithAddedItemContainsItem

	| tusLibrosStore cartId cartList |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cartList := tusLibrosStore listCart: cartId.
	
	self assertArray: { 
		testObjectsFactory itemSellByTheStore. 
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: cartList.! !

!methodRemoval: TusLibrosStoreTest #assertArray:equals: stamp: 'VP 11/29/2020 11:42:13'!
assertArray: anExpectedArray equals: aCollection

	self assert: anExpectedArray equals: aCollection asArray.!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:42:38' prior: 50908863!
test05ListOfCartWithAddedItemContainsItem

	| tusLibrosStore cartId cartList |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	cartList := tusLibrosStore listCart: cartId.
	
	self assertArray: {
		testObjectsFactory itemSellByTheStore. 
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: cartList.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:42:53' prior: 50908562!
test06ListOfEachCartHasBooksCorrespondingToEach

	| tusLibrosStore cartId1 cartId2 cartList1 cartList2 |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId1 := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	cartId2 := tusLibrosStore createCartFor: testObjectsFactory clientIDAteneo withPassword: '4321 password'.
	
	tusLibrosStore add: 2 of: testObjectsFactory itemSellByTheStore to: cartId1.
	tusLibrosStore add: 1 of: testObjectsFactory itemSellByTheStore to: cartId2.
	
	cartList1 := tusLibrosStore listCart: cartId1.
	cartList2 := tusLibrosStore listCart: cartId2.
	
	self assertArray: {
		testObjectsFactory itemSellByTheStore. 
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: cartList1.
	
	self assertArray: {
		testObjectsFactory itemSellByTheStore. 
	} isEquivalentTo: cartList2.! !

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:42:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 11:42:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/29/2020 11:42:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/29/2020 11:42:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/29/2020 11:42:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:42:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:42:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:42:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:42:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:42:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/29/2020 11:42:55'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:45:41'!
listCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore

	| cartId |
	
	cartId := aTusLibrosStore createCartFor: aClientID withPassword: '1234 password'.
	
	aTusLibrosStore add: aQuantity of: aBook to: cartId.
	
	^aTusLibrosStore listCart: cartId! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:47:28' prior: 50908910!
test06ListOfEachCartHasBooksCorrespondingToEach

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	self assertArray: {
		testObjectsFactory itemSellByTheStore. 
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: (self listCartFor: testObjectsFactory clientIDYenny 
						with: 2
						of: testObjectsFactory 
						itemSellByTheStore inStore: tusLibrosStore).
	
	self assertArray: {
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: (self listCartFor: testObjectsFactory clientIDAteneo 
						with: 1
						of: testObjectsFactory 
						itemSellByTheStore inStore: tusLibrosStore).! !

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:47:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 11:47:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/29/2020 11:47:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/29/2020 11:47:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/29/2020 11:47:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:47:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:47:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:47:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:47:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:47:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/29/2020 11:47:31'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:48:29' prior: 50908993!
test06ListOfEachCartHasBooksCorrespondingToEach

	| tusLibrosStore cart1List cart2List |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cart1List := self listCartFor: testObjectsFactory clientIDYenny 
						with: 2
						of: testObjectsFactory 
						itemSellByTheStore inStore: tusLibrosStore.
						
	cart2List := self listCartFor: testObjectsFactory clientIDAteneo 
						with: 1
						of: testObjectsFactory 
						itemSellByTheStore inStore: tusLibrosStore.
	
	self assertArray: {
		testObjectsFactory itemSellByTheStore. 
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: cart1List.
	
	self assertArray: {
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: cart2List.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:49:38' prior: 50909057!
test06ListOfEachCartHasBooksCorrespondingToEach

	| tusLibrosStore cart1List cart2List |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cart1List := self listCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore 
				inStore: tusLibrosStore.
						
	cart2List := self listCartFor: testObjectsFactory clientIDAteneo with: 1 of: testObjectsFactory itemSellByTheStore
				inStore: tusLibrosStore.
	
	self assertArray: {
		testObjectsFactory itemSellByTheStore. 
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: cart1List.
	
	self assertArray: {
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: cart2List.
	! !
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/29/2020 11:51:44'!
createCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore

	| cartId |
	
	cartId := aTusLibrosStore createCartFor: aClientID withPassword: '1234 password'.
	
	aTusLibrosStore add: aQuantity of: aBook to: cartId.
	^cartId.! !
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/29/2020 11:52:02' prior: 50908981!
listCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore

	| cartId |
	
	cartId := self createCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore.
	
	^aTusLibrosStore listCart: cartId! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 11:52:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/29/2020 11:52:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/29/2020 11:52:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/29/2020 11:52:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:52:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:52:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:52:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:52:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:52:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/29/2020 11:52:03'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:52:39' prior: 50908890!
test05ListOfCartWithAddedItemContainsItem

	| tusLibrosStore cartList |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartList := self listCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore 
				inStore: tusLibrosStore.
	
	self assertArray: {
		testObjectsFactory itemSellByTheStore. 
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: cartList.! !

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:53:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 11:53:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/29/2020 11:53:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/29/2020 11:53:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/29/2020 11:53:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:53:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:53:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:53:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:53:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:53:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/29/2020 11:53:10'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:54:36' prior: 50908596!
test07CheckoutCartReturnsTransactionID

	| tusLibrosStore cartId transactionID |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId := self createCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore 
				inStore: tusLibrosStore.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	transactionID := tusLibrosStore checkout: cartId 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.
		
	self assert: tusLibrosStore salesBook size equals: transactionID.
	self assert: tusLibrosStore salesBook last total equals: testObjectsFactory itemSellByTheStorePrice * 2.! !
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/29/2020 11:55:27'!
checkoutCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore

	| cartId |
	
	cartId := self createCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore.
	
	^aTusLibrosStore checkout: cartId
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.! !
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:56:17' prior: 50909224!
test07CheckoutCartReturnsTransactionID

	| tusLibrosStore transactionID |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	transactionID := self checkoutCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore 
				inStore: tusLibrosStore.
		
	self assert: tusLibrosStore salesBook size equals: transactionID.
	self assert: tusLibrosStore salesBook last total equals: testObjectsFactory itemSellByTheStorePrice * 2.! !

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:56:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 11:56:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/29/2020 11:56:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/29/2020 11:56:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/29/2020 11:56:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:56:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:56:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:56:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:56:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:56:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/29/2020 11:56:19'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 11:59:14' prior: 50908625!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore purchaseList |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	self checkoutCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore 
				inStore: tusLibrosStore.
	self checkoutCartFor: testObjectsFactory clientIDYenny with: 1 of: testObjectsFactory itemSellByTheStore 
				inStore: tusLibrosStore.
		
	purchaseList := tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	self assert: 2 equals: purchaseList size.
	
	self assert: 2 * testObjectsFactory itemSellByTheStorePrice equals: purchaseList first total.
	self assertArray: {
		testObjectsFactory itemSellByTheStore.
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: purchaseList first products.
	
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second total.
	self assertArray: {
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: purchaseList second products.
		
	! !

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:59:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 11:59:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/29/2020 11:59:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/29/2020 11:59:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/29/2020 11:59:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 11:59:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 11:59:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 11:59:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 11:59:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 11:59:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/29/2020 11:59:20'!
PASSED!
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/29/2020 11:59:52'!
createAndCheckoutCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore

	| cartId |
	
	cartId := self createCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore.
	
	^aTusLibrosStore checkout: cartId
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.! !
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 11:59:52' prior: 50909328!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore purchaseList |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	self createAndCheckoutCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore 
				inStore: tusLibrosStore.
	self createAndCheckoutCartFor: testObjectsFactory clientIDYenny with: 1 of: testObjectsFactory itemSellByTheStore 
				inStore: tusLibrosStore.
		
	purchaseList := tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	self assert: 2 equals: purchaseList size.
	
	self assert: 2 * testObjectsFactory itemSellByTheStorePrice equals: purchaseList first total.
	self assertArray: {
		testObjectsFactory itemSellByTheStore.
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: purchaseList first products.
	
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second total.
	self assertArray: {
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: purchaseList second products.
		
	! !
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/29/2020 11:59:52' prior: 50909265!
test07CheckoutCartReturnsTransactionID

	| tusLibrosStore transactionID |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	transactionID := self createAndCheckoutCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore 
				inStore: tusLibrosStore.
		
	self assert: tusLibrosStore salesBook size equals: transactionID.
	self assert: tusLibrosStore salesBook last total equals: testObjectsFactory itemSellByTheStorePrice * 2.! !

!methodRemoval: TusLibrosStoreTest #checkoutCartFor:with:of:inStore: stamp: 'VP 11/29/2020 11:59:52'!
checkoutCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore

	| cartId |
	
	cartId := self createCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore.
	
	^aTusLibrosStore checkout: cartId
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today.!
!TusLibrosStoreTest methodsFor: 'tests - create' stamp: 'VP 11/29/2020 12:00:48' prior: 50909424!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore purchaseList |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	self createAndCheckoutCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore 
				inStore: tusLibrosStore.
	self createAndCheckoutCartFor: testObjectsFactory clientIDYenny with: 1 of: testObjectsFactory itemSellByTheStore 
				inStore: tusLibrosStore.
		
	purchaseList := tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	self assert: 2 equals: purchaseList size.
	
	self assertArray: {
		testObjectsFactory itemSellByTheStore.
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: purchaseList first products.
	self assert: 2 * testObjectsFactory itemSellByTheStorePrice equals: purchaseList first total.
	
	self assertArray: {
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: purchaseList second products.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second total.
		
	! !

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 12:00:51'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/29/2020 12:00:51'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/29/2020 12:00:51'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/29/2020 12:00:51'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/29/2020 12:00:51'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/29/2020 12:00:51'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/29/2020 12:00:51'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/29/2020 12:00:51'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/29/2020 12:00:51'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/29/2020 12:00:51'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/29/2020 12:00:51'!
PASSED!

----SNAPSHOT----(29 November 2020 12:01:02) CuisUniversity-4384.image priorSource: 18399301!

----QUIT----(29 November 2020 12:02:56) CuisUniversity-4384.image priorSource: 18493895!

----STARTUP---- (30 November 2020 18:04:18) as /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/CuisUniversity-4384.image!

!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:07:12'!
test11ListCartAfter30MinutesOfCartInactivityFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	self should: [ tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: 'a wrong password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore invalidPasswordErrorMessage equals: anError messageText.
		].! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:08:27' prior: 50909595!
test11ListCartAfter30MinutesOfCartInactivityFails

	| tusLibrosStore cartId |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	"TODO: Agregar mockeo de fecha"
	
	self should: [ tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: 'a wrong password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore invalidPasswordErrorMessage equals: anError messageText.
		].! !

GregorianDateTime now!

GregorianDateTime now!

GregorianDateTime now!

Object subclass: #DateTimeSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #DateTimeSimulator category: 'TusLibros' stamp: 'VP 11/30/2020 18:13:07'!
Object subclass: #DateTimeSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!DateTimeSimulator methodsFor: 'no messages' stamp: 'VP 11/30/2020 18:13:23'!
now

	! !

!classDefinition: #DateTimeSimulator category: 'TusLibros' stamp: 'VP 11/30/2020 18:14:11'!
Object subclass: #DateTimeSimulator
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!DateTimeSimulator methodsFor: 'datetime' stamp: 'VP 11/30/2020 18:14:10' prior: 50909645!
now

	^now.! !
!DateTimeSimulator methodsFor: 'datetime' stamp: 'VP 11/30/2020 18:14:59'!
changeCurrentDateTimeTo: aNewDateTime

	now := aNewDateTime.! !
!DateTimeSimulator class methodsFor: 'no messages' stamp: 'VP 11/30/2020 18:15:24'!
withDateTime: aDateTime

	^self new initializeWithDateTame: aDateTime.! !
!DateTimeSimulator class methodsFor: 'as yet unclassified' stamp: 'VP 11/30/2020 18:15:32' prior: 50909664!
withDateTime: aDateTime

	^self new initializeWithDateTime: aDateTime.! !
!DateTimeSimulator methodsFor: 'datetime' stamp: 'VP 11/30/2020 18:15:46'!
withDateTime: aDateTime

	now := aDateTime.! !

!classRenamed: #DateTimeSimulator as: #DateTimeProviderSimulator stamp: 'VP 11/30/2020 18:16:56'!
Smalltalk renameClassNamed: #DateTimeSimulator as: #DateTimeProviderSimulator!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:18:29' prior: 50909611!
test11ListCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: GregorianDateTime now.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	"TODO: Agregar mockeo de fecha"
	
	self should: [ tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: 'a wrong password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore invalidPasswordErrorMessage equals: anError messageText.
		].! !
!StoreTestObjectsFactory methodsFor: 'store' stamp: 'VP 11/30/2020 18:19:07'!
createStoreWithAuthenticationSystem: anAuthenticationSystem andDateTimeProvider: aDateTimeProvider
	
	^TusLibrosStore newWithAuthenticationSystem: anAuthenticationSystem withClients: self clientList dateTimeProvider: aDateTimeProvider.! !
!StoreTestObjectsFactory methodsFor: 'store' stamp: 'VP 11/30/2020 18:20:53' prior: 50908481!
createStoreWithAuthenticationSystem: anAuthenticationSystem
	
	^TusLibrosStore newWithAuthenticationSystem: anAuthenticationSystem withClients: self clientList dateTimeProvider: self today.! !
!TusLibrosStore class methodsFor: 'instance creation' stamp: 'VP 11/30/2020 18:21:49'!
newWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList dateTimeProvider: aDateTimeProvider
	
	^self new initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList dateTimeProvider: aDateTimeProvider.! !

!methodRemoval: TusLibrosStore class #newWithAuthenticationSystem:withClients: stamp: 'VP 11/30/2020 18:21:52'!
newWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList
	
	^self new initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList.!

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/30/2020 18:22:15'!
Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem carts bookCatalog lastCartID salesBook clients dateTimeProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/30/2020 18:22:13'!
initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList dateTimeProvider: aDateTimeProvider

	authenticationSystem := anAuthenticationSystem.
	clients := aClientList.
	dateTimeProvider := aDateTimeProvider.
	bookCatalog := self class createStoreCatalog.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.! !

!methodRemoval: TusLibrosStore #initializeNewWithAuthenticationSystem:withClients: stamp: 'VP 11/30/2020 18:22:18'!
initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList

	authenticationSystem := anAuthenticationSystem.
	clients := aClientList.
	bookCatalog := self class createStoreCatalog.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.!
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/30/2020 18:22:45'!
initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList andDateTimeProvider: aDateTimeProvider

	authenticationSystem := anAuthenticationSystem.
	clients := aClientList.
	dateTimeProvider := aDateTimeProvider.
	bookCatalog := self class createStoreCatalog.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.! !
!TusLibrosStore class methodsFor: 'as yet unclassified' stamp: 'VP 11/30/2020 18:22:45' prior: 50909730!
newWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList dateTimeProvider: aDateTimeProvider
	
	^self new initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList andDateTimeProvider: aDateTimeProvider.! !

!methodRemoval: TusLibrosStore #initializeNewWithAuthenticationSystem:withClients:dateTimeProvider: stamp: 'VP 11/30/2020 18:22:45'!
initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList dateTimeProvider: aDateTimeProvider

	authenticationSystem := anAuthenticationSystem.
	clients := aClientList.
	dateTimeProvider := aDateTimeProvider.
	bookCatalog := self class createStoreCatalog.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.!
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/30/2020 18:22:54'!
initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList dateTimeProvider: aDateTimeProvider

	authenticationSystem := anAuthenticationSystem.
	clients := aClientList.
	dateTimeProvider := aDateTimeProvider.
	bookCatalog := self class createStoreCatalog.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.! !

!methodRemoval: TusLibrosStore #initializeNewWithAuthenticationSystem:withClients:dateTimeProvider: stamp: 'VP 11/30/2020 18:23:02'!
initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList dateTimeProvider: aDateTimeProvider

	authenticationSystem := anAuthenticationSystem.
	clients := aClientList.
	dateTimeProvider := aDateTimeProvider.
	bookCatalog := self class createStoreCatalog.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.!
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/30/2020 18:23:09' prior: 50909786!
initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList andDateTimeProvider: aDateTimeProvider

	authenticationSystem := anAuthenticationSystem.
	clients := aClientList.
	dateTimeProvider := aDateTimeProvider.
	bookCatalog := self class createStoreCatalog.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.! !
!StoreTestObjectsFactory methodsFor: 'store' stamp: 'VP 11/30/2020 18:24:08' prior: 50909721!
createStoreWithAuthenticationSystem: anAuthenticationSystem
	
	^TusLibrosStore newWithAuthenticationSystem: anAuthenticationSystem withClients: self clientList dateTimeProvider: (DateTimeProviderSimulator withDateTime: self today).! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:26:05' prior: 50909685!
test11ListCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: GregorianDateTime now.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	(dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + 30 minute)
	"TODO: Agregar mockeo de fecha"
	
	self should: [ tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: 'a wrong password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore invalidPasswordErrorMessage equals: anError messageText.
		].! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:26:42' prior: 50909883!
test11ListCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: GregorianDateTime now.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	(dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + 30 minute).
	"TODO: Agregar mockeo de fecha"
	
	self should: [ tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: 'a wrong password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore invalidPasswordErrorMessage equals: anError messageText.
		].! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:26:46' prior: 50909911!
test11ListCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: GregorianDateTime now.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	(dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + 30 minute).
	
	self should: [ tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: 'a wrong password' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore invalidPasswordErrorMessage equals: anError messageText.
		].! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:27:09' prior: 50909939!
test11ListCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: GregorianDateTime now.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	(dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + 30 minute).
	
	self should: [ tusLibrosStore listCart: cartId ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore invalidPasswordErrorMessage equals: anError messageText.
		].! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:27:21' prior: 50909966!
test11ListCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: GregorianDateTime now.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	(dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + 30 minute).
	
	self should: [ tusLibrosStore listCart: cartId ]
		raise: Error
		withMessageText: TusLibrosStore invalidPasswordErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:28:10' prior: 50909991!
test11ListCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: GregorianDateTime now.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	(dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + 30 minute).
	
	self should: [ tusLibrosStore listCart: cartId ]
		raise: Error
		withMessageText: TusLibrosStore invalidPasswordErrorMessage.! !

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:28:36'!
ERROR!
!DateTimeProviderSimulator methodsFor: 'datetime' stamp: 'VP 11/30/2020 18:28:55'!
initializeWithDateTime: aDateTime

	now := aDateTime.! !

!methodRemoval: DateTimeProviderSimulator #withDateTime: stamp: 'VP 11/30/2020 18:28:55'!
withDateTime: aDateTime

	now := aDateTime.!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 18:28:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 18:28:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 18:28:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 18:28:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 18:28:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 18:28:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 18:28:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 18:28:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 18:28:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 18:28:58'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:28:58'!
ERROR!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:28:58'!
ERROR!

Time now minute!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:32:11' prior: 50910014!
test11ListCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: GregorianDateTime now.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ tusLibrosStore listCart: cartId ]
		raise: Error
		withMessageText: TusLibrosStore invalidPasswordErrorMessage.! !

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:32:12'!
ERROR!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:32:38' prior: 50910094!
test11ListCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ tusLibrosStore listCart: cartId ]
		raise: Error
		withMessageText: TusLibrosStore invalidPasswordErrorMessage.! !

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:32:39'!
FAILURE!

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/30/2020 18:36:20'!
Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem carts bookCatalog lastCartID salesBook clients dateTimeProvider cartLastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 18:36:16' prior: 50906036!
listCart: aCartID 
	
	| cart |
	cart := carts at: aCartID.
	
	((Duration mintues: 30) + (cartLastUsed at: aCartID) > dateTimeProvider now) ifTrue: [ self error: self class expiredCartErrorMessage ].
	
	^cart listItems.! !
!TusLibrosStore class methodsFor: 'error messages -- private' stamp: 'VP 11/30/2020 18:36:39'!
expiredCartErrorMessage
	
	^'El carrito ta espirado ameo, recatate'.! !
!TusLibrosStore class methodsFor: 'error messages -- private' stamp: 'VP 11/30/2020 18:36:59' prior: 50910168!
expiredCartErrorMessage
	
	^'The requested cart has expired, please create a new one'.! !
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 18:37:20' prior: 50910158!
listCart: aCartID 
	
	| cart |
	cart := carts at: aCartID.
	
	((Duration minutes: 30) + (cartLastUsed at: aCartID) > dateTimeProvider now) ifTrue: [ self error: self class expiredCartErrorMessage ].
	
	^cart listItems.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 18:37:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 18:37:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 18:37:22'!
ERROR!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 18:37:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 18:37:22'!
ERROR!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 18:37:22'!
ERROR!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 18:37:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 18:37:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 18:37:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 18:37:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:37:22'!
FAILURE!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 18:37:23'!
ERROR!
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/30/2020 18:38:00' prior: 50909857!
initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList andDateTimeProvider: aDateTimeProvider

	authenticationSystem := anAuthenticationSystem.
	clients := aClientList.
	dateTimeProvider := aDateTimeProvider.
	bookCatalog := self class createStoreCatalog.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.
	! !
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/30/2020 18:39:10' prior: 50910234!
initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList andDateTimeProvider: aDateTimeProvider

	authenticationSystem := anAuthenticationSystem.
	clients := aClientList.
	dateTimeProvider := aDateTimeProvider.
	bookCatalog := self class createStoreCatalog.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.
	cartLastUsed := OrderedCollection new.! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/30/2020 18:40:05' prior: 50908372!
createCartFor: aClientID withPassword: aPassword
	
	self validate: aClientID with: aPassword andDo: [ | cartID |
		carts add: (Cart acceptingItemsOf: bookCatalog).
		cartLastUsed add: dateTimeProvider now.
		
		cartID := carts size.
		(self clientWithID: aClientID) addCart: cartID.
		
		^cartID.
	]! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 18:40:13'!
ERROR!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 18:40:13'!
ERROR!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 18:40:13'!
ERROR!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 18:40:13'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:40:13'!
FAILURE!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 18:40:15'!
ERROR!
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 18:40:38' prior: 50910180!
listCart: aCartID 
	
	| cart |
	cart := carts at: aCartID.
	
	((cartLastUsed at: aCartID) + (Duration minutes: 30) > dateTimeProvider now) ifTrue: [ self error: self class expiredCartErrorMessage ].
	
	^cart listItems.! !

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 18:40:42'!
ERROR!
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 18:41:17' prior: 50910321!
listCart: aCartID 
	
	| cart |
	cart := carts at: aCartID.
	
	((cartLastUsed at: aCartID) + (Duration minutes: 30) < dateTimeProvider now) ifTrue: [ self error: self class expiredCartErrorMessage ].
	
	^cart listItems.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 18:41:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 18:41:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 18:41:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 18:41:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 18:41:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 18:41:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 18:41:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 18:41:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 18:41:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 18:41:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:41:19'!
FAILURE!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:41:19'!
FAILURE!
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 18:41:43' prior: 50910334!
listCart: aCartID 
	
	| cart |
	cart := carts at: aCartID.
	
	((cartLastUsed at: aCartID) + (Duration minutes: 30) <= dateTimeProvider now) ifTrue: [ self error: self class expiredCartErrorMessage ].
	
	^cart listItems.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 18:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 18:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 18:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 18:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 18:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 18:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 18:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 18:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 18:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 18:41:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:41:45'!
FAILURE!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:41:45'!
FAILURE!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:42:06' prior: 50910121!
test11ListCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ tusLibrosStore listCart: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage .! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:42:06' prior: 50910442!
test11ListCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ tusLibrosStore listCart: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:42:07'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 18:42:07'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 18:42:07'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 18:42:07'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 18:42:07'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 18:42:07'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 18:42:07'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 18:42:07'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 18:42:07'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 18:42:07'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 18:42:07'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:42:07'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:43:03'!
test11ListCartAfterLessThan30MinutesOfCartInactivitySucceeds

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ tusLibrosStore listCart: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:43:36' prior: 50910531!
test11ListCartAfterLessThan30MinutesOfCartInactivitySucceeds

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	tusLibrosStore listCart: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	 tusLibrosStore listCart: cartId.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:44:04' prior: 50910554!
test11ListCartAfterLessThan30MinutesOfCartInactivitySucceeds

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	tusLibrosStore listCart: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	tusLibrosStore listCart: cartId.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:45:17'!
test11ListCartOperatingBefore30MinutesResetsInactivityTimer

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	tusLibrosStore listCart: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	tusLibrosStore listCart: cartId.! !

!methodRemoval: TusLibrosStoreTest #test11ListCartAfterLessThan30MinutesOfCartInactivitySucceeds stamp: 'VP 11/30/2020 18:45:23'!
test11ListCartAfterLessThan30MinutesOfCartInactivitySucceeds

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	tusLibrosStore listCart: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	tusLibrosStore listCart: cartId.!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:45:27'!
test12ListCartOperatingBefore30MinutesResetsInactivityTimer

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	tusLibrosStore listCart: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	tusLibrosStore listCart: cartId.! !

!methodRemoval: TusLibrosStoreTest #test11ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 18:45:27'!
test11ListCartOperatingBefore30MinutesResetsInactivityTimer

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	tusLibrosStore listCart: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	tusLibrosStore listCart: cartId.!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:46:27' prior: 50910652!
test12ListCartOperatingBefore30MinutesResetsInactivityTimer

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	self shouldnt: [tusLibrosStore listCart: cartId.] raise: Error. 
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	self shouldnt: [tusLibrosStore listCart: cartId.] raise: Error.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:46:33' prior: 50910702!
test12ListCartOperatingBefore30MinutesResetsInactivityTimer

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	self shouldnt: [tusLibrosStore listCart: cartId ] raise: Error. 
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	self shouldnt: [tusLibrosStore listCart: cartId ] raise: Error.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:47:18' prior: 50910728!
test12ListCartOperatingBefore30MinutesResetsInactivityTimer

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	self shouldnt: [
		tusLibrosStore listCart: cartId.
		dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
		tusLibrosStore listCart: cartId.
	] raise: Error. ! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:47:19' prior: 50910754!
test12ListCartOperatingBefore30MinutesResetsInactivityTimer

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	self shouldnt: [
		tusLibrosStore listCart: cartId.
		dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
		tusLibrosStore listCart: cartId.
	] raise: Error.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:47:25' prior: 50910780!
test12ListCartOperatingBefore30MinutesResetsInactivityTimer

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	self shouldnt: [
		tusLibrosStore listCart: cartId.
		dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
		tusLibrosStore listCart: cartId.
	] raise: Error.! !

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 18:47:26'!
FAILURE!
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 18:48:28' prior: 50910388!
listCart: aCartID 
	
	| cart |
	cart := carts at: aCartID.
	
	((cartLastUsed at: aCartID) + (Duration minutes: 30) <= dateTimeProvider now) ifTrue: [ self error: self class expiredCartErrorMessage ].
	
	cartLastUsed at: aCartID put: dateTimeProvider now.
	
	^cart listItems.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 18:48:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 18:48:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 18:48:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 18:48:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 18:48:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 18:48:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 18:48:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 18:48:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 18:48:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 18:48:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:48:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 18:48:30'!
PASSED!
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 18:49:10'!
verifyCartNotExpired: aCartID

	^ ((cartLastUsed at: aCartID) + (Duration minutes: 30) <= dateTimeProvider now) ifTrue: [ self error: self class expiredCartErrorMessage ]! !
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 18:49:10' prior: 50910836!
listCart: aCartID 
	
	| cart |
	cart := carts at: aCartID.
	
	self verifyCartNotExpired: aCartID.
	
	cartLastUsed at: aCartID put: dateTimeProvider now.
	
	^cart listItems.! !
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 18:49:17'!
assertCartNotExpired: aCartID

	^ ((cartLastUsed at: aCartID) + (Duration minutes: 30) <= dateTimeProvider now) ifTrue: [ self error: self class expiredCartErrorMessage ]! !
!TusLibrosStore methodsFor: 'as yet unclassified' stamp: 'VP 11/30/2020 18:49:17' prior: 50910901!
listCart: aCartID 
	
	| cart |
	cart := carts at: aCartID.
	
	self assertCartNotExpired: aCartID.
	
	cartLastUsed at: aCartID put: dateTimeProvider now.
	
	^cart listItems.! !

!methodRemoval: TusLibrosStore #verifyCartNotExpired: stamp: 'VP 11/30/2020 18:49:17'!
verifyCartNotExpired: aCartID

	^ ((cartLastUsed at: aCartID) + (Duration minutes: 30) <= dateTimeProvider now) ifTrue: [ self error: self class expiredCartErrorMessage ]!
!TusLibrosStore class methodsFor: 'nil' stamp: 'VP 11/30/2020 18:50:44'!
validCartInactivitySpan

	^Duration minutes: 30! !
!TusLibrosStore methodsFor: 'assertions -- private' stamp: 'VP 11/30/2020 18:51:34' prior: 50910909!
assertCartNotExpired: aCartID

	^ ((cartLastUsed at: aCartID) + (self class validCartInactivitySpan) <= dateTimeProvider now) ifTrue: [ self error: self class expiredCartErrorMessage ]! !
!TusLibrosStore methodsFor: 'assertions -- private' stamp: 'VP 11/30/2020 18:51:52'!
expirationTimeForCart: aCartID

	^ (cartLastUsed at: aCartID) + (self class validCartInactivitySpan).! !
!TusLibrosStore methodsFor: 'assertions -- private' stamp: 'VP 11/30/2020 18:52:06' prior: 50910939!
assertCartNotExpired: aCartID

	^ ((self expirationTimeForCart: aCartID) <= dateTimeProvider now) ifTrue: [ self error: self class expiredCartErrorMessage ]! !
!TusLibrosStore methodsFor: 'assertions -- private' stamp: 'VP 11/30/2020 18:52:23'!
cartExpired: aCartID

	^ (self expirationTimeForCart: aCartID) <= dateTimeProvider now! !
!TusLibrosStore methodsFor: 'assertions -- private' stamp: 'VP 11/30/2020 18:52:23' prior: 50910955!
assertCartNotExpired: aCartID

	^ ((self cartExpired: aCartID)) ifTrue: [ self error: self class expiredCartErrorMessage ]! !
!TusLibrosStore methodsFor: 'assertions -- private' stamp: 'VP 11/30/2020 18:52:29' prior: 50910969!
assertCartNotExpired: aCartID

	^ (self cartExpired: aCartID) ifTrue: [ self error: self class expiredCartErrorMessage ]! !
!TusLibrosStore methodsFor: 'assertions -- private' stamp: 'VP 11/30/2020 18:52:31' prior: 50910977!
assertCartNotExpired: aCartID

	^(self cartExpired: aCartID) ifTrue: [ self error: self class expiredCartErrorMessage ]! !
!TusLibrosStore methodsFor: 'assertions -- private' stamp: 'VP 11/30/2020 18:52:33' prior: 50910985!
assertCartNotExpired: aCartID

	^(self cartExpired: aCartID) ifTrue: [ self error: self class expiredCartErrorMessage ].! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:53:11'!
test12AddToCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ tusLibrosStore listCart: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:53:17'!
test13AddToCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ tusLibrosStore listCart: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !

!methodRemoval: TusLibrosStoreTest #test12AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:53:17'!
test12AddToCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ tusLibrosStore listCart: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:54:55' prior: 50911022!
test13AddToCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ tusLibrosStore add: 42 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:54:56'!
FAILURE!
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 18:55:15' prior: 50910918!
listCart: aCartID 
	| cart |
	
	cart := carts at: aCartID.
	
	self assertCartNotExpired: aCartID.
	
	cartLastUsed at: aCartID put: dateTimeProvider now.
	
	^cart listItems.! !
!TusLibrosStore methodsFor: 'add' stamp: 'VP 11/30/2020 18:55:35' prior: 50905616!
add: aQuantity of: aBook to: aCartID 

	| cart |
	
	cart := carts at: aCartID.
	
	self assertCartNotExpired: aCartID.
	
	(carts at: aCartID) add: aQuantity of: aBook.! !
!TusLibrosStore methodsFor: 'add' stamp: 'VP 11/30/2020 18:55:58' prior: 50911105!
add: aQuantity of: aBook to: aCartID
	
	self assertCartNotExpired: aCartID.
	
	(carts at: aCartID) add: aQuantity of: aBook.! !
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 18:56:25' prior: 50911096!
listCart: aCartID 

	self assertCartNotExpired: aCartID.
	
	cartLastUsed at: aCartID put: dateTimeProvider now.
	
	^(carts at: aCartID) listItems.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 18:56:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 18:56:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 18:56:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 18:56:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 18:56:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 18:56:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 18:56:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 18:56:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 18:56:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 18:56:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:56:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 18:56:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:56:29'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:57:05'!
test14AddToCartOperatingBefore30MinutesResetsInactivityTimer

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	self shouldnt: [
		tusLibrosStore listCart: cartId.
		dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
		tusLibrosStore listCart: cartId.
	] raise: Error.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:57:22' prior: 50911176!
test14AddToCartOperatingBefore30MinutesResetsInactivityTimer

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
	
	self shouldnt: [
		tusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: cartId.
		dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
		tusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: cartId.
	] raise: Error.! !

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 18:57:24'!
FAILURE!
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 18:57:49'!
updateLastUsedForCart: aCartID

	^ cartLastUsed at: aCartID put: dateTimeProvider now! !
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 18:57:49' prior: 50911120!
listCart: aCartID 

	self assertCartNotExpired: aCartID.
	
	self updateLastUsedForCart: aCartID.
	
	^(carts at: aCartID) listItems.! !
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 18:57:53' prior: 50911240!
listCart: aCartID 

	self assertCartNotExpired: aCartID.
	self updateLastUsedForCart: aCartID.
	
	^(carts at: aCartID) listItems.! !
!TusLibrosStore methodsFor: 'add' stamp: 'VP 11/30/2020 18:58:47' prior: 50911113!
add: aQuantity of: aBook to: aCartID
	
	self assertCartNotExpired: aCartID.
	self updateLastUsedForCart: aCartID.
	
	(carts at: aCartID) add: aQuantity of: aBook.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 18:58:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 18:58:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 18:58:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 18:58:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 18:58:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 18:58:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 18:58:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 18:58:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 18:58:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 18:58:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:58:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 18:58:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 18:58:49'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 18:58:49'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:59:05'!
test15CheckoutAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ tusLibrosStore add: 42 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:59:14' prior: 50909466!
test07CheckoutCartReturnsTransactionID

	| tusLibrosStore transactionID |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	transactionID := self createAndCheckoutCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore
				inStore: tusLibrosStore.
		
	self assert: tusLibrosStore salesBook size equals: transactionID.
	self assert: tusLibrosStore salesBook last total equals: testObjectsFactory itemSellByTheStorePrice * 2.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:59:29' prior: 50911314!
test15CheckoutAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ self createAndCheckoutCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore
				inStore: tusLibrosStore. ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 18:59:44' prior: 50911361!
test15CheckoutAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ tusLibrosStore add: 42 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:00:24' prior: 50911387!
test15CheckoutAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ 
		tusLibrosStore checkout: cartId
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today
	] raise: Error withMessageText: TusLibrosStore expiredCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:00:25'!
FAILURE!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:00:50' prior: 50911411!
test15CheckoutAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ 
		tusLibrosStore checkout: cartId
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today
	] raise: Error withMessageText: TusLibrosStore expiredCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:00:51'!
FAILURE!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:01:17'!
FAILURE!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:01:40'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:01:40'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:01:40'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:01:40'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:01:40'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:01:40'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:01:40'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:01:40'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:01:40'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:01:40'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:01:40'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:01:40'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:01:40'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:01:40'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:01:40'!
FAILURE!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:01:40'!
FAILURE!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:02:01'!
FAILURE!
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/30/2020 19:03:57' prior: 50908443!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor on: aDate

	| cashier cart clientID total |

	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: dateTimeProvider now
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.! !
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/30/2020 19:04:08'!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor 

	| cashier cart clientID total |

	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: dateTimeProvider now
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.! !
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/30/2020 19:04:08' prior: 50909410!
createAndCheckoutCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore

	| cartId |
	
	cartId := self createCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore.
	
	^aTusLibrosStore checkout: cartId
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		.! !
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/30/2020 19:04:08' prior: 50911441!
test15CheckoutAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ 
		tusLibrosStore checkout: cartId
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		] raise: Error withMessageText: TusLibrosStore expiredCartErrorMessage.! !

!methodRemoval: TusLibrosStore #checkout:charging:throught:on: stamp: 'VP 11/30/2020 19:04:08'!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor on: aDate

	| cashier cart clientID total |

	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: dateTimeProvider now
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:04:15'!
FAILURE!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:06:38' prior: 50911589!
test15CheckoutAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ 
		tusLibrosStore checkout: cartId
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		] raise: Error withMessageText: TusLibrosStore expiredCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:06:38'!
FAILURE!
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/30/2020 19:06:54' prior: 50911558!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor 

	| cashier cart clientID total |

	self assertCartNotExpired: aCartID.

	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: dateTimeProvider now
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:06:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:06:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:06:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:06:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:06:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:06:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:06:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:06:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:06:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:06:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:06:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:06:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:06:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:06:57'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:06:57'!
PASSED!
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 19:08:53'!
assertNotExpired: aCartID andDo: aNonExpiredCartClosure

	self assertCartNotExpired: aCartID.
	self updateLastUsedForCart: aCartID.
	
	aNonExpiredCartClosure value.! !
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 19:09:25' prior: 50911247!
listCart: aCartID 
	
	self assertNotExpired: aCartID andDo: [
		^(carts at: aCartID) listItems.
	].
	
	! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:09:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:09:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:09:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:09:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:09:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:09:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:09:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:09:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:09:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:09:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:09:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:09:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:09:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:09:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:09:26'!
PASSED!
!TusLibrosStore methodsFor: 'add' stamp: 'VP 11/30/2020 19:09:42' prior: 50911254!
add: aQuantity of: aBook to: aCartID
	
	self assertNotExpired: aCartID andDo: [
		(carts at: aCartID) add: aQuantity of: aBook.
	].! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:09:43'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:09:43'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:09:43'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:09:43'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:09:43'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:09:43'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:09:43'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:09:43'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:09:43'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:09:43'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:09:43'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:09:43'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:09:43'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:09:43'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:09:43'!
PASSED!
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/30/2020 19:09:52' prior: 50911674!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor 

	| cashier cart clientID total |

	self assertCartNotExpired: aCartID.

	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: dateTimeProvider now
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.! !
!TusLibrosStore methodsFor: 'assertions -- private' stamp: 'VP 11/30/2020 19:11:03' prior: 50911748!
assertNotExpired: aCartID andDo: aNonExpiredCartClosure

	self assertCartNotExpired: aCartID.
	self updateLastUsedForCart: aCartID.
	
	aNonExpiredCartClosure value.! !
!TusLibrosStore methodsFor: 'assertions -- private' stamp: 'VP 11/30/2020 19:11:31'!
assertNotExpired: aCartID updateLastUseAndDo: aNonExpiredCartClosure

	self assertCartNotExpired: aCartID.
	self updateLastUsedForCart: aCartID.
	
	aNonExpiredCartClosure value.! !
!TusLibrosStore methodsFor: 'as yet unclassified' stamp: 'VP 11/30/2020 19:11:31' prior: 50911756!
listCart: aCartID 
	
	self assertNotExpired: aCartID updateLastUseAndDo: [
		^(carts at: aCartID) listItems.
	].
	
	! !
!TusLibrosStore methodsFor: 'as yet unclassified' stamp: 'VP 11/30/2020 19:11:31' prior: 50911819!
add: aQuantity of: aBook to: aCartID
	
	self assertNotExpired: aCartID updateLastUseAndDo: [
		(carts at: aCartID) add: aQuantity of: aBook.
	].! !

!methodRemoval: TusLibrosStore #assertNotExpired:andDo: stamp: 'VP 11/30/2020 19:11:31'!
assertNotExpired: aCartID andDo: aNonExpiredCartClosure

	self assertCartNotExpired: aCartID.
	self updateLastUsedForCart: aCartID.
	
	aNonExpiredCartClosure value.!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:11:41'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:11:41'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:11:41'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:11:41'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:11:41'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:11:41'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:11:41'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:11:41'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:11:41'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:11:41'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:11:41'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:11:41'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:11:41'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:11:41'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:11:41'!
PASSED!
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 19:12:13' prior: 50911919!
listCart: aCartID 
	
	self assertNotExpired: aCartID updateLastUseAndDo: [
		^(carts at: aCartID) listItems.
	].! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:13:30'!
test16AddToInexistentCartFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ 
		tusLibrosStore checkout: cartId
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		] raise: Error withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:14:21' prior: 50912004!
test16AddToInexistentCartFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
		
	self should: [ tusLibrosStore add: 42 of: testObjectsFactory itemSellByTheStore to: 1 ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:14:25'!
FAILURE!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:14:40' prior: 50912036!
test16AddToInexistentCartFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
		
	self should: [ tusLibrosStore add: 42 of: testObjectsFactory itemSellByTheStore to: 1 ]
		raise: Error
		withMessageText: TusLibrosStore nonExistingCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:14:44'!
ERROR!
!TusLibrosStore class methodsFor: 'error messages -- private' stamp: 'VP 11/30/2020 19:14:55'!
nonExistingCartErrorMessage
	self shouldBeImplemented.! !
!TusLibrosStore class methodsFor: 'error messages -- private' stamp: 'VP 11/30/2020 19:15:11' prior: 50912068!
nonExistingCartErrorMessage
	
	^'The cart you are trying to operate in does not exist'.! !

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:15:12'!
FAILURE!
!TusLibrosStore methodsFor: 'add' stamp: 'VP 11/30/2020 19:16:17' prior: 50911926!
add: aQuantity of: aBook to: aCartID
	
	aCartID > carts size ifTrue: [ self error: self class nonExistingCartErrorMessage ].
	
	self assertNotExpired: aCartID updateLastUseAndDo: [
		(carts at: aCartID) add: aQuantity of: aBook.
	].! !
!TusLibrosStore methodsFor: 'add' stamp: 'VP 11/30/2020 19:16:30'!
assertCartExists: aCartID

	^ aCartID > carts size ifTrue: [ self error: self class nonExistingCartErrorMessage ]! !
!TusLibrosStore methodsFor: 'add' stamp: 'VP 11/30/2020 19:16:30' prior: 50912083!
add: aQuantity of: aBook to: aCartID
	
	self assertCartExists: aCartID.
	
	self assertNotExpired: aCartID updateLastUseAndDo: [
		(carts at: aCartID) add: aQuantity of: aBook.
	].! !
!TusLibrosStore methodsFor: 'add' stamp: 'VP 11/30/2020 19:16:34' prior: 50912100!
add: aQuantity of: aBook to: aCartID
	
	self assertCartExists: aCartID.
	self assertNotExpired: aCartID updateLastUseAndDo: [
		(carts at: aCartID) add: aQuantity of: aBook.
	].! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:16:46'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:16:46'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:16:46'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:16:46'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:16:46'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:16:46'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:16:46'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:16:46'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:16:46'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:16:46'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:16:46'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:16:46'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:16:46'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:16:46'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:16:46'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:16:46'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:17:23'!
test16ListInexistentCartFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
		
	self should: [ tusLibrosStore listCart: 1 ]
		raise: Error
		withMessageText: TusLibrosStore nonExistingCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test16ListInexistentCartFails stamp: 'VP 11/30/2020 19:17:24'!
FAILURE!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:17:31'!
test17ListInexistentCartFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
		
	self should: [ tusLibrosStore listCart: 1 ]
		raise: Error
		withMessageText: TusLibrosStore nonExistingCartErrorMessage.! !

!methodRemoval: TusLibrosStoreTest #test16ListInexistentCartFails stamp: 'VP 11/30/2020 19:17:31'!
test16ListInexistentCartFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
		
	self should: [ tusLibrosStore listCart: 1 ]
		raise: Error
		withMessageText: TusLibrosStore nonExistingCartErrorMessage.!
!TusLibrosStore methodsFor: 'add' stamp: 'VP 11/30/2020 19:17:44' prior: 50912109!
add: aQuantity of: aBook to: aCartID
	
	self assertNotExpired: aCartID updateLastUseAndDo: [
		(carts at: aCartID) add: aQuantity of: aBook.
	].! !
!TusLibrosStore methodsFor: 'assertions -- private' stamp: 'VP 11/30/2020 19:17:58' prior: 50911910!
assertNotExpired: aCartID updateLastUseAndDo: aNonExpiredCartClosure

	self assertCartExists: aCartID.
	self assertCartNotExpired: aCartID.
	self updateLastUsedForCart: aCartID.
	
	aNonExpiredCartClosure value.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 19:18:14'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:18:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:18:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:18:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:18:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:18:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:18:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:18:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:18:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:18:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 19:18:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:18:22'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 19:18:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 19:18:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 19:18:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 19:18:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 19:18:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:18:33'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:33'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:18:33'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:18:33'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:18:33'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:18:33'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:18:33'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:18:33'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:18:33'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:18:33'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:33'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:33'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:33'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:18:33'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:18:33'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:18:33'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 19:18:33'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:18:59' prior: 50908496!
test01CreateCartWithNonExistingClientIDFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	self should: [ tusLibrosStore createCartFor: '' withPassword: '123456' ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: TusLibrosStore nonExistingClientErrorMessage equals: anError messageText.
		].! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:19:23'!
test18ListInexistentCartFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
		
	self should: [ tusLibrosStore listCart: 1 ]
		raise: Error
		withMessageText: TusLibrosStore nonExistingCartErrorMessage.! !

!methodRemoval: TusLibrosStoreTest #test18ListInexistentCartFails stamp: 'VP 11/30/2020 19:19:27'!
test18ListInexistentCartFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
		
	self should: [ tusLibrosStore listCart: 1 ]
		raise: Error
		withMessageText: TusLibrosStore nonExistingCartErrorMessage.!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:21:29'!
test18CheckoutInexistentCartFails

	| tusLibrosStore cartId |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	self should: [ 
		tusLibrosStore checkout: cartId
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		] raise: Error withMessageText: TusLibrosStore nonExistingCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:21:36' prior: 50912957!
test18CheckoutInexistentCartFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	self should: [ 
		tusLibrosStore checkout: 1
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		] raise: Error withMessageText: TusLibrosStore nonExistingCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 19:21:37'!
FAILURE!
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/30/2020 19:21:53' prior: 50911883!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor 

	| cashier cart clientID total |

	self assertCartExists: aCartID.
	self assertCartNotExpired: aCartID.

	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: dateTimeProvider now
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 19:21:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 19:21:59'!
PASSED!
!TusLibrosStore methodsFor: 'assertions -- private' stamp: 'VP 11/30/2020 19:22:36'!
assertCartExistsAndIsNotExpired: aCartID

	self assertCartExists: aCartID.
	self assertCartNotExpired: aCartID.! !
!TusLibrosStore methodsFor: 'assertions -- private' stamp: 'VP 11/30/2020 19:22:48' prior: 50912222!
assertNotExpired: aCartID updateLastUseAndDo: aNonExpiredCartClosure

	self assertCartExistsAndIsNotExpired: aCartID.
	self updateLastUsedForCart: aCartID.
	
	aNonExpiredCartClosure value.! !
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/30/2020 19:23:01' prior: 50912988!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor 

	| cashier cart clientID total |

	self assertCartExistsAndIsNotExpired: aCartID.

	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: dateTimeProvider now
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 19:23:02'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 19:23:02'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:25:41' prior: 50911638!
test15CheckoutAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ 
		tusLibrosStore checkout: cartId
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		] raise: Error withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:27:31' prior: 50912971!
test18CheckoutInexistentCartFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	self should: [ 
		tusLibrosStore checkout: 1
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		] raise: Error withMessageText: TusLibrosStore nonExistingCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 19:30:49' prior: 50911576!
createAndCheckoutCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore

	| cartId |
	
	cartId := self createCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore.
	
	^aTusLibrosStore checkout: cartId
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:35:15' prior: 50910465!
test11ListCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (TusLibrosStore validCartInactivitySpan).
	
	self should: [ tusLibrosStore listCart: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:35:50' prior: 50913233!
test11ListCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (TusLibrosStore validCartInactivitySpan).
	
	self should: [ tusLibrosStore listCart: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 19:41:17' prior: 50911068!
test13AddToCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (TusLibrosStore validCartInactivitySpan).
	
	self should: [ tusLibrosStore add: 42 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/30/2020 19:45:35'!
checkout: aCartID chargingCard: aCreditCard throught: aMerchantProcessor 

	| cashier cart clientID total |

	self assertCartExistsAndIsNotExpired: aCartID.

	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: dateTimeProvider now
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.! !

!methodRemoval: TusLibrosStore #checkout:chargingCard:throught: stamp: 'VP 11/30/2020 19:45:37'!
checkout: aCartID chargingCard: aCreditCard throught: aMerchantProcessor 

	| cashier cart clientID total |

	self assertCartExistsAndIsNotExpired: aCartID.

	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: dateTimeProvider now
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.!

----SNAPSHOT----(30 November 2020 19:45:46) CuisUniversity-4384.image priorSource: 18493989!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:12:27' prior: 50913174!
test15CheckoutAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ 
		tusLibrosStore checkout: cartId
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		] raise: Error withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'setUp/tearDown' stamp: 'VP 11/30/2020 20:12:34' prior: 50905429 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	
	"No testeamos el debitBehavior ac�, porque no es responsabilidad del Store, sino del Cashier"
	debitBehavior := [ :anAmount :aCreditCard | ].! !
!TusLibrosStoreTest methodsFor: 'setUp/tearDown' stamp: 'VP 11/30/2020 20:12:53' prior: 50913375 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.! !
!TusLibrosStoreTest methodsFor: 'merchant processor protocol' stamp: 'VP 11/30/2020 20:12:59' prior: 50906281!
debit: anAmount from: aCreditCard ! !
!TusLibrosStoreTest methodsFor: 'merchant processor protocol' stamp: 'VP 11/30/2020 20:13:00' prior: 50913392!
debit: anAmount from: aCreditCard! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:13:03'!
PASSED!

TestCase subclass: #TusLibrosStoreTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosStoreTest category: 'TusLibros' stamp: 'VP 11/30/2020 20:13:20'!
TestCase subclass: #TusLibrosStoreTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:13:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 20:13:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:13:26'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:13:42' prior: 50911338!
test07CheckoutCartReturnsTransactionID

	| tusLibrosStore transactionID |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	transactionID := self createAndCheckoutCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore
				inStore: tusLibrosStore.
		
	self assert: tusLibrosStore salesBook size equals: transactionID.
	self assert: tusLibrosStore salesBook last total equals: testObjectsFactory itemSellByTheStorePrice * 2.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:13:46' prior: 50909503!
test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient

	| tusLibrosStore purchaseList |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	self createAndCheckoutCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore 
				inStore: tusLibrosStore.
	self createAndCheckoutCartFor: testObjectsFactory clientIDYenny with: 1 of: testObjectsFactory itemSellByTheStore 
				inStore: tusLibrosStore.
		
	purchaseList := tusLibrosStore listPurchasesFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	self assert: 2 equals: purchaseList size.
	
	self assertArray: {
		testObjectsFactory itemSellByTheStore.
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: purchaseList first products.
	self assert: 2 * testObjectsFactory itemSellByTheStorePrice equals: purchaseList first total.
	
	self assertArray: {
		testObjectsFactory itemSellByTheStore.
	} isEquivalentTo: purchaseList second products.
	self assert: testObjectsFactory itemSellByTheStorePrice equals: purchaseList second total.
		
	! !

!methodRemoval: TusLibrosStoreTest #test04CreateAlreadyExistingCartFails stamp: 'VP 11/30/2020 20:14:08'!
test04CreateAlreadyExistingCartFails

	"MAYBE TODO
	| tusLibrosStore cartId |
	
	tusLibrosStore := TusLibrosStore newWithAuthenticationSystem: self withClients: testObjectsFactory clientList.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientID withPassword: '1234 password'.
	
	self assert: (tusLibrosStore listCart: cartId) isEmpty."!

Object subclass: #CreditCard
	instanceVariableNames: 'number owner expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'VP 11/30/2020 20:16:47'!
Object subclass: #CreditCard
	instanceVariableNames: 'number owner expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #CreditCard
	instanceVariableNames: 'number expiration owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'VP 11/30/2020 20:16:51'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expiration owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'VP 11/30/2020 20:17:22'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/30/2020 20:18:27'!
checkout: aCartID chargingCardWithNumber: aCreditCardNumber andExpirationDate: aCreditCardExpirationDate andOwner: aCreditCardOwner throught: aMerchantProcessor 

	| cashier cart clientID total |

	self assertCartExistsAndIsNotExpired: aCartID.

	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: (CreditCard expiringOn: aCreditCardExpirationDate)
		 throught: aMerchantProcessor
		 on: dateTimeProvider now
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.! !
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/30/2020 20:19:25' prior: 50913718!
checkout: aCartID chargingCardWithNumber: aCreditCardNumber andExpirationDate: aCreditCardExpirationDate andOwner: aCreditCardOwner throught: aMerchantProcessor 

	| cashier cart clientID total |

	self assertCartExistsAndIsNotExpired: aCartID.

	"NOTA: Estamos usando la soluci�n de la iteraci�n 2 de la c�tedra, donde la CreditCard no almacena ni n�mero ni owner (suponemos porque el MerchantProcessorSimulator no lo usa y no hubo necesidad)"
	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: (CreditCard expiringOn: aCreditCardExpirationDate)
		 throught: aMerchantProcessor
		 on: dateTimeProvider now
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.! !

!methodRemoval: TusLibrosStore #checkout:charging:throught: stamp: 'VP 11/30/2020 20:19:32'!
checkout: aCartID charging: aCreditCard throught: aMerchantProcessor 

	| cashier cart clientID total |

	self assertCartExistsAndIsNotExpired: aCartID.

	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: aCreditCard
		 throught: aMerchantProcessor
		 on: dateTimeProvider now
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'VP 11/30/2020 20:21:04'!
notExpiredCreditCardDate

	^ Month month: today monthIndex year: today yearNumber + 1! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'VP 11/30/2020 20:21:04' prior: 50904971!
notExpiredCreditCard
	
	^CreditCard expiringOn: (self notExpiredCreditCardDate)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'VP 11/30/2020 20:21:08' prior: 50913794!
notExpiredCreditCard
	
	^CreditCard expiringOn: self notExpiredCreditCardDate! !
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 20:21:34' prior: 50913220!
createAndCheckoutCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore

	| cartId |
	
	cartId := self createCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore.
	
	^aTusLibrosStore checkout: cartId
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:22:33' prior: 50913346!
test15CheckoutAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ 
		tusLibrosStore checkout: cartId
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self.
		] raise: Error withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:22:35' prior: 50913821!
test15CheckoutAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 30).
	
	self should: [ 
		tusLibrosStore checkout: cartId
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self.
	] raise: Error withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:22:59' prior: 50913206!
test18CheckoutInexistentCartFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	self should: [ 
		tusLibrosStore checkout: 1
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self.
	] raise: Error withMessageText: TusLibrosStore nonExistingCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 20:23:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:23:00'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:23:51' prior: 50910806!
test12ListCartOperatingBefore30MinutesResetsInactivityTimer

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (TusLibrosStore validCartInactivitySpan - (Duration minutes: 1)).
	
	self shouldnt: [
		tusLibrosStore listCart: cartId.
		dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
		tusLibrosStore listCart: cartId.
	] raise: Error.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:24:26'!
limitValidCartLife

	^ TusLibrosStore validCartInactivitySpan - (Duration minutes: 1)! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:24:26' prior: 50913963!
test12ListCartOperatingBefore30MinutesResetsInactivityTimer

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (self limitValidCartLife).
	
	self shouldnt: [
		tusLibrosStore listCart: cartId.
		dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
		tusLibrosStore listCart: cartId.
	] raise: Error.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:24:30' prior: 50913995!
test12ListCartOperatingBefore30MinutesResetsInactivityTimer

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + self limitValidCartLife.
	
	self shouldnt: [
		tusLibrosStore listCart: cartId.
		dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + (Duration minutes: 29).
		tusLibrosStore listCart: cartId.
	] raise: Error.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:24:36' prior: 50914021!
test12ListCartOperatingBefore30MinutesResetsInactivityTimer

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + self limitValidCartLife.
	
	self shouldnt: [
		tusLibrosStore listCart: cartId.
		dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + self limitValidCartLife.
		tusLibrosStore listCart: cartId.
	] raise: Error.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:24:45' prior: 50913281!
test13AddToCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosStore validCartInactivitySpan.
	
	self should: [ tusLibrosStore add: 42 of: testObjectsFactory itemSellByTheStore to: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:24:50' prior: 50913257!
test11ListCartAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosStore validCartInactivitySpan.
	
	self should: [ tusLibrosStore listCart: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:24:58' prior: 50911202!
test14AddToCartOperatingBefore30MinutesResetsInactivityTimer

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + self limitValidCartLife.
	
	self shouldnt: [
		tusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: cartId.
		dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + self limitValidCartLife.
		tusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: cartId.
	] raise: Error.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:25:04' prior: 50913851!
test15CheckoutAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + self limitValidCartLife.
	
	self should: [ 
		tusLibrosStore checkout: cartId
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self.
	] raise: Error withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:25:06' prior: 50914149!
test15CheckoutAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + self limitValidCartLife.
	
	self should: [ 
		tusLibrosStore checkout: cartId
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self.
	] raise: Error withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:25:15' prior: 50914179!
test15CheckoutAfter30MinutesOfCartInactivityFails

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	tusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosStore validCartInactivitySpan.
	
	self should: [ 
		tusLibrosStore checkout: cartId
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self.
	] raise: Error withMessageText: TusLibrosStore expiredCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 20:25:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:25:16'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:27:23'!
assertCartActionFailsAfter30MinutesOfCartInactivity: aBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosStore validCartInactivitySpan.
	
	self should: aBlock
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:28:00' prior: 50914305!
assertCartActionFailsAfter30MinutesOfCartInactivity: aCartActionBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosStore validCartInactivitySpan.
	
	self should: aCartActionBlock
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:28:18' prior: 50914328!
assertCartActionFailsAfter30MinutesOfCartInactivity: aCartActionBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosStore validCartInactivitySpan.
	
	self should: [ aCartActionBlock value: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:29:15' prior: 50914098!
test11ListCartAfter30MinutesOfCartInactivityFails

	self assertCartActionFailsAfter30MinutesOfCartInactivity: [ :aTusLibrosStore :aCartId | 
		aTusLibrosStore listCart: aCartId 
	].! !

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:29:16'!
FAILURE!
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 20:29:34' prior: 50914352!
assertCartActionFailsAfter30MinutesOfCartInactivity: aCartActionBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosStore validCartInactivitySpan.
	
	self should: [ aCartActionBlock value: tusLibrosStore value: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 20:29:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 20:29:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:29:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 20:29:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:29:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 20:29:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 20:29:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 20:29:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 20:29:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:29:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:29:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:29:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:29:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:29:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 20:29:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 20:29:36'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:29:36'!
PASSED!
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 20:29:56' prior: 50914389!
assertCartActionFailsAfter30MinutesOfCartInactivity: aCartActionBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosStore validCartInactivitySpan.
	
	self should: [ aCartActionBlock value: tusLibrosStore value: cartId value: dateTimeProvider ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:30:07' prior: 50914376!
test11ListCartAfter30MinutesOfCartInactivityFails

	self assertCartActionFailsAfter30MinutesOfCartInactivity: [ :aTusLibrosStore :aCartId :aDateTimeProvider | 
		aTusLibrosStore listCart: aCartId 
	].! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:30:12' prior: 50914502!
test11ListCartAfter30MinutesOfCartInactivityFails

	self assertCartActionFailsAfter30MinutesOfCartInactivity: [ :aTusLibrosStore :aCartId :aDateTimeProvider |
		aTusLibrosStore listCart: aCartId 
	].! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:30:54' prior: 50914073!
test13AddToCartAfter30MinutesOfCartInactivityFails

	self assertCartActionFailsAfter30MinutesOfCartInactivity: [ :aTusLibrosStore :aCartId :aDateTimeProvider |
		aTusLibrosStore add: 42 of: testObjectsFactory itemSellByTheStore to: aCartId 
	]! !

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 20:30:55'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:30:55'!
PASSED!
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 20:32:43'!
assertCartSetUpWith: aSetUpClosure actionFailsAfter30MinutesOfCartInactivity: aCartActionBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	aSetUpClosure value.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosStore validCartInactivitySpan.
	
	self should: [ aCartActionBlock value: tusLibrosStore value: cartId value: dateTimeProvider ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 20:33:07' prior: 50914599!
assertCartSetUpWith: aSetUpClosure actionFailsAfter30MinutesOfCartInactivity: aCartActionBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	aSetUpClosure value: tusLibrosStore value: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosStore validCartInactivitySpan.
	
	self should: [ aCartActionBlock value: tusLibrosStore value: cartId value: dateTimeProvider ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 20:33:10' prior: 50914626!
assertCartSetUpWith: aSetUpClosure actionFailsAfter30MinutesOfCartInactivity: aCartActionBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	aSetUpClosure value: tusLibrosStore value: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosStore validCartInactivitySpan.
	
	self should: [ aCartActionBlock value: tusLibrosStore value: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 20:33:37' prior: 50914476!
assertCartActionFailsAfter30MinutesOfCartInactivity: aCartActionBlock

	self assertCartSetUpWith: [] actionFailsAfter30MinutesOfCartInactivity: aCartActionBlock.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 20:33:38'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 20:33:38'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:33:38'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 20:33:38'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:33:38'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 20:33:38'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 20:33:38'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 20:33:38'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 20:33:38'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:33:38'!
ERROR!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:33:38'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:33:38'!
ERROR!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:33:38'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:33:38'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 20:33:38'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 20:33:38'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:33:38'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:33:41'!
ERROR!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:33:50' prior: 50914512!
test11ListCartAfter30MinutesOfCartInactivityFails

	self assertCartActionFailsAfter30MinutesOfCartInactivity: [ :aTusLibrosStore :aCartId |
		aTusLibrosStore listCart: aCartId 
	].! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:33:53' prior: 50914522!
test13AddToCartAfter30MinutesOfCartInactivityFails

	self assertCartActionFailsAfter30MinutesOfCartInactivity: [ :aTusLibrosStore :aCartId |
		aTusLibrosStore add: 42 of: testObjectsFactory itemSellByTheStore to: aCartId 
	]! !

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:33:54'!
ERROR!
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 20:34:42' prior: 50914681!
assertCartActionFailsAfter30MinutesOfCartInactivity: aCartActionBlock

	self assertCartSetUpWith: [ :aTusLibrosStore :aCartId ] actionFailsAfter30MinutesOfCartInactivity: aCartActionBlock.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 20:34:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 20:34:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:34:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 20:34:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:34:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 20:34:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 20:34:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 20:34:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 20:34:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:34:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:34:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:34:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:34:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:34:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 20:34:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 20:34:42'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:34:42'!
PASSED!
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 20:34:44' prior: 50914779!
assertCartActionFailsAfter30MinutesOfCartInactivity: aCartActionBlock

	self assertCartSetUpWith: [ :aTusLibrosStore :aCartId | ] actionFailsAfter30MinutesOfCartInactivity: aCartActionBlock.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 20:34:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 20:34:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:34:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 20:34:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:34:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 20:34:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 20:34:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 20:34:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 20:34:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:34:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:34:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:34:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:34:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:34:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 20:34:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 20:34:45'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:34:45'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:36:07' prior: 50914209!
test15CheckoutAfter30MinutesOfCartInactivityFails

	self assertCartSetUpWith: [ :aTusLibrosStore :aCartId |
		aTusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: aCartId.
	] actionFailsAfter30MinutesOfCartInactivity: [ :aTusLibrosStore :aCartId  |
		aTusLibrosStore checkout: aCartId
			chargingCardWithNumber: 1
			andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
			andOwner: 'Jos� Yenny'
			throught: self.
	].! !

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 20:36:08'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:36:08'!
PASSED!
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 20:36:56'!
assertCartWithExtraSetUp: aSetUpClosure actionFailsAfter30MinutesOfCartInactivity: aCartActionBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	aSetUpClosure value: tusLibrosStore value: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosStore validCartInactivitySpan.
	
	self should: [ aCartActionBlock value: tusLibrosStore value: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/30/2020 20:36:56' prior: 50914923!
test15CheckoutAfter30MinutesOfCartInactivityFails

	self assertCartWithExtraSetUp: [ :aTusLibrosStore :aCartId |
		aTusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: aCartId.
	] actionFailsAfter30MinutesOfCartInactivity: [ :aTusLibrosStore :aCartId  |
		aTusLibrosStore checkout: aCartId
			chargingCardWithNumber: 1
			andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
			andOwner: 'Jos� Yenny'
			throught: self.
	].! !
!TusLibrosStoreTest methodsFor: 'as yet unclassified' stamp: 'VP 11/30/2020 20:36:56' prior: 50914851!
assertCartActionFailsAfter30MinutesOfCartInactivity: aCartActionBlock

	self assertCartWithExtraSetUp: [ :aTusLibrosStore :aCartId | ] actionFailsAfter30MinutesOfCartInactivity: aCartActionBlock.! !

!methodRemoval: TusLibrosStoreTest #assertCartSetUpWith:actionFailsAfter30MinutesOfCartInactivity: stamp: 'VP 11/30/2020 20:36:56'!
assertCartSetUpWith: aSetUpClosure actionFailsAfter30MinutesOfCartInactivity: aCartActionBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	aSetUpClosure value: tusLibrosStore value: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosStore validCartInactivitySpan.
	
	self should: [ aCartActionBlock value: tusLibrosStore value: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.!
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 20:38:02'!
assertCartWithExtraSetUp: aSetUpClosure actionSucceedsAfter29MinutesOfCartInactivity: aCartActionBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	aSetUpClosure value: tusLibrosStore value: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosStore validCartInactivitySpan.
	
	self should: [ aCartActionBlock value: tusLibrosStore value: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 20:38:35'!
assertCartActionSucceedsAfter29MinutesOfCartInactivity: aCartActionBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosStore validCartInactivitySpan.
	
	self should: [ aCartActionBlock value: tusLibrosStore value: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !

!methodRemoval: TusLibrosStoreTest #assertCartWithExtraSetUp:actionSucceedsAfter29MinutesOfCartInactivity: stamp: 'VP 11/30/2020 20:38:42'!
assertCartWithExtraSetUp: aSetUpClosure actionSucceedsAfter29MinutesOfCartInactivity: aCartActionBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	aSetUpClosure value: tusLibrosStore value: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosStore validCartInactivitySpan.
	
	self should: [ aCartActionBlock value: tusLibrosStore value: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.!
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 20:40:11' prior: 50915116!
assertCartActionSucceedsAfter29MinutesOfCartInactivity: aCartActionBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + self limitValidCartLife.
	
	self shouldnt: [ aCartActionBlock value: tusLibrosStore value: cartId ] raise: Error.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:42:36' prior: 50914121!
test14AddToCartOperatingBefore30MinutesResetsInactivityTimer

	self assertCartActionSucceedsAfter29MinutesOfCartInactivity: [ :aTusLibrosStore :aCartId :aDateTimeProvider |
		aTusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: aCartId.
		aDateTimeProvider changeCurrentDateTimeTo: aDateTimeProvider now + self limitValidCartLife.
		aTusLibrosStore add: 21 of: testObjectsFactory itemSellByTheStore to: aCartId.
	].! !

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:42:37'!
FAILURE!
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 20:43:09' prior: 50915169!
assertCartActionSucceedsAfter29MinutesOfCartInactivity: aCartActionBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + self limitValidCartLife.
	
	self shouldnt: [ aCartActionBlock value: tusLibrosStore value: cartId value: dateTimeProvider ] raise: Error.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 20:43:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 20:43:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:43:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 20:43:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:43:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 20:43:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 20:43:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 20:43:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 20:43:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:43:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:43:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:43:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:43:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:43:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 20:43:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 20:43:10'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:43:10'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:43:53' prior: 50914047!
test12ListCartOperatingBefore30MinutesResetsInactivityTimer

	self assertCartActionSucceedsAfter29MinutesOfCartInactivity: [ :aTusLibrosStore :aCartId :aDateTimeProvider |
		aTusLibrosStore listCart: aCartId.
		aDateTimeProvider changeCurrentDateTimeTo: aDateTimeProvider now + self limitValidCartLife.
		aTusLibrosStore listCart: aCartId.
	].! !

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:43:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:44:30'!
PASSED!

----SNAPSHOT----(30 November 2020 20:44:33) CuisUniversity-4384.image priorSource: 18614125!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:46:06'!
test19DoubleCheckoutFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	tusLibrosStore checkout: 1
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self.
	
	self should: [ 
		tusLibrosStore checkout: 1
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self.
	] raise: Error withMessageText: TusLibrosStore nonExistingCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:48:15' prior: 50915445!
test19DoubleCheckoutFails

	| tusLibrosStore cartId |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId := self createCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore
				inStore: tusLibrosStore.
	
	self should: [ 
		tusLibrosStore checkout: cartId
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self.
	] raise: Error withMessageText: TusLibrosStore nonExistingCartErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 20:48:37' prior: 50915466!
test19DoubleCheckoutFails

	| tusLibrosStore cartId |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId := self createCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore
				inStore: tusLibrosStore.
	
	self should: [ 
		tusLibrosStore checkout: cartId
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self.
	] raise: Error withMessageText: TusLibrosStore cantCheckoutCartTwiceErrorMessage.! !

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 20:48:39'!
ERROR!
!TusLibrosStore class methodsFor: 'error messages -- private' stamp: 'VP 11/30/2020 20:48:48'!
cantCheckoutCartTwiceErrorMessage
	self shouldBeImplemented.! !
!TusLibrosStore class methodsFor: 'error messages -- private' stamp: 'VP 11/30/2020 20:49:01' prior: 50915511!
cantCheckoutCartTwiceErrorMessage
	
	^'The given cart has already been checked out'.! !

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 20:49:02'!
FAILURE!

Object subclass: #TusLibrosCartManager
	instanceVariableNames: 'carts cartLastUsed checkedOutCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosCartManager category: 'TusLibros' stamp: 'VP 11/30/2020 20:52:27'!
Object subclass: #TusLibrosCartManager
	instanceVariableNames: 'carts cartLastUsed checkedOutCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosCartManager methodsFor: 'no messages' stamp: 'VP 11/30/2020 20:52:32' overrides: 16896425!
initialize

	! !
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/30/2020 20:52:48' prior: 50910249!
initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList andDateTimeProvider: aDateTimeProvider

	authenticationSystem := anAuthenticationSystem.
	clients := aClientList.
	dateTimeProvider := aDateTimeProvider.
	bookCatalog := self class createStoreCatalog.
	
	
	salesBook := OrderedCollection new.! !

Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem carts bookCatalog lastCartID salesBook clients dateTimeProvider cartLastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/30/2020 20:52:57'!
Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem carts bookCatalog lastCartID salesBook clients dateTimeProvider cartLastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem cartManager carts bookCatalog lastCartID salesBook clients dateTimeProvider cartLastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/30/2020 20:53:03'!
Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem cartManager carts bookCatalog lastCartID salesBook clients dateTimeProvider cartLastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/30/2020 20:53:14' prior: 50915544!
initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList andDateTimeProvider: aDateTimeProvider

	authenticationSystem := anAuthenticationSystem.
	clients := aClientList.
	dateTimeProvider := aDateTimeProvider.
	bookCatalog := self class createStoreCatalog.
	
	cartManager := TusLibrosCartManager new.
	salesBook := OrderedCollection new.! !
!TusLibrosCartManager methodsFor: 'as yet unclassified' stamp: 'VP 11/30/2020 20:53:27' prior: 50915540 overrides: 16896425!
initialize

	carts := OrderedCollection new.
	cartLastUsed := OrderedCollection new.
	checkedOutCarts := OrderedCollection new.! !

!classDefinition: #TusLibrosCartManager category: 'TusLibros' stamp: 'VP 11/30/2020 20:54:49'!
Object subclass: #TusLibrosCartManager
	instanceVariableNames: 'carts cartLastUsed checkedOutCarts dateTimeProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosCartManager methodsFor: 'initialization' stamp: 'VP 11/30/2020 20:54:48'!
initializeWith: aDateTimeProvider

	carts := OrderedCollection new.
	cartLastUsed := OrderedCollection new.
	checkedOutCarts := OrderedCollection new.
	dateTimeProvider := aDateTimeProvider.! !

!methodRemoval: TusLibrosCartManager #initialize stamp: 'VP 11/30/2020 20:54:51'!
initialize

	carts := OrderedCollection new.
	cartLastUsed := OrderedCollection new.
	checkedOutCarts := OrderedCollection new.!
!TusLibrosCartManager methodsFor: 'initialization' stamp: 'VP 11/30/2020 20:55:01'!
cartExpired: aCartID

	^ (self expirationTimeForCart: aCartID) <= dateTimeProvider now.! !
!TusLibrosCartManager methodsFor: 'initialization' stamp: 'VP 11/30/2020 20:55:22'!
expirationTimeForCart: aCartID

	^ (cartLastUsed at: aCartID) + (self class validCartInactivitySpan).! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/30/2020 20:57:06' prior: 50910265!
createCartFor: aClientID withPassword: aPassword
	
	self validate: aClientID with: aPassword andDo: [ | cartID |
		cartID := cartManager add: (Cart acceptingItemsOf: bookCatalog)..
		(self clientWithID: aClientID) addCart: cartID.
		
		^cartID.
	]! !
!TusLibrosStore methodsFor: 'create' stamp: 'VP 11/30/2020 20:57:42' prior: 50915653!
createCartFor: aClientID withPassword: aPassword
	
	self validate: aClientID with: aPassword andDo: [ | cartID |
		cartID := cartManager add: (Cart acceptingItemsOf: bookCatalog)..
		(self clientWithID: aClientID) addCart: cartID.
		
		^cartID.
	]! !
!TusLibrosCartManager methodsFor: 'initialization' stamp: 'VP 11/30/2020 20:58:10'!
add: aCart

	carts add: aCart.
	cartLastUsed add: dateTimeProvider now.
	
	^carts size.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 20:58:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 20:58:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:58:19'!
ERROR!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 20:58:19'!
ERROR!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:58:19'!
ERROR!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 20:58:19'!
ERROR!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 20:58:19'!
ERROR!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 20:58:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 20:58:19'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:58:19'!
ERROR!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:58:19'!
ERROR!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:58:19'!
ERROR!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:58:19'!
ERROR!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:58:19'!
ERROR!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 20:58:19'!
FAILURE!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 20:58:19'!
FAILURE!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:58:19'!
FAILURE!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 20:58:19'!
ERROR!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:58:20'!
ERROR!
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/30/2020 20:58:40' prior: 50915593!
initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList andDateTimeProvider: aDateTimeProvider

	authenticationSystem := anAuthenticationSystem.
	clients := aClientList.
	dateTimeProvider := aDateTimeProvider.
	bookCatalog := self class createStoreCatalog.
	
	cartManager := TusLibrosCartManager newWith dateTimeProvider.
	salesBook := OrderedCollection new.! !
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/30/2020 20:58:47' prior: 50915750!
initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList andDateTimeProvider: aDateTimeProvider

	authenticationSystem := anAuthenticationSystem.
	clients := aClientList.
	dateTimeProvider := aDateTimeProvider.
	bookCatalog := self class createStoreCatalog.
	
	cartManager := TusLibrosCartManager newWith: dateTimeProvider.
	salesBook := OrderedCollection new.! !
!TusLibrosStore methodsFor: 'initialization' stamp: 'VP 11/30/2020 20:58:56' prior: 50915766!
initializeNewWithAuthenticationSystem: anAuthenticationSystem withClients: aClientList andDateTimeProvider: aDateTimeProvider

	authenticationSystem := anAuthenticationSystem.
	clients := aClientList.
	dateTimeProvider := aDateTimeProvider.
	bookCatalog := self class createStoreCatalog.
	
	cartManager := TusLibrosCartManager newWith: dateTimeProvider.
	salesBook := OrderedCollection new.! !
!TusLibrosCartManager class methodsFor: 'no messages' stamp: 'VP 11/30/2020 20:59:21'!
newWith: aDateTimeProvider

	^self new initializeWith: aDateTimeProvider.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 20:59:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 20:59:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 20:59:23'!
ERROR!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 20:59:23'!
ERROR!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:59:23'!
ERROR!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 20:59:23'!
ERROR!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 20:59:23'!
ERROR!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 20:59:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 20:59:23'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:59:23'!
FAILURE!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:59:23'!
FAILURE!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:59:23'!
FAILURE!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:59:23'!
FAILURE!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 20:59:23'!
ERROR!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 20:59:23'!
FAILURE!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 20:59:23'!
FAILURE!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 20:59:23'!
FAILURE!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 20:59:23'!
ERROR!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 20:59:25'!
FAILURE!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 20:59:32'!
ERROR!
!TusLibrosCartManager methodsFor: 'testing' stamp: 'VP 11/30/2020 21:00:07'!
assertCartExists: aCartID

	^ aCartID > carts size ifTrue: [ self error: self class nonExistingCartErrorMessage ]! !
!TusLibrosCartManager methodsFor: 'assertions' stamp: 'VP 11/30/2020 21:00:28'!
assertCartExistsAndIsNotExpired: aCartID

	self assertCartExists: aCartID.
	self assertCartNotExpired: aCartID.! !
!TusLibrosCartManager methodsFor: 'assertions' stamp: 'VP 11/30/2020 21:00:38'!
assertCartNotExpired: aCartID

	^(self cartExpired: aCartID) ifTrue: [ self error: self class expiredCartErrorMessage ].! !
!TusLibrosStore methodsFor: 'assertions -- private' stamp: 'VP 11/30/2020 21:01:15' prior: 50913080!
assertNotExpired: aCartID updateLastUseAndDo: aNonExpiredCartClosure

	cartManager assertCartExistsAndIsNotExpired: aCartID.
	cartManager updateLastUsedForCart: aCartID.
	
	aNonExpiredCartClosure value.! !
!TusLibrosCartManager methodsFor: 'adding' stamp: 'VP 11/30/2020 21:02:13'!
cartWithID: aCartID

	^carts at: aCartID.! !

!methodRemoval: TusLibrosCartManager #cartWithID: stamp: 'VP 11/30/2020 21:02:37'!
cartWithID: aCartID

	^carts at: aCartID.!
!TusLibrosCartManager methodsFor: 'adding' stamp: 'VP 11/30/2020 21:03:25'!
add: aQuantity of: aBook to: aCartID

	(carts at: aCartID) add: aQuantity of: aBook.! !
!TusLibrosStore methodsFor: 'add' stamp: 'VP 11/30/2020 21:03:44' prior: 50912214!
add: aQuantity of: aBook to: aCartID
	
	self assertNotExpired: aCartID updateLastUseAndDo: [
		cartManager add: aQuantity of: aBook to: aCartID.
	].! !
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/30/2020 21:04:31' prior: 50913741!
checkout: aCartID chargingCardWithNumber: aCreditCardNumber andExpirationDate: aCreditCardExpirationDate andOwner: aCreditCardOwner throught: aMerchantProcessor 

	| cashier cart clientID total |

	cartManager assertCartExistsAndIsNotExpired: aCartID.

	"NOTA: Estamos usando la soluci�n de la iteraci�n 2 de la c�tedra, donde la CreditCard no almacena ni n�mero ni owner (suponemos porque el MerchantProcessorSimulator no lo usa y no hubo necesidad)"
	cart := carts at: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: (CreditCard expiringOn: aCreditCardExpirationDate)
		 throught: aMerchantProcessor
		 on: dateTimeProvider now
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.! !
!TusLibrosCartManager methodsFor: 'accessing' stamp: 'VP 11/30/2020 21:05:05'!
cartWithID: aCartID

	^carts at: aCartID! !
!TusLibrosCartManager methodsFor: 'accessing' stamp: 'VP 11/30/2020 21:05:05' prior: 50915959!
cartWithID: aCartID

	^carts at: aCartID.! !
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/30/2020 21:05:22' prior: 50915930!
checkout: aCartID chargingCardWithNumber: aCreditCardNumber andExpirationDate: aCreditCardExpirationDate andOwner: aCreditCardOwner throught: aMerchantProcessor 

	| cashier cart clientID total |

	cartManager assertCartExistsAndIsNotExpired: aCartID.

	"NOTA: Estamos usando la soluci�n de la iteraci�n 2 de la c�tedra, donde la CreditCard no almacena ni n�mero ni owner (suponemos porque el MerchantProcessorSimulator no lo usa y no hubo necesidad)"
	cart := cartManager cartWithID: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: (CreditCard expiringOn: aCreditCardExpirationDate)
		 throught: aMerchantProcessor
		 on: dateTimeProvider now
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.! !
!TusLibrosStore methodsFor: 'list' stamp: 'VP 11/30/2020 21:05:40' prior: 50911998!
listCart: aCartID 
	
	self assertNotExpired: aCartID updateLastUseAndDo: [
		^(cartManager cartWithID: aCartID) listItems.
	].! !

!methodRemoval: TusLibrosStore #assertCartExistsAndIsNotExpired: stamp: 'VP 11/30/2020 21:06:22'!
assertCartExistsAndIsNotExpired: aCartID

	self assertCartExists: aCartID.
	self assertCartNotExpired: aCartID.!

!methodRemoval: TusLibrosStore #assertCartExists: stamp: 'VP 11/30/2020 21:06:24'!
assertCartExists: aCartID

	^ aCartID > carts size ifTrue: [ self error: self class nonExistingCartErrorMessage ]!

!methodRemoval: TusLibrosStore #assertCartNotExpired: stamp: 'VP 11/30/2020 21:06:33'!
assertCartNotExpired: aCartID

	^(self cartExpired: aCartID) ifTrue: [ self error: self class expiredCartErrorMessage ].!

!methodRemoval: TusLibrosStore #cartExpired: stamp: 'VP 11/30/2020 21:06:46'!
cartExpired: aCartID

	^ (self expirationTimeForCart: aCartID) <= dateTimeProvider now!

!methodRemoval: TusLibrosStore #expirationTimeForCart: stamp: 'VP 11/30/2020 21:07:05'!
expirationTimeForCart: aCartID

	^ (cartLastUsed at: aCartID) + (self class validCartInactivitySpan).!

Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem cartManager bookCatalog lastCartID salesBook clients dateTimeProvider cartLastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/30/2020 21:07:19'!
Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem cartManager bookCatalog lastCartID salesBook clients dateTimeProvider cartLastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosCartManager methodsFor: 'adding' stamp: 'VP 11/30/2020 21:09:32'!
updateLastUsedForCart: aCartID

	^cartLastUsed at: aCartID put: dateTimeProvider now.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 21:09:37'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 21:09:37'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 21:09:37'!
ERROR!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 21:09:37'!
ERROR!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 21:09:37'!
ERROR!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 21:09:37'!
ERROR!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 21:09:37'!
ERROR!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 21:09:37'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 21:09:37'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:09:37'!
FAILURE!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:09:37'!
FAILURE!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:09:37'!
FAILURE!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:09:37'!
FAILURE!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:09:37'!
ERROR!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 21:09:37'!
FAILURE!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 21:09:37'!
FAILURE!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 21:09:37'!
FAILURE!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:09:37'!
ERROR!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 21:09:39'!
ERROR!
!TusLibrosCartManager class methodsFor: 'instance creation' stamp: 'VP 11/30/2020 21:10:16'!
nonExistingCartErrorMessage
	
	^'The cart you are trying to operate in does not exist'.! !
!TusLibrosCartManager class methodsFor: 'error messages -- private' stamp: 'VP 11/30/2020 21:10:42'!
expiredCartErrorMessage
	
	^'The requested cart has expired, please create a new one'.! !
!TusLibrosCartManager class methodsFor: 'error messages -- private' stamp: 'VP 11/30/2020 21:10:54'!
cantCheckoutCartTwiceErrorMessage
	
	^'The given cart has already been checked out'.! !

!methodRemoval: TusLibrosStore class #cantCheckoutCartTwiceErrorMessage stamp: 'VP 11/30/2020 21:10:58'!
cantCheckoutCartTwiceErrorMessage
	
	^'The given cart has already been checked out'.!

!methodRemoval: TusLibrosStore class #nonExistingCartErrorMessage stamp: 'VP 11/30/2020 21:11:01'!
nonExistingCartErrorMessage
	
	^'The cart you are trying to operate in does not exist'.!

!methodRemoval: TusLibrosStore class #expiredCartErrorMessage stamp: 'VP 11/30/2020 21:11:03'!
expiredCartErrorMessage
	
	^'The requested cart has expired, please create a new one'.!
!TusLibrosCartManager class methodsFor: 'error messages -- private' stamp: 'VP 11/30/2020 21:11:09'!
validCartInactivitySpan

	^Duration minutes: 30! !

!methodRemoval: TusLibrosStore class #validCartInactivitySpan stamp: 'VP 11/30/2020 21:11:18'!
validCartInactivitySpan

	^Duration minutes: 30!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 21:11:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 21:11:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 21:11:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 21:11:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 21:11:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 21:11:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 21:11:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 21:11:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 21:11:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:11:29'!
ERROR!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:11:29'!
ERROR!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:11:29'!
ERROR!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:11:29'!
ERROR!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:11:29'!
ERROR!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 21:11:29'!
ERROR!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 21:11:29'!
ERROR!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 21:11:29'!
ERROR!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:11:29'!
ERROR!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:11:30'!
ERROR!
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 21:11:45' prior: 50915006!
assertCartWithExtraSetUp: aSetUpClosure actionFailsAfter30MinutesOfCartInactivity: aCartActionBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	aSetUpClosure value: tusLibrosStore value: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosCartManager validCartInactivitySpan.
	
	self should: [ aCartActionBlock value: tusLibrosStore value: cartId ]
		raise: Error
		withMessageText: TusLibrosStore expiredCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:11:48'!
ERROR!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 21:11:53'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 21:11:53'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 21:11:53'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 21:11:53'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 21:11:53'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 21:11:53'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 21:11:53'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 21:11:53'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 21:11:53'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:11:53'!
ERROR!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:11:53'!
ERROR!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:11:53'!
ERROR!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:11:53'!
ERROR!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:11:53'!
ERROR!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 21:11:53'!
ERROR!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 21:11:53'!
ERROR!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 21:11:53'!
ERROR!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:11:53'!
ERROR!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:11:55'!
ERROR!
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 21:12:05' prior: 50916244!
assertCartWithExtraSetUp: aSetUpClosure actionFailsAfter30MinutesOfCartInactivity: aCartActionBlock

	| dateTimeProvider tusLibrosStore cartId |
	
	dateTimeProvider := DateTimeProviderSimulator withDateTime: testObjectsFactory today.
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self andDateTimeProvider: dateTimeProvider.
	
	cartId := tusLibrosStore createCartFor: testObjectsFactory clientIDYenny withPassword: '1234 password'.
	
	aSetUpClosure value: tusLibrosStore value: cartId.
	
	dateTimeProvider changeCurrentDateTimeTo: dateTimeProvider now + TusLibrosCartManager validCartInactivitySpan.
	
	self should: [ aCartActionBlock value: tusLibrosStore value: cartId ]
		raise: Error
		withMessageText: TusLibrosCartManager expiredCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:12:07'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:12:08'!
ERROR!
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 21:12:17' prior: 50913989!
limitValidCartLife

	^ TusLibrosCartManager validCartInactivitySpan - (Duration minutes: 1)! !

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:12:18'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:12:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:12:20'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:12:21'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 21:12:21'!
ERROR!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 21:12:25' prior: 50912052!
test16AddToInexistentCartFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
		
	self should: [ tusLibrosStore add: 42 of: testObjectsFactory itemSellByTheStore to: 1 ]
		raise: Error
		withMessageText: TusLibrosCartManager nonExistingCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 21:12:26'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 21:12:27'!
ERROR!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 21:12:31' prior: 50912191!
test17ListInexistentCartFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
		
	self should: [ tusLibrosStore listCart: 1 ]
		raise: Error
		withMessageText: TusLibrosCartManager nonExistingCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 21:12:32'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 21:12:33'!
ERROR!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 21:12:37' prior: 50913881!
test18CheckoutInexistentCartFails

	| tusLibrosStore |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	self should: [ 
		tusLibrosStore checkout: 1
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self.
	] raise: Error withMessageText: TusLibrosCartManager nonExistingCartErrorMessage.! !

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 21:12:38'!
PASSED!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:12:39'!
ERROR!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 21:12:43' prior: 50915487!
test19DoubleCheckoutFails

	| tusLibrosStore cartId |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId := self createCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore
				inStore: tusLibrosStore.
	
	self should: [ 
		tusLibrosStore checkout: cartId
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self.
	] raise: Error withMessageText: TusLibrosCartManager cantCheckoutCartTwiceErrorMessage.! !

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:12:44'!
FAILURE!

Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem cartManager bookCatalog lastCartID salesBook clients dateTimeProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/30/2020 21:12:57'!
Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem cartManager bookCatalog lastCartID salesBook clients dateTimeProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 21:13:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:13:00'!
FAILURE!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:13:00'!
FAILURE!
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/30/2020 21:13:57' prior: 50915969!
checkout: aCartID chargingCardWithNumber: aCreditCardNumber andExpirationDate: aCreditCardExpirationDate andOwner: aCreditCardOwner throught: aMerchantProcessor 

	| cashier cart clientID total |

	cartManager assertCartExistsAndIsNotExpired: aCartID.
	cartManager assertCartNeverCheckedOut: aCartID.

	"NOTA: Estamos usando la soluci�n de la iteraci�n 2 de la c�tedra, donde la CreditCard no almacena ni n�mero ni owner (suponemos porque el MerchantProcessorSimulator no lo usa y no hubo necesidad)"
	cart := cartManager cartWithID: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: (CreditCard expiringOn: aCreditCardExpirationDate)
		 throught: aMerchantProcessor
		 on: dateTimeProvider now
		 registeringOn: OrderedCollection new.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 21:14:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 21:14:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 21:14:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 21:14:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 21:14:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 21:14:00'!
ERROR!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 21:14:00'!
ERROR!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 21:14:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 21:14:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:14:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:14:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:14:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:14:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:14:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 21:14:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 21:14:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 21:14:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:14:00'!
FAILURE!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 21:14:02'!
ERROR!
!TusLibrosCartManager methodsFor: 'assertions' stamp: 'VP 11/30/2020 21:14:19'!
assertCartNeverCheckedOut: aSmallInteger 
	self shouldBeImplemented.! !
!TusLibrosCartManager methodsFor: 'assertions' stamp: 'VP 11/30/2020 21:14:27' prior: 50916676!
assertCartNeverCheckedOut: aCartID 
	
	! !
!TusLibrosCartManager methodsFor: 'assertions' stamp: 'VP 11/30/2020 21:14:57' prior: 50916682!
assertCartNeverCheckedOut: aCartID 
	
	^(checkedOutCarts includes: aCartID) ifTrue: [ self error: self class nonExistingCartErrorMessage ]! !
!TusLibrosCartManager methodsFor: 'assertions' stamp: 'VP 11/30/2020 21:15:11' prior: 50916687!
assertCartNeverCheckedOut: aCartID 
	
	^(checkedOutCarts includes: aCartID) ifTrue: [ self error: self class cantCheckoutCartTwiceErrorMessage ].! !
!TusLibrosCartManager methodsFor: 'updating' stamp: 'VP 11/30/2020 21:15:37'!
cartCheckedOut: aCartID

	^checkedOutCarts add: aCartID.! !
!TusLibrosStore methodsFor: 'checkout' stamp: 'VP 11/30/2020 21:16:15' prior: 50916576!
checkout: aCartID chargingCardWithNumber: aCreditCardNumber andExpirationDate: aCreditCardExpirationDate andOwner: aCreditCardOwner throught: aMerchantProcessor 

	| cashier cart clientID total |

	cartManager assertCartExistsAndIsNotExpired: aCartID.
	cartManager assertCartNeverCheckedOut: aCartID.

	"NOTA: Estamos usando la soluci�n de la iteraci�n 2 de la c�tedra, donde la CreditCard no almacena ni n�mero ni owner (suponemos porque el MerchantProcessorSimulator no lo usa y no hubo necesidad)"
	cart := cartManager cartWithID: aCartID.
	cashier := Cashier toCheckout: cart
		 charging: (CreditCard expiringOn: aCreditCardExpirationDate)
		 throught: aMerchantProcessor
		 on: dateTimeProvider now
		 registeringOn: OrderedCollection new.
	cartManager cartCheckedOut: aCartID.
		
	total := cashier checkOut.
	
	clientID := self clientIDFor: aCartID.
	self registerSaleOf: cart by: clientID withTotal: total.
	
	^salesBook size.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 21:16:16'!
PASSED!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:16:16'!
FAILURE!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:16:16'!
FAILURE!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 21:16:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:16:54'!
FAILURE!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:16:54'!
FAILURE!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 21:17:12' prior: 50916467!
test19DoubleCheckoutFails

	| tusLibrosStore cartId |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId := self createCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore
				inStore: tusLibrosStore.
				
	tusLibrosStore checkout: cartId
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self.
	
	self should: [ 
		tusLibrosStore checkout: cartId
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self.
	] raise: Error withMessageText: TusLibrosCartManager cantCheckoutCartTwiceErrorMessage.! !

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:17:13'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 21:17:15'!
PASSED!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:17:15'!
PASSED!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 21:17:44'!
checkout: tusLibrosStore on: cartId

	^ tusLibrosStore checkout: cartId
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 21:17:44' prior: 50916878!
test19DoubleCheckoutFails

	| tusLibrosStore cartId |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId := self createCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore
				inStore: tusLibrosStore.
				
	self checkout: tusLibrosStore on: cartId.
	
	self should: [ 
		tusLibrosStore checkout: cartId
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self.
	] raise: Error withMessageText: TusLibrosCartManager cantCheckoutCartTwiceErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 21:17:54' prior: 50916973!
checkout: cartId on: tusLibrosStore

	^ tusLibrosStore checkout: cartId
		chargingCardWithNumber: 1
		andExpirationDate: testObjectsFactory notExpiredCreditCardDate 
		andOwner: 'Jos� Yenny'
		throught: self! !
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 21:18:01' prior: 50916983!
test19DoubleCheckoutFails

	| tusLibrosStore cartId |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId := self createCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore
				inStore: tusLibrosStore.
				
	self checkout: tusLibrosStore on: cartId.
	
	self should: [ 
		self checkout: tusLibrosStore on: cartId.
	] raise: Error withMessageText: TusLibrosCartManager cantCheckoutCartTwiceErrorMessage.! !
!TusLibrosStoreTest methodsFor: 'support' stamp: 'VP 11/30/2020 21:18:53' prior: 50913806!
createAndCheckoutCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore

	| cartId |
	
	cartId := self createCartFor: aClientID with: aQuantity of: aBook inStore: aTusLibrosStore.
	
	^self checkout: cartId on: aTusLibrosStore.! !

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 21:18:54'!
PASSED!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:18:54'!
ERROR!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:18:54'!
ERROR!
!TusLibrosStoreTest methodsFor: 'tests' stamp: 'VP 11/30/2020 21:19:27' prior: 50917015!
test19DoubleCheckoutFails

	| tusLibrosStore cartId |
	
	tusLibrosStore := testObjectsFactory createStoreWithAuthenticationSystem: self.
	
	cartId := self createCartFor: testObjectsFactory clientIDYenny with: 2 of: testObjectsFactory itemSellByTheStore
				inStore: tusLibrosStore.
				
	self checkout: cartId on: tusLibrosStore.
	
	self should: [ 
		self checkout: cartId on: tusLibrosStore.
	] raise: Error withMessageText: TusLibrosCartManager cantCheckoutCartTwiceErrorMessage.! !

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:19:29'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:19:30'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:19:31'!
PASSED!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:19:47'!
PASSED!

Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem cartManager bookCatalog salesBook clients dateTimeProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosStore category: 'TusLibros' stamp: 'VP 11/30/2020 21:19:57'!
Object subclass: #TusLibrosStore
	instanceVariableNames: 'authenticationSystem cartManager bookCatalog salesBook clients dateTimeProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:20:00'!
PASSED!

!methodRemoval: TusLibrosStore #updateLastUsedForCart: stamp: 'VP 11/30/2020 21:20:53'!
updateLastUsedForCart: aCartID

	^ cartLastUsed at: aCartID put: dateTimeProvider now!

!testRun: #TusLibrosStoreTest #test01CreateCartWithNonExistingClientIDFails stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test02CreateCartWithWrongPasswordFails stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test03ListOfCreatedCartIsEmpty stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test05ListOfCartWithAddedItemContainsItem stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test06ListOfEachCartHasBooksCorrespondingToEach stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test07CheckoutCartReturnsTransactionID stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test08ListPurchasesOfClientShouldReturnAllPurchasesOfTheClient stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test09ListPurchasesOfNonExistingClientFails stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test10ListPurchasesWithWrongPasswordFails stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test11ListCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test12ListCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test13AddToCartAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test14AddToCartOperatingBefore30MinutesResetsInactivityTimer stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test15CheckoutAfter30MinutesOfCartInactivityFails stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test16AddToInexistentCartFails stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test17ListInexistentCartFails stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test18CheckoutInexistentCartFails stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

!testRun: #TusLibrosStoreTest #test19DoubleCheckoutFails stamp: 'VP 11/30/2020 21:20:59'!
PASSED!

----SNAPSHOT----(30 November 2020 21:21:05) CuisUniversity-4384.image priorSource: 18681313!