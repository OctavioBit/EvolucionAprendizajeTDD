

----STARTUP---- (17 December 2020 16:54:05) as /home/edy/MI UNIDAD/CS_DC/IngSoft I/Smalltalk/CuisUniversity-4384.image!


!classRemoval: #PointsPortableObject stamp: 'ERMC 12/17/2020 17:10:29'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'ERMC 12/17/2020 17:10:30'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PortableObject stamp: 'ERMC 12/17/2020 17:10:30'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #NonPortableObject stamp: 'ERMC 12/17/2020 17:10:31'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #StageObject stamp: 'ERMC 12/17/2020 17:10:31'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #Room stamp: 'ERMC 12/17/2020 17:10:32'!
Object subclass: #Room
	instanceVariableNames: 'width height contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'ERMC 12/17/2020 17:10:33'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'ERMC 12/17/2020 17:10:33'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #Backpack stamp: 'ERMC 12/17/2020 17:10:34'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #RoomTest stamp: 'ERMC 12/17/2020 17:10:35'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'ERMC 12/17/2020 17:10:35'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #BackpackTest stamp: 'ERMC 12/17/2020 17:10:36'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

----End fileIn of /home/edy/Escritorio/recu-isw/ISW1-2020-2C-Recuperatorio-2doParcial.st----!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ERMC 12/17/2020 17:11:35'!
PASSED!

TestCase subclass: #MultiRoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #MultiRoomTest category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ERMC 12/17/2020 17:45:55'!
TestCase subclass: #MultiRoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ERMC 12/17/2020 18:05:03'!
Object subclass: #Door
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!MultiRoomTest methodsFor: 'nil' stamp: 'ERMC 12/17/2020 18:04:55'!
test01_CanNotCreateDoorInTheSameRoom
	
	| room  |
	
	room := Room ofWidth: 10 andHeight: 10.
	
	self 
		should: [ | door1 | door1 _ Door at: 1@1 in: room at: 1@2 in: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room canNotCreateADoorInTheSameRootErrorDescription equals: anError messageText. ].! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:05:38' prior: 50883496!
test01_CanNotCreateDoorInTheSameRoom
	
	| room door   |
	
	room := Room ofWidth: 10 andHeight: 10.
	
	self 
		should: [ door _ Door at: 1@1 in: room at: 1@2 in: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room canNotCreateADoorInTheSameRootErrorDescription equals: anError messageText. ].! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:05:50' prior: 50883510!
test01_CanNotCreateDoorInTheSameRoom
	
	| room door   |
	
	room := Room ofWidth: 10 andHeight: 10.
	
	self 
		should: [ door _ Door at: 1@1 in: room at: 1@2 in: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room canNotCreateADoorInTheSameRoomtErrorDescription equals: anError messageText. ].! !

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 18:06:00'!
ERROR!
!Door class methodsFor: 'instance creation' stamp: 'ERMC 12/17/2020 18:06:11'!
at: aPoint in: aRoom at: aPoint3 in: aRoom4 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAt: aPoint in: aRoom at: aPoint3 in: aRoom4 ! !
!Door class methodsFor: 'instance creation' stamp: 'ERMC 12/17/2020 18:10:25' prior: 50883541!
at: aSrcPosition in: aSrcRoom at: aDstPosition in: aDstRoom 

	(aSrcRoom  = aDstRoom ) ifTrue: [self error: self class canNotCreateADoorInTheSameRoomtErrorDescription].
	
	^self new initializeAt: aSrcPosition in: aSrcRoom at: aDstPosition in: aDstRoom ! !

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 18:10:27'!
ERROR!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:11:15' prior: 50883524!
test01_CanNotCreateDoorInTheSameRoom
	
	| room door   |
	
	room := Room ofWidth: 10 andHeight: 10.
	
	self 
		should: [ door _ Door at: 1@1 in: room at: 1@2 in: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotCreateADoorInTheSameRoomtErrorDescription equals: anError messageText. ].! !

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 18:11:28'!
ERROR!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 18:11:52'!
ERROR!
!Door class methodsFor: 'nil' stamp: 'ERMC 12/17/2020 18:12:47'!
canNotCreateADoorInTheSameRoomtErrorDescription

	^ 'Can not create a Door in the same room' ! !

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 18:13:03'!
ERROR!
!Door class methodsFor: 'instance creation' stamp: 'ERMC 12/17/2020 18:13:52' prior: 50883551!
at: aSrcPosition in: aSrcRoom at: aDstPosition in: aDstRoom 

	(aSrcRoom  = aDstRoom ) ifTrue: [self error: self canNotCreateADoorInTheSameRoomtErrorDescription].
	
	^self new initializeAt: aSrcPosition in: aSrcRoom at: aDstPosition in: aDstRoom ! !

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 18:13:53'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 18:13:53'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 18:13:57'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 18:13:57'!
PASSED!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:16:15'!
test02_CanNotCreateDoorInAInvalidPositionAtRoom
	
	| room door|
	
	room := Room ofWidth: 10 andHeight: 10.
	
	self 
		should: [ door _ Door at: 1@1 in: room at: 1@2 in: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotCreateADoorInTheSameRoomtErrorDescription equals: anError messageText. ].! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:16:41'!
defaultRoom

	^ Room ofWidth: 10 andHeight: 10! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:16:41' prior: 50883620!
test02_CanNotCreateDoorInAInvalidPositionAtRoom
	
	| room door|
	
	room := self defaultRoom.
	
	self 
		should: [ door _ Door at: 1@1 in: room at: 1@2 in: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotCreateADoorInTheSameRoomtErrorDescription equals: anError messageText. ].! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:16:55' prior: 50883639!
test02_CanNotCreateDoorInAInvalidPositionAtRoom
	
	| room door|
	
	room := Room ofWidth: 10 andHeight: 10.
	
	self 
		should: [ door _ Door at: 1@1 in: room at: 1@2 in: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotCreateADoorInTheSameRoomtErrorDescription equals: anError messageText. ].! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:17:44' prior: 50883566!
test01_CanNotCreateDoorInTheSameRoom
	
	| room door   |
	
	room _ self defaultRoom.
	
	self 
		should: [ door _ Door at: 1@1 in: room at: 1@2 in: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotCreateADoorInTheSameRoomtErrorDescription equals: anError messageText. ].! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:26:22' prior: 50883653!
test02_CanNotCreateDoorInAInvalidPositionAtRoom
	
	| room1 room2 |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	self 
		should: [ Door at: 10@1 in: room1 at: 1@1  in: room2 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room invalidPositionErrorDescription equals: anError messageText. ].! !

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 18:26:29'!
ERROR!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ERMC 12/17/2020 18:26:42'!
Object subclass: #Door
	instanceVariableNames: 'srcPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ERMC 12/17/2020 18:26:42'!
Object subclass: #Door
	instanceVariableNames: 'srcPosition srcRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ERMC 12/17/2020 18:26:42'!
Object subclass: #Door
	instanceVariableNames: 'srcPosition srcRoom dstPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ERMC 12/17/2020 18:26:42'!
Object subclass: #Door
	instanceVariableNames: 'srcPosition srcRoom dstPosition dstRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'initialization' stamp: 'ERMC 12/17/2020 18:26:42'!
initializeAt: aSrcPosition in: aSrcRoom at: aDstPosition in: aDstRoom 
	self shouldBeImplemented.
	srcPosition := aSrcPosition.
	srcRoom := aSrcRoom.
	dstPosition := aDstPosition.
	dstRoom := aDstRoom.! !
!Door methodsFor: 'initialization' stamp: 'ERMC 12/17/2020 18:27:51' prior: 50883735!
initializeAt: aSrcPosition in: aSrcRoom at: aDstPosition in: aDstRoom 

	srcPosition := aSrcPosition.
	srcRoom := aSrcRoom.
	aSrcRoom at: aSrcPosition put: self.
	
	dstPosition := aDstPosition.
	dstRoom := aDstRoom.
	aDstRoom at: aDstPosition put: self. ! !

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 18:27:54'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 18:27:54'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 18:27:54'!
PASSED!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:28:20' prior: 50883668!
test01_CanNotCreateDoorInTheSameRoom
	
	| room |
	
	room _ self defaultRoom.
	
	self 
		should: [Door at: 1@1 in: room at: 1@2 in: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotCreateADoorInTheSameRoomtErrorDescription equals: anError messageText. ].! !

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 18:28:23'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 18:28:26'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 18:28:26'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 18:28:26'!
PASSED!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:43:12'!
test03_WhenCreateCorrectDoorKnowsBothPositionInRoom
	
	| room1 room2 door |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	
	self assert: (Door isAt: 1@3 in: room1).
	self assert: (Door isAt: 2@4 in: room2).
	self assert: 1@3 equals: (room1 positionOf: door).
	self assert: 2@4 equals: (room2 positionOf: door).! !

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 18:43:22'!
ERROR!
!Door class methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:43:36'!
isAt: aPoint in: aRoom 
	self shouldBeImplemented.! !

!methodRemoval: Door class #isAt:in: stamp: 'ERMC 12/17/2020 18:43:46'!
isAt: aPoint in: aRoom 
	self shouldBeImplemented.!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:44:03' prior: 50883794!
test03_WhenCreateCorrectDoorKnowsBothPositionInRoom
	
	| room1 room2 door |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	
	self assert: (door isAt: 1@3 in: room1).
	self assert: (door isAt: 2@4 in: room2).
	self assert: 1@3 equals: (room1 positionOf: door).
	self assert: 2@4 equals: (room2 positionOf: door).! !

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 18:44:04'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:44:11'!
isAt: aPoint in: aRoom 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:44:20' prior: 50883840!
isAt: aPosition in: aRoom 
	
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:45:57' prior: 50883845!
isAt: aPosition in: aRoom 
	
	(aPosition = srcPosition and: aRoom = srcRoom ) or: (aPosition = dstPosition and: aRoom = dstRoom )! !

aPosition = srcPosition and: aRoom = srcRoom!

aPosition = dstPosition and: aRoom = dstRoom!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:46:13' prior: 50883849!
isAt: aPosition in: aRoom 
	
	(aPosition = srcPosition and: aRoom = srcRoom ) or: (aPosition = dstPosition and: aRoom = dstRoom)! !

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 18:46:15'!
ERROR!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 18:46:42'!
ERROR!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 18:46:54'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:47:06' prior: 50883859!
isAt: aPosition in: aRoom 
	
	^ (aPosition = srcPosition and: aRoom = srcRoom ) or: (aPosition = dstPosition and: aRoom = dstRoom)! !

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 18:47:07'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 18:47:07'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 18:47:07'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 18:47:07'!
PASSED!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:47:34' prior: 50883822!
test03_WhenCreateCorrectDoorKnowsBothPositionInRoom
	
	| room1 room2 door |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	
	self assert: (door isAt: 1@3 in: room1).
	self assert: (door isAt: 2@4 in: room2).
	self assert: 1@3 equals: (room1 positionOf: door).
	self assert: 2@4 equals: (room2 positionOf: door).! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:52:22'!
test04_CanNotPutDoorAboveAStageObject
	
	| room1 room2 door aKey |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	aKey _ NoPointsPortableObject named: 'key' weighing: 50.
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	
	self assert: (door isAt: 1@3 in: room1).
	self assert: (door isAt: 2@4 in: room2).
	self assert: 1@3 equals: (room1 positionOf: door).
	self assert: 2@4 equals: (room2 positionOf: door).! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:55:01' prior: 50883915!
test04_CanNotPutDoorAboveAStageObject
	
	| room1 room2 aKey |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	aKey _ NoPointsPortableObject named: 'key' weighing: 50.
	room1 at: 1@3 put: aKey. 
	
	self 
		should: [ Door at: 1@3 in: room1 at: 2@4 in: room2.  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: room1 positionIsNotEmptyErrorDescription equals: anError messageText. ].! !

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 18:55:06'!
ERROR!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 18:55:34'!
ERROR!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 18:56:50'!
ERROR!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:57:22' prior: 50883932!
test04_CanNotPutDoorAboveAStageObject
	
	| room1 room2 aKey |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	aKey _ NoPointsPortableObject named: 'key' weighing: 50.
	room1 at: 1@3 put: aKey. 
	
	self 
		should: [ Door at: 1@3 in: room1 at: 2@4 in: room2.  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room positionIsNotEmptyErrorDescription equals: anError messageText. ].! !

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 18:57:23'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 18:57:23'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 18:57:23'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 18:57:23'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 18:57:23'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 18:57:26'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 18:57:26'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 18:57:26'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 18:57:26'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 18:57:26'!
PASSED!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:58:50'!
test05_ADoorCanNotBeTaken
	
	| room1 room2 aKey |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	aKey _ NoPointsPortableObject named: 'key' weighing: 50.
	room1 at: 1@3 put: aKey. 
	
	self 
		should: [ Door at: 1@3 in: room1 at: 2@4 in: room2.  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room positionIsNotEmptyErrorDescription equals: anError messageText. ].! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:59:07'!
key

	^ NoPointsPortableObject named: 'key' weighing: 50! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:59:07' prior: 50883959!
test04_CanNotPutDoorAboveAStageObject
	
	| room1 room2 aKey |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	aKey _ self key.
	room1 at: 1@3 put: aKey. 
	
	self 
		should: [ Door at: 1@3 in: room1 at: 2@4 in: room2.  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room positionIsNotEmptyErrorDescription equals: anError messageText. ].! !

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 18:59:18'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 18:59:18'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 18:59:18'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 18:59:18'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 18:59:18'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 18:59:18'!
PASSED!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:59:36' prior: 50884011!
test05_ADoorCanNotBeTaken
	
	| room1 room2 |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
		
	self 
		should: [ Door at: 1@3 in: room1 at: 2@4 in: room2.  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room positionIsNotEmptyErrorDescription equals: anError messageText. ].! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 18:59:56' prior: 50884069!
test05_ADoorCanNotBeTaken
	
	| room1 room2 door |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	
	self 
		should: [ Door at: 1@3 in: room1 at: 2@4 in: room2.  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room positionIsNotEmptyErrorDescription equals: anError messageText. ].! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:03:54' prior: 50884083!
test05_ADoorCanNotBeTaken
	
	| room1 room2 door player |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room1.

	
	self 
		should: [ player take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: room1 canNotBeTakenErrorDescription equals: anError messageText. ].! !

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 19:04:09'!
ERROR!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:04:18'!
defaultBackpack
	self shouldBeImplemented.! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:04:22' prior: 50884120!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 19:04:23'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:04:42'!
takenBy: aPlayableCharacter 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:05:34' prior: 50884133!
takenBy: aPlayableCharacter 
	
	^ self error: self canNotBeTakenErrorDescription.! !

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 19:05:36'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:05:42'!
canNotBeTakenErrorDescription
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:05:57' prior: 50884146!
canNotBeTakenErrorDescription

	^ ' A door can not be taken' ! !

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 19:05:58'!
ERROR!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:06:12' prior: 50884099!
test05_ADoorCanNotBeTaken
	
	| room1 room2 door player |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room1.

	
	self 
		should: [ player take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: door canNotBeTakenErrorDescription equals: anError messageText. ].! !

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 19:06:14'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 19:06:14'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 19:06:14'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 19:06:14'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 19:06:14'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 19:06:14'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 19:06:27'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 19:06:27'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 19:06:27'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 19:06:27'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 19:06:27'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 19:06:27'!
PASSED!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:12:35'!
test06_CanNotPutANonPortableObjectIntoADoor
	
	| room1 room2 door box |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	box := NonPortableObject named: 'Box'.

	self 
		should: [room1 at: 1@3 put: box ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: door canNotBeTakenErrorDescription equals: anError messageText. ].! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:23:53'!
test06_CanNotPutADoorIntoANonPortableObject
	
	| room1 room2 door box |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	box := NonPortableObject named: 'Box'.

	self 
		should: [Door at: 1@3 in: room1 at: 2@4 in: room2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: door canNotBeTakenErrorDescription equals: anError messageText. ].! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:25:31' prior: 50884234!
test06_CanNotPutADoorIntoANonPortableObject
	
	| room1 room2 door box |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	box := NonPortableObject named: 'Box'.
	room1 at: 1@3 put: box. 

	self 
		should: [Door at: 1@3 in: room1 at: 2@4 in: room2.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: door canNotBeTakenErrorDescription equals: anError messageText. ].! !

!methodRemoval: MultiRoomTest #test06_CanNotPutANonPortableObjectIntoADoor stamp: 'ERMC 12/17/2020 19:28:19'!
test06_CanNotPutANonPortableObjectIntoADoor
	
	| room1 room2 door box |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	box := NonPortableObject named: 'Box'.

	self 
		should: [room1 at: 1@3 put: box ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: door canNotBeTakenErrorDescription equals: anError messageText. ].!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:31:28' prior: 50884250!
test06_CanNotPutADoorIntoANonPortableObject
	
	| room1 room2 box |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	box := NonPortableObject named: 'Box'.
	room1 at: 1@3 put: box. 

	self 
		should: [	Door at: 1@3 in: room1 at: 2@4 in: room2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: room1 canNotPutADoorIntoANonPortableObjectErrorDescription equals: anError messageText. ].! !

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 19:31:35'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:31:55'!
canNotPutADoorIntoANonPortableObjectErrorDescription
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:32:13' prior: 50884303!
canNotPutADoorIntoANonPortableObjectErrorDescription
	
	^' Can not Put a door into a non portable object'! !

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 19:32:14'!
FAILURE!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:33:04' prior: 50884283!
test06_CanNotPutADoorIntoANonPortableObject
	
	| room1 room2 box |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	box := NonPortableObject named: 'Box'.
	room1 at: 1@3 put: box. 

	self 
		should: [	Door at: 1@3 in: room1 at: 2@4 in: room2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: room1 positionIsNotEmptyErrorDescription equals: anError messageText. ].! !

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 19:33:06'!
ERROR!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:33:13' prior: 50884320!
test06_CanNotPutADoorIntoANonPortableObject
	
	| room1 room2 box |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	box := NonPortableObject named: 'Box'.
	room1 at: 1@3 put: box. 

	self 
		should: [	Door at: 1@3 in: room1 at: 2@4 in: room2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room positionIsNotEmptyErrorDescription equals: anError messageText. ].! !

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 19:33:15'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 19:33:15'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 19:33:15'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 19:33:15'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 19:33:15'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 19:33:15'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 19:33:15'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 19:34:24'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 19:34:24'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 19:34:24'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 19:34:24'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 19:34:24'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 19:34:24'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 19:34:24'!
PASSED!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:38:05' prior: 50884340!
test06_CanNotPutADoorIntoANonPortableObject
	
	| room1 room2 box |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	box := NonPortableObject named: 'Box'.
	room1 at: 1@3 put: box. 

	self 
		should: [	Door at: 1@3 in: room1 at: 2@4 in: room2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room positionIsNotEmptyErrorDescription equals: anError messageText.
			self assert: box equals: (room1 positionOf: 1@3)].! !

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 19:38:07'!
ERROR!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 19:38:21'!
ERROR!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:38:56' prior: 50884405!
test06_CanNotPutADoorIntoANonPortableObject
	
	| room1 room2 box |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	box := NonPortableObject named: 'Box'.
	room1 at: 1@3 put: box. 
	

	self 
		should: [	Door at: 1@3 in: room1 at: 2@4 in: room2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room positionIsNotEmptyErrorDescription equals: anError messageText.
			self assert: box equals: (room1 positionOf: 1@3)].! !

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 19:38:56'!
ERROR!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:39:34' prior: 50883767!
test01_CanNotCreateDoorInTheSameRoom
	
	| room |
	
	room _ self defaultRoom.
	
	self 
		should: [Door at: 1@1 in: room at: 1@2 in: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotCreateADoorInTheSameRoomtErrorDescription equals: anError messageText.
			self assert: (room isEmptyAt: 1@1)].! !

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 19:40:27'!
ERROR!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 19:40:39'!
PASSED!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:40:58' prior: 50884430!
test06_CanNotPutADoorIntoANonPortableObject
	
	| room1 room2 box |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	box := NonPortableObject named: 'Box'.
	room1 at: 1@3 put: box. 
	

	self 
		should: [	Door at: 1@3 in: room1 at: 2@4 in: room2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room positionIsNotEmptyErrorDescription equals: anError messageText.
			self assert: 1@3 equals: (room1 positionOf: box)].! !

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 19:40:59'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 19:40:59'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 19:40:59'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 19:40:59'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 19:40:59'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 19:40:59'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 19:40:59'!
PASSED!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:44:26'!
test07_canNotUseADoorFromAnEmptyOrInvalidPosition

	| room  player |

	room := self defaultRoom.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room objectNotInRoomErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty ]
			! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:47:11' prior: 50884515!
test07_canNotUseADoorFromAnEmptyOrInvalidPosition

	| room1  player door room2 |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room1.
		
	self 
		should: [ player take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room objectNotInRoomErrorDescription equals: anError messageText.]
			! !

!testRun: #MultiRoomTest #test07_canNotUseADoorFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 19:48:56'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 19:48:56'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 19:48:56'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 19:48:56'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 19:48:56'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 19:48:56'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 19:48:56'!
PASSED!

!testRun: #MultiRoomTest #test07_canNotUseADoorFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 19:48:56'!
PASSED!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:52:34'!
test08_canNotUseADoorIfIsClosed

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	door closeWith: key. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room1.
		
	self 
		should: [ player take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door theDoorIsClosedErrorDescription equals: anError messageText.]
			! !

!testRun: #MultiRoomTest #test08_canNotUseADoorIfIsClosed stamp: 'ERMC 12/17/2020 19:52:45'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:52:52'!
closeWith: aNoPointsPortableObject 
	self shouldBeImplemented.! !

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ERMC 12/17/2020 19:54:05'!
Object subclass: #Door
	instanceVariableNames: 'srcPosition srcRoom dstPosition dstRoom key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ERMC 12/17/2020 19:54:07'!
Object subclass: #Door
	instanceVariableNames: 'srcPosition srcRoom dstPosition dstRoom key state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:54:03' prior: 50884601!
closeWith: aKey 
	
	key _ aKey.
	state _ #Closed
	! !

!testRun: #MultiRoomTest #test08_canNotUseADoorIfIsClosed stamp: 'ERMC 12/17/2020 19:54:11'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:54:17'!
theDoorIsClosedErrorDescription
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 19:55:10' prior: 50884633!
theDoorIsClosedErrorDescription
	
	^ 'Can not open door because it is closed with key'! !

!testRun: #MultiRoomTest #test08_canNotUseADoorIfIsClosed stamp: 'ERMC 12/17/2020 19:55:12'!
FAILURE!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:03:17' prior: 50884579!
test08_canNotUseADoorIfIsClosed

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	door closeWith: key. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door theDoorIsClosedErrorDescription equals: anError messageText.]
			! !

!testRun: #MultiRoomTest #test08_canNotUseADoorIfIsClosed stamp: 'ERMC 12/17/2020 20:03:28'!
ERROR!

!testRun: #MultiRoomTest #test08_canNotUseADoorIfIsClosed stamp: 'ERMC 12/17/2020 20:03:37'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:04:16'!
use
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:05:09' prior: 50884674!
use
	| door |
	
	door _ room at: self forwardPosition.
	door useBy: self .! !

!testRun: #MultiRoomTest #test08_canNotUseADoorIfIsClosed stamp: 'ERMC 12/17/2020 20:05:14'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:05:22'!
useBy: aPlayableCharacter 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:06:28' prior: 50884687!
useBy: aPlayableCharacter 

	self isClosed ifTrue: [^ self error: self theDoorIsClosedErrorDescription].! !

!testRun: #MultiRoomTest #test08_canNotUseADoorIfIsClosed stamp: 'ERMC 12/17/2020 20:06:30'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:06:34'!
isClosed
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:06:54' prior: 50884701!
isClosed
	
	^ state = #Closed! !

!testRun: #MultiRoomTest #test08_canNotUseADoorIfIsClosed stamp: 'ERMC 12/17/2020 20:06:56'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 20:06:56'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 20:06:56'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 20:06:56'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 20:06:56'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 20:06:56'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 20:06:56'!
PASSED!

!testRun: #MultiRoomTest #test07_canNotUseADoorFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 20:06:56'!
PASSED!

!testRun: #MultiRoomTest #test08_canNotUseADoorIfIsClosed stamp: 'ERMC 12/17/2020 20:06:56'!
PASSED!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:08:09'!
test07_doorcanNotBeUseFromAnEmptyOrInvalidPosition

	| room1  player door room2 |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room1.
		
	self 
		should: [ player take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room objectNotInRoomErrorDescription equals: anError messageText.]
			! !

!methodRemoval: MultiRoomTest #test07_canNotUseADoorFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 20:08:09'!
test07_canNotUseADoorFromAnEmptyOrInvalidPosition

	| room1  player door room2 |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room1.
		
	self 
		should: [ player take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room objectNotInRoomErrorDescription equals: anError messageText.]
			!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:08:29'!
test08_doorCanNotBeUseIfItIsClosed

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	door closeWith: key. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door theDoorIsClosedErrorDescription equals: anError messageText.]
			! !

!methodRemoval: MultiRoomTest #test08_canNotUseADoorIfIsClosed stamp: 'ERMC 12/17/2020 20:08:29'!
test08_canNotUseADoorIfIsClosed

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	door closeWith: key. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door theDoorIsClosedErrorDescription equals: anError messageText.]
			!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:08:36'!
test07_doorCanNotBeUseFromAnEmptyOrInvalidPosition

	| room1  player door room2 |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room1.
		
	self 
		should: [ player take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room objectNotInRoomErrorDescription equals: anError messageText.]
			! !

!methodRemoval: MultiRoomTest #test07_doorcanNotBeUseFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 20:08:36'!
test07_doorcanNotBeUseFromAnEmptyOrInvalidPosition

	| room1  player door room2 |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North in: room1.
		
	self 
		should: [ player take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room objectNotInRoomErrorDescription equals: anError messageText.]
			!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:10:44'!
test09_portableObjectCanNotBeUseIt

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	room1 at: 1@1 put: key. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: key canNotBeUsedErrorDescription equals: anError messageText.]
			! !

!testRun: #MultiRoomTest #test09_portableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:10:53'!
ERROR!
!PortableObject methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:11:11'!
useBy: aPlayableCharacter 
	self shouldBeImplemented.! !
!PortableObject methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:11:48' prior: 50884879!
useBy: aPlayableCharacter 
	
	^self error: self canNotBeUsedErrorDescription! !

!testRun: #MultiRoomTest #test09_portableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:11:49'!
ERROR!
!PortableObject methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:11:54'!
canNotBeUsedErrorDescription
	self shouldBeImplemented.! !
!PortableObject methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:12:09' prior: 50884893!
canNotBeUsedErrorDescription
	
	^ ' can not be used'.! !

!testRun: #MultiRoomTest #test09_portableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:12:10'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 20:12:10'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 20:12:10'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 20:12:10'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 20:12:10'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 20:12:10'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 20:12:10'!
PASSED!

!testRun: #MultiRoomTest #test07_doorCanNotBeUseFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 20:12:10'!
PASSED!

!testRun: #MultiRoomTest #test08_doorCanNotBeUseIfItIsClosed stamp: 'ERMC 12/17/2020 20:12:10'!
PASSED!

!testRun: #MultiRoomTest #test09_portableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:12:10'!
PASSED!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:12:17'!
test09_nonPortableObjectCanNotBeUseIt

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	room1 at: 1@1 put: key. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: key canNotBeUsedErrorDescription equals: anError messageText.]
			! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:12:32'!
test10_nonPortableObjectCanNotBeUseIt

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	room1 at: 1@1 put: key. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: key canNotBeUsedErrorDescription equals: anError messageText.]
			! !

!methodRemoval: MultiRoomTest #test09_nonPortableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:12:32'!
test09_nonPortableObjectCanNotBeUseIt

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	room1 at: 1@1 put: key. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: key canNotBeUsedErrorDescription equals: anError messageText.]
			!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:12:54'!
box

	^ NonPortableObject named: 'Box'! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:12:54' prior: 50884473!
test06_CanNotPutADoorIntoANonPortableObject
	
	| room1 room2 box |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	box := self box.
	room1 at: 1@3 put: box. 
	

	self 
		should: [	Door at: 1@3 in: room1 at: 2@4 in: room2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room positionIsNotEmptyErrorDescription equals: anError messageText.
			self assert: 1@3 equals: (room1 positionOf: box)].! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:12:59' prior: 50885001!
test06_CanNotPutADoorIntoANonPortableObject
	
	| room1 room2 box |
	
	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	box _ self box.
	room1 at: 1@3 put: box. 
	

	self 
		should: [	Door at: 1@3 in: room1 at: 2@4 in: room2. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room positionIsNotEmptyErrorDescription equals: anError messageText.
			self assert: 1@3 equals: (room1 positionOf: box)].! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:13:32' prior: 50884957!
test10_nonPortableObjectCanNotBeUseIt

	| room1  player door room2  box |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	box _ self box.
	room1 at: 1@1 put: box.  
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: box canNotBeUsedErrorDescription equals: anError messageText.]
			! !

!testRun: #MultiRoomTest #test10_nonPortableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:13:43'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:14:16'!
useBy: aPlayableCharacter 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:15:13' prior: 50885060!
useBy: aPlayableCharacter 
	
	^ self error: self canNotBeUsedErrorDescription! !

!testRun: #MultiRoomTest #test10_nonPortableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:15:13'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:15:18'!
canNotBeUsedErrorDescription
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:15:41' prior: 50885075!
canNotBeUsedErrorDescription
	
	^ 'NonPortable object can not be used at this point'! !

!testRun: #MultiRoomTest #test10_nonPortableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:15:43'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 20:15:43'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 20:15:43'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 20:15:43'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 20:15:43'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 20:15:43'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 20:15:43'!
PASSED!

!testRun: #MultiRoomTest #test07_doorCanNotBeUseFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 20:15:43'!
PASSED!

!testRun: #MultiRoomTest #test08_doorCanNotBeUseIfItIsClosed stamp: 'ERMC 12/17/2020 20:15:43'!
PASSED!

!testRun: #MultiRoomTest #test09_portableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:15:43'!
PASSED!

!testRun: #MultiRoomTest #test10_nonPortableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:15:43'!
PASSED!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:21:31'!
test10_DoorCanNotBeOpenedWithAnIncorrectKey

	| room1  player door room2  box key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	
	door closeWith: 	key. 
	
	player := PlayableCharacter named: 'Luigi' using: self backpackWithKey at: 1@0 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: box canNotBeUsedErrorDescription equals: anError messageText.]
			! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:21:54'!
test11_DoorCanNotBeOpenedWithAnIncorrectKey

	| room1  player door room2  box key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	
	door closeWith: 	key. 
	
	player := PlayableCharacter named: 'Luigi' using: self backpackWithKey at: 1@0 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: box canNotBeUsedErrorDescription equals: anError messageText.]
			! !

!methodRemoval: MultiRoomTest #test10_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:21:54'!
test10_DoorCanNotBeOpenedWithAnIncorrectKey

	| room1  player door room2  box key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	
	door closeWith: 	key. 
	
	player := PlayableCharacter named: 'Luigi' using: self backpackWithKey at: 1@0 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: box canNotBeUsedErrorDescription equals: anError messageText.]
			!

!testRun: #MultiRoomTest #test11_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:22:02'!
ERROR!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:22:07'!
backpackWithKey
	self shouldBeImplemented.! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:23:13' prior: 50885189!
backpackWithKey

	| back |
	back _ Backpack containingUpTo: 100 limitingPointsTo: 100 .
	back add: (NoPointsPortableObject named: 'key' weighing: 50)! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:23:26' prior: 50885194!
backpackWithKey

	| back |
	back _ Backpack containingUpTo: 100 limitingPointsTo: 100 .
	back add: (NoPointsPortableObject named: 'key' weighing: 50).
	
	^ back! !

!testRun: #MultiRoomTest #test11_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:23:28'!
ERROR!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:23:58' prior: 50885145!
test11_DoorCanNotBeOpenedWithAnIncorrectKey

	| room1  player door room2  key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	
	door closeWith: 	key. 
	
	player := PlayableCharacter named: 'Luigi' using: self backpackWithKey at: 1@0 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door canNotBeUsedIncorrectKeyErrorDescription equals: anError messageText.]
			! !

!testRun: #MultiRoomTest #test11_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:24:12'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:24:18'!
canNotBeUsedIncorrectKeyErrorDescription
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:24:33' prior: 50885237!
canNotBeUsedIncorrectKeyErrorDescription
	
	^ 'The door can not be opened with an incorrect key'! !

!testRun: #MultiRoomTest #test11_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:24:34'!
FAILURE!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:24:55' prior: 50885214!
test11_DoorCanNotBeOpenedWithAnIncorrectKey

	| room1  player door room2  key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	
	door closeWith: 	key. 
	
	player := PlayableCharacter named: 'Luigi' using: self backpackWithKey at: 1@2 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door canNotBeUsedIncorrectKeyErrorDescription equals: anError messageText.]
			! !

!testRun: #MultiRoomTest #test11_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:24:57'!
FAILURE!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:27:30' prior: 50885253!
test11_DoorCanNotBeOpenedWithAnIncorrectKey

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	
	door closeWith: 	key. 
	
	player := PlayableCharacter named: 'Luigi' using: self backpackWithKey at: 1@0 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door canNotBeUsedIncorrectKeyErrorDescription equals: anError messageText.]
			! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:27:36'!
test12_DoorCanNotBeOpenedWithAnIncorrectKey

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	
	door closeWith: 	key. 
	
	player := PlayableCharacter named: 'Luigi' using: self backpackWithKey at: 1@0 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door canNotBeUsedIncorrectKeyErrorDescription equals: anError messageText.]
			! !

!methodRemoval: MultiRoomTest #test11_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:27:36'!
test11_DoorCanNotBeOpenedWithAnIncorrectKey

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	
	door closeWith: 	key. 
	
	player := PlayableCharacter named: 'Luigi' using: self backpackWithKey at: 1@0 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door canNotBeUsedIncorrectKeyErrorDescription equals: anError messageText.]
			!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:32:26'!
test11_AKeyCanBeTakenAndCanBeUsed

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	key _ self key. 
	room1 at: 1@1 put: key. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player take. 
	
	door closeWith: 	key. 
		
	self assert: (player backpackIncludes: key).
	self assert: (room1 isEmptyAt: 1@1).
	self assert: door isClosed
			! !

!testRun: #MultiRoomTest #test11_AKeyCanBeTakenAndCanBeUsed stamp: 'ERMC 12/17/2020 20:32:29'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 20:32:29'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 20:32:29'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 20:32:29'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 20:32:29'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 20:32:29'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 20:32:29'!
PASSED!

!testRun: #MultiRoomTest #test07_doorCanNotBeUseFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 20:32:29'!
PASSED!

!testRun: #MultiRoomTest #test08_doorCanNotBeUseIfItIsClosed stamp: 'ERMC 12/17/2020 20:32:29'!
PASSED!

!testRun: #MultiRoomTest #test09_portableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:32:29'!
PASSED!

!testRun: #MultiRoomTest #test10_nonPortableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:32:29'!
PASSED!

!testRun: #MultiRoomTest #test11_AKeyCanBeTakenAndCanBeUsed stamp: 'ERMC 12/17/2020 20:32:29'!
PASSED!

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:32:29'!
FAILURE!

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:32:29'!
FAILURE!

!testRun: #MultiRoomTest #test11_AKeyCanBeTakenAndCanBeUsed stamp: 'ERMC 12/17/2020 20:32:53'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 20:32:53'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 20:32:53'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 20:32:53'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 20:32:53'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 20:32:53'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 20:32:53'!
PASSED!

!testRun: #MultiRoomTest #test07_doorCanNotBeUseFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 20:32:53'!
PASSED!

!testRun: #MultiRoomTest #test08_doorCanNotBeUseIfItIsClosed stamp: 'ERMC 12/17/2020 20:32:53'!
PASSED!

!testRun: #MultiRoomTest #test09_portableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:32:53'!
PASSED!

!testRun: #MultiRoomTest #test10_nonPortableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:32:53'!
PASSED!

!testRun: #MultiRoomTest #test11_AKeyCanBeTakenAndCanBeUsed stamp: 'ERMC 12/17/2020 20:32:53'!
PASSED!

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:32:53'!
FAILURE!

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:32:53'!
FAILURE!

!testRun: #MultiRoomTest #test11_AKeyCanBeTakenAndCanBeUsed stamp: 'ERMC 12/17/2020 20:33:03'!
PASSED!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:36:54' prior: 50885297!
test12_DoorCanNotBeOpenedWithAnIncorrectKey

	| room1  player door room2 key anotherKey |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	door closeWith: 	key. 
	
	anotherKey _ self key. 
	room1 at: 1@1 put: anotherKey.  
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player take. 
	
	self 
		should: [ player openUsing: anotherKey  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door canNotBeUsedIncorrectKeyErrorDescription equals: anError messageText.
			self assert: door isClosed.
			self assert: (player backpackIncludes: anotherKey).
			self deny: (player backpackIncludes: key)]
			! !

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:37:06'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:37:26'!
openUsing: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:39:04' prior: 50885488!
openUsing: aKey 

	| door |
	
	door _ room at: self forwardPosition.
	door openUsing: aKey! !

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:39:06'!
FAILURE!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:39:56' prior: 50885457!
test12_DoorCanNotBeOpenedWithAnIncorrectKey

	| room1  player door room2 key anotherKey |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	door closeWith: 	key. 
	
	anotherKey _ self key. 
	room1 at: 1@1 put: anotherKey.  
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player take. 
	
	player moveForward.
	
	self 
		should: [ player openUsing: anotherKey  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door canNotBeUsedIncorrectKeyErrorDescription equals: anError messageText.
			self assert: door isClosed.
			self assert: (player backpackIncludes: anotherKey).
			self deny: (player backpackIncludes: key)]
			! !

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:39:58'!
FAILURE!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:40:12' prior: 50885504!
test12_DoorCanNotBeOpenedWithAnIncorrectKey

	| room1  player door room2 key anotherKey |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@2 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	door closeWith: 	key. 
	
	anotherKey _ self key. 
	room1 at: 1@1 put: anotherKey.  
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player take. 
	
	player moveForward.
	
	self 
		should: [ player openUsing: anotherKey  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door canNotBeUsedIncorrectKeyErrorDescription equals: anError messageText.
			self assert: door isClosed.
			self assert: (player backpackIncludes: anotherKey).
			self deny: (player backpackIncludes: key)]
			! !

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:40:14'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:40:20'!
openUsing: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:41:28' prior: 50885567!
openUsing: aKey

	key = aKey ifFalse: [self error: self canNotBeUsedIncorrectKeyErrorDescription]

	! !

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:41:32'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 20:41:32'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 20:41:32'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 20:41:32'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 20:41:32'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 20:41:32'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 20:41:32'!
PASSED!

!testRun: #MultiRoomTest #test07_doorCanNotBeUseFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 20:41:32'!
PASSED!

!testRun: #MultiRoomTest #test08_doorCanNotBeUseIfItIsClosed stamp: 'ERMC 12/17/2020 20:41:32'!
PASSED!

!testRun: #MultiRoomTest #test09_portableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:41:32'!
PASSED!

!testRun: #MultiRoomTest #test10_nonPortableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:41:32'!
PASSED!

!testRun: #MultiRoomTest #test11_AKeyCanBeTakenAndCanBeUsed stamp: 'ERMC 12/17/2020 20:41:32'!
PASSED!

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:41:32'!
PASSED!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:43:19'!
test12_DoorCanBeOpenedWithCorrectKey

	| room1  player door room2 key anotherKey |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@2 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	room1 at: 1@1 put: key.
	door closeWith: 	key. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player take. 
	
	player moveForward.
	
	self 
		should: [ player openUsing: key  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door canNotBeUsedIncorrectKeyErrorDescription equals: anError messageText.
			self assert: door isClosed.
			self assert: (player backpackIncludes: anotherKey).
			self deny: (player backpackIncludes: key)]
			! !
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:46:24' prior: 50885623!
test12_DoorCanBeOpenedWithCorrectKey

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@2 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	room1 at: 1@1 put: key.
	door closeWith: 	key. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player take. 
	
	player moveForward.
	player openUsing: key. 
	
	self assert: door isOpened.
	self assert: (player backpackIncludes: key).
			! !

!testRun: #MultiRoomTest #test12_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 20:46:28'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:46:39'!
isOpened
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:47:01' prior: 50885672!
isOpened
	
	^ self isClosed not! !

!testRun: #MultiRoomTest #test12_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 20:47:03'!
FAILURE!

!testRun: #MultiRoomTest #test12_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 20:47:11'!
FAILURE!
!Door methodsFor: 'initialization' stamp: 'ERMC 12/17/2020 20:47:38' prior: 50883745!
initializeAt: aSrcPosition in: aSrcRoom at: aDstPosition in: aDstRoom 

	srcPosition := aSrcPosition.
	srcRoom := aSrcRoom.
	aSrcRoom at: aSrcPosition put: self.
	
	dstPosition := aDstPosition.
	dstRoom := aDstRoom.
	aDstRoom at: aDstPosition put: self. 
	
	state _ #Opened! !

!testRun: #MultiRoomTest #test12_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 20:47:40'!
FAILURE!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:48:33' prior: 50885677!
isOpened
	
	^ state = #Opened! !
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:48:56' prior: 50884706!
isClosed
	
	^(self isOpened) not! !

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 20:49:01'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 20:49:01'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 20:49:01'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 20:49:01'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 20:49:01'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 20:49:01'!
PASSED!

!testRun: #MultiRoomTest #test07_doorCanNotBeUseFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 20:49:01'!
PASSED!

!testRun: #MultiRoomTest #test08_doorCanNotBeUseIfItIsClosed stamp: 'ERMC 12/17/2020 20:49:01'!
PASSED!

!testRun: #MultiRoomTest #test09_portableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:49:01'!
PASSED!

!testRun: #MultiRoomTest #test10_nonPortableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:49:01'!
PASSED!

!testRun: #MultiRoomTest #test11_AKeyCanBeTakenAndCanBeUsed stamp: 'ERMC 12/17/2020 20:49:01'!
PASSED!

!testRun: #MultiRoomTest #test12_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 20:49:01'!
FAILURE!

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:49:01'!
PASSED!

!testRun: #MultiRoomTest #test12_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 20:49:01'!
FAILURE!
!MultiRoomTest methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:49:17'!
test13_DoorCanBeOpenedWithCorrectKey

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@2 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	room1 at: 1@1 put: key.
	door closeWith: 	key. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player take. 
	
	player moveForward.
	player openUsing: key. 
	
	self assert: door isOpened.
	self assert: (player backpackIncludes: key).
			! !

!methodRemoval: MultiRoomTest #test12_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 20:49:17'!
test12_DoorCanBeOpenedWithCorrectKey

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@2 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	room1 at: 1@1 put: key.
	door closeWith: 	key. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player take. 
	
	player moveForward.
	player openUsing: key. 
	
	self assert: door isOpened.
	self assert: (player backpackIncludes: key).
			!

!testRun: #MultiRoomTest #test13_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 20:49:57'!
FAILURE!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 20:51:04' prior: 50885572!
openUsing: aKey

	key = aKey ifFalse: [self error: self canNotBeUsedIncorrectKeyErrorDescription].
	state _ #Opened

	! !

!testRun: #MultiRoomTest #test13_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 20:51:06'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 20:51:06'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 20:51:06'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 20:51:06'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 20:51:06'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 20:51:06'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 20:51:06'!
PASSED!

!testRun: #MultiRoomTest #test07_doorCanNotBeUseFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 20:51:06'!
PASSED!

!testRun: #MultiRoomTest #test08_doorCanNotBeUseIfItIsClosed stamp: 'ERMC 12/17/2020 20:51:06'!
PASSED!

!testRun: #MultiRoomTest #test09_portableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:51:06'!
PASSED!

!testRun: #MultiRoomTest #test10_nonPortableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:51:06'!
PASSED!

!testRun: #MultiRoomTest #test11_AKeyCanBeTakenAndCanBeUsed stamp: 'ERMC 12/17/2020 20:51:06'!
PASSED!

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:51:06'!
PASSED!

!testRun: #MultiRoomTest #test13_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 20:51:06'!
PASSED!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 20:59:12'!
test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaQueApareceEsInvalida

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@2 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	room1 at: 1@1 put: key.
	door closeWith: 	key. 
	
	self assert: door isOpened.
	self assert: (player backpackIncludes: key).
			! !

!testRun: #MultiRoomTest #test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaQueApareceEsInvalida stamp: 'ERMC 12/17/2020 20:59:18'!
FAILURE!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 20:59:30' prior: 50885855!
test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaQueApareceEsInvalida

	| room1  door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@2 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	room1 at: 1@1 put: key.
	door closeWith: 	key. 
	
			! !

!testRun: #MultiRoomTest #test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaQueApareceEsInvalida stamp: 'ERMC 12/17/2020 20:59:33'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 20:59:33'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 20:59:33'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 20:59:33'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 20:59:33'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 20:59:33'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 20:59:33'!
PASSED!

!testRun: #MultiRoomTest #test07_doorCanNotBeUseFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 20:59:33'!
PASSED!

!testRun: #MultiRoomTest #test08_doorCanNotBeUseIfItIsClosed stamp: 'ERMC 12/17/2020 20:59:33'!
PASSED!

!testRun: #MultiRoomTest #test09_portableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:59:33'!
PASSED!

!testRun: #MultiRoomTest #test10_nonPortableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 20:59:33'!
PASSED!

!testRun: #MultiRoomTest #test11_AKeyCanBeTakenAndCanBeUsed stamp: 'ERMC 12/17/2020 20:59:33'!
PASSED!

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 20:59:33'!
PASSED!

!testRun: #MultiRoomTest #test13_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 20:59:33'!
PASSED!

!testRun: #MultiRoomTest #test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaQueApareceEsInvalida stamp: 'ERMC 12/17/2020 20:59:33'!
PASSED!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:00:04'!
test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida

	| room1  door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@2 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	room1 at: 1@1 put: key.
	door closeWith: 	key. 
	
			! !

!methodRemoval: MultiRoomTest #test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaQueApareceEsInvalida stamp: 'ERMC 12/17/2020 21:00:04'!
test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaQueApareceEsInvalida

	| room1  door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@2 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	room1 at: 1@1 put: key.
	door closeWith: 	key. 
	
			!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:03:15' prior: 50885939!
test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida

	| room1  door room2 player |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 9@9 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door canNotCrossInvalidPositionErrorDescription equals: anError messageText.] 
	
			! !

!testRun: #MultiRoomTest #test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida stamp: 'ERMC 12/17/2020 21:05:12'!
FAILURE!

!testRun: #MultiRoomTest #test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida stamp: 'ERMC 12/17/2020 21:05:20'!
FAILURE!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 21:11:23' prior: 50884692!
useBy: aPlayableCharacter 

	| nextPosition |
	self isClosed ifTrue: [^ self error: self theDoorIsClosedErrorDescription].
	nextPosition _ aPlayableCharacter forwardPosition.
	dstRoom  assertPositionIsValid: nextPosition.! !

!testRun: #MultiRoomTest #test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida stamp: 'ERMC 12/17/2020 21:11:26'!
FAILURE!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:12:05' prior: 50885964!
test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida

	| room1  door room2 player |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 9@9 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room invalidPositionErrorDescription equals: anError messageText.] 
	
			! !

!testRun: #MultiRoomTest #test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida stamp: 'ERMC 12/17/2020 21:12:08'!
FAILURE!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 21:14:36' prior: 50885992!
useBy: aPlayableCharacter 

	| nextPosition |
	self isClosed ifTrue: [^ self error: self theDoorIsClosedErrorDescription].
	nextPosition _ self calculateNextPosition: aPlayableCharacter. 
	dstRoom  assertPositionIsValid: nextPosition.! !

!testRun: #MultiRoomTest #test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida stamp: 'ERMC 12/17/2020 21:14:42'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 21:14:59'!
calculateNextPosition: aPlayableCharacter 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 21:16:54'!
calculateNextPosition: aDstRoom standing: aPosition
 
	! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 21:18:01' prior: 50886052!
calculateNextPosition: aDstRoom standing: aPosition

	^ aPosition + heading forwardPoint
 
	! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 21:18:19'!
calculateNextPosition:  aPosition

	^ aPosition + heading forwardPoint
 
	! !

!methodRemoval: PlayableCharacter #calculateNextPosition:standing: stamp: 'ERMC 12/17/2020 21:18:22'!
calculateNextPosition: aDstRoom standing: aPosition

	^ aPosition + heading forwardPoint
 
	!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 21:18:43' prior: 50886031!
useBy: aPlayableCharacter 

	| nextPosition |
	self isClosed ifTrue: [^ self error: self theDoorIsClosedErrorDescription].
	nextPosition _ aPlayableCharacter calculateNextPosition: dstPosition. 
	dstRoom  assertPositionIsValid: nextPosition.! !

!testRun: #MultiRoomTest #test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida stamp: 'ERMC 12/17/2020 21:18:56'!
PASSED!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:19:20'!
test15_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida

	| room1  door room2 player |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 9@9 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room invalidPositionErrorDescription equals: anError messageText.] 
	
			! !

!methodRemoval: MultiRoomTest #test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida stamp: 'ERMC 12/17/2020 21:19:20'!
test14_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida

	| room1  door room2 player |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 9@9 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room invalidPositionErrorDescription equals: anError messageText.] 
	
			!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:19:41'!
test14_DoorCanBeOpenedWithCorrectKey

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@2 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	room1 at: 1@1 put: key.
	door closeWith: 	key. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player take. 
	
	player moveForward.
	player openUsing: key. 
	
	self assert: door isOpened.
	self assert: (player backpackIncludes: key).
			! !

!methodRemoval: MultiRoomTest #test13_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 21:19:41'!
test13_DoorCanBeOpenedWithCorrectKey

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@2 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	room1 at: 1@1 put: key.
	door closeWith: 	key. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player take. 
	
	player moveForward.
	player openUsing: key. 
	
	self assert: door isOpened.
	self assert: (player backpackIncludes: key).
			!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:20:47'!
test13_IfDoorIsClosedCanNotBeUsedFromTheOtherRoom

	| room1  player door room2 key anotherKey |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@2 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	door closeWith: 	key. 
	
	anotherKey _ self key. 
	room1 at: 1@1 put: anotherKey.  
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player take. 
	
	player moveForward.
	
	self 
		should: [ player openUsing: anotherKey  ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door canNotBeUsedIncorrectKeyErrorDescription equals: anError messageText.
			self assert: door isClosed.
			self assert: (player backpackIncludes: anotherKey).
			self deny: (player backpackIncludes: key)]
			! !
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:23:33' prior: 50886168!
test13_IfDoorIsClosedCanNotBeUsedFromTheOtherRoom

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@2 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	door closeWith: 	key. 

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #North in: room2.
	
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door canNotBeUsedErrorDescription equals: anError messageText.
			self assert: door isClosed.]
			! !

!testRun: #MultiRoomTest #test13_IfDoorIsClosedCanNotBeUsedFromTheOtherRoom stamp: 'ERMC 12/17/2020 21:23:36'!
ERROR!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:28:55'!
test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom

	| room1  door room2 player |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 0@1 in: room1 at: 4@2 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room invalidPositionErrorDescription equals: anError messageText.] 
	
			! !
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:34:44' prior: 50886220!
test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom

	| room1  door room2 player |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 0@1 in: room1 at: 4@2 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	player use.
	
	self assert: (player isAt: 4@3heading: #North).
	self assert: 4@3 equals: (room2 positionOf: player).! !

!testRun: #MultiRoomTest #test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom stamp: 'ERMC 12/17/2020 21:34:51'!
FAILURE!
!Door methodsFor: 'use' stamp: 'ERMC 12/17/2020 21:38:27' prior: 50886076!
useBy: aPlayableCharacter 

	| nextPosition |
	self isClosed ifTrue: [^ self error: self theDoorIsClosedErrorDescription].
	nextPosition _ aPlayableCharacter calculateNextPosition: dstPosition. 
	dstRoom  assertPositionIsValid: nextPosition.
	
	srcRoom removeAt: aPlayableCharacter position. 
	dstRoom at: nextPosition put: aPlayableCharacter. ! !

!testRun: #MultiRoomTest #test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom stamp: 'ERMC 12/17/2020 21:38:29'!
ERROR!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:39:13' prior: 50886240!
test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom

	| room1  door room2 player |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 0@1 in: room1 at: 4@2 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	player use.
	
	self assert: (player isAt: 4@3heading: #North).
	self assert: 4@3 equals: (room2 positionOf: player).
	self assert: (room1 isEmptyAt: 0@0)! !
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:39:30' prior: 50886281!
test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom

	| room1  room2 player |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	Door at: 0@1 in: room1 at: 4@2 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	player use.
	
	self assert: (player isAt: 4@3heading: #North).
	self assert: 4@3 equals: (room2 positionOf: player).
	self assert: (room1 isEmptyAt: 0@0)! !

!testRun: #MultiRoomTest #test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom stamp: 'ERMC 12/17/2020 21:39:33'!
ERROR!

self position!
!Door methodsFor: 'use' stamp: 'ERMC 12/17/2020 21:40:44' prior: 50886262!
useBy: aPlayableCharacter 

	| nextPosition |
	self isClosed ifTrue: [^ self error: self theDoorIsClosedErrorDescription].
	nextPosition _ aPlayableCharacter calculateNextPosition: dstPosition. 
	dstRoom  assertPositionIsValid: nextPosition.
	
	srcRoom removeAt: (aPlayableCharacter position). 
	dstRoom at: nextPosition put: aPlayableCharacter. ! !

!testRun: #MultiRoomTest #test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom stamp: 'ERMC 12/17/2020 21:41:47'!
ERROR!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:42:40' prior: 50886299!
test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom

	| room1  room2 player |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	Door at: 0@1 in: room1 at: 4@2 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	player use.
	
	self assert: (room1 isEmptyAt: 0@0).
	self assert: 4@3 equals: (room2 positionOf: player).
	self assert: 4@3 equals: (room2 positionOf: player).
	! !

!testRun: #MultiRoomTest #test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom stamp: 'ERMC 12/17/2020 21:42:41'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 21:42:41'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 21:42:41'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 21:42:41'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 21:42:41'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 21:42:41'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 21:42:41'!
PASSED!

!testRun: #MultiRoomTest #test07_doorCanNotBeUseFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 21:42:41'!
PASSED!

!testRun: #MultiRoomTest #test08_doorCanNotBeUseIfItIsClosed stamp: 'ERMC 12/17/2020 21:42:41'!
PASSED!

!testRun: #MultiRoomTest #test09_portableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 21:42:41'!
PASSED!

!testRun: #MultiRoomTest #test10_nonPortableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 21:42:41'!
PASSED!

!testRun: #MultiRoomTest #test11_AKeyCanBeTakenAndCanBeUsed stamp: 'ERMC 12/17/2020 21:42:41'!
PASSED!

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 21:42:41'!
PASSED!

!testRun: #MultiRoomTest #test13_IfDoorIsClosedCanNotBeUsedFromTheOtherRoom stamp: 'ERMC 12/17/2020 21:42:41'!
ERROR!

!testRun: #MultiRoomTest #test14_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 21:42:41'!
PASSED!

!testRun: #MultiRoomTest #test15_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida stamp: 'ERMC 12/17/2020 21:42:41'!
PASSED!

!testRun: #MultiRoomTest #test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom stamp: 'ERMC 12/17/2020 21:42:41'!
PASSED!

!testRun: #MultiRoomTest #test13_IfDoorIsClosedCanNotBeUsedFromTheOtherRoom stamp: 'ERMC 12/17/2020 21:42:41'!
ERROR!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:43:21' prior: 50886341!
test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom

	| room1  room2 player |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	Door at: 0@1 in: room1 at: 4@2 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	player use.
	
	self assert: (room1 isEmptyAt: 0@0).
	self assert: 4@3 equals: (room2 positionOf: player).
	! !

!testRun: #MultiRoomTest #test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom stamp: 'ERMC 12/17/2020 21:43:23'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 21:43:23'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 21:43:23'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 21:43:23'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 21:43:23'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 21:43:23'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 21:43:23'!
PASSED!

!testRun: #MultiRoomTest #test07_doorCanNotBeUseFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 21:43:23'!
PASSED!

!testRun: #MultiRoomTest #test08_doorCanNotBeUseIfItIsClosed stamp: 'ERMC 12/17/2020 21:43:23'!
PASSED!

!testRun: #MultiRoomTest #test09_portableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 21:43:23'!
PASSED!

!testRun: #MultiRoomTest #test10_nonPortableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 21:43:23'!
PASSED!

!testRun: #MultiRoomTest #test11_AKeyCanBeTakenAndCanBeUsed stamp: 'ERMC 12/17/2020 21:43:23'!
PASSED!

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 21:43:23'!
PASSED!

!testRun: #MultiRoomTest #test13_IfDoorIsClosedCanNotBeUsedFromTheOtherRoom stamp: 'ERMC 12/17/2020 21:43:23'!
ERROR!

!testRun: #MultiRoomTest #test14_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 21:43:23'!
PASSED!

!testRun: #MultiRoomTest #test15_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida stamp: 'ERMC 12/17/2020 21:43:23'!
PASSED!

!testRun: #MultiRoomTest #test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom stamp: 'ERMC 12/17/2020 21:43:23'!
PASSED!

!testRun: #MultiRoomTest #test13_IfDoorIsClosedCanNotBeUsedFromTheOtherRoom stamp: 'ERMC 12/17/2020 21:43:23'!
ERROR!

!testRun: #MultiRoomTest #test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom stamp: 'ERMC 12/17/2020 21:43:35'!
PASSED!

!testRun: #MultiRoomTest #test13_IfDoorIsClosedCanNotBeUsedFromTheOtherRoom stamp: 'ERMC 12/17/2020 21:43:48'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 21:44:04'!
canNotBeUsedErrorDescription
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'ERMC 12/17/2020 21:44:19' prior: 50886515!
canNotBeUsedErrorDescription
	
	^ 'can not be used if the door is closed'! !

!testRun: #MultiRoomTest #test13_IfDoorIsClosedCanNotBeUsedFromTheOtherRoom stamp: 'ERMC 12/17/2020 21:44:20'!
FAILURE!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:44:47' prior: 50886196!
test13_IfDoorIsClosedCanNotBeUsedFromTheOtherRoom

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@2 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	door closeWith: 	key. 

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #North in: room2.
	
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door canNotBeUsedErrorDescription equals: anError messageText.
			self assert: door isClosed.]
			! !

!testRun: #MultiRoomTest #test13_IfDoorIsClosedCanNotBeUsedFromTheOtherRoom stamp: 'ERMC 12/17/2020 21:44:47'!
FAILURE!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:46:09' prior: 50886529!
test13_IfDoorIsClosedCanNotBeUsedFromTheOtherRoom

	| room1  player door room2 key |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@2 in: room1 at: 2@4 in: room2. 
	
	key _ self key. 
	door closeWith: 	key. 

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #North in: room2.
	
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: door theDoorIsClosedErrorDescription equals: anError messageText.
			self assert: door isClosed.]
			! !

!testRun: #MultiRoomTest #test13_IfDoorIsClosedCanNotBeUsedFromTheOtherRoom stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #MultiRoomTest #test07_doorCanNotBeUseFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #MultiRoomTest #test08_doorCanNotBeUseIfItIsClosed stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #MultiRoomTest #test09_portableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #MultiRoomTest #test10_nonPortableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #MultiRoomTest #test11_AKeyCanBeTakenAndCanBeUsed stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #MultiRoomTest #test13_IfDoorIsClosedCanNotBeUsedFromTheOtherRoom stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #MultiRoomTest #test14_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #MultiRoomTest #test15_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #MultiRoomTest #test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom stamp: 'ERMC 12/17/2020 21:46:11'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #MultiRoomTest #test07_doorCanNotBeUseFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #MultiRoomTest #test08_doorCanNotBeUseIfItIsClosed stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #MultiRoomTest #test09_portableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #MultiRoomTest #test10_nonPortableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #MultiRoomTest #test11_AKeyCanBeTakenAndCanBeUsed stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #MultiRoomTest #test13_IfDoorIsClosedCanNotBeUsedFromTheOtherRoom stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #MultiRoomTest #test14_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #MultiRoomTest #test15_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #MultiRoomTest #test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ERMC 12/17/2020 21:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ERMC 12/17/2020 21:47:05'!
PASSED!

!methodRemoval: Door #canNotBeUsedErrorDescription stamp: 'ERMC 12/17/2020 21:47:23'!
canNotBeUsedErrorDescription
	
	^ 'can not be used if the door is closed'!

!methodRemoval: MultiRoomTest #backpackWithKey stamp: 'ERMC 12/17/2020 21:47:38'!
backpackWithKey

	| back |
	back _ Backpack containingUpTo: 100 limitingPointsTo: 100 .
	back add: (NoPointsPortableObject named: 'key' weighing: 50).
	
	^ back!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:51:07'!
test15_DoorCanNotBeUsedIfThePositionInWichItAppearsAtTheOtherRoomIsInvalid

	| room1  door room2 player |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 9@9 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room invalidPositionErrorDescription equals: anError messageText.] 
	
			! !

!methodRemoval: MultiRoomTest #test15_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida stamp: 'ERMC 12/17/2020 21:51:07'!
test15_LaPuertaNoPuedeUsarseSiLaPosicionEnLaSeQueApareceEsInvalida

	| room1  door room2 player |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 9@9 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room invalidPositionErrorDescription equals: anError messageText.] 
	
			!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:52:20'!
test17_DoorCanNotBeUsedIfThereIsAnObjectAtTheOtherSideOfTheRoom

	| room1  room2 player |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	Door at: 0@1 in: room1 at: 4@2 in: room2. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	player use.
	
	self assert: (room1 isEmptyAt: 0@0).
	self assert: 4@3 equals: (room2 positionOf: player).
	! !
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:53:20' prior: 50886917!
test17_DoorCanNotBeUsedIfThereIsAnObjectAtTheOtherSideOfTheRoom

	| room1  door room2 player |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	door _ Door at: 1@3 in: room1 at: 4@3 in: room2. 
	
	room2 at: 4@4 put: self box.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room invalidPositionErrorDescription equals: anError messageText.]
	! !
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:53:28' prior: 50886933!
test17_DoorCanNotBeUsedIfThereIsAnObjectAtTheOtherSideOfTheRoom

	| room1  room2 player |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	Door at: 1@3 in: room1 at: 4@3 in: room2. 
	
	room2 at: 4@4 put: self box.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room invalidPositionErrorDescription equals: anError messageText.]
	! !

!testRun: #MultiRoomTest #test17_DoorCanNotBeUsedIfThereIsAnObjectAtTheOtherSideOfTheRoom stamp: 'ERMC 12/17/2020 21:53:30'!
FAILURE!
!MultiRoomTest methodsFor: 'tests' stamp: 'ERMC 12/17/2020 21:54:30' prior: 50886953!
test17_DoorCanNotBeUsedIfThereIsAnObjectAtTheOtherSideOfTheRoom

	| room1  room2 player |

	room1 _ self defaultRoom. 
	room2 _ self defaultRoom. 
	
	Door at: 1@3 in: room1 at: 4@3 in: room2. 
	
	room2 at: 4@4 put: self box.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: room1.
		
	self 
		should: [ player use ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionIsNotEmptyErrorDescription equals: anError messageText.]
	! !

!testRun: #MultiRoomTest #test17_DoorCanNotBeUsedIfThereIsAnObjectAtTheOtherSideOfTheRoom stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test01_CanNotCreateDoorInTheSameRoom stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test02_CanNotCreateDoorInAInvalidPositionAtRoom stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test03_WhenCreateCorrectDoorKnowsBothPositionInRoom stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test04_CanNotPutDoorAboveAStageObject stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test05_ADoorCanNotBeTaken stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test06_CanNotPutADoorIntoANonPortableObject stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test07_doorCanNotBeUseFromAnEmptyOrInvalidPosition stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test08_doorCanNotBeUseIfItIsClosed stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test09_portableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test10_nonPortableObjectCanNotBeUseIt stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test11_AKeyCanBeTakenAndCanBeUsed stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test12_DoorCanNotBeOpenedWithAnIncorrectKey stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test13_IfDoorIsClosedCanNotBeUsedFromTheOtherRoom stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test14_DoorCanBeOpenedWithCorrectKey stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test15_DoorCanNotBeUsedIfThePositionInWichItAppearsAtTheOtherRoomIsInvalid stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test16_WhenCrossTheDoorCorrectlyPlayerIsAtRightPositionWhenAppearAtTheOtherRoom stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!

!testRun: #MultiRoomTest #test17_DoorCanNotBeUsedIfThereIsAnObjectAtTheOtherSideOfTheRoom stamp: 'ERMC 12/17/2020 21:54:32'!
PASSED!