----End fileIn of /home/jampuero/Documentos/isw1/linux64/ISW1-2020-2C-Recuperatorio-2doParcial.st----!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/16/2020 17:07:31'!
PASSED!

!classRemoval: #PointsPortableObject stamp: 'ja 12/16/2020 17:43:02'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'ja 12/16/2020 17:43:03'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PortableObject stamp: 'ja 12/16/2020 17:43:03'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #NonPortableObject stamp: 'ja 12/16/2020 17:43:04'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #StageObject stamp: 'ja 12/16/2020 17:43:04'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #Room stamp: 'ja 12/16/2020 17:43:05'!
Object subclass: #Room
	instanceVariableNames: 'width height contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'ja 12/16/2020 17:43:05'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'ja 12/16/2020 17:43:06'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #Backpack stamp: 'ja 12/16/2020 17:43:06'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #RoomTest stamp: 'ja 12/16/2020 17:43:07'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'ja 12/16/2020 17:43:08'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #BackpackTest stamp: 'ja 12/16/2020 17:43:08'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

----End fileIn of /home/jampuero/Documentos/isw1/linux64/ISW1-2020-2C-2doParcial (1).st----!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/16/2020 17:45:19'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/16/2020 17:49:22'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'no messages' stamp: 'ja 12/16/2020 17:49:17'!
test01_canNotCreateARoomWithHeightLessThanZero

		self 
			should: [Room withHeight: 0 andWidth: 1] 
			raise: Error  
			withMessageText: Room invalidCreationRoomErrorDescription.! !

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 17:49:26'!
ERROR!
!Object class methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 17:49:32'!
invalidCreationRoomErrorDescription
	self shouldBeImplemented.! !

!methodRemoval: Object class #invalidCreationRoomErrorDescription stamp: 'ja 12/16/2020 17:51:07'!
invalidCreationRoomErrorDescription
	self shouldBeImplemented.!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 17:51:13'!
ERROR!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 17:51:13'!
ERROR!
!Room class methodsFor: 'error description' stamp: 'ja 12/16/2020 17:51:25'!
invalidCreationRoomErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error description' stamp: 'ja 12/16/2020 17:51:45' prior: 51017186!
invalidCreationRoomErrorDescription
	
	^ 'Invalid creation room'! !

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 17:51:47'!
FAILURE!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 17:52:00'!
FAILURE!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 17:52:26'!
FAILURE!
!Room class methodsFor: 'error description' stamp: 'ja 12/16/2020 17:53:30'!
withHeight: aHeight andWidth: aWidth

	aHeight <= 0 ifTrue:[ self error: self invalidCreationRoomErrorDescription ].! !

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 17:53:33'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 17:53:58'!
test02_canNotCreateARoomWithWidthLessThanZero

		self 
			should: [Room withHeight: 1 andWidth: 0] 
			raise: Error  
			withMessageText: Room invalidCreationRoomErrorDescription.! !

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 17:53:59'!
FAILURE!
!Room class methodsFor: 'error description' stamp: 'ja 12/16/2020 17:54:29' prior: 51017206!
withHeight: aHeight andWidth: aWidth

	(aHeight <= 0 or:[ aHeight <= 0 ]) ifTrue:[ self error: self invalidCreationRoomErrorDescription ].! !

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 17:54:31'!
FAILURE!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 17:54:36'!
FAILURE!
!Room class methodsFor: 'error description' stamp: 'ja 12/16/2020 17:54:50' prior: 51017229!
withHeight: aHeight andWidth: aWidth

	(aHeight <= 0 or: [aHeight <= 0 ]) ifTrue:[ self error: self invalidCreationRoomErrorDescription ].! !
!Room class methodsFor: 'error description' stamp: 'ja 12/16/2020 17:54:52' prior: 51017244!
withHeight: aHeight andWidth: aWidth

	(aHeight <= 0 or: [ aHeight <= 0 ]) ifTrue:[ self error: self invalidCreationRoomErrorDescription ].! !
!Room class methodsFor: 'error description' stamp: 'ja 12/16/2020 17:54:57' prior: 51017252!
withHeight: aHeight andWidth: aWidth

	(aHeight <= 0 or: [ aWidth <= 0 ]) ifTrue:[ self error: self invalidCreationRoomErrorDescription ].! !

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 17:54:59'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 17:54:59'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 17:54:59'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 17:55:22'!
test02_canNotCreateARoomWithWidthNotInteger

		self 
			should: [Room withHeight: 1.1 andWidth: 0] 
			raise: Error  
			withMessageText: Room invalidCreationRoomErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 17:55:28'!
test03_canNotCreateARoomWithWidthNotInteger

		self 
			should: [Room withHeight: 1.1 andWidth: 0] 
			raise: Error  
			withMessageText: Room invalidCreationRoomErrorDescription.! !

!methodRemoval: RoomTest #test02_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 17:55:32'!
test02_canNotCreateARoomWithWidthNotInteger

		self 
			should: [Room withHeight: 1.1 andWidth: 0] 
			raise: Error  
			withMessageText: Room invalidCreationRoomErrorDescription.!

!testRun: #RoomTest #test03_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 17:55:38'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 17:55:38'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 17:55:38'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 17:55:38'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 17:55:50' prior: 51017287!
test03_canNotCreateARoomWithWidthNotInteger

		self 
			should: [Room withHeight: 1.1 andWidth: 1] 
			raise: Error  
			withMessageText: Room invalidCreationRoomErrorDescription.! !

!testRun: #RoomTest #test03_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 17:55:51'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 17:56:04'!
test03_canNotCreateARoomWithHeightNotInteger

		self 
			should: [Room withHeight: 1.1 andWidth: 1] 
			raise: Error  
			withMessageText: Room invalidCreationRoomErrorDescription.! !

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 17:56:05'!
FAILURE!
!Room class methodsFor: 'error description' stamp: 'ja 12/16/2020 17:56:32' prior: 51017260!
withHeight: aHeight andWidth: aWidth

	(aHeight <= 0 or: [ aWidth <= 0 ] or:[ aHeight isInteger not]) ifTrue:[ self error: self invalidCreationRoomErrorDescription ].! !

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 17:56:34'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 17:56:34'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 17:56:34'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 17:56:34'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 17:56:34'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 17:56:52'!
test04_canNotCreateARoomWithWidthNotInteger

		self 
			should: [Room withHeight: 1 andWidth: 1.1] 
			raise: Error  
			withMessageText: Room invalidCreationRoomErrorDescription.! !

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 17:56:54'!
FAILURE!
!Room class methodsFor: 'error description' stamp: 'ja 12/16/2020 17:57:43' prior: 51017344!
withHeight: aHeight andWidth: aWidth

	(aHeight <= 0 or: [ aWidth <= 0 or:[ aHeight isInteger not or: [ aWidth isInteger not ]]] ) ifTrue:[ self error: self invalidCreationRoomErrorDescription ].! !

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 17:57:45'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 17:57:45'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 17:57:45'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 17:57:45'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 17:57:45'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 17:57:45'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 17:57:58'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 17:58:01'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 17:58:01'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 17:58:01'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 17:58:01'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 17:58:01'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 17:58:01'!
PASSED!

!methodRemoval: RoomTest #test03_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 17:58:25'!
test03_canNotCreateARoomWithWidthNotInteger

		self 
			should: [Room withHeight: 1.1 andWidth: 1] 
			raise: Error  
			withMessageText: Room invalidCreationRoomErrorDescription.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 17:58:58' prior: 51017369!
test04_canNotCreateARoomWithWidthNotInteger

		self 
			should: [Room withHeight: 'x' andWidth: 1.1] 
			raise: Error  
			withMessageText: Room invalidCreationRoomErrorDescription.! !

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 17:58:59'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 17:59:09' prior: 51017443!
test04_canNotCreateARoomWithWidthNotInteger

		self 
			should: [Room withHeight: 1 andWidth: 1.1] 
			raise: Error  
			withMessageText: Room invalidCreationRoomErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:09:59'!
test05_canNotPutAStageObjectWithXLessThanZero

	| room |
	
	room _ Room withHeight: 10 andWidth: 10.
	
	self 
		should: [ room at: -1@1 put: self paper. ]
	 	raise:  Error
		withExceptionDo: 		[:anError | 
		 	self assert: Room canNotPutAObjectInPositionInvalidErrorDescription equals: anError messageText .
			self deny:( room positionOccupied: -1@1) .
		]
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:11:07'!
paper

	^ NoPointsPortableObject named: 'Paper' weighing: 1.! !

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:11:11'!
ERROR!
!Room class methodsFor: 'error description' stamp: 'ja 12/16/2020 18:11:24'!
canNotPutAObjectInPositionInvalidErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error description' stamp: 'ja 12/16/2020 18:11:42' prior: 51017487!
canNotPutAObjectInPositionInvalidErrorDescription
	
	^ 'Can not put a object in position invalid' ! !

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:11:43'!
FAILURE!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:12:04'!
FAILURE!
!Room class methodsFor: 'error description' stamp: 'ja 12/16/2020 18:13:23' prior: 51017381!
withHeight: aHeight andWidth: aWidth

	(aHeight <= 0 or: [ aWidth <= 0 or:[ aHeight isInteger not or: [ aWidth isInteger not ]]] ) ifTrue:[ self error: self invalidCreationRoomErrorDescription ].
	
	^ self new initializeWithHeight: aHeight andWidth: aWidth .! !

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/16/2020 18:14:03'!
Object subclass: #Room
	instanceVariableNames: 'height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/16/2020 18:14:05'!
Object subclass: #Room
	instanceVariableNames: 'height width'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'no messages' stamp: 'ja 12/16/2020 18:14:00'!
 initializeWithHeight: aHeight andWidth: aWidth .

	height _ aHeight .
	width _ aWidth .! !

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:14:13'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:15:40' overrides: 16880792!
at: aPostion put: aStageObject

	aPostion x <= 0 ifTrue: [ self error: self class canNotPutAObjectInPositionInvalidErrorDescription ]! !

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:15:45'!
ERROR!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:15:45'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:15:59'!
positionOccupied: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:16:17' prior: 51017556!
positionOccupied: aPosition

	^ false 
	
	! !

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:16:19'!
PASSED!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:16:21'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 18:16:21'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 18:16:21'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 18:16:21'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 18:16:21'!
PASSED!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:16:21'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:18:29' prior: 51017542 overrides: 16880792!
at: aPostion put: aStageObject

	(aPostion x <= 0 or: [ aPostion y  <= 0 or:[ aPostion x isInteger not or: [ aPostion y isInteger not ]]] ) ifTrue:[ self error: self class canNotPutAObjectInPositionInvalidErrorDescription ].! !

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:18:34'!
PASSED!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:18:37'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 18:18:37'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 18:18:37'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 18:18:37'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 18:18:37'!
PASSED!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:18:37'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:18:48'!
test06_canNotPutAStageObjectWithYLessThanZero

	| room |
	
	room _ Room withHeight: 10 andWidth: 10.
	
	self 
		should: [ room at: 1@-1 put: self paper. ]
	 	raise:  Error
		withExceptionDo: 		[:anError | 
		 	self assert: Room canNotPutAObjectInPositionInvalidErrorDescription equals: anError messageText .
			self deny:( room positionOccupied: -1@1) .
		]
	! !

!testRun: #RoomTest #test06_canNotPutAStageObjectWithYLessThanZero stamp: 'ja 12/16/2020 18:18:49'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 18:18:49'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 18:18:49'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 18:18:49'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 18:18:49'!
PASSED!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:18:49'!
PASSED!

!testRun: #RoomTest #test06_canNotPutAStageObjectWithYLessThanZero stamp: 'ja 12/16/2020 18:18:49'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:19:08'!
test07_canNotPutAStageObjectWithXNotInteger

	| room |
	
	room _ Room withHeight: 10 andWidth: 10.
	
	self 
		should: [ room at: 1.1@1 put: self paper. ]
	 	raise:  Error
		withExceptionDo: 		[:anError | 
		 	self assert: Room canNotPutAObjectInPositionInvalidErrorDescription equals: anError messageText .
			self deny:( room positionOccupied: -1@1) .
		]
	! !

!testRun: #RoomTest #test07_canNotPutAStageObjectWithXNotInteger stamp: 'ja 12/16/2020 18:19:09'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 18:19:09'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 18:19:09'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 18:19:09'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 18:19:09'!
PASSED!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:19:09'!
PASSED!

!testRun: #RoomTest #test06_canNotPutAStageObjectWithYLessThanZero stamp: 'ja 12/16/2020 18:19:09'!
PASSED!

!testRun: #RoomTest #test07_canNotPutAStageObjectWithXNotInteger stamp: 'ja 12/16/2020 18:19:09'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:19:20'!
test08_canNotPutAStageObjectWithYNotInteger

	| room |
	
	room _ Room withHeight: 10 andWidth: 10.
	
	self 
		should: [ room at: 1@1.1 put: self paper. ]
	 	raise:  Error
		withExceptionDo: 		[:anError | 
		 	self assert: Room canNotPutAObjectInPositionInvalidErrorDescription equals: anError messageText .
			self deny:( room positionOccupied: -1@1) .
		]
	! !

!testRun: #RoomTest #test08_canNotPutAStageObjectWithYNotInteger stamp: 'ja 12/16/2020 18:19:21'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 18:19:21'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 18:19:21'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 18:19:21'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 18:19:21'!
PASSED!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:19:21'!
PASSED!

!testRun: #RoomTest #test06_canNotPutAStageObjectWithYLessThanZero stamp: 'ja 12/16/2020 18:19:21'!
PASSED!

!testRun: #RoomTest #test07_canNotPutAStageObjectWithXNotInteger stamp: 'ja 12/16/2020 18:19:21'!
PASSED!

!testRun: #RoomTest #test08_canNotPutAStageObjectWithYNotInteger stamp: 'ja 12/16/2020 18:19:21'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:23:24'!
test08_canPutAStageObjectIntoACellNotOccupied

	| room |
	
	room _ Room withHeight: 10 andWidth: 10.
	
	room at: 1@1.1 put: self paper. 
	
	self assert:( room positionOccupied: -1@1 ).

	! !

!testRun: #RoomTest #test08_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:23:25'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:23:42' prior: 51017748!
test08_canPutAStageObjectIntoACellNotOccupied

	| room |
	
	room _ Room withHeight: 10 andWidth: 10.
	
	room at: 1@1 put: self paper. 
	
	self assert:( room positionOccupied: -1@1 ).

	! !

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/16/2020 18:24:09'!
Object subclass: #Room
	instanceVariableNames: 'height width room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:24:01' prior: 51017590 overrides: 16880792!
at: aPostion put: aStageObject

	(aPostion x <= 0 or: [ aPostion y  <= 0 or:[ aPostion x isInteger not or: [ aPostion y isInteger not ]]] ) ifTrue:[ self error: self class canNotPutAObjectInPositionInvalidErrorDescription ].
	
	room at: aPostion put: aStageObject .! !

!testRun: #RoomTest #test08_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:24:11'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:24:37' prior: 51017532!
initializeWithHeight: aHeight andWidth: aWidth .

	height _ aHeight .
	width _ aWidth .
	room _ Dictionary new.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:24:51'!
test09_canPutAStageObjectIntoACellNotOccupied

	| room |
	
	room _ Room withHeight: 10 andWidth: 10.
	
	room at: 1@1 put: self paper. 
	
	self assert:( room positionOccupied: -1@1 ).

	! !

!methodRemoval: RoomTest #test08_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:24:51'!
test08_canPutAStageObjectIntoACellNotOccupied

	| room |
	
	room _ Room withHeight: 10 andWidth: 10.
	
	room at: 1@1 put: self paper. 
	
	self assert:( room positionOccupied: -1@1 ).

	!

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:24:53'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:26:26' prior: 51017561!
positionOccupied: aPosition

	room at: aPosition ifAbsent: [ ^ false ].
	^ true
	
	! !

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:26:30'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 18:26:30'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 18:26:30'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 18:26:30'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 18:26:30'!
PASSED!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:26:30'!
PASSED!

!testRun: #RoomTest #test06_canNotPutAStageObjectWithYLessThanZero stamp: 'ja 12/16/2020 18:26:30'!
PASSED!

!testRun: #RoomTest #test07_canNotPutAStageObjectWithXNotInteger stamp: 'ja 12/16/2020 18:26:30'!
PASSED!

!testRun: #RoomTest #test08_canNotPutAStageObjectWithYNotInteger stamp: 'ja 12/16/2020 18:26:30'!
PASSED!

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:26:30'!
FAILURE!

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:26:30'!
FAILURE!

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:26:38'!
FAILURE!

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:26:38'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:26:48' prior: 51017799!
test09_canPutAStageObjectIntoACellNotOccupied

	| room |
	
	room _ Room withHeight: 10 andWidth: 10.
	
	room at: 1@1 put: self paper. 
	
	self assert:( room positionOccupied: 1@1 ).

	! !

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:26:51'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:30:42' prior: 51017871!
test09_canPutAStageObjectIntoACellNotOccupied

	| room |
	
	room _ Room withHeight: 10 andWidth: 10.
	
	room at: 1@1 put: self paper. 
	
	self 
		should: [ room at: 1@1 put: self key ] 
		raise: Error  
		withExceptionDo: [ :anError | | paper | 
			self assert: Room positionOccupiedErrorDescription equals: anError messageText .
			self assert:( room at: 1@1) equals: paper
			]
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:31:32' prior: 51017884!
test09_canPutAStageObjectIntoACellNotOccupied

	| room |
	
	room _ Room withHeight: 10 andWidth: 10.
	
	room at: 1@1 put: self paper. 
	
	self 
		should: [ room at: 1@1 put: self key ] 
		raise: Error  
		withExceptionDo: [ :anError | | paper | 
			self assert: Room positionOccupiedErrorDescription equals: anError messageText .
			self assert:( room at: 1@1) equals: paper
			]
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:32:01' prior: 51017899!
test09_canPutAStageObjectIntoACellNotOccupied

	| room paper |
	
	room _ Room withHeight: 10 andWidth: 10.
	paper _ self paper.
	room at: 1@1 put: paper . 
	
	self 
		should: [ room at: 1@1 put: self key ] 
		raise: Error  
		withExceptionDo: [ :anError | 
			self assert: Room positionOccupiedErrorDescription equals: anError messageText .
			self assert:( room at: 1@1) equals: paper
			]
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:32:15'!
key

	^ NoPointsPortableObject named: 'Key' weighing: 1.! !

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:32:24'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:35:04' overrides: 16880774!
at: aPosition

	room at: aPosition ifAbsent: [ ^ false ].

	
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:35:34' prior: 51017821!
positionOccupied: aPosition

	(self at: aPosition) ifFalse: [ ^ false ].
	^ true
	
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:35:45' prior: 51017938 overrides: 16880774!
at: aPosition

	^ room at: aPosition ifAbsent: [ ^ false ].

	
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:36:07' prior: 51017950 overrides: 16880774!
at: aPosition

	 room at: aPosition ifAbsent: [ ^ false ].
	^ true
	
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:36:22' prior: 51017956 overrides: 16880774!
at: aPosition

	 ^ room at: aPosition ifAbsent: [ ^ false ].
	
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:37:41' prior: 51017962 overrides: 16880774!
at: aPosition

	 ^ room at: aPosition ifAbsent: [ ^ nil ].
	
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:37:59' prior: 51017943!
positionOccupied: aPosition

	(self at: aPosition) ifNil: [ ^ false ].
	^ true
	
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:39:43' prior: 51017778 overrides: 16880792!
at: aPosition put: aStageObject

	(aPosition x <= 0 or: [ aPosition y  <= 0 or:[ aPosition x isInteger not or: [ aPosition y isInteger not ]]] ) ifTrue:[ self error: self class canNotPutAObjectInPositionInvalidErrorDescription ].
	
	(self positionOccupied: aPosition) ifTrue: [ self error: self class positionOccupiedErrorDescription]. 
	
	room at: aPosition put: aStageObject .! !

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:39:47'!
ERROR!
!Room class methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:39:59'!
positionOccupiedErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:40:10' prior: 51017998!
positionOccupiedErrorDescription
	
	^ 'Positon occupied '! !

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:40:12'!
FAILURE!

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:41:00'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:41:28' prior: 51017914!
test09_canPutAStageObjectIntoACellNotOccupied

	| room paper |
	
	room _ Room withHeight: 10 andWidth: 10.
	paper _ self paper.
	room at: 1@1 put: paper . 
	
	self 
		should: [ room at: 1@1 put: self key ] 
		raise: Error  
		withExceptionDo: [ :anError | 
			self assert: Room positionOccupiedErrorDescription equals: anError messageText .
			self assert:( room at: 1@1) equals: paper.
			]
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:43:29'!
test10_canNotPutElementsIntoRoomWithXOutside

	| room |
	
	room _ Room withHeight: 10 andWidth: 10.	 
	
	self 
		should: [room at: 11@1 put: self paper . ] 
		raise: Error  
		withExceptionDo: [ :anError | 
			self assert: Room positionOccupiedErrorDescription equals: anError messageText .
			self assert: room isEmpty.
			]
	! !

!testRun: #RoomTest #test10_canNotPutElementsIntoRoomWithXOutside stamp: 'ja 12/16/2020 18:43:30'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:43:56' prior: 51018030!
test10_canNotPutElementsIntoRoomWithXOutside

	| room |
	
	room _ Room withHeight: 10 andWidth: 10.	 
	
	self 
		should: [room at: 11@1 put: self paper . ] 
		raise: Error  
		withExceptionDo: [ :anError | 
			self assert: Room canNotPutAObjectInPositionInvalidErrorDescription equals: anError messageText .
			self assert: room isEmpty.
			]
	! !

!testRun: #RoomTest #test10_canNotPutElementsIntoRoomWithXOutside stamp: 'ja 12/16/2020 18:44:01'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:45:34' prior: 51017980 overrides: 16880792!
at: aPosition put: aStageObject

	(aPosition x <= 0 or: [ aPosition y  <= 0 or:[ aPosition x isInteger not or: [ (aPosition y isInteger not) or:[ aPosition x > height or:[ aPosition y > width ]]]]] ) ifTrue:[ self error: self class canNotPutAObjectInPositionInvalidErrorDescription ].
	
	(self positionOccupied: aPosition) ifTrue: [ self error: self class positionOccupiedErrorDescription]. 
	
	room at: aPosition put: aStageObject .! !

!testRun: #RoomTest #test10_canNotPutElementsIntoRoomWithXOutside stamp: 'ja 12/16/2020 18:45:45'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:45:53'!
isEmpty
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:46:00' prior: 51018085!
isEmpty
	
	room isEmpty ! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:46:03' prior: 51018089!
isEmpty
	
	^ room isEmpty ! !

!testRun: #RoomTest #test10_canNotPutElementsIntoRoomWithXOutside stamp: 'ja 12/16/2020 18:46:04'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 18:46:04'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 18:46:05'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 18:46:05'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 18:46:05'!
PASSED!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:46:05'!
PASSED!

!testRun: #RoomTest #test06_canNotPutAStageObjectWithYLessThanZero stamp: 'ja 12/16/2020 18:46:05'!
PASSED!

!testRun: #RoomTest #test07_canNotPutAStageObjectWithXNotInteger stamp: 'ja 12/16/2020 18:46:05'!
PASSED!

!testRun: #RoomTest #test08_canNotPutAStageObjectWithYNotInteger stamp: 'ja 12/16/2020 18:46:05'!
PASSED!

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:46:05'!
PASSED!

!testRun: #RoomTest #test10_canNotPutElementsIntoRoomWithXOutside stamp: 'ja 12/16/2020 18:46:05'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:46:17'!
test11_canNotPutElementsIntoRoomWithYOutside

	| room |
	
	room _ Room withHeight: 10 andWidth: 10.	 
	
	self 
		should: [room at: 1@11 put: self paper . ] 
		raise: Error  
		withExceptionDo: [ :anError | 
			self assert: Room canNotPutAObjectInPositionInvalidErrorDescription equals: anError messageText .
			self assert: room isEmpty.
			]
	! !

!testRun: #RoomTest #test11_canNotPutElementsIntoRoomWithYOutside stamp: 'ja 12/16/2020 18:46:18'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 18:46:18'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 18:46:18'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 18:46:18'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 18:46:18'!
PASSED!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:46:18'!
PASSED!

!testRun: #RoomTest #test06_canNotPutAStageObjectWithYLessThanZero stamp: 'ja 12/16/2020 18:46:18'!
PASSED!

!testRun: #RoomTest #test07_canNotPutAStageObjectWithXNotInteger stamp: 'ja 12/16/2020 18:46:18'!
PASSED!

!testRun: #RoomTest #test08_canNotPutAStageObjectWithYNotInteger stamp: 'ja 12/16/2020 18:46:18'!
PASSED!

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:46:18'!
PASSED!

!testRun: #RoomTest #test10_canNotPutElementsIntoRoomWithXOutside stamp: 'ja 12/16/2020 18:46:18'!
PASSED!

!testRun: #RoomTest #test11_canNotPutElementsIntoRoomWithYOutside stamp: 'ja 12/16/2020 18:46:18'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:49:44'!
assertPositionValid: aPosition

	^ aPosition x <= 0 or:  [aPosition y  <= 0] ! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:50:37'!
assertPositionInteger: aPosition

	^ aPosition x isInteger not or:[aPosition y isInteger ] ! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:51:17'!
assertPositionLimit: aPosition

	^ aPosition x > height  or: [ aPosition y > width ]! !
!Room methodsFor: 'assertions' stamp: 'ja 12/16/2020 18:51:48' prior: 51018193!
assertPositionInteger: aPosition

	^ aPosition x isInteger not or:[aPosition y isInteger not] ! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:53:35' prior: 51018065 overrides: 16880792!
at: aPosition put: aStageObject

	((self assertPositionValid: aPosition) 
		or: [ self assertPositionValid: aPosition ]
		or: [ self assertPositionInteger: aPosition ]) ifTrue: [ self error: self class canNotPutAObjectInPositionInvalidErrorDescription ].
	
	(self positionOccupied: aPosition) ifTrue: [ self error: self class positionOccupiedErrorDescription]. 
	
	room at: aPosition put: aStageObject .! !

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 18:53:38'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 18:53:38'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 18:53:38'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 18:53:38'!
PASSED!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:53:38'!
PASSED!

!testRun: #RoomTest #test06_canNotPutAStageObjectWithYLessThanZero stamp: 'ja 12/16/2020 18:53:38'!
PASSED!

!testRun: #RoomTest #test07_canNotPutAStageObjectWithXNotInteger stamp: 'ja 12/16/2020 18:53:38'!
PASSED!

!testRun: #RoomTest #test08_canNotPutAStageObjectWithYNotInteger stamp: 'ja 12/16/2020 18:53:38'!
PASSED!

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:53:38'!
PASSED!

!testRun: #RoomTest #test10_canNotPutElementsIntoRoomWithXOutside stamp: 'ja 12/16/2020 18:53:38'!
FAILURE!

!testRun: #RoomTest #test11_canNotPutElementsIntoRoomWithYOutside stamp: 'ja 12/16/2020 18:53:38'!
FAILURE!

!testRun: #RoomTest #test11_canNotPutElementsIntoRoomWithYOutside stamp: 'ja 12/16/2020 18:54:26'!
FAILURE!

!testRun: #RoomTest #test11_canNotPutElementsIntoRoomWithYOutside stamp: 'ja 12/16/2020 18:54:26'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:55:06' prior: 51018212 overrides: 16880792!
at: aPosition put: aStageObject

	((self assertPositionValid: aPosition) 
		or: [ (self assertPositionValid: aPosition) 
		or: [ self assertPositionInteger: aPosition ]]) ifTrue: [ self error: self class canNotPutAObjectInPositionInvalidErrorDescription ].
	
	(self positionOccupied: aPosition) ifTrue: [ self error: self class positionOccupiedErrorDescription]. 
	
	room at: aPosition put: aStageObject .! !

!testRun: #RoomTest #test11_canNotPutElementsIntoRoomWithYOutside stamp: 'ja 12/16/2020 18:55:07'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:55:33' prior: 51018273 overrides: 16880792!
at: aPosition put: aStageObject

	((self assertPositionValid: aPosition) 
		or: [ (self assertPositionLimit: aPosition) 
		or: [ self assertPositionInteger: aPosition ]]) ifTrue: [ self error: self class canNotPutAObjectInPositionInvalidErrorDescription ].
	
	(self positionOccupied: aPosition) ifTrue: [ self error: self class positionOccupiedErrorDescription]. 
	
	room at: aPosition put: aStageObject .! !

!testRun: #RoomTest #test11_canNotPutElementsIntoRoomWithYOutside stamp: 'ja 12/16/2020 18:55:34'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 18:55:38'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 18:55:38'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 18:55:38'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 18:55:38'!
PASSED!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 18:55:38'!
PASSED!

!testRun: #RoomTest #test06_canNotPutAStageObjectWithYLessThanZero stamp: 'ja 12/16/2020 18:55:38'!
PASSED!

!testRun: #RoomTest #test07_canNotPutAStageObjectWithXNotInteger stamp: 'ja 12/16/2020 18:55:38'!
PASSED!

!testRun: #RoomTest #test08_canNotPutAStageObjectWithYNotInteger stamp: 'ja 12/16/2020 18:55:38'!
PASSED!

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 18:55:38'!
PASSED!

!testRun: #RoomTest #test10_canNotPutElementsIntoRoomWithXOutside stamp: 'ja 12/16/2020 18:55:38'!
PASSED!

!testRun: #RoomTest #test11_canNotPutElementsIntoRoomWithYOutside stamp: 'ja 12/16/2020 18:55:38'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:56:09'!
assertPostionVAlid: aPosition

	^ (self assertPositionValid: aPosition) 
		or: [ (self assertPositionLimit: aPosition) 
		or: [ self assertPositionInteger: aPosition ]]! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:56:09' prior: 51018293 overrides: 16880792!
at: aPosition put: aStageObject

	(self assertPostionVAlid: aPosition) ifTrue: [ self error: self class canNotPutAObjectInPositionInvalidErrorDescription ].
	
	(self positionOccupied: aPosition) ifTrue: [ self error: self class positionOccupiedErrorDescription]. 
	
	room at: aPosition put: aStageObject .! !
!Room methodsFor: 'assertions' stamp: 'ja 12/16/2020 18:57:20'!
assertPositionValuesGreatherThanZero: aPosition

	^ aPosition x <= 0 or:  [aPosition y  <= 0] ! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:57:20' prior: 51018349!
assertPostionVAlid: aPosition

	^ (self assertPositionValuesGreatherThanZero: aPosition) 
		or: [ (self assertPositionLimit: aPosition) 
		or: [ self assertPositionInteger: aPosition ]]! !

!methodRemoval: Room #assertPositionValid: stamp: 'ja 12/16/2020 18:57:20'!
assertPositionValid: aPosition

	^ aPosition x <= 0 or:  [aPosition y  <= 0] !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:57:31'!
assertPostionValid: aPosition

	^ (self assertPositionValuesGreatherThanZero: aPosition) 
		or: [ (self assertPositionLimit: aPosition) 
		or: [ self assertPositionInteger: aPosition ]]! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 18:57:31' prior: 51018358 overrides: 16880792!
at: aPosition put: aStageObject

	(self assertPostionValid: aPosition) ifTrue: [ self error: self class canNotPutAObjectInPositionInvalidErrorDescription ].
	
	(self positionOccupied: aPosition) ifTrue: [ self error: self class positionOccupiedErrorDescription]. 
	
	room at: aPosition put: aStageObject .! !

!methodRemoval: Room #assertPostionVAlid: stamp: 'ja 12/16/2020 18:57:31'!
assertPostionVAlid: aPosition

	^ (self assertPositionValuesGreatherThanZero: aPosition) 
		or: [ (self assertPositionLimit: aPosition) 
		or: [ self assertPositionInteger: aPosition ]]!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 19:40:35'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 19:40:35'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 19:40:35'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 19:40:35'!
PASSED!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 19:40:35'!
PASSED!

!testRun: #RoomTest #test06_canNotPutAStageObjectWithYLessThanZero stamp: 'ja 12/16/2020 19:40:35'!
PASSED!

!testRun: #RoomTest #test07_canNotPutAStageObjectWithXNotInteger stamp: 'ja 12/16/2020 19:40:35'!
PASSED!

!testRun: #RoomTest #test08_canNotPutAStageObjectWithYNotInteger stamp: 'ja 12/16/2020 19:40:35'!
PASSED!

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 19:40:35'!
PASSED!

!testRun: #RoomTest #test10_canNotPutElementsIntoRoomWithXOutside stamp: 'ja 12/16/2020 19:40:35'!
PASSED!

!testRun: #RoomTest #test11_canNotPutElementsIntoRoomWithYOutside stamp: 'ja 12/16/2020 19:40:35'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 19:43:35'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 19:43:35'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 19:43:35'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 19:43:35'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 19:43:35'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 19:43:35'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 19:43:35'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 19:43:35'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 19:43:35'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 19:43:35'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 19:43:36'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 19:43:36'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 19:43:36'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 19:43:36'!
PASSED!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 19:43:36'!
PASSED!

!testRun: #RoomTest #test06_canNotPutAStageObjectWithYLessThanZero stamp: 'ja 12/16/2020 19:43:36'!
PASSED!

!testRun: #RoomTest #test07_canNotPutAStageObjectWithXNotInteger stamp: 'ja 12/16/2020 19:43:36'!
PASSED!

!testRun: #RoomTest #test08_canNotPutAStageObjectWithYNotInteger stamp: 'ja 12/16/2020 19:43:36'!
PASSED!

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 19:43:36'!
PASSED!

!testRun: #RoomTest #test10_canNotPutElementsIntoRoomWithXOutside stamp: 'ja 12/16/2020 19:43:36'!
PASSED!

!testRun: #RoomTest #test11_canNotPutElementsIntoRoomWithYOutside stamp: 'ja 12/16/2020 19:43:36'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 19:57:11'!
test11

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #North with: self defautltRoom.
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 19:57:18' prior: 51018533!
test11

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #North with: self defaultRoom.
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 19:57:38'!
defaultRoom

	^ Room withHeight: 10 andWidth: 10! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 19:58:02' prior: 51018557!
test11

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #North.
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'ja 12/16/2020 19:58:35'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint with: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 19:58:35' prior: 51016524!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North with: self defaultRoom .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 19:58:35' prior: 51016590!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West with: self defaultRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 19:58:35' prior: 51016513!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North with: self defaultRoom .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 19:58:35' prior: 51016549!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South with: self defaultRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 19:58:35' prior: 51016577!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X with: self defaultRoom ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 19:58:35' prior: 51016535!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East with: self defaultRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 19:58:35' prior: 51018585!
test11

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #North with: self defaultRoom.
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 19:58:35' prior: 51016603!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West with: self defaultRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 19:58:35' prior: 51016563!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West with: self defaultRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 19:58:35' prior: 51016489!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North with: self defaultRoom .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 19:58:35' prior: 51016501!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North with: self defaultRoom .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !

!methodRemoval: PlayableCharacter class #named:using:at:heading: stamp: 'ja 12/16/2020 19:58:35'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:01:30' prior: 51018704!
test11

	
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: -1@2 heading: #North with: self defaultRoom.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room canNotPutAObjectInPositionInvalidErrorDescription ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:01:40' prior: 51018805!
test11

	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: -1@2 heading: #North with: self defaultRoom.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room canNotPutAObjectInPositionInvalidErrorDescription ]
	
	! !

!testRun: #PlayableCharacterTest #test11 stamp: 'ja 12/16/2020 20:01:44'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:02:17' prior: 51018817!
test11

	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: -1@2 heading: #North with: self defaultRoom.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room canNotPutAObjectInPositionInvalidErrorDescription .
	
	! !

!testRun: #PlayableCharacterTest #test11 stamp: 'ja 12/16/2020 20:02:19'!
FAILURE!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'ja 12/16/2020 20:05:03' prior: 51018608!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint with: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'ja 12/16/2020 20:05:26'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading with: aRoom  

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 20:05:26' prior: 51018847!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint with: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading with: aRoom ! !

!methodRemoval: PlayableCharacter #initializeNamed:using:at:heading: stamp: 'ja 12/16/2020 20:05:26'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading!

!testRun: #PlayableCharacterTest #test11 stamp: 'ja 12/16/2020 20:05:35'!
ERROR!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'ja 12/16/2020 20:05:55' prior: 51018868!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint with: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading with: aRoom.! !

!classDefinition: #PlayableCharacter category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/16/2020 20:06:40'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'ja 12/16/2020 20:06:38' prior: 51018858!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading with: aRoom  

	name := aName.
	backpack := aBackpack.
	heading := aMarsRoverHeading.
	room _ aRoom.
	room at: aPosition put: self.
	position := aPosition.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'ja 12/16/2020 20:07:02' prior: 51018911!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading with: aRoom  

	name := aName.
	backpack := aBackpack.
	heading := aMarsRoverHeading.
	aRoom at: aPosition put: self.
	room _ aRoom.
	position := aPosition.! !

!testRun: #PlayableCharacterTest #test11 stamp: 'ja 12/16/2020 20:07:11'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 20:07:11'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 20:07:11'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 20:07:11'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 20:07:11'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 20:07:11'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:07:11'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 20:07:11'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 20:07:11'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 20:07:11'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 20:07:11'!
PASSED!

!testRun: #PlayableCharacterTest #test11 stamp: 'ja 12/16/2020 20:07:11'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:07:27' prior: 51018832!
test11

	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 11@2 heading: #North with: self defaultRoom.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room canNotPutAObjectInPositionInvalidErrorDescription .
	
	! !

!testRun: #PlayableCharacterTest #test11 stamp: 'ja 12/16/2020 20:07:28'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 20:07:28'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 20:07:28'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 20:07:28'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 20:07:28'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 20:07:28'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:07:28'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 20:07:28'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 20:07:28'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 20:07:28'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 20:07:28'!
PASSED!

!testRun: #PlayableCharacterTest #test11 stamp: 'ja 12/16/2020 20:07:28'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:07:34' prior: 51018976!
test11

	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: -1@2 heading: #North with: self defaultRoom.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room canNotPutAObjectInPositionInvalidErrorDescription .
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:08:15'!
test11_canNotInitializeAPlayableCharacterIntoPositionInvalid

	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: -1@2 heading: #North with: self defaultRoom.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room canNotPutAObjectInPositionInvalidErrorDescription .
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:08:49'!
test12_canNotInitializeAPlayableCharacterIntoPositionOccupied
	
	 
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: -1@2 heading: #North with: self defaultRoom.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room canNotPutAObjectInPositionInvalidErrorDescription .
	
	! !

!methodRemoval: PlayableCharacterTest #test11 stamp: 'ja 12/16/2020 20:08:53'!
test11

	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: -1@2 heading: #North with: self defaultRoom.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room canNotPutAObjectInPositionInvalidErrorDescription .
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:09:46' prior: 51019055!
test12_canNotInitializeAPlayableCharacterIntoPositionOccupied
	
	 | room paper |
	
	room _ self defaultRoom .
	paper _ self paper.
	
	room at: 1@1 put: paper.
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: -1@2 heading: #North with: self defaultRoom.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room canNotPutAObjectInPositionInvalidErrorDescription .
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:10:07' prior: 51019079!
test12_canNotInitializeAPlayableCharacterIntoPositionOccupied
	
	 | room paper |
	
	room _ self defaultRoom .
	paper _ self paper.
	
	room at: 1@1 put: paper.
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North with: room.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room canNotPutAObjectInPositionInvalidErrorDescription .
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:11:17' prior: 51019095!
test12_canNotInitializeAPlayableCharacterIntoPositionOccupied
	
	 | room paper |
	
	room _ self defaultRoom .
	paper _ self paper.
	
	room at: 1@1 put: paper.
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North with: room.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError  | 
			self assert: Room positionOccupiedErrorDescription equals: anError messageText .
			self assert: (room at: 1@1) equals: paper.
			 ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:11:42'!
paper

	^ NoPointsPortableObject named: 'Paper' weighing: 1.! !

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 20:11:50'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 20:11:50'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 20:11:50'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 20:11:50'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 20:11:50'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 20:11:50'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:11:50'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 20:11:50'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 20:11:50'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 20:11:50'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 20:11:50'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 20:11:50'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 20:11:50'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:13:53'!
test13_playableCharacterCanNotMoveOutsideTheRoom
	
	 | room paper |
	
	room _ self defaultRoom .
	paper _ self paper.
	
	room at: 1@1 put: paper.
	
	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North with: room.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError  | 
			self assert: Room positionOccupiedErrorDescription equals: anError messageText .
			self assert: (room at: 1@1) equals: paper.
			 ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:17:55' prior: 51019185!
test13_playableCharacterCanNotMoveOutsideTheRoom
	
	| playableCharacter room | 
	
	room _ self defaultRoom.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@10 heading: #North with: room .
	
	self 
		should: [ playableCharacter moveForward ] 
		raise:  Error
		withExceptionDo: [:anError | 
			self assert: PlayableCharacter moveOutsideOfRoomErrorDescription equals: anError messageText .
			self assert: (room positionOccupied: 1@10).
			 ]
	
		
	! !

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoom stamp: 'ja 12/16/2020 20:18:05'!
FAILURE!
!PlayableCharacter class methodsFor: 'initialization' stamp: 'ja 12/16/2020 20:18:45'!
moveOutsideOfRoomErrorDescription

	^ 'Move outside of room'! !

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoom stamp: 'ja 12/16/2020 20:19:14'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 20:19:14'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 20:19:14'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 20:19:14'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 20:19:14'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 20:19:14'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:19:14'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 20:19:14'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 20:19:14'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 20:19:14'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 20:19:14'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 20:19:14'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 20:19:14'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoom stamp: 'ja 12/16/2020 20:19:14'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoom stamp: 'ja 12/16/2020 20:19:14'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoom stamp: 'ja 12/16/2020 20:19:17'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/16/2020 20:20:31' prior: 51016849!
moveForward
	
	room at: position + heading forwardPoint put: self .
	
	position := position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/16/2020 20:20:58' prior: 51019293!
moveForward
	
	room at: position + heading forwardPoint put: self .
	
	position := position + heading forwardPoint
	! !

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoom stamp: 'ja 12/16/2020 20:20:59'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoom stamp: 'ja 12/16/2020 20:21:15'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoom stamp: 'ja 12/16/2020 20:21:15'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:21:25' prior: 51019203!
test13_playableCharacterCanNotMoveOutsideTheRoom
	
	| playableCharacter room | 
	
	room _ self defaultRoom.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@10 heading: #North with: room .
	
	self 
		should: [ playableCharacter moveForward ] 
		raise:  Error
		withExceptionDo: [:anError | 
			self assert: Room canNotPutAObjectInPositionInvalidErrorDescription equals: anError messageText .
			self assert: (room positionOccupied: 1@10).
			 ]
	
		
	! !

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoom stamp: 'ja 12/16/2020 20:21:26'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 20:21:26'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 20:21:26'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 20:21:26'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 20:21:26'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 20:21:26'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:21:26'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 20:21:26'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 20:21:26'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 20:21:26'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 20:21:26'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 20:21:26'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 20:21:26'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoom stamp: 'ja 12/16/2020 20:21:26'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:21:37'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:21:59'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:22:45'!
ERROR!

heading forwardPoint !

position + heading forwardPoint!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoom stamp: 'ja 12/16/2020 20:25:06'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoom stamp: 'ja 12/16/2020 20:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 20:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 20:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 20:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 20:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 20:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:25:09'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 20:25:09'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 20:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 20:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 20:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 20:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 20:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoom stamp: 'ja 12/16/2020 20:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:25:13'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:27:03'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'ja 12/16/2020 20:27:27' prior: 51018370!
assertPositionValuesGreatherThanZero: aPosition

	^ aPosition x < 0 or:  [aPosition y  < 0] ! !

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:27:37'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 20:27:42'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 20:27:45'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 20:27:45'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 20:27:45'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 20:27:45'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 20:27:45'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 20:27:45'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 20:27:45'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 20:27:45'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 20:27:45'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 20:27:45'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoom stamp: 'ja 12/16/2020 20:27:45'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:27:45'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 20:27:45'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:28:05'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:28:48'!
test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward
	
	| playableCharacter room | 
	
	room _ self defaultRoom.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@10 heading: #North with: room .
	
	self 
		should: [ playableCharacter moveForward ] 
		raise:  Error
		withExceptionDo: [:anError | 
			self assert: Room canNotPutAObjectInPositionInvalidErrorDescription equals: anError messageText .
			self assert: (room positionOccupied: 1@10).
			 ]
	
		
	! !

!methodRemoval: PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoom stamp: 'ja 12/16/2020 20:28:48'!
test13_playableCharacterCanNotMoveOutsideTheRoom
	
	| playableCharacter room | 
	
	room _ self defaultRoom.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@10 heading: #North with: room .
	
	self 
		should: [ playableCharacter moveForward ] 
		raise:  Error
		withExceptionDo: [:anError | 
			self assert: Room canNotPutAObjectInPositionInvalidErrorDescription equals: anError messageText .
			self assert: (room positionOccupied: 1@10).
			 ]
	
		
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:28:59'!
test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward
	
	| playableCharacter room | 
	
	room _ self defaultRoom.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@10 heading: #North with: room .
	
	self 
		should: [ playableCharacter moveForward ] 
		raise:  Error
		withExceptionDo: [:anError | 
			self assert: Room canNotPutAObjectInPositionInvalidErrorDescription equals: anError messageText .
			self assert: (room positionOccupied: 1@10).
			 ]
	
		
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:29:14' prior: 51019577!
test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward
	
	| playableCharacter room | 
	
	room _ self defaultRoom.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North with: room .
	
	self 
		should: [ playableCharacter moveBackward ] 
		raise:  Error
		withExceptionDo: [:anError | 
			self assert: Room canNotPutAObjectInPositionInvalidErrorDescription equals: anError messageText .
			self assert: (room positionOccupied: 1@0).
			 ]
	
		
	! !

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 20:29:16'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/16/2020 20:29:58' prior: 51016844!
moveBackward
	
	room at: position - heading forwardPoint put: self .
	
	position := position - heading forwardPoint
	! !

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 20:30:01'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 20:30:01'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 20:30:01'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 20:30:01'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 20:30:01'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 20:30:01'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:30:01'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 20:30:01'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 20:30:01'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 20:30:01'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 20:30:01'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 20:30:01'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 20:30:01'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/16/2020 20:30:01'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 20:30:01'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 20:30:09'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/16/2020 20:31:10' prior: 51019619!
moveBackward
	
	room at: position - heading forwardPoint put: self .
	room removeAt: position .
	position := position - heading forwardPoint
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/16/2020 20:31:34' prior: 51019300!
moveForward
	
	room at: position + heading forwardPoint put: self .
	room removeAt: position .
	position := position + heading forwardPoint
	! !

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 20:32:03'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 20:32:22'!
removeAt: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 20:33:09' prior: 51019708!
removeAt: aPosition

	room removeKey: aPosition ifAbsent: [ ^self ]
	
	! !

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 20:33:12'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 20:33:16'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 20:33:16'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 20:33:16'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 20:33:16'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 20:33:16'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 20:33:16'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 20:33:16'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 20:33:16'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 20:33:16'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/16/2020 20:33:16'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 20:33:16'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 20:33:16'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:33:16'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 20:33:16'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:33:25'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:37:06'!
test15_playableCharacterCanTakePointsPortableObject
	
	| playableCharacter room key | 
	
	room _ self defaultRoom.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North with: room .
	key _ self key.
	
	room at: 1@1 put: key.
	
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: key).
	self deny: (room positionOccupied: 1@1).
		
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:37:48'!
test16_playableCharacterCanTakePointsPortableObject
	
	| playableCharacter room key | 
	
	room _ self defaultRoom.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North with: room .
	key _ self key.
	
	room at: 1@1 put: key.
	
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: key).
	self deny: (room positionOccupied: 1@1).
		
	! !

!methodRemoval: PlayableCharacterTest #test15_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 20:37:48'!
test15_playableCharacterCanTakePointsPortableObject
	
	| playableCharacter room key | 
	
	room _ self defaultRoom.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North with: room .
	key _ self key.
	
	room at: 1@1 put: key.
	
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: key).
	self deny: (room positionOccupied: 1@1).
		
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:38:25'!
key

	^ PointsPortableObject named: 'Key' weighing: 10 worth: 10.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:41:20'!
test15_playableCharacterCanNotTakeStageObjectsOutOfReach
	
	| playableCharacter room key | 
	
	room _ self defaultRoom.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North with: room .
	key _ self key.
	
	room at: 1@3 put: key.
	
	self 
		should:[ playableCharacter take] 
		raise:  Error
		withMessageText: PlayableCharacter canNotTakeStageObjectOutOfReachErrorDescription.
	
	self deny: (playableCharacter backpackIncludes: key).
	self assert: (room positionOccupied: 1@3).
		
	! !

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 20:41:38'!
ERROR!
!PlayableCharacter class methodsFor: 'error description' stamp: 'ja 12/16/2020 20:41:49'!
canNotTakeStageObjectOutOfReachErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'error description' stamp: 'ja 12/16/2020 20:42:06' prior: 51019859!
canNotTakeStageObjectOutOfReachErrorDescription
	
	^'Can not take stage object out of reach'! !

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 20:42:07'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/16/2020 20:44:44'!
forwardPosition

	^ position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/16/2020 20:44:44' prior: 51019697!
moveForward
	
	room at: self forwardPosition put: self .
	room removeAt: position .
	position := position + heading forwardPoint
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/16/2020 20:44:55' prior: 51019880!
moveForward
	
	room at: self forwardPosition put: self .
	room removeAt: position .
	position := self forwardPosition 
	! !

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 20:45:33'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'ja 12/16/2020 20:47:19'!
take

	( room at: self forwardPosition ) addIntoBackpackOf: self! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'ja 12/16/2020 20:48:51' prior: 51019898!
take
	
	| stageObject |
	
	stageObject _ ( room at: self forwardPosition ) ifNil: [ self error: self class canNotTakeStageObjectOutOfReachErrorDescription ].! !

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 20:49:04'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 20:49:14'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'ja 12/16/2020 20:49:39' prior: 51019904!
take
	
	| stageObject |
	
	stageObject _ ( room at: self forwardPosition ) ifNil: [ self error: self class canNotTakeStageObjectOutOfReachErrorDescription ].
	
	stageObject addIntoBackpackOf: self.! !

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 20:49:47'!
ERROR!
!PointsPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 20:49:55'!
addIntoBackpackOf: aPlayableCharacter 
	self shouldBeImplemented.! !
!PointsPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 20:50:13' prior: 51019935!
addIntoBackpackOf: aPlayableCharacter 
	
	aPlayableCharacter take: self.
	! !

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 20:50:16'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'ja 12/16/2020 20:51:12' prior: 51019921!
take
	
	| stageObject |
	
	stageObject _ ( room at: self forwardPosition ) ifNil: [ self error: self class canNotTakeStageObjectOutOfReachErrorDescription ].
	
	stageObject addIntoBackpackOf: self.
	stageObject removeOf: room.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'ja 12/16/2020 20:52:07' prior: 51019951!
take
	
	| stageObject |
	
	stageObject _ ( room at: self forwardPosition ) ifNil: [ self error: self class canNotTakeStageObjectOutOfReachErrorDescription ].
	
	stageObject addIntoBackpackOf: self.
	stageObject removeOf: room withPosition: self forwardPosition .! !

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 20:52:21'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 20:52:21'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 20:52:21'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 20:52:21'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 20:52:21'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 20:52:21'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:52:21'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 20:52:21'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 20:52:21'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 20:52:21'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 20:52:21'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 20:52:21'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 20:52:21'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/16/2020 20:52:21'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 20:52:21'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 20:52:21'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 20:52:21'!
ERROR!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 20:52:21'!
ERROR!
!PointsPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 20:52:28'!
removeOf: aRoom withPosition: aPoint 
	self shouldBeImplemented.! !
!PointsPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 20:52:46' prior: 51020045!
removeOf: aRoom withPosition: aPosition

	aRoom removeAt: aPosition 
	
	! !

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 20:52:49'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 20:52:53'!
PASSED!

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/16/2020 21:13:53'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:13:41' prior: 51019797!
test16_playableCharacterCanTakePointsPortableObject
	
	| playableCharacter room box backpack | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	box _ NonPortableObject named: 'Box' with: {}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self assert: (backpack isEmpty ).
	self deny: (room positionOccupied: 1@1).
		
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 20:37:48' prior: 51020136!
test16_playableCharacterCanTakePointsPortableObject
	
	| playableCharacter room key | 
	
	room _ self defaultRoom.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North with: room .
	key _ self key.
	
	room at: 1@1 put: key.
	
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: key).
	self deny: (room positionOccupied: 1@1).
		
	! !

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 21:14:45'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 21:14:45'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 21:14:45'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 21:14:45'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 21:14:45'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 21:14:45'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 21:14:45'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 21:14:45'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 21:14:45'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 21:14:45'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 21:14:45'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 21:14:45'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 21:14:45'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/16/2020 21:14:45'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 21:14:45'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 21:14:45'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 21:14:45'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:15:00'!
test17

	| playableCharacter room box backpack | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	box _ NonPortableObject named: 'Box' with: {}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self assert: (backpack isEmpty ).
	self deny: (room positionOccupied: 1@1).
		
	! !

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:15:03'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'ja 12/16/2020 21:15:15'!
named: aString with: anArray 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString with: anArray ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'ja 12/16/2020 21:16:01' prior: 51020256!
named: aName with: aCollectionStageObject 
	
	^self new initializeNamed: aName with: aCollectionStageObject ! !

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:16:04'!
ERROR!

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/16/2020 21:16:25'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/16/2020 21:16:26'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name collectionStageObject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'ja 12/16/2020 21:16:26'!
initializeNamed: aName with: aCollectionStageObject 
	self shouldBeImplemented.
	name := aName.
	collectionStageObject := aCollectionStageObject.! !
!NonPortableObject methodsFor: 'initialization' stamp: 'ja 12/16/2020 21:16:35' prior: 51020291!
initializeNamed: aName with: aCollectionStageObject 
	
	name := aName.
	collectionStageObject := aCollectionStageObject asOrderedCollection .! !

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/16/2020 21:16:48'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name collectionStageObject elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'ja 12/16/2020 21:16:47' prior: 51020299!
initializeNamed: aName with: aCollectionStageObject 
	
	name := aName.
	elements := aCollectionStageObject asOrderedCollection .! !

StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name  elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/16/2020 21:16:58'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:17:09'!
ERROR!

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:17:09'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:17:22'!
addIntoBackpackOf: aPlayableCharacter 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:17:26' prior: 51020342!
addIntoBackpackOf: aPlayableCharacter 
	! !

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:17:54'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:18:05'!
removeOf: aRoom withPosition: aPoint 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:18:15' prior: 51020355!
removeOf: aRoom withPosition: aPosition 
	
	! !

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:18:17'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:18:30' prior: 51020237!
test17

	| playableCharacter room box backpack | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	box _ NonPortableObject named: 'Box' with: {}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self assert: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
		
	! !

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:18:31'!
PASSED!

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:18:34'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:18:55' prior: 51020368!
test17

	| playableCharacter room box backpack paper | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	box _ NonPortableObject named: 'Box' with: {paper}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self assert: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
		
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:19:36' prior: 51020389!
test17

	| playableCharacter room box backpack paper | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	box _ NonPortableObject named: 'Box' with: {paper}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
		
	! !

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:19:40'!
FAILURE!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:22:29' prior: 51020348!
addIntoBackpackOf: aPlayableCharacter 
	
	elements do: [ :portableObject | portableObject addIntoBackpackOf: aPlayableCharacter ]! !

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:22:33'!
ERROR!
!NoPointsPortableObject methodsFor: 'initialization' stamp: 'ja 12/16/2020 21:23:20'!
addIntoBackpackOf: aPlayableCharacter 
	
	aPlayableCharacter take: self.
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 21:23:32'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 21:23:32'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 21:23:32'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 21:23:32'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 21:23:32'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 21:23:32'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 21:23:32'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 21:23:32'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 21:23:32'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 21:23:32'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 21:23:32'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 21:23:32'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/16/2020 21:23:32'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 21:23:32'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 21:23:32'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 21:23:32'!
PASSED!

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:23:32'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:23:51' prior: 51020406!
test17

	| playableCharacter room box backpack paper | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	box _ NonPortableObject named: 'Box' with: {paper}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: box isEmpty.
		
	! !

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:23:53'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:24:00'!
isEmpty
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:24:10' prior: 51020532!
isEmpty
	
	^ elements isEmpty ! !

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:24:12'!
FAILURE!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:25:16' prior: 51020361!
removeOf: aRoom withPosition: aPosition 
	
	^ self! !

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:25:19'!
FAILURE!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:25:54' prior: 51020428!
addIntoBackpackOf: aPlayableCharacter 
	
	elements copy do: [ :portableObject | portableObject addIntoBackpackOf: aPlayableCharacter ]! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:26:30' prior: 51020552!
addIntoBackpackOf: aPlayableCharacter 
	
	elements copy do: [ :portableObject | portableObject addIntoBackpackOf: aPlayableCharacter  with: self]! !

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:26:42'!
ERROR!
!NoPointsPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:26:48'!
addIntoBackpackOf: aPlayableCharacter with: aNonPortableObject 
	self shouldBeImplemented.! !
!NoPointsPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:27:33' prior: 51020571!
addIntoBackpackOf: aPlayableCharacter with: aNonPortableObject 
	
	aNonPortableObject remove: self.! !
!NoPointsPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:27:43' prior: 51020578!
addIntoBackpackOf: aPlayableCharacter with: aNonPortableObject 
	
	aNonPortableObject removeElement: self.! !

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:27:46'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:27:53'!
removeElement: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:28:32' prior: 51020594!
removeElement: aPortableObject

	elements remove: aPortableObject 
	
	! !

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:28:34'!
FAILURE!
!NoPointsPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:29:43' prior: 51020585!
addIntoBackpackOf: aPlayableCharacter with: aNonPortableObject 
	
	self addIntoBackpackOf: aPlayableCharacter .
	aNonPortableObject removeElement: self.! !

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 21:29:45'!
PASSED!

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:29:45'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:18:30' prior: 51020510!
test17

	| playableCharacter room box backpack | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	box _ NonPortableObject named: 'Box' with: {}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self assert: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
		
	! !

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 21:30:22'!
PASSED!

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:30:22'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:30:30'!
test18
 

	| playableCharacter room box backpack paper | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	box _ NonPortableObject named: 'Box' with: {paper}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: box isEmpty.
	! !

!testRun: #PlayableCharacterTest #test18 stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:30:31'!
PASSED!

!testRun: #PlayableCharacterTest #test18 stamp: 'ja 12/16/2020 21:30:31'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:31:23'!
test17_canNotTakePortableObjectsOfANonPortableObjectEmpty

	| playableCharacter room box backpack | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	box _ NonPortableObject named: 'Box' with: {}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self assert: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
		
	! !

!methodRemoval: PlayableCharacterTest #test17 stamp: 'ja 12/16/2020 21:31:26'!
test17

	| playableCharacter room box backpack | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	box _ NonPortableObject named: 'Box' with: {}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self assert: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
		
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:31:41' prior: 51020770!
test18
 

	| playableCharacter room box backpack paper key | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {paper}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: box isEmpty.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:31:53' prior: 51020894!
test18
 

	| playableCharacter room box backpack paper key | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {paper key}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: box isEmpty.
	! !

!testRun: #PlayableCharacterTest #test18 stamp: 'ja 12/16/2020 21:31:59'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:32:13' prior: 51020914!
test18
 

	| playableCharacter room box backpack paper key | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {paper , key}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: box isEmpty.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:32:15' prior: 51020937!
test18
 

	| playableCharacter room box backpack paper key | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {paper . key}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: box isEmpty.
	! !

!testRun: #PlayableCharacterTest #test18 stamp: 'ja 12/16/2020 21:32:16'!
ERROR!
!PointsPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:32:25'!
addIntoBackpackOf: aPlayableCharacter with: aNonPortableObject 
	self shouldBeImplemented.! !
!PointsPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:33:02' prior: 51020981!
addIntoBackpackOf: aPlayableCharacter with: aNonPortableObject 
	
	self addIntoBackpackOf: aPlayableCharacter .
	aNonPortableObject removeElement: self.! !

!testRun: #PlayableCharacterTest #test18 stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canNotTakePortableObjectsOfANonPortableObjectEmpty stamp: 'ja 12/16/2020 21:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test18 stamp: 'ja 12/16/2020 21:33:03'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:33:47'!
test19
 

	| playableCharacter room box backpack paper key superBox | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self key.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper }.
	box _ NonPortableObject named: 'Box' with: {key}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: box isEmpty.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:34:25' prior: 51021069!
test19
 

	| playableCharacter room box backpack paper key superBox | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {key }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: box isEmpty.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:35:01' prior: 51021092!
test19
 

	| playableCharacter room box backpack paper key superBox | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {key }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: superBox .
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: (playableCharacter backpackIncludes: key ).! !

!testRun: #PlayableCharacterTest #test19 stamp: 'ja 12/16/2020 21:35:06'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:35:21'!
addIntoBackpackOf: aPlayableCharacter with: aNonPortableObject 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/16/2020 21:35:46' prior: 51021141!
addIntoBackpackOf: aPlayableCharacter with: aNonPortableObject 
	
	elements copy do: [ :portableObject | portableObject addIntoBackpackOf: aPlayableCharacter  with: self]! !

!testRun: #PlayableCharacterTest #test19 stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canNotTakePortableObjectsOfANonPortableObjectEmpty stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test18 stamp: 'ja 12/16/2020 21:35:48'!
PASSED!

!testRun: #PlayableCharacterTest #test19 stamp: 'ja 12/16/2020 21:35:48'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:36:46'!
test18_canTakeManyPortableObject
 

	| playableCharacter room box backpack paper key | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {paper . key}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: box isEmpty.
	! !

!methodRemoval: PlayableCharacterTest #test18 stamp: 'ja 12/16/2020 21:36:57'!
test18
 

	| playableCharacter room box backpack paper key | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {paper . key}.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: box.
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: box isEmpty.
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:37:19' prior: 51021115!
test19
 

	| playableCharacter room box backpack paper key superBox | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {key }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: superBox .
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: (playableCharacter backpackIncludes: key ).
	self assert: box isEmpty ! !

!testRun: #PlayableCharacterTest #test19 stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canNotTakePortableObjectsOfANonPortableObjectEmpty stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeManyPortableObject stamp: 'ja 12/16/2020 21:37:20'!
PASSED!

!testRun: #PlayableCharacterTest #test19 stamp: 'ja 12/16/2020 21:37:20'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:37:28'!
test20
 

	| playableCharacter room box backpack paper key superBox | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {key }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: superBox .
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: (playableCharacter backpackIncludes: key ).
	self assert: box isEmpty ! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:38:16'!
test19_canTakePortableObjectButNotNonPortableObject
 

	| playableCharacter room box backpack paper key superBox | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {key }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: superBox .
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: (playableCharacter backpackIncludes: key ).
	self assert: box isEmpty ! !

!methodRemoval: PlayableCharacterTest #test19 stamp: 'ja 12/16/2020 21:38:19'!
test19
 

	| playableCharacter room box backpack paper key superBox | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {key }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: superBox .
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: (playableCharacter backpackIncludes: key ).
	self assert: box isEmpty !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:38:57'!
test20_canNotExceedWeight
 

	| playableCharacter room box backpack paper key superBox | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {key }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: superBox .
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: (playableCharacter backpackIncludes: key ).
	self assert: box isEmpty ! !

!methodRemoval: PlayableCharacterTest #test20 stamp: 'ja 12/16/2020 21:39:00'!
test20
 

	| playableCharacter room box backpack paper key superBox | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {key }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: superBox .
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: (playableCharacter backpackIncludes: key ).
	self assert: box isEmpty !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:39:38' prior: 51021448!
test20_canNotExceedWeight
 

	| playableCharacter room box backpack paper key superBox | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self keyExceed.
	box _ NonPortableObject named: 'Box' with: {key }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: superBox .
	
	playableCharacter take.
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self assert: (playableCharacter backpackIncludes: key ).
	self assert: box isEmpty ! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:41:14' prior: 51021497!
test20_canNotExceedWeight
 

	| playableCharacter room box backpack paper key superBox | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self keyExceed.
	box _ NonPortableObject named: 'Box' with: {key }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: superBox .
	
	self 
		should: [playableCharacter take.] 
		raise: Error  
		withMessageText: 	Backpack invalidWeightCapacityErrorDescription .
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self deny: (playableCharacter backpackIncludes: key ).
	self deny: box isEmpty .! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:41:55'!
keyExceed

	^ PointsPortableObject named: 'Key' weighing: 100 worth: 10.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:42:10' prior: 51021523!
test20_canNotExceedWeight
 

	| playableCharacter room box backpack paper keyExceed superBox | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	keyExceed _ self keyExceed.
	box _ NonPortableObject named: 'Box' with: {keyExceed }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: superBox .
	
	self 
		should: [playableCharacter take.] 
		raise: Error  
		withMessageText: 	Backpack invalidWeightCapacityErrorDescription .
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self deny: (playableCharacter backpackIncludes: keyExceed ).
	self deny: box isEmpty .! !

!testRun: #PlayableCharacterTest #test20_canNotExceedWeight stamp: 'ja 12/16/2020 21:42:19'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:45:16' prior: 51021551!
keyExceed

	^ PointsPortableObject named: 'Key' weighing: 105 worth: 10.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canNotTakePortableObjectsOfANonPortableObjectEmpty stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeManyPortableObject stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test19_canTakePortableObjectButNotNonPortableObject stamp: 'ja 12/16/2020 21:45:20'!
PASSED!

!testRun: #PlayableCharacterTest #test20_canNotExceedWeight stamp: 'ja 12/16/2020 21:45:20'!
FAILURE!

!testRun: #PlayableCharacterTest #test20_canNotExceedWeight stamp: 'ja 12/16/2020 21:45:20'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/16/2020 21:45:47' prior: 51021557!
test20_canNotExceedWeight
 

	| playableCharacter room box backpack paper keyExceed superBox | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	keyExceed _ self keyExceed.
	box _ NonPortableObject named: 'Box' with: {keyExceed }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: superBox .
	
	self 
		should: [playableCharacter take.] 
		raise: Error  
		withMessageText: 	Backpack maxWeightExceededErrorDescription .
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self deny: (playableCharacter backpackIncludes: keyExceed ).
	self deny: box isEmpty .! !

!testRun: #PlayableCharacterTest #test20_canNotExceedWeight stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canNotTakePortableObjectsOfANonPortableObjectEmpty stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeManyPortableObject stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test19_canTakePortableObjectButNotNonPortableObject stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #PlayableCharacterTest #test20_canNotExceedWeight stamp: 'ja 12/16/2020 21:45:48'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canNotTakePortableObjectsOfANonPortableObjectEmpty stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeManyPortableObject stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test19_canTakePortableObjectButNotNonPortableObject stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #PlayableCharacterTest #test20_canNotExceedWeight stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #RoomTest #test06_canNotPutAStageObjectWithYLessThanZero stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #RoomTest #test07_canNotPutAStageObjectWithXNotInteger stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #RoomTest #test08_canNotPutAStageObjectWithYNotInteger stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #RoomTest #test10_canNotPutElementsIntoRoomWithXOutside stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

!testRun: #RoomTest #test11_canNotPutElementsIntoRoomWithYOutside stamp: 'ja 12/16/2020 23:36:10'!
PASSED!

----QUIT----(16 December 2020 23:36:21) CuisUniversity-4365.image priorSource: 21849872!

----STARTUP---- (17 December 2020 15:24:56) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4365.image!


!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canNotTakePortableObjectsOfANonPortableObjectEmpty stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeManyPortableObject stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test19_canTakePortableObjectButNotNonPortableObject stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test20_canNotExceedWeight stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #RoomTest #test01_canNotCreateARoomWithHeightLessThanZero stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #RoomTest #test02_canNotCreateARoomWithWidthLessThanZero stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #RoomTest #test03_canNotCreateARoomWithHeightNotInteger stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #RoomTest #test04_canNotCreateARoomWithWidthNotInteger stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #RoomTest #test05_canNotPutAStageObjectWithXLessThanZero stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #RoomTest #test06_canNotPutAStageObjectWithYLessThanZero stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #RoomTest #test07_canNotPutAStageObjectWithXNotInteger stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #RoomTest #test08_canNotPutAStageObjectWithYNotInteger stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #RoomTest #test09_canPutAStageObjectIntoACellNotOccupied stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #RoomTest #test10_canNotPutElementsIntoRoomWithXOutside stamp: 'ja 12/17/2020 15:25:03'!
PASSED!

!testRun: #RoomTest #test11_canNotPutElementsIntoRoomWithYOutside stamp: 'ja 12/17/2020 15:25:03'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 15:28:03'!
test21_TESTCONPADRES
 

	| playableCharacter room box backpack paper keyExceed superBox | 
	
	room _ self defaultRoom.
	backpack _ self defaultBackpack .
	paper _ self paper .
	keyExceed _ self keyExceed.
	box _ NonPortableObject named: 'Box' with: {keyExceed }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: backpack at: 1@0 heading: #North with: room .
	
	room at: 1@1 put: superBox .
	
	self 
		should: [playableCharacter take.] 
		raise: Error  
		withMessageText: 	Backpack maxWeightExceededErrorDescription .
	
	self deny: (backpack isEmpty ).
	self assert: (room positionOccupied: 1@1).
	self assert: (playableCharacter backpackIncludes: paper ).
	self deny: (playableCharacter backpackIncludes: keyExceed ).
	self deny: box isEmpty .! !

TestCase subclass: #StageObjectTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #StageObjectTest category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/17/2020 15:29:36'!
TestCase subclass: #StageObjectTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!StageObjectTest methodsFor: 'no messages' stamp: 'ja 12/17/2020 15:30:58'!
test01_addingOnlyNotInheritance! !
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:31:00' prior: 51022175!
test01_addingOnlyNotInheritance

	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 15:31:16' prior: 51022134!
test21_TESTCONPADRES
 ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotInitializeAPlayableCharacterIntoPositionInvalid stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotInitializeAPlayableCharacterIntoPositionOccupied stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterCanNotMoveOutsideTheRoomMoveForward stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterCanNotMoveOutsideTheRoomMoveBackward stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterCanNotTakeStageObjectsOutOfReach stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterCanTakePointsPortableObject stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canNotTakePortableObjectsOfANonPortableObjectEmpty stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canTakeManyPortableObject stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test19_canTakePortableObjectButNotNonPortableObject stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test20_canNotExceedWeight stamp: 'ja 12/17/2020 15:31:20'!
PASSED!

!testRun: #PlayableCharacterTest #test21_TESTCONPADRES stamp: 'ja 12/17/2020 15:31:20'!
PASSED!
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:33:01' prior: 51022180!
test01_addingOnlyNotInheritance

	| box backpack paper key superBox | 

	backpack _ self defaultBackpack .
	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {key }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	! !
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:33:18' prior: 51022271!
test01_addingOnlyNotInheritance

	| box paper key superBox | 

	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {key }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 15:33:41' prior: 51019129!
paper

	^ NoPointsPortableObject named: 'Paper' weighing: 1.
	
	! !
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:33:51'!
paper

	^ NoPointsPortableObject named: 'Paper' weighing: 1.
! !
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:33:58'!
key

	^ PointsPortableObject named: 'Key' weighing: 10 worth: 10.! !
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:34:49' prior: 51022283!
test01_addingOnlyNotInheritance

	| box paper key superBox | 

	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {key }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	
	self assert: box includes: key.
	self assert: superBox includes: paper.
	self assert: superBox includes: box.
	! !

!testRun: #StageObjectTest #test01_addingOnlyNotInheritance stamp: 'ja 12/17/2020 15:35:12'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:35:19'!
includes: aPointsPortableObject 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:35:37' prior: 51022327!
includes: aPortableObject 

	elements includes: aPortableObject .
	
	! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:35:43' prior: 51022333!
includes: aPortableObject 

	^ elements includes: aPortableObject .
	
	! !

!testRun: #StageObjectTest #test01_addingOnlyNotInheritance stamp: 'ja 12/17/2020 15:35:44'!
PASSED!

!testRun: #StageObjectTest #test01_addingOnlyNotInheritance stamp: 'ja 12/17/2020 15:35:44'!
PASSED!
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:36:08' prior: 51022310!
test01_addingOnlyNotInheritance

	| box paper key superBox | 

	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {key }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box . key}.
	
	self assert: box includes: key.
	self assert: superBox includes: paper.
	self assert: superBox includes: box.
	! !
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:38:53' prior: 51022351!
test01_addingOnlyNotInheritance

	| box paper key superBox | 

	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {}.
	superBox _ NonPortableObject named: 'SuperBox' with: {}.
	
	box add: key.
	superBox add: paper.
	superBox add: box.
	
	self 
		should: [ superBox add: key] 
		raise: Error 
		withMessageText: NonPortableObject portableObjectIsInHerarchyErrorDescription! !
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:38:56' prior: 51022365!
test01_addingOnlyNotInheritance

	| box paper key superBox | 

	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {}.
	superBox _ NonPortableObject named: 'SuperBox' with: {}.
	
	box add: key.
	superBox add: paper.
	superBox add: box.
	
	self 
		should: [ superBox add: key] 
		raise: Error 
		withMessageText: NonPortableObject portableObjectIsInHerarchyErrorDescription.! !
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:34:49' prior: 51022381!
test01_addingOnlyNotInheritance

	| box paper key superBox | 

	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {key }.
	superBox _ NonPortableObject named: 'SuperBox' with: {paper . box }.
	
	self assert: box includes: key.
	self assert: superBox includes: paper.
	self assert: superBox includes: box.
	! !
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:39:56'!
test02_canNotAddingPortableObjectIfThisIsInHerarchy

	| box paper key superBox | 

	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {}.
	superBox _ NonPortableObject named: 'SuperBox' with: {}.
	
	box add: key.
	superBox add: paper.
	superBox add: box.
	
	self 
		should: [ superBox add: key] 
		raise: Error 
		withMessageText: NonPortableObject portableObjectIsInHerarchyErrorDescription.! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'ja 12/17/2020 15:40:20'!
portableObjectIsInHerarchyErrorDescription! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'ja 12/17/2020 15:40:34' prior: 51022428!
portableObjectIsInHerarchyErrorDescription

	^ 'Portable object is in herarchy'! !
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:40:46' prior: 51022411!
test02_canNotAddingPortableObjectIfThisIsInHerarchy

	| box paper key superBox | 

	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {}.
	superBox _ NonPortableObject named: 'SuperBox' with: {}.
	
	box add: key.
	superBox add: paper.
	superBox add: box.
	
	self 
		should: [ superBox add: key ] 
		raise: Error 
		withMessageText: NonPortableObject portableObjectIsInHerarchyErrorDescription.! !

!testRun: #StageObjectTest #test02_canNotAddingPortableObjectIfThisIsInHerarchy stamp: 'ja 12/17/2020 15:40:52'!
ERROR!
!NonPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 15:41:04'!
add: aPointsPortableObject 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 15:41:25' prior: 51022459!
add: aPortableObject 
	
	elements add: aPortableObject 	! !
!NonPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 15:42:37' prior: 51022464!
add: aPortableObject 
	
	( aPortableObject = self ) ifTrue: [ self error: self class canNotAddMyselfErrorDescription ].
	
	elements add: aPortableObject 	! !

!testRun: #StageObjectTest #test02_canNotAddingPortableObjectIfThisIsInHerarchy stamp: 'ja 12/17/2020 15:42:42'!
FAILURE!
!NonPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 15:48:02' prior: 51022469!
add: aPortableObject 
	
	| allParents |
	( aPortableObject = self ) ifTrue: [ self error: self class canNotAddMyselfErrorDescription ].
	 
	allParents _ OrderedCollection new.
	
	self findAllParents: allParents .
	allParents do: [ :parent | (parent isInHerarchy: aPortableObject) ifTrue: [ self error: self class portableObjectIsInHerarchyErrorDescription ]. ].
	
	
	elements add: aPortableObject 	! !
!NonPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 15:48:14' prior: 51022481!
add: aPortableObject 
	
	| allParents |
	( aPortableObject = self ) ifTrue: [ self error: self class canNotAddMyselfErrorDescription ].
	 
	allParents _ OrderedCollection new.
	
	self findAllParents: allParents .
	allParents do: [ :parent | (parent isInHerarchy: aPortableObject) ifTrue: [ self error: self class portableObjectIsInHerarchyErrorDescription ] ].
	
	
	elements add: aPortableObject 	! !

!testRun: #StageObjectTest #test02_canNotAddingPortableObjectIfThisIsInHerarchy stamp: 'ja 12/17/2020 15:48:20'!
FAILURE!

!testRun: #StageObjectTest #test02_canNotAddingPortableObjectIfThisIsInHerarchy stamp: 'ja 12/17/2020 15:48:30'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:48:43'!
findAllParents: anOrderedCollection 
	self shouldBeImplemented.! !

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/17/2020 15:50:27'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name elements parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 15:50:35' prior: 51022520!
findAllParents: anOrderedCollection 
	
	parents do: [:parent | (parent isRoot: anOrderedCollection) ifTrue: [ anOrderedCollection add: parent]].! !
!NonPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 15:51:40' prior: 51022497!
add: aPortableObject 
	
	| allParents |
	( aPortableObject = self ) ifTrue: [ self error: self class canNotAddMyselfErrorDescription ].
	 
	allParents _ OrderedCollection new.
	
	self findAllParents: allParents .
	allParents do: [ :aParent | (aParent isInHerarchy: aPortableObject) ifTrue: [ self error: self class portableObjectIsInHerarchyErrorDescription ] ].
	
	
	elements add: aPortableObject 	! !
!NonPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 15:51:52' prior: 51022535!
findAllParents: anOrderedCollection 
	
	parents do: [:aParent | (aParent isRoot: anOrderedCollection) ifTrue: [ anOrderedCollection add: aParent]].! !
!NonPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 15:52:25' prior: 51022559!
findAllParents: aCollection 
	
	parents do: [:aParent | (aParent isRoot: aCollection) ifTrue: [ aCollection add: aParent]].! !
!NonPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 15:53:50'!
isRoot: aCollection

	( self parents isEmpty ) ifTrue: [ ^ aCollection add: self].
	
	self parents do: [ :aParent | aParent isRoot: aCollection ].  ! !
!NonPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 15:55:41'!
isInHerarchy: aPortableObject

	(elements includes: aPortableObject) ifTrue: [ ^true ].
	
	elements do:[ :elem | elem isInHerarchy: aPortableObject ]! !
!NonPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 15:56:47' prior: 51022582!
isInHerarchy: aPortableObject

	(elements includes: aPortableObject) ifTrue: [ ^true ].
	
	elements do:[ :elem | (elem isInHerarchy: aPortableObject) ifTrue: [ ^ true] ].
	
	^ false! !

PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PointsPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/17/2020 15:57:18'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: 'parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NoPointsPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/17/2020 15:57:23'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: 'parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NoPointsPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/17/2020 15:57:40'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PointsPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'ja 12/17/2020 15:57:49'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 15:58:59' prior: 51022543!
add: aPortableObject 
	
	| allParents |
	( aPortableObject = self ) ifTrue: [ self error: self class canNotAddMyselfErrorDescription ].
	 
	allParents _ OrderedCollection new.
	
	self findAllParents: allParents .
	allParents do: [ :aParent | (aParent isInHerarchy: aPortableObject) ifTrue: [ self error: self class portableObjectIsInHerarchyErrorDescription ] ].
	
	aPortableObject addParent: self.
	elements add: aPortableObject 	! !
!NonPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 15:59:28'!
addParent: aStageObject

	parents add: aStageObject ! !
!NonPortableObject methodsFor: 'initialization' stamp: 'ja 12/17/2020 15:59:44' prior: 51020316!
initializeNamed: aName with: aCollectionStageObject 
	
	name := aName.
	elements := aCollectionStageObject asOrderedCollection .
	parents _ OrderedCollection new.! !
!PointsPortableObject methodsFor: 'initialization' stamp: 'ja 12/17/2020 15:59:59' prior: 51017101!
initializeNamed: aName weighing: aWeight worth: gamePoints
	
	name := aName.
	weight := aWeight.
	points := gamePoints.
	parents _ OrderedCollection new.! !
!NoPointsPortableObject methodsFor: 'initialization' stamp: 'ja 12/17/2020 16:00:06' prior: 51017051!
initializeNamed: aName weighing: aWeight
	
	name := aName.
	weight := aWeight.
	parents _ OrderedCollection new.! !
!NonPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 16:01:05'!
parents
	
	^ parents ! !

!testRun: #StageObjectTest #test02_canNotAddingPortableObjectIfThisIsInHerarchy stamp: 'ja 12/17/2020 16:02:04'!
ERROR!
!PointsPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 16:02:17'!
addParent: aNonPortableObject 
	self shouldBeImplemented.! !
!PointsPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 16:02:30' prior: 51022697!
addParent: aNonPortableObject 
	
	parents add: aNonPortableObject ! !

!testRun: #StageObjectTest #test02_canNotAddingPortableObjectIfThisIsInHerarchy stamp: 'ja 12/17/2020 16:02:34'!
ERROR!
!NoPointsPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 16:02:46'!
addParent: aNonPortableObject 
	self shouldBeImplemented.! !
!NoPointsPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 16:02:54' prior: 51022711!
addParent: aNonPortableObject 
	
	parents add: aNonPortableObject ! !

!testRun: #StageObjectTest #test02_canNotAddingPortableObjectIfThisIsInHerarchy stamp: 'ja 12/17/2020 16:02:55'!
FAILURE!
!NonPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 16:06:39' prior: 51022645!
add: aPortableObject 
	
	| allParents |
	( aPortableObject = self ) ifTrue: [ self error: self class canNotAddMyselfErrorDescription ].
	 
	allParents _ OrderedCollection new.
	
	self findAllParents: allParents .
	(allParents isEmpty) ifTrue: [ (self isInHerarchy: aPortableObject) ifTrue: [ self error: self class portableObjectIsInHerarchyErrorDescription ] ].
	allParents do: [ :aParent | (aParent isInHerarchy: aPortableObject) ifTrue: [ self error: self class portableObjectIsInHerarchyErrorDescription ] ].
	
	aPortableObject addParent: self.
	elements add: aPortableObject 	! !
!NoPointsPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 16:07:20'!
isInHerarchy: aPointsPortableObject 
	self shouldBeImplemented.! !
!NoPointsPortableObject methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 16:07:28' prior: 51022747!
isInHerarchy: aPointsPortableObject 
	
	! !

!testRun: #StageObjectTest #test02_canNotAddingPortableObjectIfThisIsInHerarchy stamp: 'ja 12/17/2020 16:07:29'!
FAILURE!
!NoPointsPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 16:08:37' prior: 51022753!
isInHerarchy: aPortableObject 
	
	^ self = aPortableObject ! !
!PointsPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 16:08:50'!
isInHerarchy: aPortableObject 
	
	^ self = aPortableObject ! !

!testRun: #StageObjectTest #test02_canNotAddingPortableObjectIfThisIsInHerarchy stamp: 'ja 12/17/2020 16:09:44'!
PASSED!

!testRun: #StageObjectTest #test01_addingOnlyNotInheritance stamp: 'ja 12/17/2020 16:09:44'!
PASSED!

!testRun: #StageObjectTest #test02_canNotAddingPortableObjectIfThisIsInHerarchy stamp: 'ja 12/17/2020 16:09:44'!
PASSED!
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 16:12:36'!
test03_canNotAddingPortableObjectIfThisIsInHerarchyOfParent

	| box paper key superBox | 

	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {}.
	superBox _ NonPortableObject named: 'SuperBox' with: {}.
	
	box add: key.
	superBox add: paper.
	superBox add: box.
	
	self 
		should: [ superBox add: key ] 
		raise: Error 
		withMessageText: NonPortableObject portableObjectIsInHerarchyErrorDescription.! !
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 16:12:51' prior: 51022783!
test03_canNotAddingPortableObjectIfThisIsInHerarchyOfParent

	| box paper key superBox | 

	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {}.
	superBox _ NonPortableObject named: 'SuperBox' with: {}.
	
	box add: key.
	superBox add: paper.
	superBox add: box.
	
	self 
		should: [ box add: paper ] 
		raise: Error 
		withMessageText: NonPortableObject portableObjectIsInHerarchyErrorDescription.! !

!testRun: #StageObjectTest #test03_canNotAddingPortableObjectIfThisIsInHerarchyOfParent stamp: 'ja 12/17/2020 16:13:01'!
FAILURE!

!testRun: #StageObjectTest #test03_canNotAddingPortableObjectIfThisIsInHerarchyOfParent stamp: 'ja 12/17/2020 16:13:48'!
FAILURE!

!testRun: #StageObjectTest #test03_canNotAddingPortableObjectIfThisIsInHerarchyOfParent stamp: 'ja 12/17/2020 16:15:18'!
FAILURE!

!testRun: #StageObjectTest #test03_canNotAddingPortableObjectIfThisIsInHerarchyOfParent stamp: 'ja 12/17/2020 16:15:28'!
PASSED!
!NonPortableObject methodsFor: 'herarchy' stamp: 'ja 12/17/2020 16:16:30' prior: 51022567!
findAllParents: aCollection 
	
	parents do: [:aParent | (aParent isRoot: aCollection) ].! !

!testRun: #StageObjectTest #test03_canNotAddingPortableObjectIfThisIsInHerarchyOfParent stamp: 'ja 12/17/2020 16:16:31'!
PASSED!

!testRun: #StageObjectTest #test03_canNotAddingPortableObjectIfThisIsInHerarchyOfParent stamp: 'ja 12/17/2020 16:16:35'!
PASSED!
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 16:17:20'!
test04_canNotAddingMyself

	| box paper key superBox | 

	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {}.
	superBox _ NonPortableObject named: 'SuperBox' with: {}.
	
	box add: key.
	superBox add: paper.
	superBox add: box.
	
	self 
		should: [ box add: box ] 
		raise: Error 
		withMessageText: NonPortableObject portableObjectIsInHerarchyErrorDescription.! !

!testRun: #StageObjectTest #test04_canNotAddingMyself stamp: 'ja 12/17/2020 16:17:21'!
FAILURE!
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 16:17:34' prior: 51022847!
test04_canNotAddingMyself

	| box paper key superBox | 

	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {}.
	superBox _ NonPortableObject named: 'SuperBox' with: {}.
	
	box add: key.
	superBox add: paper.
	superBox add: box.
	
	self 
		should: [ box add: box ] 
		raise: Error 
		withMessageText: NonPortableObject .! !

!testRun: #StageObjectTest #test04_canNotAddingMyself stamp: 'ja 12/17/2020 16:17:36'!
FAILURE!
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 16:17:58' prior: 51022866!
test04_canNotAddingMyself

	| box paper key superBox | 

	paper _ self paper .
	key _ self key.
	box _ NonPortableObject named: 'Box' with: {}.
	superBox _ NonPortableObject named: 'SuperBox' with: {}.
	
	box add: key.
	superBox add: paper.
	superBox add: box.
	
	self 
		should: [ box add: box ] 
		raise: Error 
		withMessageText: NonPortableObject canNotAddMyselfErrorDescription.! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'ja 12/17/2020 16:18:23'!
canNotAddMyselfErrorDescription

	^ 'Can not add myself'! !

!testRun: #StageObjectTest #test01_addingOnlyNotInheritance stamp: 'ja 12/17/2020 16:18:26'!
PASSED!

!testRun: #StageObjectTest #test02_canNotAddingPortableObjectIfThisIsInHerarchy stamp: 'ja 12/17/2020 16:18:26'!
PASSED!

!testRun: #StageObjectTest #test03_canNotAddingPortableObjectIfThisIsInHerarchyOfParent stamp: 'ja 12/17/2020 16:18:26'!
PASSED!

!testRun: #StageObjectTest #test04_canNotAddingMyself stamp: 'ja 12/17/2020 16:18:26'!
PASSED!

!classRemoval: #PointsPortableObject stamp: 'ja 12/17/2020 17:22:02'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'ja 12/17/2020 17:22:03'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PortableObject stamp: 'ja 12/17/2020 17:22:03'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NonPortableObject stamp: 'ja 12/17/2020 17:22:04'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name elements parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #StageObject stamp: 'ja 12/17/2020 17:22:05'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Room stamp: 'ja 12/17/2020 17:22:05'!
Object subclass: #Room
	instanceVariableNames: 'height width room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'ja 12/17/2020 17:22:06'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'ja 12/17/2020 17:22:06'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Backpack stamp: 'ja 12/17/2020 17:22:07'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #StageObjectTest stamp: 'ja 12/17/2020 17:22:08'!
TestCase subclass: #StageObjectTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #RoomTest stamp: 'ja 12/17/2020 17:22:08'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'ja 12/17/2020 17:22:09'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #BackpackTest stamp: 'ja 12/17/2020 17:22:10'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

----End fileIn of /home/jampuero/Descargas/ISW1-2020-2C-Recuperatorio-2doParcial.st----!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ja 12/17/2020 17:34:59'!
StageObject subclass: #Door
	instanceVariableNames: 'position behindPosition forwardPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!RoomTest methodsFor: 'tests' stamp: 'ja 12/17/2020 17:33:20'!
test13_aDoorCanNotCreateInInvalidPosition 

	| room door |
	
	room := Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.
! !
!RoomTest methodsFor: 'tests' stamp: 'ja 12/17/2020 17:35:58' prior: 51024466!
test13_aDoorCanNotCreateInInvalidPosition 

	| room door |
	
	room := Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.

	self 
		should: [	room at: -1@0 put: door.]
		raise: Error  
		withMessageText: Room ! !
!RoomTest methodsFor: 'tests' stamp: 'ja 12/17/2020 17:36:20' prior: 51024473!
test13_aDoorCanNotCreateInInvalidPosition 

	| room door |
	
	room := Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.

	self 
		should: [	room at: -1@0 put: door.]
		raise: Error  
		withMessageText: Room invalidPositionErrorDescription ! !

!testRun: #RoomTest #test13_aDoorCanNotCreateInInvalidPosition stamp: 'ja 12/17/2020 17:36:22'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/17/2020 17:36:22'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/17/2020 17:36:22'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/17/2020 17:36:22'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/17/2020 17:36:22'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/17/2020 17:36:22'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/17/2020 17:36:22'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/17/2020 17:36:22'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/17/2020 17:36:22'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/17/2020 17:36:22'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/17/2020 17:36:22'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/17/2020 17:36:22'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/17/2020 17:36:22'!
PASSED!

!testRun: #RoomTest #test13_aDoorCanNotCreateInInvalidPosition stamp: 'ja 12/17/2020 17:36:22'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'ja 12/17/2020 17:36:37' prior: 51024483!
test13_aDoorCanNotCreateInInvalidPosition 

	| room door |
	
	room := Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.

	self 
		should: [	room at: -1@-1 put: door.]
		raise: Error  
		withMessageText: Room invalidPositionErrorDescription ! !

!testRun: #RoomTest #test13_aDoorCanNotCreateInInvalidPosition stamp: 'ja 12/17/2020 17:36:39'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/17/2020 17:36:39'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/17/2020 17:36:39'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/17/2020 17:36:39'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/17/2020 17:36:39'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/17/2020 17:36:39'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/17/2020 17:36:39'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/17/2020 17:36:39'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/17/2020 17:36:39'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/17/2020 17:36:39'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/17/2020 17:36:39'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/17/2020 17:36:39'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/17/2020 17:36:39'!
PASSED!

!testRun: #RoomTest #test13_aDoorCanNotCreateInInvalidPosition stamp: 'ja 12/17/2020 17:36:39'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'ja 12/17/2020 17:45:45'!
test13_aDoorKnowsItsPositionInTheRooms

	| room door |
	
	room := Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.

	self 
		should: [	room at: -1@-1 put: door.]
		raise: Error  
		withMessageText: Room invalidPositionErrorDescription ! !

!methodRemoval: RoomTest #test13_aDoorCanNotCreateInInvalidPosition stamp: 'ja 12/17/2020 17:45:49'!
test13_aDoorCanNotCreateInInvalidPosition 

	| room door |
	
	room := Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.

	self 
		should: [	room at: -1@-1 put: door.]
		raise: Error  
		withMessageText: Room invalidPositionErrorDescription !

TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorTest category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ja 12/17/2020 17:47:59'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'no messages' stamp: 'ja 12/17/2020 17:48:37'!
test01_ADoorKnowsItsPositionInTheRooms

	| room1 room2 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	room2 _ Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	! !

!methodRemoval: RoomTest #test13_aDoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 17:48:46'!
test13_aDoorKnowsItsPositionInTheRooms

	| room door |
	
	room := Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.

	self 
		should: [	room at: -1@-1 put: door.]
		raise: Error  
		withMessageText: Room invalidPositionErrorDescription !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 17:50:12' prior: 51024628!
test01_ADoorKnowsItsPositionInTheRooms

	| room1 room2 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	room2 _ Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self assert: (door isInThePosition: 1@1).
	self assert: (door isInThePosition: 2@2).	 
	
	! !

StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom behindPosition forwardPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ja 12/17/2020 17:50:36'!
StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom behindPosition forwardPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 17:50:42'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 17:50:55'!
isInThePosition: aPoint 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 17:51:37' prior: 51024682!
isInThePosition: aPosition

	^ positionRoom = aPosition or:[ positionOtherRoom  = aPosition ].
	
	! !
!Room methodsFor: 'contents' stamp: 'ja 12/17/2020 17:52:39' prior: 51024108 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aStageObject .
	
	aStageObject at: aPosition.
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 17:54:15' overrides: 16880774!
at: aPosition 

	positionRoom ifNil: [^ positionRoom _ aPosition ].
	positionOtherRoom ifNil: [ positionOtherRoom _ aPosition ]! !
!NonPortableObject methodsFor: 'taken' stamp: 'ja 12/17/2020 17:54:27' overrides: 16880774!
at: aPosition ! !
!NonPortableObject methodsFor: 'taken' stamp: 'ja 12/17/2020 17:54:30' prior: 51024710 overrides: 16880774!
at: aPosition 

	self ! !
!PortableObject methodsFor: 'accessing' stamp: 'ja 12/17/2020 17:54:47' overrides: 16880774!
at: aPosition 

	self ! !

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 17:55:00'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/17/2020 17:55:04'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/17/2020 17:55:04'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/17/2020 17:55:04'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/17/2020 17:55:04'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/17/2020 17:55:04'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/17/2020 17:55:04'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/17/2020 17:55:04'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/17/2020 17:55:04'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/17/2020 17:55:05'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/17/2020 17:55:05'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/17/2020 17:55:05'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/17/2020 17:55:05'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 17:55:07'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 17:55:07'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 17:55:07'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 17:55:07'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 17:55:12'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 17:55:12'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 17:55:12'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 17:55:12'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 17:55:33'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 17:55:33'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 17:55:53'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 17:55:53'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 17:55:54'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 17:55:54'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 17:55:54'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 17:55:54'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 17:55:54'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 17:55:54'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 17:55:54'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 17:55:54'!
ERROR!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 17:55:54'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 17:55:54'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 17:55:54'!
ERROR!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 17:55:54'!
ERROR!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 17:55:54'!
ERROR!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 17:55:54'!
ERROR!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 17:55:54'!
ERROR!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 17:55:54'!
ERROR!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 17:55:54'!
ERROR!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 17:55:54'!
ERROR!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 17:56:09'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 17:56:13'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 17:56:13'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 17:56:13'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 17:56:13'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 17:56:17'!
ERROR!
!PlayableCharacter methodsFor: 'backpack' stamp: 'ja 12/17/2020 17:56:59' overrides: 16880774!
at: aPosition

	self! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 17:57:02'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 17:57:02'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 17:59:21' prior: 51024649!
test01_ADoorKnowsItsPositionInTheRooms

	| room1 room2 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	room2 _ Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self assert: (door isInThePosition: 1@1).
	self assert: (door isInThePosition: 2@2).	 
	self assert: (room1 positionOf: door = 1@1) 
	
	! !

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 17:59:21'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 17:59:29' prior: 51025161!
test01_ADoorKnowsItsPositionInTheRooms

	| room1 room2 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	room2 _ Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self assert: (door isInThePosition: 1@1).
	self assert: (door isInThePosition: 2@2).	 
	self assert: (room1 positionOf: door = (1@1))
	
	! !

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 17:59:30'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 17:59:45' prior: 51025179!
test01_ADoorKnowsItsPositionInTheRooms

	| room1 room2 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	room2 _ Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self assert: (door isInThePosition: 1@1).
	self assert: (door isInThePosition: 2@2).	 
	self assert: ((room1 positionOf: door) = (1@1))
	
	! !

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 17:59:47'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 17:59:47'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 17:59:57' prior: 51025197!
test01_ADoorKnowsItsPositionInTheRooms

	| room1 room2 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	room2 _ Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self assert: (door isInThePosition: 1@1).
	self assert: (door isInThePosition: 2@2).	 
	self assert: (room1 positionOf: door) = (1@1)
	
	! !

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 17:59:58'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 17:59:58'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:00:12' prior: 51025218!
test01_ADoorKnowsItsPositionInTheRooms

	| room1 room2 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	room2 _ Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self assert: (door isInThePosition: 1@1).
	self assert: (door isInThePosition: 2@2).	 
	self assert: (room1 positionOf: door) = (1@1).
	self assert: (room2 positionOf: door) = (2@2)
	
	! !

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 18:00:13'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 18:00:13'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:01:56'!
test02

	| room1 room2 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	room2 _ Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.
	room1 at: 1@1 put: door.
	

	! !

!testRun: #DoorTest #test02 stamp: 'ja 12/17/2020 18:02:01'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:07:02'!
test02_aDoorCanNotBeInMoreThanTwoRooms

	| room1 room2 room3 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	room2 _ Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	self 
		should: [room3 at: 3@3 put: door]
		raise: Error
		withMessageText: Door canNotBeInMoreThanTwoRoomsErrorDescription
	
	

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:07:16' prior: 51025272!
test02_aDoorCanNotBeInMoreThanTwoRooms

	| room1 room2 room3 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	room2 _ Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [room3 at: 3@3 put: door]
		raise: Error
		withMessageText: Door canNotBeInMoreThanTwoRoomsErrorDescription
	
	

	! !
!Door class methodsFor: 'no messages' stamp: 'ja 12/17/2020 18:07:43'!
canNotBeInMoreThanTwoRoomsErrorDescription

	^ 'Can not be in more than two rooms'! !

!testRun: #DoorTest #test02_aDoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:07:53'!
FAILURE!

!methodRemoval: DoorTest #test02 stamp: 'ja 12/17/2020 18:08:00'!
test02

	| room1 room2 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	room2 _ Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.
	room1 at: 1@1 put: door.
	

	!
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:08:33' prior: 51024703 overrides: 16880774!
at: aPosition 

	positionRoom ifNil: [^ positionRoom _ aPosition ].
	positionOtherRoom ifNil: [^ positionOtherRoom _ aPosition ].
	
	self error : self class canNotBeInMoreThanTwoRoomsErrorDescription ! !

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 18:08:38'!
PASSED!

!testRun: #DoorTest #test02_aDoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:08:38'!
FAILURE!

!testRun: #DoorTest #test02_aDoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:08:38'!
FAILURE!

!testRun: #DoorTest #test02_aDoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:08:46'!
FAILURE!

!testRun: #DoorTest #test02_aDoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:08:46'!
FAILURE!

!testRun: #DoorTest #test02_aDoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:09:19'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:09:59' prior: 51025287!
test02_aDoorCanNotBeInMoreThanTwoRooms

	| room1 room2 room3 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	room2 _ Room ofWidth: 10 andHeight: 10.
	room3 _ Room ofWidth: 10 andHeight: 10.	
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [room3 at: 3@3 put: door]
		raise: Error
		withMessageText: Door canNotBeInMoreThanTwoRoomsErrorDescription
	
	

	! !

!testRun: #DoorTest #test02_aDoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:10:04'!
FAILURE!

!testRun: #DoorTest #test02_aDoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:10:17'!
FAILURE!

!testRun: #DoorTest #test02_aDoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:10:53'!
FAILURE!
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:11:11' prior: 51025319 overrides: 16880774!
at: aPosition 

	positionRoom ifNil: [^ positionRoom _ aPosition ].
	positionOtherRoom ifNil: [^ positionOtherRoom _ aPosition ].
	
	self error: self class canNotBeInMoreThanTwoRoomsErrorDescription ! !

!testRun: #DoorTest #test02_aDoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:11:50'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 18:11:50'!
PASSED!

!testRun: #DoorTest #test02_aDoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:11:50'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:12:38' prior: 51025348!
test02_aDoorCanNotBeInMoreThanTwoRooms

	| room1 room2 room3 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	room2 _ Room ofWidth: 10 andHeight: 10.
	room3 _ Room ofWidth: 10 andHeight: 10.	
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [room3 at: 3@3 put: door]
		raise: Error
		withMessageText: Door canNotBeInMoreThanTwoRoomsErrorDescription.
		
	self assert: (room1 positionOf: door) = (1@1).
	self assert: (room2 positionOf: door) = (2@2)
	
	

	! !

!testRun: #DoorTest #test02_aDoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:12:40'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 18:12:40'!
PASSED!

!testRun: #DoorTest #test02_aDoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:12:40'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:13:19' prior: 51025393!
test02_aDoorCanNotBeInMoreThanTwoRooms

	| room1 room2 room3 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	room2 _ Room ofWidth: 10 andHeight: 10.
	room3 _ Room ofWidth: 10 andHeight: 10.	
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [room3 at: 3@3 put: door]
		raise: Error
		withMessageText: Door canNotBeInMoreThanTwoRoomsErrorDescription.
	
	self assert: (door isInThePosition: 1@1).
	self assert: (door isInThePosition: 2@2).	 	
	self assert: (room1 positionOf: door) = (1@1).
	self assert: (room2 positionOf: door) = (2@2)
	
	

	! !

!testRun: #DoorTest #test02_aDoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:13:21'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 18:13:21'!
PASSED!

!testRun: #DoorTest #test02_aDoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:13:21'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:14:01'!
test02_ADoorCanNotBeInMoreThanTwoRooms

	| room1 room2 room3 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	room2 _ Room ofWidth: 10 andHeight: 10.
	room3 _ Room ofWidth: 10 andHeight: 10.	
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [room3 at: 3@3 put: door]
		raise: Error
		withMessageText: Door canNotBeInMoreThanTwoRoomsErrorDescription.
	
	self assert: (door isInThePosition: 1@1).
	self assert: (door isInThePosition: 2@2).	 	
	self assert: (room1 positionOf: door) = (1@1).
	self assert: (room2 positionOf: door) = (2@2)
	
	

	! !

!methodRemoval: DoorTest #test02_aDoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:14:01'!
test02_aDoorCanNotBeInMoreThanTwoRooms

	| room1 room2 room3 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	room2 _ Room ofWidth: 10 andHeight: 10.
	room3 _ Room ofWidth: 10 andHeight: 10.	
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [room3 at: 3@3 put: door]
		raise: Error
		withMessageText: Door canNotBeInMoreThanTwoRoomsErrorDescription.
	
	self assert: (door isInThePosition: 1@1).
	self assert: (door isInThePosition: 2@2).	 	
	self assert: (room1 positionOf: door) = (1@1).
	self assert: (room2 positionOf: door) = (2@2)
	
	

	!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:16:39'!
test03_ADoorCanNotOverlapWithAnotherStageObject

	| room1 door |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	
	door _ Door new.
	 
	room1 at: 1@1 put: door.

	self 
		should: [room1 at: 1@1 put: door]
		raise: Error
		withMessageText: Door canNotBeInMoreThanTwoRoomsErrorDescription.
	
	self deny: (door isInThePosition: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:17:25' prior: 51025496!
test03_ADoorCanNotOverlapWithAnotherStageObject

	| room1 door paper |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	paper _ self paper.
	door _ Door new.
	 
	room1 at: 1@1 put: door.

	self 
		should: [room1 at: 1@1 put: door]
		raise: Error
		withMessageText: Door canNotBeInMoreThanTwoRoomsErrorDescription.
	
	self deny: (door isInThePosition: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:17:34'!
paper

	^ PointsPortableObject named: 'paper' weighing: 1 worth: 1! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:17:42' prior: 51025510!
test03_ADoorCanNotOverlapWithAnotherStageObject

	| room1 door paper |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	paper _ self paper.
	door _ Door new.
	 
	room1 at: 1@1 put: paper .

	self 
		should: [room1 at: 1@1 put: door]
		raise: Error
		withMessageText: Door canNotBeInMoreThanTwoRoomsErrorDescription.
	
	self deny: (door isInThePosition: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:17:51' prior: 51025530!
test03_ADoorCanNotOverlapWithAnotherStageObject

	| room1 door paper |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	paper _ self paper.
	door _ Door new.
	 
	room1 at: 1@1 put: paper .

	self 
		should: [room1 at: 1@1 put: door]
		raise: Error
		withMessageText: Room canNotBeInMoreThanTwoRoomsErrorDescription.
	
	self deny: (door isInThePosition: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:18:12' prior: 51025545!
test03_ADoorCanNotOverlapWithAnotherStageObject

	| room1 door paper |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	paper _ self paper.
	door _ Door new.
	 
	room1 at: 1@1 put: paper .

	self 
		should: [room1 at: 1@1 put: door]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription .
	
	self deny: (door isInThePosition: 1@1).
	! !

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 18:18:13'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 18:18:13'!
PASSED!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:18:13'!
PASSED!

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 18:18:13'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:19:43'!
test04_ADoorCanNotPutIntoANonPortableObject

	| room1 door paper |
	
	room1 _ Room ofWidth: 10 andHeight: 10.
	paper _ self paper.
	door _ Door new.
	 
	room1 at: 1@1 put: paper .

	self 
		should: [room1 at: 1@1 put: door]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription .
	
	self deny: (door isInThePosition: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:20:42' prior: 51025587!
test04_ADoorCanNotPutIntoANonPortableObject

	| door box |
	
	door _ Door new.

	self 
		should: [	box _ NonPortableObject named: 'Box' withAll: { door }.]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription .
	
	self deny: (door isInThePosition: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:20:58' prior: 51025601!
test04_ADoorCanNotPutIntoANonPortableObject

	| door |
	
	door _ Door new.

	self 
		should: [	NonPortableObject named: 'Box' withAll: { door }.]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription .
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:21:27' prior: 51025613!
test04_ADoorCanNotPutIntoANonPortableObject

	| door |
	
	door _ Door new.

	self 
		should: [	NonPortableObject named: 'Box' withAll: { door }.]
		raise: Error
		withMessageText: Door doorIsNotPortableErrorDescription .
	
	! !
!Door class methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:21:59'!
doorIsNotPortableErrorDescription

	^ 'Door is not portable'! !

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 18:22:08'!
FAILURE!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'ja 12/17/2020 18:25:43' prior: 51024307!
named: aName withAll: aCollectionOfStageObjects 
	
	aCollectionOfStageObjects do:[ :aStageObjects | aStageObjects isDoor ifTrue: [ self error: self doorIsNotPortableErrorDescription  ]  ].
	
	^self new initializeNamed: aName withAll: aCollectionOfStageObjects ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:26:06' prior: 51025624!
test04_ADoorCanNotPutIntoANonPortableObject

	| door |
	
	door _ Door new.

	self 
		should: [	NonPortableObject named: 'Box' withAll: { door }.]
		raise: Error
		withMessageText: NonPortableObject doorIsNotPortableErrorDescription .
	
	! !

!methodRemoval: Door class #doorIsNotPortableErrorDescription stamp: 'ja 12/17/2020 18:26:21'!
doorIsNotPortableErrorDescription

	^ 'Door is not portable'!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'ja 12/17/2020 18:26:31'!
doorIsNotPortableErrorDescription

	^ 'Door is not portable'! !
!NonPortableObject methodsFor: 'taken' stamp: 'ja 12/17/2020 18:26:57'!
isDoor 

	^ false! !
!PortableObject methodsFor: 'taken' stamp: 'ja 12/17/2020 18:27:06'!
isDoor 

	^ false! !
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:27:15'!
isDoor 

	^ true! !

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 18:27:21'!
PASSED!

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 18:27:23'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 18:27:23'!
PASSED!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:27:23'!
PASSED!

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 18:27:23'!
PASSED!

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 18:27:23'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'ja 12/17/2020 18:27:27'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'ja 12/17/2020 18:27:27'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'ja 12/17/2020 18:27:27'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'ja 12/17/2020 18:27:27'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'ja 12/17/2020 18:27:27'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'ja 12/17/2020 18:27:27'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 18:27:27'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 18:27:27'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'ja 12/17/2020 18:27:27'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'ja 12/17/2020 18:27:27'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'ja 12/17/2020 18:27:27'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'ja 12/17/2020 18:27:27'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'ja 12/17/2020 18:27:27'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'ja 12/17/2020 18:27:27'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'ja 12/17/2020 18:27:27'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 18:27:29'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/17/2020 18:27:31'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/17/2020 18:27:31'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/17/2020 18:27:31'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/17/2020 18:27:31'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/17/2020 18:27:31'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/17/2020 18:27:31'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/17/2020 18:27:31'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/17/2020 18:27:31'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/17/2020 18:27:31'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/17/2020 18:27:31'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/17/2020 18:27:31'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/17/2020 18:27:31'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:29:46'!
test21_PlayableCharacterCanMoveIfTheDoorIsOpen! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:30:16'!
test21_PlayableCharacterCanUseIfTheDoorIsOpen! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:30:34'!
test22_PlayableCharacterCanUseIfTheDoorIsOpen! !

!methodRemoval: PlayableCharacterTest #test21_PlayableCharacterCanMoveIfTheDoorIsOpen stamp: 'ja 12/17/2020 18:30:44'!
test21_PlayableCharacterCanMoveIfTheDoorIsOpen!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:31:33'!
test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable! !

!methodRemoval: PlayableCharacterTest #test21_PlayableCharacterCanUseIfTheDoorIsOpen stamp: 'ja 12/17/2020 18:31:37'!
test21_PlayableCharacterCanUseIfTheDoorIsOpen!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:31:41' prior: 51025893!
test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable

	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:34:44' prior: 51025904!
test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable

	| player room |
	
	room _ self defaultRoom .
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:35:48' prior: 51025910!
test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable

	| player room1 room2 |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.! !
!PlayableCharacterTest methodsFor: 'defaults' stamp: 'ja 12/17/2020 18:36:16'!
otherDefaultRoom

	^ self defaultRoom.
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:37:24' prior: 51025920!
test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable

	| player room1 room2 door |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	door _ Door new.
	
	room1 at: 1@1 put: door.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:38:54' prior: 51025936!
test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable

	| player room1 room2 door |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	door _ Door new.
	
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [ player using: door ] 
		raise: Error  
		withMessageText: PlayableCharacter doorIsUnreachable.! !

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 18:39:23'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:39:34'!
doorIsUnreachable
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:39:55' prior: 51025971!
doorIsUnreachable
	
	^'Door is unreachable'! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:40:06'!
doorIsUnreachableErrorDescription
	
	^'Door is unreachable'! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:40:06' prior: 51025949!
test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable

	| player room1 room2 door |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	door _ Door new.
	
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [ player using: door ] 
		raise: Error  
		withMessageText: PlayableCharacter doorIsUnreachableErrorDescription.! !

!methodRemoval: PlayableCharacter class #doorIsUnreachable stamp: 'ja 12/17/2020 18:40:07'!
doorIsUnreachable
	
	^'Door is unreachable'!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 18:40:26'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 18:40:42'!
FAILURE!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsOpen stamp: 'ja 12/17/2020 18:40:42'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 18:40:42'!
FAILURE!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/17/2020 18:40:48'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/17/2020 18:40:48'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/17/2020 18:40:48'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/17/2020 18:40:48'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/17/2020 18:40:48'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/17/2020 18:40:48'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/17/2020 18:40:48'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/17/2020 18:40:48'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/17/2020 18:40:48'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/17/2020 18:40:48'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/17/2020 18:40:48'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/17/2020 18:40:48'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 18:40:51'!
PASSED!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 18:40:51'!
PASSED!

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 18:40:51'!
PASSED!

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 18:40:51'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 18:41:09'!
FAILURE!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:41:26'!
using: aDoor 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:41:43' prior: 51026159!
using: aDoor 
	
	self error: self class doorIsUnreachableErrorDescription ! !

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 18:41:44'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsOpen stamp: 'ja 12/17/2020 18:41:44'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:42:21'!
test22_PlayableCharacterCanUseIfTheDoorIsReachable! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:42:34'!
test23_PlayableCharacterCanUseIfTheDoorIsOpen! !

!methodRemoval: PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsOpen stamp: 'ja 12/17/2020 18:42:34'!
test22_PlayableCharacterCanUseIfTheDoorIsOpen!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:43:29' prior: 51026258!
test22_PlayableCharacterCanUseIfTheDoorIsReachable


	| player room1 room2 door |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	door _ Door new.
	
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [ player using: door ] 
		raise: Error  
		withMessageText: PlayableCharacter doorIsUnreachableErrorDescription.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:43:39'!
test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen


	| player room1 room2 door |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	door _ Door new.
	
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [ player using: door ] 
		raise: Error  
		withMessageText: PlayableCharacter doorIsUnreachableErrorDescription.! !

!methodRemoval: PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachable stamp: 'ja 12/17/2020 18:43:39'!
test22_PlayableCharacterCanUseIfTheDoorIsReachable


	| player room1 room2 door |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	door _ Door new.
	
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [ player using: door ] 
		raise: Error  
		withMessageText: PlayableCharacter doorIsUnreachableErrorDescription.!

!classDefinition: #OpenDoor category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ja 12/17/2020 18:44:16'!
Door subclass: #OpenDoor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:44:08' prior: 51026290!
test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen


	| player room1 room2 door |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	door _ OpenDoor new.
	
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [ player using: door ] 
		raise: Error  
		withMessageText: PlayableCharacter doorIsUnreachableErrorDescription.! !

	| player room1 room2 door |!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:44:36' prior: 51026334!
test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen


	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 1@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	
	self 
		should: [ player using: openDoor ] 
		raise: Error  
		withMessageText: PlayableCharacter doorIsUnreachableErrorDescription.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:44:48' prior: 51026353!
test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen


	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	
	self 
		should: [ player using: openDoor ] 
		raise: Error  
		withMessageText: PlayableCharacter doorIsUnreachableErrorDescription.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:47:24' prior: 51026372!
test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen


	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	
	player using: openDoor .
	
	self assert: (room2 positionOf: 2@3).! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 18:47:39'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:49:10' prior: 51026164!
using: aDoor 
	
	( aDoor position = self forwardPosition ) ifFalse: [ self error: self class doorIsUnreachableErrorDescription ].! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 18:49:15'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 18:50:27'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 18:50:27'!
ERROR!
!OpenDoor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:50:39'!
position
	self shouldBeImplemented.! !
!OpenDoor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:50:45' prior: 51026432!
position
	
	^ positionRoom ! !

aDoor position!

self forwardPosition!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:55:43' prior: 51026412!
using: aDoor 
	
	
	( room positionOf: aDoor = self forwardPosition ) ifFalse: [ self error: self class doorIsUnreachableErrorDescription ].

! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 18:55:46'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 18:56:03'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:56:16' prior: 51026391!
test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen


	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	
	player using: openDoor toGoTo: room2.
	
	self assert: (room2 positionOf: 2@3).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:56:30' prior: 51025987!
test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable

	| player room1 room2 door |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	door _ Door new.
	
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [ player using: door toGoto: room2] 
		raise: Error  
		withMessageText: PlayableCharacter doorIsUnreachableErrorDescription.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:57:01'!
using: aDoor toGoTo: aOtherRoom
	
	
	( room positionOf: aDoor = self forwardPosition ) ifFalse: [ self error: self class doorIsUnreachableErrorDescription ].

! !

!methodRemoval: PlayableCharacter #using: stamp: 'ja 12/17/2020 18:57:05'!
using: aDoor 
	
	
	( room positionOf: aDoor = self forwardPosition ) ifFalse: [ self error: self class doorIsUnreachableErrorDescription ].

!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 18:57:18'!
FAILURE!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 18:57:18'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 18:57:30' prior: 51026476!
test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable

	| player room1 room2 door |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	door _ Door new.
	
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [ player using: door toGoTo: room2] 
		raise: Error  
		withMessageText: PlayableCharacter doorIsUnreachableErrorDescription.! !

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 18:57:31'!
FAILURE!

room positionOf: aDoor!

self forwardPosition!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:58:14' prior: 51026494!
using: aDoor toGoTo: aOtherRoom
	
	
	( (room positionOf: aDoor) = self forwardPosition ) ifFalse: [ self error: self class doorIsUnreachableErrorDescription ].

! !

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 18:58:16'!
ERROR!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseIfTheDoorIsOpen stamp: 'ja 12/17/2020 18:58:16'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 18:58:16'!
ERROR!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 18:58:20'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 18:58:22'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 18:58:22'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 18:59:22' prior: 51026543!
using: aDoor toGoTo: aOtherRoom
	
	
	( (room positionOf: aDoor) = self forwardPosition ) ifFalse: [ self error: self class doorIsUnreachableErrorDescription ].
	
	self moveTo: (aOtherRoom positionOf: aDoor) .

! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 18:59:47'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:00:00'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:00:17' prior: 51026662!
using: aDoor toGoTo: aOtherRoom
	
	
	( (room positionOf: aDoor) = self forwardPosition ) ifFalse: [ self error: self class doorIsUnreachableErrorDescription ].
	
	self moveTo: (aOtherRoom positionOf: aDoor + self forwardPosition ) .

! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:00:24' prior: 51026681!
using: aDoor toGoTo: aOtherRoom
	
	
	( (room positionOf: aDoor) = self forwardPosition ) ifFalse: [ self error: self class doorIsUnreachableErrorDescription ].
	
	self moveTo: (aOtherRoom positionOf: (aDoor + self forwardPosition) ) .

! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:00:27'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:01:21'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:02:11' prior: 51026692!
using: aDoor toGoTo: aOtherRoom
	
	
	( (room positionOf: aDoor) = self forwardPosition ) ifFalse: [ self error: self class doorIsUnreachableErrorDescription ].
	
	self moveTo: ((aOtherRoom positionOf: aDoor) + self forwardPosition) .

! !

aOtherRoom positionOf: aDoor!

self forwardPosition!

(aOtherRoom positionOf: aDoor) + self forwardPosition!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:02:47'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:02:53'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:02:53'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:03:03'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:03:03'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:04:17' prior: 51026712!
using: aDoor toGoTo: aOtherRoom
	
	
	( (room positionOf: aDoor) = self forwardPosition ) ifFalse: [ self error: self class doorIsUnreachableErrorDescription ].
	
	self moveTo: ((aOtherRoom positionOf: aDoor) + self forwardPosition) with: aOtherRoom .

! !
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/17/2020 19:05:18'!
moveTo: aNewPosition with: aOtherRoom
	
	aOtherRoom moveFrom: self position to: aNewPosition.
		! !
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/17/2020 19:05:30' prior: 51026759!
moveTo: aNewPosition with: aOtherRoom
	
	aOtherRoom moveFrom: self position to: aNewPosition.
	! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:05:44' prior: 51026748!
using: aDoor toGoTo: aOtherRoom
	
	
	( (room positionOf: aDoor) = self forwardPosition ) ifFalse: [ self error: self class doorIsUnreachableErrorDescription ].
	
	self moveTo: ((aOtherRoom positionOf: aDoor) + self forwardPosition) with: aOtherRoom .
	
	room _ aOtherRoom .

! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:05:49' prior: 51026772!
using: aDoor toGoTo: anOtherRoom
	
	
	( (room positionOf: aDoor) = self forwardPosition ) ifFalse: [ self error: self class doorIsUnreachableErrorDescription ].
	
	self moveTo: ((anOtherRoom positionOf: aDoor) + self forwardPosition) with: anOtherRoom .
	
	room _ anOtherRoom .

! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:05:51'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:06:06'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:07:18'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/17/2020 19:09:36' prior: 51026765!
moveTo: aNewPosition with: aOtherRoom
	
	room moveFrom: self position to: aNewPosition with: aOtherRoom.
	! !
!Room methodsFor: 'contents' stamp: 'ja 12/17/2020 19:10:44'!
moveFrom: aSourcePosition to: aTargetPosition with: anOtherRoom

	| toMove |
	
	toMove := self at: aSourcePosition.
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !
!Room methodsFor: 'contents' stamp: 'ja 12/17/2020 19:10:55' prior: 51026815!
moveFrom: aSourcePosition to: aTargetPosition with: anOtherRoom

	| toMove |
	
	toMove := self at: aSourcePosition.
	anOtherRoom at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:11:41'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:11:57'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:11:57'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:12:20' prior: 51026459!
test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen


	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	
	player using: openDoor toGoTo: room2.
	
	self assert: (room2 positionOf: 2@3) = player .! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:12:22'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:12:33' prior: 51026846!
test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen


	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	
	player using: openDoor toGoTo: room2.
	
	self assert: (room2 positionOf: (2@3)) = player .! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:12:35'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:13:18' prior: 51026868!
test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen


	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	
	player using: openDoor toGoTo: room2.
	
	self assert: (room2 positionOf: player  =  2@3).! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:13:19'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:13:28' prior: 51026890!
test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen


	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	
	player using: openDoor toGoTo: room2.
	
	self assert: (room2 positionOf: player ) =  (2@3).! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseIfTheDoorIsOpen stamp: 'ja 12/17/2020 19:13:29'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:14:49' prior: 51026912!
test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen


	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	
	player using: openDoor toGoTo: room2.
	
	self assert: (room2 positionOf: player ) =  (2@3).
	self 
		should: [ room1 positionOf: player]
		raise: Error
		withMessageText: Room objectNotInRoomErrorDescription.! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseIfTheDoorIsOpen stamp: 'ja 12/17/2020 19:14:52'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseIfTheDoorIsOpen stamp: 'ja 12/17/2020 19:15:09'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/17/2020 19:15:13'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/17/2020 19:15:13'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/17/2020 19:15:13'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/17/2020 19:15:13'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/17/2020 19:15:13'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/17/2020 19:15:13'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/17/2020 19:15:13'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/17/2020 19:15:13'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/17/2020 19:15:13'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/17/2020 19:15:13'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/17/2020 19:15:13'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/17/2020 19:15:13'!
PASSED!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:17:27'!
assertDoorIsInTheSameRoom: aDoor
	
	
	( (room positionOf: aDoor) = self forwardPosition ) ifFalse: [ self error: self class doorIsUnreachableErrorDescription ].
	
! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:17:46' prior: 51026784!
using: aDoor toGoTo: anOtherRoom
	
	self assertDoorIsInTheSameRoom: aDoor .
	"( (room positionOf: aDoor) = self forwardPosition ) ifFalse: [ self error: self class doorIsUnreachableErrorDescription ]."
	
	self moveTo: ((anOtherRoom positionOf: aDoor) + self forwardPosition) with: anOtherRoom .
	
	room _ anOtherRoom .

! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:17:49'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseIfTheDoorIsOpen stamp: 'ja 12/17/2020 19:17:49'!
PASSED!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:18:00' prior: 51027272!
using: aDoor toGoTo: anOtherRoom
	
	self assertDoorIsInTheSameRoom: aDoor .
	
	self moveTo: ((anOtherRoom positionOf: aDoor) + self forwardPosition) with: anOtherRoom .
	
	room _ anOtherRoom .

! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:18:46' prior: 51027022!
test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen


	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	
	player using: openDoor toGoTo: room2.
	
	self 
		should: [ room1 positionOf: player]
		raise: Error
		withMessageText: Room objectNotInRoomErrorDescription.
	
	self assert: (room2 positionOf: player ) =  (2@3).! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:18:47'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseIfTheDoorIsOpen stamp: 'ja 12/17/2020 19:18:47'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:20:45'!
test23_PlayableCharacterCanUseIfTheDoorIfIsOpenAndThereAreNoObjectsInFront

	! !

!methodRemoval: PlayableCharacterTest #test23_PlayableCharacterCanUseIfTheDoorIsOpen stamp: 'ja 12/17/2020 19:20:49'!
test23_PlayableCharacterCanUseIfTheDoorIsOpen!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:21:18'!
test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront

	! !

!methodRemoval: PlayableCharacterTest #test23_PlayableCharacterCanUseIfTheDoorIfIsOpenAndThereAreNoObjectsInFront stamp: 'ja 12/17/2020 19:21:18'!
test23_PlayableCharacterCanUseIfTheDoorIfIsOpenAndThereAreNoObjectsInFront

	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:21:34'!
test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen


	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	
	player using: openDoor toGoTo: room2.
	
	self 
		should: [ room1 positionOf: player]
		raise: Error
		withMessageText: Room objectNotInRoomErrorDescription.
	
	self assert: (room2 positionOf: player ) =  (2@3).! !

!methodRemoval: PlayableCharacterTest #test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:21:34'!
test22_PlayableCharacterCanUseIfTheDoorIsReachableAndIsOpen


	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	
	player using: openDoor toGoTo: room2.
	
	self 
		should: [ room1 positionOf: player]
		raise: Error
		withMessageText: Room objectNotInRoomErrorDescription.
	
	self assert: (room2 positionOf: player ) =  (2@3).!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:21:42' prior: 51027508!
test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront

	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:22:16' prior: 51027564!
test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	
	player using: openDoor toGoTo: room2.
	
	self 
		should: [ room1 positionOf: player]
		raise: Error
		withMessageText: Room objectNotInRoomErrorDescription.
	
	self assert: (room2 positionOf: player ) =  (2@3).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:24:12' prior: 51027570!
test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	room2 at: 2@3 put: paper.
	
	self 
		should: [ player using: openDoor toGoTo: room2.]
		raise: Error
		withMessageText: PlayableCharacter canNotUsingDoorErrorDescription.
	
	self assert: (room1 positionOf: player ) =  (0@0).! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:24:53'!
canNotUsingDoorErrorDescription

	^ 'Can not use the door'! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:25:03'!
canNotUseDoorErrorDescription

	^ 'Can not use the door'! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:25:03' prior: 51027593!
test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	room2 at: 2@3 put: paper.
	
	self 
		should: [ player using: openDoor toGoTo: room2.]
		raise: Error
		withMessageText: PlayableCharacter canNotUseDoorErrorDescription.
	
	self assert: (room1 positionOf: player ) =  (0@0).! !

!methodRemoval: PlayableCharacter class #canNotUsingDoorErrorDescription stamp: 'ja 12/17/2020 19:25:03'!
canNotUsingDoorErrorDescription

	^ 'Can not use the door'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:25:22' prior: 51027627!
test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	room2 at: 2@3 put: paper.
	
	self 
		should: [ player using: openDoor toGoTo: room2.]
		raise: Error
		withMessageText: PlayableCharacter canNotUseDoorErrorDescription.
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 19:25:32'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:26:45' prior: 51027655!
test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	room2 at: 2@3 put: paper.
	
	self 
		should: [ player using: openDoor toGoTo: room2.]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 19:26:47'!
PASSED!

!methodRemoval: PlayableCharacter class #canNotUseDoorErrorDescription stamp: 'ja 12/17/2020 19:27:08'!
canNotUseDoorErrorDescription

	^ 'Can not use the door'!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:27:14'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 19:27:14'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:29:59'!
test24_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	room2 at: 2@3 put: paper.
	
	self 
		should: [ player using: openDoor toGoTo: room2.]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:33:13' prior: 51026518!
test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable

	| player room1 room2 door |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	door _ Door new.
	
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [ player using: door toGoTo: room2 ] 
		raise: Error  
		withMessageText: PlayableCharacter doorIsUnreachableErrorDescription.! !
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:35:32'!
at: aPosition with: room

	positionRoom ifNil: [^ positionRoom _ aPosition ].
	positionOtherRoom ifNil: [^ positionOtherRoom _ aPosition ].
	
	self error: self class canNotBeInMoreThanTwoRoomsErrorDescription ! !

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ja 12/17/2020 19:36:58'!
StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom behindPosition forwardPosition aroom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ja 12/17/2020 19:37:01'!
StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom behindPosition forwardPosition aroom otherRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:36:57' prior: 51027934!
at: aPosition with: aRoom

	positionRoom ifNil: [ positionRoom _ aPosition. aroom _ aRoom ].
	positionOtherRoom ifNil: [^ positionOtherRoom _ otherRoom _ aRoom ].
	
	self error: self class canNotBeInMoreThanTwoRoomsErrorDescription ! !

StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom aroom otherRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ja 12/17/2020 19:37:19'!
StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom aroom otherRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom aRoom otherRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom aroom otherRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ja 12/17/2020 19:37:33'!
StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom aroom otherRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom roomBehind otherRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ja 12/17/2020 19:37:54'!
StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom roomBehind otherRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom roomBehind roomFront'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ja 12/17/2020 19:38:19'!
StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom roomBehind roomFront'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:38:38' prior: 51027965!
at: aPosition with: aRoom

	positionRoom ifNil: [ positionRoom _ aPosition. roomBehind _ aRoom ].
	positionOtherRoom ifNil: [^ positionOtherRoom _ roomFront _ aRoom ].
	
	self error: self class canNotBeInMoreThanTwoRoomsErrorDescription ! !
!Room methodsFor: 'contents' stamp: 'ja 12/17/2020 19:39:16' prior: 51024694 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aStageObject .
	
	aStageObject at: aPosition with: self.
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:40:22' prior: 51028046!
at: aPosition with: aRoom

	positionRoom ifNil: [ positionRoom at: aPosition. roomBehind _ aRoom ].
	positionOtherRoom ifNil: [^ positionOtherRoom _ roomFront _ aRoom ].
	
	self error: self class canNotBeInMoreThanTwoRoomsErrorDescription ! !
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:40:54' prior: 51028066!
at: aPosition with: aRoom

	positionRoom ifNil: [ positionRoom _ aPosition. ^ roomBehind _ aRoom ].
	positionOtherRoom ifNil: [ positionOtherRoom _ aPosition . ^roomFront _ aRoom ].
	
	self error: self class canNotBeInMoreThanTwoRoomsErrorDescription ! !
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:43:23' prior: 51028077!
at: aPosition with: aRoom

	positionRoom ifNil: [ ^ positionRoom at: aPosition put: aRoom ].
	positionOtherRoom ifNil: [ positionOtherRoom at: aPosition put: aRoom ].
	
	self error: self class canNotBeInMoreThanTwoRoomsErrorDescription ! !
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:43:28' prior: 51028088!
at: aPosition with: aRoom

	positionRoom ifNil: [ ^ positionRoom at: aPosition put: aRoom ].
	positionOtherRoom ifNil: [ ^ positionOtherRoom at: aPosition put: aRoom ].
	
	self error: self class canNotBeInMoreThanTwoRoomsErrorDescription ! !
!NonPortableObject methodsFor: 'taken' stamp: 'ja 12/17/2020 19:43:52'!
at: aPosition with: aRoom

	self ! !

!methodRemoval: NonPortableObject #at: stamp: 'ja 12/17/2020 19:43:58'!
at: aPosition 

	self !
!PortableObject methodsFor: 'accessing' stamp: 'ja 12/17/2020 19:44:08'!
at: aPosition with: aRoom
	self ! !
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:44:31' overrides: 16896425!
initialize 
	
	positionRoom _ Dictionary new.
	positionOtherRoom _ Dictionary new.! !

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 19:44:57'!
ERROR!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 19:44:57'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:45:40' prior: 51028099!
at: aPosition with: aRoom

	positionRoom ifEmpty: [ ^ positionRoom at: aPosition put: aRoom ].
	positionOtherRoom ifEmpty: [ ^ positionOtherRoom at: aPosition put: aRoom ].
	
	self error: self class canNotBeInMoreThanTwoRoomsErrorDescription ! !

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 19:45:42'!
FAILURE!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 19:45:42'!
FAILURE!

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 19:45:42'!
PASSED!

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 19:45:42'!
PASSED!
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:46:58' prior: 51024687!
isInThePosition: aPosition

	^ (positionRoom includesKey: aPosition) or:[ positionOtherRoom  includesKey: aPosition ].
	
	! !

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 19:47:01'!
PASSED!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 19:47:01'!
PASSED!

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 19:47:01'!
PASSED!

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 19:47:01'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:47:30' prior: 51027916!
test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable

	| player room1 room2 door |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	door _ Door new.
	
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [ player moveForward ] 
		raise: Error  
		withMessageText: PlayableCharacter doorIsUnreachableErrorDescription.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/17/2020 19:51:46' prior: 51023887!
moveForward
	
	| aStageObject |
	
	aStageObject _ room at: self forwardPosition.
	
	aStageObject isDoor ifTrue: [self using: aStageObject toGoTo: aStageObject anOtherRoom].
	
	self moveTo: self forwardPosition ! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 19:52:19' prior: 51027521!
test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen


	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	
	player moveForward .
	
	self 
		should: [ room1 positionOf: player]
		raise: Error
		withMessageText: Room objectNotInRoomErrorDescription.
	
	self assert: (room2 positionOf: player ) =  (2@3).! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:52:20'!
ERROR!
!PlayableCharacter methodsFor: 'backpack' stamp: 'ja 12/17/2020 19:52:51'!
at: aPosition with: aRoom

	self! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:52:55'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 19:52:55'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 19:52:55'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 19:52:55'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 19:52:55'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 19:52:55'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 19:52:55'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 19:52:55'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 19:52:55'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 19:52:55'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 19:52:55'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 19:52:55'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:52:55'!
ERROR!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:52:55'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 19:52:55'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 19:52:55'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 19:52:55'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 19:52:55'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 19:52:55'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 19:52:55'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 19:52:55'!
FAILURE!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:52:55'!
ERROR!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 19:52:55'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 19:52:55'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:53:07'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:53:07'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:53:53'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:53:53'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:54:33'!
ERROR!
!OpenDoor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:54:45'!
anOtherRoom
	self shouldBeImplemented.! !
!OpenDoor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 19:57:25' prior: 51028347!
anOtherRoom
	
	^ positionOtherRoom values anyOne ! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:57:47'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:57:59'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 19:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 19:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 19:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 19:57:59'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 19:57:59'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 19:57:59'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 19:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 19:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 19:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 19:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 19:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:57:59'!
ERROR!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 19:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 19:57:59'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 19:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 19:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 19:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 19:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 19:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 19:57:59'!
FAILURE!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 19:57:59'!
FAILURE!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 19:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 19:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:58:06'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:58:19'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:58:33'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/17/2020 19:59:41' prior: 51028195!
moveForward
	
	| aStageObject |
	
	aStageObject _ (room at: self forwardPosition) on: Error do: [ self moveTo: self forwardPosition ].
	
	aStageObject isDoor ifTrue: [self using: aStageObject toGoTo: aStageObject anOtherRoom].
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:59:44'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:59:53'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 19:59:53'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:00:08'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:00:52'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:01:11'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/17/2020 20:02:06' prior: 51028467!
moveForward
	
	| aStageObject |
	
	aStageObject _ (room at: self forwardPosition) on: Error do: [:anError | self moveTo: self forwardPosition ].
	
	aStageObject isDoor ifTrue: [self using: aStageObject toGoTo: aStageObject anOtherRoom].
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:02:10'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:03:20'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:03:20'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:03:29'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:03:40'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:03:40'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:03:52'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/17/2020 20:06:06' prior: 51028501!
moveForward
	
	| aStageObject |
	
	aStageObject _ (room at: self forwardPosition) on: Error do: [:anError | self moveTo: self forwardPosition ].
	
	aStageObject isDoor ifTrue: [self using: aStageObject toGoTo: aStageObject anOtherRoom].
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:06:08'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:06:12'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:06:12'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:08:37'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/17/2020 20:09:36' prior: 51028540!
moveForward
	
	| aStageObject |
	
	aStageObject _ (room at: self forwardPosition)on: Error do: [:anError | self moveTo: self forwardPosition ].
	
	aStageObject isDoor ifTrue: [self using: aStageObject toGoTo: aStageObject anOtherRoom].
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:09:41'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/17/2020 20:09:51' prior: 51028567!
moveForward
	
	| aStageObject |
	
	aStageObject _ [room at: self forwardPosition]on: Error do: [:anError | self moveTo: self forwardPosition ].
	
	aStageObject isDoor ifTrue: [self using: aStageObject toGoTo: aStageObject anOtherRoom].
	
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/17/2020 20:10:03' prior: 51028582!
moveForward
	
	| aStageObject |
	
	aStageObject _ [room at: self forwardPosition]on: Error do: [:anError |^  self moveTo: self forwardPosition ].
	
	aStageObject isDoor ifTrue: [self using: aStageObject toGoTo: aStageObject anOtherRoom].
	
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/17/2020 20:10:07' prior: 51028593!
moveForward
	
	| aStageObject |
	
	aStageObject _ [room at: self forwardPosition]on: Error do: [:anError | ^ self moveTo: self forwardPosition ].
	
	aStageObject isDoor ifTrue: [self using: aStageObject toGoTo: aStageObject anOtherRoom].
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:10:13'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 20:10:26'!
FAILURE!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 20:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 20:10:26'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 20:13:38'!
FAILURE!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 20:13:38'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 20:13:38'!
FAILURE!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 20:13:51'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 20:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 20:13:54'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:15:04' prior: 51027683!
test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	room2 at: 2@3 put: paper.
	
	self 
		should: [ self moveForward .]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:15:16' prior: 51027894!
test24_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	room2 at: 2@3 put: paper.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 20:15:27'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 20:15:28'!
FAILURE!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 20:15:28'!
FAILURE!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 20:15:38'!
FAILURE!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 20:15:38'!
FAILURE!

!methodRemoval: PlayableCharacterTest #test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable stamp: 'ja 12/17/2020 20:15:49'!
test21_PlayableCharacterCanNotUseADoorIfItsInAPositionUnreachable

	| player room1 room2 door |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	door _ Door new.
	
	room1 at: 1@1 put: door.
	room2 at: 2@2 put: door.
	
	self 
		should: [ player moveForward ] 
		raise: Error  
		withMessageText: PlayableCharacter doorIsUnreachableErrorDescription.!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:16:00'!
test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen


	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	
	player moveForward .
	
	self 
		should: [ room1 positionOf: player]
		raise: Error
		withMessageText: Room objectNotInRoomErrorDescription.
	
	self assert: (room2 positionOf: player ) =  (2@3).! !

!methodRemoval: PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 20:16:00'!
test22_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen


	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	
	player moveForward .
	
	self 
		should: [ room1 positionOf: player]
		raise: Error
		withMessageText: Room objectNotInRoomErrorDescription.
	
	self assert: (room2 positionOf: player ) =  (2@3).!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:16:05'!
test22_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	room2 at: 2@3 put: paper.
	
	self 
		should: [ self moveForward .]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!methodRemoval: PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 20:16:05'!
test23_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	room2 at: 2@3 put: paper.
	
	self 
		should: [ self moveForward .]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ( room1 positionOf: player ) =  (0@0).!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:16:10'!
test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	room2 at: 2@3 put: paper.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!methodRemoval: PlayableCharacterTest #test24_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 20:16:10'!
test24_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	room2 at: 2@3 put: paper.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ( room1 positionOf: player ) =  (0@0).!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 20:16:12'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 20:16:13'!
FAILURE!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 20:16:13'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:16:43' prior: 51028957!
test22_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	room2 at: 2@3 put: paper.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 20:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 20:16:49'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 20:17:10'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:17:43' prior: 51029002!
test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 9@9 put: openDoor.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:17:53' prior: 51029190!
test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid

	
	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 9@9 put: openDoor.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 20:18:00'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:18:16' prior: 51029211!
test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid

	
	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 9@9 put: openDoor.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room invalidPositionErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 20:18:17'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 20:18:17'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:19:22'!
test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	room2 at: 2@3 put: paper.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!methodRemoval: PlayableCharacterTest #test22_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 20:19:22'!
test22_PlayableCharacterCanUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	room2 at: 2@3 put: paper.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ( room1 positionOf: player ) =  (0@0).!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:20:18'!
test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	room2 at: 2@3 put: paper.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!methodRemoval: PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront stamp: 'ja 12/17/2020 20:20:18'!
test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreNoStageObjectsInFront

	
	| player room1 room2 openDoor paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.
	room2 at: 2@3 put: paper.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ( room1 positionOf: player ) =  (0@0).!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:21:01'!
test24_PlayableCharacterCanUseTheDoorIfIsClose

	
	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 9@9 put: openDoor.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room invalidPositionErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 20:21:06'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 20:21:07'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 20:21:09'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanUseTheDoorIfIsClose stamp: 'ja 12/17/2020 20:21:10'!
PASSED!

!classDefinition: #CloseDor category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ja 12/17/2020 20:21:31'!
Door subclass: #CloseDor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:21:26' prior: 51029438!
test24_PlayableCharacterCanUseTheDoorIfIsClose

	
	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	openDoor _ CloseDor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 9@9 put: openDoor.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room invalidPositionErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:21:40' prior: 51029483!
test24_PlayableCharacterCanUseTheDoorIfIsClose

	
	| player room1 room2 closeDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	closeDoor _ CloseDor new.
	
	room1 at: 0@1 put: closeDoor.
	room2 at: 9@9 put: closeDoor.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room invalidPositionErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:22:03'!
test24_PlayableCharacterCanNotUseTheDoorIfIsClose

	
	| player room1 room2 closeDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	closeDoor _ CloseDor new.
	
	room1 at: 0@1 put: closeDoor.
	room2 at: 9@9 put: closeDoor.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room invalidPositionErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!methodRemoval: PlayableCharacterTest #test24_PlayableCharacterCanUseTheDoorIfIsClose stamp: 'ja 12/17/2020 20:22:03'!
test24_PlayableCharacterCanUseTheDoorIfIsClose

	
	| player room1 room2 closeDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	closeDoor _ CloseDor new.
	
	room1 at: 0@1 put: closeDoor.
	room2 at: 9@9 put: closeDoor.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room invalidPositionErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@0).!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 20:22:12'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:22:32' prior: 51029521!
test24_PlayableCharacterCanNotUseTheDoorIfIsClose

	
	| player room1 room2 closeDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	closeDoor _ CloseDor new.
	
	room1 at: 0@1 put: closeDoor.
	room2 at: 2@2 put: closeDoor.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: Room invalidPositionErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 20:22:35'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 20:23:13'!
FAILURE!
!CloseDor methodsFor: 'no messages' stamp: 'ja 12/17/2020 20:23:38'!
anOtherRoom
	
	^ positionOtherRoom values anyOne ! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 20:25:47' prior: 51027374!
using: aDoor toGoTo: anOtherRoom
	
	self assertDoorIsInTheSameRoom: aDoor .
	
	aDoor isClose ifTrue: [ self error: self class doorCloseErrorDescription ].
	
	self moveTo: ((anOtherRoom positionOf: aDoor) + self forwardPosition) with: anOtherRoom .
	
	room _ anOtherRoom .

! !

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 20:25:53'!
FAILURE!
!CloseDor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 20:26:09'!
isClose

	^ true! !
!OpenDoor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 20:26:19'!
isClose

	^ false! !

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 20:27:06'!
FAILURE!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 20:27:57'!
doorCloseErrorDescription

	 ^ 'Door close '! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 20:28:12' prior: 51029625!
doorCloseErrorDescription

	 ^ 'Can not use door close'! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:28:24' prior: 51029565!
test24_PlayableCharacterCanNotUseTheDoorIfIsClose

	
	| player room1 room2 closeDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	closeDoor _ CloseDor new.
	
	room1 at: 0@1 put: closeDoor.
	room2 at: 2@2 put: closeDoor.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: PlayableCharacter doorCloseErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 20:28:25'!
PASSED!

Door subclass: #CloseDor
	instanceVariableNames: ' materKey'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #CloseDor category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ja 12/17/2020 20:29:06'!
Door subclass: #CloseDor
	instanceVariableNames: 'materKey'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

Door subclass: #CloseDor
	instanceVariableNames: 'masterKey'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #CloseDor category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ja 12/17/2020 20:29:09'!
Door subclass: #CloseDor
	instanceVariableNames: 'masterKey'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:30:01'!
test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey

	
	| player room1 room2 closeDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	closeDoor _ CloseDor new.
	
	room1 at: 0@1 put: closeDoor.
	room2 at: 2@2 put: closeDoor.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: PlayableCharacter doorCloseErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:31:32'!
key

	^ NoPointsPortableObject named: 'Key' weighing: 10! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:33:29' prior: 51029779!
test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	key _ self key.
	room1 at: 0@1 put: key.
	
	closeDoor _ CloseDor new.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: PlayableCharacter doorCloseErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!classDefinition: #Key category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ja 12/17/2020 20:36:50'!
PortableObject subclass: #Key
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:36:34' prior: 51029804!
test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	key _ Key new.
	room1 at: 0@1 put: key.
	
	player take.
	
	
	
	closeDoor _ CloseDor new.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: PlayableCharacter doorCloseErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:36:59'!
ERROR!
!Key methodsFor: 'no messages' stamp: 'ja 12/17/2020 20:38:16' overrides: 51024328!
doesItAddPoints	

	^ false! !
!Key methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 20:38:31' overrides: 51024332!
assertCanAddTo: aBackpack 
	
	^aBackpack assertCanAddNoPointsPortableObject: self! !

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:39:02'!
ERROR!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:39:02'!
ERROR!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:39:12'!
ERROR!
!Key methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 20:39:44' prior: 51029864 overrides: 51024332!
assertCanAddTo: aBackpack 
	
	^true! !

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:39:58'!
FAILURE!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:39:58'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:40:36' prior: 51029834!
test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	key _ Key new.
	room1 at: 0@1 put: key.
	
	player take.
	
	closeDoor _ CloseDor new.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: PlayableCharacter doorCloseErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:40:37'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:41:04' prior: 51029896!
test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	
	key _ Key new.
	room1 at: 0@1 put: key.
	
	player take.
	
	player moveForward .	

	closeDoor _ CloseDor new.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.
	
	self 
		should: [ player moveForward .]
		raise: Error
		withMessageText: PlayableCharacter doorCloseErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@0).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:42:04' prior: 51029922!
test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.

	closeDoor _ CloseDor new.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.

	key _ Key new.
	room1 at: 0@1 put: key.
	
	player take.
	player moveForward .	
	player moveForward .
	
	self assert: ( room2 positionOf: player ) =  (2@3).! !

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:42:07'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 20:42:53' prior: 51029597!
using: aDoor toGoTo: anOtherRoom
	
	self assertDoorIsInTheSameRoom: aDoor .
	
	aDoor isClose ifTrue: [ self error: self class doorCloseErrorDescription ].
	
	self moveTo: ((anOtherRoom positionOf: aDoor) + self forwardPosition) with: anOtherRoom .
	
	room _ anOtherRoom .

! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 20:44:05' prior: 51029969!
using: aDoor toGoTo: anOtherRoom
	
	self assertDoorIsInTheSameRoom: aDoor .
	
	(aDoor isCloseAndItHasNotKey: backpack) ifTrue: [ self error: self class doorCloseErrorDescription ].
	
	self moveTo: ((anOtherRoom positionOf: aDoor) + self forwardPosition) with: anOtherRoom .
	
	room _ anOtherRoom .

! !
!CloseDor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 20:44:30'!
isCloseAndItHasNotKey: aBackpack

	^ true! !
!OpenDoor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 20:44:41'!
isCloseAndItHasNotKey: backpack

	^ false! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:44:51'!
ERROR!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:44:51'!
ERROR!
!CloseDor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 20:46:41' prior: 51029993!
isCloseAndItHasNotKey: aBackpack

	aBackpack do: [ :aPortableObject | aPortableObject isAKey ifTrue: [^ masterKey _ aPortableObject ]]! !
!CloseDor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 20:47:22' prior: 51030103!
isCloseAndItHasNotKey: aBackpack

	aBackpack do: [ :aPortableObject | aPortableObject isAKey ifTrue: [masterKey _ aPortableObject ]].
	
	^ masterKey isNil.! !

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:47:37'!
ERROR!
!CloseDor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 20:48:57' prior: 51030111!
isCloseAndItHasNotKey: aBackpack

	aBackpack hasKey: masterKey .
	
	^ masterKey isNil.! !
!Backpack methodsFor: 'adding - private' stamp: 'ja 12/17/2020 20:50:15'!
hasKey: aMasterKey

	container do: [ :aPortableObject | aPortableObject isAKey ifTrue: [ ^ aPortableObject ]].! !
!CloseDor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 20:51:16' prior: 51030124!
isCloseAndItHasNotKey: aBackpack

	 masterKey _ aBackpack hasKey.
	
	^ masterKey isNil.! !
!Backpack methodsFor: 'private' stamp: 'ja 12/17/2020 20:52:05'!
hasKey

	container do: [ :aPortableObject | aPortableObject isAKey ifTrue: [ ^ aPortableObject ]].! !

!methodRemoval: Backpack #hasKey: stamp: 'ja 12/17/2020 20:52:08'!
hasKey: aMasterKey

	container do: [ :aPortableObject | aPortableObject isAKey ifTrue: [ ^ aPortableObject ]].!
!Key methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 20:52:24'!
isAKey

	^ true! !
!NoPointsPortableObject methodsFor: 'initialization' stamp: 'ja 12/17/2020 20:52:40'!
isAKey

	^ false! !
!PointsPortableObject methodsFor: 'initialization' stamp: 'ja 12/17/2020 20:52:49'!
isAKey

	^ false! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 20:53:13'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 20:53:13'!
FAILURE!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:53:13'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 20:53:24'!
FAILURE!
!Backpack methodsFor: 'private' stamp: 'ja 12/17/2020 20:54:20' prior: 51030142!
hasKey

	container do: [ :aPortableObject | aPortableObject isAKey ifTrue: [ ^ aPortableObject ]].
	
	^ nil! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 20:55:03'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:55:03'!
FAILURE!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:55:03'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:55:56' prior: 51029945!
test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.

	closeDoor _ CloseDor new.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.

	key _ Key new.
	room1 at: 0@1 put: key.
	
	player take.
	player moveForward .	
	player moveForward .
	
	self assert: ( room2 positionOf: player ) =  (2@3).
	self assert: room1 isEmpty .! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 20:56:01' prior: 51030376!
test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.

	closeDoor _ CloseDor new.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.

	key _ Key new.
	room1 at: 0@1 put: key.
	
	player take.
	player moveForward .	
	player moveForward .
	
	self assert: room1 isEmpty .
	self assert: ( room2 positionOf: player ) =  (2@3).
	! !

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:56:02'!
FAILURE!

anOtherRoom positionOf: aDoor!

self forwardPosition!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:59:39'!
ERROR!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:59:44'!
FAILURE!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 20:59:44'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:00:44' prior: 51030397!
test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.

	closeDoor _ CloseDor new.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.

	key _ Key new.
	room1 at: 0@1 put: key.
	
	player take.
	player moveForward .	
	player moveForward .
	
	self assert: ( room2 positionOf: player ) =  (2@3).
	! !

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:01:16'!
FAILURE!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:01:16'!
FAILURE!

((anOtherRoom positionOf: aDoor) + self forwardPosition)!

self forwardPosition!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:02:24' prior: 51030436!
test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.

	closeDoor _ CloseDor new.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.

	key _ Key new.
	room1 at: 0@1 put: key.
	
	player take.
	player moveForward .	
	player moveForward .
	
	self assert: ( room2 positionOf: player ) =  (2@4).
	! !

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:02:28'!
PASSED!

!methodRemoval: CloseDor #isClose stamp: 'ja 12/17/2020 21:03:58'!
isClose

	^ true!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:04:01'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 21:04:05'!
PASSED!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 21:04:05'!
PASSED!

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 21:04:05'!
PASSED!

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 21:04:05'!
PASSED!
!CloseDor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 21:04:53' prior: 51030137!
isCloseAndItHasNotKey: aBackpack

	^ aBackpack hasKey: masterKey .! !
!Backpack methodsFor: 'private' stamp: 'ja 12/17/2020 21:05:18'!
hasKey: aKey

	container do: [ :aPortableObject | aPortableObject isAKey ifTrue: [ ^ aPortableObject ]].
	
	^ nil! !

!methodRemoval: Backpack #hasKey stamp: 'ja 12/17/2020 21:05:18'!
hasKey

	container do: [ :aPortableObject | aPortableObject isAKey ifTrue: [ ^ aPortableObject ]].
	
	^ nil!
!Backpack methodsFor: 'private' stamp: 'ja 12/17/2020 21:06:47' prior: 51030707!
hasKey: aKey
	
	container do: [ :aPortableObject | aPortableObject isAKey ifTrue: [ aPortableObject = aKey ifTrue: [ ^ true ]]].
	
	^ false! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:07:38' prior: 51030467!
test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.

	key _ Key new.

	closeDoor _ CloseDor closeWith: key.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.


	room1 at: 0@1 put: key.
	
	player take.
	player moveForward .	
	player moveForward .
	
	self assert: ( room2 positionOf: player ) =  (2@4).
	! !
!CloseDor class methodsFor: 'no messages' stamp: 'ja 12/17/2020 21:08:12'!
closeWith: aKey

	^ self new initializeWith: aKey .! !
!CloseDor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 21:08:26'!
initializeWith: aKey .

	masterKey _ aKey ! !
!CloseDor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 21:08:28' prior: 51030752!
initializeWith: aKey 

	masterKey _ aKey ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:08:32'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:08:32'!
FAILURE!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:08:32'!
ERROR!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:08:40'!
ERROR!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:08:53'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:09:08'!
FAILURE!
!CloseDor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 21:11:41' prior: 51030702!
isCloseAndItHasNotKey: aBackpack
	| xxx |
	
	xxx _ aBackpack hasKey: masterKey .
	^  xxx! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:11:48'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:11:48'!
FAILURE!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:11:48'!
ERROR!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:11:51'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:11:59'!
FAILURE!
!Backpack methodsFor: 'private' stamp: 'ja 12/17/2020 21:12:50' prior: 51030719!
hasKey: aKey
	
	container do: [ :aPortableObject | aPortableObject isAKey ifTrue: [ aPortableObject = aKey ifTrue: [ ^ false ]]].
	
	^ true! !

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:12:53'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:13:07'!
PASSED!

self position!

heading forwardPoint!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 21:15:22' prior: 51029981!
using: aDoor toGoTo: anOtherRoom
	
	self assertDoorIsInTheSameRoom: aDoor .
	
	(aDoor isCloseAndItHasNotKey: backpack) ifTrue: [ self error: self class doorCloseErrorDescription ].
	
	self moveTo: ((anOtherRoom positionOf: aDoor) + heading forwardPoint ) with: anOtherRoom .
	
	room _ anOtherRoom .

! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:15:24'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:15:24'!
FAILURE!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:15:24'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:15:30' prior: 51030727!
test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.

	key _ Key new.

	closeDoor _ CloseDor closeWith: key.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.


	room1 at: 0@1 put: key.
	
	player take.
	player moveForward .	
	player moveForward .
	
	self assert: ( room2 positionOf: player ) =  (2@3).
	! !

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:15:32'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:15:34'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:15:34'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:17:16'!
test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjects

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.

	key _ Key new.

	closeDoor _ CloseDor closeWith: key.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.


	room1 at: 0@1 put: key.
	
	player take.
	player moveForward .	
	player moveForward .
	
	self assert: ( room2 positionOf: player ) =  (2@3).
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:17:32'!
test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.

	key _ Key new.

	closeDoor _ CloseDor closeWith: key.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.


	room1 at: 0@1 put: key.
	
	player take.
	player moveForward .	
	player moveForward .
	
	self assert: ( room2 positionOf: player ) =  (2@3).
	! !

!methodRemoval: PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjects stamp: 'ja 12/17/2020 21:17:32'!
test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjects

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.

	key _ Key new.

	closeDoor _ CloseDor closeWith: key.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.


	room1 at: 0@1 put: key.
	
	player take.
	player moveForward .	
	player moveForward .
	
	self assert: ( room2 positionOf: player ) =  (2@3).
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:17:58' prior: 51031349!
test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront

	
	| player room1 room2 closeDoor key paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	key _ Key new.

	closeDoor _ CloseDor closeWith: key.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.


	room1 at: 0@1 put: key.
	
	player take.
	player moveForward .	
	player moveForward .
	
	self assert: ( room2 positionOf: player ) =  (2@3).
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:19:29' prior: 51031393!
test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront

	
	| player room1 room2 closeDoor key paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	key _ Key new.

	closeDoor _ CloseDor closeWith: key.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.


	room1 at: 0@1 put: key.
	room2 at: 2@3 put: paper.
	
	player take.
	player moveForward .	
	self 
		should: [	player moveForward]
		raise: Error
		withMessageText: Room.
	
	self assert: ( room1 positionOf: player ) =  (0@1).
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:19:33' prior: 51031415!
test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront

	
	| player room1 room2 closeDoor key paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	key _ Key new.

	closeDoor _ CloseDor closeWith: key.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.


	room1 at: 0@1 put: key.
	room2 at: 2@3 put: paper.
	
	player take.
	player moveForward .	
	
	self 
		should: [	player moveForward]
		raise: Error
		withMessageText: Room.
	
	self assert: ( room1 positionOf: player ) =  (0@1).
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:19:38' prior: 51031440!
test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront

	
	| player room1 room2 closeDoor key paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	key _ Key new.

	closeDoor _ CloseDor closeWith: key.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.

	room1 at: 0@1 put: key.
	room2 at: 2@3 put: paper.
	
	player take.
	player moveForward .	
	
	self 
		should: [	player moveForward]
		raise: Error
		withMessageText: Room.
	
	self assert: ( room1 positionOf: player ) =  (0@1).
	! !

!testRun: #PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront stamp: 'ja 12/17/2020 21:19:53'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:20:03' prior: 51031465!
test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront

	
	| player room1 room2 closeDoor key paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	key _ Key new.

	closeDoor _ CloseDor closeWith: key.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.

	room1 at: 0@1 put: key.
	room2 at: 2@3 put: paper.
	
	player take.
	player moveForward .	
	
	self 
		should: [	player moveForward]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@1).
	! !

!testRun: #PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront stamp: 'ja 12/17/2020 21:20:04'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:20:35'!
test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid

	
	| player room1 room2 closeDoor key paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	key _ Key new.

	closeDoor _ CloseDor closeWith: key.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.

	room1 at: 0@1 put: key.
	room2 at: 2@3 put: paper.
	
	player take.
	player moveForward .	
	
	self 
		should: [	player moveForward]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@1).
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:21:12'!
test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.

	key _ Key new.

	closeDoor _ CloseDor closeWith: key.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 9@9 put: closeDoor.

	room1 at: 0@1 put: key.
	
	player take.
	player moveForward .	
	
	self 
		should: [	player moveForward]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@1).
	! !

!methodRemoval: PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid stamp: 'ja 12/17/2020 21:21:47'!
test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid

	
	| player room1 room2 closeDoor key paper |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.
	paper _ self paper.
	key _ Key new.

	closeDoor _ CloseDor closeWith: key.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 2@2 put: closeDoor.

	room1 at: 0@1 put: key.
	room2 at: 2@3 put: paper.
	
	player take.
	player moveForward .	
	
	self 
		should: [	player moveForward]
		raise: Error
		withMessageText: Room positionIsNotEmptyErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@1).
	!

!testRun: #PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront stamp: 'ja 12/17/2020 21:21:52'!
PASSED!

!testRun: #PlayableCharacterTest #test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid stamp: 'ja 12/17/2020 21:21:53'!
FAILURE!

!testRun: #PlayableCharacterTest #test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid stamp: 'ja 12/17/2020 21:21:53'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:22:04' prior: 51031653!
test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.

	key _ Key new.

	closeDoor _ CloseDor closeWith: key.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 9@9 put: closeDoor.

	room1 at: 0@1 put: key.
	
	player take.
	player moveForward .	
	
	self 
		should: [	player moveForward]
		raise: Error
		withMessageText: Room invalidPositionErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@1).
	! !

!testRun: #PlayableCharacterTest #test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #PlayableCharacterTest #test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid stamp: 'ja 12/17/2020 21:22:05'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #PlayableCharacterTest #test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/17/2020 21:22:16'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #PlayableCharacterTest #test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/17/2020 21:24:53'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/17/2020 21:24:53'!
PASSED!
!CloseDor methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 21:27:02' prior: 51030871!
isCloseAndItHasNotKey: aBackpack
	
	^ aBackpack hasKey: masterKey .
	! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #PlayableCharacterTest #test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/17/2020 21:27:05'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/17/2020 21:27:05'!
PASSED!
!Door methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 21:28:25' prior: 51025374 overrides: 16880774!
at: aPosition 

	"positionRoom ifNil: [^ positionRoom _ aPosition ].
	positionOtherRoom ifNil: [^ positionOtherRoom _ aPosition ].
	
	self error: self class canNotBeInMoreThanTwoRoomsErrorDescription "! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #PlayableCharacterTest #test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/17/2020 21:28:28'!
PASSED!

!methodRemoval: Door #at: stamp: 'ja 12/17/2020 21:28:38'!
at: aPosition 

	"positionRoom ifNil: [^ positionRoom _ aPosition ].
	positionOtherRoom ifNil: [^ positionOtherRoom _ aPosition ].
	
	self error: self class canNotBeInMoreThanTwoRoomsErrorDescription "!
!OpenDoor methodsFor: 'testing' stamp: 'ja 12/17/2020 21:30:57' prior: 51029617!
isClose

	"^ false"! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #PlayableCharacterTest #test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/17/2020 21:31:00'!
PASSED!

!methodRemoval: OpenDoor #isClose stamp: 'ja 12/17/2020 21:31:08'!
isClose

	"^ false"!

StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom roomBehind '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ja 12/17/2020 21:31:21'!
StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom roomBehind'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'ja 12/17/2020 21:31:24'!
StageObject subclass: #Door
	instanceVariableNames: 'positionRoom positionOtherRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #PlayableCharacterTest #test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/17/2020 21:31:27'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/17/2020 21:31:27'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'ja 12/17/2020 21:33:55' prior: 51028604!
moveForward
	
	| aStageObject |
	
	aStageObject _ [room at: self forwardPosition] on: Error do: [:anError | ^ self moveTo: self forwardPosition ].
	
	aStageObject isDoor ifTrue: [self using: aStageObject toGoTo: aStageObject anOtherRoom].
	
	! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'ja 12/17/2020 21:34:05'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'ja 12/17/2020 21:34:05'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'ja 12/17/2020 21:34:05'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/17/2020 21:34:06'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/17/2020 21:34:06'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:36:04'!
test28_CanNotTakeADoor

	
	| player room1 room2 closeDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.

	key _ Key new.

	closeDoor _ OpenDoor new.
	
	room1 at: 0@2 put: closeDoor.
	room2 at: 9@9 put: closeDoor.

	room1 at: 0@1 put: key.
	
	player take.
	player moveForward .	
	
	self 
		should: [	player moveForward]
		raise: Error
		withMessageText: Room invalidPositionErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@1).
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:36:14' prior: 51033425!
test28_CanNotTakeADoor

	
	| player room1 room2 openDoor key |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.

	key _ Key new.

	openDoor _ OpenDoor new.
	
	room1 at: 0@2 put: openDoor.
	room2 at: 9@9 put: openDoor.

	room1 at: 0@1 put: key.
	
	player take.
	player moveForward .	
	
	self 
		should: [	player moveForward]
		raise: Error
		withMessageText: Room invalidPositionErrorDescription .
	
	self assert: ( room1 positionOf: player ) =  (0@1).
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:37:58' prior: 51033446!
test28_CanNotTakeADoor

	
	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.

	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.

	self 
		should: [player take] 
		raise: Error  
		withMessageText: Door .
	
	
	! !

!testRun: #PlayableCharacterTest #test28_CanNotTakeADoor stamp: 'ja 12/17/2020 21:37:58'!
FAILURE!
!Door methodsFor: 'room' stamp: 'ja 12/17/2020 21:38:55' overrides: 51024238!
takenBy: aPlayableCharacter 
	
	self error: self class canNotTakeDoorErrorDescription.! !
!Door class methodsFor: 'error description' stamp: 'ja 12/17/2020 21:39:14'!
canNotTakeDoorErrorDescription

	^ 'Can not take door'! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'ja 12/17/2020 21:39:33' prior: 51033467!
test28_CanNotTakeADoor

	
	| player room1 room2 openDoor |
	
	room1 _ self defaultRoom .
	room2 _ self otherDefaultRoom.
	player _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room1.

	openDoor _ OpenDoor new.
	
	room1 at: 0@1 put: openDoor.
	room2 at: 2@2 put: openDoor.

	self 
		should: [player take] 
		raise: Error  
		withMessageText: Door canNotTakeDoorErrorDescription.
	
	
	! !

!testRun: #PlayableCharacterTest #test28_CanNotTakeADoor stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test28_CanNotTakeADoor stamp: 'ja 12/17/2020 21:39:34'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #PlayableCharacterTest #test28_CanNotTakeADoor stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/17/2020 21:39:52'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/17/2020 21:39:52'!
PASSED!
!PlayableCharacter methodsFor: 'movements rooms' stamp: 'ja 12/17/2020 21:41:36'!
theDoorIsClosedAndThereIsNoKey: aDoor

	^ (aDoor isCloseAndItHasNotKey: backpack) ifTrue: [ self error: self class doorCloseErrorDescription ]! !
!PlayableCharacter methodsFor: 'movements rooms' stamp: 'ja 12/17/2020 21:41:36' prior: 51031093!
using: aDoor toGoTo: anOtherRoom
	
	self assertDoorIsInTheSameRoom: aDoor .
	
	self theDoorIsClosedAndThereIsNoKey: aDoor.
	
	self moveTo: ((anOtherRoom positionOf: aDoor) + heading forwardPoint ) with: anOtherRoom .
	
	room _ anOtherRoom .

! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #PlayableCharacterTest #test28_CanNotTakeADoor stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/17/2020 21:41:40'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/17/2020 21:41:40'!
PASSED!
!PlayableCharacter methodsFor: 'movements rooms' stamp: 'ja 12/17/2020 21:41:44' prior: 51033853!
using: aDoor toGoTo: anOtherRoom
	
	self assertDoorIsInTheSameRoom: aDoor .
	self theDoorIsClosedAndThereIsNoKey: aDoor.
	
	self moveTo: ((anOtherRoom positionOf: aDoor) + heading forwardPoint ) with: anOtherRoom .
	
	room _ anOtherRoom .

! !
!PlayableCharacter methodsFor: 'movements rooms' stamp: 'ja 12/17/2020 21:42:04'!
assertTheDoorIsClosedAndThereIsNoKey: aDoor

	^ (aDoor isCloseAndItHasNotKey: backpack) ifTrue: [ self error: self class doorCloseErrorDescription ]! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'ja 12/17/2020 21:42:04' prior: 51034082!
using: aDoor toGoTo: anOtherRoom
	
	self assertDoorIsInTheSameRoom: aDoor .
	self assertTheDoorIsClosedAndThereIsNoKey: aDoor.
	
	self moveTo: ((anOtherRoom positionOf: aDoor) + heading forwardPoint ) with: anOtherRoom .
	
	room _ anOtherRoom .

! !

!methodRemoval: PlayableCharacter #theDoorIsClosedAndThereIsNoKey: stamp: 'ja 12/17/2020 21:42:04'!
theDoorIsClosedAndThereIsNoKey: aDoor

	^ (aDoor isCloseAndItHasNotKey: backpack) ifTrue: [ self error: self class doorCloseErrorDescription ]!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #DoorTest #test01_ADoorKnowsItsPositionInTheRooms stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #DoorTest #test02_ADoorCanNotBeInMoreThanTwoRooms stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #DoorTest #test03_ADoorCanNotOverlapWithAnotherStageObject stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #DoorTest #test04_ADoorCanNotPutIntoANonPortableObject stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanUseTheDoorIfIsReachableAndIsOpen stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanNotUseTheDoorIfIsOpenAndThereAreStageObjectsInFront stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanUseTheDoorIfIsOpenAndMovingIsValid stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotUseTheDoorIfIsClose stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test25_PlayableCharacterCanUseTheDoorIfIsCloseAndHasTheKey stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test26_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndThereIsAStageObjectsInFront stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test27_PlayableCharacterCanNotUseTheDoorIfIsCloseAndHasTheKeyAndMovingIsInvalid stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #PlayableCharacterTest #test28_CanNotTakeADoor stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'ja 12/17/2020 21:42:11'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'ja 12/17/2020 21:42:11'!
PASSED!