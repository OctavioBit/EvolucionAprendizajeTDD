----End fileIn of /home/belu/Downloads/ISW1-2020-2C-Recuperatorio-2doParcial.st----!

aStageObject putAllTo: aPlayableCharacter!

(aStageObject putAllTo: aPlayableCharacter)!

(aStageObject putAllTo: aPlayableCharacter)!

(aStageObject putAllTo: aPlayableCharacter)!

!classRemoval: #PointsPortableObject stamp: 'BT 12/17/2020 17:07:07'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'BT 12/17/2020 17:07:07'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PortableObject stamp: 'BT 12/17/2020 17:07:08'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #NonPortableObject stamp: 'BT 12/17/2020 17:07:08'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #StageObject stamp: 'BT 12/17/2020 17:07:09'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #Room stamp: 'BT 12/17/2020 17:07:09'!
Object subclass: #Room
	instanceVariableNames: 'width height contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'BT 12/17/2020 17:07:09'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'BT 12/17/2020 17:07:10'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #Backpack stamp: 'BT 12/17/2020 17:07:10'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #RoomTest stamp: 'BT 12/17/2020 17:07:10'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'BT 12/17/2020 17:07:11'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #BackpackTest stamp: 'BT 12/17/2020 17:07:11'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

----End fileIn of /home/belu/Downloads/ISW1-2020-2C-Recuperatorio-2doParcial (1).st----!

TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 17:23:48'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 17:28:01'!
StageObject subclass: #Door
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:28:10'!
test01
	| aRoom otherRoom |
	aRoom := Room ofWidth: 10 andHeight: 10.
	otherRoom := Room ofWidth: 10 andHeight: 10.
	
	self should: [Door between: aRoom at: 0@1 and: otherRoom at: 0@-1]
	raise: Error  
	withMessageText: ''.
	! !
!Door class methodsFor: 'instance creation' stamp: 'BT 12/17/2020 17:28:44'!
between: aRoom at: aPoint and: aRoom3 at: aPoint4 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeBetween: aRoom at: aPoint and: aRoom3 at: aPoint4 ! !
!Door class methodsFor: 'instance creation' stamp: 'BT 12/17/2020 17:31:14' prior: 50889963!
between: aRoom at: aPoint and: aRoom3 at: aPoint4 
	aRoom assertPositionIsValid: aPoint.
	aRoom3 assertPositionIsValid: aPoint4.
	^self new initializeBetween: aRoom at: aPoint and: aRoom3 at: aPoint4 ! !
!Door class methodsFor: 'instance creation' stamp: 'BT 12/17/2020 17:31:23' prior: 50889973!
between: aRoom at: aPoint and: otherRoom at: aPoint4 
	aRoom assertPositionIsValid: aPoint.
	otherRoom assertPositionIsValid: aPoint4.
	^self new initializeBetween: aRoom at: aPoint and: otherRoom at: aPoint4 ! !
!Door class methodsFor: 'instance creation' stamp: 'BT 12/17/2020 17:36:50' prior: 50889983!
between: aRoom at: aPoint and: otherRoom at: aPoint4 
	aRoom assertPositionIsValid: aPoint4.
	^self new initializeBetween: aRoom at: aPoint and: otherRoom at: aPoint4 ! !
!Door class methodsFor: 'instance creation' stamp: 'BT 12/17/2020 17:37:07' prior: 50889993!
between: aRoom at: aPoint and: otherRoom at: positionOfSecondDoor 
	aRoom assertPositionIsValid: positionOfSecondDoor.
	^self new initializeBetween: aRoom at: aPoint and: otherRoom at: positionOfSecondDoor ! !
!Door class methodsFor: 'instance creation' stamp: 'BT 12/17/2020 17:37:25' prior: 50890002!
between: aRoom at: positionAtFirstRoom and: otherRoom at: positionOfSecondDoor 
	aRoom assertPositionIsValid: positionOfSecondDoor.
	^self new initializeBetween: aRoom at: positionAtFirstRoom and: otherRoom at: positionOfSecondDoor ! !
!Door class methodsFor: 'instance creation' stamp: 'BT 12/17/2020 17:37:39' prior: 50890012!
between: firstRoom at: positionAtFirstRoom and: otherRoom at: positionOfSecondDoor 
	firstRoom assertPositionIsValid: positionOfSecondDoor.
	^self new initializeBetween: firstRoom at: positionAtFirstRoom and: otherRoom at: positionOfSecondDoor ! !
!Door class methodsFor: 'instance creation' stamp: 'BT 12/17/2020 17:37:45' prior: 50890023!
between: firstRoom at: positionAtFirstRoom and: secondRoom at: positionOfSecondDoor 
	firstRoom assertPositionIsValid: positionOfSecondDoor.
	^self new initializeBetween: firstRoom at: positionAtFirstRoom and: secondRoom at: positionOfSecondDoor ! !
!Door class methodsFor: 'instance creation' stamp: 'BT 12/17/2020 17:37:54' prior: 50890034!
between: firstRoom at: positionAtFirstRoom and: secondRoom at: positionOfSecondRoom 
	firstRoom assertPositionIsValid: positionOfSecondRoom.
	^self new initializeBetween: firstRoom at: positionAtFirstRoom and: secondRoom at: positionOfSecondRoom ! !
!Door class methodsFor: 'instance creation' stamp: 'BT 12/17/2020 17:38:11' prior: 50890045!
between: firstRoom at: positionAtFirstRoom and: secondRoom at: positionOfSecondRoom 
	secondRoom assertPositionIsValid: positionOfSecondRoom.
	^self new initializeBetween: firstRoom at: positionAtFirstRoom and: secondRoom at: positionOfSecondRoom ! !

!testRun: #DoorTest #test01 stamp: 'BT 12/17/2020 17:38:13'!
FAILURE!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:38:29' prior: 50889953!
test01
	| aRoom otherRoom |
	aRoom := Room ofWidth: 10 andHeight: 10.
	otherRoom := Room ofWidth: 10 andHeight: 10.
	
	self should: [Door between: aRoom at: 0@1 and: otherRoom at: 0@-1]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	! !

!testRun: #DoorTest #test01 stamp: 'BT 12/17/2020 17:38:30'!
PASSED!

!testRun: #DoorTest #test01 stamp: 'BT 12/17/2020 17:38:30'!
PASSED!

!testRun: #DoorTest #test01 stamp: 'BT 12/17/2020 17:38:33'!
PASSED!

!testRun: #DoorTest #test01 stamp: 'BT 12/17/2020 17:38:33'!
PASSED!

!testRun: #DoorTest #test01 stamp: 'BT 12/17/2020 17:38:35'!
PASSED!

!testRun: #DoorTest #test01 stamp: 'BT 12/17/2020 17:38:46'!
PASSED!

!testRun: #DoorTest #test01 stamp: 'BT 12/17/2020 17:38:49'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:39:40'!
test01CannotCreateDoorWIthInvalidPositionAtSecondRoom
	| aRoom otherRoom |
	aRoom := Room ofWidth: 10 andHeight: 10.
	otherRoom := Room ofWidth: 10 andHeight: 10.
	
	self should: [Door between: aRoom at: 0@1 and: otherRoom at: 0@-1]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:40:02'!
test02CannotCreateDoorWIthInvalidPositionAtFirstRoom
	| aRoom otherRoom |
	aRoom := Room ofWidth: 10 andHeight: 10.
	otherRoom := Room ofWidth: 10 andHeight: 10.
	
	self should: [Door between: aRoom at: 0@1 and: otherRoom at: 0@-1]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:40:14' prior: 50890107!
test02CannotCreateDoorWIthInvalidPositionAtFirstRoom
	| firstRoom otherRoom |
	firstRoom := Room ofWidth: 10 andHeight: 10.
	otherRoom := Room ofWidth: 10 andHeight: 10.
	
	self should: [Door between: firstRoom at: 0@1 and: otherRoom at: 0@-1]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:40:22' prior: 50890120!
test02CannotCreateDoorWIthInvalidPositionAtFirstRoom
	| firstRoom secondRoom |
	firstRoom := Room ofWidth: 10 andHeight: 10.
	secondRoom := Room ofWidth: 10 andHeight: 10.
	
	self should: [Door between: firstRoom at: 0@1 and: secondRoom at: 0@-1]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:40:32' prior: 50890133!
test02CannotCreateDoorWIthInvalidPositionAtFirstRoom
	| firstRoom secondRoom |
	firstRoom := Room ofWidth: 10 andHeight: 10.
	secondRoom := Room ofWidth: 10 andHeight: 10.
	
	self should: [Door between: firstRoom at: 14@2 and: secondRoom at: 0@0]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	! !

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 17:40:35'!
FAILURE!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 17:40:35'!
FAILURE!
!Door class methodsFor: 'instance creation' stamp: 'BT 12/17/2020 17:41:12' prior: 50890056!
between: firstRoom at: positionAtFirstRoom and: secondRoom at: positionOfSecondRoom 
	secondRoom assertPositionIsValid: positionOfSecondRoom.
	firstRoom assertPositionIsValid: positionAtFirstRoom.
	^self new initializeBetween: firstRoom at: positionAtFirstRoom and: secondRoom at: positionOfSecondRoom ! !

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 17:41:21'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #DoorTest #test01 stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'BT 12/17/2020 17:41:23'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'BT 12/17/2020 17:41:23'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:42:28'!
test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom
	| firstRoom secondRoom |
	firstRoom := Room ofWidth: 10 andHeight: 10.
	secondRoom := Room ofWidth: 10 andHeight: 10.
	
	self should: [Door between: firstRoom at: 14@2 and: secondRoom at: 0@0]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	! !

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 17:43:14'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'aPaper'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:43:13' prior: 50890361!
test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom
	| firstRoom secondRoom |
	firstRoom := Room ofWidth: 10 andHeight: 10.
	secondRoom := Room ofWidth: 10 andHeight: 10.
	
	firstRoom at: 1@1 put: aPaper..
	
	self should: [Door between: firstRoom at: 14@2 and: secondRoom at: 0@0]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:43:16' prior: 50890383!
test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom
	| firstRoom secondRoom |
	firstRoom := Room ofWidth: 10 andHeight: 10.
	secondRoom := Room ofWidth: 10 andHeight: 10.
	
	firstRoom at: 1@1 put: aPaper.
	
	self should: [Door between: firstRoom at: 14@2 and: secondRoom at: 0@0]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:43:23' prior: 50890397!
test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom
	| firstRoom secondRoom |
	firstRoom := Room ofWidth: 10 andHeight: 10.
	secondRoom := Room ofWidth: 10 andHeight: 10.
	
	firstRoom at: 1@1 put: aPaper.
	
	self should: [Door between: firstRoom at: 1@1 and: secondRoom at: 0@0]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:43:32' prior: 50890411!
test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom
	| firstRoom secondRoom |
	firstRoom := Room ofWidth: 10 andHeight: 10.
	secondRoom := Room ofWidth: 10 andHeight: 10.
	
	firstRoom at: 1@1 put: aPaper.
	
	self should: [Door between: firstRoom at: 1@1 and: secondRoom at: 0@0]
	raise: Error  
	withMessageText: Room positionIsNotEmptyErrorDescription.
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:44:08' overrides: 16927572!
setUp
	PointsPortableObject named: 'paper' weighing: 1 worth: 1! !

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 17:44:32'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'aPaper paper'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:44:31' prior: 50890439 overrides: 16927572!
setUp
	paper := PointsPortableObject named: 'paper' weighing: 1 worth: 1! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:44:41' prior: 50890453 overrides: 16927572!
setUp
	aPaper := PointsPortableObject named: 'paper' weighing: 1 worth: 1! !

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 17:46:07'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'aPaper paper aFirstRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 17:46:09'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'aPaper paper aFirstRoom aSecondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:46:06' prior: 50890459 overrides: 16927572!
setUp
	aPaper := PointsPortableObject named: 'paper' weighing: 1 worth: 1.
	aFirstRoom := Room ofWidth: 10 andHeight: 10.
	aSecondRoom := Room ofWidth: 10 andHeight: 10.! !

!methodRemoval: DoorTest #test01 stamp: 'BT 12/17/2020 17:46:13'!
test01
	| aRoom otherRoom |
	aRoom := Room ofWidth: 10 andHeight: 10.
	otherRoom := Room ofWidth: 10 andHeight: 10.
	
	self should: [Door between: aRoom at: 0@1 and: otherRoom at: 0@-1]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:46:34' prior: 50890095!
test01CannotCreateDoorWIthInvalidPositionAtSecondRoom

	self should: [Door between: aFirstRoom at: 0@1 and: aSecondRoom at: 0@-1]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:46:47' prior: 50890146!
test02CannotCreateDoorWIthInvalidPositionAtFirstRoom

	self should: [Door between: aFirstRoom at: 14@2 and: aSecondRoom at: 0@0]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:47:07' prior: 50890425!
test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom

	aFirstRoom at: 1@1 put: aPaper.
	
	self should: [Door between: aFirstRoom at: 1@1 and: aSecondRoom at: 0@0]
	raise: Error  
	withMessageText: Room positionIsNotEmptyErrorDescription.
	! !
!Door class methodsFor: 'instance creation' stamp: 'BT 12/17/2020 17:47:38' prior: 50890167!
between: firstRoom at: positionAtFirstRoom and: secondRoom at: positionOfSecondRoom 
	secondRoom assertPositionIsValid: positionOfSecondRoom.
	firstRoom assertPositionIsValid: positionAtFirstRoom.
	firstRoom assertIsEmpty: positionAtFirstRoom.
	^self new initializeBetween: firstRoom at: positionAtFirstRoom and: secondRoom at: positionOfSecondRoom ! !

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 17:47:44'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'BT 12/17/2020 17:47:46'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'BT 12/17/2020 17:47:46'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:48:09'!
test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom

	aSecondRoom at: 1@1 put: aPaper.
	
	self should: [Door between: aFirstRoom at: 1@1 and: aSecondRoom at: 0@0]
	raise: Error  
	withMessageText: Room positionIsNotEmptyErrorDescription.
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:48:26' prior: 50890728!
test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom

	aSecondRoom at: 1@1 put: aPaper.
	
	self should: [Door between: aFirstRoom at: 0@0 and: aSecondRoom at: 1@1]
	raise: Error  
	withMessageText: Room positionIsNotEmptyErrorDescription.
	! !

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 17:48:27'!
FAILURE!
!Door class methodsFor: 'instance creation' stamp: 'BT 12/17/2020 17:48:56' prior: 50890531!
between: firstRoom at: positionAtFirstRoom and: secondRoom at: positionOfSecondRoom 
	secondRoom assertPositionIsValid: positionOfSecondRoom.
	firstRoom assertPositionIsValid: positionAtFirstRoom.
	firstRoom assertIsEmpty: positionAtFirstRoom.
	secondRoom assertIsEmpty: positionOfSecondRoom.
	^self new initializeBetween: firstRoom at: positionAtFirstRoom and: secondRoom at: positionOfSecondRoom ! !
!Door class methodsFor: 'instance creation' stamp: 'BT 12/17/2020 17:49:03' prior: 50890754!
between: firstRoom at: positionAtFirstRoom and: secondRoom at: positionAtSecondRoom 
	secondRoom assertPositionIsValid: positionAtSecondRoom.
	firstRoom assertPositionIsValid: positionAtFirstRoom.
	firstRoom assertIsEmpty: positionAtFirstRoom.
	secondRoom assertIsEmpty: positionAtSecondRoom.
	^self new initializeBetween: firstRoom at: positionAtFirstRoom and: secondRoom at: positionAtSecondRoom ! !

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 17:49:09'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:53:05'!
test05PositionOfDoorAtFirstRoomIsOccupiedByTheDoor

	| aDoor positionDoorAtFirstRoom |
	positionDoorAtFirstRoom := 0@0.
	positionDoorAtFirstRoom := 1@1.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtFirstRoom.
	
	self deny: aFirstRoom isEmptyAt: 0@0.
	self deny: aSecondRoom isEmptyAt: 1@1.
	self assert: aFirstRoom at: positionDoorAtFirstRoom = aDoor.! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:53:52' prior: 50890789!
test05PositionOfDoorAtFirstRoomIsOccupiedByTheDoor

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 0@0.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.
	
	self deny: (aFirstRoom isEmptyAt: 0@0).
	self deny: (aSecondRoom isEmptyAt: 1@1).
	self assert: (aFirstRoom at: positionDoorAtFirstRoom = aDoor).
	self assert: (aSecondRoom at: positionDoorAtSecondRoom = aDoor).! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:54:30' prior: 50890502!
test01CannotCreateDoorWIthInvalidPositionAtSecondRoom

	self should: [Door between: aFirstRoom at: 0@1 and: aSecondRoom at: 0@-1]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	
	self assert: aFirstRoom isEmpty.
	! !

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 17:54:32'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:54:46' prior: 50890511!
test02CannotCreateDoorWIthInvalidPositionAtFirstRoom

	self should: [Door between: aFirstRoom at: 14@2 and: aSecondRoom at: 0@0]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	
	self assert: aSecondRoom isEmpty.
	! !

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 17:54:47'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 17:54:47'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 17:54:47'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 17:54:47'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 17:54:47'!
PASSED!

!testRun: #DoorTest #test05PositionOfDoorAtFirstRoomIsOccupiedByTheDoor stamp: 'BT 12/17/2020 17:54:47'!
ERROR!

!testRun: #DoorTest #test05PositionOfDoorAtFirstRoomIsOccupiedByTheDoor stamp: 'BT 12/17/2020 17:54:47'!
ERROR!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 17:54:53'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:55:40' prior: 50890520!
test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom

	aFirstRoom at: 1@1 put: aPaper.
	
	self should: [Door between: aFirstRoom at: 1@1 and: aSecondRoom at: 0@0]
	raise: Error  
	withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (aFirstRoom at: 1@1 = aPaper).
	! !

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 17:55:42'!
ERROR!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 17:55:42'!
ERROR!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 17:56:00'!
ERROR!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 17:56:00'!
ERROR!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:56:16' prior: 50890877!
test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom

	aFirstRoom at: 1@1 put: aPaper.
	
	self should: [Door between: aFirstRoom at: 1@1 and: aSecondRoom at: 0@0]
	raise: Error  
	withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (aFirstRoom at: 1@1 = aPaper).
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:56:42' prior: 50890904!
test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom

	aFirstRoom at: 1@1 put: aPaper.
	
	self should: [Door between: aFirstRoom at: 1@1 and: aSecondRoom at: 0@0]
	raise: Error  
	withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ((aFirstRoom at: 1@1) = aPaper).
	! !

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 17:56:48'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 17:57:00' prior: 50890739!
test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom

	aSecondRoom at: 1@1 put: aPaper.
	
	self should: [Door between: aFirstRoom at: 0@0 and: aSecondRoom at: 1@1]
	raise: Error  
	withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ((aFirstRoom at: 1@1) = aPaper).
	! !

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 17:57:37'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 17:57:37'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom_CHANGE_ME positionAtFirstRoom_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 17:57:37'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom_CHANGE_ME positionAtFirstRoom_CHANGE_ME secondRoom_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 17:57:37'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom_CHANGE_ME positionAtFirstRoom_CHANGE_ME secondRoom_CHANGE_ME positionAtSecondRoom_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'initialization' stamp: 'BT 12/17/2020 17:57:37'!
initializeBetween: firstRoom at: positionAtFirstRoom and: secondRoom at: positionAtSecondRoom 
	self shouldBeImplemented.
	firstRoom_CHANGE_ME := firstRoom.
	positionAtFirstRoom_CHANGE_ME := positionAtFirstRoom.
	secondRoom_CHANGE_ME := secondRoom.
	positionAtSecondRoom_CHANGE_ME := positionAtSecondRoom.! !
!Door methodsFor: 'initialization' stamp: 'BT 12/17/2020 17:57:40' prior: 50890984!
initializeBetween: firstRoom at: positionAtFirstRoom and: secondRoom at: positionAtSecondRoom 
	firstRoom_CHANGE_ME := firstRoom.
	positionAtFirstRoom_CHANGE_ME := positionAtFirstRoom.
	secondRoom_CHANGE_ME := secondRoom.
	positionAtSecondRoom_CHANGE_ME := positionAtSecondRoom.! !
!Door methodsFor: 'initialization' stamp: 'BT 12/17/2020 17:58:12' prior: 50890997!
initializeBetween: firstRoom at: positionAtFirstRoom and: secondRoom at: positionAtSecondRoom
	 
	firstRoom_CHANGE_ME := firstRoom.
	positionAtFirstRoom_CHANGE_ME := positionAtFirstRoom.
	secondRoom_CHANGE_ME := secondRoom.
	positionAtSecondRoom_CHANGE_ME := positionAtSecondRoom.! !
!Door methodsFor: 'initialization' stamp: 'BT 12/17/2020 17:58:24' prior: 50891009!
initializeBetween: aFirstRoom at: positionAtFirstRoom and: secondRoom at: positionAtSecondRoom
	 
	firstRoom_CHANGE_ME := aFirstRoom.
	positionAtFirstRoom_CHANGE_ME := positionAtFirstRoom.
	secondRoom_CHANGE_ME := secondRoom.
	positionAtSecondRoom_CHANGE_ME := positionAtSecondRoom.! !
!Door methodsFor: 'initialization' stamp: 'BT 12/17/2020 17:58:28' prior: 50891021!
initializeBetween: aFirstRoom at: positionAtFirstRoom and: aSecondRoom at: positionAtSecondRoom
	 
	firstRoom_CHANGE_ME := aFirstRoom.
	positionAtFirstRoom_CHANGE_ME := positionAtFirstRoom.
	secondRoom_CHANGE_ME := aSecondRoom.
	positionAtSecondRoom_CHANGE_ME := positionAtSecondRoom.! !

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 17:58:34'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom positionAtFirstRoom_CHANGE_ME secondRoom_CHANGE_ME positionAtSecondRoom_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'as yet unclassified' stamp: 'BT 12/17/2020 17:58:34' prior: 50891033!
initializeBetween: aFirstRoom at: positionAtFirstRoom and: aSecondRoom at: positionAtSecondRoom
	 
	firstRoom := aFirstRoom.
	positionAtFirstRoom_CHANGE_ME := positionAtFirstRoom.
	secondRoom_CHANGE_ME := aSecondRoom.
	positionAtSecondRoom_CHANGE_ME := positionAtSecondRoom.! !

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 17:58:41'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom positionAtFirstRoom_CHANGE_ME secondRoom positionAtSecondRoom_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'as yet unclassified' stamp: 'BT 12/17/2020 17:58:41' prior: 50891056!
initializeBetween: aFirstRoom at: positionAtFirstRoom and: aSecondRoom at: positionAtSecondRoom
	 
	firstRoom := aFirstRoom.
	positionAtFirstRoom_CHANGE_ME := positionAtFirstRoom.
	secondRoom := aSecondRoom.
	positionAtSecondRoom_CHANGE_ME := positionAtSecondRoom.! !
!Door methodsFor: 'initialization' stamp: 'BT 12/17/2020 17:59:30' prior: 50891079!
initializeBetween: aFirstRoom at: positionAtFirstRoom and: aSecondRoom at: positionAtSecondRoom
	 
	firstRoom at: positionAtFirstRoom put: self.
	secondRoom at: positionAtSecondRoom put: self.
	
	positionAtSecondRoom_CHANGE_ME := positionAtSecondRoom.
	positionAtFirstRoom_CHANGE_ME := positionAtFirstRoom.! !

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 17:59:59'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom positionAtFirstRoom_CHANGE_ME secondRoom secondRoomPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'as yet unclassified' stamp: 'BT 12/17/2020 17:59:59' prior: 50891090!
initializeBetween: aFirstRoom at: positionAtFirstRoom and: aSecondRoom at: positionAtSecondRoom
	 
	firstRoom at: positionAtFirstRoom put: self.
	secondRoom at: positionAtSecondRoom put: self.
	
	secondRoomPosition := positionAtSecondRoom.
	positionAtFirstRoom_CHANGE_ME := positionAtFirstRoom.! !

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 18:00:06'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom firstRoomPosition secondRoom secondRoomPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'as yet unclassified' stamp: 'BT 12/17/2020 18:00:06' prior: 50891113!
initializeBetween: aFirstRoom at: positionAtFirstRoom and: aSecondRoom at: positionAtSecondRoom
	 
	firstRoom at: positionAtFirstRoom put: self.
	secondRoom at: positionAtSecondRoom put: self.
	
	secondRoomPosition := positionAtSecondRoom.
	firstRoomPosition := positionAtFirstRoom.! !

!testRun: #DoorTest #test05PositionOfDoorAtFirstRoomIsOccupiedByTheDoor stamp: 'BT 12/17/2020 18:00:13'!
ERROR!

!testRun: #DoorTest #test05PositionOfDoorAtFirstRoomIsOccupiedByTheDoor stamp: 'BT 12/17/2020 18:00:21'!
ERROR!

!testRun: #DoorTest #test05PositionOfDoorAtFirstRoomIsOccupiedByTheDoor stamp: 'BT 12/17/2020 18:00:21'!
ERROR!

!testRun: #DoorTest #test05PositionOfDoorAtFirstRoomIsOccupiedByTheDoor stamp: 'BT 12/17/2020 18:01:43'!
ERROR!

!testRun: #DoorTest #test05PositionOfDoorAtFirstRoomIsOccupiedByTheDoor stamp: 'BT 12/17/2020 18:01:43'!
ERROR!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 18:01:47'!
ERROR!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 18:01:47'!
ERROR!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 18:02:00'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 18:02:02'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 18:02:04'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 18:02:05'!
ERROR!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 18:02:05'!
ERROR!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 18:02:32'!
ERROR!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:02:57' prior: 50890932!
test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom

	aSecondRoom at: 1@1 put: aPaper.
	
	self should: [Door between: aFirstRoom at: 0@0 and: aSecondRoom at: 1@1]
	raise: Error  
	withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: ((aSecondRoom at: 1@1) = aPaper).
	! !

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 18:02:59'!
PASSED!

!testRun: #DoorTest #test05PositionOfDoorAtFirstRoomIsOccupiedByTheDoor stamp: 'BT 12/17/2020 18:03:19'!
ERROR!

!testRun: #DoorTest #test05PositionOfDoorAtFirstRoomIsOccupiedByTheDoor stamp: 'BT 12/17/2020 18:03:19'!
ERROR!

!testRun: #DoorTest #test05PositionOfDoorAtFirstRoomIsOccupiedByTheDoor stamp: 'BT 12/17/2020 18:03:31'!
ERROR!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:05:33'!
test05CreatedDoorOccupesPositionsCorrectly

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 0@0.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.
	
	self deny: (aFirstRoom isEmptyAt: 0@0).
	self deny: (aSecondRoom isEmptyAt: 1@1).
	self assert: (aFirstRoom at: positionDoorAtFirstRoom = aDoor).
	self assert: (aSecondRoom at: positionDoorAtSecondRoom = aDoor).! !

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 18:07:01'!
ERROR!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:10:45' prior: 50891221!
test05CreatedDoorOccupesPositionsCorrectly

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 0@0.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: (Room ofWidth: 4 andHeight: 4) at: positionDoorAtFirstRoom and: (Room ofWidth: 4 andHeight: 4) at: positionDoorAtSecondRoom.
	
	self deny: (aFirstRoom isEmptyAt: 0@0).
	self deny: (aSecondRoom isEmptyAt: 1@1).
	self assert: (aFirstRoom at: positionDoorAtFirstRoom = aDoor).
	self assert: (aSecondRoom at: positionDoorAtSecondRoom = aDoor).! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:11:56' prior: 50891243!
test05CreatedDoorOccupesPositionsCorrectly

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom firstRoom secondRoom |
	firstRoom := Room ofWidth: 4 andHeight: 4.
	secondRoom := Room ofWidth: 4 andHeight: 4.
	positionDoorAtFirstRoom := 0@0.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: firstRoom at: positionDoorAtFirstRoom and:  secondRoom at: positionDoorAtSecondRoom.
	
	self deny: (firstRoom isEmptyAt: 0@0).
	self deny: (secondRoom isEmptyAt: 1@1).
	self assert: (firstRoom at: positionDoorAtFirstRoom = aDoor).
	self assert: (secondRoom at: positionDoorAtSecondRoom = aDoor).! !

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 18:12:15'!
ERROR!
!Door methodsFor: 'initialization' stamp: 'BT 12/17/2020 18:13:54' prior: 50891136!
initializeBetween: aFirstRoom at: positionAtFirstRoom and: aSecondRoom at: positionAtSecondRoom
	 
	aFirstRoom at: positionAtFirstRoom put: self.
	aSecondRoom at: positionAtSecondRoom put: self.
	
	secondRoomPosition := positionAtSecondRoom.
	firstRoomPosition := positionAtFirstRoom.! !

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 18:14:10'!
ERROR!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 18:14:10'!
ERROR!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:15:18' prior: 50891263!
test05CreatedDoorOccupesPositionsCorrectly

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom firstRoom secondRoom |
	firstRoom := Room ofWidth: 4 andHeight: 4.
	secondRoom := Room ofWidth: 4 andHeight: 4.
	positionDoorAtFirstRoom := 0@0.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: firstRoom at: positionDoorAtFirstRoom and:  secondRoom at: positionDoorAtSecondRoom.
	
	self deny: (firstRoom isEmptyAt: 0@0).
	self deny: (secondRoom isEmptyAt: 1@1).
	self assert: ((firstRoom at: positionDoorAtFirstRoom) = aDoor).
	self assert: ((secondRoom at: positionDoorAtSecondRoom) = aDoor).! !

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 18:15:29'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:16:06' prior: 50891307!
test05CreatedDoorOccupesPositionsCorrectly

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom |

	positionDoorAtFirstRoom := 0@0.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and:  aSecondRoom at: positionDoorAtSecondRoom.
	
	self deny: (aFirstRoom isEmptyAt: 0@0).
	self deny: (aSecondRoom isEmptyAt: 1@1).
	self assert: ((aFirstRoom at: positionDoorAtFirstRoom) = aDoor).
	self assert: ((aSecondRoom at: positionDoorAtSecondRoom) = aDoor).! !

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 18:16:11'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:19:45'!
test06CannotCreateARoomBetweenTheSameRoom

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 0@0.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.
	
	self deny: (aFirstRoom isEmptyAt: 0@0).
	self deny: (aSecondRoom isEmptyAt: 1@1).
	self assert: (aFirstRoom at: positionDoorAtFirstRoom = aDoor).
	self assert: (aSecondRoom at: positionDoorAtSecondRoom = aDoor).! !

!methodRemoval: DoorTest #test05PositionOfDoorAtFirstRoomIsOccupiedByTheDoor stamp: 'BT 12/17/2020 18:19:45'!
test05PositionOfDoorAtFirstRoomIsOccupiedByTheDoor

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 0@0.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.
	
	self deny: (aFirstRoom isEmptyAt: 0@0).
	self deny: (aSecondRoom isEmptyAt: 1@1).
	self assert: (aFirstRoom at: positionDoorAtFirstRoom = aDoor).
	self assert: (aSecondRoom at: positionDoorAtSecondRoom = aDoor).!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:21:00'!
test06CannotCreateADoorBetweenTheSameRoom

	self should: [Door between: aFirstRoom at: 0@0 and: aSecondRoom at: 1@1]
	raise: Error  
	withMessageText: Door cantConnectTheSameRoomErrorMessage..
	

	! !

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 18:21:13'!
ERROR!
!Door class methodsFor: 'error messages' stamp: 'BT 12/17/2020 18:21:21'!
cantConnectTheSameRoomErrorMessage
	self shouldBeImplemented.! !
!Door class methodsFor: 'error messages' stamp: 'BT 12/17/2020 18:21:50' prior: 50891403!
cantConnectTheSameRoomErrorMessage
	^ 'Cannot create door connecting a room with itself'! !
!Door class methodsFor: 'instance creation' stamp: 'BT 12/17/2020 18:22:50' prior: 50890770!
between: firstRoom at: positionAtFirstRoom and: secondRoom at: positionAtSecondRoom 

	"estos assertions en realidad no son necesarios porque los chequea la Room en el put:at:. Los dejo porque me di cuenta tarde y ya los ten�a hechos".
	secondRoom assertPositionIsValid: positionAtSecondRoom.
	firstRoom assertPositionIsValid: positionAtFirstRoom.
	firstRoom assertIsEmpty: positionAtFirstRoom.
	secondRoom assertIsEmpty: positionAtSecondRoom.
	^self new initializeBetween: firstRoom at: positionAtFirstRoom and: secondRoom at: positionAtSecondRoom ! !
!Door class methodsFor: 'instance creation' stamp: 'BT 12/17/2020 18:23:58' prior: 50891414!
between: firstRoom at: positionAtFirstRoom and: secondRoom at: positionAtSecondRoom 
	self assertRoom: firstRoom mustBeDifferentTo: secondRoom.
	"estos assertions en realidad no son necesarios porque los chequea la Room en el put:at:. Los dejo porque me di cuenta tarde y ya los ten�a hechos".
	secondRoom assertPositionIsValid: positionAtSecondRoom.
	firstRoom assertPositionIsValid: positionAtFirstRoom.
	firstRoom assertIsEmpty: positionAtFirstRoom.
	secondRoom assertIsEmpty: positionAtSecondRoom.
	^self new initializeBetween: firstRoom at: positionAtFirstRoom and: secondRoom at: positionAtSecondRoom ! !

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 18:24:02'!
FAILURE!
!Door class methodsFor: 'assertions' stamp: 'BT 12/17/2020 18:24:22'!
assertRoom: aRoom mustBeDifferentTo: aRoom2 
	self shouldBeImplemented.! !
!Door class methodsFor: 'assertions' stamp: 'BT 12/17/2020 18:24:34' prior: 50891460!
assertRoom: aRoom mustBeDifferentTo: aSecondRoom 
	self shouldBeImplemented.! !
!Door class methodsFor: 'assertions' stamp: 'BT 12/17/2020 18:24:39' prior: 50891466!
assertRoom: aFirstRoom mustBeDifferentTo: aSecondRoom 
	self shouldBeImplemented.! !
!Door class methodsFor: 'assertions' stamp: 'BT 12/17/2020 18:25:25' prior: 50891472!
assertRoom: aFirstRoom mustBeDifferentTo: aSecondRoom 
	(aFirstRoom  = aSecondRoom ) ifTrue: [ self signalCreatingWithTheSameRoom]! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:25:52' prior: 50891391!
test06CannotCreateADoorBetweenTheSameRoom

	self should: [Door between: aFirstRoom at: 0@0 and: aFirstRoom at: 1@1]
	raise: Error  
	withMessageText: Door cantConnectTheSameRoomErrorMessage..
	

	! !
!Door class methodsFor: '*DenotativeObject' stamp: 'BT 12/17/2020 18:26:14'!
signalCreatingWithTheSameRoom
	self shouldBeImplemented.! !
!Door class methodsFor: '*DenotativeObject' stamp: 'BT 12/17/2020 18:26:26' prior: 50891494!
signalCreatingWithTheSameRoom
	self error: self cantConnectTheSameRoomErrorMessage.! !

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 18:26:32'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:29:20'!
test07CannotPutADoorInANonPortableObject

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom nonPortableObject |
	positionDoorAtFirstRoom := 0@0.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.
	
	nonPortableObject := NonPortableObject named: 'cajon'.
	
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:30:48' prior: 50891507!
test07CannotPutADoorInANonPortableObject

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom nonPortableObject |
	positionDoorAtFirstRoom := 0@0.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.
	
	nonPortableObject := NonPortableObject named: 'cajon'.
	
	self should: [nonPortableObject]
	raise: Error  
	withMessageText: Door cantBePutAtANonPortableObjectErrorMessage.
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:32:37' prior: 50891521!
test07CannotPutADoorInANonPortableObject

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 0@0.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	
	self should: [NonPortableObject named: 'Box' withAll: { aDoor }.]
	raise: Error  
	withMessageText: Door cantBePutAtANonPortableObjectErrorMessage.
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:32:46' prior: 50891539!
test07CannotPutADoorInANonPortableObject

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 0@0.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	
	self should: [NonPortableObject named: 'Box' withAll: { aDoor }.]
	raise: Error  
	withMessageText: Door cantBePutAtANonPortableObjectErrorMessage.
	
	
	! !

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 18:32:55'!
ERROR!
!Door class methodsFor: 'error messages' stamp: 'BT 12/17/2020 18:33:09'!
cantBePutAtANonPortableObjectErrorMessage
	self shouldBeImplemented.! !
!Door class methodsFor: 'error messages' stamp: 'BT 12/17/2020 18:33:32' prior: 50891576!
cantBePutAtANonPortableObjectErrorMessage
	^ 'Cant be put at any non portable object'.! !
!NonPortableObject methodsFor: 'initialization' stamp: 'BT 12/17/2020 18:35:46' prior: 50889734!
initializeNamed: aName withAll: aCollectionOfStageObjects 
	
	name := aName.
	aCollectionOfStageObjects do: [:aStageObject | aStageObject putIn: self].
	stageObjects := OrderedCollection new.! !

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 18:35:56'!
FAILURE!
!Door methodsFor: 'nonPortableObject' stamp: 'BT 12/17/2020 18:36:29'!
putIn: aNonPortableObject 
	self shouldBeImplemented.! !
!Door methodsFor: 'nonPortableObject' stamp: 'BT 12/17/2020 18:36:55' prior: 50891600!
putIn: aNonPortableObject 
	self signalCantBePutAtAnyNonPortable.! !
!Door methodsFor: 'signals' stamp: 'BT 12/17/2020 18:37:12'!
signalCantBePutAtAnyNonPortable
	self shouldBeImplemented.! !
!Door methodsFor: 'signals' stamp: 'BT 12/17/2020 18:37:33' prior: 50891610!
signalCantBePutAtAnyNonPortable
	self error: self class cantBePutAtANonPortableObjectErrorMessage.! !

!methodRemoval: DoorTest #test06CannotCreateARoomBetweenTheSameRoom stamp: 'BT 12/17/2020 18:37:56'!
test06CannotCreateARoomBetweenTheSameRoom

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 0@0.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.
	
	self deny: (aFirstRoom isEmptyAt: 0@0).
	self deny: (aSecondRoom isEmptyAt: 1@1).
	self assert: (aFirstRoom at: positionDoorAtFirstRoom = aDoor).
	self assert: (aSecondRoom at: positionDoorAtSecondRoom = aDoor).!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 18:38:06'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 18:38:10'!
ERROR!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 18:38:10'!
ERROR!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'BT 12/17/2020 18:38:10'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 18:38:24'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 18:38:24'!
ERROR!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 18:38:24'!
ERROR!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 18:38:30'!
ERROR!
!NoPointsPortableObject methodsFor: 'put in non portable' stamp: 'BT 12/17/2020 18:39:00'!
putIn: aNonPortableObject 
	self shouldBeImplemented.! !
!NoPointsPortableObject methodsFor: 'put in non portable' stamp: 'BT 12/17/2020 18:39:22' prior: 50891917!
putIn: aNonPortableObject 
	aNonPortableObject addIn: aNonPortableObject.! !
!NoPointsPortableObject methodsFor: 'put in non portable' stamp: 'BT 12/17/2020 18:39:41' prior: 50891923!
putIn: aNonPortableObject 
	aNonPortableObject addToContent: aNonPortableObject.! !
!NonPortableObject methodsFor: 'content' stamp: 'BT 12/17/2020 18:40:04'!
addToContent: aNonPortableObject 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'content' stamp: 'BT 12/17/2020 18:40:22' prior: 50891934!
addToContent: aNonPortableObject 
	stageObjects add: aNonPortableObject.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 18:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 18:40:31'!
ERROR!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 18:40:31'!
ERROR!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 18:40:34'!
ERROR!
!NonPortableObject methodsFor: 'initialization' stamp: 'BT 12/17/2020 18:41:12' prior: 50891588!
initializeNamed: aName withAll: aCollectionOfStageObjects 
	
	name := aName.
	stageObjects := OrderedCollection new.
	aCollectionOfStageObjects do: [:aStageObject | aStageObject putIn: self].
	! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 18:41:17'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'BT 12/17/2020 18:41:26'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'BT 12/17/2020 18:41:26'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'BT 12/17/2020 18:41:26'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'BT 12/17/2020 18:41:26'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'BT 12/17/2020 18:41:26'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'BT 12/17/2020 18:41:26'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'BT 12/17/2020 18:41:26'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'BT 12/17/2020 18:41:26'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'BT 12/17/2020 18:41:26'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'BT 12/17/2020 18:41:26'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'BT 12/17/2020 18:41:26'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'BT 12/17/2020 18:41:26'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 18:41:30'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 18:41:47'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 18:41:53'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 18:41:55'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 18:41:57'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 18:41:58'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:42:00'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:42:01'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 18:42:03'!
PASSED!
!NoPointsPortableObject methodsFor: 'put in non portable' stamp: 'BT 12/17/2020 18:43:36' prior: 50891929!
putIn: aNonPortableObject 
	aNonPortableObject addToContent: self.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 18:43:43'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'BT 12/17/2020 18:43:45'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'BT 12/17/2020 18:43:45'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:47:13'!
test08CannotPutADoorInANonPortableObject

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom playableCharacter |
	positionDoorAtFirstRoom := 0@1.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: aFirstRoom.

	
	self should: [ playableCharacter take]
	raise: Error  
	withMessageText: Door cannotBeTakenErrorMessage.
	
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:47:51'!
test08DoorCannotBeTakenByAnyPlayableCharacter

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom playableCharacter |
	positionDoorAtFirstRoom := 0@1.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: aFirstRoom.

	
	self should: [ playableCharacter take]
	raise: Error  
	withMessageText: Door cannotBeTakenErrorMessage.
	
	
	! !

!methodRemoval: DoorTest #test08CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 18:47:51'!
test08CannotPutADoorInANonPortableObject

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom playableCharacter |
	positionDoorAtFirstRoom := 0@1.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: aFirstRoom.

	
	self should: [ playableCharacter take]
	raise: Error  
	withMessageText: Door cannotBeTakenErrorMessage.
	
	
	!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 18:48:08'!
ERROR!
!DoorTest methodsFor: 'nil' stamp: 'BT 12/17/2020 18:48:57'!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 18:49:38'!
ERROR!
!Door class methodsFor: 'error messages' stamp: 'BT 12/17/2020 18:49:53'!
cannotBeTakenErrorMessage
	self shouldBeImplemented.! !
!Door class methodsFor: 'error messages' stamp: 'BT 12/17/2020 18:50:12' prior: 50892664!
cannotBeTakenErrorMessage
	^ 'Door cannot be taken!!'! !
!StageObject methodsFor: 'taken' stamp: 'BT 12/17/2020 18:50:42' prior: 50889714!
takenBy: aPlayableCharacter 

	 
	! !
!StageObject methodsFor: 'taken' stamp: 'BT 12/17/2020 18:51:00' prior: 50892674!
takenBy: aPlayableCharacter 
	self signalCannotBeTaken.
	! !
!Door methodsFor: 'signals' stamp: 'BT 12/17/2020 18:51:11'!
signalCannotBeTaken
	self shouldBeImplemented.! !
!Door methodsFor: 'signals' stamp: 'BT 12/17/2020 18:51:30' prior: 50892682!
signalCannotBeTaken
	self error: self class cannotBeTakenErrorMessage.! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:52:07' prior: 50892612!
test08DoorCannotBeTakenByAnyPlayableCharacter

	| aDoor positionDoorAtFirstRoom positionDoorAtSecondRoom playableCharacter |
	positionDoorAtFirstRoom := 0@1.
	positionDoorAtSecondRoom := 1@1.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: aFirstRoom.

	
	self should: [ playableCharacter take]
	raise: Error  
	withMessageText: Door cannotBeTakenErrorMessage.
	
	self deny: (playableCharacter backpackIncludes: aDoor).
	
	
	! !

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 18:52:09'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'BT 12/17/2020 18:52:14'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'BT 12/17/2020 18:52:14'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'BT 12/17/2020 18:52:14'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'BT 12/17/2020 18:52:15'!
PASSED!

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 18:53:39'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'aPaper paper aFirstRoom aSecondRoom positionFirstRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 18:53:40'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'aPaper paper aFirstRoom aSecondRoom positionFirstRoom positionSecondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'setUp' stamp: 'BT 12/17/2020 18:53:37' prior: 50890483 overrides: 16927572!
setUp
	aPaper := PointsPortableObject named: 'paper' weighing: 1 worth: 1.
	aFirstRoom := Room ofWidth: 10 andHeight: 10.
	aSecondRoom := Room ofWidth: 10 andHeight: 10.
	
	positionFirstRoom := 0@0.
	positionSecondRoom := 1@1.! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:54:15' prior: 50891332!
test05CreatedDoorOccupesPositionsCorrectly

	| aDoor |

	aDoor := Door between: aFirstRoom at: positionFirstRoom and:  aSecondRoom at: positionSecondRoom .
	
	self deny: (aFirstRoom isEmptyAt: 0@0).
	self deny: (aSecondRoom isEmptyAt: 1@1).
	self assert: ((aFirstRoom at: positionFirstRoom ) = aDoor).
	self assert: ((aSecondRoom at: positionSecondRoom ) = aDoor).! !

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 18:54:20'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:54:54' prior: 50891556!
test07CannotPutADoorInANonPortableObject

	| aDoor |

	aDoor := Door between: aFirstRoom at: positionFirstRoom and: aSecondRoom at: positionSecondRoom .

	
	self should: [NonPortableObject named: 'Box' withAll: { aDoor }.]
	raise: Error  
	withMessageText: Door cantBePutAtANonPortableObjectErrorMessage.
	
	
	! !

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 18:54:57'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 18:55:31' prior: 50892691!
test08DoorCannotBeTakenByAnyPlayableCharacter

	| aDoor positionDoorAtFirstRoom playableCharacter |
	positionDoorAtFirstRoom := 0@1.
	
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionSecondRoom .

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: aFirstRoom.

	
	self should: [ playableCharacter take]
	raise: Error  
	withMessageText: Door cannotBeTakenErrorMessage.
	
	self deny: (playableCharacter backpackIncludes: aDoor).
	
	
	! !

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 18:55:35'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'BT 12/17/2020 18:55:39'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'BT 12/17/2020 18:55:39'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 19:11:32'!
test09DoorCannotTakePlayableCharacterOutsideTheSecondRoom

	| aDoor positionDoorAtFirstRoom playableCharacter |
	positionDoorAtFirstRoom := 9@9.
	
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionSecondRoom .

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 9@8 heading: #North in: aFirstRoom.
	
	self should: [ playableCharacter forwardPosition]
	raise: Error  
	withMessageText: Door cannotBeTakenErrorMessage.
	
	self assert: ((aFirstRoom at: 9@8) = playableCharacter).
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 19:12:09'!
test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor

	| aDoor positionDoorAtFirstRoom playableCharacter |
	positionDoorAtFirstRoom := 9@9.
	
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionSecondRoom .

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 9@8 heading: #North in: aFirstRoom.
	
	self should: [ playableCharacter forwardPosition]
	raise: Error  
	withMessageText: Door cannotBeTakenErrorMessage.
	
	self assert: ((aFirstRoom at: 9@8) = playableCharacter).
	
	! !

!methodRemoval: DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoom stamp: 'BT 12/17/2020 19:12:18'!
test09DoorCannotTakePlayableCharacterOutsideTheSecondRoom

	| aDoor positionDoorAtFirstRoom playableCharacter |
	positionDoorAtFirstRoom := 9@9.
	
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionSecondRoom .

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 9@8 heading: #North in: aFirstRoom.
	
	self should: [ playableCharacter forwardPosition]
	raise: Error  
	withMessageText: Door cannotBeTakenErrorMessage.
	
	self assert: ((aFirstRoom at: 9@8) = playableCharacter).
	
	!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 19:13:31' prior: 50893219!
test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor

	| aDoor positionDoorAtFirstRoom playableCharacter |
	positionDoorAtFirstRoom := 9@9.
	positionDoorAtFirstRoom := 9@9.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionSecondRoom .

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 9@8 heading: #North in: aFirstRoom.
	
	self should: [ playableCharacter forwardPosition]
	raise: Error  
	withMessageText: Door cannotBeTakenErrorMessage.
	
	self assert: ((aFirstRoom at: 9@8) = playableCharacter).
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 19:13:54' prior: 50893261!
test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor

	| aDoor positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 9@9.
	positionDoorAtSecondRoom := 9@9.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionSecondRoom .

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 9@8 heading: #North in: aFirstRoom.
	
	self should: [ playableCharacter forwardPosition]
	raise: Error  
	withMessageText: Door cannotBeTakenErrorMessage.
	
	self assert: ((aFirstRoom at: 9@8) = playableCharacter).
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 19:14:09' prior: 50893283!
test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor

	| aDoor positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 9@9.
	positionDoorAtSecondRoom := 9@9.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 9@8 heading: #North in: aFirstRoom.
	
	self should: [ playableCharacter forwardPosition]
	raise: Error  
	withMessageText: Door cannotBeTakenErrorMessage.
	
	self assert: ((aFirstRoom at: 9@8) = playableCharacter).
	
	! !

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 19:14:16'!
ERROR!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 19:15:31' prior: 50893306!
test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor

	| aDoor positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 9@9.
	positionDoorAtSecondRoom := 9@9.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 9@8 heading: #North in: aFirstRoom.
	
	self should: [ playableCharacter moveForward]
	raise: Error  
	withMessageText: Door cannotBeTakenErrorMessage.
	
	self assert: ((aFirstRoom at: 9@8) = playableCharacter).
	
	! !

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 19:15:40'!
ERROR!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 19:16:01'!
FAILURE!
!Room methodsFor: 'contents' stamp: 'BT 12/17/2020 19:18:39' prior: 50889591!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	
	self at: aTargetPosition put: toMove.
	
	contents removeKey: aSourcePosition.
	! !
!Room methodsFor: 'assertions' stamp: 'BT 12/17/2020 19:26:12' prior: 50889612!
assertIsEmpty: aPosition

	'self error: self class positionIsNotEmptyErrorDescription'.
	^(self isEmptyAt: aPosition) ifFalse: [ (self at: aPosition) assertCanMoveThrough ].
	
	! !
!Room methodsFor: 'assertions' stamp: 'BT 12/17/2020 19:27:21' prior: 50893373!
assertIsEmpty: aPosition

	^(self isEmptyAt: aPosition) ifFalse: [ (self at: aPosition) enableAccessIfNotPossible: [self error: self class positionIsNotEmptyErrorDescription] ].
	
	! !
!Room methodsFor: 'assertions' stamp: 'BT 12/17/2020 19:28:15' prior: 50893382!
assertIsEmpty: aPosition

	^(self isEmptyAt: aPosition) ifFalse: [ (self at: aPosition) enableAccessAt: aPosition IfNotPossible: [self error: self class positionIsNotEmptyErrorDescription] ].
	
	! !

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 19:28:40'!
FAILURE!
!Door methodsFor: 'usage' stamp: 'BT 12/17/2020 19:29:15'!
enableAccessAt: aPoint IfNotPossible: aBlockClosure 
	self shouldBeImplemented.! !
!Door methodsFor: 'usage' stamp: 'BT 12/17/2020 19:31:00' prior: 50893404!
enableAccessAt: aPoint IfNotPossible: aBlockClosure 
	(aPoint = firstRoomPosition ) ifTrue: [^ secondRoomPosition].! !
!Room methodsFor: 'contents' stamp: 'BT 12/17/2020 19:36:53' prior: 50889584 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aStageObject ! !

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 19:42:19'!
FAILURE!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 19:44:49'!
FAILURE!

!methodRemoval: Door #enableAccessAt:IfNotPossible: stamp: 'BT 12/17/2020 19:45:08'!
enableAccessAt: aPoint IfNotPossible: aBlockClosure 
	(aPoint = firstRoomPosition ) ifTrue: [^ secondRoomPosition].!
!Room methodsFor: 'assertions' stamp: 'BT 12/17/2020 19:46:05' prior: 50893391!
assertIsEmpty: aPosition

	^(self isEmptyAt: aPosition) ifFalse: [self error: self class positionIsNotEmptyErrorDescription] .
	
	! !

!classDefinition: #Room category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 19:53:25'!
Object subclass: #Room
	instanceVariableNames: 'width height contents newPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Room methodsFor: 'contents' stamp: 'BT 12/17/2020 19:58:58' prior: 50893364!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	
	aTargetPosition moveObject: toMove.
	
	contents removeKey: aSourcePosition.
	! !
!Room methodsFor: 'contents' stamp: 'BT 12/17/2020 20:10:35' prior: 50893455!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	
	contents at: aTargetPosition ifPresent: [:anObject | anObject visitBy: toMove].
	
	self at: aTargetPosition put: toMove.
	
	contents removeKey: aSourcePosition.
	! !
!Door methodsFor: 'move' stamp: 'BT 12/17/2020 20:11:15'!
visitBy: aPlayableCharacter 
	self shouldBeImplemented.! !
!Room methodsFor: 'contents' stamp: 'BT 12/17/2020 20:12:07' prior: 50893464!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	
	contents at: aTargetPosition ifPresent: [:anObject | anObject visitBy: toMove at: aTargetPosition].
	
	self at: aTargetPosition put: toMove.
	
	contents removeKey: aSourcePosition.
	! !
!Door methodsFor: 'move' stamp: 'BT 12/17/2020 20:12:22'!
visitBy: aPlayableCharacter at: aPoint 
	self shouldBeImplemented.! !
!Door methodsFor: 'move' stamp: 'BT 12/17/2020 20:12:25' prior: 50893491!
visitBy: aPlayableCharacter at: aPoint 
	! !
!Door methodsFor: 'move' stamp: 'BT 12/17/2020 20:12:31' prior: 50893496!
visitBy: aPlayableCharacter at: aPosition 
	! !
!Door methodsFor: 'move' stamp: 'BT 12/17/2020 20:13:13' prior: 50893500!
visitBy: aPlayableCharacter at: aPosition 
	(aPosition = firstRoomPosition) ifTrue: []! !
!Door methodsFor: 'move' stamp: 'BT 12/17/2020 20:15:58' prior: 50893504!
visitBy: aPlayableCharacter at: aPosition 
	(aPosition = firstRoomPosition) ifTrue: [ aPlayableCharacter moveToRoom: secondRoom from: secondRoomPosition]! !
!PlayableCharacter methodsFor: 'move' stamp: 'BT 12/17/2020 20:16:13'!
moveToRoom: anUndefinedObject from: aPoint 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'move' stamp: 'BT 12/17/2020 20:16:20' prior: 50893518!
moveToRoom: aDoor from: aPoint 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'move' stamp: 'BT 12/17/2020 20:16:28' prior: 50893524!
moveToRoom: aRoom from: aPoint 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'move' stamp: 'BT 12/17/2020 20:16:44' prior: 50893529!
moveToRoom: aRoom from: entrancePosition 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'move' stamp: 'BT 12/17/2020 20:16:53' prior: 50893534!
moveToRoom: aRoom from: entrancePosition 
	room := aRoom.! !
!PlayableCharacter methodsFor: 'move' stamp: 'BT 12/17/2020 20:23:47' prior: 50893539!
moveToRoom: aRoom from: entrancePosition 
	room := aRoom.
	room at: (entrancePosition + heading forwardPoint) put: self.
	! !

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:26:28'!
FAILURE!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:26:46'!
FAILURE!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:26:56'!
FAILURE!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:28:27'!
FAILURE!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:28:46'!
FAILURE!
!Door methodsFor: 'initialization' stamp: 'BT 12/17/2020 20:30:00' prior: 50891288!
initializeBetween: aFirstRoom at: positionAtFirstRoom and: aSecondRoom at: positionAtSecondRoom
	 
	aFirstRoom at: positionAtFirstRoom put: self.
	aSecondRoom at: positionAtSecondRoom put: self.
	
	secondRoomPosition := positionAtSecondRoom.
	firstRoomPosition := positionAtFirstRoom.
	
	firstRoom := aFirstRoom.
	secondRoom := aSecondRoom.! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 20:31:48' prior: 50893333!
test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor

	| aDoor positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 9@9.
	positionDoorAtSecondRoom := 9@9.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 9@8 heading: #North in: aFirstRoom.
	
	self should: [ playableCharacter moveForward]
	raise: Error  
	withMessageText: Door invalidPositionErrorDescription.
	
	self assert: ((aFirstRoom at: 9@8) = playableCharacter).
	
	! !

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:31:54'!
ERROR!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:31:54'!
ERROR!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 20:32:08' prior: 50893586!
test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor

	| aDoor positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 9@9.
	positionDoorAtSecondRoom := 9@9.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 9@8 heading: #North in: aFirstRoom.
	
	self should: [ playableCharacter moveForward]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	
	self assert: ((aFirstRoom at: 9@8) = playableCharacter).
	
	! !

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:32:12'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 20:33:15'!
test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor

	| aDoor positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 9@9.
	positionDoorAtSecondRoom := 9@9.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 9@8 heading: #North in: aSecondRoom.
	
	self should: [ playableCharacter moveForward]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	
	self assert: ((aSecondRoom at: 9@8) = playableCharacter).
	
	! !

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:33:30'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 20:34:55' prior: 50893644!
test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor

	| aDoor positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 9@9.
	positionDoorAtSecondRoom := 5@6.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 5@5 heading: #North in: aSecondRoom.
	
	self should: [ playableCharacter moveForward]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	
	self assert: ((aSecondRoom at: 9@8) = playableCharacter).
	
	! !

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:34:59'!
FAILURE!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:34:59'!
FAILURE!
!Door methodsFor: 'move' stamp: 'BT 12/17/2020 20:37:14' prior: 50893510!
visitBy: aPlayableCharacter at: aPosition 
	(aPosition = firstRoomPosition) ifTrue: [ aPlayableCharacter moveToRoom: secondRoom from: secondRoomPosition].
	aPlayableCharacter moveToRoom: firstRoomPosition from: firstRoomPosition.! !
!Door methodsFor: 'move' stamp: 'BT 12/17/2020 20:37:55' prior: 50893702!
visitBy: aPlayableCharacter at: aPosition 
	(aPosition = firstRoomPosition) ifTrue: [ aPlayableCharacter moveToRoom: secondRoom from: secondRoomPosition].
	aPlayableCharacter moveToRoom: firstRoom from: firstRoomPosition.! !

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:38:21'!
ERROR!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:38:21'!
ERROR!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:38:34'!
ERROR!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:38:34'!
ERROR!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:38:50'!
PASSED!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:38:54'!
ERROR!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:38:54'!
ERROR!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 20:39:26' prior: 50893671!
test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor

	| aDoor positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 9@9.
	positionDoorAtSecondRoom := 5@6.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 5@5 heading: #North in: aSecondRoom.
	
	self should: [ playableCharacter moveForward]
	raise: Error  
	withMessageText: Room invalidPositionErrorDescription.
	
	self assert: ((aSecondRoom at: 5@5) = playableCharacter).
	
	! !

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:39:37'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 20:39:49'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 20:39:49'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 20:39:49'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 20:39:49'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 20:39:49'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 20:39:49'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 20:39:49'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 20:39:49'!
PASSED!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:39:49'!
PASSED!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:39:49'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'BT 12/17/2020 20:39:59'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'BT 12/17/2020 20:39:59'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 20:43:59'!
test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorUsed

	| aDoor positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 5@5 heading: #North in: aSecondRoom.
	
	playableCharacter moveForward.
	
	self assert: (aSecondRoom isEmptyAt: 5@5).
	self assert: ((aFirstRoom at: 4@7) = playableCharacter).
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 20:44:33'!
test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed

	| aDoor positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 5@5 heading: #North in: aSecondRoom.
	
	playableCharacter moveForward.
	
	self assert: (aSecondRoom isEmptyAt: 5@5).
	self assert: ((aFirstRoom at: 4@7) = playableCharacter).
	
	! !

!methodRemoval: DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorUsed stamp: 'BT 12/17/2020 20:44:33'!
test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorUsed

	| aDoor positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 5@5 heading: #North in: aSecondRoom.
	
	playableCharacter moveForward.
	
	self assert: (aSecondRoom isEmptyAt: 5@5).
	self assert: ((aFirstRoom at: 4@7) = playableCharacter).
	
	!
!PlayableCharacter methodsFor: 'move' stamp: 'BT 12/17/2020 20:46:44' prior: 50893544!
moveToRoom: aRoom from: entrancePosition
	room removeAt: self position.
	room := aRoom.
	room at: (entrancePosition + heading forwardPoint) put: self.
	! !

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:47:45'!
ERROR!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:47:45'!
ERROR!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:48:06'!
ERROR!
!Room methodsFor: 'contents' stamp: 'BT 12/17/2020 20:50:13' prior: 50893480!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	
	contents at: aTargetPosition ifPresent: [:anObject | anObject visitBy: toMove at: aTargetPosition].
	
	"self at: aTargetPosition put: toMove."
	
	contents removeKey: aSourcePosition.
	! !

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:50:16'!
ERROR!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:50:34'!
ERROR!
!PlayableCharacter methodsFor: 'move' stamp: 'BT 12/17/2020 20:51:53' prior: 50894086!
moveToRoom: aRoom from: entrancePosition
	room := aRoom.
	room at: (entrancePosition + heading forwardPoint) put: self.
	! !

(entrancePosition + heading forwardPoint) !

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:53:58'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 20:55:16'!
test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed

	| aDoor positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@5 heading: #North in: aFirstRoom.
	
	playableCharacter moveForward.
	
	self assert: (aFirstRoom isEmptyAt: 4@5).
	self assert: ((aSecondRoom at: 4@7) = playableCharacter).
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 20:55:35' prior: 50894139!
test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed

	| positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@5 heading: #North in: aFirstRoom.
	
	playableCharacter moveForward.
	
	self assert: (aFirstRoom isEmptyAt: 4@5).
	self assert: ((aSecondRoom at: 4@7) = playableCharacter).
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 20:55:45' prior: 50894041!
test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed

	| positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 5@5 heading: #North in: aSecondRoom.
	
	playableCharacter moveForward.
	
	self assert: (aSecondRoom isEmptyAt: 5@5).
	self assert: ((aFirstRoom at: 4@7) = playableCharacter).
	
	! !

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:55:50'!
ERROR!

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:55:50'!
ERROR!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:56:00'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 20:56:46' prior: 50894161!
test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed

	| positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@5 heading: #North in: aFirstRoom.
	
	playableCharacter moveForward.
	
	self assert: (aFirstRoom isEmptyAt: 4@5).
	self assert: ((aSecondRoom at: 5@7) = playableCharacter).
	
	! !

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:56:50'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 20:57:09' prior: 50894216!
test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed

	| positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@5 heading: #North in: aFirstRoom.
	
	playableCharacter moveForward.
	
	self assert: (aFirstRoom isEmptyAt: 4@5).
	self assert: ((aSecondRoom at: 5@7) = playableCharacter).
	
	'anduvo de una, lo dejo por las dudas porque chequea el otro camino'
	
	! !

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:57:11'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 20:57:19'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 20:57:19'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 20:57:19'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 20:57:19'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 20:57:19'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 20:57:19'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 20:57:19'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 20:57:19'!
PASSED!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:57:19'!
PASSED!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:57:19'!
PASSED!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:57:19'!
PASSED!

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:57:19'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 20:57:22'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 20:57:22'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 20:57:22'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 20:57:22'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 20:57:22'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 20:57:22'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 20:57:22'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 20:57:22'!
PASSED!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:57:22'!
PASSED!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:57:22'!
PASSED!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:57:22'!
PASSED!

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:57:22'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 20:57:24'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 20:57:24'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 20:57:24'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 20:57:24'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 20:57:24'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 20:57:24'!
ERROR!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 20:57:24'!
ERROR!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 20:57:24'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'BT 12/17/2020 20:57:24'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 20:57:36'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 20:57:49'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 20:57:49'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 20:58:00'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 20:58:00'!
ERROR!
!Room methodsFor: 'contents' stamp: 'BT 12/17/2020 20:59:36' prior: 50894106!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	
	contents at: aTargetPosition ifPresent: [:anObject | anObject visitBy: toMove at: aTargetPosition] ifAbsent: [ self at: aTargetPosition put: toMove ].

	contents removeKey: aSourcePosition.
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 20:59:46'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 20:59:49'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 20:59:51'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'BT 12/17/2020 20:59:52'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'BT 12/17/2020 20:59:52'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:00:51'!
test13DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed

	| positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@5 heading: #North in: aFirstRoom.
	
	playableCharacter moveForward.
	
	self assert: (aFirstRoom isEmptyAt: 4@5).
	self assert: ((aSecondRoom at: 5@7) = playableCharacter).
	
	'anduvo de una, lo dejo por las dudas porque chequea el otro camino'
	
	! !

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 21:19:14'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'aPaper paper aFirstRoom aSecondRoom positionFirstRoom positionSecondRoom defaultKey'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:18:55'!
test14DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt
	| positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom aDoor |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpackWithCorrectKey at: 4@5 heading: #North in: aFirstRoom.
	
	playableCharacter closeUsing: defaultKey.
	
	self deny: aDoor isOpen.
	! !
!DoorTest methodsFor: 'defaults' stamp: 'BT 12/17/2020 21:19:43'!
defaultBackpackWithCorrectKey
	self shouldBeImplemented.! !
!DoorTest methodsFor: 'defaults' stamp: 'BT 12/17/2020 21:20:18'!
defaultBackpackWithFirstKey
	self shouldBeImplemented.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'BT 12/17/2020 21:20:18' prior: 50895008!
test14DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt
	| positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom aDoor |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpackWithFirstKey at: 4@5 heading: #North in: aFirstRoom.
	
	playableCharacter closeUsing: defaultKey.
	
	self deny: aDoor isOpen.
	! !

!methodRemoval: DoorTest #defaultBackpackWithCorrectKey stamp: 'BT 12/17/2020 21:20:18'!
defaultBackpackWithCorrectKey
	self shouldBeImplemented.!

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 21:21:57'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'aPaper paper aFirstRoom aSecondRoom positionFirstRoom positionSecondRoom defaultKey blackKey'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'defaults' stamp: 'BT 12/17/2020 21:21:55' prior: 50895031!
defaultBackpackWithFirstKey
	^ self defaultBackpack add: blackKey.! !

!classDefinition: #Key category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 21:23:36'!
PortableObject subclass: #Key
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'setUp' stamp: 'BT 12/17/2020 21:22:09' prior: 50892935 overrides: 16927572!
setUp
	aPaper := PointsPortableObject named: 'paper' weighing: 1 worth: 1.
	aFirstRoom := Room ofWidth: 10 andHeight: 10.
	aSecondRoom := Room ofWidth: 10 andHeight: 10.
	
	positionFirstRoom := 0@0.
	positionSecondRoom := 1@1.
	blackKey := Key new.! !

!testRun: #DoorTest #test14DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt stamp: 'BT 12/17/2020 21:24:01'!
ERROR!

NoPointsPortableObject subclass: #Key
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Key category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 21:24:34'!
NoPointsPortableObject subclass: #Key
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!testRun: #DoorTest #test14DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt stamp: 'BT 12/17/2020 21:24:58'!
ERROR!
!DoorTest methodsFor: 'setUp' stamp: 'BT 12/17/2020 21:27:18' prior: 50895085 overrides: 16927572!
setUp
	aPaper := PointsPortableObject named: 'paper' weighing: 1 worth: 1.
	aFirstRoom := Room ofWidth: 10 andHeight: 10.
	aSecondRoom := Room ofWidth: 10 andHeight: 10.
	
	positionFirstRoom := 0@0.
	positionSecondRoom := 1@1.
	blackKey := Key named: 'blackKey' weighing: 4.! !
!PlayableCharacter methodsFor: 'door' stamp: 'BT 12/17/2020 21:27:56'!
closeUsing: anUndefinedObject 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'door' stamp: 'BT 12/17/2020 21:28:15' prior: 50895128!
closeUsing: anUndefinedObject 
	! !
!PlayableCharacter methodsFor: 'door' stamp: 'BT 12/17/2020 21:28:20' prior: 50895133!
closeUsing: aKey 
	! !
!PlayableCharacter methodsFor: 'door' stamp: 'BT 12/17/2020 21:28:34' prior: 50895137!
closeUsing: aKey
	 
	! !
!PlayableCharacter methodsFor: 'door' stamp: 'BT 12/17/2020 21:29:24' prior: 50895141!
closeUsing: aKey
	 room at: (self forwardPosition). 
	! !

self forwardPosition!
!PlayableCharacter methodsFor: 'door' stamp: 'BT 12/17/2020 21:31:17' prior: 50895145!
closeUsing: aKey
	 (room at: (self forwardPosition)) closeWith: aKey.
	! !
!Door methodsFor: 'state' stamp: 'BT 12/17/2020 21:31:34'!
closeWith: anUndefinedObject 
	self shouldBeImplemented.! !

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 21:32:33'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom firstRoomPosition secondRoom secondRoomPosition open'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'state' stamp: 'BT 12/17/2020 21:32:31' prior: 50895156!
closeWith: aKey
	open := false.. 
	! !
!Door methodsFor: 'testing' stamp: 'BT 12/17/2020 21:32:56'!
isOpen
	self shouldBeImplemented.! !
!Door methodsFor: 'testing' stamp: 'BT 12/17/2020 21:33:04' prior: 50895175!
isOpen
	^ open.! !

!testRun: #DoorTest #test14DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt stamp: 'BT 12/17/2020 21:33:24'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 21:33:33'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 21:33:33'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 21:33:33'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 21:33:33'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 21:33:33'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 21:33:33'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 21:33:33'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 21:33:33'!
PASSED!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:33:33'!
PASSED!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:33:33'!
PASSED!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:33:33'!
PASSED!

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:33:33'!
PASSED!

!testRun: #DoorTest #test13DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:33:33'!
PASSED!

!testRun: #DoorTest #test14DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt stamp: 'BT 12/17/2020 21:33:33'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 21:33:35'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 21:33:35'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 21:33:35'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 21:33:35'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 21:33:35'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 21:33:35'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 21:33:35'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 21:33:35'!
PASSED!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:33:35'!
PASSED!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:33:35'!
PASSED!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:33:35'!
PASSED!

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:33:35'!
PASSED!

!testRun: #DoorTest #test13DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:33:35'!
PASSED!

!testRun: #DoorTest #test14DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt stamp: 'BT 12/17/2020 21:33:35'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #DoorTest #test13DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #DoorTest #test14DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'BT 12/17/2020 21:33:36'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'BT 12/17/2020 21:33:36'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:34:32'!
test15DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt
	| positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom aDoor |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpackWithFirstKey at: 4@5 heading: #North in: aFirstRoom.
	
	playableCharacter closeUsing: defaultKey.
	
	self deny: aDoor isOpen.
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:35:39'!
test16DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt
	| positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom aDoor |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpackWithFirstKey at: 4@5 heading: #North in: aFirstRoom.
	
	playableCharacter closeUsing: defaultKey.
	
	self deny: aDoor isOpen.
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:38:11'!
closedDoorWIthDefaultKey
	| positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom aDoor |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpackWithFirstKey at: 4@5 heading: #North in: aFirstRoom.
	
	playableCharacter closeUsing: defaultKey.
	
	^ aDoor 
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:38:29' prior: 50895532!
test16DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt
	| positionDoorAtFirstRoom positionDoorAtSecondRoom aDoor |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	
	aDoor := self closedDoorWIthDefaultKey.
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:39:15'!
test16PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor |
	aDoor := self closedDoorWIthDefaultKey.
	! !

!methodRemoval: DoorTest #test16DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt stamp: 'BT 12/17/2020 21:39:32'!
test16DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt
	| positionDoorAtFirstRoom positionDoorAtSecondRoom aDoor |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	
	aDoor := self closedDoorWIthDefaultKey.
	!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:39:53' prior: 50895579!
test16PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor playableCharacter |
	aDoor := self closedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpackWithFirstKey at: 4@5 heading: #North in: aFirstRoom.
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:40:06' prior: 50895596!
test16PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor playableCharacter |
	aDoor := self closedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpackWithFirstKey at: 4@5 heading: #North in: aFirstRoom.
	
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:40:41' prior: 50895607!
test16PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor playableCharacter |
	aDoor := self closedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Pepe' using: self defaultBackpackWithFirstKey at: 4@5 heading: #North in: aFirstRoom.
	

	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:42:27' prior: 50895551!
closedDoorWIthDefaultKey
	| positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom aDoor |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpackWithFirstKey at: 4@5 heading: #North in: aFirstRoom.
	
	playableCharacter closeUsing: defaultKey.
	
	playableCharacter moveBackward.
	
	^ aDoor 
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:42:47' prior: 50895618!
test16PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor playableCharacter |
	aDoor := self closedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Pepe' using: self defaultBackpack at: 4@5 heading: #North in: aFirstRoom.
	

	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:43:54' prior: 50895648!
test16PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor playableCharacter |
	aDoor := self closedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Pepe' using: self defaultBackpack at: 5@5 heading: #North in: aSecondRoom.
	

	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:44:26' prior: 50895659!
test16PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor playableCharacter |
	aDoor := self closedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Pepe' using: self defaultBackpack at: 5@5 heading: #North in: aSecondRoom.
	
	self should: []
	raise: Error  
	withMessageText: '' 

	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:45:08' prior: 50895670!
test16PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor playableCharacter |
	aDoor := self closedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Pepe' using: self defaultBackpack at: 5@5 heading: #North in: aSecondRoom.
	
	self should: [playableCharacter open]
	raise: Error  
	withMessageText: '' 

	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:45:38'!
defaultClosedDoorWIthDefaultKey
	| positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom aDoor |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpackWithFirstKey at: 4@5 heading: #North in: aFirstRoom.
	
	playableCharacter closeUsing: defaultKey.
	
	playableCharacter moveBackward.
	
	^ aDoor 
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'BT 12/17/2020 21:45:38' prior: 50895683!
test16PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor playableCharacter |
	aDoor := self defaultClosedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Pepe' using: self defaultBackpack at: 5@5 heading: #North in: aSecondRoom.
	
	self should: [playableCharacter open]
	raise: Error  
	withMessageText: '' 

	! !

!methodRemoval: DoorTest #closedDoorWIthDefaultKey stamp: 'BT 12/17/2020 21:45:38'!
closedDoorWIthDefaultKey
	| positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom aDoor |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpackWithFirstKey at: 4@5 heading: #North in: aFirstRoom.
	
	playableCharacter closeUsing: defaultKey.
	
	playableCharacter moveBackward.
	
	^ aDoor 
	!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:46:13'!
inFrontOfDefaultClosedDoor

	^ 5@5! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:46:13' prior: 50895716!
test16PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor playableCharacter |
	aDoor := self defaultClosedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Pepe' using: self defaultBackpack at: self inFrontOfDefaultClosedDoor heading: #North in: aSecondRoom.
	
	self should: [playableCharacter open]
	raise: Error  
	withMessageText: '' 

	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:46:25' prior: 50895752!
test16PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor playableCharacter |
	aDoor := self defaultClosedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Pepe' using: self defaultBackpack at: self inFrontOfDefaultClosedDoor heading: #North in: aSecondRoom.
	
	self should: [playableCharacter open]
	raise: Error  
	withMessageText: '' 
	
	

	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:46:53' prior: 50895766!
test16PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor playableCharacter |
	aDoor := self defaultClosedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Pepe' using: self defaultBackpack at: self inFrontOfDefaultClosedDoor heading: #North in: aSecondRoom.
	
	self should: [playableCharacter open]
	raise: Error  
	withMessageText: ''.
	
	self deny: aDoor isOpen.

	! !
!PlayableCharacter methodsFor: 'open' stamp: 'BT 12/17/2020 21:47:20'!
open
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'open' stamp: 'BT 12/17/2020 21:48:25' prior: 50895796!
open
	(room at: self forwardPosition) openDoorBy: self.! !
!Door methodsFor: 'open' stamp: 'BT 12/17/2020 21:48:44'!
openDoorBy: aPlayableCharacter 
	self shouldBeImplemented.! !
!Door methodsFor: 'open' stamp: 'BT 12/17/2020 21:49:18' prior: 50895804!
openDoorBy: aPlayableCharacter 
	^ self error: self class cannotOpenDoorErrorMessage.! !
!Door class methodsFor: 'error messages' stamp: 'BT 12/17/2020 21:49:33'!
cannotOpenDoorErrorMessage
	self shouldBeImplemented.! !
!Door class methodsFor: 'error messages' stamp: 'BT 12/17/2020 21:49:44' prior: 50895815!
cannotOpenDoorErrorMessage
	^ 'cannot open door'! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:50:02' prior: 50895781!
test16PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor playableCharacter |
	aDoor := self defaultClosedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Pepe' using: self defaultBackpack at: self inFrontOfDefaultClosedDoor heading: #North in: aSecondRoom.
	
	self should: [playableCharacter open]
	raise: Error  
	withMessageText: Door cannotOpenDoorErrorMessage.
	
	self deny: aDoor isOpen.

	! !

!testRun: #DoorTest #test16PlayableCharacterCannnotOpenDoorIfDontHaveKey stamp: 'BT 12/17/2020 21:50:05'!
PASSED!

!testRun: #DoorTest #test15DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt stamp: 'BT 12/17/2020 21:50:08'!
PASSED!

!methodRemoval: DoorTest #test14DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt stamp: 'BT 12/17/2020 21:50:16'!
test14DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt
	| positionDoorAtFirstRoom playableCharacter positionDoorAtSecondRoom aDoor |
	positionDoorAtFirstRoom := 4@6.
	positionDoorAtSecondRoom := 5@6.
	
	aDoor := Door between: aFirstRoom at: positionDoorAtFirstRoom and: aSecondRoom at: positionDoorAtSecondRoom.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpackWithFirstKey at: 4@5 heading: #North in: aFirstRoom.
	
	playableCharacter closeUsing: defaultKey.
	
	self deny: aDoor isOpen.
	!

!testRun: #DoorTest #test13DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:50:19'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 21:50:23'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 21:50:23'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 21:50:23'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 21:50:23'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 21:50:23'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 21:50:23'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 21:50:23'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 21:50:23'!
PASSED!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:50:23'!
PASSED!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:50:23'!
PASSED!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:50:23'!
PASSED!

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:50:23'!
PASSED!

!testRun: #DoorTest #test13DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:50:23'!
PASSED!

!testRun: #DoorTest #test15DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt stamp: 'BT 12/17/2020 21:50:23'!
PASSED!

!testRun: #DoorTest #test16PlayableCharacterCannnotOpenDoorIfDontHaveKey stamp: 'BT 12/17/2020 21:50:23'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #DoorTest #test13DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #DoorTest #test15DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #DoorTest #test16PlayableCharacterCannnotOpenDoorIfDontHaveKey stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'BT 12/17/2020 21:50:25'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'BT 12/17/2020 21:50:25'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:51:12'!
test17PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor playableCharacter |
	aDoor := self defaultClosedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Pepe' using: self defaultBackpack at: self inFrontOfDefaultClosedDoor heading: #North in: aSecondRoom.
	
	self should: [playableCharacter open]
	raise: Error  
	withMessageText: Door cannotOpenDoorErrorMessage.
	
	self deny: aDoor isOpen.

	! !

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'BT 12/17/2020 21:51:55'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'aPaper paper aFirstRoom aSecondRoom positionFirstRoom positionSecondRoom defaultKey blackKey secondKey'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'defaults' stamp: 'BT 12/17/2020 21:51:53'!
defaultBackpackWithSecondKey
	^ self defaultBackpack add: secondKey.! !
!DoorTest methodsFor: 'setUp' stamp: 'BT 12/17/2020 21:52:07' prior: 50895117 overrides: 16927572!
setUp
	aPaper := PointsPortableObject named: 'paper' weighing: 1 worth: 1.
	aFirstRoom := Room ofWidth: 10 andHeight: 10.
	aSecondRoom := Room ofWidth: 10 andHeight: 10.
	
	positionFirstRoom := 0@0.
	positionSecondRoom := 1@1.
	blackKey := Key named: 'blackKey' weighing: 4.
	! !
!DoorTest methodsFor: 'setUp' stamp: 'BT 12/17/2020 21:52:27' prior: 50896187 overrides: 16927572!
setUp
	aPaper := PointsPortableObject named: 'paper' weighing: 1 worth: 1.
	aFirstRoom := Room ofWidth: 10 andHeight: 10.
	aSecondRoom := Room ofWidth: 10 andHeight: 10.
	
	positionFirstRoom := 0@0.
	positionSecondRoom := 1@1.
	blackKey := Key named: 'blackKey' weighing: 4.
	secondKey := Key named: 'orangeKey' weighing: 4.
	! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:52:58' prior: 50896154!
test17PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor playableCharacter |
	aDoor := self defaultClosedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Pepe' using: self defaultBackpackWithSecondKey at: self inFrontOfDefaultClosedDoor heading: #North in: aSecondRoom.
	
	self should: [playableCharacter open]
	raise: Error  
	withMessageText: Door cannotOpenDoorErrorMessage.
	
	self deny: aDoor isOpen.

	! !

!testRun: #DoorTest #test17PlayableCharacterCannnotOpenDoorIfDontHaveKey stamp: 'BT 12/17/2020 21:53:00'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 21:53:00'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 21:53:00'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 21:53:00'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 21:53:00'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 21:53:00'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 21:53:00'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 21:53:00'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 21:53:00'!
PASSED!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:53:00'!
PASSED!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:53:00'!
PASSED!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:53:00'!
PASSED!

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:53:00'!
PASSED!

!testRun: #DoorTest #test13DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:53:00'!
PASSED!

!testRun: #DoorTest #test15DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt stamp: 'BT 12/17/2020 21:53:00'!
PASSED!

!testRun: #DoorTest #test16PlayableCharacterCannnotOpenDoorIfDontHaveKey stamp: 'BT 12/17/2020 21:53:00'!
PASSED!

!testRun: #DoorTest #test17PlayableCharacterCannnotOpenDoorIfDontHaveKey stamp: 'BT 12/17/2020 21:53:00'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:53:13' prior: 50896212!
test17PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor playableCharacter |
	aDoor := self defaultClosedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Pepe' using: self defaultBackpackWithSecondKey at: self inFrontOfDefaultClosedDoor heading: #North in: aSecondRoom.
	
	self should: [playableCharacter open]
	raise: Error  
	withMessageText: Door incorrectKeyErrorMessage.
	
	self deny: aDoor isOpen.

	! !
!Door class methodsFor: 'error messages' stamp: 'BT 12/17/2020 21:53:29'!
incorrectKeyErrorMessage
	self shouldBeImplemented.! !
!Door class methodsFor: 'error messages' stamp: 'BT 12/17/2020 21:53:39' prior: 50896308!
incorrectKeyErrorMessage
	^ 'incorrect key used'! !
!Door methodsFor: 'open' stamp: 'BT 12/17/2020 21:54:32' prior: 50895809!
openDoorBy: aPlayableCharacter 
	
	^ self error: self class cannotOpenDoorErrorMessage.! !
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:56:34' prior: 50896292!
test17PlayableCharacterCannnotOpenDoorIfDontHaveKey
	
	| aDoor playableCharacter |
	aDoor := self defaultClosedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Pepe' using: self defaultBackpackWithSecondKey at: self inFrontOfDefaultClosedDoor heading: #North in: aSecondRoom.
	
	"self should: [playableCharacter open]
	raise: Error  
	withMessageText: Door incorrectKeyErrorMessage."
	
	self deny: aDoor isOpen.


	! !

!testRun: #DoorTest #test17PlayableCharacterCannnotOpenDoorIfDontHaveKey stamp: 'BT 12/17/2020 21:56:39'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'BT 12/17/2020 21:56:50' prior: 50896323!
test17PlayableCharacterCannnotOpenDoorIfDontHaveKey
	"este test no lo llegue a hacer"
	| aDoor playableCharacter |
	aDoor := self defaultClosedDoorWIthDefaultKey.
	
	playableCharacter := PlayableCharacter named: 'Pepe' using: self defaultBackpackWithSecondKey at: self inFrontOfDefaultClosedDoor heading: #North in: aSecondRoom.
	
	"self should: [playableCharacter open]
	raise: Error  
	withMessageText: Door incorrectKeyErrorMessage."
	
	self deny: aDoor isOpen.


	! !

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 21:56:55'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 21:56:55'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 21:56:55'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 21:56:55'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 21:56:55'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 21:56:55'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 21:56:55'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 21:56:55'!
PASSED!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:56:55'!
PASSED!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:56:55'!
PASSED!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:56:55'!
PASSED!

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:56:55'!
PASSED!

!testRun: #DoorTest #test13DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:56:55'!
PASSED!

!testRun: #DoorTest #test15DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt stamp: 'BT 12/17/2020 21:56:55'!
PASSED!

!testRun: #DoorTest #test16PlayableCharacterCannnotOpenDoorIfDontHaveKey stamp: 'BT 12/17/2020 21:56:55'!
PASSED!

!testRun: #DoorTest #test17PlayableCharacterCannnotOpenDoorIfDontHaveKey stamp: 'BT 12/17/2020 21:56:55'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 21:56:57'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 21:56:57'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 21:56:57'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 21:56:57'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 21:56:57'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 21:56:57'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 21:56:57'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 21:56:57'!
PASSED!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:56:57'!
PASSED!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:56:57'!
PASSED!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:56:57'!
PASSED!

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:56:57'!
PASSED!

!testRun: #DoorTest #test13DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:56:57'!
PASSED!

!testRun: #DoorTest #test15DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt stamp: 'BT 12/17/2020 21:56:57'!
PASSED!

!testRun: #DoorTest #test16PlayableCharacterCannnotOpenDoorIfDontHaveKey stamp: 'BT 12/17/2020 21:56:57'!
PASSED!

!testRun: #DoorTest #test17PlayableCharacterCannnotOpenDoorIfDontHaveKey stamp: 'BT 12/17/2020 21:56:57'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #DoorTest #test01CannotCreateDoorWIthInvalidPositionAtSecondRoom stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #DoorTest #test02CannotCreateDoorWIthInvalidPositionAtFirstRoom stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #DoorTest #test03CannotCreateDoorAtAnOccupiedPositionInFirstRoom stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #DoorTest #test04CannotCreateDoorAtAnOccupiedPositionInSecondRoom stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #DoorTest #test05CreatedDoorOccupesPositionsCorrectly stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #DoorTest #test06CannotCreateADoorBetweenTheSameRoom stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #DoorTest #test07CannotPutADoorInANonPortableObject stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #DoorTest #test08DoorCannotBeTakenByAnyPlayableCharacter stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #DoorTest #test09DoorCannotTakePlayableCharacterOutsideTheSecondRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #DoorTest #test10DoorCannotTakePlayableCharacterOutsideTheFirstRoomWhenOpenedDoor stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #DoorTest #test11DoorTakePlayableCharacterToFirstRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #DoorTest #test12DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #DoorTest #test13DoorTakePlayableCharacterToSecondRoomCorrectlyWhenOpenedDoorIsUsed stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #DoorTest #test15DoorIsClosedWhenPlayableCharacterHaveAKeyToUseOnIt stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #DoorTest #test16PlayableCharacterCannnotOpenDoorIfDontHaveKey stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #DoorTest #test17PlayableCharacterCannnotOpenDoorIfDontHaveKey stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'BT 12/17/2020 21:56:59'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'BT 12/17/2020 21:56:59'!
PASSED!