----End fileIn of C:\Users\Mati\Downloads\ISW1-2020-2C-Recuperatorio-2doParcial.st----!

----STARTUP---- (16 December 2020 18:27:27) as C:\Users\Mati\Desktop\facu\IS1\windows64\CuisUniversity-4365.image!


!classRemoval: #PointsPortableObject stamp: 'MG 12/16/2020 18:27:30'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'MG 12/16/2020 18:27:30'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PortableObject stamp: 'MG 12/16/2020 18:27:30'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NonPortableObject stamp: 'MG 12/16/2020 18:27:31'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #StageObject stamp: 'MG 12/16/2020 18:27:31'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Room stamp: 'MG 12/16/2020 18:27:31'!
Object subclass: #Room
	instanceVariableNames: 'width height occupiedCells playerPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'MG 12/16/2020 18:27:32'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'MG 12/16/2020 18:27:32'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Backpack stamp: 'MG 12/16/2020 18:27:33'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #RoomTest stamp: 'MG 12/16/2020 18:27:33'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'MG 12/16/2020 18:27:33'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #BackpackTest stamp: 'MG 12/16/2020 18:27:34'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #BackpackTest category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:34'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #BackpackTest category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:34'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/18/2020 16:29:03'!
assertShouldAddAll: portableObjects withPoints: expectedTotalPoints

	| aBackpack |
	
	aBackpack := Backpack containingUpTo: self backpackWeight limitingPointsTo: 100.

	portableObjects do: [ :aPortableObject | aBackpack add: aPortableObject ].
	
	self assert: aBackpack size equals: portableObjects size.
	self assert: aBackpack totalWeight equals: (portableObjects sum: [ :aPortableObject | aPortableObject weight ]).
	self assert: aBackpack totalPoints equals: expectedTotalPoints.
! !
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/18/2020 16:28:32'!
assertShouldNotAddPortableObjectIfWeightExceeded: aPortableObject

	| aBackpack |
	aBackpack := Backpack containingUpTo: self backpackWeight limitingPointsTo: 100.

	self
		should: [ aBackpack add: aPortableObject ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert: aBackpack isEmpty. 
! !
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/18/2020 16:28:32'!
backpackWeight

	^ 42! !
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/18/2020 16:28:41'!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded

	self assertShouldNotAddPortableObjectIfWeightExceeded: 
		(NoPointsPortableObject named: 'help-wanted sign' weighing: self backpackWeight + 1)
! !
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/18/2020 16:28:47'!
test08ShouldNotAddPointsPortableObjectIfWeightExceeded

	self assertShouldNotAddPortableObjectIfWeightExceeded: 
		(PointsPortableObject named: 'left-handed hammer' weighing: self backpackWeight + 6 worth: 5) ! !
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/18/2020 16:26:42'!
test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity

	self 
		assertShouldAddAll: self twoPortableObjects
		withPoints: 5.
! !
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/18/2020 16:27:27'!
test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity

	self 
		assertShouldAddAll:  self twoPortableObjects, {(PointsPortableObject named: 'letter' weighing: 1 worth: 5)}
		withPoints: 10.
! !
!BackpackTest methodsFor: 'adding' stamp: 'HAW 10/18/2020 16:27:39'!
twoPortableObjects

	^ {
		(PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5).
		(NoPointsPortableObject named: 'help-wanted sign' weighing: 1) }! !
!BackpackTest methodsFor: 'creating' stamp: 'HAW 10/14/2020 14:31:04'!
test01CanNotCreateBackpackWithZeroMaxWeight

	self
		should: [ Backpack containingUpTo: 0 limitingPointsTo: 100 ]
		raise: Error
		withMessageText: Backpack invalidWeightCapacityErrorDescription.
! !
!BackpackTest methodsFor: 'creating' stamp: 'HAW 10/14/2020 14:31:04'!
test02CanNotCreateBackpackWithNegativeMaxWeight

	self
		should: [ Backpack containingUpTo: -1 limitingPointsTo: 100 ]
		raise: Error
		withMessageText: Backpack invalidWeightCapacityErrorDescription.! !
!BackpackTest methodsFor: 'creating' stamp: 'HAW 10/14/2020 14:31:04'!
test03CanNotCreateBackpackWithZeroMaxPoints

	self
		should: [ Backpack containingUpTo: 10 limitingPointsTo: 0 ]
		raise: Error
		withMessageText: Backpack invalidPointsCapacityErrorDescription.
! !
!BackpackTest methodsFor: 'creating' stamp: 'HAW 10/14/2020 14:31:04'!
test04CanNotCreateBackpackWithNegativeMaxPoints

	self
		should: [ Backpack containingUpTo: 10 limitingPointsTo: -1 ]
		raise: Error
		withMessageText: Backpack invalidPointsCapacityErrorDescription.! !
!BackpackTest methodsFor: 'creating' stamp: 'HAW 10/14/2020 14:31:04'!
test05CanNotCreateBackpackWithNoIntegerMaxWeight

	self
		should: [ Backpack containingUpTo: 1.0 limitingPointsTo: 100 ]
		raise: Error
		withMessageText: Backpack weightCapacityMustBeIntegerErrorDescription.
! !
!BackpackTest methodsFor: 'creating' stamp: 'HAW 10/14/2020 14:31:04'!
test06CanNotCreateBackpackWithNoIntegerMaxPoints

	self
		should: [ Backpack containingUpTo: 100 limitingPointsTo: 1.0 ]
		raise: Error
		withMessageText: Backpack pointsCapacityMustBeIntegerErrorDescription.
! !
!BackpackTest methodsFor: 'accessing' stamp: 'HAW 10/14/2020 14:49:20'!
test11ShouldAddZeroWeightWhenEmpty

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	self assert: aBackpack totalWeight equals: 0.
	self assert: aBackpack isEmpty
! !
!BackpackTest methodsFor: 'accessing' stamp: 'HAW 10/14/2020 14:35:57'!
test12ShouldAddWeightWhenAddingPortableObjects

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'HAW 10/14/2020 14:49:31'!
test13ShouldAddZeroPointsWhenEmpty

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	self assert: aBackpack totalPoints equals: 0.
	self assert: aBackpack isEmpty.
! !
!BackpackTest methodsFor: 'accessing' stamp: 'HAW 10/14/2020 14:35:57'!
test14ShouldAddPointsWhenAddingPointsPortableObjects

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (PointsPortableObject named: 'car key' weighing: 10 worth: 20).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalPoints equals: 25.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'HAW 10/14/2020 14:35:57'!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	aBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalPoints equals: 5.

! !

!classDefinition: #PlayableCharacterTest category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:35'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #PlayableCharacterTest category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:35'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:05:24'!
paper

	^ NoPointsPortableObject named: 'Paper' weighing: 100! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:00:16'!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: self defaultRoom .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:00:16'!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: self defaultRoom .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:00:16'!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: self defaultRoom .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:00:16'!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: self defaultRoom .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:00:16'!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East in: self defaultRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:00:16'!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South in: self defaultRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:00:16'!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: self defaultRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:00:16'!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X in: self defaultRoom ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:00:16'!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: self defaultRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:05:24'!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: self defaultRoom .
	paper := self paper.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:43:14'!
test11_CanNotCreateCharacterWithInvalidPosition

	| room |

	room := self defaultRoom.
	self 
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@-1 heading: #West in: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room invalidPositionErrorDescription equals: anError messageText.
			self assert: room isEmpty ]! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:09:38'!
test12_CanNotCreateCharacterOnNotEmptyPosition

	| room paperPosition paper |

	room := self defaultRoom.
	paperPosition := 1@1.
	paper := self paper.
	room at: paperPosition put: paper.
	
	self 
		should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: paperPosition heading: #West in: room ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room positionIsNotEmptyErrorDescription equals: anError messageText.
			self assert: paper equals: (room at: paperPosition)]! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:16:13'!
test13_moveForwardModifiesPositionInRoom

	| room  player |

	room := self defaultRoom.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #West in: room.
	player moveForward.
	
	self assert: (player isAt: 0@1 heading: #West).
	self assert: player equals: (room at: 0@1).
	self assert: (room isEmptyAt: 1@1).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:17:08'!
test14_moveBackwardModifiesPositionInRoom

	| room  player |

	room := self defaultRoom.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #West in: room.
	player moveBackward.
	
	self assert: (player isAt: 2@1 heading: #West).
	self assert: player equals: (room at: 2@1).
	self assert: (room isEmptyAt: 1@1).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:43:14'!
test15_canNotMoveToInvalidPosition

	| room  player |

	room := self defaultRoom.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #West in: room.
	
	self 
		should: [ player moveForward ]
		raise: Error 
		withExceptionDo: [:anError |
			self assert: Room invalidPositionErrorDescription equals: anError messageText.
			self assert: player equals: (room at: 0@1). ]
			
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:44:47'!
test16_canNotTakeFromAnEmptyOrInvalidPosition

	| room  player |

	room := self defaultRoom.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room objectNotInRoomErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty ]
			
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:46:11'!
test17_canTakeAPortableObject

	| room  player paper |

	room := self defaultRoom.
	paper := self paper.
	room at: 0@1 put: paper.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player take.
	
	self assert: (room isEmptyAt: 0@1).
	self assert: (player backpackIncludes: paper).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:50:54'!
test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack

	| room  player box |

	room := self defaultRoom.
	box := NonPortableObject named: 'Box'.
	room at: 0@1 put: box.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player take.
	
	self assert: box equals: (room at: 0@1).
	self assert: player backpackIsEmpty.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:56:03'!
test19_portableInNonPortableObjectIsAddedToBackpack

	| room  player box paper |

	room := self defaultRoom.
	paper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper }.
	room at: 0@1 put: box.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player take.
	
	self assert: box equals: (room at: 0@1).
	self assert: box isEmpty.
	self assert: (player backpackIncludes: paper).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 19:19:55'!
test20_takeFromNonPortableObjectsIsRecursive

	| room  player box paper anotherPaper |

	room := self defaultRoom.
	paper := self paper.
	anotherPaper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper. anotherPaper }.
	room at: 0@1 put: box.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
	
	self assert: box equals: (room at: 0@1).
	self deny: box isEmpty.
	self assert: (box includes: anotherPaper).
	self assert: (player backpackIncludes: paper).
	self assert: 1 equals: player backpackSize! !
!PlayableCharacterTest methodsFor: 'defaults' stamp: 'HAW 12/9/2020 13:53:29'!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !
!PlayableCharacterTest methodsFor: 'defaults' stamp: 'HAW 12/14/2020 18:02:57'!
defaultRoom
	
	^Room ofWidth: 10 andHeight: 10! !

!classDefinition: #RoomTest category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:37'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #RoomTest category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:37'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!RoomTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 17:20:02'!
test01_WidthMustBeStrictlyPositive

	self assertInvalidSizeWith: 0 and: 1
	! !
!RoomTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 17:20:13'!
test02_HeightMustBeStrictlyPositive

	self assertInvalidSizeWith: 1 and: 0
	! !
!RoomTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 17:20:25'!
test03_WidthMustBeInteger

	self assertInvalidSizeWith: 1.1 and: 1
	! !
!RoomTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 17:20:36'!
test04_HeightMustBeInteger

	self assertInvalidSizeWith: 1 and: 1.1
		! !
!RoomTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 17:39:43'!
test05_CanNotPutAStageObjectWithXLessThanCero

	self assertCanNotPutAt: -1@1
		! !
!RoomTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 17:39:49'!
test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth

	self assertCanNotPutAt: 10@1! !
!RoomTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 17:39:56'!
test07_CanNotPutAStageObjectWithANonIntegerX

	self assertCanNotPutAt: 1.1@1! !
!RoomTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 17:40:04'!
test08_CanNotPutAStageObjectWithYLessThanCero

	self assertCanNotPutAt: 1@-1
		! !
!RoomTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 17:40:25'!
test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight

	self assertCanNotPutAt: 1@10! !
!RoomTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 17:41:13'!
test10_CanNotPutAStageObjectWithANonIntegerY

	self assertCanNotPutAt: 1@1.1! !
!RoomTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 17:46:46'!
test11_StageObjectsAreKeept

	| room |
	
	room := Room ofWidth: 10 andHeight: 10.
	
	room at: 0@0 put: self paper.
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 18:30:22'!
test12_canNotGetPositionOfNonPutObject

	| room |
	
	room := Room ofWidth: 10 andHeight: 10.
	self
		should: [ room positionOf: self paper ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room objectNotInRoomErrorDescription! !
!RoomTest methodsFor: 'test objects' stamp: 'HAW 12/14/2020 17:36:15'!
paper

	^ PointsPortableObject named: 'paper' weighing: 1 worth: 1! !
!RoomTest methodsFor: 'assertions' stamp: 'HAW 12/14/2020 18:43:14'!
assertCanNotPutAt: aPosition

	| room width |
	
	width := 10.
	room := Room ofWidth: width andHeight: 10.
	
	self 
		should: [ room at: aPosition put: self paper ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Room invalidPositionErrorDescription equals: anError messageText.
			self assert: room isEmpty ].! !
!RoomTest methodsFor: 'assertions' stamp: 'HAW 12/14/2020 17:19:50'!
assertInvalidSizeWith: aWitdh and: aHeight

	self 
		should: [ Room ofWidth: aWitdh andHeight: aHeight ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidSizeErrorDescription! !

!classDefinition: #Backpack category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:37'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Backpack category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:37'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Backpack methodsFor: 'exceptions' stamp: 'FRT 10/8/2020 18:02:29'!
signalMaxPointsExceeded

	self error: self class maxPointsExceededErrorDescription ! !
!Backpack methodsFor: 'exceptions' stamp: 'FRT 10/8/2020 18:02:47'!
signalMaxWeightExceeded

	self error: self class maxWeightExceededErrorDescription ! !
!Backpack methodsFor: 'initialization' stamp: 'HAW 10/14/2020 14:31:56'!
initializeContainingUpTo: aWeightCapacity limitingPointsTo: pointsCapacity

	weightCapacity := aWeightCapacity.
	gamePointsCapacity := pointsCapacity.
	
	container := OrderedCollection new.
	
	
	! !
!Backpack methodsFor: 'accessing' stamp: 'FRT 10/11/2020 19:14:47' overrides: 16880927!
size

	^ container size.! !
!Backpack methodsFor: 'accessing' stamp: 'HAW 10/18/2020 12:20:52'!
totalPoints
		
	^(container select: [ :portableObject | portableObject doesItAddPoints ])	
		sum: [ :portableObject | portableObject points ]
		ifEmpty: [ 0 ]! !
!Backpack methodsFor: 'accessing' stamp: 'HAW 10/18/2020 12:20:20'!
totalWeight
	
	^container 
		sum: [ :portableObject | portableObject weight ]
		ifEmpty: [ 0 ]
		! !
!Backpack methodsFor: 'assertions' stamp: 'FRT 10/12/2020 14:12:36'!
assertPointsAdding: aPointsPortableObject

	(self totalPoints + aPointsPortableObject points) > gamePointsCapacity ifTrue: [ self signalMaxPointsExceeded ]! !
!Backpack methodsFor: 'assertions' stamp: 'FRT 10/15/2020 12:22:34'!
assertWeightAdding: aPortableObject tolerating: aThreshold

	(self totalWeight + aPortableObject weight - weightCapacity) > aThreshold ifTrue: [ self signalMaxWeightExceeded ]! !
!Backpack methodsFor: 'adding' stamp: 'HAW 10/18/2020 12:28:24'!
add: aPortableObject
	
	aPortableObject assertCanAddTo: self.
	
	container add: aPortableObject.
	! !
!Backpack methodsFor: 'testing' stamp: 'HAW 12/9/2020 19:44:17'!
includes: aPortableObject 
	
	^container includes: aPortableObject ! !
!Backpack methodsFor: 'testing' stamp: 'FRT 10/11/2020 18:38:38'!
isEmpty

	^ container isEmpty.! !
!Backpack methodsFor: 'adding - private' stamp: 'HAW 10/18/2020 12:28:48'!
assertCanAddNoPointsPortableObject: aNoPointsPortableObject 
	
	self assertWeightAdding: aNoPointsPortableObject tolerating: 0.
	! !
!Backpack methodsFor: 'adding - private' stamp: 'HAW 10/18/2020 12:29:07'!
assertCanAddPointPortableObject: aPointsPortableObject 
	
	self assertWeightAdding: aPointsPortableObject tolerating: 5.
	self assertPointsAdding: aPointsPortableObject.
	! !

!classDefinition: 'Backpack class' category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:38'!
Backpack class
	instanceVariableNames: ''!

!classDefinition: 'Backpack class' category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:38'!
Backpack class
	instanceVariableNames: ''!
!Backpack class methodsFor: 'error messages' stamp: 'FRT 10/11/2020 18:27:33'!
invalidPointsCapacityErrorDescription

	^ 'Points capacity must be positive'! !
!Backpack class methodsFor: 'error messages' stamp: 'FRT 10/11/2020 18:21:04'!
invalidWeightCapacityErrorDescription

	^ 'Weight capacity must be positive'! !
!Backpack class methodsFor: 'error messages' stamp: 'FRT 10/8/2020 17:36:29'!
maxPointsExceededErrorDescription

	^ 'Maximum points has been exceeded'! !
!Backpack class methodsFor: 'error messages' stamp: 'FRT 10/8/2020 17:36:17'!
maxWeightExceededErrorDescription

	^ 'Maximum weight has been exceeded'! !
!Backpack class methodsFor: 'error messages' stamp: 'FRT 10/8/2020 17:43:00'!
pointsCapacityMustBeIntegerErrorDescription

	^ 'Points capacity must be integer'! !
!Backpack class methodsFor: 'error messages' stamp: 'FRT 10/8/2020 17:42:48'!
weightCapacityMustBeIntegerErrorDescription

	^ 'Weight capacity must be integer'! !
!Backpack class methodsFor: 'exceptions' stamp: 'FRT 10/11/2020 18:27:16'!
signalInvalidPointsCapacity

	self error: self invalidPointsCapacityErrorDescription 
! !
!Backpack class methodsFor: 'exceptions' stamp: 'FRT 10/11/2020 18:21:51'!
signalInvalidWeightCapacity

	self error: self invalidWeightCapacityErrorDescription 
! !
!Backpack class methodsFor: 'exceptions' stamp: 'FRT 10/8/2020 17:41:06'!
signalPointsCapacityMustBeInteger

	self error: self pointsCapacityMustBeIntegerErrorDescription
! !
!Backpack class methodsFor: 'exceptions' stamp: 'FRT 10/8/2020 17:40:47'!
signalWeightCapacityMustBeInteger

	self error: self weightCapacityMustBeIntegerErrorDescription
! !
!Backpack class methodsFor: 'instance creation' stamp: 'HAW 10/14/2020 14:31:56'!
containingUpTo: aWeightCapacity limitingPointsTo: pointsCapacity

	aWeightCapacity strictlyPositive  ifFalse: [ self signalInvalidWeightCapacity ].
	pointsCapacity strictlyPositive ifFalse: [ self signalInvalidPointsCapacity ].
	
	aWeightCapacity isInteger ifFalse: [ self signalWeightCapacityMustBeInteger ].
	pointsCapacity isInteger ifFalse: [ self signalPointsCapacityMustBeInteger ].
	
	^ self new initializeContainingUpTo: aWeightCapacity limitingPointsTo: pointsCapacity.
! !

!classDefinition: #PlayableCharacter category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:40'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #PlayableCharacter category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:40'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'HAW 12/14/2020 18:27:11'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading in: aRoom  

	name := aName.
	backpack := aBackpack.
	heading := aMarsRoverHeading.
	room := aRoom.
	room at: aPosition put: self! !
!PlayableCharacter methodsFor: 'testing' stamp: 'HAW 12/14/2020 18:25:08'!
isAt: aPosition heading: aCardinalPoint

	^self position = aPosition and: [ heading cardinalPoint = aCardinalPoint ]! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HAW 12/14/2020 19:09:28'!
forwardPosition

	^ self position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HAW 12/14/2020 18:25:13'!
moveBackward
	
	self moveTo: self position - heading forwardPoint.
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HAW 12/14/2020 19:09:36'!
moveForward
	
	self moveTo: self forwardPosition ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HAW 12/14/2020 18:27:14'!
moveTo: aNewPosition
	
	room moveFrom: self position to: aNewPosition.
		! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HAW 12/14/2020 18:25:48'!
position

	^room positionOf: self! !
!PlayableCharacter methodsFor: 'rotating' stamp: 'HAW 10/11/2019 08:31:55'!
rotateLeft
	
	heading := heading leftHeading! !
!PlayableCharacter methodsFor: 'rotating' stamp: 'HAW 10/11/2019 08:32:04'!
rotateRight
	
	heading := heading rightHeading! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'HAW 12/14/2020 19:09:28'!
take
	
	| toTake |
	
	toTake := room at: self forwardPosition.
	toTake takenBy: self 
	! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'HAW 12/9/2020 19:28:57'!
take: aPortableObject

	backpack add: aPortableObject.! !
!PlayableCharacter methodsFor: 'taking - private' stamp: 'HAW 12/14/2020 18:58:05'!
takeNonPortableObject: aNonPortableObject 
	
	aNonPortableObject putAllTo: self! !
!PlayableCharacter methodsFor: 'taking - private' stamp: 'HAW 12/14/2020 19:09:51'!
takePortableObject: aPortableObject 
	
	self take: aPortableObject.
	room removeAt: self forwardPosition ! !
!PlayableCharacter methodsFor: 'backpack' stamp: 'HAW 12/9/2020 19:43:44'!
backpackIncludes: aPortableObject 
	
	^backpack includes: aPortableObject ! !
!PlayableCharacter methodsFor: 'backpack' stamp: 'HAW 12/14/2020 18:42:40'!
backpackIsEmpty
	
	^backpack isEmpty ! !
!PlayableCharacter methodsFor: 'backpack' stamp: 'HAW 12/14/2020 19:09:03'!
backpackSize
	
	^backpack size! !

!classDefinition: 'PlayableCharacter class' category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:41'!
PlayableCharacter class
	instanceVariableNames: 'headings'!

!classDefinition: 'PlayableCharacter class' category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:41'!
PlayableCharacter class
	instanceVariableNames: 'headings'!
!PlayableCharacter class methodsFor: 'heading' stamp: 'HAW 7/2/2018 16:28:16'!
headingFor: aCardinalPoint
	
	^headings at: aCardinalPoint ifAbsent: [ self error: self invalidCardinalPointErrorDescription ]! !
!PlayableCharacter class methodsFor: 'heading' stamp: 'HAW 7/2/2018 16:26:14'!
invalidCardinalPointErrorDescription
	
	^'Invalid cardinal point'! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'HAW 12/14/2020 18:01:51'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in: aRoom ! !
!PlayableCharacter class methodsFor: 'initialization' stamp: 'HAW 10/11/2019 08:37:25'!
forHeadingAt: aCardinalPoint leftIs: aLeftCardinalPoint rightIs: aRightCardinalPoint
	
	(headings at: aCardinalPoint) leftHeading: (headings at: aLeftCardinalPoint) rightHeading: (headings at: aRightCardinalPoint).
	! !
!PlayableCharacter class methodsFor: 'initialization' stamp: 'HAW 7/2/2018 15:27:41' overrides: 16883149!
initialize

	self initializeHeadings! !
!PlayableCharacter class methodsFor: 'initialization' stamp: 'HAW 12/9/2020 19:31:43'!
initializeHeadings

	headings := Dictionary new.
	
	(OrderedCollection 
		with: (PlayableCharacterHeading for: #North forwardWith: 0@1 )	
		with: (PlayableCharacterHeading for: #East forwardWith: 1@0 )
		with: (PlayableCharacterHeading for: #South forwardWith: 0@-1 )
		with: (PlayableCharacterHeading for: #West forwardWith: -1@0 ))
			do: [ :heading | headings at: heading cardinalPoint put: heading ].
	
	self 
		forHeadingAt: #North leftIs: #West rightIs: #East;
		forHeadingAt: #South leftIs: #East rightIs: #West;
		forHeadingAt: #East leftIs: #North rightIs: #South;
		forHeadingAt: #West leftIs: #South rightIs: #North.
	! !

!classDefinition: #PlayableCharacterHeading category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:41'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #PlayableCharacterHeading category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:41'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!PlayableCharacterHeading methodsFor: 'accessing' stamp: 'HAW 7/2/2018 15:29:44'!
cardinalPoint
	
	^cardinalPoint! !
!PlayableCharacterHeading methodsFor: 'accessing' stamp: 'HAW 7/2/2018 15:30:39'!
forwardPoint
	
	^forwardPoint! !
!PlayableCharacterHeading methodsFor: 'accessing' stamp: 'HAW 10/11/2019 08:31:33'!
leftHeading
	
	^leftHeading! !
!PlayableCharacterHeading methodsFor: 'accessing' stamp: 'HAW 10/11/2019 08:31:27'!
rightHeading
	
	^rightHeading! !
!PlayableCharacterHeading methodsFor: 'initialization' stamp: 'HAW 10/11/2019 08:27:25'!
initializeFor: aCardinalPoint forwardWith: aForwardPoint  
	
	cardinalPoint := aCardinalPoint.
	forwardPoint := aForwardPoint.
! !
!PlayableCharacterHeading methodsFor: 'initialization' stamp: 'HAW 10/11/2019 08:31:33'!
leftHeading: aLeftHeading rightHeading: aRightHeading
 
	leftHeading := aLeftHeading.
	rightHeading := aRightHeading ! !

!classDefinition: 'PlayableCharacterHeading class' category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:42'!
PlayableCharacterHeading class
	instanceVariableNames: ''!

!classDefinition: 'PlayableCharacterHeading class' category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:42'!
PlayableCharacterHeading class
	instanceVariableNames: ''!
!PlayableCharacterHeading class methodsFor: 'instance creation' stamp: 'HAW 10/11/2019 08:27:46'!
for: aCardinalPoint forwardWith: aForwardPoint  

	^self new initializeFor: aCardinalPoint forwardWith: aForwardPoint ! !

!classDefinition: #Room category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:42'!
Object subclass: #Room
	instanceVariableNames: 'width height contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Room category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:42'!
Object subclass: #Room
	instanceVariableNames: 'width height contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'HAW 12/14/2020 17:47:16'!
initializeOfWidth: aWidth andHeight: aHeight 
	
	width := aWidth.
	height := aHeight.
	contents := Dictionary new.! !
!Room methodsFor: 'contents' stamp: 'HAW 12/14/2020 18:42:28' overrides: 16880774!
at: aPosition

	^contents at: aPosition ifAbsent: [self error: self class objectNotInRoomErrorDescription ]! !
!Room methodsFor: 'contents' stamp: 'HAW 12/14/2020 18:07:24' overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aStageObject ! !
!Room methodsFor: 'contents' stamp: 'HAW 12/14/2020 18:23:18'!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !
!Room methodsFor: 'contents' stamp: 'HAW 12/14/2020 18:30:58'!
positionOf: anObject

	contents keysAndValuesDo: [ :aPosition :aPlacedObject |
		aPlacedObject = anObject ifTrue: [ ^aPosition  ]].
	
	self error: self class objectNotInRoomErrorDescription ! !
!Room methodsFor: 'contents' stamp: 'HAW 12/14/2020 18:47:43'!
removeAt: aPosition

	^contents removeKey: aPosition ! !
!Room methodsFor: 'assertions' stamp: 'HAW 12/14/2020 18:09:38'!
assertIsEmpty: aPosition

	^(self isEmptyAt: aPosition) ifFalse: [ self error: self class positionIsNotEmptyErrorDescription ]! !
!Room methodsFor: 'assertions' stamp: 'HAW 12/14/2020 18:43:14'!
assertPositionComponentIsValid: aPositionComponent withLimit: limit 

	^ (aPositionComponent < 0 or: [aPositionComponent >= limit or: [ aPositionComponent isInteger not]]) 
		ifTrue: [self error: self class invalidPositionErrorDescription ]! !
!Room methodsFor: 'assertions' stamp: 'HAW 12/14/2020 17:44:04'!
assertPositionIsValid: aPosition

	self assertPositionComponentIsValid: aPosition x withLimit: width.
	self assertPositionComponentIsValid: aPosition y withLimit: height.
	! !
!Room methodsFor: 'testing' stamp: 'HAW 12/14/2020 17:47:56'!
isEmpty
	
	^contents isEmpty ! !
!Room methodsFor: 'testing' stamp: 'HAW 12/14/2020 18:08:47'!
isEmptyAt: aPosition

	^ (contents includesKey: aPosition) not! !

!classDefinition: 'Room class' category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:43'!
Room class
	instanceVariableNames: ''!

!classDefinition: 'Room class' category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:43'!
Room class
	instanceVariableNames: ''!
!Room class methodsFor: 'error descriptions' stamp: 'HAW 12/14/2020 18:43:14'!
invalidPositionErrorDescription
	
	^'Invalid position'! !
!Room class methodsFor: 'error descriptions' stamp: 'HAW 12/14/2020 17:16:22'!
invalidSizeErrorDescription
	
	^'Invalid size'! !
!Room class methodsFor: 'error descriptions' stamp: 'HAW 12/14/2020 18:30:38'!
objectNotInRoomErrorDescription
	
	^'Object not in room'! !
!Room class methodsFor: 'error descriptions' stamp: 'HAW 12/14/2020 18:09:38'!
positionIsNotEmptyErrorDescription
	
	^'Position not empty'! !
!Room class methodsFor: 'instance creation' stamp: 'HAW 12/14/2020 19:27:12'!
ofWidth: aWidth andHeight: aHeight 
	
	self assertIsValidWitdth: aWidth andHeight: aHeight .
	
	^self new initializeOfWidth: aWidth andHeight: aHeight ! !
!Room class methodsFor: 'assertions' stamp: 'HAW 12/14/2020 17:22:01'!
assertIsValidSizeComponent: aSizeComponent

	^ (aSizeComponent < 1 or: [aSizeComponent isInteger not ]) ifTrue: [self error: self invalidSizeErrorDescription ]! !
!Room class methodsFor: 'assertions' stamp: 'HAW 12/14/2020 19:27:12'!
assertIsValidWitdth: aWidth andHeight: aHeight

	self assertIsValidSizeComponent: aWidth.
	self assertIsValidSizeComponent: aHeight! !

!classDefinition: #StageObject category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:43'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #StageObject category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:43'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!StageObject methodsFor: 'taken' stamp: 'HAW 12/14/2020 19:30:06'!
putAllTo: aPlayableCharacter

	self subclassResponsibility 
	! !
!StageObject methodsFor: 'taken' stamp: 'HAW 12/14/2020 19:30:18'!
takenBy: aPlayableCharacter 

	self subclassResponsibility 
	! !

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:43'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:43'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'HAW 12/14/2020 19:00:02'!
initializeNamed: aName withAll: aCollectionOfStageObjects 
	
	name := aName.
	stageObjects := aCollectionOfStageObjects asOrderedCollection .! !
!NonPortableObject methodsFor: 'taken' stamp: 'HAW 12/14/2020 19:24:52' overrides: 50874458!
putAllTo: aPlayableCharacter 
	
	| toRemove |
	
	toRemove := OrderedCollection new.
	[ stageObjects do: [ :aStageObject | (aStageObject putAllTo: aPlayableCharacter) ifTrue: [ toRemove add: aStageObject ]]]
		ensure: [ stageObjects removeAll: toRemove ].
	
	^false! !
!NonPortableObject methodsFor: 'taken' stamp: 'HAW 12/14/2020 18:53:21' overrides: 50874463!
takenBy: aPlayableCharacter 
	
	aPlayableCharacter takeNonPortableObject: self! !
!NonPortableObject methodsFor: 'testing' stamp: 'HAW 12/14/2020 19:08:45'!
includes: aStageObject

	^stageObjects includes: aStageObject ! !
!NonPortableObject methodsFor: 'testing' stamp: 'HAW 12/14/2020 18:57:19'!
isEmpty
	
	^stageObjects isEmpty ! !

!classDefinition: 'NonPortableObject class' category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:44'!
NonPortableObject class
	instanceVariableNames: ''!

!classDefinition: 'NonPortableObject class' category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:44'!
NonPortableObject class
	instanceVariableNames: ''!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'HAW 12/14/2020 19:00:27'!
named: aName 
	
	^self named: aName withAll: #()! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'HAW 12/14/2020 18:56:40'!
named: aName withAll: aCollectionOfStageObjects 
	
	^self new initializeNamed: aName withAll: aCollectionOfStageObjects ! !

!classDefinition: #PortableObject category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:44'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #PortableObject category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:44'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!PortableObject methodsFor: 'testing' stamp: 'FRT 10/11/2020 17:54:20'!
doesItAddPoints

	self subclassResponsibility	! !
!PortableObject methodsFor: 'adding' stamp: 'HAW 10/18/2020 12:28:24'!
assertCanAddTo: aBackpack

	self subclassResponsibility	! !
!PortableObject methodsFor: 'accessing' stamp: 'FRT 10/11/2020 18:53:51'!
weight

	^ weight! !
!PortableObject methodsFor: 'taken' stamp: 'HAW 12/14/2020 19:15:12' overrides: 50874458!
putAllTo: aPlayableCharacter

	aPlayableCharacter take: self.
	^true! !
!PortableObject methodsFor: 'taken' stamp: 'HAW 12/14/2020 18:53:53' overrides: 50874463!
takenBy: aPlayableCharacter 
	
	aPlayableCharacter takePortableObject: self! !

!classDefinition: #NoPointsPortableObject category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:44'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #NoPointsPortableObject category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:44'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!NoPointsPortableObject methodsFor: 'initialization' stamp: 'HAW 10/14/2020 14:34:36'!
initializeNamed: aName weighing: aWeight
	
	name := aName.
	weight := aWeight.! !
!NoPointsPortableObject methodsFor: 'testing' stamp: 'FRT 10/11/2020 17:54:20' overrides: 50874563!
doesItAddPoints	

	^ false! !
!NoPointsPortableObject methodsFor: 'adding' stamp: 'HAW 10/18/2020 12:28:48' overrides: 50874567!
assertCanAddTo: aBackpack 
	
	^aBackpack assertCanAddNoPointsPortableObject: self! !

!classDefinition: 'NoPointsPortableObject class' category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:44'!
NoPointsPortableObject class
	instanceVariableNames: ''!

!classDefinition: 'NoPointsPortableObject class' category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:45'!
NoPointsPortableObject class
	instanceVariableNames: ''!
!NoPointsPortableObject class methodsFor: 'instance creation' stamp: 'HAW 10/14/2020 14:34:36'!
named: aName weighing: aWeight
	
	^ self new initializeNamed: aName weighing: aWeight. ! !

!classDefinition: #PointsPortableObject category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:45'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #PointsPortableObject category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:45'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!PointsPortableObject methodsFor: 'testing' stamp: 'FRT 10/11/2020 17:54:20' overrides: 50874563!
doesItAddPoints

	^ true! !
!PointsPortableObject methodsFor: 'initialization' stamp: 'HAW 10/14/2020 14:36:26'!
initializeNamed: aName weighing: aWeight worth: gamePoints
	
	name := aName.
	weight := aWeight.
	points := gamePoints.! !
!PointsPortableObject methodsFor: 'accessing' stamp: 'FRT 10/11/2020 19:06:57'!
points

	^ points! !
!PointsPortableObject methodsFor: 'adding' stamp: 'HAW 10/18/2020 12:29:07' overrides: 50874567!
assertCanAddTo: aBackpack 
	
	^aBackpack assertCanAddPointPortableObject: self! !

!classDefinition: 'PointsPortableObject class' category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:45'!
PointsPortableObject class
	instanceVariableNames: ''!

!classDefinition: 'PointsPortableObject class' category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/16/2020 18:27:45'!
PointsPortableObject class
	instanceVariableNames: ''!
!PointsPortableObject class methodsFor: 'instance creation' stamp: 'HAW 10/14/2020 14:36:26'!
named: aName weighing: aWeight worth: gamePoints
	
	^ self new initializeNamed: aName weighing: aWeight worth: gamePoints.! !

!classRemoval: #PointsPortableObject stamp: 'MG 12/16/2020 18:28:06'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'MG 12/16/2020 18:28:07'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PortableObject stamp: 'MG 12/16/2020 18:28:07'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #NonPortableObject stamp: 'MG 12/16/2020 18:28:07'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #StageObject stamp: 'MG 12/16/2020 18:28:08'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #Room stamp: 'MG 12/16/2020 18:28:08'!
Object subclass: #Room
	instanceVariableNames: 'width height contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'MG 12/16/2020 18:28:08'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'MG 12/16/2020 18:28:09'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #Backpack stamp: 'MG 12/16/2020 18:28:09'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #RoomTest stamp: 'MG 12/16/2020 18:28:09'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'MG 12/16/2020 18:28:10'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #BackpackTest stamp: 'MG 12/16/2020 18:28:10'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

----End fileIn of C:\Users\Mati\Downloads\ISW1-2020-2C-Recuperatorio-2doParcial.st----!

----QUIT----(16 December 2020 18:28:30) CuisUniversity-4365.image priorSource: 17276438!

----STARTUP---- (17 December 2020 17:02:03) as C:\Users\Mati\Desktop\facu\IS1\windows64\CuisUniversity-4365.image!


TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorTest category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 17:33:28'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 17:36:56' prior: 50875239!
test16_canNotTakeFromAnEmptyOrInvalidPosition

	| room  player |

	room := self defaultRoom.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room objectNotInRoomErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty ]
			
! !
!DoorTest class methodsFor: 'nil' stamp: 'MG 12/17/2020 17:39:38'!
test01! !

!methodRemoval: DoorTest class #test01 stamp: 'MG 12/17/2020 17:39:48'!
test01!
!DoorTest methodsFor: 'nil' stamp: 'MG 12/17/2020 17:40:18'!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:40:31'!
defaultRoom
	
	^Room ofWidth: 10 andHeight: 10! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:41:04'!
paper

	^ NoPointsPortableObject named: 'Paper' weighing: 100! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:42:46'!
defaultPlayer

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: self defaultRoom .! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 17:44:01'!
test01DoorOccupiesPositionInEachRoom! !

!methodRemoval: Room #test01DoorOccupiesPositionInEachRoom stamp: 'MG 12/17/2020 17:44:07'!
test01DoorOccupiesPositionInEachRoom!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:44:21'!
test01DoorOccupiesPositionInEachRoom! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:44:41'!
secondRoom
	
	^Room ofWidth: 5 andHeight: 5! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:44:48' prior: 50876306!
test01DoorOccupiesPositionInEachRoom
	! !

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 17:48:04'!
Object subclass: #Door
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:47:56' prior: 50876315!
test01DoorOccupiesPositionInEachRoom
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	door := Door connecting: room1 at:0@0 and:room2 at: 1@1.
	
	self assert: (room1 )! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:49:18' prior: 50876328!
test01DoorOccupiesPositionInEachRoom
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	door := Door connecting: room1 at:0@0 and:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !

!testRun: #DoorTest #test01DoorOccupiesPositionInEachRoom stamp: 'MG 12/17/2020 17:49:28'!
ERROR!

!testRun: #DoorTest #test01DoorOccupiesPositionInEachRoom stamp: 'MG 12/17/2020 17:49:28'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:49:50' prior: 50876338!
test01DoorOccupiesPositionInEachRoom
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	door := Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !

!testRun: #DoorTest #test01DoorOccupiesPositionInEachRoom stamp: 'MG 12/17/2020 17:49:55'!
ERROR!

!testRun: #DoorTest #test01DoorOccupiesPositionInEachRoom stamp: 'MG 12/17/2020 17:49:55'!
ERROR!
!Door class methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:50:02'!
connectingRoom: aRoom at: aPoint toRoom: aRoom3 at: aPoint4 
	self shouldBeImplemented.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:50:53' prior: 50876372!
connectingRoom: aRoom at: aPoint toRoom: aRoom3 at: aPoint4 
	
	
	! !
!Door class methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:51:32' prior: 50876378!
connectingRoom: aRoom at: aPoint toRoom: aRoom3 at: aPoint4 
	
	"^self new connectingRoom: aRoom at: aPoint"! !
!Door class methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:52:11' prior: 50876384!
connectingRoom: aRoom at: aPoint toRoom: aRoom3 at: aPoint4 
	
	^self new connectingRoom: aRoom at: aPoint toRoom: aRoom3 at: aPoint4.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:53:29' prior: 50876391!
connectingRoom: aFirstRoom at: aPositionInFirstRoom toRoom: aSecondRoom at: aPositionInSecondRoom 
	
	^self new connectingRoom: aFirstRoom at: aPositionInFirstRoom toRoom: aSecondRoom at: aPositionInSecondRoom.! !

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 17:54:24'!
Object subclass: #Door
	instanceVariableNames: 'firstRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 17:54:26'!
Object subclass: #Door
	instanceVariableNames: 'firstRoom secondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'nil' stamp: 'MG 12/17/2020 17:54:23'!
connectingRoom: aFirstRoom at: aPositionInFirstRoom toRoom: aSecondRoom at: aPositionInSecondRoom.

	firstRoom := aFirstRoom.
	secondRoom := aSecondRoom.
	
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:54:58' prior: 50876425!
connectingRoom: aFirstRoom at: aPositionInFirstRoom toRoom: aSecondRoom at: aPositionInSecondRoom.

	firstRoom := aFirstRoom.
	secondRoom := aSecondRoom.
	
	firstRoom at: aPositionInFirstRoom put: self.
	secondRoom at: aPositionInSecondRoom put: self.! !

!testRun: #DoorTest #test01DoorOccupiesPositionInEachRoom stamp: 'MG 12/17/2020 17:55:11'!
PASSED!

StageObject subclass: #Door
	instanceVariableNames: 'firstRoom secondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 17:55:33'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom secondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

StageObject subclass: #Door
	instanceVariableNames: 'firstRoom secondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 17:57:31'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom secondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 17:58:03'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom secondRoom positionInFirstRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 17:58:04'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom secondRoom positionInFirstRoom positionInSecondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:58:01' prior: 50876433!
connectingRoom: aFirstRoom at: aPositionInFirstRoom toRoom: aSecondRoom at: aPositionInSecondRoom.

	firstRoom := aFirstRoom.
	positionInFirstRoom := aPositionInFirstRoom.
	
	secondRoom := aSecondRoom.
	positionInSecondRoom := aPositionInSecondRoom.
	
	firstRoom at: aPositionInFirstRoom put: self.
	secondRoom at: aPositionInSecondRoom put: self.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:59:20'!
test02CanNotPutDoorAtInvalidPosition
	
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	door := Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:00:30' prior: 50876509!
test02CanNotPutDoorAtInvalidPosition
	
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	door := Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:00:37'!
test02CanNotPutDoorAtInvalidPositionInAnyRoom
	
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	door := Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !

!methodRemoval: DoorTest #test02CanNotPutDoorAtInvalidPosition stamp: 'MG 12/17/2020 18:00:37'!
test02CanNotPutDoorAtInvalidPosition
	
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	door := Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:00:55' prior: 50876532!
test02CanNotPutDoorAtInvalidPositionInAnyRoom
	
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	door := Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).
	
	"invalidPositionErrorDescription"! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:01:28' prior: 50876555!
test02CanNotPutDoorAtInvalidPositionInAnyRoom
	
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	door := Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self
		should: [Door connectingRoom: room1 at:-1@0 toRoom:room2 at: 1.2@1. ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]
	
	"invalidPositionErrorDescription"! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:01:41' prior: 50876568!
test02CanNotPutDoorAtInvalidPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	self
		should: [Door connectingRoom: room1 at:-1@0 toRoom:room2 at: 1.2@1. ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]
	
	"invalidPositionErrorDescription"! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:03:31' prior: 50876586!
test02CanNotPutDoorAtInvalidPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	self 
		should: [Door connectingRoom: room1 at:-1@0 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	"invalidPositionErrorDescription"! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:03:33' prior: 50876602!
test02CanNotPutDoorAtInvalidPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	self 
		should: [Door connectingRoom: room1 at:-1@0 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	! !

!testRun: #DoorTest #test02CanNotPutDoorAtInvalidPositionInAnyRoom stamp: 'MG 12/17/2020 18:03:36'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:03:53' prior: 50876617!
test02CanNotPutDoorAtInvalidPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: room1 at:-1@0 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:04:18'!
test03CanNotPutDoorAtOccupiedPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: room1 at:-1@0 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:04:34' prior: 50876650!
test03CanNotPutDoorAtOccupiedPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	room1 at: 1@1 put: self paper.
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: room1 at:-1@0 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:04:46' prior: 50876667!
test03CanNotPutDoorAtOccupiedPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	room1 at: 1@1 put: self paper.
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:05:18' prior: 50876685!
test03CanNotPutDoorAtOccupiedPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	room1 at: 1@1 put: self paper.
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (room1 isEmptyAt: 1@1).
	self assert: (room2 isEmptyAt: 1@1).
	! !

!testRun: #DoorTest #test03CanNotPutDoorAtOccupiedPositionInAnyRoom stamp: 'MG 12/17/2020 18:05:20'!
FAILURE!

!testRun: #DoorTest #test03CanNotPutDoorAtOccupiedPositionInAnyRoom stamp: 'MG 12/17/2020 18:05:20'!
FAILURE!

!testRun: #DoorTest #test03CanNotPutDoorAtOccupiedPositionInAnyRoom stamp: 'MG 12/17/2020 18:05:54'!
FAILURE!

!testRun: #DoorTest #test03CanNotPutDoorAtOccupiedPositionInAnyRoom stamp: 'MG 12/17/2020 18:05:54'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:06:27' prior: 50876703!
test03CanNotPutDoorAtOccupiedPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	room1 at: 1@1 put: self paper.
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	! !

!testRun: #DoorTest #test03CanNotPutDoorAtOccupiedPositionInAnyRoom stamp: 'MG 12/17/2020 18:06:28'!
PASSED!
!Door methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:10:47' overrides: 50876013!
putAllTo: a! !
!Door methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:10:57' prior: 50876757 overrides: 50876013!
putAllTo: aPlayableCharacter! !
!Door methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:11:09' overrides: 50876018!
takenBy: aPlayableCharacter 

	self subclassResponsibility 
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:12:49'!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	room1 at: 1@1 put: self paper.
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:14:51' prior: 50876770!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	room1 at: 1@1 put: self paper.
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:15:13' prior: 50876788!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	box := NonPortableObject named: 'Box'.
	room1 at: 1@1 put: box.
	
	Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. 
	"self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1)."
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:15:23' prior: 50876806!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	box := NonPortableObject named: 'Box'.
	room1 at: 1@1 put: box.
	
	Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.
	 
	"self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1)."
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:15:33' prior: 50876824!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	box := NonPortableObject named: 'Box'.
	room1 at: 1@1 put: box.
	
	Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.
	self assert: (room2 isEmptyAt: 1@1).
	
	"self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1)."
	! !

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:15:34'!
ERROR!

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:15:34'!
ERROR!

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:17:42'!
ERROR!

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:18:38'!
ERROR!

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:20:21'!
ERROR!

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:20:25'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:21:09' prior: 50876842!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	box := NonPortableObject named: 'Box'.
	room1 at: 1@1 put: box.
	
	self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	"self assert: (room2 isEmptyAt: 1@1)."

	! !

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:21:10'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:21:17' prior: 50876880!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	box := NonPortableObject named: 'Box'.
	room1 at: 1@1 put: box.
	
	self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).

	! !

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:21:22'!
PASSED!

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:21:26'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:22:26' prior: 50876899!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	box := NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.}.
	room1 at: 1@1 put: box.
	
	self assert: (room2 isEmptyAt: 1@1).

	! !

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:22:28'!
ERROR!

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:22:28'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:22:57' prior: 50876922!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	box := NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.}.
	room1 at: 1@1 put: box.
	
	self assert: (room1 isEmptyAt: 1@1).
	self assert: (room2 isEmptyAt: 1@1).

	! !

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:22:59'!
ERROR!

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:22:59'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:23:16' prior: 50876941!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	box := NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.}.
	
	
	self assert: (room1 isEmptyAt: 1@1).
	self assert: (room2 isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:23:34' prior: 50876961!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	box := NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.}.
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	
	self assert: (room1 isEmptyAt: 1@1).
	self assert: (room2 isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:23:45' prior: 50876974!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	
	self assert: (room1 isEmptyAt: 1@1).
	self assert: (room2 isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:23:50' prior: 50876994!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	
	self assert: (room1 isEmptyAt: 1@1).
	self assert: (room2 isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:24:25'!
defaultDoor

	^Door connectingRoom: self defaultRoom at:1@1 toRoom:self secondRoom at: 1@1.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:24:32' prior: 50876355!
test01DoorOccupiesPositionInEachRoom
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	door := self defaultDoor .
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:24:38' prior: 50877033!
test01DoorOccupiesPositionInEachRoom
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	door := Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:24:43' prior: 50877043!
test01DoorOccupiesPositionInEachRoom
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:24:46' prior: 50877054!
test01DoorOccupiesPositionInEachRoom
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:26:01' prior: 50877011!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
	
	
	self assert: (room1 isEmptyAt: 1@1).
	self assert: (room2 isEmptyAt: 1@1).

	! !

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:26:12'!
ERROR!

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:26:12'!
ERROR!
!Door class methodsFor: 'error messages' stamp: 'MG 12/17/2020 18:26:31'!
doorCantBeInNonPortableObjectErrorDescription
	self shouldBeImplemented.! !
!Door class methodsFor: 'error messages' stamp: 'MG 12/17/2020 18:27:08' prior: 50877099!
doorCantBeInNonPortableObjectErrorDescription
	
	^'Door can not be contained in NonPortableObject'! !

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:27:10'!
FAILURE!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'MG 12/17/2020 18:29:38' prior: 50876087!
named: aName withAll: aCollectionOfStageObjects 
	
	(aCollectionOfStageObjects anySatisfy: [:aStageObject | aStageObject canNotBeContained]) ifTrue: [self error: Door ].
	
	^self new initializeNamed: aName withAll: aCollectionOfStageObjects ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'MG 12/17/2020 18:30:00' prior: 50877115!
named: aName withAll: aCollectionOfStageObjects 
	
	(aCollectionOfStageObjects anySatisfy: [:aStageObject | aStageObject canNotBeContained]) 
								ifTrue: [self error: Door doorCantBeInNonPortableObjectErrorDescription].
	
	^self new initializeNamed: aName withAll: aCollectionOfStageObjects ! !
!StageObject methodsFor: 'taken' stamp: 'MG 12/17/2020 18:30:17'!
canNotBeContained
	
	self subclassResponsibility .! !
!StageObject methodsFor: 'taken' stamp: 'MG 12/17/2020 18:30:19' prior: 50877138!
canNotBeContained
	
	self subclassResponsibility.! !
!Door methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:30:29' overrides: 50877143!
canNotBeContained
	
	^true.! !
!NonPortableObject methodsFor: 'testing' stamp: 'MG 12/17/2020 18:31:15' overrides: 50877143!
canNotBeContained
	
	^false.! !
!PortableObject methodsFor: 'testing' stamp: 'MG 12/17/2020 18:31:23' overrides: 50877143!
canNotBeContained
	
	^false.! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'MG 12/17/2020 18:32:14'!
assertThereIsNoDoor: aCollectionOfStageObjects

	^ (aCollectionOfStageObjects anySatisfy: [:aStageObject | aStageObject canNotBeContained]) 
								ifTrue: [self error: Door doorCantBeInNonPortableObjectErrorDescription]! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'MG 12/17/2020 18:32:14' prior: 50877126!
named: aName withAll: aCollectionOfStageObjects 
	
	self assertThereIsNoDoor: aCollectionOfStageObjects.
	
	^self new initializeNamed: aName withAll: aCollectionOfStageObjects ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'MG 12/17/2020 18:32:32' prior: 50877160!
assertThereIsNoDoor: aCollectionOfStageObjects

	^ (aCollectionOfStageObjects anySatisfy: [:aStageObject | aStageObject canNotBeContained]) 
								ifTrue: [self error: Door doorCantBeInNonPortableObjectErrorDescription]! !

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:32:52'!
FAILURE!

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:32:52'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:33:17' prior: 50877076!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
	
	
	self deny: (room1 isEmptyAt: 1@1).
	self deny: (room2 isEmptyAt: 1@1).

	! !

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:33:19'!
PASSED!

!classDefinition: #DoorTest category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 18:35:31'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'firstRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorTest category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 18:35:32'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'firstRoom secondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:35:30' overrides: 16927572!
setUp
	
	firstRoom := self defaultRoom.
	secondRoom := self secondRoom.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:35:59' prior: 50877065!
test01DoorOccupiesPositionInEachRoom
	
	Door connectingRoom: firstRoom at:0@0 toRoom:secondRoom at: 1@1.
	
	self deny: (firstRoom isEmptyAt: 0@0).
	self deny: (secondRoom isEmptyAt: 1@1).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:36:15' prior: 50876634!
test02CanNotPutDoorAtInvalidPositionInAnyRoom
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: firstRoom at:-1@0 toRoom:secondRoom at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription.
	
	self assert: (secondRoom isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:36:36' prior: 50876736!
test03CanNotPutDoorAtOccupiedPositionInAnyRoom
	
	
	firstRoom at: 1@1 put: self paper.
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (firstRoom isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:36:53' prior: 50877197!
test04CanNotPutDoorInANonPortableObject
	
	
	
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: firstRoom at:1@1 toRoom:secondRoom at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
	
	
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:37:03' prior: 50877281!
test04CanNotPutDoorInANonPortableObject
	
	
	
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: firstRoom at:1@1 toRoom:secondRoom at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
	
	"Dado que la puerta ya ocupa esas posiciones"
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:37:07' prior: 50877296!
test04CanNotPutDoorInANonPortableObject
	
	
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: firstRoom at:1@1 toRoom:secondRoom at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
	
	"Dado que la puerta ya ocupa esas posiciones"
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:38:09'!
test05PlayerCanNotTakeDoor
	
	
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: firstRoom at:1@1 toRoom:secondRoom at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
	
	"Dado que la puerta ya ocupa esas posiciones"
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:39:06' prior: 50877328!
test05PlayerCanNotTakeDoor
	
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	
	"Dado que la puerta ya ocupa esas posiciones"
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:39:10' prior: 50877344!
test05PlayerCanNotTakeDoor
	
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:39:30' prior: 50877355!
test05PlayerCanNotTakeDoor
	
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	
	self 
		should: []
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
		
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:39:55' prior: 50877364!
test05PlayerCanNotTakeDoor
	
	| player |
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	
	self 
		should: []
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
		
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:40:11' prior: 50877377!
test05PlayerCanNotTakeDoor
	
	| player |
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	player := self defaultPlayer.
	self 
		should: []
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
		
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:40:18' prior: 50877391!
test05PlayerCanNotTakeDoor
	
	| player |
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	player := self defaultPlayer.
	self 
		should: []
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
		
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:40:36' prior: 50876292!
defaultPlayer

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: self defaultRoom .! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:40:43' prior: 50877421!
defaultPlayer

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: self defaultRoom .! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:41:12' prior: 50877406!
test05PlayerCanNotTakeDoor
	
	| player |
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	"Jugador debajo de la puerta de la primera habitacion mirando al norte (ver defaultPlayer)"
	player := self defaultPlayer.
	self 
		should: []
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
		
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:41:25' prior: 50877435!
test05PlayerCanNotTakeDoor
	
	| player |
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	"Jugador debajo de la puerta de la primera habitacion mirando al norte (ver defaultPlayer)"
	player := self defaultPlayer.
	self 
		should: [player take]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
		
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:42:38' prior: 50877453!
test05PlayerCanNotTakeDoor
	
	| player |
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	"Jugador debajo de la puerta de la primera habitacion mirando al norte (ver defaultPlayer)"
	player := self defaultPlayer.
	self 
		should: [player take]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeTakenErrorDescription.
		
	self assert: player backpackIsEmpty 

	! !

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:43:12'!
ERROR!

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:43:12'!
ERROR!
!Door class methodsFor: 'error messages' stamp: 'MG 12/17/2020 18:43:37'!
doorCantBeTakenErrorDescription
	self shouldBeImplemented.! !
!Door class methodsFor: 'error messages' stamp: 'MG 12/17/2020 18:43:46' prior: 50877492!
doorCantBeTakenErrorDescription
	
	^'Door can not be taken'! !

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:43:47'!
FAILURE!

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:44:23'!
FAILURE!

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:44:23'!
FAILURE!

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:45:09'!
FAILURE!

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:45:23'!
ERROR!

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:45:28'!
ERROR!

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:45:37'!
ERROR!

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:46:01'!
FAILURE!

----STARTUP---- (17 December 2020 18:47:26) as C:\Users\Mati\Desktop\facu\IS1\windows64\CuisUniversity-4365.image!


!classDefinition: #DoorTest category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 18:47:28'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorTest category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 18:47:28'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 17:36:56' prior: 50875239!
test16_canNotTakeFromAnEmptyOrInvalidPosition

	| room  player |

	room := self defaultRoom.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room objectNotInRoomErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty ]
			
! !
!DoorTest class methodsFor: 'nil' stamp: 'MG 12/17/2020 17:39:38'!
test01! !

!methodRemoval: DoorTest class #test01 stamp: 'MG 12/17/2020 18:47:28'!
test01!
!DoorTest methodsFor: 'nil' stamp: 'MG 12/17/2020 17:40:18'!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:40:31'!
defaultRoom
	
	^Room ofWidth: 10 andHeight: 10! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:41:04'!
paper

	^ NoPointsPortableObject named: 'Paper' weighing: 100! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:42:46'!
defaultPlayer

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: self defaultRoom .! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 17:44:01'!
test01DoorOccupiesPositionInEachRoom! !

!methodRemoval: Room #test01DoorOccupiesPositionInEachRoom stamp: 'MG 12/17/2020 18:47:28'!
test01DoorOccupiesPositionInEachRoom!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:44:21'!
test01DoorOccupiesPositionInEachRoom! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:44:41'!
secondRoom
	
	^Room ofWidth: 5 andHeight: 5! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:44:48' prior: 50877594!
test01DoorOccupiesPositionInEachRoom
	! !

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 18:47:29'!
Object subclass: #Door
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:47:56' prior: 50877603!
test01DoorOccupiesPositionInEachRoom
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	door := Door connecting: room1 at:0@0 and:room2 at: 1@1.
	
	self assert: (room1 )! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:49:18' prior: 50877616!
test01DoorOccupiesPositionInEachRoom
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	door := Door connecting: room1 at:0@0 and:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:49:50' prior: 50877626!
test01DoorOccupiesPositionInEachRoom
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	door := Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !
!Door class methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:50:02'!
connectingRoom: aRoom at: aPoint toRoom: aRoom3 at: aPoint4 
	self shouldBeImplemented.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:50:53' prior: 50877648!
connectingRoom: aRoom at: aPoint toRoom: aRoom3 at: aPoint4 
	
	
	! !
!Door class methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:51:32' prior: 50877654!
connectingRoom: aRoom at: aPoint toRoom: aRoom3 at: aPoint4 
	
	"^self new connectingRoom: aRoom at: aPoint"! !
!Door class methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:52:11' prior: 50877660!
connectingRoom: aRoom at: aPoint toRoom: aRoom3 at: aPoint4 
	
	^self new connectingRoom: aRoom at: aPoint toRoom: aRoom3 at: aPoint4.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:53:29' prior: 50877667!
connectingRoom: aFirstRoom at: aPositionInFirstRoom toRoom: aSecondRoom at: aPositionInSecondRoom 
	
	^self new connectingRoom: aFirstRoom at: aPositionInFirstRoom toRoom: aSecondRoom at: aPositionInSecondRoom.! !

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 18:47:29'!
Object subclass: #Door
	instanceVariableNames: 'firstRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 18:47:29'!
Object subclass: #Door
	instanceVariableNames: 'firstRoom secondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'nil' stamp: 'MG 12/17/2020 17:54:23'!
connectingRoom: aFirstRoom at: aPositionInFirstRoom toRoom: aSecondRoom at: aPositionInSecondRoom.

	firstRoom := aFirstRoom.
	secondRoom := aSecondRoom.
	
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:54:58' prior: 50877701!
connectingRoom: aFirstRoom at: aPositionInFirstRoom toRoom: aSecondRoom at: aPositionInSecondRoom.

	firstRoom := aFirstRoom.
	secondRoom := aSecondRoom.
	
	firstRoom at: aPositionInFirstRoom put: self.
	secondRoom at: aPositionInSecondRoom put: self.! !

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 18:47:29'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom secondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 18:47:29'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom secondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 18:47:29'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom secondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 18:47:29'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom secondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 18:47:29'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom secondRoom positionInFirstRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 18:47:29'!
StageObject subclass: #Door
	instanceVariableNames: 'firstRoom secondRoom positionInFirstRoom positionInSecondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:58:01' prior: 50877709!
connectingRoom: aFirstRoom at: aPositionInFirstRoom toRoom: aSecondRoom at: aPositionInSecondRoom.

	firstRoom := aFirstRoom.
	positionInFirstRoom := aPositionInFirstRoom.
	
	secondRoom := aSecondRoom.
	positionInSecondRoom := aPositionInSecondRoom.
	
	firstRoom at: aPositionInFirstRoom put: self.
	secondRoom at: aPositionInSecondRoom put: self.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 17:59:20'!
test02CanNotPutDoorAtInvalidPosition
	
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	door := Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:00:30' prior: 50877789!
test02CanNotPutDoorAtInvalidPosition
	
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	door := Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:00:37'!
test02CanNotPutDoorAtInvalidPositionInAnyRoom
	
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	door := Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !

!methodRemoval: DoorTest #test02CanNotPutDoorAtInvalidPosition stamp: 'MG 12/17/2020 18:47:30'!
test02CanNotPutDoorAtInvalidPosition
	
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	door := Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:00:55' prior: 50877812!
test02CanNotPutDoorAtInvalidPositionInAnyRoom
	
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	door := Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).
	
	"invalidPositionErrorDescription"! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:01:28' prior: 50877835!
test02CanNotPutDoorAtInvalidPositionInAnyRoom
	
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	door := Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self
		should: [Door connectingRoom: room1 at:-1@0 toRoom:room2 at: 1.2@1. ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]
	
	"invalidPositionErrorDescription"! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:01:41' prior: 50877848!
test02CanNotPutDoorAtInvalidPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	self
		should: [Door connectingRoom: room1 at:-1@0 toRoom:room2 at: 1.2@1. ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]
	
	"invalidPositionErrorDescription"! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:03:31' prior: 50877866!
test02CanNotPutDoorAtInvalidPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	self 
		should: [Door connectingRoom: room1 at:-1@0 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	"invalidPositionErrorDescription"! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:03:33' prior: 50877882!
test02CanNotPutDoorAtInvalidPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	self 
		should: [Door connectingRoom: room1 at:-1@0 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:03:53' prior: 50877897!
test02CanNotPutDoorAtInvalidPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: room1 at:-1@0 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:04:18'!
test03CanNotPutDoorAtOccupiedPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: room1 at:-1@0 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:04:34' prior: 50877927!
test03CanNotPutDoorAtOccupiedPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	room1 at: 1@1 put: self paper.
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: room1 at:-1@0 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:04:46' prior: 50877944!
test03CanNotPutDoorAtOccupiedPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	room1 at: 1@1 put: self paper.
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:05:18' prior: 50877962!
test03CanNotPutDoorAtOccupiedPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	room1 at: 1@1 put: self paper.
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (room1 isEmptyAt: 1@1).
	self assert: (room2 isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:06:27' prior: 50877980!
test03CanNotPutDoorAtOccupiedPositionInAnyRoom
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	room1 at: 1@1 put: self paper.
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:10:47' overrides: 50876013!
putAllTo: a! !
!Door methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:10:57' prior: 50878017 overrides: 50876013!
putAllTo: aPlayableCharacter! !
!Door methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:11:09' overrides: 50876018!
takenBy: aPlayableCharacter 

	self subclassResponsibility 
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:12:49'!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	room1 at: 1@1 put: self paper.
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:14:51' prior: 50878030!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	room1 at: 1@1 put: self paper.
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:15:13' prior: 50878048!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	box := NonPortableObject named: 'Box'.
	room1 at: 1@1 put: box.
	
	Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. 
	"self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1)."
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:15:23' prior: 50878066!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	box := NonPortableObject named: 'Box'.
	room1 at: 1@1 put: box.
	
	Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.
	 
	"self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1)."
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:15:33' prior: 50878084!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	box := NonPortableObject named: 'Box'.
	room1 at: 1@1 put: box.
	
	Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.
	self assert: (room2 isEmptyAt: 1@1).
	
	"self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1)."
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:21:09' prior: 50878102!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	box := NonPortableObject named: 'Box'.
	room1 at: 1@1 put: box.
	
	self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	"self assert: (room2 isEmptyAt: 1@1)."

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:21:17' prior: 50878121!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	box := NonPortableObject named: 'Box'.
	room1 at: 1@1 put: box.
	
	self 
		should: [Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (room2 isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:22:26' prior: 50878137!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	box := NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.}.
	room1 at: 1@1 put: box.
	
	self assert: (room2 isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:22:57' prior: 50878153!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	box := NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.}.
	room1 at: 1@1 put: box.
	
	self assert: (room1 isEmptyAt: 1@1).
	self assert: (room2 isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:23:16' prior: 50878166!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	box := NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.}.
	
	
	self assert: (room1 isEmptyAt: 1@1).
	self assert: (room2 isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:23:34' prior: 50878180!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	box := NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.}.
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	
	self assert: (room1 isEmptyAt: 1@1).
	self assert: (room2 isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:23:45' prior: 50878193!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 box |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	
	self assert: (room1 isEmptyAt: 1@1).
	self assert: (room2 isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:23:50' prior: 50878213!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	
	self assert: (room1 isEmptyAt: 1@1).
	self assert: (room2 isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:24:25'!
defaultDoor

	^Door connectingRoom: self defaultRoom at:1@1 toRoom:self secondRoom at: 1@1.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:24:32' prior: 50877637!
test01DoorOccupiesPositionInEachRoom
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	door := self defaultDoor .
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:24:38' prior: 50878252!
test01DoorOccupiesPositionInEachRoom
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	door := Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:24:43' prior: 50878262!
test01DoorOccupiesPositionInEachRoom
	| room1 room2 door |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:24:46' prior: 50878273!
test01DoorOccupiesPositionInEachRoom
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	Door connectingRoom: room1 at:0@0 toRoom:room2 at: 1@1.
	
	self deny: (room1 isEmptyAt: 0@0).
	self deny: (room2 isEmptyAt: 1@1).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:26:01' prior: 50878230!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
	
	
	self assert: (room1 isEmptyAt: 1@1).
	self assert: (room2 isEmptyAt: 1@1).

	! !
!Door class methodsFor: 'error messages' stamp: 'MG 12/17/2020 18:26:31'!
doorCantBeInNonPortableObjectErrorDescription
	self shouldBeImplemented.! !
!Door class methodsFor: 'error messages' stamp: 'MG 12/17/2020 18:27:08' prior: 50878311!
doorCantBeInNonPortableObjectErrorDescription
	
	^'Door can not be contained in NonPortableObject'! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'MG 12/17/2020 18:29:38' prior: 50876087!
named: aName withAll: aCollectionOfStageObjects 
	
	(aCollectionOfStageObjects anySatisfy: [:aStageObject | aStageObject canNotBeContained]) ifTrue: [self error: Door ].
	
	^self new initializeNamed: aName withAll: aCollectionOfStageObjects ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'MG 12/17/2020 18:30:00' prior: 50878324!
named: aName withAll: aCollectionOfStageObjects 
	
	(aCollectionOfStageObjects anySatisfy: [:aStageObject | aStageObject canNotBeContained]) 
								ifTrue: [self error: Door doorCantBeInNonPortableObjectErrorDescription].
	
	^self new initializeNamed: aName withAll: aCollectionOfStageObjects ! !
!StageObject methodsFor: 'taken' stamp: 'MG 12/17/2020 18:30:17'!
canNotBeContained
	
	self subclassResponsibility .! !
!StageObject methodsFor: 'taken' stamp: 'MG 12/17/2020 18:30:19' prior: 50878347!
canNotBeContained
	
	self subclassResponsibility.! !
!Door methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:30:29' overrides: 50878352!
canNotBeContained
	
	^true.! !
!NonPortableObject methodsFor: 'testing' stamp: 'MG 12/17/2020 18:31:15' overrides: 50878352!
canNotBeContained
	
	^false.! !
!PortableObject methodsFor: 'testing' stamp: 'MG 12/17/2020 18:31:23' overrides: 50878352!
canNotBeContained
	
	^false.! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'MG 12/17/2020 18:32:14'!
assertThereIsNoDoor: aCollectionOfStageObjects

	^ (aCollectionOfStageObjects anySatisfy: [:aStageObject | aStageObject canNotBeContained]) 
								ifTrue: [self error: Door doorCantBeInNonPortableObjectErrorDescription]! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'MG 12/17/2020 18:32:14' prior: 50878335!
named: aName withAll: aCollectionOfStageObjects 
	
	self assertThereIsNoDoor: aCollectionOfStageObjects.
	
	^self new initializeNamed: aName withAll: aCollectionOfStageObjects ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'MG 12/17/2020 18:32:32' prior: 50878369!
assertThereIsNoDoor: aCollectionOfStageObjects

	^ (aCollectionOfStageObjects anySatisfy: [:aStageObject | aStageObject canNotBeContained]) 
								ifTrue: [self error: Door doorCantBeInNonPortableObjectErrorDescription]! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:33:17' prior: 50878295!
test04CanNotPutDoorInANonPortableObject
	
	| room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self secondRoom.
	
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: room1 at:1@1 toRoom:room2 at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
	
	
	self deny: (room1 isEmptyAt: 1@1).
	self deny: (room2 isEmptyAt: 1@1).

	! !

!classDefinition: #DoorTest category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 18:47:31'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'firstRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorTest category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 18:47:32'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'firstRoom secondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:35:30' overrides: 16927572!
setUp
	
	firstRoom := self defaultRoom.
	secondRoom := self secondRoom.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:35:59' prior: 50878284!
test01DoorOccupiesPositionInEachRoom
	
	Door connectingRoom: firstRoom at:0@0 toRoom:secondRoom at: 1@1.
	
	self deny: (firstRoom isEmptyAt: 0@0).
	self deny: (secondRoom isEmptyAt: 1@1).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:36:15' prior: 50877911!
test02CanNotPutDoorAtInvalidPositionInAnyRoom
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: firstRoom at:-1@0 toRoom:secondRoom at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription.
	
	self assert: (secondRoom isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:36:36' prior: 50877999!
test03CanNotPutDoorAtOccupiedPositionInAnyRoom
	
	
	firstRoom at: 1@1 put: self paper.
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (firstRoom isEmptyAt: 1@1).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:36:53' prior: 50878399!
test04CanNotPutDoorInANonPortableObject
	
	
	
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: firstRoom at:1@1 toRoom:secondRoom at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
	
	
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:37:03' prior: 50878479!
test04CanNotPutDoorInANonPortableObject
	
	
	
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: firstRoom at:1@1 toRoom:secondRoom at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
	
	"Dado que la puerta ya ocupa esas posiciones"
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:37:07' prior: 50878494!
test04CanNotPutDoorInANonPortableObject
	
	
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: firstRoom at:1@1 toRoom:secondRoom at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
	
	"Dado que la puerta ya ocupa esas posiciones"
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:38:09'!
test05PlayerCanNotTakeDoor
	
	
	self 
		should: [NonPortableObject named: 'Box' withAll: {Door connectingRoom: firstRoom at:1@1 toRoom:secondRoom at: 1@1.} ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
	
	"Dado que la puerta ya ocupa esas posiciones"
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:39:06' prior: 50878526!
test05PlayerCanNotTakeDoor
	
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	
	"Dado que la puerta ya ocupa esas posiciones"
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:39:10' prior: 50878542!
test05PlayerCanNotTakeDoor
	
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:39:30' prior: 50878553!
test05PlayerCanNotTakeDoor
	
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	
	self 
		should: []
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
		
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:39:55' prior: 50878562!
test05PlayerCanNotTakeDoor
	
	| player |
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	
	self 
		should: []
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
		
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:40:11' prior: 50878575!
test05PlayerCanNotTakeDoor
	
	| player |
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	player := self defaultPlayer.
	self 
		should: []
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
		
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:40:18' prior: 50878589!
test05PlayerCanNotTakeDoor
	
	| player |
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	player := self defaultPlayer.
	self 
		should: []
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
		
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:40:36' prior: 50877580!
defaultPlayer

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: self defaultRoom .! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:40:43' prior: 50878619!
defaultPlayer

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: self defaultRoom .! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:41:12' prior: 50878604!
test05PlayerCanNotTakeDoor
	
	| player |
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	"Jugador debajo de la puerta de la primera habitacion mirando al norte (ver defaultPlayer)"
	player := self defaultPlayer.
	self 
		should: []
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
		
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:41:25' prior: 50878633!
test05PlayerCanNotTakeDoor
	
	| player |
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	"Jugador debajo de la puerta de la primera habitacion mirando al norte (ver defaultPlayer)"
	player := self defaultPlayer.
	self 
		should: [player take]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeInNonPortableObjectErrorDescription.
		
	self deny: (firstRoom isEmptyAt: 1@1).
	self deny: (secondRoom isEmptyAt: 1@1).

	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:42:38' prior: 50878651!
test05PlayerCanNotTakeDoor
	
	| player |
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	"Jugador debajo de la puerta de la primera habitacion mirando al norte (ver defaultPlayer)"
	player := self defaultPlayer.
	self 
		should: [player take]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeTakenErrorDescription.
		
	self assert: player backpackIsEmpty 

	! !
!Door class methodsFor: 'error messages' stamp: 'MG 12/17/2020 18:43:37'!
doorCantBeTakenErrorDescription
	self shouldBeImplemented.! !
!Door class methodsFor: 'error messages' stamp: 'MG 12/17/2020 18:43:46' prior: 50878685!
doorCantBeTakenErrorDescription
	
	^'Door can not be taken'! !

----SNAPSHOT----(17 December 2020 18:47:44) CuisUniversity-4365.image priorSource: 17426741!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:48:11' prior: 50878669!
test05PlayerCanNotTakeDoor
	
	| player |
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	"Jugador debajo de la puerta de la primera habitacion mirando al norte (ver defaultPlayer)
	player := self defaultPlayer.
	self 
		should: [player take]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeTakenErrorDescription.
		
	self assert: player backpackIsEmpty "

	! !

!testRun: #DoorTest #test01DoorOccupiesPositionInEachRoom stamp: 'MG 12/17/2020 18:48:16'!
PASSED!

!testRun: #DoorTest #test02CanNotPutDoorAtInvalidPositionInAnyRoom stamp: 'MG 12/17/2020 18:48:16'!
PASSED!

!testRun: #DoorTest #test03CanNotPutDoorAtOccupiedPositionInAnyRoom stamp: 'MG 12/17/2020 18:48:16'!
FAILURE!

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:48:16'!
PASSED!

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:48:16'!
PASSED!

!testRun: #DoorTest #test03CanNotPutDoorAtOccupiedPositionInAnyRoom stamp: 'MG 12/17/2020 18:48:16'!
FAILURE!

!testRun: #DoorTest #test03CanNotPutDoorAtOccupiedPositionInAnyRoom stamp: 'MG 12/17/2020 18:48:21'!
FAILURE!

!testRun: #DoorTest #test03CanNotPutDoorAtOccupiedPositionInAnyRoom stamp: 'MG 12/17/2020 18:48:21'!
FAILURE!

!testRun: #DoorTest #test01DoorOccupiesPositionInEachRoom stamp: 'MG 12/17/2020 18:48:24'!
PASSED!

!testRun: #DoorTest #test02CanNotPutDoorAtInvalidPositionInAnyRoom stamp: 'MG 12/17/2020 18:48:26'!
PASSED!

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 18:48:27'!
PASSED!

!testRun: #DoorTest #test03CanNotPutDoorAtOccupiedPositionInAnyRoom stamp: 'MG 12/17/2020 18:48:31'!
FAILURE!

!testRun: #DoorTest #test03CanNotPutDoorAtOccupiedPositionInAnyRoom stamp: 'MG 12/17/2020 18:48:31'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:48:49' prior: 50878463!
test03CanNotPutDoorAtOccupiedPositionInAnyRoom
	
	
	firstRoom at: 1@1 put: self paper.
	
	"Esto ya es testeado para cualquier stage object, pero lo dejo de todas maneras"
	self 
		should: [Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
	
	self assert: (secondRoom isEmptyAt: 1@1).
	! !

!testRun: #DoorTest #test03CanNotPutDoorAtOccupiedPositionInAnyRoom stamp: 'MG 12/17/2020 18:48:50'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:49:01' prior: 50878698!
test05PlayerCanNotTakeDoor
	
	| player |
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	"Jugador debajo de la puerta de la primera habitacion mirando al norte (ver defaultPlayer)"
	player := self defaultPlayer.
	self 
		should: [player take]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeTakenErrorDescription.
		
	self assert: player backpackIsEmpty 

	! !

firstRoom!

secondRoom!

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:50:39'!
FAILURE!

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:50:52'!
PASSED!

firstRoom!

firstRoom at: 1@1!
!Door methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:53:23' prior: 50878025 overrides: 50876018!
takenBy: aPlayableCharacter 

	self error: (self class doorCantBeTakenErrorDescription). 
	! !

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:54:08'!
FAILURE!

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:54:08'!
FAILURE!

----SNAPSHOT----(17 December 2020 18:54:23) CuisUniversity-4365.image priorSource: 17505406!

!testRun: #DoorTest #test01DoorOccupiesPositionInEachRoom stamp: 'MG 12/17/2020 18:54:45'!
PASSED!

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:55:11'!
FAILURE!

self forwardPosition!

room at: 1@1!

room at: 1@1!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 18:57:21' prior: 50878777!
test05PlayerCanNotTakeDoor
	
	| player |
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	"Jugador debajo de la puerta de la primera habitacion mirando al norte (ver defaultPlayer)"
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: firstRoom.
	self 
		should: [player take]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeTakenErrorDescription.
		
	self assert: player backpackIsEmpty 

	! !

!testRun: #DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:57:22'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 18:59:19'!
test21PlayerCanNotTakeDoor
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 1@1.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	self 
		should: [player take]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeTakenErrorDescription.
		
	self assert: player backpackIsEmpty ! !
!PlayableCharacterTest methodsFor: 'defaults' stamp: 'MG 12/17/2020 18:59:39'!
anotherRoom
	
	^Room ofWidth: 5 andHeight: 5! !

!testRun: #PlayableCharacterTest #test21PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:59:43'!
PASSED!

!methodRemoval: DoorTest #test05PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 18:59:48'!
test05PlayerCanNotTakeDoor
	
	| player |
	
	Door connectingRoom: firstRoom at:1@1 toRoom: secondRoom at: 1@1.
	"Jugador debajo de la puerta de la primera habitacion mirando al norte (ver defaultPlayer)"
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: firstRoom.
	self 
		should: [player take]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeTakenErrorDescription.
		
	self assert: player backpackIsEmpty 

	!

!methodRemoval: DoorTest #defaultDoor stamp: 'MG 12/17/2020 19:00:17'!
defaultDoor

	^Door connectingRoom: self defaultRoom at:1@1 toRoom:self secondRoom at: 1@1.!

!methodRemoval: DoorTest #defaultBackpack stamp: 'MG 12/17/2020 19:00:39'!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 !

!methodRemoval: DoorTest #defaultPlayer stamp: 'MG 12/17/2020 19:00:50'!
defaultPlayer

	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: self defaultRoom .!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 19:02:00'!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 1@1.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	self 
		should: [player take]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door doorCantBeTakenErrorDescription.
		
	self assert: player backpackIsEmpty ! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 19:02:13' prior: 50878904!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 1@1.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player moveForward.
		
	self assert: player backpackIsEmpty ! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 19:03:32' prior: 50878922!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 1@1.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player moveForward.
		
	self assert: (player isAt: 1@2 heading: #North).
	self assert: player equals: (room2 at: 1@2).
	self assert: (room1 isEmptyAt: 1@0).! !

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 19:03:35'!
ERROR!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 19:03:35'!
ERROR!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 19:03:44'!
FAILURE!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 19:03:53'!
ERROR!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 19:03:53'!
ERROR!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 19:03:55'!
FAILURE!

----SNAPSHOT----(17 December 2020 19:03:59) CuisUniversity-4365.image priorSource: 17509172!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 19:04:01'!
ERROR!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 19:04:01'!
ERROR!

room1 at: 1@0!

room1 at: 1@1!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 19:05:57'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 19:06:36' prior: 50878937!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player moveForward.
		
	self assert: (player isAt: 1@2 heading: #North).
	self assert: player equals: (room2 at: 1@2).
	self assert: (room1 isEmptyAt: 1@0).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 19:06:45' prior: 50878997!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player moveForward.
		
	self assert: (player isAt: 1@2 heading: #North).
	self assert: player equals: (room2 at: 2@1).
	self assert: (room1 isEmptyAt: 1@0).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 19:06:54' prior: 50879015!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player moveForward.
		
	self assert: (player isAt: 2@1 heading: #North).
	self assert: player equals: (room2 at: 2@1).
	self assert: (room1 isEmptyAt: 1@0).! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 19:13:30' prior: 50875895!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	"if self at: atargetposition isDoor XXXX
	if self at: atargetposition isNotDoor [ self at: aTargetPosition put: toMove]"
	
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 19:15:43' prior: 50879051!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove movingTo |
	
	toMove := self at: aSourcePosition.
	movingTo := 2.
	"if self at: atargetposition isDoor XXXX
	if self at: atargetposition isNotDoor [ self at: aTargetPosition put: toMove]
	
	toTake := room at: self forwardPosition.
	toTake takenBy: self 
	
	"
	
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 19:24:05' prior: 50879063!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove movingTo |
	
	toMove := self at: aSourcePosition.
	(self isEmptyAt: aTargetPosition) ifFalse: [movingTo := self at: aTargetPosition] .
	"if self at: atargetposition isDoor XXXX
	if self at: atargetposition isNotDoor [ self at: aTargetPosition put: toMove]
	
	toTake := room at: self forwardPosition.
	toTake takenBy: self 
	
	"
	
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 19:25:54' prior: 50879078!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove stageObectInTarget |
	
	toMove := self at: aSourcePosition.
	(self isEmptyAt: aTargetPosition) ifFalse: [stageObectInTarget := self at: aTargetPosition] .
	"if self at: atargetposition isDoor XXXX
	if self at: atargetposition isNotDoor [ self at: aTargetPosition put: toMove]
	
	toTake := room at: self forwardPosition.
	toTake takenBy: self 
	
	"
	stageObectInTarget sttepedBy: self.
	
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !
!StageObject methodsFor: 'taken' stamp: 'MG 12/17/2020 19:26:19'!
steppedBy: aPlayableCharacter 

	self subclassResponsibility 
	! !
!Door methodsFor: 'nil' stamp: 'MG 12/17/2020 19:27:24' overrides: 50879115!
steppedBy: aPlayableCharacter 

	
	! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 19:31:13' prior: 50879096!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove stageObectInTarget |
	
	toMove := self at: aSourcePosition.
	(self isEmptyAt: aTargetPosition) ifFalse: [stageObectInTarget := self at: aTargetPosition] .
	"if self at: atargetposition isDoor XXXX
	if self at: atargetposition isNotDoor [ self at: aTargetPosition put: toMove]
	
	toTake := room at: self forwardPosition.
	toTake takenBy: self 
	
	"
	stageObectInTarget sttepedBy: toMove.
	
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !
!Room methodsFor: 'contents' stamp: 'HAW 12/14/2020 18:23:18' prior: 50879124!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 19:33:10' prior: 50875888 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	
	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aStageObject ! !
!Room methodsFor: 'assertions' stamp: 'MG 12/17/2020 19:36:16' prior: 50875916!
assertIsEmpty: aPosition

	"^(self isEmptyAt: aPosition) ifFalse: [ self error: self class positionIsNotEmptyErrorDescription ]."
	
	(self isEmptyAt: aPosition) ifFalse:
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse:[self error: self class positionIsNotEmptyErrorDescription] ]! !
!Room methodsFor: 'assertions' stamp: 'MG 12/17/2020 19:37:41' prior: 50879160!
assertIsEmpty: aPosition

	"^(self isEmptyAt: aPosition) ifFalse: [ self error: self class positionIsNotEmptyErrorDescription ]."
	
	(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse:[self error: self class positionIsNotEmptyErrorDescription] ]! !
!Room methodsFor: 'assertions' stamp: 'MG 12/17/2020 19:38:07' prior: 50879174!
assertIsEmpty: aPosition

	^(self isEmptyAt: aPosition) ifFalse: [ self error: self class positionIsNotEmptyErrorDescription ].
	
	! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 19:39:12' prior: 50879152 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	"self assertIsEmpty: aPosition."
	(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse:[self error: self class positionIsNotEmptyErrorDescription] ].
	
	contents at: aPosition put: aStageObject ! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 19:41:17' prior: 50879033!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	"| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player moveForward.
		
	self assert: (player isAt: 2@1 heading: #North).
	self assert: player equals: (room2 at: 2@1).
	self assert: (room1 isEmptyAt: 1@0)."! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'MG 12/17/2020 19:41:19'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'MG 12/17/2020 19:41:19'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'MG 12/17/2020 19:41:19'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'MG 12/17/2020 19:41:19'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'MG 12/17/2020 19:41:19'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'MG 12/17/2020 19:41:19'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'MG 12/17/2020 19:41:19'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'MG 12/17/2020 19:41:19'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'MG 12/17/2020 19:41:19'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'MG 12/17/2020 19:41:19'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'MG 12/17/2020 19:41:19'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'MG 12/17/2020 19:41:19'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'MG 12/17/2020 19:41:20'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'MG 12/17/2020 19:41:20'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'MG 12/17/2020 19:41:20'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'MG 12/17/2020 19:41:20'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'MG 12/17/2020 19:41:20'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'MG 12/17/2020 19:41:20'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'MG 12/17/2020 19:41:20'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'MG 12/17/2020 19:41:20'!
PASSED!

!testRun: #PlayableCharacterTest #test21PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 19:41:20'!
PASSED!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 19:41:20'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 19:41:28' prior: 50879211!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player moveForward.
		
	self assert: (player isAt: 2@1 heading: #North).
	self assert: player equals: (room2 at: 2@1).
	self assert: (room1 isEmptyAt: 1@0).! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 19:46:08' prior: 50879196 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	"self assertIsEmpty: aPosition."
	(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse:[self error: self class positionIsNotEmptyErrorDescription] ].
	
	contents at: aPosition put: aStageObject ! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 19:47:32' prior: 50879331 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	"self assertIsEmpty: aPosition."
	(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse:[self error: self class positionIsNotEmptyErrorDescription] ].
	self at: aPosition tryPassing: aStageObject.
	
	contents at: aPosition put: aStageObject ! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 19:49:28' prior: 50879346 overrides: 16880792!
at: aPosition put: aStageObject
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	self assertPositionIsValid: aPosition.
	"self assertIsEmpty: aPosition."
	(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse:[self error: self class positionIsNotEmptyErrorDescription] ].
	self at: aPosition tryPassing: aStageObject.
	
	contents at: aPosition put: aStageObject ! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 19:51:07' prior: 50879362 overrides: 16880792!
at: aPosition put: aStageObject
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	| objectOrPlayer |
	self assertPositionIsValid: aPosition.
	"self assertIsEmpty: aPosition."
	(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse:[self error: self class positionIsNotEmptyErrorDescription] ].
	objectOrPlayer := self at: aPosition.
	objectOrPlayer tryPassing: aStageObject. 
		
	contents at: aPosition put: aStageObject ! !
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 19:51:29'!
tryPassing: aPlayableCharacter 

	
	! !

!methodRemoval: Door #steppedBy: stamp: 'MG 12/17/2020 19:51:29'!
steppedBy: aPlayableCharacter 

	
	!
!StageObject methodsFor: 'taken' stamp: 'MG 12/17/2020 19:51:56'!
tryPassing: aPlayableCharacter 

	self subclassResponsibility 
	! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 19:52:40' prior: 50879382 overrides: 16880792!
at: aPosition put: objectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	| objectOrPlayerAtPosition |
	self assertPositionIsValid: aPosition.
	"self assertIsEmpty: aPosition."
	(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse:[self error: self class positionIsNotEmptyErrorDescription] ].
			
	objectOrPlayerAtPosition := self at: aPosition.
	objectOrPlayerAtPosition tryPassing: objectOrPlayer. 
		
	contents at: aPosition put: objectOrPlayer ! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 19:53:36' prior: 50879415 overrides: 16880792!
at: aPosition put: objectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	| objectOrPlayerAtPosition |
	self assertPositionIsValid: aPosition.
	"self assertIsEmpty: aPosition."
	(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse:[self error: self class positionIsNotEmptyErrorDescription] ].
			
	objectOrPlayerAtPosition := self at: aPosition.
	objectOrPlayerAtPosition tryPassing: objectOrPlayer at: aPosition. 
		
	contents at: aPosition put: objectOrPlayer ! !
!StageObject methodsFor: 'taken' stamp: 'MG 12/17/2020 19:53:53'!
tryPassing: objectOrPlayer at: aPosition

	self subclassResponsibility 
	! !

!methodRemoval: StageObject #tryPassing: stamp: 'MG 12/17/2020 19:53:57'!
tryPassing: aPlayableCharacter 

	self subclassResponsibility 
	!
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 19:54:02' overrides: 50879460!
tryPassing: objectOrPlayer at: aPosition

	self subclassResponsibility ! !

!methodRemoval: Door #tryPassing: stamp: 'MG 12/17/2020 19:54:04'!
tryPassing: aPlayableCharacter 

	
	!
!NonPortableObject methodsFor: 'nil' stamp: 'MG 12/17/2020 19:54:11' overrides: 50879460!
tryPassing: objectOrPlayer at: aPosition

	self subclassResponsibility ! !
!PortableObject methodsFor: 'nil' stamp: 'MG 12/17/2020 19:54:25' overrides: 50879460!
tryPassing: objectOrPlayer at: aPosition

	self subclassResponsibility ! !
!StageObject methodsFor: 'taken' stamp: 'MG 12/17/2020 19:56:04'!
tryPassing: objectOrPlayer at: aPosition in: aRoom 

	self subclassResponsibility 
	! !

!methodRemoval: StageObject #tryPassing:at: stamp: 'MG 12/17/2020 19:56:04'!
tryPassing: objectOrPlayer at: aPosition

	self subclassResponsibility 
	!

!methodRemoval: Door #tryPassing:at: stamp: 'MG 12/17/2020 19:56:16'!
tryPassing: objectOrPlayer at: aPosition

	self subclassResponsibility !
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 19:56:19' overrides: 50879490!
tryPassing: objectOrPlayer at: aPosition in: aRoom 

	self subclassResponsibility 
	! !
!NonPortableObject methodsFor: 'moving' stamp: 'MG 12/17/2020 19:56:23' overrides: 50879490!
tryPassing: objectOrPlayer at: aPosition in: aRoom 

	self subclassResponsibility 
	! !

!methodRemoval: NonPortableObject #tryPassing:at: stamp: 'MG 12/17/2020 19:56:25'!
tryPassing: objectOrPlayer at: aPosition

	self subclassResponsibility !
!PortableObject methodsFor: 'moving' stamp: 'MG 12/17/2020 19:56:28' overrides: 50879490!
tryPassing: objectOrPlayer at: aPosition in: aRoom 

	self subclassResponsibility 
	! !

!methodRemoval: PortableObject #tryPassing:at: stamp: 'MG 12/17/2020 19:56:30'!
tryPassing: objectOrPlayer at: aPosition

	self subclassResponsibility !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 19:56:39' prior: 50879438 overrides: 16880792!
at: aPosition put: objectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	| objectOrPlayerAtPosition |
	self assertPositionIsValid: aPosition.
	"self assertIsEmpty: aPosition."
	(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse:[self error: self class positionIsNotEmptyErrorDescription] ].
			
	objectOrPlayerAtPosition := self at: aPosition.
	objectOrPlayerAtPosition tryPassing: objectOrPlayer at: aPosition in: self. 
		
	contents at: aPosition put: objectOrPlayer ! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 19:57:46' prior: 50879533 overrides: 16880792!
at: aPosition put: objectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	
	self assertPositionIsValid: aPosition.
	"self assertIsEmpty: aPosition."
	(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse:[self error: self class positionIsNotEmptyErrorDescription] ].
	
	(self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition tryPassing: objectOrPlayer at: aPosition in: self. 	
	].			
	
		
	contents at: aPosition put: objectOrPlayer ! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 19:57:56' prior: 50879556 overrides: 16880792!
at: aPosition put: objectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	
	self assertPositionIsValid: aPosition.
	"self assertIsEmpty: aPosition."
	(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse: [self error: self class positionIsNotEmptyErrorDescription] ].
	
	(self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition tryPassing: objectOrPlayer at: aPosition in: self. 	
	].			
	
		
	contents at: aPosition put: objectOrPlayer ! !

----SNAPSHOT----(17 December 2020 20:02:33) CuisUniversity-4365.image priorSource: 17514528!

!classDefinition: #NonPassableStageObject category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 20:03:27'!
StageObject subclass: #NonPassableStageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 20:03:27'!
NonPassableStageObject subclass: #NonPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

NonPassableStageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #PortableObject category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 20:03:59'!
NonPassableStageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:04:08' prior: 50879313!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	"| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player moveForward.
		
	self assert: (player isAt: 2@1 heading: #North).
	self assert: player equals: (room2 at: 2@1).
	self assert: (room1 isEmptyAt: 1@0)."! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 20:04:18' prior: 50879581 overrides: 16880792!
at: aPosition put: objectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	
	self assertPositionIsValid: aPosition.
	"self assertIsEmpty: aPosition."
	(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse: [self error: self class positionIsNotEmptyErrorDescription] ].
	
	"(self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition tryPassing: objectOrPlayer at: aPosition in: self. 	
	]."			
	
		
	contents at: aPosition put: objectOrPlayer ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'MG 12/17/2020 20:04:25'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'MG 12/17/2020 20:04:25'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'MG 12/17/2020 20:04:25'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'MG 12/17/2020 20:04:25'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'MG 12/17/2020 20:04:25'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'MG 12/17/2020 20:04:25'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'MG 12/17/2020 20:04:26'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'MG 12/17/2020 20:04:26'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'MG 12/17/2020 20:04:26'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'MG 12/17/2020 20:04:26'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'MG 12/17/2020 20:04:26'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'MG 12/17/2020 20:04:26'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'MG 12/17/2020 20:04:26'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'MG 12/17/2020 20:04:26'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'MG 12/17/2020 20:04:26'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'MG 12/17/2020 20:04:26'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'MG 12/17/2020 20:04:26'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'MG 12/17/2020 20:04:26'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'MG 12/17/2020 20:04:26'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'MG 12/17/2020 20:04:26'!
PASSED!

!testRun: #PlayableCharacterTest #test21PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 20:04:26'!
PASSED!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 20:04:26'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:04:33' prior: 50879643!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	"| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player moveForward.
		
	self assert: (player isAt: 2@1 heading: #North).
	self assert: player equals: (room2 at: 2@1).
	self assert: (room1 isEmptyAt: 1@0)."! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'MG 12/17/2020 20:04:34'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'MG 12/17/2020 20:04:34'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'MG 12/17/2020 20:04:34'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'MG 12/17/2020 20:04:34'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'MG 12/17/2020 20:04:34'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'MG 12/17/2020 20:04:34'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'MG 12/17/2020 20:04:34'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'MG 12/17/2020 20:04:34'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'MG 12/17/2020 20:04:35'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'MG 12/17/2020 20:04:35'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'MG 12/17/2020 20:04:35'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'MG 12/17/2020 20:04:35'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'MG 12/17/2020 20:04:35'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'MG 12/17/2020 20:04:35'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'MG 12/17/2020 20:04:35'!
PASSED!

!testRun: #DoorTest #test01DoorOccupiesPositionInEachRoom stamp: 'MG 12/17/2020 20:04:37'!
PASSED!

!testRun: #DoorTest #test02CanNotPutDoorAtInvalidPositionInAnyRoom stamp: 'MG 12/17/2020 20:04:37'!
PASSED!

!testRun: #DoorTest #test03CanNotPutDoorAtOccupiedPositionInAnyRoom stamp: 'MG 12/17/2020 20:04:37'!
PASSED!

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 20:04:37'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'MG 12/17/2020 20:04:38'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'MG 12/17/2020 20:04:38'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'MG 12/17/2020 20:04:38'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'MG 12/17/2020 20:04:38'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'MG 12/17/2020 20:04:38'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'MG 12/17/2020 20:04:38'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'MG 12/17/2020 20:04:38'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'MG 12/17/2020 20:04:38'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'MG 12/17/2020 20:04:39'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'MG 12/17/2020 20:04:39'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'MG 12/17/2020 20:04:39'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'MG 12/17/2020 20:04:39'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:04:53' prior: 50879769!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player moveForward.
		
	self assert: (player isAt: 2@1 heading: #North).
	self assert: player equals: (room2 at: 2@1).
	self assert: (room1 isEmptyAt: 1@0).! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 20:05:23' prior: 50879661 overrides: 16880792!
at: aPosition put: objectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	
	self assertPositionIsValid: aPosition.
	"self assertIsEmpty: aPosition."
	(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse: [self error: self class positionIsNotEmptyErrorDescription] ].
	
	(self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition tryPassing: objectOrPlayer at: aPosition in: self. 	
	].			
	
		
	contents at: aPosition put: objectOrPlayer ! !

!methodRemoval: NonPortableObject #tryPassing:at:in: stamp: 'MG 12/17/2020 20:05:41'!
tryPassing: objectOrPlayer at: aPosition in: aRoom 

	self subclassResponsibility 
	!

!methodRemoval: PortableObject #tryPassing:at:in: stamp: 'MG 12/17/2020 20:05:44'!
tryPassing: objectOrPlayer at: aPosition in: aRoom 

	self subclassResponsibility 
	!
!NonPassableStageObject methodsFor: 'nil' stamp: 'MG 12/17/2020 20:05:49' overrides: 50879490!
tryPassing: objectOrPlayer at: aPosition in: aRoom 

	self subclassResponsibility 
	! !
!NonPassableStageObject methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 20:09:42'!
at: aPosition tryPassing: objectOrPlayer in: aRoom 

	self subclassResponsibility 
	! !
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 20:09:42'!
at: aPosition tryPassing: objectOrPlayer in: aRoom 

	self subclassResponsibility 
	! !
!StageObject methodsFor: 'taken' stamp: 'MG 12/17/2020 20:09:42'!
at: aPosition tryPassing: objectOrPlayer in: aRoom 

	self subclassResponsibility 
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 20:09:42' prior: 50879912 overrides: 16880792!
at: aPosition put: objectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	
	self assertPositionIsValid: aPosition.
	"self assertIsEmpty: aPosition."
	(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse: [self error: self class positionIsNotEmptyErrorDescription] ].
	
	(self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition at: objectOrPlayer tryPassing: aPosition in: self. 	
	].			
	
		
	contents at: aPosition put: objectOrPlayer ! !

!methodRemoval: NonPassableStageObject #tryPassing:at:in: stamp: 'MG 12/17/2020 20:09:42'!
tryPassing: objectOrPlayer at: aPosition in: aRoom 

	self subclassResponsibility 
	!

!methodRemoval: Door #tryPassing:at:in: stamp: 'MG 12/17/2020 20:09:42'!
tryPassing: objectOrPlayer at: aPosition in: aRoom 

	self subclassResponsibility 
	!

!methodRemoval: StageObject #tryPassing:at:in: stamp: 'MG 12/17/2020 20:09:42'!
tryPassing: objectOrPlayer at: aPosition in: aRoom 

	self subclassResponsibility 
	!
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 20:10:17' prior: 50879971 overrides: 16880792!
at: aPosition put: objectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	
	self assertPositionIsValid: aPosition.
	"self assertIsEmpty: aPosition."
	(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse: [self error: self class positionIsNotEmptyErrorDescription] ].
	
	(self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition at: aPosition tryPassing: objectOrPlayer in: self. 	
	].			
	
		
	contents at: aPosition put: objectOrPlayer ! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 20:10:24' prior: 50880012 overrides: 16880792!
at: aPosition put: anObjectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	
	self assertPositionIsValid: aPosition.
	"self assertIsEmpty: aPosition."
	(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse: [self error: self class positionIsNotEmptyErrorDescription] ].
	
	(self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition at: aPosition tryPassing: anObjectOrPlayer in: self. 	
	].			
	
		
	contents at: aPosition put: anObjectOrPlayer ! !
!NonPassableStageObject methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 20:11:42' prior: 50879954 overrides: 50879964!
at: aPosition tryPassing: objectOrPlayer in: aRoom 

	aRoom atNonPassablePosition: aPosition pass: objectOrPlayer.
	! !
!Room methodsFor: 'nil' stamp: 'MG 12/17/2020 20:11:53'!
atNonPassablePosition: aPosition pass: objectOrPlayer.! !
!Room methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 20:11:55' prior: 50880069!
atNonPassablePosition: aPosition pass: objectOrPlayer! !
!Room methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 20:12:08' prior: 50880074!
atNonPassablePosition: aPosition pass: objectOrPlayer
	
	self error: self class positionIsNotEmptyErrorDescription! !
!Room methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 20:12:48'!
atNonPassableObjectPosition: aPosition pass: objectOrPlayer
	
	self error: self class positionIsNotEmptyErrorDescription! !
!NonPassableStageObject methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 20:12:48' prior: 50880063 overrides: 50879964!
at: aPosition tryPassing: objectOrPlayer in: aRoom 

	aRoom atNonPassableObjectPosition: aPosition pass: objectOrPlayer.
	! !

!methodRemoval: Room #atNonPassablePosition:pass: stamp: 'MG 12/17/2020 20:12:48'!
atNonPassablePosition: aPosition pass: objectOrPlayer
	
	self error: self class positionIsNotEmptyErrorDescription!
!PlayableCharacter methodsFor: 'nil' stamp: 'MG 12/17/2020 20:13:47'!
at: aPosition tryPassing: objectOrPlayer in: aRoom
	
	"aRoom atPlayerPosition: aPosition pass: "! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 20:14:04' prior: 50880106!
at: aPosition tryPassing: objectOrPlayer in: aRoom
	
	aRoom atPlayerPosition: aPosition pass: objectOrPlayer.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 20:14:11' prior: 50880113!
at: aPosition tryPassing: anObjectOrPlayer in: aRoom
	
	aRoom atPlayerPosition: aPosition pass: anObjectOrPlayer.! !
!NonPassableStageObject methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 20:14:20' prior: 50880093 overrides: 50879964!
at: aPosition tryPassing: anObjectOrPlayer in: aRoom 

	aRoom atNonPassableObjectPosition: aPosition pass: anObjectOrPlayer.
	! !
!StageObject methodsFor: 'taken' stamp: 'MG 12/17/2020 20:14:29' prior: 50879964!
at: aPosition tryPassing: anObjectOrPlayer in: aRoom 

	self subclassResponsibility 
	! !
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 20:14:41' prior: 50879959 overrides: 50880135!
at: aPosition tryPassing: anObjectOrPlayer in: aRoom 

	self subclassResponsibility 
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 20:15:09'!
atPlayerPosition: aPosition pass: anObjectOrPlayer.
	
	self error: self class positionIsNotEmptyErrorDescription! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 20:15:23' prior: 50880037 overrides: 16880792!
at: aPosition put: anObjectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	
	self assertPositionIsValid: aPosition.
	"self assertIsEmpty: aPosition."
	"(self isEmptyAt: aPosition) ifFalse: 
				 [ ((self at: aPosition) isKindOf: #Door ) ifTrue:[].
				((self at: aPosition) isKindOf: #Door ) ifFalse: [self error: self class positionIsNotEmptyErrorDescription] ]."
	
	(self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition at: aPosition tryPassing: anObjectOrPlayer in: self. 	
	].			
	
		
	contents at: aPosition put: anObjectOrPlayer ! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:15:36' prior: 50879894!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	"| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player moveForward.
		
	self assert: (player isAt: 2@1 heading: #North).
	self assert: player equals: (room2 at: 2@1).
	self assert: (room1 isEmptyAt: 1@0)."! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test21PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 20:15:39'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #DoorTest #test01DoorOccupiesPositionInEachRoom stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #DoorTest #test02CanNotPutDoorAtInvalidPositionInAnyRoom stamp: 'MG 12/17/2020 20:15:42'!
PASSED!

!testRun: #DoorTest #test03CanNotPutDoorAtOccupiedPositionInAnyRoom stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test21PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'MG 12/17/2020 20:15:43'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'MG 12/17/2020 20:15:44'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:15:58' prior: 50880179!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player moveForward.
		
	self assert: (player isAt: 2@1 heading: #North).
	self assert: player equals: (room2 at: 2@1).
	self assert: (room1 isEmptyAt: 1@0).! !

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 20:16:00'!
ERROR!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 20:16:00'!
ERROR!
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 20:16:41' prior: 50880141 overrides: 50880135!
at: aPosition tryPassing: anObjectOrPlayer in: aRoom 

	aRoom atDoorPosition: aPosition pass: anObjectOrPlayer.
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 20:16:51'!
atDoorPosition: aPosition pass: anObjectOrPlayer.
	
	self error: self class positionIsNotEmptyErrorDescription! !
!Room methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 20:17:36' prior: 50880503!
atDoorPosition: aPosition pass: anObjectOrPlayer.
	
	! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 20:18:42' prior: 50880154 overrides: 16880792!
at: aPosition put: anObjectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	
	self assertPositionIsValid: aPosition.
	(self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition at: aPosition tryPassing: anObjectOrPlayer in: self. 	
	].			
	
		
	contents at: aPosition put: anObjectOrPlayer ! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 20:18:50' prior: 50880515 overrides: 16880792!
at: aPosition put: anObjectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	
	self assertPositionIsValid: aPosition.
	(self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition at: aPosition tryPassing: anObjectOrPlayer in: self.].
			
	
		
	contents at: aPosition put: anObjectOrPlayer ! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 20:18:53' prior: 50880532 overrides: 16880792!
at: aPosition put: anObjectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	
	self assertPositionIsValid: aPosition.
	(self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition at: aPosition tryPassing: anObjectOrPlayer in: self].
			
	
		
	contents at: aPosition put: anObjectOrPlayer ! !
!Room methodsFor: 'contents -- private' stamp: 'MG 12/17/2020 20:19:40' prior: 50880510!
atDoorPosition: aPosition pass: anObjectOrPlayer
	| door |
	
	door := self at: aPosition.
	
	! !
!Room methodsFor: 'contents -- private' stamp: 'MG 12/17/2020 20:20:23' prior: 50880566!
atDoorPosition: aPosition pass: anObjectOrPlayer
	| door |
	
	door := self at: aPosition.
	door passPlayer: anObjectOrPlayer.
	! !
!Room methodsFor: 'contents -- private' stamp: 'MG 12/17/2020 20:22:58' prior: 50880572!
atDoorPosition: aPosition pass: anObjectOrPlayer
	| door |
	
	door := self at: aPosition.
	door passPlayer: anObjectOrPlayer from: self.
	! !
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 20:23:19'!
passPlayer: anObjectOrPlayer from: aRoom
	! !
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 20:24:44' prior: 50880586!
passPlayer: aPlayer from: aRoom
	aRoom = firstRoom ifTrue: [secondRoom at: aPlayer forwardPosition put: aPlayer]
					ifFalse: [secondRoom at: aPlayer forwardPosition put: aPlayer].! !

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 20:25:22'!
FAILURE!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 20:25:22'!
FAILURE!
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 20:27:19' prior: 50880590!
passPlayer: aPlayer from: aRoom
	| endingPosition |
	
	endingPosition := aPlayer position + aPlayer forwardPosition.
	
	aRoom = firstRoom ifTrue: [secondRoom at: endingPosition put: aPlayer]
					ifFalse: [secondRoom at: aPlayer endingPosition put: aPlayer].! !
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 20:27:27' prior: 50880607!
passPlayer: aPlayer from: aRoom
	| endingPosition |
	
	endingPosition := aPlayer position + aPlayer forwardPosition.
	
	aRoom = firstRoom ifTrue: [secondRoom at: endingPosition put: aPlayer]
					ifFalse: [secondRoom at: endingPosition put: aPlayer].! !

!testRun: #DoorTest #test01DoorOccupiesPositionInEachRoom stamp: 'MG 12/17/2020 20:27:31'!
PASSED!

!testRun: #DoorTest #test02CanNotPutDoorAtInvalidPositionInAnyRoom stamp: 'MG 12/17/2020 20:27:32'!
PASSED!

!testRun: #DoorTest #test03CanNotPutDoorAtOccupiedPositionInAnyRoom stamp: 'MG 12/17/2020 20:27:32'!
PASSED!

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 20:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'MG 12/17/2020 20:27:33'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'MG 12/17/2020 20:27:33'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'MG 12/17/2020 20:27:33'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'MG 12/17/2020 20:27:33'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'MG 12/17/2020 20:27:33'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'MG 12/17/2020 20:27:33'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'MG 12/17/2020 20:27:34'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'MG 12/17/2020 20:27:34'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'MG 12/17/2020 20:27:34'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'MG 12/17/2020 20:27:34'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'MG 12/17/2020 20:27:34'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'MG 12/17/2020 20:27:34'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'MG 12/17/2020 20:27:34'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'MG 12/17/2020 20:27:34'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'MG 12/17/2020 20:27:34'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'MG 12/17/2020 20:27:34'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'MG 12/17/2020 20:27:34'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'MG 12/17/2020 20:27:34'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'MG 12/17/2020 20:27:34'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'MG 12/17/2020 20:27:34'!
PASSED!

!testRun: #PlayableCharacterTest #test21PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 20:27:34'!
PASSED!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 20:27:34'!
FAILURE!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 20:27:34'!
FAILURE!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 20:27:40'!
FAILURE!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 20:27:40'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:27:57' prior: 50880470!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player moveForward.
		
	"self assert: (player isAt: 2@1 heading: #North)."
	self assert: player equals: (room2 at: 2@1).
	self assert: (room1 isEmptyAt: 1@0).! !

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 20:27:59'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:28:04' prior: 50880739!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player moveForward.
		
	self assert: (player isAt: 2@1 heading: #North).
	self assert: player equals: (room2 at: 2@1).
	self assert: (room1 isEmptyAt: 1@0).! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 20:32:05' prior: 50880549 overrides: 16880792!
at: aPosition put: anObjectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	
	self assertPositionIsValid: aPosition.
	(self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition at: aPosition tryPassing: anObjectOrPlayer in: self].
			
	
		
	contents at: aPosition put: anObjectOrPlayer
	 ! !
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 20:33:27' prior: 50880618!
passPlayer: aPlayer from: aRoom
	| endingPosition |
	
	endingPosition := aPlayer position + aPlayer forwardPosition.
	
	aRoom = firstRoom ifTrue: [secondRoom at: endingPosition put: aPlayer.
						   aPlayer changedToRoom: secondRoom.	
						]
					ifFalse: [secondRoom at: endingPosition put: aPlayer.
						   aPlayer changedToRoom: firstRoom.
						].! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 20:34:00'!
changedToRoom: anotherRoom
	
	room := anotherRoom.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'MG 12/17/2020 20:34:05'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'MG 12/17/2020 20:34:05'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'MG 12/17/2020 20:34:05'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test21PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 20:34:06'!
PASSED!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 20:34:06'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:35:11'!
test23PlayerMovingThroughTheDoorToInvalidPositionShouldFail
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #South in: room1.
	player moveForward.
		
	"self assert: (player isAt: 2@1 heading: #North).
	self assert: player equals: (room2 at: 2@1).
	self assert: (room1 isEmptyAt: 1@0)."! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:35:37' prior: 50880898!
test23PlayerMovingThroughTheDoorToInvalidPositionShouldFail
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #South in: room1.
	
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription .	
	"self assert: (player isAt: 2@1 heading: #North).
	self assert: player equals: (room2 at: 2@1).
	self assert: (room1 isEmptyAt: 1@0)."! !

!testRun: #PlayableCharacterTest #test23PlayerMovingThroughTheDoorToInvalidPositionShouldFail stamp: 'MG 12/17/2020 20:35:40'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:36:20' prior: 50880761!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	"Este test me termino quedando medio cargado con los doubleDispatchs que surgieron"
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player moveForward.
		
	self assert: (player isAt: 2@1 heading: #North).
	self assert: player equals: (room2 at: 2@1).
	self assert: (room1 isEmptyAt: 1@0).! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 20:36:43' prior: 50880779 overrides: 16880792!
at: aPosition put: anObjectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	
	self assertPositionIsValid: aPosition.
	(self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition at: aPosition tryPassing: anObjectOrPlayer in: self].
					
	contents at: aPosition put: anObjectOrPlayer
	 ! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 20:37:25'!
tryPassing: anObjectOrPlayer to: aPosition

	^ (self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition at: aPosition tryPassing: anObjectOrPlayer in: self]! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 20:37:25' prior: 50880963 overrides: 16880792!
at: aPosition put: anObjectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	
	self assertPositionIsValid: aPosition.
	self tryPassing: anObjectOrPlayer to: aPosition.
					
	contents at: aPosition put: anObjectOrPlayer
	 ! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 20:37:49' prior: 50880979!
tryPassing: anObjectOrPlayer to: aPosition

	(self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition at: aPosition tryPassing: anObjectOrPlayer in: self]! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:37:59' prior: 50880916!
test23PlayerMovingThroughTheDoorToInvalidPositionShouldFail
	
"	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #South in: room1.
	
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription .	
	self assert: (player isAt: 2@1 heading: #North).
	self assert: player equals: (room2 at: 2@1).
	self assert: (room1 isEmptyAt: 1@0)."! !

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 20:38:01'!
PASSED!

!testRun: #PlayableCharacterTest #test21PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 20:38:02'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'MG 12/17/2020 20:38:04'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'MG 12/17/2020 20:38:04'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'MG 12/17/2020 20:38:04'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'MG 12/17/2020 20:38:04'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'MG 12/17/2020 20:38:04'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'MG 12/17/2020 20:38:04'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'MG 12/17/2020 20:38:04'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'MG 12/17/2020 20:38:04'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'MG 12/17/2020 20:38:04'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'MG 12/17/2020 20:38:05'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'MG 12/17/2020 20:38:05'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'MG 12/17/2020 20:38:05'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'MG 12/17/2020 20:38:05'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'MG 12/17/2020 20:38:05'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'MG 12/17/2020 20:38:05'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'MG 12/17/2020 20:38:05'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'MG 12/17/2020 20:38:05'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'MG 12/17/2020 20:38:05'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'MG 12/17/2020 20:38:05'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'MG 12/17/2020 20:38:05'!
PASSED!

!testRun: #PlayableCharacterTest #test21PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 20:38:05'!
PASSED!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 20:38:05'!
PASSED!

!testRun: #PlayableCharacterTest #test23PlayerMovingThroughTheDoorToInvalidPositionShouldFail stamp: 'MG 12/17/2020 20:38:05'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'MG 12/17/2020 20:38:07'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'MG 12/17/2020 20:38:07'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'MG 12/17/2020 20:38:07'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'MG 12/17/2020 20:38:07'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'MG 12/17/2020 20:38:07'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'MG 12/17/2020 20:38:07'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'MG 12/17/2020 20:38:07'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'MG 12/17/2020 20:38:07'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'MG 12/17/2020 20:38:07'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'MG 12/17/2020 20:38:07'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'MG 12/17/2020 20:38:07'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'MG 12/17/2020 20:38:07'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'MG 12/17/2020 20:38:07'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'MG 12/17/2020 20:38:07'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'MG 12/17/2020 20:38:07'!
PASSED!

!testRun: #DoorTest #test01DoorOccupiesPositionInEachRoom stamp: 'MG 12/17/2020 20:38:09'!
PASSED!

!testRun: #DoorTest #test02CanNotPutDoorAtInvalidPositionInAnyRoom stamp: 'MG 12/17/2020 20:38:09'!
PASSED!

!testRun: #DoorTest #test03CanNotPutDoorAtOccupiedPositionInAnyRoom stamp: 'MG 12/17/2020 20:38:09'!
PASSED!

!testRun: #DoorTest #test04CanNotPutDoorInANonPortableObject stamp: 'MG 12/17/2020 20:38:09'!
PASSED!

----SNAPSHOT----(17 December 2020 20:38:12) CuisUniversity-4365.image priorSource: 17534544!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test21PlayerCanNotTakeDoor stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 20:38:14'!
PASSED!

!testRun: #PlayableCharacterTest #test23PlayerMovingThroughTheDoorToInvalidPositionShouldFail stamp: 'MG 12/17/2020 20:38:15'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'MG 12/17/2020 20:38:17'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'MG 12/17/2020 20:38:17'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'MG 12/17/2020 20:38:17'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'MG 12/17/2020 20:38:17'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'MG 12/17/2020 20:38:17'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'MG 12/17/2020 20:38:17'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'MG 12/17/2020 20:38:17'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'MG 12/17/2020 20:38:17'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'MG 12/17/2020 20:38:17'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'MG 12/17/2020 20:38:17'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'MG 12/17/2020 20:38:17'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'MG 12/17/2020 20:38:17'!
PASSED!
!Room methodsFor: 'contents -- private' stamp: 'MG 12/17/2020 20:40:16' prior: 50880147!
atPlayerPosition: aPosition pass: anObjectOrPlayer.
	"Tanto este como el nonPassable me quedaron con codigo repetido
	pero no me parecio tener otra alternativa."
	self error: self class positionIsNotEmptyErrorDescription! !
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 20:42:32' prior: 50880796!
passPlayer: aPlayer from: aRoom
	| endingPosition |
	
	endingPosition := aPlayer position + aPlayer forwardPosition.
	
	aRoom = firstRoom ifTrue: [endingPosition := positionInSecondRoom + aPlayer forwardPosition 
					           secondRoom at: endingPosition put: aPlayer.
						    aPlayer changedToRoom: secondRoom.	
						]
					ifFalse: [endingPosition := positionInSecondRoom + aPlayer forwardPosition
						    secondRoom at: endingPosition put: aPlayer.
						    aPlayer changedToRoom: firstRoom.
						].! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:43:54' prior: 50881013!
test23PlayerMovingThroughTheDoorToInvalidPositionShouldFail
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #South in: room1.
	
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription .	
	
	self assert: (player isAt: 1@0 heading: #South).
	self assert: player equals: (room1 at: 1@0).
! !

!testRun: #PlayableCharacterTest #test23PlayerMovingThroughTheDoorToInvalidPositionShouldFail stamp: 'MG 12/17/2020 20:43:55'!
PASSED!
!Room methodsFor: 'assertions' stamp: 'MG 12/17/2020 20:46:37'!
assertEmptyOrTryPassing: anObjectOrPlayer to: aPosition

	(self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition at: aPosition tryPassing: anObjectOrPlayer in: self]! !
!Room methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 20:46:37' prior: 50880990 overrides: 16880792!
at: aPosition put: anObjectOrPlayer
	"El nombre aStageObject puede confundir
	dado que este mensaje se utiliza en el move del jugador
	"
	
	self assertPositionIsValid: aPosition.
	self assertEmptyOrTryPassing: anObjectOrPlayer to: aPosition.
					
	contents at: aPosition put: anObjectOrPlayer
	 ! !

!methodRemoval: Room #tryPassing:to: stamp: 'MG 12/17/2020 20:46:37'!
tryPassing: anObjectOrPlayer to: aPosition

	(self isEmptyAt: aPosition) ifFalse: [ | objectOrPlayerAtPosition |
				objectOrPlayerAtPosition := self at: aPosition.
				objectOrPlayerAtPosition at: aPosition tryPassing: anObjectOrPlayer in: self]!
!Room methodsFor: 'contents -- private' stamp: 'MG 12/17/2020 20:48:04' prior: 50880579!
atDoorPosition: aPosition pass: anObjectOrPlayer
	
	| door |
	
	door := self at: aPosition.
	door passPlayer: anObjectOrPlayer from: self.
	! !
!Room methodsFor: 'contents -- private' stamp: 'MG 12/17/2020 20:48:55' prior: 50881416!
atDoorPosition: aPosition pass: anObjectOrPlayer
	
	| door |
	"Esto me sonaba raro por quien es responsable de mover las cosas
	pero dado que la room actual no conoce a la otra 'conectada'
	, la puerta se encarga de enviarle los mensajes a la room adecuada"
	door := self at: aPosition.
	door passPlayer: anObjectOrPlayer from: self.
	! !

PortableObject subclass: #Key
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Key category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 20:50:57'!
PortableObject subclass: #Key
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Key class methodsFor: 'nil' stamp: 'MG 12/17/2020 20:52:04'!
named: aName
	
	^ self new initializeNamed: aName. ! !
!Key methodsFor: 'nil' stamp: 'MG 12/17/2020 20:52:22'!
initializeNamed: aName
	
	name := aName.
	weight := 0. ! !
!Key methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 20:52:58' prior: 50881454!
initializeNamed: aName
	
	name := aName.
	"Decidi resolverlo de esta manera, dado que key
	es un PortableObject y tiene peso"
	weight := 0. ! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:54:17'!
test24PlayerMovingThroughLockedDoorShouldFail
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidPositionErrorDescription .	
	
	self assert: (player isAt: 1@0 heading: #North).
	self assert: player equals: (room1 at: 1@0).
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:54:34' prior: 50881466!
test24PlayerMovingThroughLockedDoorShouldFail
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door lockedDoorErrorDescription .	
	
	self assert: (player isAt: 1@0 heading: #North).
	self assert: player equals: (room1 at: 1@0).
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:56:12' prior: 50881486!
test24PlayerMovingThroughLockedDoorShouldFail
	
	| player backPackWithKey room1 room2  |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	backPackWithKey := Backpack. 
	player := PlayableCharacter named: 'Luigi' using: backPackWithKey at: 1@0 heading: #North in: room1.
	
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door lockedDoorErrorDescription .	
	
	self assert: (player isAt: 1@0 heading: #North).
	self assert: player equals: (room1 at: 1@0).
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:56:36'!
test25PlayerMovingThroughLockedDoorShouldFail
	
	| player backPackWithKey room1 room2  |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	backPackWithKey := Backpack. 
	player := PlayableCharacter named: 'Luigi' using: backPackWithKey at: 1@0 heading: #North in: room1.
	
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door lockedDoorErrorDescription .	
	
	self assert: (player isAt: 1@0 heading: #North).
	self assert: player equals: (room1 at: 1@0).
! !

!methodRemoval: PlayableCharacterTest #test24PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 20:56:36'!
test24PlayerMovingThroughLockedDoorShouldFail
	
	| player backPackWithKey room1 room2  |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	backPackWithKey := Backpack. 
	player := PlayableCharacter named: 'Luigi' using: backPackWithKey at: 1@0 heading: #North in: room1.
	
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door lockedDoorErrorDescription .	
	
	self assert: (player isAt: 1@0 heading: #North).
	self assert: player equals: (room1 at: 1@0).
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:57:37'!
test24PlayerUsingKeyOnDoorShouldBeClosed
	
	| player backPackWithKey room1 room2  |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	backPackWithKey := self defaultBackpack.
	
	player := PlayableCharacter named: 'Luigi' using: backPackWithKey at: 1@0 heading: #North in: room1.
	
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door lockedDoorErrorDescription .	
	
	self assert: (player isAt: 1@0 heading: #North).
	self assert: player equals: (room1 at: 1@0).
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 20:58:13' prior: 50881570!
test24PlayerUsingKeyOnDoorShouldBeClosed
	
	| player backPackWithKey room1 room2  |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	backPackWithKey := self defaultBackpack.
	backPackWithKey add: (Key named: '42').
	
	player := PlayableCharacter named: 'Luigi' using: backPackWithKey at: 1@0 heading: #North in: room1.
	
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door lockedDoorErrorDescription .	
	
	self assert: (player isAt: 1@0 heading: #North).
	self assert: player equals: (room1 at: 1@0).
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 21:00:21' prior: 50881592!
test24PlayerUsingKeyOnDoorShouldBeClosed
	
	| player backPackWithKey key room1 room2  |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	key := (Key named: '42').
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	backPackWithKey := self defaultBackpack.
	backPackWithKey add: key.
		
	player := PlayableCharacter named: 'Luigi' using: backPackWithKey at: 1@0 heading: #North in: room1.
	player useKey: key.
	
	self assert: player equals: (room1 at: 1@0).
	self assert: (room1 at: 1@1) isClosed.! !

!testRun: #PlayableCharacterTest #test24PlayerUsingKeyOnDoorShouldBeClosed stamp: 'MG 12/17/2020 21:00:30'!
ERROR!

!testRun: #PlayableCharacterTest #test24PlayerUsingKeyOnDoorShouldBeClosed stamp: 'MG 12/17/2020 21:00:30'!
ERROR!
!Key methodsFor: 'nil' stamp: 'MG 12/17/2020 21:01:09' overrides: 50876112!
assertCanAddTo: aBackpack
	
	aBackpack assertCanAddKey: self.! !
!Backpack methodsFor: 'adding - private' stamp: 'MG 12/17/2020 21:01:36'!
assertCanAddKey: aKey

! !

!testRun: #PlayableCharacterTest #test24PlayerUsingKeyOnDoorShouldBeClosed stamp: 'MG 12/17/2020 21:02:13'!
ERROR!

!testRun: #PlayableCharacterTest #test24PlayerUsingKeyOnDoorShouldBeClosed stamp: 'MG 12/17/2020 21:02:13'!
ERROR!

!testRun: #PlayableCharacterTest #test24PlayerUsingKeyOnDoorShouldBeClosed stamp: 'MG 12/17/2020 21:02:23'!
ERROR!

!testRun: #PlayableCharacterTest #test24PlayerUsingKeyOnDoorShouldBeClosed stamp: 'MG 12/17/2020 21:02:23'!
ERROR!
!PlayableCharacter methodsFor: 'key' stamp: 'MG 12/17/2020 21:02:51'!
useKey: aKey 
	self shouldBeImplemented.! !

!testRun: #PlayableCharacterTest #test24PlayerUsingKeyOnDoorShouldBeClosed stamp: 'MG 12/17/2020 21:02:54'!
ERROR!
!PlayableCharacter methodsFor: 'using objects' stamp: 'MG 12/17/2020 21:03:19' prior: 50881664!
useKey: aKey 
	
	! !
!PlayableCharacter methodsFor: 'using objects' stamp: 'MG 12/17/2020 21:04:52' prior: 50881672!
useKey: aKey 
	
	backpack includes: aKey.
	
	! !
!PlayableCharacter methodsFor: 'using objects' stamp: 'MG 12/17/2020 21:05:45' prior: 50881676!
useKey: aKey 
	
	backpack includes: aKey.
	room closeDoorIn: self forwardPosition.
	! !
!PlayableCharacter methodsFor: 'using objects' stamp: 'MG 12/17/2020 21:05:52' prior: 50881681!
useKey: aKey 
	
	"backpack includes: aKey."
	
	room closeDoorIn: self forwardPosition.
	! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 21:06:12'!
closeDoorIn: aDoorPosition
	! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 21:06:36' prior: 50881692!
closeDoorIn: aPosition
	
	self assertPositionIsValid: aPosition.
	! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 21:07:03' prior: 50881696!
closeDoorIn: aPosition
	
	self assertPositionIsValid: aPosition.
	! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 21:08:26' prior: 50881701!
closeDoorIn: aPosition
	
	self assertPositionIsValid: aPosition.
	"(self isEmptyAt: aPosition) ifTrue: []"
	(self at: aPosition) close.! !

StageObject subclass: #Door
	instanceVariableNames: 'closed firstRoom secondRoom positionInFirstRoom positionInSecondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 21:08:47'!
StageObject subclass: #Door
	instanceVariableNames: 'closed firstRoom secondRoom positionInFirstRoom positionInSecondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'initialization' stamp: 'MG 12/17/2020 21:09:00' prior: 50877775!
connectingRoom: aFirstRoom at: aPositionInFirstRoom toRoom: aSecondRoom at: aPositionInSecondRoom.
	
	closed := false.
	
	firstRoom := aFirstRoom.
	positionInFirstRoom := aPositionInFirstRoom.
	
	secondRoom := aSecondRoom.
	positionInSecondRoom := aPositionInSecondRoom.
	
	firstRoom at: aPositionInFirstRoom put: self.
	secondRoom at: aPositionInSecondRoom put: self.! !
!Door methodsFor: 'taken' stamp: 'MG 12/17/2020 21:09:28'!
isClosed
	
	^closed.! !
!PlayableCharacter methodsFor: 'using objects' stamp: 'MG 12/17/2020 21:10:16' prior: 50881687!
useKey: aKey 
	
	"backpack includes: aKey."
	
	room closeDoorIn: self forwardPosition with: aKey.
	! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 21:10:40'!
closeDoorIn: aPosition with: aKey
	
	self assertPositionIsValid: aPosition.
	"(self isEmptyAt: aPosition) ifTrue: []"
	(self at: aPosition) closeWith: aKey.! !

!methodRemoval: Room #closeDoorIn: stamp: 'MG 12/17/2020 21:11:08'!
closeDoorIn: aPosition
	
	self assertPositionIsValid: aPosition.
	"(self isEmptyAt: aPosition) ifTrue: []"
	(self at: aPosition) close.!

StageObject subclass: #Door
	instanceVariableNames: 'closed keyToOpen firstRoom secondRoom positionInFirstRoom positionInSecondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'MG 12/17/2020 21:11:44'!
StageObject subclass: #Door
	instanceVariableNames: 'closed keyToOpen firstRoom secondRoom positionInFirstRoom positionInSecondRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'initialization' stamp: 'MG 12/17/2020 21:12:12' prior: 50881731!
connectingRoom: aFirstRoom at: aPositionInFirstRoom toRoom: aSecondRoom at: aPositionInSecondRoom.
	
	closed := false.
	keyToOpen := nil.
	
	firstRoom := aFirstRoom.
	positionInFirstRoom := aPositionInFirstRoom.
	
	secondRoom := aSecondRoom.
	positionInSecondRoom := aPositionInSecondRoom.
	
	firstRoom at: aPositionInFirstRoom put: self.
	secondRoom at: aPositionInSecondRoom put: self.! !
!PlayableCharacter methodsFor: 'using objects' stamp: 'MG 12/17/2020 21:13:04' prior: 50881749!
useKey: aKey 
	
	"backpack includes: aKey."
	
	room changeDoorState: self forwardPosition with: aKey.
	! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 21:13:19'!
changeDoorStateIn: aPosition with: aKey
	
	self assertPositionIsValid: aPosition.
	"(self isEmptyAt: aPosition) ifTrue: []"
	(self at: aPosition) closeWith: aKey.! !

!methodRemoval: Room #closeDoorIn:with: stamp: 'MG 12/17/2020 21:14:25'!
closeDoorIn: aPosition with: aKey
	
	self assertPositionIsValid: aPosition.
	"(self isEmptyAt: aPosition) ifTrue: []"
	(self at: aPosition) closeWith: aKey.!

!methodRemoval: Room #changeDoorStateIn:with: stamp: 'MG 12/17/2020 21:14:27'!
changeDoorStateIn: aPosition with: aKey
	
	self assertPositionIsValid: aPosition.
	"(self isEmptyAt: aPosition) ifTrue: []"
	(self at: aPosition) closeWith: aKey.!
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 21:14:59'!
changeDoorState: aPosition with: aKey
	
	! !
!Room methodsFor: 'contents' stamp: 'MG 12/17/2020 21:15:29' prior: 50881831!
changeDoorState: aPosition with: aKey
	| door |
	
	door := self at: aPosition.
	door changeStateWith: aKey.
	! !
!Door methodsFor: 'state' stamp: 'MG 12/17/2020 21:18:12'!
changeStateWith: aKey
	
	closed := true.! !

!testRun: #PlayableCharacterTest #test24PlayerUsingKeyOnDoorShouldBeClosed stamp: 'MG 12/17/2020 21:18:16'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 21:18:38'!
test24PlayerUsingKeyOnNewDoorShouldCloseIt
	
	| player backPackWithKey key room1 room2  |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	key := (Key named: '42').
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	backPackWithKey := self defaultBackpack.
	backPackWithKey add: key.
		
	player := PlayableCharacter named: 'Luigi' using: backPackWithKey at: 1@0 heading: #North in: room1.
	player useKey: key.
	
	self assert: player equals: (room1 at: 1@0).
	self assert: (room1 at: 1@1) isClosed.! !

!methodRemoval: PlayableCharacterTest #test24PlayerUsingKeyOnDoorShouldBeClosed stamp: 'MG 12/17/2020 21:18:38'!
test24PlayerUsingKeyOnDoorShouldBeClosed
	
	| player backPackWithKey key room1 room2  |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	key := (Key named: '42').
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	backPackWithKey := self defaultBackpack.
	backPackWithKey add: key.
		
	player := PlayableCharacter named: 'Luigi' using: backPackWithKey at: 1@0 heading: #North in: room1.
	player useKey: key.
	
	self assert: player equals: (room1 at: 1@0).
	self assert: (room1 at: 1@1) isClosed.!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 21:19:33' prior: 50881527!
test25PlayerMovingThroughLockedDoorShouldFail
	
	| player backPackWithKey room1 room2  |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	backPackWithKey := Backpack .
	player := PlayableCharacter named: 'Luigi' using: backPackWithKey at: 1@0 heading: #North in: room1.
	
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door lockedDoorErrorDescription .	
	
	self assert: (player isAt: 1@0 heading: #North).
	self assert: player equals: (room1 at: 1@0).
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 21:19:56' prior: 50881888!
test25PlayerMovingThroughLockedDoorShouldFail
	
	| player backPackWithKey room1 room2 key  |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	key := Key named: '42'.
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	backPackWithKey := Backpack .
	player := PlayableCharacter named: 'Luigi' using: backPackWithKey at: 1@0 heading: #North in: room1.
	
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door lockedDoorErrorDescription .	
	
	self assert: (player isAt: 1@0 heading: #North).
	self assert: player equals: (room1 at: 1@0).
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 21:20:03' prior: 50881909!
test25PlayerMovingThroughLockedDoorShouldFail
	
	| player backPackWithKey room1 room2 key  |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	key := Key named: '42'.
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	backPackWithKey := Backpack add: key.
	
	player := PlayableCharacter named: 'Luigi' using: backPackWithKey at: 1@0 heading: #North in: room1.
	
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door lockedDoorErrorDescription .	
	
	self assert: (player isAt: 1@0 heading: #North).
	self assert: player equals: (room1 at: 1@0).
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 21:20:10' prior: 50881931!
test25PlayerMovingThroughLockedDoorShouldFail
	
	| player backPackWithKey room1 room2 key  |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	key := Key named: '42'.
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	backPackWithKey := Backpack add: key.
	
	player := PlayableCharacter named: 'Luigi' using: backPackWithKey at: 1@0 heading: #North in: room1.
	
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door lockedDoorErrorDescription .	
	
	self assert: (player isAt: 1@0 heading: #North).
	self assert: player equals: (room1 at: 1@0).
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 21:20:22' prior: 50881954!
test25PlayerMovingThroughLockedDoorShouldFail
	
	| player backPackWithKey room1 room2 key  |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	key := Key named: '42'.
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	backPackWithKey := Backpack add: key.
	
	player := PlayableCharacter named: 'Luigi' using: backPackWithKey at: 1@0 heading: #North in: room1.
	player useKey: key.
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door lockedDoorErrorDescription .	
	
	self assert: (player isAt: 1@0 heading: #North).
	self assert: player equals: (room1 at: 1@0).
! !

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:20:38'!
ERROR!

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:20:38'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 21:20:52' prior: 50881977!
test25PlayerMovingThroughLockedDoorShouldFail
	
	| player backPackWithKey room1 room2 key  |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	key := Key named: '42'.
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	backPackWithKey := self defaultBackpack add: key.
	
	player := PlayableCharacter named: 'Luigi' using: backPackWithKey at: 1@0 heading: #North in: room1.
	player useKey: key.
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door lockedDoorErrorDescription .	
	
	self assert: (player isAt: 1@0 heading: #North).
	self assert: player equals: (room1 at: 1@0).
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 21:21:14' prior: 50882008!
test25PlayerMovingThroughLockedDoorShouldFail
	
	| player backPackWithKey room1 room2 key  |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	key := Key named: '42'.
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	backPackWithKey := (self defaultBackpack) add: key.
	
	player := PlayableCharacter named: 'Luigi' using: backPackWithKey at: 1@0 heading: #North in: room1.
	player useKey: key.
	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Door lockedDoorErrorDescription .	
	
	self assert: (player isAt: 1@0 heading: #North).
	self assert: player equals: (room1 at: 1@0).
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 21:21:21' prior: 50881849!
test24PlayerUsingKeyOnNewDoorShouldCloseIt
	
	| player backPackWithKey key room1 room2  |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	key := (Key named: '42').
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	backPackWithKey := (self defaultBackpack) add: key.
		
	player := PlayableCharacter named: 'Luigi' using: backPackWithKey at: 1@0 heading: #North in: room1.
	player useKey: key.
	
	self assert: player equals: (room1 at: 1@0).
	self assert: (room1 at: 1@1) isClosed.! !

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:21:25'!
ERROR!

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:21:25'!
ERROR!
!Door class methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 21:21:40'!
lockedDoorErrorDescription
	self shouldBeImplemented.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'MG 12/17/2020 21:21:56' prior: 50882081!
lockedDoorErrorDescription
	
	^'Can not pass through locked door'! !

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:21:58'!
ERROR!

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:22:29'!
ERROR!

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:22:29'!
ERROR!

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:22:39'!
ERROR!

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:22:42'!
ERROR!

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:22:42'!
ERROR!

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:23:54'!
ERROR!

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:23:58'!
ERROR!

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:23:58'!
ERROR!

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:24:07'!
ERROR!

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:24:07'!
ERROR!

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:24:52'!
ERROR!
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 21:26:40' prior: 50881337!
passPlayer: aPlayer from: aRoom
	| endingPosition |
	
	endingPosition := aPlayer position + aPlayer forwardPosition.
	
	aRoom = firstRoom ifTrue: [endingPosition := positionInSecondRoom + aPlayer forwardPosition. 
					           secondRoom at: endingPosition put: aPlayer.
						    aPlayer changedToRoom: secondRoom.	
						]
					ifFalse: [endingPosition := positionInSecondRoom + aPlayer forwardPosition.
						    secondRoom at: endingPosition put: aPlayer.
						    aPlayer changedToRoom: firstRoom.
						].! !

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:26:47'!
FAILURE!

!testRun: #PlayableCharacterTest #test25PlayerMovingThroughLockedDoorShouldFail stamp: 'MG 12/17/2020 21:26:47'!
FAILURE!

!testRun: #PlayableCharacterTest #test23PlayerMovingThroughTheDoorToInvalidPositionShouldFail stamp: 'MG 12/17/2020 21:26:53'!
PASSED!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 21:26:54'!
FAILURE!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 21:26:54'!
FAILURE!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 21:27:04'!
FAILURE!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 21:27:18'!
FAILURE!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 21:27:18'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MG 12/17/2020 21:27:21' prior: 50880942!
test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom
	
	| player room1 room2 |
	
	room1 := self defaultRoom.
	room2 := self anotherRoom.
	
	Door connectingRoom: room1 at:1@1 toRoom: room2 at: 2@0.
	"Este test me termino quedando medio cargado con los doubleDispatchs que surgieron"
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player moveForward.
		
	"self assert: (player isAt: 2@1 heading: #North)."
	self assert: player equals: (room2 at: 2@1).
	self assert: (room1 isEmptyAt: 1@0).! !

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 21:27:23'!
ERROR!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 21:27:23'!
ERROR!
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 21:28:33' prior: 50882136!
passPlayer: aPlayer from: aRoom
	
	| endingPosition |
	
	endingPosition := aPlayer position + aPlayer forwardPosition.
	
	aRoom = firstRoom ifTrue: [endingPosition := positionInSecondRoom + aPlayer forwardPosition. 
					           secondRoom at: endingPosition put: aPlayer.
						    aPlayer changedToRoom: secondRoom.	
						]
					ifFalse: [endingPosition := positionInSecondRoom + aPlayer forwardPosition.
						    secondRoom at: endingPosition put: aPlayer.
						    aPlayer changedToRoom: firstRoom.
						].! !

!testRun: #PlayableCharacterTest #test24PlayerUsingKeyOnNewDoorShouldCloseIt stamp: 'MG 12/17/2020 21:29:33'!
PASSED!

!testRun: #PlayableCharacterTest #test23PlayerMovingThroughTheDoorToInvalidPositionShouldFail stamp: 'MG 12/17/2020 21:29:35'!
PASSED!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 21:29:36'!
ERROR!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 21:29:37'!
ERROR!

firstRoom at: 1@1!

secondRoom at: 2@0!
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 21:32:52' prior: 50882218!
passPlayer: aPlayer from: aRoom
	
	| endingPosition |
	
	endingPosition := 0.
	
	aRoom = firstRoom ifTrue: [endingPosition := positionInSecondRoom + aPlayer forwardPosition. 
					           secondRoom at: endingPosition put: aPlayer.
						    aPlayer changedToRoom: secondRoom.	
						]
					ifFalse: [endingPosition := positionInSecondRoom + aPlayer forwardPosition.
						    secondRoom at: endingPosition put: aPlayer.
						    aPlayer changedToRoom: firstRoom.
						].! !
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 21:34:08' prior: 50882255!
passPlayer: aPlayer from: aRoom
	
	aRoom = firstRoom ifTrue: [|endingPosition| 
						endingPosition := positionInSecondRoom + aPlayer forwardPosition. 
						secondRoom at: endingPosition put: aPlayer.
						aPlayer changedToRoom: secondRoom.	
						]
					ifFalse: [|endingPosition|
						endingPosition := positionInSecondRoom + aPlayer forwardPosition.
						secondRoom at: endingPosition put: aPlayer.
						aPlayer changedToRoom: firstRoom.
						].! !

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 21:34:15'!
ERROR!

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 21:34:15'!
ERROR!

aRoom = firstRoom!
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 21:40:40' prior: 50882273!
passPlayer: aPlayer from: aRoom
	
	
	aRoom = firstRoom ifTrue: [|endingPosition| 
						endingPosition := positionInSecondRoom + aPlayer forwardPosition. 
						secondRoom at: endingPosition put: aPlayer.
						aPlayer changedToRoom: secondRoom.	
						]
					ifFalse: [|endingPosition|
						endingPosition := positionInSecondRoom + aPlayer forwardPosition.
						secondRoom at: endingPosition put: aPlayer.
						aPlayer changedToRoom: firstRoom.
						].! !
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 21:41:21' prior: 50882299!
passPlayer: aPlayer from: aRoom
	
	
	aRoom = firstRoom ifTrue: [|endingPosition| 
						endingPosition :=  aPlayer forwardPosition - positionInFirstRoom + positionInSecondRoom. 
						secondRoom at: endingPosition put: aPlayer.
						aPlayer changedToRoom: secondRoom.	
						]
					ifFalse: [|endingPosition|
						endingPosition := positionInSecondRoom + aPlayer forwardPosition.
						secondRoom at: endingPosition put: aPlayer.
						aPlayer changedToRoom: firstRoom.
						].! !
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 21:41:46' prior: 50882316!
passPlayer: aPlayer from: aRoom
	
	
	aRoom = firstRoom ifTrue: [|endingPosition| 
						endingPosition :=  aPlayer forwardPosition - positionInFirstRoom + positionInSecondRoom. 
						secondRoom at: endingPosition put: aPlayer.
						aPlayer changedToRoom: secondRoom.	
						]
					ifFalse: [|endingPosition|
						endingPosition := aPlayer forwardPosition - positionInFirstRoom + positionInSecondRoom.
						secondRoom at: endingPosition put: aPlayer.
						aPlayer changedToRoom: firstRoom.
						].! !
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 21:44:19' prior: 50882334!
passPlayer: aPlayer from: aRoom
	
	
	aRoom = firstRoom ifTrue: [|endingPosition| 
						endingPosition :=  aPlayer forwardPosition - positionInFirstRoom + positionInSecondRoom. 
						secondRoom at: endingPosition put: aPlayer.
						aPlayer changedToRoom: secondRoom.	
						]
					ifFalse: [|endingPosition|
						endingPosition := aPlayer forwardPosition - positionInFirstRoom + positionInSecondRoom.
						secondRoom at: endingPosition put: aPlayer.
						aPlayer changedToRoom: firstRoom.
						].! !
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 21:44:33' prior: 50882353!
passPlayer: aPlayer from: aRoom
	
	
	aRoom = firstRoom ifTrue: [|endingPosition| 
						endingPosition :=  aPlayer forwardPosition - aPlayer position + positionInSecondRoom. 
						secondRoom at: endingPosition put: aPlayer.
						aPlayer changedToRoom: secondRoom.	
						]
					ifFalse: [|endingPosition|
						endingPosition := aPlayer forwardPosition - positionInFirstRoom + positionInSecondRoom.
						secondRoom at: endingPosition put: aPlayer.
						aPlayer changedToRoom: firstRoom.
						].! !
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 21:44:43' prior: 50882372!
passPlayer: aPlayer from: aRoom
	
	
	aRoom = firstRoom ifTrue: [|endingPosition| 
						endingPosition :=  aPlayer forwardPosition - aPlayer position + positionInSecondRoom. 
						secondRoom at: endingPosition put: aPlayer.
						aPlayer changedToRoom: secondRoom.	
						]
					ifFalse: [|endingPosition|
						endingPosition := aPlayer forwardPosition - aPlayer position + positionInSecondRoom.
						secondRoom at: endingPosition put: aPlayer.
						aPlayer changedToRoom: firstRoom.
						].! !

!testRun: #PlayableCharacterTest #test22PlayerMovingThroughTheDoorShouldAppearInTheOtherRoom stamp: 'MG 12/17/2020 21:44:53'!
PASSED!
!Door methodsFor: 'moving' stamp: 'MG 12/17/2020 21:45:21' prior: 50882391!
passPlayer: aPlayer from: aRoom
	

	aRoom = firstRoom ifTrue: [|endingPosition| 
						endingPosition :=  aPlayer forwardPosition - aPlayer position + positionInSecondRoom. 
						secondRoom at: endingPosition put: aPlayer.
						aPlayer changedToRoom: secondRoom.	
						]
					ifFalse: [|endingPosition|
						endingPosition := aPlayer forwardPosition - aPlayer position + positionInSecondRoom.
						secondRoom at: endingPosition put: aPlayer.
						aPlayer changedToRoom: firstRoom.
						].! !