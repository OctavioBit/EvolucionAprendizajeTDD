----STARTUP---- (17 December 2020 17:07:26) as /Users/dbenitez/uba/2c2020-IS1/Quiz/Recuperatorio2doParcial/CuisUniversity-4384.image!


!classRemoval: #PointsPortableObject stamp: 'DB 12/17/2020 17:07:35'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'DB 12/17/2020 17:07:36'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PortableObject stamp: 'DB 12/17/2020 17:07:36'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #NonPortableObject stamp: 'DB 12/17/2020 17:07:36'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #StageObject stamp: 'DB 12/17/2020 17:07:36'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #Room stamp: 'DB 12/17/2020 17:07:37'!
Object subclass: #Room
	instanceVariableNames: 'width height contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'DB 12/17/2020 17:07:37'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'DB 12/17/2020 17:07:37'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #Backpack stamp: 'DB 12/17/2020 17:07:38'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #RoomTest stamp: 'DB 12/17/2020 17:07:38'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'DB 12/17/2020 17:07:38'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #BackpackTest stamp: 'DB 12/17/2020 17:07:39'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

----STARTUP---- (17 December 2020 17:08:52) as /Users/dbenitez/uba/2c2020-IS1/Quiz/Recuperatorio2doParcial/CuisUniversity-4384.image!


!classRemoval: #PointsPortableObject stamp: 'DB 12/17/2020 17:09:08'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'DB 12/17/2020 17:09:08'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PortableObject stamp: 'DB 12/17/2020 17:09:09'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #NonPortableObject stamp: 'DB 12/17/2020 17:09:09'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #StageObject stamp: 'DB 12/17/2020 17:09:09'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #Room stamp: 'DB 12/17/2020 17:09:09'!
Object subclass: #Room
	instanceVariableNames: 'width height contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'DB 12/17/2020 17:09:10'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'DB 12/17/2020 17:09:10'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #Backpack stamp: 'DB 12/17/2020 17:09:11'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #RoomTest stamp: 'DB 12/17/2020 17:09:11'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'DB 12/17/2020 17:09:11'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #BackpackTest stamp: 'DB 12/17/2020 17:09:12'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/Quiz/Recuperatorio2doParcial/ISW1-2020-2C-Recuperatorio-2doParcial.st----!

TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'DB 12/17/2020 17:19:51'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest class methodsFor: 'nil' stamp: 'DB 12/17/2020 17:41:22'!
test01DoorsShouldBeCreatedWithDifferentsRooms

	

	! !
!DoorTest class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 17:41:57' prior: 50870891!
test01DoorsShouldBeCreatedWithDifferentsRooms

	

	| room1 |
	room1 := Room ofWidth: 4 andHeight: 4 
	
	! !
!DoorTest class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 17:42:04' prior: 50870896!
test01DoorsShouldBeCreatedWithDifferentsRooms

	

	| room1 |
	room1 := Room ofWidth: 4 andHeight: 4.
	
	
	
	! !

!methodRemoval: DoorTest class #test01DoorsShouldBeCreatedWithDifferentsRooms stamp: 'DB 12/17/2020 17:42:25'!
test01DoorsShouldBeCreatedWithDifferentsRooms

	

	| room1 |
	room1 := Room ofWidth: 4 andHeight: 4.
	
	
	
	!
!DoorTest methodsFor: 'nil' stamp: 'DB 12/17/2020 17:42:29'!
test01DoorsShouldBeCreatedWithDifferentsRooms

	

	| room1 |
	room1 := Room ofWidth: 4 andHeight: 4.! !

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'DB 12/17/2020 17:48:25'!
StageObject subclass: #Door
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 17:48:13' prior: 50870916!
test01DoorsShouldBeCreatedWithDifferentsRooms
	
	| room1 |
	room1 := Room ofWidth: 4 andHeight: 4.
	
	self should: [Door from: room1 at: 1@1 to: room1 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Door roomsMustBeDifferentsErrorDescription.! !

!testRun: #DoorTest #test01DoorsShouldBeCreatedWithDifferentsRooms stamp: 'DB 12/17/2020 17:48:31'!
ERROR!

!testRun: #DoorTest #test01DoorsShouldBeCreatedWithDifferentsRooms stamp: 'DB 12/17/2020 17:48:31'!
ERROR!
!Door class methodsFor: 'error descriptins' stamp: 'DB 12/17/2020 17:48:44'!
roomsMustBeDifferentsErrorDescription
	self shouldBeImplemented.! !
!Door class methodsFor: 'error descriptins' stamp: 'DB 12/17/2020 17:49:00' prior: 50870949!
roomsMustBeDifferentsErrorDescription
	^'rooms mush be differents'! !

!testRun: #DoorTest #test01DoorsShouldBeCreatedWithDifferentsRooms stamp: 'DB 12/17/2020 17:49:02'!
ERROR!
!Door class methodsFor: 'instance creation' stamp: 'DB 12/17/2020 17:49:15'!
from: aRoom at: aPoint to: aRoom3 at: aPoint4 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: aRoom at: aPoint to: aRoom3 at: aPoint4 ! !
!Door class methodsFor: 'instance creation' stamp: 'DB 12/17/2020 17:51:13' prior: 50870963!
from: sourceRoom at: aSourcePosition to: targetRoom at: targetPosition 

	sourceRoom = targetRoom ifTrue: [^self error: self roomsMustBeDifferentsErrorDescription ].

	^self new initializeFrom: sourceRoom at: aSourcePosition to: targetRoom at: targetPosition. ! !

!testRun: #DoorTest #test01DoorsShouldBeCreatedWithDifferentsRooms stamp: 'DB 12/17/2020 17:51:14'!
PASSED!

!testRun: #DoorTest #test01DoorsShouldBeCreatedWithDifferentsRooms stamp: 'DB 12/17/2020 17:51:17'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 17:53:33'!
test02_CanNotCreateADoorOutOfBoundariesOfRoom1
	
	| room1 |
	room1 := Room ofWidth: 4 andHeight: 4.
	
	self should: [Door from: room1 at: 1@1 to: room1 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Door roomsMustBeDifferentsErrorDescription.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 17:54:05'!
test01_CanNotCreateADoorsWithTheSameRooms
	
	| room1 |
	room1 := Room ofWidth: 4 andHeight: 4.
	
	self should: [Door from: room1 at: 1@1 to: room1 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Door roomsMustBeDifferentsErrorDescription.! !

!methodRemoval: DoorTest #test01DoorsShouldBeCreatedWithDifferentsRooms stamp: 'DB 12/17/2020 17:54:05'!
test01DoorsShouldBeCreatedWithDifferentsRooms
	
	| room1 |
	room1 := Room ofWidth: 4 andHeight: 4.
	
	self should: [Door from: room1 at: 1@1 to: room1 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Door roomsMustBeDifferentsErrorDescription.!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 17:54:27'!
test02_CanNotCreateADoorOutOfBoundaries
	
	| room1 |
	room1 := Room ofWidth: 4 andHeight: 4.
	
	self should: [Door from: room1 at: 1@1 to: room1 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Door roomsMustBeDifferentsErrorDescription.! !

!methodRemoval: DoorTest #test02_CanNotCreateADoorOutOfBoundariesOfRoom1 stamp: 'DB 12/17/2020 17:54:27'!
test02_CanNotCreateADoorOutOfBoundariesOfRoom1
	
	| room1 |
	room1 := Room ofWidth: 4 andHeight: 4.
	
	self should: [Door from: room1 at: 1@1 to: room1 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Door roomsMustBeDifferentsErrorDescription.!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 17:54:34' prior: 50871025!
test02_CanNotCreateADoorOutOfBoundaries
	
	| room1 |
	room1 := Room ofWidth: 4 andHeight: 4.
	
	self should: [Door from: room1 at: 5@1 to: room1 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Door roomsMustBeDifferentsErrorDescription.! !

!testRun: #DoorTest #test01_CanNotCreateADoorsWithTheSameRooms stamp: 'DB 12/17/2020 17:54:38'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundaries stamp: 'DB 12/17/2020 17:54:38'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 17:55:20' prior: 50871048!
test02_CanNotCreateADoorOutOfBoundaries
	
	| room1 room2 |
	room1 := Room ofWidth: 4 andHeight: 4.
	room2 := Room ofWidth: 5 andHeight: 3.
	
	self should: [Door from: room1 at: 5@1 to: room2 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room invalidPositionErrorDescription ! !

!testRun: #DoorTest #test01_CanNotCreateADoorsWithTheSameRooms stamp: 'DB 12/17/2020 17:55:30'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundaries stamp: 'DB 12/17/2020 17:55:30'!
ERROR!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundaries stamp: 'DB 12/17/2020 17:55:30'!
ERROR!
!Door class methodsFor: 'instance creation' stamp: 'DB 12/17/2020 17:56:58' prior: 50870973!
from: sourceRoom at: aSourcePosition to: targetRoom at: targetPosition 

	sourceRoom = targetRoom ifTrue: [^self error: self roomsMustBeDifferentsErrorDescription ]. 

	^self new initializeFrom: sourceRoom at: aSourcePosition to: targetRoom at: targetPosition. ! !

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundaries stamp: 'DB 12/17/2020 17:57:00'!
ERROR!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'DB 12/17/2020 17:57:11'!
StageObject subclass: #Door
	instanceVariableNames: 'sourceRoom_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'DB 12/17/2020 17:57:11'!
StageObject subclass: #Door
	instanceVariableNames: 'sourceRoom_CHANGE_ME sourcePosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'DB 12/17/2020 17:57:11'!
StageObject subclass: #Door
	instanceVariableNames: 'sourceRoom_CHANGE_ME sourcePosition targetRoom_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'DB 12/17/2020 17:57:11'!
StageObject subclass: #Door
	instanceVariableNames: 'sourceRoom_CHANGE_ME sourcePosition targetRoom_CHANGE_ME targetPosition_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'initialization' stamp: 'DB 12/17/2020 17:57:11'!
initializeFrom: sourceRoom at: aSourcePosition to: targetRoom at: targetPosition 
	self shouldBeImplemented.
	sourceRoom_CHANGE_ME := sourceRoom.
	sourcePosition := aSourcePosition.
	targetRoom_CHANGE_ME := targetRoom.
	targetPosition_CHANGE_ME := targetPosition.! !
!Door methodsFor: 'initialization' stamp: 'DB 12/17/2020 17:57:39' prior: 50871141!
initializeFrom: sourceRoom at: aSourcePosition to: targetRoom at: targetPosition 

	sourceRoom at: aSourcePosition put: self. 	! !

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundaries stamp: 'DB 12/17/2020 17:57:40'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorsWithTheSameRooms stamp: 'DB 12/17/2020 17:57:45'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundaries stamp: 'DB 12/17/2020 17:57:45'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 17:57:55'!
test03_CanNotCreateADoorOutOfBoundaries
	
	| room1 room2 |
	room1 := Room ofWidth: 4 andHeight: 4.
	room2 := Room ofWidth: 5 andHeight: 3.
	
	self should: [Door from: room1 at: 5@1 to: room2 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room invalidPositionErrorDescription ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 17:58:06' prior: 50871169!
test03_CanNotCreateADoorOutOfBoundaries
	
	| room1 room2 |
	room1 := Room ofWidth: 4 andHeight: 4.
	room2 := Room ofWidth: 5 andHeight: 3.
	
	self should: [Door from: room1 at: 1@1 to: room2 at: 1@4]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room invalidPositionErrorDescription ! !

!testRun: #DoorTest #test01_CanNotCreateADoorsWithTheSameRooms stamp: 'DB 12/17/2020 17:58:11'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundaries stamp: 'DB 12/17/2020 17:58:11'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundaries stamp: 'DB 12/17/2020 17:58:11'!
FAILURE!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundaries stamp: 'DB 12/17/2020 17:58:11'!
FAILURE!
!Door methodsFor: 'initialization' stamp: 'DB 12/17/2020 17:59:25' prior: 50871152!
initializeFrom: sourceRoom at: aSourcePosition to: targetRoom at: targetPosition 

	sourceRoom at: aSourcePosition put: self. 	
	targetRoom at: targetPosition put: self. ! !

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundaries stamp: 'DB 12/17/2020 17:59:26'!
PASSED!

StageObject subclass: #Door
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'DB 12/17/2020 17:59:37'!
StageObject subclass: #Door
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'initialization' stamp: 'DB 12/17/2020 17:59:49' prior: 50871207!
initializeFrom: sourceRoom at: sourcePosition to: targetRoom at: targetPosition 

	sourceRoom at: sourcePosition put: self. 	
	targetRoom at: targetPosition put: self. ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:00:07'!
test02_CanNotCreateADoorOutOfBoundariesRoom1
	
	| room1 room2 |
	room1 := Room ofWidth: 4 andHeight: 4.
	room2 := Room ofWidth: 5 andHeight: 3.
	
	self should: [Door from: room1 at: 5@1 to: room2 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room invalidPositionErrorDescription ! !

!methodRemoval: DoorTest #test02_CanNotCreateADoorOutOfBoundaries stamp: 'DB 12/17/2020 18:00:07'!
test02_CanNotCreateADoorOutOfBoundaries
	
	| room1 room2 |
	room1 := Room ofWidth: 4 andHeight: 4.
	room2 := Room ofWidth: 5 andHeight: 3.
	
	self should: [Door from: room1 at: 5@1 to: room2 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room invalidPositionErrorDescription !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:00:15'!
test03_CanNotCreateADoorOutOfBoundariesRoom2
	
	| room1 room2 |
	room1 := Room ofWidth: 4 andHeight: 4.
	room2 := Room ofWidth: 5 andHeight: 3.
	
	self should: [Door from: room1 at: 1@1 to: room2 at: 1@4]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room invalidPositionErrorDescription ! !

!methodRemoval: DoorTest #test03_CanNotCreateADoorOutOfBoundaries stamp: 'DB 12/17/2020 18:00:15'!
test03_CanNotCreateADoorOutOfBoundaries
	
	| room1 room2 |
	room1 := Room ofWidth: 4 andHeight: 4.
	room2 := Room ofWidth: 5 andHeight: 3.
	
	self should: [Door from: room1 at: 1@1 to: room2 at: 1@4]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room invalidPositionErrorDescription !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:03:01'!
test04_CanNotCreateADoorAtOccupiedPositionRoom1
	
	| room1 room2 |
	room1 := Room ofWidth: 4 andHeight: 4.
	room1 at: 1@1 put: StageObject new. 
	room2 := Room ofWidth: 5 andHeight: 3.
	
	self should: [Door from: room1 at: 1@1 to: room2 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room invalidPositionErrorDescription ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:04:05' prior: 50871290!
test04_CanNotCreateADoorAtOccupiedPositionRoom1
	
	| room1 room2 |
	room1 := Room ofWidth: 4 andHeight: 4.
	room1 at: 1@1 put: StageObject new. 
	room2 := Room ofWidth: 5 andHeight: 3.
	
	self should: [Door from: room1 at: 1@1 to: room2 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room positionIsNotEmptyErrorDescription ! !

!testRun: #DoorTest #test01_CanNotCreateADoorsWithTheSameRooms stamp: 'DB 12/17/2020 18:04:08'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 18:04:08'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 18:04:08'!
PASSED!

!testRun: #DoorTest #test04_CanNotCreateADoorAtOccupiedPositionRoom1 stamp: 'DB 12/17/2020 18:04:08'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:04:23'!
test04_CanNotCreateADoorAtOccupiedPositionRoom2
	
	| room1 room2 |
	room1 := Room ofWidth: 4 andHeight: 4.
	
	room2 := Room ofWidth: 5 andHeight: 3.
	room2 at: 1@1 put: StageObject new. 
	
	self should: [Door from: room1 at: 1@1 to: room2 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room positionIsNotEmptyErrorDescription ! !

!testRun: #DoorTest #test01_CanNotCreateADoorsWithTheSameRooms stamp: 'DB 12/17/2020 18:04:27'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 18:04:27'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 18:04:27'!
PASSED!

!testRun: #DoorTest #test04_CanNotCreateADoorAtOccupiedPositionRoom1 stamp: 'DB 12/17/2020 18:04:27'!
PASSED!

!testRun: #DoorTest #test04_CanNotCreateADoorAtOccupiedPositionRoom2 stamp: 'DB 12/17/2020 18:04:27'!
PASSED!

!methodRemoval: DoorTest #test04_CanNotCreateADoorAtOccupiedPositionRoom1 stamp: 'DB 12/17/2020 18:04:37'!
test04_CanNotCreateADoorAtOccupiedPositionRoom1
	
	| room1 room2 |
	room1 := Room ofWidth: 4 andHeight: 4.
	room1 at: 1@1 put: StageObject new. 
	room2 := Room ofWidth: 5 andHeight: 3.
	
	self should: [Door from: room1 at: 1@1 to: room2 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room positionIsNotEmptyErrorDescription !

!methodRemoval: DoorTest #test04_CanNotCreateADoorAtOccupiedPositionRoom2 stamp: 'DB 12/17/2020 18:04:40'!
test04_CanNotCreateADoorAtOccupiedPositionRoom2
	
	| room1 room2 |
	room1 := Room ofWidth: 4 andHeight: 4.
	
	room2 := Room ofWidth: 5 andHeight: 3.
	room2 at: 1@1 put: StageObject new. 
	
	self should: [Door from: room1 at: 1@1 to: room2 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room positionIsNotEmptyErrorDescription !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:05:03'!
defaultRoom1

	^ Room ofWidth: 4 andHeight: 4! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:05:03' prior: 50871002!
test01_CanNotCreateADoorsWithTheSameRooms
	
	| room1 |
	room1 := self defaultRoom1.
	
	self should: [Door from: room1 at: 1@1 to: room1 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Door roomsMustBeDifferentsErrorDescription.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:05:11' prior: 50871395!
test01_CanNotCreateADoorsWithTheSameRooms
	
	| room |
	room := self defaultRoom1.
	
	self should: [Door from: room at: 1@1 to: room at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Door roomsMustBeDifferentsErrorDescription.! !

!testRun: #DoorTest #test01_CanNotCreateADoorsWithTheSameRooms stamp: 'DB 12/17/2020 18:05:13'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:05:41' prior: 50871240!
test02_CanNotCreateADoorOutOfBoundariesRoom1
	
	| room1 room2 |
	room1 := self defaultRoom1.
	room2 := Room ofWidth: 5 andHeight: 3.
	
	self should: [Door from: room1 at: 5@1 to: room2 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room invalidPositionErrorDescription ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:05:55'!
defaultRoom2

	^ Room ofWidth: 5 andHeight: 3! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:05:55' prior: 50871420!
test02_CanNotCreateADoorOutOfBoundariesRoom1
	
	| room1 room2 |
	room1 := self defaultRoom1.
	room2 := self defaultRoom2.
	
	self should: [Door from: room1 at: 5@1 to: room2 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room invalidPositionErrorDescription ! !

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 18:05:57'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorsWithTheSameRooms stamp: 'DB 12/17/2020 18:05:57'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 18:05:57'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 18:05:57'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:06:19' prior: 50871265!
test03_CanNotCreateADoorOutOfBoundariesRoom2
	
	| room1 room2 |
	room1 := self defaultRoom1.
	room2 := self defaultRoom2.
	
	self should: [Door from: room1 at: 1@1 to: room2 at: 1@4]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room invalidPositionErrorDescription ! !

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 18:06:21'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorsWithTheSameRooms stamp: 'DB 12/17/2020 18:06:21'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 18:06:21'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 18:06:21'!
PASSED!
!Door class methodsFor: 'instance creation' stamp: 'DB 12/17/2020 18:11:03' prior: 50871088!
from: sourceRoom at: aSourcePosition to: targetRoom at: targetPosition 

	^self new initializeFrom: sourceRoom at: aSourcePosition to: targetRoom at: targetPosition. ! !

!methodRemoval: DoorTest #test01_CanNotCreateADoorsWithTheSameRooms stamp: 'DB 12/17/2020 18:11:30'!
test01_CanNotCreateADoorsWithTheSameRooms
	
	| room |
	room := self defaultRoom1.
	
	self should: [Door from: room at: 1@1 to: room at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Door roomsMustBeDifferentsErrorDescription.!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:12:52'!
test01_CanNotCreateADoorInTheSameRoomSamePosition
	
	| room  |
	room := self defaultRoom1.
	
	self should: [Door from: room at: 1@1 to: room at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room invalidPositionErrorDescription ! !

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 18:12:56'!
FAILURE!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 18:12:56'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 18:12:56'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 18:12:56'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:13:08' prior: 50871508!
test01_CanNotCreateADoorInTheSameRoomSamePosition
	
	| room  |
	room := self defaultRoom1.
	
	self should: [Door from: room at: 1@1 to: room at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room positionIsNotEmptyErrorDescription ! !

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 18:13:11'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 18:13:11'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 18:13:11'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:16:29'!
test04_ADoorMustKnowPositionInRooms
	
	| room1 room2 door |
	room1 := self defaultRoom1.
	room2 := self defaultRoom2.
	
	door := Door from: room1 at: 1@1 to: room2 at: 2@2.
	
	
	self assert: 1@1 equals: (door positionIn: room1).
	self assert: 2@2 equals: (door positionIn: room2).! !

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 18:16:41'!
ERROR!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 18:16:41'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:16:49'!
positionIn: aRoom 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:17:22' prior: 50871572!
positionIn: aRoom 
	^aRoom positionOf: self.! !

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 18:17:23'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 18:17:27'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 18:17:27'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 18:17:27'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 18:17:27'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:17:52' prior: 50871554!
test04_ADoorMustKnowPositionInRooms
	
	| room1 room2 door |
	room1 := self defaultRoom1.
	room2 := self defaultRoom2.
	
	door := Door from: room1 at: 1@1 to: room2 at: 2@2.
	
	self assert: 1@1 equals: (door positionIn: room1).
	self assert: 2@2 equals: (door positionIn: room2).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:18:44'!
test05_DoorNoFoundInRoom
	
	| room1 room2 door anotherRoom |
	room1 := self defaultRoom1.
	room2 := self defaultRoom2.
	anotherRoom := self defaultRoom2 .
	
	door := Door from: room1 at: 1@1 to: room2 at: 2@2.
	
	self assert: 1@1 equals: (door positionIn: room1).
	self assert: 2@2 equals: (door positionIn: room2).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:19:46' prior: 50871610!
test05_DoorNoFoundInRoom
	
	| room1 room2 door anotherRoom |
	room1 := self defaultRoom1.
	room2 := self defaultRoom2.
	anotherRoom := self defaultRoom2 .
	
	door := Door from: room1 at: 1@1 to: room2 at: 2@2.
	
	self should: [door positionIn: anotherRoom]
		 raise: Error 
			withMessageText: Room invalidPositionErrorDescription ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 18:20:11' prior: 50871623!
test05_DoorNoFoundInRoom
	
	| room1 room2 door anotherRoom |
	room1 := self defaultRoom1.
	room2 := self defaultRoom2.
	anotherRoom := self defaultRoom2 .
	
	door := Door from: room1 at: 1@1 to: room2 at: 2@2.
	
	self should: [door positionIn: anotherRoom]
		 raise: Error 
			withMessageText: Room objectNotInRoomErrorDescription .! !

!testRun: #DoorTest #test05_DoorNoFoundInRoom stamp: 'DB 12/17/2020 18:20:13'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 18:20:13'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 18:20:13'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 18:20:13'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 18:20:13'!
PASSED!

!testRun: #DoorTest #test05_DoorNoFoundInRoom stamp: 'DB 12/17/2020 18:20:13'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 18:21:48' prior: 50869942!
test20_takeFromNonPortableObjectsIsRecursive

	| room  player box paper anotherPaper |

	room := self defaultRoom.

	paper := self paper.
	anotherPaper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper. anotherPaper }.
	room at: 0@1 put: box.
	
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
	
	self assert: box equals: (room at: 0@1).
	self deny: box isEmpty.
	self assert: (box includes: anotherPaper).
	self assert: (player backpackIncludes: paper).
	self assert: 1 equals: player backpackSize! !

!methodRemoval: DoorTest #test05_DoorNoFoundInRoom stamp: 'DB 12/17/2020 18:22:05'!
test05_DoorNoFoundInRoom
	
	| room1 room2 door anotherRoom |
	room1 := self defaultRoom1.
	room2 := self defaultRoom2.
	anotherRoom := self defaultRoom2 .
	
	door := Door from: room1 at: 1@1 to: room2 at: 2@2.
	
	self should: [door positionIn: anotherRoom]
		 raise: Error 
			withMessageText: Room objectNotInRoomErrorDescription .!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 18:22:51' prior: 50871670!
test20_takeFromNonPortableObjectsIsRecursive

	| room  player box paper anotherPaper |

	room := self defaultRoom.

	paper := self paper.
	anotherPaper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper. anotherPaper }.
	room at: 0@1 put: box.
	
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
	
	self assert: box equals: (room at: 0@1).
	self deny: box isEmpty.
	self assert: (box includes: anotherPaper).
	self assert: (player backpackIncludes: paper).
	self assert: 1 equals: player backpackSize! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HAW 12/14/2020 19:19:55' prior: 50871708!
test20_takeFromNonPortableObjectsIsRecursive

	| room  player box paper anotherPaper |

	room := self defaultRoom.
	paper := self paper.
	anotherPaper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper. anotherPaper }.
	room at: 0@1 put: box.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
	
	self assert: box equals: (room at: 0@1).
	self deny: box isEmpty.
	self assert: (box includes: anotherPaper).
	self assert: (player backpackIncludes: paper).
	self assert: 1 equals: player backpackSize! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 18:23:51'!
test21_moveToAnotherRoom

	| room  player box paper anotherPaper |

	room := self defaultRoom.
	paper := self paper.
	anotherPaper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper. anotherPaper }.
	room at: 0@1 put: box.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
	
	self assert: box equals: (room at: 0@1).
	self deny: box isEmpty.
	self assert: (box includes: anotherPaper).
	self assert: (player backpackIncludes: paper).
	self assert: 1 equals: player backpackSize! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 18:24:10' prior: 50871757!
test21_moveToAnotherRoom

	| room  player box paper anotherPaper anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	
	paper := self paper.
	anotherPaper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper. anotherPaper }.
	room at: 0@1 put: box.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
	
	self assert: box equals: (room at: 0@1).
	self deny: box isEmpty.
	self assert: (box includes: anotherPaper).
	self assert: (player backpackIncludes: paper).
	self assert: 1 equals: player backpackSize! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 18:27:56' prior: 50871781!
test21_moveToAnotherRoom

	| room  player box paper anotherPaper anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door from: room at: 0@1 to: anotherRoom  at: 4@2.	
	
	paper := self paper.
	anotherPaper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper. anotherPaper }.
	room at: 0@1 put: box.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
	
	self assert: box equals: (room at: 0@1).
	self deny: box isEmpty.
	self assert: (box includes: anotherPaper).
	self assert: (player backpackIncludes: paper).
	self assert: 1 equals: player backpackSize! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 18:28:05' prior: 50871807!
test21_moveToAnotherRoom

	| room  player box paper anotherPaper anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door from: room at: 0@1 to: anotherRoom at: 4@2.	
	
	paper := self paper.
	anotherPaper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper. anotherPaper }.
	room at: 0@1 put: box.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
	
	self assert: box equals: (room at: 0@1).
	self deny: box isEmpty.
	self assert: (box includes: anotherPaper).
	self assert: (player backpackIncludes: paper).
	self assert: 1 equals: player backpackSize! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 18:29:29' prior: 50871834!
test21_moveToAnotherRoom

	| room  player box paper anotherPaper anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door from: room at: 0@1 to: anotherRoom at: 4@2.	
	
	paper := self paper.
	anotherPaper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper. anotherPaper }.
	room at: 0@1 put: box.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player moveForward 
	
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 18:31:06' prior: 50871861!
test21_moveToAnotherRoom

	| room  player box paper anotherPaper anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door from: room at: 0@1 to: anotherRoom at: 4@2.	
	
	paper := self paper.
	anotherPaper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper. anotherPaper }.
	room at: 0@1 put: box.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player moveForward.
	
	self assert: anotherRoom equals: (player currentRoom).
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 18:31:46' prior: 50871879!
test21_moveToAnotherRoom

	| room  player box paper anotherPaper anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door from: room at: 0@1 to: anotherRoom at: 4@2.	
	
	paper := self paper.
	anotherPaper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper. anotherPaper }.
	room at: 0@1 put: box.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player moveForward.
	
	self assert: anotherRoom equals: (player currentRoom).
	self assert: 4@3 equals: (player position).
	! !

!testRun: #PlayableCharacterTest #test21_moveToAnotherRoom stamp: 'DB 12/17/2020 18:31:49'!
ERROR!

!testRun: #PlayableCharacterTest #test21_moveToAnotherRoom stamp: 'DB 12/17/2020 18:31:49'!
ERROR!

!testRun: #PlayableCharacterTest #test21_moveToAnotherRoom stamp: 'DB 12/17/2020 18:32:16'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 18:32:41' prior: 50871899!
test21_moveToAnotherRoom

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door from: room at: 0@1 to: anotherRoom at: 4@2.	
	
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player moveForward.
	
	self assert: anotherRoom equals: (player currentRoom).
	self assert: 4@3 equals: (player position).
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 18:32:58' prior: 50871930!
test21_moveToAnotherRoom

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door from: room at: 0@1 to: anotherRoom at: 4@2.	
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	player moveForward.
	
	self assert: anotherRoom equals: (player currentRoom).
	self assert: 4@3 equals: (player position).
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 18:33:03'!
PASSED!

!testRun: #PlayableCharacterTest #test21_moveToAnotherRoom stamp: 'DB 12/17/2020 18:33:03'!
ERROR!

!testRun: #PlayableCharacterTest #test21_moveToAnotherRoom stamp: 'DB 12/17/2020 18:33:03'!
ERROR!
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 18:37:59' prior: 50870535!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove targetObject |
	
	toMove := self at: aSourcePosition. 
	
	targetObject := self at: aTargetPosition.
	
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 18:38:50' prior: 50872044!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove targetObject |
	
	toMove := self at: aSourcePosition. 
	
	targetObject := self at: aTargetPosition.
	
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !

!testRun: #PlayableCharacterTest #test21_moveToAnotherRoom stamp: 'DB 12/17/2020 18:40:25'!
ERROR!
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 18:41:26' prior: 50872054!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove targetObject |
	
	toMove := self at: aSourcePosition. 
	
	targetObject := self at: aTargetPosition.
	
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 18:46:07' prior: 50872068!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition. 
	
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !

!testRun: #PlayableCharacterTest #test21_moveToAnotherRoom stamp: 'DB 12/17/2020 18:46:09'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'DB 12/17/2020 18:47:35' prior: 50870297!
forwardPosition

	^ self position + heading forwardPoint! !

!testRun: #PlayableCharacterTest #test21_moveToAnotherRoom stamp: 'DB 12/17/2020 18:47:40'!
ERROR!

!testRun: #PlayableCharacterTest #test21_moveToAnotherRoom stamp: 'DB 12/17/2020 18:47:48'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'DB 12/17/2020 18:53:22' prior: 50870311!
moveTo: aNewPosition
	
	room moveFrom: self position to: aNewPosition.
		! !

!testRun: #PlayableCharacterTest #test21_moveToAnotherRoom stamp: 'DB 12/17/2020 18:53:59'!
ERROR!
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 18:58:33' prior: 50870528 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aStageObject ! !
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 19:07:33' prior: 50872078!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition. 
	
	contents removeKey: aSourcePosition.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 19:11:50'!
test21_canNotTakeADoor

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self should: 
		[player take.]
		raise: Error
		withMessageText: PlayableCharacter cannotTakeADoorErrorDescription
	
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 19:12:03'!
_moveToAnotherRoom

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door from: room at: 0@1 to: anotherRoom at: 4@2.	
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	player moveForward.
	
	self assert: anotherRoom equals: (player currentRoom).
	self assert: 4@3 equals: (player position).
	! !

!methodRemoval: PlayableCharacterTest #test21_moveToAnotherRoom stamp: 'DB 12/17/2020 19:12:03'!
test21_moveToAnotherRoom

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door from: room at: 0@1 to: anotherRoom at: 4@2.	
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	player moveForward.
	
	self assert: anotherRoom equals: (player currentRoom).
	self assert: 4@3 equals: (player position).
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 19:14:07' prior: 50872125!
test21_canNotTakeADoor

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	
	"self 
		should: [ player take ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room objectNotInRoomErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty ]
			
			"
	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakeA
			]
	
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 19:16:40' prior: 50872172!
test21_canNotTakeADoor

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakeADoor.
			self assert: player backpackIsEmpty 
		]
	
	
	
! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 19:16:48'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 19:16:48'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 19:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 19:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 19:16:48'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 19:16:48'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 19:16:48'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 19:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 19:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 19:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 19:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 19:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:16:48'!
ERROR!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:16:48'!
ERROR!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 19:16:48'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 19:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 19:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 19:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 19:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 19:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:16:48'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 19:16:59'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HAW 12/14/2020 19:09:28' prior: 50872090!
forwardPosition

	^ self position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HAW 12/14/2020 18:27:14' prior: 50872101!
moveTo: aNewPosition
	
	room moveFrom: self position to: aNewPosition.
		! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 19:18:13'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 19:18:39'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 19:18:39'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 19:18:39'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 19:18:39'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 19:18:39'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 19:18:39'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 19:18:39'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 19:18:39'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 19:18:39'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 19:18:39'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 19:18:39'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 19:18:39'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:18:39'!
ERROR!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:18:39'!
ERROR!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 19:18:39'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 19:18:39'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 19:18:39'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 19:18:39'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 19:18:39'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 19:18:39'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:18:39'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 19:18:41'!
ERROR!
!Room methodsFor: 'contents' stamp: 'HAW 12/14/2020 18:23:18' prior: 50872118!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !
!Room methodsFor: 'contents' stamp: 'HAW 12/14/2020 18:23:18' prior: 50872395!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 19:19:51'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:19:51'!
ERROR!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:19:51'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:20:00'!
canNotTakeADoor
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:20:16' prior: 50872495!
canNotTakeADoor
	^'Can not take a door'! !

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:20:17'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:20:38'!
canNotTakeADoorErrorDescription
	^'Can not take a door'! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:20:38' prior: 50872197!
test21_canNotTakeADoor

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakeADoorErrorDescription.
			self assert: player backpackIsEmpty 
		]
	
	
	
! !

!methodRemoval: PlayableCharacter class #canNotTakeADoor stamp: 'DB 12/17/2020 19:20:38'!
canNotTakeADoor
	^'Can not take a door'!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 19:20:42'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:20:42'!
ERROR!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:20:42'!
ERROR!
!Door methodsFor: 'initialization' stamp: 'DB 12/17/2020 19:22:33' overrides: 50870658!
takenBy: aPlayableCharacter 
	^self error: self cannotTakeADoorErrorDescription! !
!Door class methodsFor: 'instance creation' stamp: 'DB 12/17/2020 19:22:47'!
cannotTakeADoorErrorDescription
	^'Can not take a door'! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 19:23:02' prior: 50872514!
test21_canNotTakeADoor

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Door canNotTakeADoorErrorDescription.
			self assert: player backpackIsEmpty 
		]
	
	
	
! !

!methodRemoval: PlayableCharacter class #canNotTakeADoorErrorDescription stamp: 'DB 12/17/2020 19:23:10'!
canNotTakeADoorErrorDescription
	^'Can not take a door'!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 19:23:13'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:23:13'!
ERROR!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:23:13'!
ERROR!
!Door methodsFor: 'initialization' stamp: 'DB 12/17/2020 19:23:31' prior: 50872619 overrides: 50870658!
takenBy: aPlayableCharacter 
	^self error: self class cannotTakeADoorErrorDescription! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 19:23:34'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:23:34'!
ERROR!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:23:34'!
ERROR!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:23:49'!
ERROR!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:24:34'!
ERROR!
!Door methodsFor: 'initialization' stamp: 'DB 12/17/2020 19:26:15' prior: 50872735 overrides: 50870658!
takenBy: aPlayableCharacter 
	aPlayableCharacter takeDoorObject: self! !
!PlayableCharacter methodsFor: 'taking - private' stamp: 'DB 12/17/2020 19:26:48'!
takeDoorObject: aPortableObject 
		
	self error: self class cannotTakeADoorErrorDescription.! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'DB 12/17/2020 19:27:05'!
cannotTakeADoorErrorDescription
	^'can not take a door'! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 19:27:20' prior: 50872629!
test21_canNotTakeADoor

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeADoorErrorDescription.
			self assert: player backpackIsEmpty 
		]
	
	
	
! !

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:27:26'!
ERROR!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:27:26'!
ERROR!
!PlayableCharacter methodsFor: 'taking - private' stamp: 'DB 12/17/2020 19:28:01' prior: 50872835!
takeDoorObject: aPortableObject 
		
	^self error: self class cannotTakeADoorErrorDescription.! !

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:28:02'!
ERROR!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'DB 12/17/2020 19:28:40'!
signalCannotTakeADoor
	
	self error: self cannotTakeADoorErrorDescription .! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'DB 12/17/2020 19:28:42' prior: 50872880!
signalCannotTakeADoor
	
	^self error: self cannotTakeADoorErrorDescription .! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'DB 12/17/2020 19:28:45' prior: 50872886!
signalCannotTakeADoor
	^self error: self cannotTakeADoorErrorDescription .! !
!PlayableCharacter methodsFor: 'taking - private' stamp: 'DB 12/17/2020 19:29:02' prior: 50872871!
takeDoorObject: aPortableObject 
		
	^self class signalCannotTakeADoor .! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 19:29:05'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:29:05'!
ERROR!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:29:05'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 19:29:49' prior: 50872846!
test21_canNotTakeADoor

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeADoorErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty 
		]
	
	
	
! !

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:29:51'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 19:30:41'!
test22_canNotAddADoorToAPortableObject

	| room  player anotherRoom door |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	door := Door from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeADoorErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty 
		]
	
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 19:31:23'!
test22_canNotAddADoorToANonPortableObject

	| room  player anotherRoom door |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	door := Door from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeADoorErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty 
		]
	
	
	
! !

!methodRemoval: PlayableCharacterTest #test22_canNotAddADoorToAPortableObject stamp: 'DB 12/17/2020 19:31:23'!
test22_canNotAddADoorToAPortableObject

	| room  player anotherRoom door |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	door := Door from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeADoorErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty 
		]
	
	
	
!

!methodRemoval: PlayableCharacterTest #test22_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 19:32:03'!
test22_canNotAddADoorToANonPortableObject

	| room  player anotherRoom door |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	door := Door from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeADoorErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty 
		]
	
	
	
!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:32:28'!
test05_canNotAddADoorToANonPortableObject

	| room  player anotherRoom door box paper |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	door := Door from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	room := self defaultRoom.
	paper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper }.
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:32:48' prior: 50873091!
test05_canNotAddADoorToANonPortableObject

	| room  anotherRoom door box paper |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	door := Door from: room at: 0@1 to: anotherRoom at: 4@2.	
	
	room := self defaultRoom.
	paper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper }.
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:33:59' prior: 50873108!
test05_canNotAddADoorToANonPortableObject

	| door box |
	door := Door from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 4@2.
		
	box := NonPortableObject named: 'Box' withAll: { door }.
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:36:22' prior: 50873121!
test05_canNotAddADoorToANonPortableObject

	| door |
	door := Door from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 4@2.
		
	self 
		should: [NonPortableObject named: 'Box' withAll: { door }] 
		raise: Error - MessageNotUnderstood 
		withMessageText: NonPortableObject invalidObjetToAddErrorDescription.
	
	
	
	! !

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 19:36:29'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 19:36:29'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 19:36:29'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 19:36:29'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 19:36:29'!
ERROR!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 19:36:29'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:36:40' prior: 50873131!
test05_canNotAddADoorToANonPortableObject

	| door |
	door := Door from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.
		
	self 
		should: [NonPortableObject named: 'Box' withAll: { door }] 
		raise: Error - MessageNotUnderstood 
		withMessageText: NonPortableObject invalidObjetToAddErrorDescription.
	
	
	
	! !

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 19:36:42'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 19:36:42'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 19:36:42'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 19:36:42'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 19:36:42'!
ERROR!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 19:36:42'!
ERROR!
!NonPortableObject class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:36:52'!
invalidObjetToAddErrorDescription
	self shouldBeImplemented.! !
!NonPortableObject class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:37:13' prior: 50873197!
invalidObjetToAddErrorDescription
	^'invalid object to add in the nonportable object'! !

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 19:37:13'!
FAILURE!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'DB 12/17/2020 19:39:14' prior: 50870727!
named: aName withAll: aCollectionOfStageObjects 

	(aCollectionOfStageObjects anySatisfy: [:aStageObject | aStageObject isKindOf: Door] ) ifTrue: [self error: self class invalidObjetToAddErrorDescription ].
	
	^self new initializeNamed: aName withAll: aCollectionOfStageObjects ! !

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 19:39:15'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'DB 12/17/2020 19:39:37' prior: 50873213!
named: aName withAll: aCollectionOfStageObjects 

	(aCollectionOfStageObjects anySatisfy: [:aStageObject | aStageObject isKindOf: Door] ) ifTrue: [self error: self invalidObjetToAddErrorDescription ].
	
	^self new initializeNamed: aName withAll: aCollectionOfStageObjects ! !

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 19:39:49'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 19:39:49'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 19:39:49'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 19:39:49'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 19:39:49'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:42:25'!
test06_canNotOpenADoorWithAnotherKey

	| door key |
	door := Door from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.


	key := PortableObject named: 'key'.
	door open: key.
		
	self 
		should: [NonPortableObject named: 'Box' withAll: { door }] 
		raise: Error - MessageNotUnderstood 
		withMessageText: NonPortableObject invalidObjetToAddErrorDescription.
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:42:49' prior: 50873257!
test06_canNotOpenADoorWithAnotherKey

	| door key |
	door := Door from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.


	key := PortableObject named: 'key'.
	
	"Una puerta s�lo puede ser abierta con la llave (key) que fue cerrada, y que el jugador debe tener en su backpack para poder hacerlo. La llave no se pierde al abrir la puerta, siempre queda en el &#8203;backpack.&#8203;"
	
	door open: key.
		
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:44:25' prior: 50873272!
test06_canNotOpenADoorWithAnotherKey

	| door key |
	door := Door from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.


	key := PortableObject named: 'key'.
	
	" 
	 	Una puerta s�lo puede ser abierta con la llave (key) que fue cerrada, y que el jugador debe tener en su backpack para poder hacerlo. 
		La llave no se pierde al abrir la puerta, siempre queda en el backpack
	
	"
	
	door open: key.
		
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:46:51' prior: 50873289!
test06_canNotOpenADoorWithAnotherKey

	| door key |
	door := Door from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	key := PortableObject named: 'key'.
	
	" 
	 	Una puerta s�lo puede ser abierta con la llave (key) que fue cerrada, y que el jugador debe tener en su backpack para poder hacerlo. 
		La llave no se pierde al abrir la puerta, siempre queda en el backpack
	
	"
	
	door open: key.
		
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:50:03' prior: 50873306!
test06_canNotOpenADoorWithAnotherKey

	| door key |
	key :=  NoPointsPortableObject named: 'key' weighing: 50.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	
	
	" 
	 	Una puerta s�lo puede ser abierta con la llave (key) que fue cerrada, y que el jugador debe tener en su backpack para poder hacerlo. 
		La llave no se pierde al abrir la puerta, siempre queda en el backpack
	
	"
	
	door open: key.
		
	
	
	
	! !
!Door class methodsFor: 'instance creation' stamp: 'DB 12/17/2020 19:50:42'!
withKey: key from: sourceRoom at: aSourcePosition to: targetRoom at: targetPosition 

	^self new initializeFrom: sourceRoom at: aSourcePosition to: targetRoom at: targetPosition. ! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:50:42' prior: 50872986!
test21_canNotTakeADoor

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door withKey: self key from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeADoorErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty 
		]
	
	
	
! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:50:42' prior: 50872140!
_moveToAnotherRoom

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door withKey: self key from: room at: 0@1 to: anotherRoom at: 4@2.	
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	player moveForward.
	
	self assert: anotherRoom equals: (player currentRoom).
	self assert: 4@3 equals: (player position).
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:50:42' prior: 50871437!
test02_CanNotCreateADoorOutOfBoundariesRoom1
	
	| room1 room2 |
	room1 := self defaultRoom1.
	room2 := self defaultRoom2.
	
	self should: [Door withKey: self key from: room1 at: 5@1 to: room2 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room invalidPositionErrorDescription ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:50:42' prior: 50871533!
test01_CanNotCreateADoorInTheSameRoomSamePosition
	
	| room  |
	room := self defaultRoom1.
	
	self should: [Door withKey: self key from: room at: 1@1 to: room at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room positionIsNotEmptyErrorDescription ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:50:42' prior: 50871463!
test03_CanNotCreateADoorOutOfBoundariesRoom2
	
	| room1 room2 |
	room1 := self defaultRoom1.
	room2 := self defaultRoom2.
	
	self should: [Door withKey: self key from: room1 at: 1@1 to: room2 at: 1@4]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room invalidPositionErrorDescription ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:50:42' prior: 50873164!
test05_canNotAddADoorToANonPortableObject

	| door |
	door := Door withKey: self key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.
		
	self 
		should: [NonPortableObject named: 'Box' withAll: { door }] 
		raise: Error - MessageNotUnderstood 
		withMessageText: NonPortableObject invalidObjetToAddErrorDescription.
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:50:42' prior: 50871598!
test04_ADoorMustKnowPositionInRooms
	
	| room1 room2 door |
	room1 := self defaultRoom1.
	room2 := self defaultRoom2.
	
	door := Door withKey: self key from: room1 at: 1@1 to: room2 at: 2@2.
	
	self assert: 1@1 equals: (door positionIn: room1).
	self assert: 2@2 equals: (door positionIn: room2).! !

!methodRemoval: Door class #from:at:to:at: stamp: 'DB 12/17/2020 19:50:42'!
from: sourceRoom at: aSourcePosition to: targetRoom at: targetPosition 

	^self new initializeFrom: sourceRoom at: aSourcePosition to: targetRoom at: targetPosition. !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 19:50:54'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 19:50:54'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 19:50:54'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 19:50:54'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 19:50:54'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 19:50:54'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 19:50:54'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 19:50:54'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 19:50:54'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 19:50:54'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 19:50:54'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 19:50:54'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 19:50:54'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 19:50:54'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 19:50:55'!
ERROR!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 19:50:55'!
ERROR!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 19:50:55'!
ERROR!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 19:50:55'!
ERROR!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 19:50:55'!
ERROR!

!testRun: #DoorTest #test06_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 19:50:55'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:50:55'!
ERROR!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 19:50:55'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 19:50:55'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:51:21'!
defaultKey

	^ NoPointsPortableObject named: 'key' weighing: 50! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:51:21' prior: 50873323!
test06_canNotOpenADoorWithAnotherKey

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	
	
	" 
	 	Una puerta s�lo puede ser abierta con la llave (key) que fue cerrada, y que el jugador debe tener en su backpack para poder hacerlo. 
		La llave no se pierde al abrir la puerta, siempre queda en el backpack
	
	"
	
	door open: key.
		
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:51:36' prior: 50873657!
test06_canNotOpenADoorWithAnotherKey

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	
	
	" 
	 	Una puerta s�lo puede ser abierta con la llave (key) que fue cerrada, y que el jugador debe tener en su backpack para poder hacerlo. 
		La llave no se pierde al abrir la puerta, siempre queda en el backpack
	
	"
	
	door open: key.
		
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:51:46' prior: 50873401!
test01_CanNotCreateADoorInTheSameRoomSamePosition
	
	| room  |
	room := self defaultRoom1.
	
	self should: [Door withKey: self defaultKey from: room at: 1@1 to: room at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room positionIsNotEmptyErrorDescription ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:51:52' prior: 50873388!
test02_CanNotCreateADoorOutOfBoundariesRoom1
	
	| room1 room2 |
	room1 := self defaultRoom1.
	room2 := self defaultRoom2.
	
	self should: [Door withKey: self defaultKey from: room1 at: 5@1 to: room2 at: 1@1]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room invalidPositionErrorDescription ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:51:58' prior: 50873413!
test03_CanNotCreateADoorOutOfBoundariesRoom2
	
	| room1 room2 |
	room1 := self defaultRoom1.
	room2 := self defaultRoom2.
	
	self should: [Door withKey: self defaultKey from: room1 at: 1@1 to: room2 at: 1@4]
	 raise: Error - MessageNotUnderstood 
		 withMessageText: Room invalidPositionErrorDescription ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:52:03' prior: 50873440!
test04_ADoorMustKnowPositionInRooms
	
	| room1 room2 door |
	room1 := self defaultRoom1.
	room2 := self defaultRoom2.
	
	door := Door withKey: self defaultKey from: room1 at: 1@1 to: room2 at: 2@2.
	
	self assert: 1@1 equals: (door positionIn: room1).
	self assert: 2@2 equals: (door positionIn: room2).! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:52:10' prior: 50873426!
test05_canNotAddADoorToANonPortableObject

	| door |
	door := Door withKey: self defaultKey from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.
		
	self 
		should: [NonPortableObject named: 'Box' withAll: { door }] 
		raise: Error - MessageNotUnderstood 
		withMessageText: NonPortableObject invalidObjetToAddErrorDescription.
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:52:34' prior: 50873674!
test06_canNotOpenADoorWithAnotherKey

	| door key anotherKey |
	key :=  self defaultKey.
	anotherKey := self defaultKey .
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	
	
	" 
	 	Una puerta s�lo puede ser abierta con la llave (key) que fue cerrada, y que el jugador debe tener en su backpack para poder hacerlo. 
		La llave no se pierde al abrir la puerta, siempre queda en el backpack
	
	"
	
	door open: key.
		
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:53:41' prior: 50873756!
test06_canNotOpenADoorWithAnotherKey

	| door key anotherKey |
	key :=  self defaultKey.
	anotherKey := self defaultKey .
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	
	
	" 
	 	Una puerta s�lo puede ser abierta con la llave (key) que fue cerrada, y que el jugador debe tener en su backpack para poder hacerlo. 
		La llave no se pierde al abrir la puerta, siempre queda en el backpack
	
	"
	
	self 
		should: [door open: anotherKey.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidKeyErrorDescription.
	
	
		
	
	
	
	! !

!testRun: #DoorTest #test06_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 19:53:55'!
ERROR!

!testRun: #DoorTest #test06_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 19:53:55'!
ERROR!
!Door class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:54:03'!
invalidKeyErrorDescription
	self shouldBeImplemented.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:54:16' prior: 50873802!
invalidKeyErrorDescription
	^'invalid key'! !

!testRun: #DoorTest #test06_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 19:54:17'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:54:30'!
open: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:54:43' prior: 50873814!
open: aNoPointsPortableObject 
	 ^self error: self class invalidKeyErrorDescription .! !

!testRun: #DoorTest #test06_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 19:54:44'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:54:51' prior: 50873774!
test06_canNotOpenADoorWithAnotherKey

	| door key anotherKey |
	key :=  self defaultKey.
	anotherKey := self defaultKey .
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	self 
		should: [door open: anotherKey.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidKeyErrorDescription.
	
	
		
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:55:00'!
test06_canNotCloseADoorWithAnotherKey

	| door key anotherKey |
	key :=  self defaultKey.
	anotherKey := self defaultKey .
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	self 
		should: [door open: anotherKey.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidKeyErrorDescription.
	
	
		
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:55:10'!
test07_canNotOpenADoorWithAnotherKey

	| door key anotherKey |
	key :=  self defaultKey.
	anotherKey := self defaultKey .
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	self 
		should: [door open: anotherKey.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidKeyErrorDescription.
	
	
		
	
	
	
	! !

!methodRemoval: DoorTest #test06_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 19:55:10'!
test06_canNotOpenADoorWithAnotherKey

	| door key anotherKey |
	key :=  self defaultKey.
	anotherKey := self defaultKey .
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	self 
		should: [door open: anotherKey.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidKeyErrorDescription.
	
	
		
	
	
	
	!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 19:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:55:16'!
ERROR!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 19:55:16'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:55:16'!
ERROR!
!PlayableCharacterTest methodsFor: 'defaults' stamp: 'DB 12/17/2020 19:55:53'!
defaultKey

	^ NoPointsPortableObject named: 'key' weighing: 50! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 19:56:06' prior: 50873350!
test21_canNotTakeADoor

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door withKey: self defaultKey from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeADoorErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty 
		]
	
	
	
! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 19:56:10'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 19:56:10'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:56:25' prior: 50873842!
test06_canNotCloseADoorWithAnotherKey

	| door key anotherKey |
	key :=  self defaultKey.
	anotherKey := self defaultKey .
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	self 
		should: [door close: anotherKey.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidKeyErrorDescription.
	
	
		
	
	
	
	! !

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 19:56:29'!
ERROR!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 19:56:29'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:56:34'!
close: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:56:49' prior: 50874324!
close: aNoPointsPortableObject 
	^self error self class invalidKeyErrorDescription .! !

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 19:56:50'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:56:58'!
error
	self shouldBeImplemented.! !

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 19:57:03'!
FAILURE!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:57:26' prior: 50874329!
close: aNoPointsPortableObject 

	^self error self class invalidKeyErrorDescription .! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:57:36' prior: 50874346!
close: aKey 

	^self error self class invalidKeyErrorDescription .! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:57:39' prior: 50874352!
close: aKey 

	^self error: self class invalidKeyErrorDescription .! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:57:47' prior: 50873819!
open: aKey 
	 ^self error: self class invalidKeyErrorDescription .! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 19:57:58'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 19:57:58'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 19:59:57'!
test08_aDoorCanBeOpenWithTheValidKey

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door open: key.
	
	self assert: #Open equals: door state.
	
	
		
	
	
	
	! !

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:00:06'!
ERROR!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:00:06'!
ERROR!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:00:15'!
ERROR!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'DB 12/17/2020 20:01:00'!
StageObject subclass: #Door
	instanceVariableNames: 'key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'DB 12/17/2020 20:01:27'!
StageObject subclass: #Door
	instanceVariableNames: 'key state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:01:25' prior: 50874362!
open: aKey 

	(key := aKey) ifFalse: [ ^self error: self class invalidKeyErrorDescription].
	
	state := #Open.! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:01:30' prior: 50874599!
open: aKey 

	(key := aKey) ifFalse: [ ^self error: self class invalidKeyErrorDescription].
	state := #Open.! !

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:01:30'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:01:46' prior: 50874562!
test08_aDoorCanBeOpenWithTheValidKey

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door open: key.
	
	self assert: #Open equals: (door state).
	
	
		
	
	
	
	! !

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:01:51'!
ERROR!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:01:51'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:01:57' prior: 50874606!
open: aKey 

	(key = aKey) ifFalse: [ ^self error: self class invalidKeyErrorDescription].
	state := #Open.! !

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:01:58'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:02:06'!
state
	self shouldBeImplemented.
	^state! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:02:10' prior: 50874642!
state
	^state! !

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:02:12'!
PASSED!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:02:16'!
ERROR!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:02:16'!
ERROR!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:02:27'!
FAILURE!
!Door class methodsFor: 'instance creation' stamp: 'DB 12/17/2020 20:03:20' prior: 50873340!
withKey: akey from: sourceRoom at: aSourcePosition to: targetRoom at: targetPosition 

	^self new initializeWith: akey from: sourceRoom at: aSourcePosition to: targetRoom at: targetPosition. ! !
!Door methodsFor: 'initialization' stamp: 'DB 12/17/2020 20:04:22'!
initializeWith: akey from: sourceRoom at: sourcePosition to: targetRoom at: targetPosition

	sourceRoom at: sourcePosition put: self. 	
	targetRoom at: targetPosition put: self. 
	
	key := akey.
	state := #Open.! !

!methodRemoval: Door #initializeFrom:at:to:at: stamp: 'DB 12/17/2020 20:04:26'!
initializeFrom: sourceRoom at: sourcePosition to: targetRoom at: targetPosition 

	sourceRoom at: sourcePosition put: self. 	
	targetRoom at: targetPosition put: self. !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 20:04:31'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 20:04:31'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:05:01'!
test08_canNotOpenADoorIfItIsOpened

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door open: key.
	
	self assert: #Open equals: (door state).
	
	
		
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:05:32' prior: 50874888!
test08_canNotOpenADoorIfItIsOpened

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door open: key.
	
	self assert: #Opened equals: (door state).
	
	
		
	
	
	
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:05:39' prior: 50874633!
open: aKey 

	(key = aKey) ifFalse: [ ^self error: self class invalidKeyErrorDescription].
	state := #Opened.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:07:02'!
test09_canNotOpenADoorIfItIsOpened

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door open: key.
	
	self assert: #Opened equals: (door state).
	
	
		
	
	
	
	! !

!methodRemoval: DoorTest #test08_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 20:07:02'!
test08_canNotOpenADoorIfItIsOpened

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door open: key.
	
	self assert: #Opened equals: (door state).
	
	
		
	
	
	
	!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:08:10' prior: 50874916!
test09_canNotOpenADoorIfItIsOpened

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door open: key.
	self assert: #Opened equals: (door state).
	
	self 
		should: [door open: key.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidStateErrorDescription. 
	
	
		
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:08:31' prior: 50874616!
test08_aDoorCanBeOpenWithTheValidKey

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door open: key.
	
	self assert: #Opened equals: (door state).
	
	
		
	
	
	
	! !

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 20:09:16'!
ERROR!

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 20:09:16'!
ERROR!
!Door class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:09:31'!
invalidStateErrorDescription
	self shouldBeImplemented.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:09:42' prior: 50874970!
invalidStateErrorDescription
	^'invalid state'! !

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 20:09:43'!
FAILURE!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:10:52' prior: 50874910!
open: aKey 

	
	
	(key = aKey) ifFalse: [ ^self error: self class invalidKeyErrorDescription].
	(state = #Closed) ifTrue: [^self error: self class invalidStateErrorDescription .].
	state := #Opened.! !

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 20:10:53'!
FAILURE!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:11:29' prior: 50874983!
open: aKey 

	
	
	(key = aKey) ifFalse: [ ^self error: self class invalidKeyErrorDescription].
	(state = #Closed) ifFalse: [^self error: self class invalidStateErrorDescription .].
	state := #Opened.! !

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 20:11:31'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:11:43'!
test09_canNotCloseADoorIfItIsClosed

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door open: key.
	self assert: #Opened equals: (door state).
	
	self 
		should: [door open: key.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidStateErrorDescription. 
	
	
		
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:12:00' prior: 50875008!
test09_canNotCloseADoorIfItIsClosed

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door close key.
	self assert: #Closed equals: (door state).
	
	self 
		should: [door close: key.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidStateErrorDescription. 
	
	
		
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:12:02' prior: 50875023!
test09_canNotCloseADoorIfItIsClosed

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door close: key.
	self assert: #Closed equals: (door state).
	
	self 
		should: [door close: key.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidStateErrorDescription. 
	
	
		
	
	
	
	! !

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 20:12:05'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 20:12:05'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 20:12:05'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 20:12:05'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 20:12:05'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 20:12:05'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 20:12:05'!
PASSED!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:12:05'!
ERROR!

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 20:12:05'!
ERROR!

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 20:12:05'!
ERROR!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:12:11'!
ERROR!
!Door methodsFor: 'initialization' stamp: 'DB 12/17/2020 20:12:48' prior: 50874672!
initializeWith: akey from: sourceRoom at: sourcePosition to: targetRoom at: targetPosition

	sourceRoom at: sourcePosition put: self. 	
	targetRoom at: targetPosition put: self. 
	
	key := akey.
	state := #Closed.! !

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:12:51'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:13:02' prior: 50875038!
test09_canNotCloseADoorIfItIsClosed

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door open: key.

	door close: key.
	self assert: #Closed equals: (door state).
	
	self 
		should: [door close: key.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidStateErrorDescription. 
	
	
		
	
	
	
	! !

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 20:13:03'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:13:43' prior: 50874357!
close: aKey 

	(key = aKey) ifFalse: [ ^self error: self class invalidKeyErrorDescription].! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:13:59' prior: 50875120!
close: aKey 

	(key = aKey) ifFalse: [ ^self error: self class invalidKeyErrorDescription].
	
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:14:23' prior: 50875126!
close: aKey 

	(key = aKey) ifFalse: [ ^self error: self class invalidKeyErrorDescription].
	
	state := #Closed.
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:14:47' prior: 50875132!
close: aKey 

	(key = aKey) ifFalse: [ ^self error: self class invalidKeyErrorDescription].
	
	state := #Closed.
	! !

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 20:14:48'!
FAILURE!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:15:58' prior: 50875139!
close: aKey 

	(key = aKey) ifFalse: [ ^self error: self class invalidKeyErrorDescription].
	
	(state = #Opened) ifFalse: [^self error: self class invalidStateErrorDescription ].
	
	state := #Closed.
	! !

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 20:15:59'!
PASSED!

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 20:16:03'!
PASSED!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:16:36' prior: 50874996!
open: aKey 

	
	
	(key = aKey) ifFalse: [ ^self error: self class invalidKeyErrorDescription].
	
	
	(state = #Closed) ifFalse: [^self error: self class invalidStateErrorDescription .].
	state := #Opened.! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:16:43' prior: 50875165!
open: aKey 

	
	
	(key = aKey) ifFalse: [self error: self class invalidKeyErrorDescription].
	
	
	(state = #Closed) ifFalse: [^self error: self class invalidStateErrorDescription .].
	state := #Opened.! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:17:16'!
assertIfItDifferenceKey: aKey

	^ (key = aKey) ifFalse: [self error: self class invalidKeyErrorDescription]! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:17:16' prior: 50875175!
open: aKey 

	
	
	self assertIfItDifferenceKey: aKey.
	
	
	(state = #Closed) ifFalse: [^self error: self class invalidStateErrorDescription .].
	state := #Opened.! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:17:23' prior: 50875149!
close: aKey 

	self assertIfItDifferenceKey: aKey.
	
	(state = #Opened) ifFalse: [^self error: self class invalidStateErrorDescription ].
	
	state := #Closed.
	! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 20:17:27'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 20:17:28'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 20:17:28'!
PASSED!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:17:44'!
isOpen

	^ state = #Opened! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:17:44' prior: 50875199!
close: aKey 

	self assertIfItDifferenceKey: aKey.
	
	(self isOpen) ifFalse: [^self error: self class invalidStateErrorDescription ].
	
	state := #Closed.
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:18:00'!
isClose

	^ state = #Closed! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:18:00' prior: 50875191!
open: aKey 

	
	
	self assertIfItDifferenceKey: aKey.
	
	
	(self isClose) ifFalse: [^self error: self class invalidStateErrorDescription .].
	state := #Opened.! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:18:17' prior: 50875428!
open: aKey 

	
	
	self assertIfItDifferenceKey: aKey.
	
	
	(self isClose) ifFalse: [self error: self class invalidStateErrorDescription .].
	state := #Opened.! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:18:44'!
assertIfItNotClose

	^ (self isClose) ifFalse: [self error: self class invalidStateErrorDescription .]! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:18:44' prior: 50875436!
open: aKey 

	
	
	self assertIfItDifferenceKey: aKey.
	
	
	self assertIfItNotClose.
	state := #Opened.! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:18:51' prior: 50875451!
open: aKey 
	self assertIfItDifferenceKey: aKey.
	self assertIfItNotClose.
	state := #Opened.! !
!Door methodsFor: 'state' stamp: 'DB 12/17/2020 20:19:27' prior: 50875424!
isClose
	^ state = #Closed! !
!Door methodsFor: 'state' stamp: 'DB 12/17/2020 20:19:31' prior: 50875412!
isOpen
	^ state = #Opened! !
!Door methodsFor: 'state' stamp: 'DB 12/17/2020 20:19:46' prior: 50875416!
close: aKey 

	self assertIfItDifferenceKey: aKey.
	
	(self isOpen) ifFalse: [self error: self class invalidStateErrorDescription ].
	
	state := #Closed.
	! !
!Door methodsFor: 'state' stamp: 'DB 12/17/2020 20:19:57'!
assertIfItOpen

	^ (self isOpen) ifFalse: [self error: self class invalidStateErrorDescription ]! !
!Door methodsFor: 'state' stamp: 'DB 12/17/2020 20:19:57' prior: 50875472!
close: aKey 

	self assertIfItDifferenceKey: aKey.
	
	self assertIfItOpen.
	
	state := #Closed.
	! !
!Door methodsFor: 'state' stamp: 'DB 12/17/2020 20:20:01' prior: 50875485!
close: aKey 

	self assertIfItDifferenceKey: aKey.
	self assertIfItOpen.
	
	state := #Closed.
	! !

!methodRemoval: Door #error stamp: 'DB 12/17/2020 20:20:34'!
error
	self shouldBeImplemented.!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:22:39'!
_test21_canNotTakeADoor

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door withKey: self defaultKey from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeADoorErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty 
		]
	
	
	
! !

!methodRemoval: PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 20:22:39'!
test21_canNotTakeADoor

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door withKey: self defaultKey from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeADoorErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty 
		]
	
	
	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:22:54'!
test21_canNotTakeADoor

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door withKey: self defaultKey from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeADoorErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty 
		]
	
	
	
! !

!methodRemoval: PlayableCharacterTest #_test21_canNotTakeADoor stamp: 'DB 12/17/2020 20:22:54'!
_test21_canNotTakeADoor

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door withKey: self defaultKey from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeADoorErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty 
		]
	
	
	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:23:15'!
test22_canNotMoveIfTheDoorIsClosed

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	
	Door withKey: self defaultKey from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeADoorErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty 
		]
	
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:25:22' prior: 50875582!
test22_canNotMoveIfTheDoorIsClosed

	| room  player anotherRoom magicKey |

	room := self defaultRoom.
	
	magicKey := self defaultKey.
	
	room at: 1@1 put: magicKey.
	
	anotherRoom := self defaultRoom.
	
	Door withKey: self defaultKey from: room at: 0@1 to: anotherRoom at: 4@2.	

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	

	self 
		should: [player take.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotTakeADoorErrorDescription equals: anError messageText.
			self assert: player backpackIsEmpty 
		]
	
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:27:44' prior: 50875603!
test22_canNotMoveIfTheDoorIsClosed

	| room  player anotherRoom magicKey |

	room := self defaultRoom.
	
	magicKey := self defaultKey.
	room at: 1@1 put: magicKey.
	anotherRoom := self defaultRoom.
	Door withKey: self defaultKey from: room at: 0@1 to: anotherRoom at: 4@2.	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidMovementErrorDescription equals: anError messageText.
			self assert: 0@0 equals: player position
		]
	
	
	
! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 20:27:50'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 20:27:50'!
ERROR!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 20:27:50'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:27:58'!
invalidMovementErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:28:08' prior: 50875735!
invalidMovementErrorDescription
	^'invalid movement'! !

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 20:28:08'!
FAILURE!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 20:28:16'!
FAILURE!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 20:28:43'!
FAILURE!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 20:29:14'!
FAILURE!
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 20:33:25' prior: 50872110 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	
	(((self isEmptyAt: aPosition) not) and: ((self at: aPosition) isKindOf: Door)) ifTrue: [
		(self at: aPosition) isClose ifFalse: [
				^self error: self class invalidMovementErrorDescription.
			]
	].

	
	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aStageObject ! !
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 20:33:35' prior: 50875760 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	
	(((self isEmptyAt: aPosition) not) and: ((self at: aPosition) isKindOf: Door)) ifTrue: [
		(self at: aPosition) isClose ifFalse: [^self error: self class invalidMovementErrorDescription.]
	].

	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aStageObject ! !

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 20:33:40'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:33:51' prior: 50875626!
test22_canNotMoveIfTheDoorIsClosed

	| room  player anotherRoom magicKey |

	room := self defaultRoom.
	
	magicKey := self defaultKey.
	room at: 1@1 put: magicKey.
	anotherRoom := self defaultRoom.
	Door withKey: self defaultKey from: room at: 0@1 to: anotherRoom at: 4@2.	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room invalidMovementErrorDescription equals: anError messageText.
			self assert: 0@0 equals: player position
		]
	
	
	
! !
!Room class methodsFor: 'error descriptions' stamp: 'DB 12/17/2020 20:34:16'!
invalidMovementErrorDescription
	
	^'Invalid movement'! !

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 20:34:26'!
ERROR!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 20:34:26'!
ERROR!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 20:34:49'!
ERROR!
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 20:37:13' prior: 50875775 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	
	(self isEmptyAt: aPosition) not ifTrue: [
		((self at: aPosition) isKindOf: Door) ifTrue: [
			(self at: aPosition) isClose ifFalse: [^self error: self class invalidMovementErrorDescription ].
		]
	].

	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aStageObject ! !

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 20:37:15'!
FAILURE!
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 20:38:11' prior: 50875832 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	
	(self isEmptyAt: aPosition) not ifTrue: [
		((self at: aPosition) isKindOf: Door) ifTrue: [
			(self at: aPosition) isClose ifTrue: [^self error: self class invalidMovementErrorDescription ].
		]
	].

	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aStageObject ! !

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 20:38:13'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 20:38:19'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 20:38:19'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:41:52'!
test22_canNotOpenAStageObjectDifferentOfADoor

	| room  player anotherRoom magicKey |

	room := self defaultRoom.
	
	magicKey := self defaultKey.
	room at: 1@1 put: magicKey.
	anotherRoom := self defaultRoom.
	Door withKey: self defaultKey from: room at: 0@1 to: anotherRoom at: 4@2.	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room invalidMovementErrorDescription equals: anError messageText.
			self assert: 0@0 equals: player position
		]
	
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:42:01'!
test23_canNotOpenAStageObjectDifferentOfADoor

	| room  player anotherRoom magicKey |

	room := self defaultRoom.
	
	magicKey := self defaultKey.
	room at: 1@1 put: magicKey.
	anotherRoom := self defaultRoom.
	Door withKey: self defaultKey from: room at: 0@1 to: anotherRoom at: 4@2.	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room invalidMovementErrorDescription equals: anError messageText.
			self assert: 0@0 equals: player position
		]
	
	
	
! !

!methodRemoval: PlayableCharacterTest #test22_canNotOpenAStageObjectDifferentOfADoor stamp: 'DB 12/17/2020 20:42:01'!
test22_canNotOpenAStageObjectDifferentOfADoor

	| room  player anotherRoom magicKey |

	room := self defaultRoom.
	
	magicKey := self defaultKey.
	room at: 1@1 put: magicKey.
	anotherRoom := self defaultRoom.
	Door withKey: self defaultKey from: room at: 0@1 to: anotherRoom at: 4@2.	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player moveForward.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room invalidMovementErrorDescription equals: anError messageText.
			self assert: 0@0 equals: player position
		]
	
	
	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:44:31' prior: 50876099!
test23_canNotOpenAStageObjectDifferentOfADoor

	| room  player anotherRoom magicKey |

	room := self defaultRoom.
	
	magicKey := self defaultKey.
	room at: 1@1 put: magicKey.
	anotherRoom := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room invalidMovementErrorDescription equals: anError messageText.
			self assert: 0@0 equals: player position
		]
	
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:46:36'!
test23_canNotOpenAEmptyPosition

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room cannotOpenErrorDescription equals: anError messageText.
		]
	
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:46:50'!
test24_canNotOpenAEmptyPosition

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room cannotOpenErrorDescription equals: anError messageText.
		]
	
	
	
! !

!methodRemoval: PlayableCharacterTest #test23_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 20:46:50'!
test23_canNotOpenAEmptyPosition

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room cannotOpenErrorDescription equals: anError messageText.
		]
	
	
	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:47:09'!
_test23_canNotOpenAStageObjectDifferentOfADoor

	| room  player anotherRoom magicKey |

	room := self defaultRoom.
	
	magicKey := self defaultKey.
	room at: 1@1 put: magicKey.
	anotherRoom := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room invalidMovementErrorDescription equals: anError messageText.
			self assert: 0@0 equals: player position
		]
	
	
	
! !

!methodRemoval: PlayableCharacterTest #test23_canNotOpenAStageObjectDifferentOfADoor stamp: 'DB 12/17/2020 20:47:09'!
test23_canNotOpenAStageObjectDifferentOfADoor

	| room  player anotherRoom magicKey |

	room := self defaultRoom.
	
	magicKey := self defaultKey.
	room at: 1@1 put: magicKey.
	anotherRoom := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Room invalidMovementErrorDescription equals: anError messageText.
			self assert: 0@0 equals: player position
		]
	
	
	
!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 20:47:12'!
ERROR!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 20:47:12'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:47:22'!
openDoor
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:48:48' prior: 50876264!
openDoor
	
	(room isEmptyAt: self forwardPosition) ifTrue: [^self error: self class cannotOpenDoorErrorDescription.].! !

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 20:48:50'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:49:01'!
cannotOpenDoorErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:49:12' prior: 50876279!
cannotOpenDoorErrorDescription
	^'cannot open door'! !

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 20:49:12'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:49:26' prior: 50876182!
test24_canNotOpenAEmptyPosition

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cannotOpenErrorDescription equals: anError messageText.
		]
	
	
	
! !

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 20:49:31'!
ERROR!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 20:49:31'!
ERROR!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 20:49:56'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:51:10' prior: 50876293!
test24_canNotOpenAEmptyPosition

	| room  player anotherRoom |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		description: PlayableCharacter cannotTakeADoorErrorDescription 
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:51:21' prior: 50876320!
test24_canNotOpenAEmptyPosition

	| room  player  |

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		description: PlayableCharacter cannotTakeADoorErrorDescription 
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:51:30' prior: 50876335!
test24_canNotOpenAEmptyPosition

	| room  player  |

	room := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		description: PlayableCharacter cannotTakeADoorErrorDescription 
	
! !

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 20:51:33'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:51:44'!
test24_canNotCloseAEmptyPosition

	| room  player  |

	room := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		description: PlayableCharacter cannotTakeADoorErrorDescription 
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:51:52'!
test25_canNotCloseAEmptyPosition

	| room  player  |

	room := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		description: PlayableCharacter cannotTakeADoorErrorDescription 
	
! !

!methodRemoval: PlayableCharacterTest #test24_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 20:51:52'!
test24_canNotCloseAEmptyPosition

	| room  player  |

	room := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		description: PlayableCharacter cannotTakeADoorErrorDescription 
	
!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 20:52:27'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:52:30' prior: 50876348!
test24_canNotOpenAEmptyPosition

	| room  player  |

	room := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		description: PlayableCharacter cannotOpenDoorErrorDescription 
	
! !

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 20:52:32'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:52:59' prior: 50876409!
test24_canNotOpenAEmptyPosition

	| room  player  |

	room := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter cannotOpenDoorErrorDescription 
	
! !

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 20:53:01'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:53:29' prior: 50876378!
test25_canNotCloseAEmptyPosition

	| room  player  |

	room := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter invalidDoorActionErrorDescription 
	
! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:53:48'!
invalidDoorActionErrorDescription
	^'cannot open door'! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:53:48' prior: 50876426!
test24_canNotOpenAEmptyPosition

	| room  player  |

	room := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter invalidDoorActionErrorDescription 
	
! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:53:48' prior: 50876269!
openDoor
	
	(room isEmptyAt: self forwardPosition) ifTrue: [^self error: self class invalidDoorActionErrorDescription.].! !

!methodRemoval: PlayableCharacter class #cannotOpenDoorErrorDescription stamp: 'DB 12/17/2020 20:53:48'!
cannotOpenDoorErrorDescription
	^'cannot open door'!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 20:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 20:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 20:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 20:53:57'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 20:53:58'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 20:53:58'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:54:08' prior: 50876443!
test25_canNotCloseAEmptyPosition

	| room  player  |

	room := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player closeDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter invalidDoorActionErrorDescription 
	
! !

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 20:54:11'!
ERROR!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 20:54:11'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:54:22'!
closeDoor
	self shouldBeImplemented.! !

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 20:54:26'!
FAILURE!
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 20:54:59' prior: 50876599!
closeDoor

	(room isEmptyAt: self forwardPosition) ifTrue: [^self error: self class invalidDoorActionErrorDescription.].! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 20:55:02'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 20:55:02'!
PASSED!
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 20:55:15' prior: 50876607!
closeDoor

	(room isEmptyAt: self forwardPosition) ifTrue: [self error: self class invalidDoorActionErrorDescription.].! !
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 20:55:45'!
assertIfDoorIsEmpty

	^ (room isEmptyAt: self forwardPosition) ifTrue: [self error: self class invalidDoorActionErrorDescription.]! !
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 20:55:45' prior: 50876829!
closeDoor

	self assertIfDoorIsEmpty.! !
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 20:55:54' prior: 50876477!
openDoor
	
	self assertIfDoorIsEmpty .! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 20:55:58'!
PASSED!

----SNAPSHOT----(17 December 2020 20:56:02) CuisUniversity-4384.image priorSource: 17202787!

----SNAPSHOT----(17 December 2020 20:56:05) CuisUniversity-4384.image priorSource: 17453285!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:56:31'!
test24_canNotOpenAnInvalidDoor

	| room  player  |

	room := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter invalidDoorActionErrorDescription 
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:56:38' prior: 50877072!
test24_canNotOpenAnInvalidDoor

	| room  player  |

	room := self defaultRoom.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter invalidDoorActionErrorDescription 
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:56:46'!
test26_canNotOpenAnInvalidDoor

	| room  player  |

	room := self defaultRoom.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter invalidDoorActionErrorDescription 
	
! !

!methodRemoval: PlayableCharacterTest #test24_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 20:56:46'!
test24_canNotOpenAnInvalidDoor

	| room  player  |

	room := self defaultRoom.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter invalidDoorActionErrorDescription 
	
!

player forwardPosition!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:57:30' prior: 50877100!
test26_canNotOpenAnInvalidDoor

	| room  player  |

	room := self defaultRoom.
	room at: 0@1  put: self paper .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter invalidDoorActionErrorDescription 
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 20:58:04' prior: 50877129!
test26_canNotOpenAnInvalidDoor

	| room  player  |

	room := self defaultRoom.
	room at: 0@1  put: self paper .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter cannotOpenAnInvalidDoorErrorDescription 
	
! !

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 20:58:11'!
ERROR!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 20:58:22'!
ERROR!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 20:58:32'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:58:38'!
cannotOpenAnInvalidDoorErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 20:58:54' prior: 50877169!
cannotOpenAnInvalidDoorErrorDescription
	^'can not open an invalid door'! !

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 20:58:55'!
FAILURE!
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 20:59:19' prior: 50876847!
openDoor
	
	self assertIfDoorIsEmpty .
	! !
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 21:01:01' prior: 50877184!
openDoor
	
	self assertIfDoorIsEmpty.
	
	((room at: self forwardPosition) isKindOf: Door) ifFalse: [self error: self cannotOpenAnInvalidDoorErrorDescription].
	! !

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:01:02'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:01:18' prior: 50877144!
test26_canNotOpenAnInvalidDoor

	| room  player  |

	room := self defaultRoom.
	room at: 0@1  put: self paper .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter cannotOpenAnInvalidDoorErrorDescription.
	
! !
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 21:01:31' prior: 50877189!
openDoor
	
	self assertIfDoorIsEmpty.
	
	((room at: self forwardPosition) isKindOf: Door) ifFalse: [self error: self class cannotOpenAnInvalidDoorErrorDescription].
	! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 21:01:35'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 21:01:35'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:01:49'!
test26_canNotCloseAnInvalidDoor

	| room  player  |

	room := self defaultRoom.
	room at: 0@1  put: self paper .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter cannotOpenAnInvalidDoorErrorDescription.
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:01:56'!
test27_canNotCloseAnInvalidDoor

	| room  player  |

	room := self defaultRoom.
	room at: 0@1  put: self paper .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter cannotOpenAnInvalidDoorErrorDescription.
	
! !

!methodRemoval: PlayableCharacterTest #test26_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:01:56'!
test26_canNotCloseAnInvalidDoor

	| room  player  |

	room := self defaultRoom.
	room at: 0@1  put: self paper .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter cannotOpenAnInvalidDoorErrorDescription.
	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:02:01' prior: 50877457!
test27_canNotCloseAnInvalidDoor

	| room  player  |

	room := self defaultRoom.
	room at: 0@1  put: self paper .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [player closeDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter cannotOpenAnInvalidDoorErrorDescription.
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:02:12' prior: 50877487!
test27_canNotCloseAnInvalidDoor

	| room  player  |

	room := self defaultRoom.
	room at: 0@1 put: self paper .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [player closeDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter cannotOpenAnInvalidDoorErrorDescription.
	
! !

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:02:25'!
FAILURE!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:02:25'!
FAILURE!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:02:30'!
PASSED!
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 21:02:44' prior: 50876843!
closeDoor

	self assertIfDoorIsEmpty.
	
	
	((room at: self forwardPosition) isKindOf: Door) ifFalse: [self error: self class cannotOpenAnInvalidDoorErrorDescription].! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:02:49'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 21:02:50'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 21:02:50'!
PASSED!
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 21:03:06'!
assertIfItIsNotADoor

	^ ((room at: self forwardPosition) isKindOf: Door) ifFalse: [self error: self class cannotOpenAnInvalidDoorErrorDescription]! !
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 21:03:06' prior: 50877527!
closeDoor

	self assertIfDoorIsEmpty.
	
	
	self assertIfItIsNotADoor.! !
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 21:03:13' prior: 50877765!
closeDoor

	self assertIfDoorIsEmpty.
	self assertIfItIsNotADoor.! !
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 21:03:22' prior: 50877216!
openDoor
	
	self assertIfDoorIsEmpty.
	self assertIfItIsNotADoor.
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:03:23'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 21:03:27'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 21:03:27'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:04:53'!
test28_afterCloseADoorTheDoorIsClosed

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey .
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	room at: 0@1  put: self paper .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [player openDoor] 
		raise: Error - MessageNotUnderstood  
		withMessageText: PlayableCharacter cannotOpenAnInvalidDoorErrorDescription.
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:07:31' prior: 50878098!
test28_afterCloseADoorTheDoorIsClosed

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey .
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	room at: 0@1 put: self paper.
	room at: 1@0 put: self key.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft .
	
	player openDoor
	
	self assert: door isOpen
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:08:32' prior: 50878117!
test28_afterCloseADoorTheDoorIsClosed

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey .
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	room at: 0@1 put: self paper.
	room at: 1@0 put: self key.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player openDoor.
	
	self assert: door isOpen
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:09:10' prior: 50878135!
test28_afterCloseADoorTheDoorIsClosed

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey .
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	room at: 0@1 put: self paper.
	room at: 1@0 put: self key.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player openDoor.
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:09:14'!
PASSED!

!testRun: #PlayableCharacterTest #test28_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:09:14'!
ERROR!

!testRun: #PlayableCharacterTest #test28_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:09:14'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:09:44' prior: 50878153!
test28_afterCloseADoorTheDoorIsClosed

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey .
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	
	room at: 1@0 put: self key.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player openDoor.
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !

!testRun: #PlayableCharacterTest #test28_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:09:46'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:10:08' prior: 50878276!
test28_afterCloseADoorTheDoorIsClosed

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey .
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	
	room at: 1@0 put: validKey .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player openDoor.
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !

!testRun: #PlayableCharacterTest #test28_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:10:09'!
FAILURE!
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 21:11:13' prior: 50877775!
openDoor
	
	| door |
	self assertIfDoorIsEmpty.
	self assertIfItIsNotADoor.
	
	door := room at: self forwardPosition 
	! !
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 21:11:51' prior: 50878322!
openDoor
	
	| door |
	self assertIfDoorIsEmpty.
	self assertIfItIsNotADoor.
	
	door := room at: self forwardPosition.
	
	! !
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 21:12:17' prior: 50878329!
openDoor
	
	| door |
	self assertIfDoorIsEmpty.
	self assertIfItIsNotADoor.
	
	door := room at: self forwardPosition.
	
	door open: self key.
	! !

!testRun: #PlayableCharacterTest #test28_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:12:18'!
ERROR!
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 21:13:35' prior: 50878336!
openDoor
	
	| door |
	self assertIfDoorIsEmpty.
	self assertIfItIsNotADoor.
	
	door := room at: self forwardPosition.
	
	backpack do: [:anObject | 
		door open: anObject.
	].
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:13:40'!
PASSED!

!testRun: #PlayableCharacterTest #test28_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:13:40'!
ERROR!

!testRun: #PlayableCharacterTest #test28_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:13:40'!
ERROR!

!testRun: #PlayableCharacterTest #test28_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:13:51'!
ERROR!
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 21:14:45' prior: 50878347!
openDoor
	
	| door |
	self assertIfDoorIsEmpty.
	self assertIfItIsNotADoor.
	
	door := room at: self forwardPosition.
	backpack openDoor: door.
	! !

!testRun: #PlayableCharacterTest #test28_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:14:46'!
ERROR!
!Backpack methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:14:55'!
openDoor: aDoor 
	self shouldBeImplemented.! !
!Backpack methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:15:48' prior: 50878473!
openDoor: aDoor 
	
	container do: [:anObjecct | 
		aDoor open: anObjecct.
	]! !

!testRun: #PlayableCharacterTest #test28_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:15:50'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:15:55'!
PASSED!

!testRun: #PlayableCharacterTest #test28_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:15:55'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:16:24'!
test28_afterOpenADoorTheDoorIsOpened

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey .
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	
	room at: 1@0 put: validKey .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player openDoor.
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !

!methodRemoval: PlayableCharacterTest #test28_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:16:24'!
test28_afterCloseADoorTheDoorIsClosed

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey .
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	
	room at: 1@0 put: validKey .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player openDoor.
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:16:36'!
test29_afterCloseADoorTheDoorIsClosed

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey .
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	
	room at: 1@0 put: validKey .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player openDoor.
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:16:47' prior: 50878624!
test29_afterCloseADoorTheDoorIsClosed

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey .
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	
	room at: 1@0 put: validKey .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player closeDoor.
	
	self assert: door isClose.
	self assert: (player backpackIncludes: validKey).
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:17:46' prior: 50878643!
test29_afterCloseADoorTheDoorIsClosed

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey .
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	door open: validKey .
	
	room at: 1@0 put: validKey .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player closeDoor.
	
	self assert: door isClose.
	self assert: (player backpackIncludes: validKey).
	
	
! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test28_afterOpenADoorTheDoorIsOpened stamp: 'DB 12/17/2020 21:17:53'!
PASSED!

!testRun: #PlayableCharacterTest #test29_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:17:53'!
FAILURE!

!testRun: #PlayableCharacterTest #test29_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:17:53'!
FAILURE!
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 21:18:34' prior: 50877770!
closeDoor

	| door |
	self assertIfDoorIsEmpty.
	self assertIfItIsNotADoor.
	
	door := room at: self forwardPosition.
	backpack openDoor: door.! !
!PlayableCharacter methodsFor: 'door' stamp: 'DB 12/17/2020 21:18:41' prior: 50878788!
closeDoor

	| door |
	self assertIfDoorIsEmpty.
	self assertIfItIsNotADoor.
	
	door := room at: self forwardPosition.
	backpack closeDoor: door.! !

!testRun: #PlayableCharacterTest #test29_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:18:43'!
ERROR!
!Backpack methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:18:49'!
closeDoor: aDoor 
	self shouldBeImplemented.! !
!Backpack methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:19:04' prior: 50878807!
closeDoor: aDoor 
	
	container do: [:anObjecct | 
		aDoor close: anObjecct.
	]! !

!testRun: #PlayableCharacterTest #test29_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:19:06'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 21:19:09'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test28_afterOpenADoorTheDoorIsOpened stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #PlayableCharacterTest #test29_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 21:19:10'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 21:19:10'!
PASSED!
!Door methodsFor: 'state' stamp: 'DB 12/17/2020 21:19:27'!
closeWith: aKey 

	self assertIfItDifferenceKey: aKey.
	self assertIfItOpen.
	
	state := #Closed.
	! !
!Backpack methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:19:27' prior: 50878812!
closeDoor: aDoor 
	
	container do: [:anObjecct | 
		aDoor closeWith: anObjecct.
	]! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:19:27' prior: 50874304!
test06_canNotCloseADoorWithAnotherKey

	| door key anotherKey |
	key :=  self defaultKey.
	anotherKey := self defaultKey .
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	self 
		should: [door closeWith: anotherKey.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidKeyErrorDescription.
	
	
		
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:19:27' prior: 50875101!
test09_canNotCloseADoorIfItIsClosed

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door open: key.

	door closeWith: key.
	self assert: #Closed equals: (door state).
	
	self 
		should: [door closeWith: key.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidStateErrorDescription. 
	
	
		
	
	
	
	! !

!methodRemoval: Door #close: stamp: 'DB 12/17/2020 21:19:27'!
close: aKey 

	self assertIfItDifferenceKey: aKey.
	self assertIfItOpen.
	
	state := #Closed.
	!
!Door methodsFor: 'state' stamp: 'DB 12/17/2020 21:19:40'!
openWith: aKey 
	self assertIfItDifferenceKey: aKey.
	self assertIfItNotClose.
	state := #Opened.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:19:40' prior: 50874938!
test09_canNotOpenADoorIfItIsOpened

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door openWith: key.
	self assert: #Opened equals: (door state).
	
	self 
		should: [door openWith: key.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidStateErrorDescription. 
	
	
		
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:19:40' prior: 50873856!
test07_canNotOpenADoorWithAnotherKey

	| door key anotherKey |
	key :=  self defaultKey.
	anotherKey := self defaultKey .
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	self 
		should: [door openWith: anotherKey.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidKeyErrorDescription.
	
	
		
	
	
	
	! !
!Backpack methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:19:40' prior: 50878478!
openDoor: aDoor 
	
	container do: [:anObjecct | 
		aDoor openWith: anObjecct.
	]! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:19:40' prior: 50874953!
test08_aDoorCanBeOpenWithTheValidKey

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door openWith: key.
	
	self assert: #Opened equals: (door state).
	
	
		
	
	
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:19:40' prior: 50878662!
test29_afterCloseADoorTheDoorIsClosed

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey .
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	door openWith: validKey .
	
	room at: 1@0 put: validKey .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player closeDoor.
	
	self assert: door isClose.
	self assert: (player backpackIncludes: validKey).
	
	
! !

!methodRemoval: Door #open: stamp: 'DB 12/17/2020 21:19:40'!
open: aKey 
	self assertIfItDifferenceKey: aKey.
	self assertIfItNotClose.
	state := #Opened.!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:21:09'!
test30_canNotOpenDoorWithInvalidKey

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey .
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	
	room at: 1@0 put: validKey .

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player openDoor.
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:22:43' prior: 50879176!
test30_canNotOpenDoorWithInvalidKey

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: self paper.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player openDoor.
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:23:32'!
test30_OpenDoorWithABackpackWithMoreThanOneObject

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: validKey.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player openDoor.
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:24:18' prior: 50879215!
test30_OpenDoorWithABackpackWithMoreThanOneObject

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 1@2 to: room  at: 0@3.
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: validKey.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #North in: room.
	
	player take.
	player rotateRight.
	player take.
	player rotateLeft.
	player rotateLeft.
	player openDoor.
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:24:37'!
_test30_canNotOpenDoorWithInvalidKey

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: self paper.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player openDoor.
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !

!methodRemoval: PlayableCharacterTest #test30_canNotOpenDoorWithInvalidKey stamp: 'DB 12/17/2020 21:24:37'!
test30_canNotOpenDoorWithInvalidKey

	| room  player  door validKey |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 0@1 to: room  at: 0@3.
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: self paper.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player openDoor.
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 21:24:43'!
ERROR!

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test28_afterOpenADoorTheDoorIsOpened stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test29_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #PlayableCharacterTest #test30_OpenDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:24:43'!
ERROR!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 21:24:43'!
PASSED!

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 21:24:52'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:25:19' prior: 50879077!
test09_canNotCloseADoorIfItIsClosed

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door openWith: key.

	door closeWith: key.
	self assert: #Closed equals: (door state).
	
	self 
		should: [door closeWith: key.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidStateErrorDescription. 
	
	
		
	
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:25:21' prior: 50879532!
test09_canNotCloseADoorIfItIsClosed

	| door key |
	key :=  self defaultKey.
	door := Door withKey: key from: self defaultRoom1 at: 0@1 to: self defaultRoom1 at: 1@2.

	door openWith: key.
	door closeWith: key.
	self assert: #Closed equals: (door state).
	
	self 
		should: [door closeWith: key.] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Door invalidStateErrorDescription. 
	
	
		
	
	
	
	! !

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 21:25:23'!
PASSED!

!testRun: #PlayableCharacterTest #test30_OpenDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:25:25'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:26:57' prior: 50879235!
test30_OpenDoorWithABackpackWithMoreThanOneObject

	| room  player  door validKey backpack |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 1@2 to: room  at: 0@3.
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: validKey.

	backpack := Backpack containingUpTo: 200 limitingPointsTo: 200. 

	player := PlayableCharacter named: 'Luigi' using: backpack at: 2@2 heading: #North in: room.
	
	player take.
	player rotateRight.
	player take.
	player rotateLeft.
	player rotateLeft.
	player openDoor.
	
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !

!testRun: #PlayableCharacterTest #test30_OpenDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:27:26'!
ERROR!

!testRun: #PlayableCharacterTest #test30_OpenDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:27:28'!
ERROR!

!testRun: #PlayableCharacterTest #test30_OpenDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:27:54'!
ERROR!

!testRun: #PlayableCharacterTest #test30_OpenDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:28:58'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:29:17' prior: 50879571!
test30_OpenDoorWithABackpackWithMoreThanOneObject

	| room  player  door validKey backpack |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 1@2 to: room  at: 0@3.
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: validKey.

	backpack := Backpack containingUpTo: 200 limitingPointsTo: 200. 

	player := PlayableCharacter named: 'Luigi' using: backpack at: 2@2 heading: #North in: room.
	
	
	player rotateRight.
	player take.
	player rotateLeft
	player take.
	player rotateLeft.
	player rotateLeft.
	player openDoor.
	
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:29:25' prior: 50879610!
test30_OpenDoorWithABackpackWithMoreThanOneObject

	| room  player  door validKey backpack |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 1@2 to: room  at: 0@3.
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: validKey.

	backpack := Backpack containingUpTo: 200 limitingPointsTo: 200. 

	player := PlayableCharacter named: 'Luigi' using: backpack at: 2@2 heading: #North in: room.
	
	
	player rotateRight.
	player take.
	player rotateLeft
	player take.
	player rotateLeft.
	player openDoor.
	
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !

!testRun: #PlayableCharacterTest #test30_OpenDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:29:39'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:29:46' prior: 50879634!
test30_OpenDoorWithABackpackWithMoreThanOneObject

	| room  player  door validKey backpack |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 1@2 to: room  at: 0@3.
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: validKey.

	backpack := Backpack containingUpTo: 200 limitingPointsTo: 200. 

	player := PlayableCharacter named: 'Luigi' using: backpack at: 2@2 heading: #North in: room.
	
	
	player rotateRight.
	player take.
	player rotateLeft.
	player take.
	player rotateLeft.
	player openDoor.
	
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !

!testRun: #PlayableCharacterTest #test30_OpenDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:30:18'!
ERROR!
!Backpack methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:35:02' prior: 50879134!
openDoor: aDoor 
	
	container do: [:anObjecct | 
		aDoor openWith: anObjecct
	].

	^false.

	! !
!Backpack methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:36:30' prior: 50879690!
openDoor: aDoor 
	
	container do: [:anObjecct | 
		(aDoor canOpenWith: anObjecct) ifTrue: [aDoor openWith: anObjecct. ^true]
	].

	^false.

	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test28_afterOpenADoorTheDoorIsOpened stamp: 'DB 12/17/2020 21:36:36'!
ERROR!

!testRun: #PlayableCharacterTest #test29_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:36:36'!
PASSED!

!testRun: #PlayableCharacterTest #test30_OpenDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:36:36'!
ERROR!

!testRun: #PlayableCharacterTest #test28_afterOpenADoorTheDoorIsOpened stamp: 'DB 12/17/2020 21:36:45'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:36:53'!
canOpenWith: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:37:40' prior: 50879814!
canOpenWith: aPortableObject 


	^ (self isClose) and: (key = aPortableObject).! !

!testRun: #PlayableCharacterTest #test28_afterOpenADoorTheDoorIsOpened stamp: 'DB 12/17/2020 21:37:43'!
PASSED!

!testRun: #PlayableCharacterTest #test30_OpenDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:37:45'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:38:01'!
test30_CloseDoorWithABackpackWithMoreThanOneObject

	| room  player  door validKey backpack |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 1@2 to: room  at: 0@3.
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: validKey.

	backpack := Backpack containingUpTo: 200 limitingPointsTo: 200. 

	player := PlayableCharacter named: 'Luigi' using: backpack at: 2@2 heading: #North in: room.
	
	
	player rotateRight.
	player take.
	player rotateLeft.
	player take.
	player rotateLeft.
	player openDoor.
	
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:38:16' prior: 50879832!
test30_CloseDoorWithABackpackWithMoreThanOneObject

	| room  player  door validKey backpack |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 1@2 to: room  at: 0@3.
	door openWith: validKey .
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: validKey.

	backpack := Backpack containingUpTo: 200 limitingPointsTo: 200. 

	player := PlayableCharacter named: 'Luigi' using: backpack at: 2@2 heading: #North in: room.
	
	
	player rotateRight.
	player take.
	player rotateLeft.
	player take.
	player rotateLeft.
	player openDoor.
	
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:38:23' prior: 50879856!
test30_CloseDoorWithABackpackWithMoreThanOneObject

	| room  player  door validKey backpack |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 1@2 to: room  at: 0@3.
	door openWith: validKey .
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: validKey.

	backpack := Backpack containingUpTo: 200 limitingPointsTo: 200. 

	player := PlayableCharacter named: 'Luigi' using: backpack at: 2@2 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player take.
	player rotateLeft.
	player openDoor.
	
	self assert: door isOpen.
	self assert: (player backpackIncludes: validKey).
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:38:29' prior: 50879881!
test30_CloseDoorWithABackpackWithMoreThanOneObject

	| room  player  door validKey backpack |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 1@2 to: room  at: 0@3.
	door openWith: validKey .
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: validKey.

	backpack := Backpack containingUpTo: 200 limitingPointsTo: 200. 

	player := PlayableCharacter named: 'Luigi' using: backpack at: 2@2 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player take.
	player rotateLeft.
	player openDoor.
	
	self assert: door isClose.
	self assert: (player backpackIncludes: validKey).
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:38:37' prior: 50879905!
test30_CloseDoorWithABackpackWithMoreThanOneObject

	| room  player  door validKey backpack |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 1@2 to: room  at: 0@3.
	door openWith: validKey .
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: validKey.

	backpack := Backpack containingUpTo: 200 limitingPointsTo: 200. 

	player := PlayableCharacter named: 'Luigi' using: backpack at: 2@2 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player take.
	player rotateLeft.
	player closeDoor.
	
	self assert: door isClose.
	self assert: (player backpackIncludes: validKey).
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:38:46'!
test31_CloseDoorWithABackpackWithMoreThanOneObject

	| room  player  door validKey backpack |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 1@2 to: room  at: 0@3.
	door openWith: validKey .
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: validKey.

	backpack := Backpack containingUpTo: 200 limitingPointsTo: 200. 

	player := PlayableCharacter named: 'Luigi' using: backpack at: 2@2 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player take.
	player rotateLeft.
	player closeDoor.
	
	self assert: door isClose.
	self assert: (player backpackIncludes: validKey).
	
	
! !

!methodRemoval: PlayableCharacterTest #test30_CloseDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:38:46'!
test30_CloseDoorWithABackpackWithMoreThanOneObject

	| room  player  door validKey backpack |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 1@2 to: room  at: 0@3.
	door openWith: validKey .
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: validKey.

	backpack := Backpack containingUpTo: 200 limitingPointsTo: 200. 

	player := PlayableCharacter named: 'Luigi' using: backpack at: 2@2 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player take.
	player rotateLeft.
	player closeDoor.
	
	self assert: door isClose.
	self assert: (player backpackIncludes: validKey).
	
	
!

!testRun: #PlayableCharacterTest #test31_CloseDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:38:50'!
ERROR!

!testRun: #PlayableCharacterTest #test31_CloseDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:38:50'!
ERROR!
!Backpack methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:39:34' prior: 50879056!
closeDoor: aDoor 
	
	container do: [:anObjecct | 
		(aDoor canCloseWith: anObjecct) ifTrue: [aDoor closeWith: anObjecct. ^true]
	]! !

!testRun: #PlayableCharacterTest #test31_CloseDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:39:36'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:39:43'!
canCloseWith: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:40:07' prior: 50880021!
canCloseWith: aPortableObject 
	^ (self isOpen ) and: (key = aPortableObject).! !

!testRun: #PlayableCharacterTest #test31_CloseDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:40:08'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test28_afterOpenADoorTheDoorIsOpened stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test29_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test30_OpenDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #PlayableCharacterTest #test31_CloseDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 21:40:13'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 21:40:13'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:44:17'!
test32_moveToSameRoomAnotherNotContiguosPosition

	| room  player  door validKey backpack |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	door := Door withKey: validKey from: room  at: 1@2 to: room  at: 0@3.
	
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: validKey.

	backpack := Backpack containingUpTo: 200 limitingPointsTo: 200. 

	player := PlayableCharacter named: 'Luigi' using: backpack at: 2@2 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player take.
	player rotateLeft.
	player openDoor.
	player moveForward.
	
	
	self assert: room equals: (player room).
	self assert: 0@3 equals: (player position).
	
	
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:44:29' prior: 50880272!
test32_moveToSameRoomAnotherNotContiguosPosition

	| room  player  validKey backpack |

	room := self defaultRoom.
	validKey := self defaultKey.
	
	Door withKey: validKey from: room  at: 1@2 to: room  at: 0@3.
	
	
	room at: 3@2 put: self paper.
	room at: 2@3 put: validKey.

	backpack := Backpack containingUpTo: 200 limitingPointsTo: 200. 

	player := PlayableCharacter named: 'Luigi' using: backpack at: 2@2 heading: #North in: room.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player take.
	player rotateLeft.
	player openDoor.
	player moveForward.
	
	
	self assert: room equals: (player room).
	self assert: 0@3 equals: (player position).
	
	
	
! !

!testRun: #PlayableCharacterTest #test32_moveToSameRoomAnotherNotContiguosPosition stamp: 'DB 12/17/2020 21:44:34'!
ERROR!

!testRun: #PlayableCharacterTest #test32_moveToSameRoomAnotherNotContiguosPosition stamp: 'DB 12/17/2020 21:44:34'!
ERROR!
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 21:45:58' prior: 50875850 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	
	(self isEmptyAt: aPosition) not ifTrue: [
		((self at: aPosition) isKindOf: Door) ifTrue: [ | door |
			door := self at: aPosition.
			(self at: aPosition) isClose ifTrue: [^self error: self class invalidMovementErrorDescription ].
			
		]
	].

	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aStageObject ! !
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 21:48:20' prior: 50880329 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	
	(self isEmptyAt: aPosition) not ifTrue: [
		((self at: aPosition) isKindOf: Door) ifTrue: [ | door contiguosRoom |
			door := self at: aPosition.
			door  isClose ifTrue: [^self error: self class invalidMovementErrorDescription ].
			contiguosRoom := door contiguosRoomOf: self.
			contiguosRoom at: aPosition put: aStageObject.
			
		]
	].

	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aStageObject ! !
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 21:48:33' prior: 50880345 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	
	(self isEmptyAt: aPosition) not ifTrue: [
		((self at: aPosition) isKindOf: Door) ifTrue: [ | door contiguosRoom |
			door := self at: aPosition.
			door  isClose ifTrue: [^self error: self class invalidMovementErrorDescription ].
			contiguosRoom := door contiguosRoomOf: self.
			contiguosRoom at: aPosition put: aStageObject.
		]
	].

	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aStageObject ! !
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 21:49:19' prior: 50880364 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	
	(self isEmptyAt: aPosition) not ifTrue: [
		((self at: aPosition) isKindOf: Door) ifTrue: [ | door contiguosRoom |
			door := self at: aPosition.
			door  isClose ifTrue: [^self error: self class invalidMovementErrorDescription ].
			contiguosRoom := door contiguosRoomOf: self.
			contiguosRoom at: aPosition put: aStageObject.
		]
	] ifFalse: [
		self assertIsEmpty: aPosition.
		contents at: aPosition put: aStageObject 
	]! !

!testRun: #PlayableCharacterTest #test32_moveToSameRoomAnotherNotContiguosPosition stamp: 'DB 12/17/2020 21:49:28'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:49:42'!
contiguosRoomOf: aRoom 
	self shouldBeImplemented.! !

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'DB 12/17/2020 21:50:24'!
StageObject subclass: #Door
	instanceVariableNames: 'key state rooms'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'as yet unclassified' stamp: 'DB 12/17/2020 21:50:22' prior: 50880405!
contiguosRoomOf: aRoom 
	^rooms at: aRoom.! !

!testRun: #PlayableCharacterTest #test32_moveToSameRoomAnotherNotContiguosPosition stamp: 'DB 12/17/2020 21:50:27'!
ERROR!
!Door methodsFor: 'initialization' stamp: 'DB 12/17/2020 21:51:18' prior: 50875088!
initializeWith: akey from: sourceRoom at: sourcePosition to: targetRoom at: targetPosition

	sourceRoom at: sourcePosition put: self. 	
	targetRoom at: targetPosition put: self. 
	
	rooms at: sourceRoom  put: targetRoom.
	rooms at: targetRoom put: sourceRoom .
	
	key := akey.
	state := #Closed.! !

!testRun: #PlayableCharacterTest #test32_moveToSameRoomAnotherNotContiguosPosition stamp: 'DB 12/17/2020 21:51:37'!
ERROR!
!Door methodsFor: 'initialization' stamp: 'DB 12/17/2020 21:52:09' prior: 50880427!
initializeWith: akey from: sourceRoom at: sourcePosition to: targetRoom at: targetPosition

	sourceRoom at: sourcePosition put: self. 	
	targetRoom at: targetPosition put: self. 
	rooms := Dictionary new.
	
	rooms at: sourceRoom  put: targetRoom.
	rooms at: targetRoom put: sourceRoom .
	
	key := akey.
	state := #Closed.! !
!Door methodsFor: 'initialization' stamp: 'DB 12/17/2020 21:52:13' prior: 50880443!
initializeWith: akey from: sourceRoom at: sourcePosition to: targetRoom at: targetPosition

	sourceRoom at: sourcePosition put: self. 	
	targetRoom at: targetPosition put: self. 
	
	rooms := Dictionary new.
	rooms at: sourceRoom  put: targetRoom.
	rooms at: targetRoom put: sourceRoom .
	
	key := akey.
	state := #Closed.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 21:52:23'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 21:52:23'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 21:52:23'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 21:52:23'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 21:52:23'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 21:52:23'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 21:52:23'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 21:52:23'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:52:24'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test28_afterOpenADoorTheDoorIsOpened stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test29_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test30_OpenDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

!testRun: #PlayableCharacterTest #test31_CloseDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:52:24'!
PASSED!

----SNAPSHOT----(17 December 2020 21:52:36) CuisUniversity-4384.image priorSource: 17453379!

----SNAPSHOT----(17 December 2020 21:52:39) CuisUniversity-4384.image priorSource: 17565731!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:54:47' prior: 50880297!
test32_moveToSameRoomAnotherNotContiguosPosition

	| room  player  validKey backpack room1 room2 |

	room1 := self defaultRoom.
	room2 := self defaultRoom.
	validKey := self defaultKey.
	
	Door withKey: validKey from: room1  at: 1@2 to: room2  at: 0@3.
	
	
	room1 at: 3@2 put: self paper.
	room1 at: 2@3 put: validKey.

	backpack := Backpack containingUpTo: 200 limitingPointsTo: 200. 

	player := PlayableCharacter named: 'Luigi' using: backpack at: 2@2 heading: #North in: room1.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player take.
	player rotateLeft.
	player openDoor.
	player moveForward.
	
	
	self assert: room equals: (player room).
	self assert: 0@3 equals: (player position).
	
	
	
! !

----SNAPSHOT----(17 December 2020 21:55:29) CuisUniversity-4384.image priorSource: 17565825!
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 21:55:52' prior: 50880383 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	
	(self isEmptyAt: aPosition) not ifTrue: [
		((self at: aPosition) isKindOf: Door) ifTrue: [ | door |
			door := self at: aPosition.
			door  isClose ifTrue: [^self error: self class invalidMovementErrorDescription ].
			"contiguosRoom := door contiguosRoomOf: self.
			contiguosRoom at: aPosition put: aStageObject."
		]
	] ifFalse: [
		self assertIsEmpty: aPosition.
		contents at: aPosition put: aStageObject 
	]! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'DB 12/17/2020 21:56:10'!
_test32_moveToSameRoomAnotherNotContiguosPosition

	| room  player  validKey backpack room1 room2 |

	room1 := self defaultRoom.
	room2 := self defaultRoom.
	validKey := self defaultKey.
	
	Door withKey: validKey from: room1  at: 1@2 to: room2  at: 0@3.
	
	
	room1 at: 3@2 put: self paper.
	room1 at: 2@3 put: validKey.

	backpack := Backpack containingUpTo: 200 limitingPointsTo: 200. 

	player := PlayableCharacter named: 'Luigi' using: backpack at: 2@2 heading: #North in: room1.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player take.
	player rotateLeft.
	player openDoor.
	player moveForward.
	
	
	self assert: room equals: (player room).
	self assert: 0@3 equals: (player position).
	
	
	
! !

!methodRemoval: PlayableCharacterTest #test32_moveToSameRoomAnotherNotContiguosPosition stamp: 'DB 12/17/2020 21:56:10'!
test32_moveToSameRoomAnotherNotContiguosPosition

	| room  player  validKey backpack room1 room2 |

	room1 := self defaultRoom.
	room2 := self defaultRoom.
	validKey := self defaultKey.
	
	Door withKey: validKey from: room1  at: 1@2 to: room2  at: 0@3.
	
	
	room1 at: 3@2 put: self paper.
	room1 at: 2@3 put: validKey.

	backpack := Backpack containingUpTo: 200 limitingPointsTo: 200. 

	player := PlayableCharacter named: 'Luigi' using: backpack at: 2@2 heading: #North in: room1.
	
	player rotateRight.
	player take.
	player rotateLeft.
	player take.
	player rotateLeft.
	player openDoor.
	player moveForward.
	
	
	self assert: room equals: (player room).
	self assert: 0@3 equals: (player position).
	
	
	
!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:56:14'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test28_afterOpenADoorTheDoorIsOpened stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test29_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test30_OpenDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test31_CloseDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:56:14'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:56:14'!
FAILURE!
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 21:55:52' prior: 50880615 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	
	(self isEmptyAt: aPosition) not ifTrue: [
		((self at: aPosition) isKindOf: Door) ifTrue: [ | door |
			door := self at: aPosition.
			door  isClose ifTrue: [^self error: self class invalidMovementErrorDescription ].
			"contiguosRoom := door contiguosRoomOf: self.
			contiguosRoom at: aPosition put: aStageObject."
		]
	] ifFalse: [
		self assertIsEmpty: aPosition.
		contents at: aPosition put: aStageObject 
	]! !
!Room methodsFor: 'contents' stamp: 'DB 12/17/2020 20:38:11' prior: 50880800 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	
	(self isEmptyAt: aPosition) not ifTrue: [
		((self at: aPosition) isKindOf: Door) ifTrue: [
			(self at: aPosition) isClose ifTrue: [^self error: self class invalidMovementErrorDescription ].
		]
	].

	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aStageObject ! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test28_afterOpenADoorTheDoorIsOpened stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test29_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test30_OpenDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #PlayableCharacterTest #test31_CloseDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 21:57:04'!
PASSED!

----SNAPSHOT----(17 December 2020 21:57:09) CuisUniversity-4384.image priorSource: 17566728!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #DoorTest #test01_CanNotCreateADoorInTheSameRoomSamePosition stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #DoorTest #test02_CanNotCreateADoorOutOfBoundariesRoom1 stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #DoorTest #test03_CanNotCreateADoorOutOfBoundariesRoom2 stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #DoorTest #test04_ADoorMustKnowPositionInRooms stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #DoorTest #test05_canNotAddADoorToANonPortableObject stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #DoorTest #test06_canNotCloseADoorWithAnotherKey stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #DoorTest #test07_canNotOpenADoorWithAnotherKey stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #DoorTest #test08_aDoorCanBeOpenWithTheValidKey stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #DoorTest #test09_canNotCloseADoorIfItIsClosed stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #DoorTest #test09_canNotOpenADoorIfItIsOpened stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test21_canNotTakeADoor stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test22_canNotMoveIfTheDoorIsClosed stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test24_canNotOpenAEmptyPosition stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test25_canNotCloseAEmptyPosition stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test26_canNotOpenAnInvalidDoor stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test27_canNotCloseAnInvalidDoor stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test28_afterOpenADoorTheDoorIsOpened stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test29_afterCloseADoorTheDoorIsClosed stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test30_OpenDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #PlayableCharacterTest #test31_CloseDoorWithABackpackWithMoreThanOneObject stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'DB 12/17/2020 21:57:27'!
PASSED!

----QUIT----(17 December 2020 21:58:29) CuisUniversity-4384.image priorSource: 17581399!