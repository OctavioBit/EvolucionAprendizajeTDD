----STARTUP---- (17 December 2020 16:39:03) as C:\Users\hanse\Documents\August Facultad\Para el recu\windows64\CuisUniversity-4384.image!

----End fileIn of C:\Users\hanse\Documents\August Facultad\Para el recu\ISW1-2020-2C-Recuperatorio-2doParcial.st----!

TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'AD 12/17/2020 17:22:21'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'nil' stamp: 'AD 12/17/2020 17:22:57'!
test01cantCreateDoorOutsideOfRoom! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 17:24:23' prior: 50869229!
test01cantCreateDoorOutsideOfRoom

	|room door|
	
	room := Room ofWidth: 10 andHeight: 10.
	! !

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'AD 12/17/2020 17:26:53'!
StageObject subclass: #Door
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 17:26:16' prior: 50869234!
test01cantCreateDoorOutsideOfRoom

	|room door|
	
	room := Room ofWidth: 10 andHeight: 10.
	door := Door new.
	
	self should: [room at: -1@-1 put: door ] raise: Error - MessageNotUnderstood withMessageText: Room invalidPositionErrorDescription .! !

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 17:26:53'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 17:26:53'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 17:27:14' prior: 50869249!
test01cantCreateDoorOutsideOfRoom

	|room door|
	
	room := Room ofWidth: 10 andHeight: 10.
	door := Door new.
	
	self should: [room at: -1@-1 put: door ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room invalidPositionErrorDescription.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 17:36:30'!
test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom

	|room1 room2 door|
	
	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door new.
	
	self should: [room1 at: 1@1 putDoor: door intoRoom: room2 at: 11@11.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room invalidPositionErrorDescription.! !

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 17:36:31'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 17:36:40'!
at: aPoint putDoor: aDoor intoRoom: aRoom at: aPoint4 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 17:37:48' prior: 50869296!
at: aPosition putDoor: aDoor intoRoom: aDestinationRoom at: aPositionInTheDestinationRoom 
	^self error: self class invalidPositionErrorDescription ! !

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 17:37:48'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 17:37:48'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 17:37:48'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 17:38:21'!
defaultEmptyRoom

	^ Room ofWidth: 10 andHeight: 10! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 17:38:21' prior: 50869277!
test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom

	|room1 room2 door|
	
	room1 := self defaultEmptyRoom.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door new.
	
	self should: [room1 at: 1@1 putDoor: door intoRoom: room2 at: 11@11.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room invalidPositionErrorDescription.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 17:38:32' prior: 50869327!
test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom

	|room1 room2 door|
	
	room1 := self defaultEmptyRoom.
	room2 := self defaultEmptyRoom.
	door := Door new.
	
	self should: [room1 at: 1@1 putDoor: door intoRoom: room2 at: 11@11.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room invalidPositionErrorDescription.! !

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 17:38:32'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 17:38:32'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 17:38:32'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 17:40:42'!
test02youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid

	|room1 room2 door|
	
	room1 := self defaultEmptyRoom.
	room2 := self defaultEmptyRoom.
	door := Door new.
	
	self assert: (room2 isEmptyAt: 2@2).
	
	room1 at: 1@1 putDoor: door intoRoom:  room2 at: 2@2.
	
	self deny: (room2 isEmptyAt: 2@2).! !

!testRun: #DoorTest #test02youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 17:40:42'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 17:43:26' prior: 50869302!
at: aPosition putDoor: aDoor intoRoom: aDestinationRoom at: aPositionInTheDestinationRoom
	self at: aPosition put: aDoor.
	aDestinationRoom at: aPositionInTheDestinationRoom put: aDoor.
	! !

!testRun: #DoorTest #test02youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 17:43:27'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 17:43:27'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 17:43:27'!
PASSED!

!testRun: #DoorTest #test02youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 17:43:27'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 17:43:34'!
test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid

	|room1 room2 door|
	
	room1 := self defaultEmptyRoom.
	room2 := self defaultEmptyRoom.
	door := Door new.
	
	self assert: (room2 isEmptyAt: 2@2).
	
	room1 at: 1@1 putDoor: door intoRoom:  room2 at: 2@2.
	
	self deny: (room2 isEmptyAt: 2@2).! !

!methodRemoval: DoorTest #test02youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 17:43:34'!
test02youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid

	|room1 room2 door|
	
	room1 := self defaultEmptyRoom.
	room2 := self defaultEmptyRoom.
	door := Door new.
	
	self assert: (room2 isEmptyAt: 2@2).
	
	room1 at: 1@1 putDoor: door intoRoom:  room2 at: 2@2.
	
	self deny: (room2 isEmptyAt: 2@2).!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 17:44:10' prior: 50869410!
test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid

	|room1 room2 door|
	
	room1 := self defaultEmptyRoom.
	room2 := self defaultEmptyRoom.
	door := Door new.
	
	self assert: (room2 isEmptyAt: 2@2).
	self assert: (room1 isEmptyAt: 1@1).
	
	room1 at: 1@1 putDoor: door intoRoom:  room2 at: 2@2.
	
	self deny: (room1 isEmptyAt: 1@1).
	self deny: (room2 isEmptyAt: 2@2).! !

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 17:44:10'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 17:44:10'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 17:44:10'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 17:44:10'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 17:49:22'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:01:48'!
test04aDoorCanOnlyBeClosedUsingAKey

	|door object|
	
	door := Door new.
	object := NoPointsPortableObject named: 'Rock' weighing: 1.
	
	self should:  [door closeWithKey: object.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantCloseDoorWithoutAKeyErrorDescription.
	
	
	! !

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:01:50'!
ERROR!
!Door class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:02:00'!
cantCloseDoorWithoutAKeyErrorDescription
	self shouldBeImplemented.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:02:20' prior: 50869486!
cantCloseDoorWithoutAKeyErrorDescription
	^'You cant close a door without a key'! !

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:02:21'!
ERROR!
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 18:02:26'!
closeWithKey: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 18:02:51' prior: 50869500!
closeWithKey: aKey 
	^self error: self class cantCloseDoorWithoutAKeyErrorDescription ! !

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:02:51'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 18:02:51'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 18:02:51'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 18:02:51'!
PASSED!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:02:51'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:09:19'!
test04aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey
	|door key1 key2|
	
	door := Door new.
	key1 := NoPointsPortableObject named: 'key1' weighing: 1.
	key2 := NoPointsPortableObject named: 'key2' weighing: 1..
	
	door closeWithKey: key1.
	self should:  [door openWith: key2.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription.
	
	
	! !

!testRun: #DoorTest #test04aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:09:21'!
ERROR!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'AD 12/17/2020 18:11:56'!
StageObject subclass: #Door
	instanceVariableNames: 'key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'AD 12/17/2020 18:11:58'!
StageObject subclass: #Door
	instanceVariableNames: 'key state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #ClosedDoorState category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'AD 12/17/2020 18:12:39'!
ProtoObject subclass: #ClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 18:11:53' prior: 50869505!
closeWithKey: aKey 

( key = aKey ) ifTrue: [state := ClosedDoorState for: self].
	^self error: self class cantCloseDoorWithoutAKeyErrorDescription ! !

!testRun: #DoorTest #test04aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:12:41'!
ERROR!

Object subclass: #DoorState
	instanceVariableNames: 'door'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorState category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'AD 12/17/2020 18:13:08'!
Object subclass: #DoorState
	instanceVariableNames: 'door'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 18:13:36' prior: 50869573!
closeWithKey: aKey 

( key = aKey ) ifTrue: [].
	^self error: self class cantCloseDoorWithoutAKeyErrorDescription ! !

!classRemoval: #ClosedDoorState stamp: 'AD 12/17/2020 18:13:40'!
ProtoObject subclass: #ClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

DoorState subclass: #ClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #ClosedDoorState category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'AD 12/17/2020 18:13:56'!
DoorState subclass: #ClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 18:14:22' prior: 50869598!
closeWithKey: aKey 

( key = aKey ) ifTrue: [state := ClosedDoorState for: self.].
	^self error: self class cantCloseDoorWithoutAKeyErrorDescription ! !
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 18:14:47' prior: 50869626!
closeWithKey: aKey 

(key = aKey) ifTrue: [state := ClosedDoorState for: self.].
	^self error: self class cantCloseDoorWithoutAKeyErrorDescription ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:15:01'!
test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey
	|door key1 key2|
	
	door := Door new.
	key1 := NoPointsPortableObject named: 'key1' weighing: 1.
	key2 := NoPointsPortableObject named: 'key2' weighing: 1..
	
	door closeWithKey: key1.
	self should:  [door openWith: key2.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription.
	
	
	! !

!methodRemoval: DoorTest #test04aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:15:01'!
test04aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey
	|door key1 key2|
	
	door := Door new.
	key1 := NoPointsPortableObject named: 'key1' weighing: 1.
	key2 := NoPointsPortableObject named: 'key2' weighing: 1..
	
	door closeWithKey: key1.
	self should:  [door openWith: key2.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription.
	
	
	!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:15:03'!
ERROR!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:15:03'!
ERROR!
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 18:15:18' prior: 50869634!
closeWithKey: aKey 

(key = aKey) ifTrue: [state := ClosedDoorState for: self.].
	^self error: self class cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription. ! !
!Door class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:15:39'!
cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription
	^'You cant close a door without the same key that was used to close it'! !

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:15:50'!
ERROR!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:15:50'!
ERROR!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:16:03'!
ERROR!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:16:03'!
ERROR!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:16:08'!
FAILURE!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:16:08'!
FAILURE!
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 18:17:38' prior: 50869682!
closeWithKey: aKey 
	key ifNil: [^self error: self class cantCloseDoorWithoutAKeyErrorDescription].
	(key = aKey) ifTrue: [state := ClosedDoorState for: self.].
	^self error: self class cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription. ! !

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:17:44'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:17:48'!
ERROR!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:17:48'!
ERROR!
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 18:19:39'!
isOpen

	^state isOpen.! !
!DoorState methodsFor: 'no messages' stamp: 'AD 12/17/2020 18:20:00'!
isOpen
	
	self subclassResponsibility ! !
!ClosedDoorState methodsFor: 'no messages' stamp: 'AD 12/17/2020 18:20:29' overrides: 50869744!
isOpen
	^false! !

DoorState subclass: #OpenedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #OpenedDoorState category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'AD 12/17/2020 18:20:47'!
DoorState subclass: #OpenedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!OpenedDoorState methodsFor: 'nil' stamp: 'AD 12/17/2020 18:20:56' overrides: 50869744!
isOpen

	^true! !
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 18:22:50' prior: 50869719!
closeWithKey: aKey 
	key ifNil: [	key:= aKey.
			state := ClosedDoorState for: self.].
	(key = aKey) ifTrue: [state := ClosedDoorState for: self.].
	^self error: self class cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription. ! !

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:22:54'!
ERROR!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:22:54'!
ERROR!
!DoorState class methodsFor: 'instance creation' stamp: 'AD 12/17/2020 18:23:19'!
for: aDoor 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aDoor ! !
!DoorState class methodsFor: 'instance creation' stamp: 'AD 12/17/2020 18:23:30' prior: 50869788!
for: aDoor 
	
	^self new initializeFor: aDoor ! !

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:23:31'!
ERROR!
!DoorState methodsFor: 'associating' stamp: 'AD 12/17/2020 18:23:45'!
initializeFor: aDoor 
	self shouldBeImplemented.
	door := aDoor.! !
!DoorState methodsFor: 'associating' stamp: 'AD 12/17/2020 18:23:49' prior: 50869803!
initializeFor: aDoor 
	
	door := aDoor.! !

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:23:49'!
FAILURE!

PortableObject subclass: #doorKey
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

PortableObject subclass: #DoorKey
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorKey category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'AD 12/17/2020 18:24:39'!
PortableObject subclass: #DoorKey
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classRemoval: #DoorKey stamp: 'AD 12/17/2020 18:25:02'!
PortableObject subclass: #DoorKey
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

NoPointsPortableObject subclass: #DoorKey
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorKey category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'AD 12/17/2020 18:25:15'!
NoPointsPortableObject subclass: #DoorKey
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:26:24' prior: 50869642!
test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey
	|door key1 key2|
	
	door := Door new.
	key1 := DoorKey named: 'key1' weighing: 1.
	key2 := DoorKey named: 'key2' weighing: 1.
	
	door closeWithKey: key1.
	self should:  [door openWith: key2.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription.
	
	
	! !
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 18:26:56' prior: 50869771!
closeWithKey: aKey 

	aKey closeFor: self.

	key ifNil: [	key:= aKey.
			state := ClosedDoorState for: self.].
	(key = aKey) ifTrue: [state := ClosedDoorState for: self.].
	^self error: self class cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription. ! !
!DoorKey methodsFor: 'nil' stamp: 'AD 12/17/2020 18:27:47'!
closeFor: aDoor

	! !
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 18:28:32'!
closeWith: aPortableObject 

	aPortableObject closeFor: self.

	! !
!PortableObject methodsFor: 'adding' stamp: 'AD 12/17/2020 18:29:39'!
closeFor: aDoor

	aDoor error: aDoor class cantCloseDoorWithoutAKeyErrorDescription.! !
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 18:30:55'!
hasAssociatedKey
	^key isNil.! !
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 18:31:09'!
hasNoAssociatedKey
	^key isNil.! !

!methodRemoval: Door #hasAssociatedKey stamp: 'AD 12/17/2020 18:31:12'!
hasAssociatedKey
	^key isNil.!
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 18:32:26' prior: 50869870!
closeWithKey: aKey 

	(self hasNoAssociatedKey) ifTrue:[key := aKey.
							    state := ClosedDoorState for: self.].

	(key = aKey) ifTrue: [state := ClosedDoorState for: self.].
	^self error: self class cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription. ! !

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 18:32:59'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 18:32:59'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 18:32:59'!
PASSED!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:32:59'!
FAILURE!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:32:59'!
ERROR!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:33:08'!
FAILURE!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:33:08'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:33:36' prior: 50869471!
test04aDoorCanOnlyBeClosedUsingAKey

	|door object|
	
	door := Door new.
	object := NoPointsPortableObject named: 'Rock' weighing: 1.
	
	self should:  [door closeWith: object.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantCloseDoorWithoutAKeyErrorDescription.
	
	
	! !

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:33:39'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:33:44'!
ERROR!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:33:58'!
ERROR!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:34:25'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:34:42' prior: 50869855!
test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey
	|door key1 key2|
	
	door := Door new.
	key1 := DoorKey named: 'key1' weighing: 1.
	key2 := DoorKey named: 'key2' weighing: 1.
	
	door closeWith: key1.
	self should:  [door openWith: key2.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription.
	
	
	! !

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:34:43'!
ERROR!
!Door methodsFor: '*Cuis-University-Model' stamp: 'AD 12/17/2020 18:34:52'!
openWith: aDoorKey 
	self shouldBeImplemented.! !
!Door methodsFor: '*Cuis-University-Model' stamp: 'AD 12/17/2020 18:35:14' prior: 50869987!
openWith: aPortableObject
	aPortableObject openFor: self
	! !

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:35:15'!
ERROR!
!DoorKey methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:35:27'!
openFor: aDoor 
	self shouldBeImplemented.! !
!DoorKey methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:35:58' prior: 50870001!
openFor: aDoor 
	aDoor openWithKey: self! !

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:36:00'!
ERROR!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:36:09'!
ERROR!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:36:09'!
ERROR!

----SNAPSHOT----(17 December 2020 18:36:14) CuisUniversity-4384.image priorSource: 17155564!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:36:21'!
ERROR!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:36:21'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:36:27'!
openWithKey: aDoorKey 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:38:59' prior: 50870032!
openWithKey: aDoorKey 
	key = aDoorKey  ifFalse: [self error: self class cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription] 
				   ifTrue: [state := OpenedDoorState for: self].! !

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:39:00'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:39:03'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:40:37'!
test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey
	|door key1 object|
	
	door := Door new.
	key1 := DoorKey named: 'key1' weighing: 1.
	object:= NoPointsPortableObject named: 'Rock' weighing: 1.
	
	door closeWith: key1.
	self should:  [door openWith: object.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantOpenDoorWithoutAKeyErrorDescription.
	
	
	! !

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 18:40:38'!
ERROR!
!Door class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:40:45'!
cantOpenDoorWithoutAKeyErrorDescription
	self shouldBeImplemented.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:41:08' prior: 50870074!
cantOpenDoorWithoutAKeyErrorDescription
	^'You cant open a door without using a key'.! !

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 18:41:09'!
ERROR!
!PortableObject methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:41:23'!
openFor: aDoor 
	self shouldBeImplemented.! !
!PortableObject methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:41:51' prior: 50870090!
openFor: aDoor 
	aDoor error: aDoor class cantOpenDoorWithoutAKeyErrorDescription.! !

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 18:41:53'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 18:41:53'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 18:41:53'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 18:41:53'!
PASSED!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:41:53'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 18:41:53'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:41:53'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:42:01'!
test06aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey
	|door key1 key2|
	
	door := Door new.
	key1 := DoorKey named: 'key1' weighing: 1.
	key2 := DoorKey named: 'key2' weighing: 1.
	
	door closeWith: key1.
	self should:  [door openWith: key2.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription.
	
	
	! !

!methodRemoval: DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:42:01'!
test05aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey
	|door key1 key2|
	
	door := Door new.
	key1 := DoorKey named: 'key1' weighing: 1.
	key2 := DoorKey named: 'key2' weighing: 1.
	
	door closeWith: key1.
	self should:  [door openWith: key2.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription.
	
	
	!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:45:09'!
test07aDoorCantLeadIntoTheSameRoom
	|door room|
	
	door := Door new.
	room := self defaultEmptyRoom .
	
	
	self should:  [] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription.
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:48:43' prior: 50870159!
test07aDoorCantLeadIntoTheSameRoom
	|door room|
	
	door := Door new.
	room := self defaultEmptyRoom .
	
	
	self should:  [room at: 1@1 putDoor: door intoRoom: room at: 2@2] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room cantPutDownADoorThatLeadsIntoTheSameRoomErrorDescription.
	
	
	! !

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 18:48:45'!
ERROR!
!Room class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:48:52'!
cantPutDownADoorThatLeadsIntoTheSameRoomErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:49:15' prior: 50870186!
cantPutDownADoorThatLeadsIntoTheSameRoomErrorDescription
	^'you cant put down a door that leads into the same room'! !

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 18:49:16'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 18:50:05' prior: 50869385!
at: aPosition putDoor: aDoor intoRoom: aDestinationRoom at: aPositionInTheDestinationRoom
	self = aDestinationRoom  ifTrue:[ self error: self class cantPutDownADoorThatLeadsIntoTheSameRoomErrorDescription].
	self at: aPosition put: aDoor.
	aDestinationRoom at: aPositionInTheDestinationRoom put: aDoor.
	! !

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 18:50:06'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 18:50:06'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 18:50:06'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 18:50:06'!
PASSED!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:50:06'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 18:50:06'!
PASSED!

!testRun: #DoorTest #test06aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:50:06'!
PASSED!

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 18:50:06'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 18:50:09'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 18:50:09'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 18:50:09'!
PASSED!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 18:50:09'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 18:50:09'!
PASSED!

!testRun: #DoorTest #test06aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 18:50:09'!
PASSED!

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 18:50:09'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 19:01:41'!
test21cantCloseDoorOnEmptyPosition
	| room  player |

	
	room := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player closeDoor ]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayableCharacter cantCloseANonExistingDoorErrorDescription.
	
	! !

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:01:43'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:01:50'!
cantCloseANonExistingDoorErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:02:29' prior: 50870287!
cantCloseANonExistingDoorErrorDescription
	^'There must be a door infront of the player in order for it to be closed by the player'! !

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:02:30'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:02:36'!
closeDoor
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:02:52' prior: 50870304!
closeDoor
	self error: self class cantCloseANonExistingDoorErrorDescription ! !

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 19:02:53'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:02:53'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 19:08:25' prior: 50870269!
test21cantCloseDoorOnEmptyPosition
	| room1 room2 player door doorKey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorKey := DoorKey named: 'Rusty key' weighing: 1.
	door := Door opened.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	self assert: door isOpen.
	
	player closeDoor .
	self deny: door isOpen.
	! !

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:08:36'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 19:08:56' prior: 50870398!
test21cantCloseDoorOnEmptyPosition
	| room1 room2 player door doorKey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorKey := DoorKey named: 'Rusty key' weighing: 1.
	
	door := Door opened.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	self assert: door isOpen.
	
	player closeDoor .
	self deny: door isOpen.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 19:09:30' prior: 50870419!
test21cantCloseDoorOnEmptyPosition
	| room1 room2 player door doorKey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorKey := DoorKey named: 'Rusty key' weighing: 1.
	player take: doorKey .
	door := Door opened.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	self assert: door isOpen.
	
	player closeDoor .
	self deny: door isOpen.
	! !

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:09:30'!
ERROR!
!Door class methodsFor: 'instance creation' stamp: 'AD 12/17/2020 19:09:40'!
opened
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOpened! !
!Door class methodsFor: 'instance creation' stamp: 'AD 12/17/2020 19:10:02' prior: 50870457!
opened
	^self new initializeWith: OpenedDoorState ! !

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:10:03'!
ERROR!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'AD 12/17/2020 19:10:08'!
StageObject subclass: #Door
	instanceVariableNames: 'key state openedDoorState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'initialization' stamp: 'AD 12/17/2020 19:10:08'!
initializeWith: OpenedDoorState 
	self shouldBeImplemented.
	openedDoorState := OpenedDoorState.! !
!Door methodsFor: 'initialization' stamp: 'AD 12/17/2020 19:10:17' prior: 50870482!
initializeWith: OpenedDoorState 
	
	state := OpenedDoorState.! !
!Door methodsFor: 'initialization' stamp: 'AD 12/17/2020 19:10:26' prior: 50870488!
initializeWith: aDoorState 
	
	state := aDoorState.! !
!Door methodsFor: 'initialization' stamp: 'AD 12/17/2020 19:10:57' prior: 50870493!
initializeWith: aDoorStateClass
	
	state := aDoorStateClass for: self.! !

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:10:58'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 19:12:22'!
test23canCloseDoorUsingKey
	| room1 room2 player door doorKey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorKey := DoorKey named: 'Rusty key' weighing: 1.
	player take: doorKey .
	door := Door opened.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	self assert: door isOpen.
	
	player closeDoor .
	self deny: door isOpen.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 19:13:37' prior: 50870436!
test21cantCloseDoorOnEmptyPosition
	| room1 player|

	
	room1 := self defaultRoom.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	
	self should: [player closeDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: PlayableCharacter cantCloseANonExistingDoorErrorDescription ! !

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test23canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:13:37'!
ERROR!

!testRun: #PlayableCharacterTest #test23canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:13:37'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 19:13:52' prior: 50870525!
test21cantCloseDoorOnEmptyPosition
	| room1 player|

	
	room1 := self defaultRoom.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	
	self should: [player closeDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: PlayableCharacter cantCloseANonExistingDoorErrorDescription ! !

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:13:52'!
PASSED!

!testRun: #PlayableCharacterTest #test23canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:13:52'!
ERROR!

!testRun: #PlayableCharacterTest #test23canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:13:52'!
ERROR!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:14:00'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 19:14:11'!
-test23canCloseDoorUsingKey
	| room1 room2 player door doorKey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorKey := DoorKey named: 'Rusty key' weighing: 1.
	player take: doorKey .
	door := Door opened.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	self assert: door isOpen.
	
	player closeDoor .
	self deny: door isOpen.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 19:14:22' prior: 50870507!
test23canCloseDoorUsingKey
	| room1 room2 player door doorKey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorKey := DoorKey named: 'Rusty key' weighing: 1.
	player take: doorKey .
	door := Door opened.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	self assert: door isOpen.
	
	player closeDoor .
	self deny: door isOpen.
	! !

!methodRemoval: PlayableCharacterTest #- stamp: 'AD 12/17/2020 19:14:29'!
-test23canCloseDoorUsingKey
	| room1 room2 player door doorKey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorKey := DoorKey named: 'Rusty key' weighing: 1.
	player take: doorKey .
	door := Door opened.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	self assert: door isOpen.
	
	player closeDoor .
	self deny: door isOpen.
	!

!testRun: #PlayableCharacterTest #test23canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:14:33'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 19:14:46'!
test22canCloseDoorUsingKey
	| room1 room2 player door doorKey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorKey := DoorKey named: 'Rusty key' weighing: 1.
	player take: doorKey .
	door := Door opened.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	self assert: door isOpen.
	
	player closeDoor .
	self deny: door isOpen.
	! !

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:14:46'!
ERROR!

----SNAPSHOT----(17 December 2020 19:17:38) CuisUniversity-4384.image priorSource: 17227859!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:18:48' prior: 50870309!
closeDoor

	
	self error: self class cantCloseANonExistingDoorErrorDescription .! !

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:18:58'!
ERROR!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:18:58'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:19:13' prior: 50870813!
closeDoor

	(room at: self forwardPosition) getClosedBy: self.
	self error: self class cantCloseANonExistingDoorErrorDescription .! !

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:19:16'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:19:24'!
getClosedBy: aPlayableCharacter 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:20:56' prior: 50870836!
getClosedBy: aPlayableCharacter 
	self hasNoAssociatedKey ifTrue:[ state:= ClosedDoorState for: self.
							    ]! !

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:21:08'!
ERROR!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:21:52'!
ERROR!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:21:52'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:23:31' prior: 50870841!
getClosedBy: aPlayableCharacter 
	self hasNoAssociatedKey ifTrue:[ state:= ClosedDoorState for: self.
							    key:= aPlayableCharacter aRandomKeyFromBackpack . ]! !

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:23:33'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:23:38'!
aRandomKeyFromBackpack
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:24:35' prior: 50870870!
aRandomKeyFromBackpack
	! !

!methodRemoval: PlayableCharacterTest #test23canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:25:16'!
test23canCloseDoorUsingKey
	| room1 room2 player door doorKey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorKey := DoorKey named: 'Rusty key' weighing: 1.
	player take: doorKey .
	door := Door opened.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	self assert: door isOpen.
	
	player closeDoor .
	self deny: door isOpen.
	!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 19:25:19'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:25:19'!
FAILURE!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:25:19'!
ERROR!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:25:27'!
ERROR!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:25:27'!
ERROR!

----End fileIn of C:\Users\hanse\Documents\August Facultad\Para el recu\windows64\Packages\TerseGuide.pck.st----!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:27:28' prior: 50870875!
aRandomKeyFromBackpack
	^backpack findFirst: [:aPortableObject| aPortableObject isDoorKey]! !

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:27:38'!
ERROR!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:27:38'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:28:36' prior: 50873922!
aRandomKeyFromBackpack
	^backpack aRandomKey.! !

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:28:45'!
ERROR!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:28:45'!
ERROR!
!Backpack methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:28:51'!
aRandomKey
	self shouldBeImplemented.! !
!Backpack methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:30:52' prior: 50873946!
aRandomKey
	^container detect: [:aPortableObject| aPortableObject isDoorKey] ifNone: [^self error: self class noDoorKeyInBackpackErrorDescription]! !

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:30:57'!
ERROR!
!DoorKey methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:31:05'!
isDoorKey
	self shouldBeImplemented.! !
!DoorKey methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:31:14' prior: 50873962!
isDoorKey
	^true! !

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:31:17'!
ERROR!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:31:28'!
ERROR!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:31:28'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:32:49' prior: 50870826!
closeDoor

	(room at: self forwardPosition) getClosedBy: self.
	! !

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:32:50'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:32:52'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:32:56'!
FAILURE!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:32:56'!
FAILURE!
!StageObject methodsFor: 'taken' stamp: 'AD 12/17/2020 19:34:12'!
getClosedBy: aPlayableCharacter

	self error: self class cantCloseANonExistingDoorErrorDescription .! !
!StageObject methodsFor: 'taken' stamp: 'AD 12/17/2020 19:35:47' prior: 50873999!
getClosedBy: aPlayableCharacter

	aPlayableCharacter signalCantCloseSomethingThatIsNotADoor! !
!PlayableCharacter methodsFor: 'testing' stamp: 'AD 12/17/2020 19:36:38'!
signalCantCloseSomethingThatIsNotADoor
	
	^self error: self class cantCloseANonExistingDoorErrorDescription ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 19:36:41'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 19:36:41'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 19:36:41'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 19:36:41'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 19:36:41'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 19:36:41'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 19:36:42'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 19:36:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 19:36:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 19:36:42'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 19:36:42'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 19:36:42'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:36:42'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:36:42'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 19:36:42'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 19:36:42'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 19:36:42'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 19:36:42'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 19:36:42'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 19:36:42'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:36:42'!
FAILURE!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:36:42'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:36:42'!
FAILURE!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:36:53'!
FAILURE!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:36:53'!
FAILURE!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:37:13'!
FAILURE!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:37:56' prior: 50873981!
closeDoor

	(room at: self forwardPosition) getClosedBy: self.
	self signalCantCloseSomethingThatIsNotADoor.
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 19:37:58'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:37:58'!
FAILURE!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:37:58'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:38:49' prior: 50874115!
closeDoor

	(room at: self forwardPosition) getClosedBy: self.
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:40:11'!
FAILURE!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:40:11'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:40:11'!
FAILURE!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:40:33'!
FAILURE!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:40:33'!
FAILURE!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:41:59' prior: 50874205!
closeDoor
	
	(room isEmptyAt: self forwardPosition) ifTrue: [^self error: self class cantCloseANonExistingDoorErrorDescription ].
	(room at: self forwardPosition) getClosedBy: self.
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:42:02'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:42:02'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 19:44:52'!
test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey
	| room1 room2 player door |

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	
	self should: [player closeDoor ]
	 raise: Error - MessageNotUnderstood 
	 withMessageText: Door cantCloseDoorWithoutAKeyErrorDescription ! !

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 19:44:52'!
ERROR!
!Backpack class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:45:11'!
noDoorKeyInBackpackErrorDescription
	self shouldBeImplemented.! !
!Backpack class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:45:30' prior: 50874417!
noDoorKeyInBackpackErrorDescription
	^'There is no key inside the backpack'! !

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 19:45:30'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 19:46:45' prior: 50874395!
test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey
	| room1 room2 player door |

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	
	self should: [player closeDoor ]
	 raise: Error - MessageNotUnderstood 
	 withMessageText: Backpack noDoorKeyInBackpackErrorDescription ! !

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 19:46:45'!
PASSED!

StageObject subclass: #Door
	instanceVariableNames: 'key state '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'AD 12/17/2020 19:47:32'!
StageObject subclass: #Door
	instanceVariableNames: 'key state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #DoorTest #test06aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'AD 12/17/2020 19:47:35'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'AD 12/17/2020 19:47:35'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:50:54'!
test08whenADoorIsClosedItIsInAOpenedStateInBothRooms
	|door room1 room2|
	
	door := Door opened.
	room1 := self defaultEmptyRoom .
	room2 := self defaultEmptyRoom .
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	self assert: (room1 at: 1@1) isOpen. 
	self assert: (room2 at: 1@1) isOpen. 
	
	
	! !

!testRun: #DoorTest #test08whenADoorIsClosedItIsInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 19:50:56'!
ERROR!

!testRun: #DoorTest #test08whenADoorIsClosedItIsInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 19:50:56'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:52:30' prior: 50874762!
test08whenADoorIsClosedItIsInAOpenedStateInBothRooms
	|door room1 room2|
	
	door := Door opened.
	room1 := self defaultEmptyRoom .
	room2 := self defaultEmptyRoom .
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	self assert: (room1 at: 1@1) isOpen. 
	self assert: (room2 at: 2@2) isOpen. 
	
	
	! !

!testRun: #DoorTest #test08whenADoorIsClosedItIsInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 19:52:30'!
PASSED!

!testRun: #DoorTest #test08whenADoorIsClosedItIsInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 19:52:34'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:54:11'!
test09aDoorCanBeOpenedWithTheCorrectDoorKey
	|door room1 room2 doorKey|
	
	door := Door closed.
	room1 := self defaultEmptyRoom .
	room2 := self defaultEmptyRoom .
	doorKey := DoorKey named: 'Rusty Key' weighing: 1. 
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	door 
	
	self assert: (room1 at: 1@1) isOpen. 
	self assert: (room2 at: 2@2) isOpen. 
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:55:09'!
test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms
	|door room1 room2 doorKey|
	
	door := Door closed.
	room1 := self defaultEmptyRoom .
	room2 := self defaultEmptyRoom .
	doorKey := DoorKey named: 'Rusty Key' weighing: 1. 
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	door openWith: doorKey.
	
	self assert: (room1 at: 1@1) isOpen. 
	self assert: (room2 at: 2@2) isOpen. 
	
	
	! !

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 19:55:09'!
ERROR!
!Door class methodsFor: 'instance creation' stamp: 'AD 12/17/2020 19:55:18'!
closed
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeClosed! !
!Door class methodsFor: 'instance creation' stamp: 'AD 12/17/2020 19:55:39' prior: 50874837!
closed

	^self new initializeWith: ClosedDoorState ! !

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 19:55:40'!
ERROR!

!methodRemoval: DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKey stamp: 'AD 12/17/2020 19:56:10'!
test09aDoorCanBeOpenedWithTheCorrectDoorKey
	|door room1 room2 doorKey|
	
	door := Door closed.
	room1 := self defaultEmptyRoom .
	room2 := self defaultEmptyRoom .
	doorKey := DoorKey named: 'Rusty Key' weighing: 1. 
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	door 
	
	self assert: (room1 at: 1@1) isOpen. 
	self assert: (room2 at: 2@2) isOpen. 
	
	
	!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:56:35'!
test08whenADoorIsOpenItIsInAOpenedStateInBothRooms
	|door room1 room2|
	
	door := Door opened.
	room1 := self defaultEmptyRoom .
	room2 := self defaultEmptyRoom .
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	self assert: (room1 at: 1@1) isOpen. 
	self assert: (room2 at: 2@2) isOpen. 
	
	
	! !

!methodRemoval: DoorTest #test08whenADoorIsClosedItIsInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 19:56:35'!
test08whenADoorIsClosedItIsInAOpenedStateInBothRooms
	|door room1 room2|
	
	door := Door opened.
	room1 := self defaultEmptyRoom .
	room2 := self defaultEmptyRoom .
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	self assert: (room1 at: 1@1) isOpen. 
	self assert: (room2 at: 2@2) isOpen. 
	
	
	!

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 19:56:48'!
ERROR!

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 19:56:48'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:57:22' prior: 50874816!
test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms
	|door room1 room2 doorKey|
	
	door := Door opened.
	room1 := self defaultEmptyRoom .
	room2 := self defaultEmptyRoom .
	doorKey := DoorKey named: 'Rusty Key' weighing: 1. 
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	door closeWith: doorKey.
	
	door openWith: doorKey.
	
	self assert: (room1 at: 1@1) isOpen. 
	self assert: (room2 at: 2@2) isOpen. 
	
	
	! !

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 19:57:22'!
ERROR!
!DoorKey methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 19:58:54' prior: 50869881 overrides: 50869889!
closeFor: aDoor

	aDoor closeWithKey: self! !

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 19:58:55'!
ERROR!

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 19:59:42'!
ERROR!

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 19:59:42'!
ERROR!
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 20:00:52' prior: 50869904!
closeWithKey: aKey 

	(self hasNoAssociatedKey) ifTrue:[key := aKey.
							    state := ClosedDoorState for: self.].

	(key = aKey) ifTrue: [state := ClosedDoorState for: self.] ifFalse:[
	^self error: self class cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription. ]! !

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 20:00:53'!
PASSED!

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 20:00:55'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:01:51'!
test10whenADoorIsClosedItIsInAClosedStateInBothRooms
	|door room1 room2 doorKey|
	
	door := Door opened.
	room1 := self defaultEmptyRoom .
	room2 := self defaultEmptyRoom .
	doorKey := DoorKey named: 'Rusty Key' weighing: 1. 
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	door closeWith: doorKey.
	
	
	self deny: (room1 at: 1@1) isOpen. 
	self deny: (room2 at: 2@2) isOpen. 
	
	
	! !

!testRun: #DoorTest #test10whenADoorIsClosedItIsInAClosedStateInBothRooms stamp: 'AD 12/17/2020 20:01:52'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 20:01:52'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 20:01:52'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 20:01:52'!
PASSED!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 20:01:52'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 20:01:52'!
PASSED!

!testRun: #DoorTest #test06aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 20:01:52'!
PASSED!

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 20:01:52'!
PASSED!

!testRun: #DoorTest #test08whenADoorIsOpenItIsInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 20:01:52'!
PASSED!

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 20:01:52'!
PASSED!

!testRun: #DoorTest #test10whenADoorIsClosedItIsInAClosedStateInBothRooms stamp: 'AD 12/17/2020 20:01:52'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 20:08:45'!
test22cantOpenDoorUsingIncorrectDoorKey
	| room1 room2 player door doorKey1 doorKey2|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorKey1 := DoorKey named: 'Rusty key' weighing: 1.
	doorKey2  := DoorKey named: 'Silver key' weighing: 1.
	door := Door opened.
	player take: doorKey2.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	door closeWithKey: doorKey1.
	
	player openDoor .
	self assert: door isOpen.
	! !

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:08:46'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:08:58'!
openDoor
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:09:57' prior: 50875046!
openDoor
	(room at: self forwardPosition ) getOpenedBy: self.! !

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:10:01'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:10:09'!
getOpenedBy: aPlayableCharacter 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:21:49' prior: 50875059!
getOpenedBy: aPlayableCharacter 
	
	self isOpen ifFalse: [self openWithKey: (aPlayableCharacter useCorrectDoorKey )]! !

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:21:51'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:21:55'!
useCorrectDoorKey
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:22:28' prior: 50875064!
getOpenedBy: aPlayableCharacter 
	
	self isOpen ifFalse: [self openWithKey: (aPlayableCharacter useCorrectDoorKey: key )]! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:22:53'!
useCorrectDoorKey: aDoorKey
	self b! !

!methodRemoval: PlayableCharacter #useCorrectDoorKey stamp: 'AD 12/17/2020 20:22:57'!
useCorrectDoorKey
	self shouldBeImplemented.!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:23:28' prior: 50875087!
useCorrectDoorKey: aDoorKey
	self backpackIncludes: aDoorKey.! !

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:24:00'!
ERROR!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:24:11'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:26:03' prior: 50875096!
useCorrectDoorKey: aDoorKey
	^backpack getCorrectDoorKeyFromBackpack: aDoorKey .! !

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:26:04'!
ERROR!
!Backpack methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:26:10'!
getCorrectDoorKeyFromBackpack: aDoorKey 
	self shouldBeImplemented.! !
!Backpack methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:27:07' prior: 50875118!
getCorrectDoorKeyFromBackpack: aDoorKey 
	container detect: [:anPortableObject| anPortableObject = aDoorKey ]! !
!Backpack methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:28:26' prior: 50875124!
getCorrectDoorKeyFromBackpack: aDoorKey 
	^container detect: [:anPortableObject| anPortableObject = aDoorKey ] ifNone:[self error: self class cantFindTheDoorKeyYouWishForErrorDescription]! !

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:28:29'!
ERROR!
!Backpack class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:28:35'!
cantFindTheDoorKeyYouWishForErrorDescription
	self shouldBeImplemented.! !
!Backpack class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:28:51' prior: 50875144!
cantFindTheDoorKeyYouWishForErrorDescription
	^'The key was not found inside the backpack'! !

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:28:52'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:29:56'!
useDoorKey: aDoorKey
	^backpack getCorrectDoorKeyFromBackpack: aDoorKey .! !
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:29:56' prior: 50875080!
getOpenedBy: aPlayableCharacter 
	
	self isOpen ifFalse: [self openWithKey: (aPlayableCharacter useDoorKey: key )]! !

!methodRemoval: PlayableCharacter #useCorrectDoorKey: stamp: 'AD 12/17/2020 20:29:56'!
useCorrectDoorKey: aDoorKey
	^backpack getCorrectDoorKeyFromBackpack: aDoorKey .!
!Backpack methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:30:19'!
getDoorKeyFromBackpack: aDoorKey 
	^container detect: [:anPortableObject| anPortableObject = aDoorKey ] ifNone:[self error: self class cantFindTheDoorKeyYouWishForErrorDescription]! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:30:19' prior: 50875160!
useDoorKey: aDoorKey
	^backpack getDoorKeyFromBackpack: aDoorKey .! !

!methodRemoval: Backpack #getCorrectDoorKeyFromBackpack: stamp: 'AD 12/17/2020 20:30:19'!
getCorrectDoorKeyFromBackpack: aDoorKey 
	^container detect: [:anPortableObject| anPortableObject = aDoorKey ] ifNone:[self error: self class cantFindTheDoorKeyYouWishForErrorDescription]!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:32:50'!
openDoor: aDoorKey
	(room at: self forwardPosition ) getOpenedBy: self.! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:32:50' prior: 50875022!
test22cantOpenDoorUsingIncorrectDoorKey
	| room1 room2 player door doorKey1 doorKey2|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorKey1 := DoorKey named: 'Rusty key' weighing: 1.
	doorKey2  := DoorKey named: 'Silver key' weighing: 1.
	door := Door opened.
	player take: doorKey2.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	door closeWithKey: doorKey1.
	
	player openDoor: Using .
	self assert: door isOpen.
	! !

!methodRemoval: PlayableCharacter #openDoor stamp: 'AD 12/17/2020 20:32:50'!
openDoor
	(room at: self forwardPosition ) getOpenedBy: self.!
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:33:33'!
getOpenedBy: aPlayableCharacter aDoorKey: aDoorKey  
	
	self isOpen ifFalse: [self openWithKey: (aPlayableCharacter useDoorKey: key )]! !

!methodRemoval: Door #getOpenedBy: stamp: 'AD 12/17/2020 20:33:33'!
getOpenedBy: aPlayableCharacter 
	
	self isOpen ifFalse: [self openWithKey: (aPlayableCharacter useDoorKey: key )]!
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:34:01'!
getOpenedBy: aPlayableCharacter using: aDoorKey  
	
	self isOpen ifFalse: [self openWithKey: (aPlayableCharacter useDoorKey: key )]! !

!methodRemoval: Door #getOpenedBy:aDoorKey: stamp: 'AD 12/17/2020 20:34:01'!
getOpenedBy: aPlayableCharacter aDoorKey: aDoorKey  
	
	self isOpen ifFalse: [self openWithKey: (aPlayableCharacter useDoorKey: key )]!
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:34:11' prior: 50875244!
getOpenedBy: aPlayableCharacter using: aDoorKey  
	
	self isOpen ifFalse: [self openWithKey: (aPlayableCharacter useDoorKey: aDoorKey )]! !

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 20:34:11'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 20:34:11'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 20:34:11'!
PASSED!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 20:34:11'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 20:34:11'!
PASSED!

!testRun: #DoorTest #test06aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 20:34:11'!
PASSED!

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 20:34:11'!
PASSED!

!testRun: #DoorTest #test08whenADoorIsOpenItIsInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 20:34:11'!
PASSED!

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 20:34:11'!
PASSED!

!testRun: #DoorTest #test10whenADoorIsClosedItIsInAClosedStateInBothRooms stamp: 'AD 12/17/2020 20:34:11'!
PASSED!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:34:35' prior: 50875201!
openDoor: aDoorKey
	(room at: self forwardPosition ) getOpenedBy: self using: aDoorKey .! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:34:44'!
openDoorUsing: aDoorKey
	(room at: self forwardPosition ) getOpenedBy: self using: aDoorKey .! !

!methodRemoval: PlayableCharacter #openDoor: stamp: 'AD 12/17/2020 20:34:44'!
openDoor: aDoorKey
	(room at: self forwardPosition ) getOpenedBy: self using: aDoorKey .!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:34:48'!
ERROR!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 20:34:48'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:34:48'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:34:51'!
ERROR!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:34:51'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 20:35:15'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 20:35:15'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 20:35:15'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 20:35:15'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 20:35:15'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 20:35:15'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 20:35:15'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 20:35:15'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 20:35:15'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 20:35:15'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 20:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 20:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 20:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 20:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 20:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 20:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 20:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 20:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 20:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 20:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 20:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 20:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:35:16'!
ERROR!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 20:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:35:16'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 20:35:39' prior: 50875207!
test22cantOpenDoorUsingIncorrectDoorKey
	| room1 room2 player door doorKey1 doorKey2|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorKey1 := DoorKey named: 'Rusty key' weighing: 1.
	doorKey2  := DoorKey named: 'Silver key' weighing: 1.
	door := Door opened.
	player take: doorKey2.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	door closeWithKey: doorKey1.
	
	player openDoorUsing: doorKey2 .
	self assert: door isOpen.
	! !

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:35:40'!
ERROR!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:35:49'!
ERROR!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:35:49'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 20:38:27' prior: 50875604!
test22cantOpenDoorUsingIncorrectDoorKey
	| room1 room2 player door doorKey1 doorKey2|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorKey1 := DoorKey named: 'Rusty key' weighing: 1.
	doorKey2  := DoorKey named: 'Silver key' weighing: 1.
	door := Door opened.
	player take: doorKey2.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	door closeWithKey: doorKey1.
	
	self should: [player openDoorUsing: doorKey2 ] raise: Error - MessageNotUnderstood withMessageText: PlayableCharacter .
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 20:39:11' prior: 50875636!
test22cantOpenDoorUsingIncorrectDoorKey
	| room1 room2 player door doorKey1 doorKey2|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorKey1 := DoorKey named: 'Rusty key' weighing: 1.
	doorKey2  := DoorKey named: 'Silver key' weighing: 1.
	door := Door opened.
	player take: doorKey2.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	door closeWithKey: doorKey1.
	
	self should: [player openDoorUsing: doorKey2 ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription .
	
	! !

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:39:14'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 20:39:25'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 20:40:56'!
test24cantEnterClosedDoor
	| room1 room2 player door |

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	
	self should: [player enterDoor ]
	 raise: Error - MessageNotUnderstood 
	 withMessageText: PlayableCharacter cantEnterClosedDoorErrorDescription! !

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 20:40:58'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:41:05'!
cantEnterClosedDoorErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:41:19' prior: 50875712!
cantEnterClosedDoorErrorDescription
	^'You cant enter a closed door'! !

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 20:41:20'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:41:27'!
enterDoor
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:41:59' prior: 50875727!
enterDoor
	(room at: self forwardPosition ) getEnteredBy: self! !

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 20:42:03'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:42:13'!
getEnteredBy: aPlayableCharacter 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:42:38' prior: 50875740!
getEnteredBy: aPlayableCharacter 
	state getEnteredBy: aPlayableCharacter ! !

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 20:42:40'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 20:43:11' prior: 50875691!
test24cantEnterClosedDoor
	| room1 room2 player door |

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	player closeDoor.
	
	self should: [player enterDoor ]
	 raise: Error - MessageNotUnderstood 
	 withMessageText: PlayableCharacter cantEnterClosedDoorErrorDescription! !

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 20:43:12'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 20:43:48' prior: 50875754!
test24cantEnterClosedDoor
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorkey:= DoorKey named: 'Rusty Key' weighing: 1.
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	player closeDoor.
	
	self should: [player enterDoor ]
	 raise: Error - MessageNotUnderstood 
	 withMessageText: PlayableCharacter cantEnterClosedDoorErrorDescription! !

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 20:43:51'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 20:44:07' prior: 50875775!
test24cantEnterClosedDoor
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorkey:= DoorKey named: 'Rusty Key' weighing: 1.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	player closeDoor.
	
	self should: [player enterDoor ]
	 raise: Error - MessageNotUnderstood 
	 withMessageText: PlayableCharacter cantEnterClosedDoorErrorDescription! !

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 20:44:07'!
ERROR!
!ClosedDoorState methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:44:16'!
getEnteredBy: aPlayableCharacter 
	self shouldBeImplemented.! !
!ClosedDoorState methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:44:34' prior: 50875821!
getEnteredBy: aPlayableCharacter 
	aPlayableCharacter signalCantEnterClosedDoor! !

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 20:44:36'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:44:42'!
signalCantEnterClosedDoor
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:45:02' prior: 50875836!
signalCantEnterClosedDoor
	^self error: self class cantEnterClosedDoorErrorDescription ! !

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 20:45:03'!
PASSED!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 20:45:03'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 20:46:27'!
test24canEnterOpenedDoor
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorkey:= DoorKey named: 'Rusty Key' weighing: 1.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	
	self assert: (player position = 1@0).
	player enterDoor .
	self assert: (player position = 2@3).! !

!testRun: #PlayableCharacterTest #test24canEnterOpenedDoor stamp: 'AD 12/17/2020 20:46:27'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 20:46:45'!
test25canEnterOpenedDoor
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorkey:= DoorKey named: 'Rusty Key' weighing: 1.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	
	self assert: (player position = 1@0).
	player enterDoor .
	self assert: (player position = 2@3).! !

!methodRemoval: PlayableCharacterTest #test24canEnterOpenedDoor stamp: 'AD 12/17/2020 20:46:45'!
test24canEnterOpenedDoor
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorkey:= DoorKey named: 'Rusty Key' weighing: 1.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	
	self assert: (player position = 1@0).
	player enterDoor .
	self assert: (player position = 2@3).!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 20:47:05' prior: 50875965!
test25canEnterOpenedDoor
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorkey:= DoorKey named: 'Rusty Key' weighing: 1.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	
	self assert: (player position = (1@0)).
	player enterDoor .
	self assert: (player position = (2@3)).! !

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 20:47:05'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:52:28' prior: 50870202!
at: aPosition putDoor: aDoor intoRoom: aDestinationRoom at: aPositionInTheDestinationRoom
	self = aDestinationRoom  ifTrue:[ self error: self class cantPutDownADoorThatLeadsIntoTheSameRoomErrorDescription].
	self at: aPosition put: aDoor.
	aDestinationRoom at: aPositionInTheDestinationRoom put: aDoor.
	aDoor connect: self with: aDestinationRoom .! !

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 20:52:31'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:52:43'!
connect: aRoom with: aRoom2 
	self shouldBeImplemented.! !

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'AD 12/17/2020 20:53:51'!
StageObject subclass: #Door
	instanceVariableNames: 'key state room1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'AD 12/17/2020 20:53:52'!
StageObject subclass: #Door
	instanceVariableNames: 'key state room1 room2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:53:50' prior: 50876041!
connect: aRoom with: aDestinationRoom
	room1:= aRoom.
	room2:= aDestinationRoom ! !

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 20:53:55'!
ERROR!
!OpenedDoorState methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:54:05'!
getEnteredBy: aPlayableCharacter 
	self shouldBeImplemented.! !
!OpenedDoorState methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:54:21' prior: 50876073!
getEnteredBy: aPlayableCharacter 
	door getEnteredBy: aPlayableCharacter .! !
!OpenedDoorState methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:54:50' prior: 50876079!
getEnteredBy: aPlayableCharacter 
	door passThroughDoor: aPlayableCharacter .! !

----SNAPSHOT----(17 December 2020 20:54:56) CuisUniversity-4384.image priorSource: 17253075!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 20:54:57'!
ERROR!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 20:55:15'!
ERROR!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 20:55:15'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:55:24'!
passThroughDoor: aPlayableCharacter 
	self shouldBeImplemented.! !

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'AD 12/17/2020 20:57:26'!
StageObject subclass: #Door
	instanceVariableNames: 'key state room1 room2 destinationPosition2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:57:24' prior: 50876103!
passThroughDoor: aPlayableCharacter 
	aPlayableCharacter goThroughDoorInto: room2 at: destinationPosition2! !

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 20:57:31'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:57:45'!
goThroughDoorInto: aRoom at: anUndefinedObject 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:58:34' prior: 50876128!
goThroughDoorInto: aRoom at: aPosition. 
	room := aRoom .
	room at: aPosition put: self.! !

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 20:58:35'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:59:33'!
connectRooms: aRoom with: aDestinationRoom
	room1:= aRoom.
	room2:= aDestinationRoom ! !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 20:59:33' prior: 50876024!
at: aPosition putDoor: aDoor intoRoom: aDestinationRoom at: aPositionInTheDestinationRoom
	self = aDestinationRoom  ifTrue:[ self error: self class cantPutDownADoorThatLeadsIntoTheSameRoomErrorDescription].
	self at: aPosition put: aDoor.
	aDestinationRoom at: aPositionInTheDestinationRoom put: aDoor.
	aDoor connectRooms: self with: aDestinationRoom .! !

!methodRemoval: Door #connect:with: stamp: 'AD 12/17/2020 20:59:33'!
connect: aRoom with: aDestinationRoom
	room1:= aRoom.
	room2:= aDestinationRoom !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:00:42' prior: 50876149!
at: aPosition putDoor: aDoor intoRoom: aDestinationRoom at: aPositionInTheDestinationRoom
	self = aDestinationRoom  ifTrue:[ self error: self class cantPutDownADoorThatLeadsIntoTheSameRoomErrorDescription].
	self at: aPosition put: aDoor.
	aDestinationRoom at: aPositionInTheDestinationRoom put: aDoor.
	aDoor connectRooms: self with: aDestinationRoom.
	aDoor connectExitPositions: aPosition with: aPositionInTheDestinationRoom .! !
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:01:13'!
connectExitPositions: aPosition with: aPositionInTheDestinationRoom ! !
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:04:36' prior: 50876118!
passThroughDoor: aPlayableCharacter 
	aPlayableCharacter goThroughDoorInto: room2 at: destinationPosition2! !
!Door methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:05:06' prior: 50876190!
passThroughDoor: aPlayableCharacter 
	aPlayableCharacter goThroughDoorInto: room2 at: (room2 positionOf: self).! !

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:05:15'!
ERROR!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:05:15'!
ERROR!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 21:05:41'!
PASSED!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:06:38'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:07:35' prior: 50876134!
goThroughDoorInto: aRoom at: aPosition. 
	room := aRoom .
	room at: aPosition  put: self.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:08:12' prior: 50876217!
goThroughDoorInto: aRoom at: aPosition. 
	room := aRoom .
	room at: (aPosition + self forwardPosition) put: self.! !

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:08:18'!
ERROR!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:08:18'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:11:26' prior: 50876224!
goThroughDoorInto: aRoom at: aPosition
	
	|headingToward|
	headingToward := self forwardPosition.
	room := aRoom .
	room at: (aPosition + headingToward ) put: self.! !

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:11:28'!
ERROR!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:12:50'!
FAILURE!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:12:50'!
FAILURE!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:14:17' prior: 50876238!
goThroughDoorInto: aRoom at: aPosition
	
	|headingToward|
	headingToward := self forwardPosition.
	room := aRoom .
	room at: (aPosition + heading forwardPoint ) put: self.! !

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:14:26'!
PASSED!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:14:39' prior: 50876256!
goThroughDoorInto: aRoom at: aPosition
	
	
	room := aRoom .
	room at: (aPosition + heading forwardPoint ) put: self.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:16:27'!
test26cantEnterDoorIfDestinationPositionIsInvalid
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorkey:= DoorKey named: 'Rusty Key' weighing: 1.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	room2 at: 2@3 put: self paper.
	
	self should: [player enterDoor ] raise: Error - MessageNotUnderstood! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:16:49' prior: 50876275!
test26cantEnterDoorIfDestinationPositionIsInvalid
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorkey:= DoorKey named: 'Rusty Key' weighing: 1.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	room2 at: 2@3 put: self paper.
	
	self should: [player enterDoor ] raise: Error - MessageNotUnderstood withMessageText: Room invalidPositionErrorDescription .! !

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:16:49'!
FAILURE!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:16:58'!
PASSED!

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:17:59'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:18:14' prior: 50876294!
test26cantEnterDoorIfDestinationPositionIsInvalid
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorkey:= DoorKey named: 'Rusty Key' weighing: 1.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	room2 at: 2@3 put: self paper.
	
	self should: [player enterDoor ] raise: Error - MessageNotUnderstood withMessageText: Room positionIsNotEmptyErrorDescription .! !

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 21:18:14'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 21:18:15'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:18:15'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:18:15'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 21:18:15'!
PASSED!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 21:18:15'!
PASSED!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:18:15'!
PASSED!

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:18:15'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:18:36'!
test26cantEnterDoorIfDestinationPositionIsNotEmpty
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorkey:= DoorKey named: 'Rusty Key' weighing: 1.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	room2 at: 2@3 put: self paper.
	
	self should: [player enterDoor ] raise: Error - MessageNotUnderstood withMessageText: Room positionIsNotEmptyErrorDescription .! !

!methodRemoval: PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:18:36'!
test26cantEnterDoorIfDestinationPositionIsInvalid
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorkey:= DoorKey named: 'Rusty Key' weighing: 1.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	room2 at: 2@3 put: self paper.
	
	self should: [player enterDoor ] raise: Error - MessageNotUnderstood withMessageText: Room positionIsNotEmptyErrorDescription .!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:18:46'!
test27cantEnterDoorIfDestinationPositionIsInvalid
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorkey:= DoorKey named: 'Rusty Key' weighing: 1.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	room2 at: 2@3 put: self paper.
	
	self should: [player enterDoor ] raise: Error - MessageNotUnderstood withMessageText: Room positionIsNotEmptyErrorDescription.! !

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsNotEmpty stamp: 'AD 12/17/2020 21:18:49'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:19:33' prior: 50876493!
test27cantEnterDoorIfDestinationPositionIsInvalid
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorkey:= DoorKey named: 'Rusty Key' weighing: 1.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 9@9.
	
	
	self should: [player enterDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room invalidPositionErrorDescription .! !

!testRun: #PlayableCharacterTest #test27cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsNotEmpty stamp: 'AD 12/17/2020 21:19:33'!
PASSED!

!testRun: #PlayableCharacterTest #test27cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:19:33'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:20:06'!
rustyKey

	^ DoorKey named: 'Rusty Key' weighing: 1! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:20:06' prior: 50876518!
test27cantEnterDoorIfDestinationPositionIsInvalid
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorkey:= self rustyKey.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 9@9.
	
	
	self should: [player enterDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room invalidPositionErrorDescription .! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:20:24'!
rustyDoorKey

	^ DoorKey named: 'Rusty Key' weighing: 1! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:20:24' prior: 50876651!
test27cantEnterDoorIfDestinationPositionIsInvalid
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorkey:= self rustyDoorKey.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 9@9.
	
	
	self should: [player enterDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room invalidPositionErrorDescription .! !

!methodRemoval: PlayableCharacterTest #rustyKey stamp: 'AD 12/17/2020 21:20:24'!
rustyKey

	^ DoorKey named: 'Rusty Key' weighing: 1!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsNotEmpty stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test27cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:20:27'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:20:49'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:21:13' prior: 50870789!
test22canCloseDoorUsingKey
	| room1 room2 player door doorKey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorKey := self rustyDoorKey .
	player take: doorKey .
	door := Door opened.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	self assert: door isOpen.
	
	player closeDoor .
	self deny: door isOpen.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:21:38' prior: 50876451!
test26cantEnterDoorIfDestinationPositionIsNotEmpty
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	doorkey:= self rustyDoorKey.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	room2 at: 2@3 put: self paper.
	
	self should: [player enterDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room positionIsNotEmptyErrorDescription .! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:21:58' prior: 50876825!
test26cantEnterDoorIfDestinationPositionIsNotEmpty
	| room1 room2 player door  |

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1..
	player take: self rustyDoorKey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	room2 at: 2@3 put: self paper.
	
	self should: [player enterDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room positionIsNotEmptyErrorDescription .! !

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsNotEmpty stamp: 'AD 12/17/2020 21:21:59'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:22:19' prior: 50876002!
test25canEnterOpenedDoor
	| room1 room2 player door  |

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player take: self rustyDoorKey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	
	self assert: (player position = (1@0)).
	player enterDoor .
	self assert: (player position = (2@3)).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:22:36' prior: 50875798!
test24cantEnterClosedDoor
	| room1 room2 player door  |

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	player take: self rustyDoorKey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	player closeDoor.
	
	self should: [player enterDoor ]
	 raise: Error - MessageNotUnderstood 
	 withMessageText: PlayableCharacter cantEnterClosedDoorErrorDescription! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:23:06' prior: 50875659!
test22cantOpenDoorUsingIncorrectDoorKey
	| room1 room2 player door  doorKey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1.
	
	doorKey  := DoorKey named: 'Silver key' weighing: 1.
	door := Door opened.
	player take: doorKey.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	door closeWithKey: self rustyDoorKey .
	
	self should: [player openDoorUsing: doorKey ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription .
	
	! !

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsNotEmpty stamp: 'AD 12/17/2020 21:23:06'!
PASSED!

!testRun: #PlayableCharacterTest #test27cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:23:06'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:23:56'!
defaultPlayerIn: room1

	^ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North in: room1! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:23:56' prior: 50876906!
test22cantOpenDoorUsingIncorrectDoorKey
	| room1 room2 player door  doorKey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := self defaultPlayerIn: room1.
	
	doorKey  := DoorKey named: 'Silver key' weighing: 1.
	door := Door opened.
	player take: doorKey.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	door closeWithKey: self rustyDoorKey .
	
	self should: [player openDoorUsing: doorKey ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription .
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:24:07' prior: 50876808!
test22canCloseDoorUsingKey
	| room1 room2 player door doorKey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := self defaultPlayerIn: room1.
	doorKey := self rustyDoorKey .
	player take: doorKey .
	door := Door opened.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	self assert: door isOpen.
	
	player closeDoor .
	self deny: door isOpen.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:24:13' prior: 50870628!
test21cantCloseDoorOnEmptyPosition
	| room1 player|

	
	room1 := self defaultRoom.
	
	player := self defaultPlayerIn: room1.
	
	self should: [player closeDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: PlayableCharacter cantCloseANonExistingDoorErrorDescription ! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:24:21' prior: 50874433!
test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey
	| room1 room2 player door |

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := self defaultPlayerIn: room1..
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	
	self should: [player closeDoor ]
	 raise: Error - MessageNotUnderstood 
	 withMessageText: Backpack noDoorKeyInBackpackErrorDescription ! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:24:23' prior: 50877092!
test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey
	| room1 room2 player door |

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := self defaultPlayerIn: room1.
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	
	self should: [player closeDoor ]
	 raise: Error - MessageNotUnderstood 
	 withMessageText: Backpack noDoorKeyInBackpackErrorDescription ! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:24:30' prior: 50876887!
test24cantEnterClosedDoor
	| room1 room2 player door  |

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := self defaultPlayerIn: room1.
	player take: self rustyDoorKey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	player closeDoor.
	
	self should: [player enterDoor ]
	 raise: Error - MessageNotUnderstood 
	 withMessageText: PlayableCharacter cantEnterClosedDoorErrorDescription! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:24:41' prior: 50876870!
test25canEnterOpenedDoor
	| room1 room2 player door  |

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := self defaultPlayerIn: room1.
	player take: self rustyDoorKey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	
	self assert: (player position = (1@0)).
	player enterDoor .
	self assert: (player position = (2@3)).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:25:08' prior: 50876846!
test26cantEnterDoorIfDestinationPositionIsNotEmpty
	| room1 room2 player door  |

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := self defaultPlayerIn: room1.
	player take: self rustyDoorKey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 2@2.
	room2 at: 2@3 put: self paper.
	
	self should: [player enterDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room positionIsNotEmptyErrorDescription .! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:25:24' prior: 50876676!
test27cantEnterDoorIfDestinationPositionIsInvalid
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := self defaultPlayerIn: room1.
	doorkey:= self rustyDoorKey.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 9@9.
	
	
	self should: [player enterDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room invalidPositionErrorDescription .! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:25:27' prior: 50877174!
test27cantEnterDoorIfDestinationPositionIsInvalid
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := self defaultPlayerIn: room1.
	doorkey:= self rustyDoorKey.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 putDoor:  door intoRoom: room2 at: 9@9.
	
	self should: [player enterDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room invalidPositionErrorDescription .! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:25:52' prior: 50869266!
test01cantCreateDoorOutsideOfRoom

	|room door|
	
	room := self defaultEmptyRoom .
	door := Door new.
	
	self should: [room at: -1@-1 put: door ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room invalidPositionErrorDescription.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:26:08'!
rock

	^ NoPointsPortableObject named: 'Rock' weighing: 1! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:26:08' prior: 50869941!
test04aDoorCanOnlyBeClosedUsingAKey

	|door object|
	
	door := Door new.
	object := self rock.
	
	self should:  [door closeWith: object.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantCloseDoorWithoutAKeyErrorDescription.
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:26:45' prior: 50870054!
test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey
	|door  object|
	
	door := Door new.
	object:= self rock .
	
	door closeWith: self rustyKey.
	self should:  [door openWith: object.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantOpenDoorWithoutAKeyErrorDescription.
	
	
	! !

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 21:26:47'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:26:54'!
rustyKey
	self shouldBeImplemented.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:27:14' prior: 50877254!
rustyKey
	^DoorKey named: 'Rusty Key' weighing: 1.! !

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 21:27:15'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 21:27:15'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 21:27:15'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 21:27:15'!
PASSED!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 21:27:15'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 21:27:15'!
PASSED!

!testRun: #DoorTest #test06aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 21:27:15'!
PASSED!

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 21:27:15'!
PASSED!

!testRun: #DoorTest #test08whenADoorIsOpenItIsInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 21:27:15'!
PASSED!

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 21:27:15'!
PASSED!

!testRun: #DoorTest #test10whenADoorIsClosedItIsInAClosedStateInBothRooms stamp: 'AD 12/17/2020 21:27:15'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:27:44' prior: 50870128!
test06aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey
	|door key|
	
	door := Door new.
	
	key := DoorKey named: 'Silver key' weighing: 1.
	
	door closeWith: self rustyKey .
	self should:  [door openWith: key.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantOpenDoorWithoutTheSameKeyThatWasUsedToCloseItErrorDescription.
	
	
	! !

!testRun: #DoorTest #test06aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 21:27:44'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 21:27:44'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 21:27:44'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 21:27:44'!
PASSED!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 21:27:44'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 21:27:44'!
PASSED!

!testRun: #DoorTest #test06aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 21:27:44'!
PASSED!

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 21:27:45'!
PASSED!

!testRun: #DoorTest #test08whenADoorIsOpenItIsInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 21:27:45'!
PASSED!

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 21:27:45'!
PASSED!

!testRun: #DoorTest #test10whenADoorIsClosedItIsInAClosedStateInBothRooms stamp: 'AD 12/17/2020 21:27:45'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:28:13' prior: 50870171!
test07aDoorCantLeadIntoTheSameRoom
	|door room|
	
	door := Door new.
	
	
	
	self should:  [self defaultEmptyRoom at: 1@1 putDoor: door intoRoom: room at: 2@2] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room cantPutDownADoorThatLeadsIntoTheSameRoomErrorDescription.
	
	
	! !

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 21:28:15'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:28:22' prior: 50877362!
test07aDoorCantLeadIntoTheSameRoom
	|door room|
	
	door := Door new.
	room := self defaultEmptyRoom .
	
	
	self should:  [room at: 1@1 putDoor: door intoRoom: room at: 2@2] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room cantPutDownADoorThatLeadsIntoTheSameRoomErrorDescription.
	
	
	! !

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 21:28:22'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 21:28:22'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 21:28:22'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 21:28:22'!
PASSED!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 21:28:22'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 21:28:22'!
PASSED!

!testRun: #DoorTest #test06aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 21:28:22'!
PASSED!

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 21:28:22'!
PASSED!

!testRun: #DoorTest #test08whenADoorIsOpenItIsInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 21:28:22'!
PASSED!

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 21:28:22'!
PASSED!

!testRun: #DoorTest #test10whenADoorIsClosedItIsInAClosedStateInBothRooms stamp: 'AD 12/17/2020 21:28:22'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:28:37' prior: 50874904!
test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms
	|door room1 room2 doorKey|
	
	door := Door opened.
	room1 := self defaultEmptyRoom .
	room2 := self defaultEmptyRoom .
	doorKey := self rustyKey . 
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	door closeWith: doorKey.
	
	door openWith: doorKey.
	
	self assert: (room1 at: 1@1) isOpen. 
	self assert: (room2 at: 2@2) isOpen. 
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:30:02' prior: 50874966!
test10whenADoorIsClosedItIsInAClosedStateInBothRooms
	|door room1 room2 |
	
	door := Door opened.
	room1 := self defaultEmptyRoom .
	room2 := self defaultEmptyRoom .
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	
	door closeWith: self rustyKey .
	
	
	self deny: (room1 at: 1@1) isOpen. 
	self deny: (room2 at: 2@2) isOpen. 
	
	
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:30:39' prior: 50877226!
test04aDoorCanOnlyBeClosedUsingAKey

	|door |
	
	door := Door new.
	
	
	self should:  [door closeWith: self rock.] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Door cantCloseDoorWithoutAKeyErrorDescription.
	
	
	! !

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 21:30:41'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 21:30:41'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 21:30:41'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 21:30:41'!
PASSED!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 21:30:41'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 21:30:41'!
PASSED!

!testRun: #DoorTest #test06aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 21:30:41'!
PASSED!

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 21:30:41'!
PASSED!

!testRun: #DoorTest #test08whenADoorIsOpenItIsInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 21:30:41'!
PASSED!

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 21:30:41'!
PASSED!

!testRun: #DoorTest #test10whenADoorIsClosedItIsInAClosedStateInBothRooms stamp: 'AD 12/17/2020 21:30:41'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #DoorTest #test06aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #DoorTest #test08whenADoorIsOpenItIsInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #DoorTest #test10whenADoorIsClosedItIsInAClosedStateInBothRooms stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsNotEmpty stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #PlayableCharacterTest #test27cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'AD 12/17/2020 21:30:45'!
PASSED!

StageObject subclass: #Door
	instanceVariableNames: 'key state room1 room2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'AD 12/17/2020 21:32:28'!
StageObject subclass: #Door
	instanceVariableNames: 'key state room1 room2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!methodRemoval: Door #connectExitPositions:with: stamp: 'AD 12/17/2020 21:33:49'!
connectExitPositions: aPosition with: aPositionInTheDestinationRoom !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:33:57' prior: 50876168!
at: aPosition putDoor: aDoor intoRoom: aDestinationRoom at: aPositionInTheDestinationRoom
	self = aDestinationRoom  ifTrue:[ self error: self class cantPutDownADoorThatLeadsIntoTheSameRoomErrorDescription].
	self at: aPosition put: aDoor.
	aDestinationRoom at: aPositionInTheDestinationRoom put: aDoor.
	aDoor connectRooms: self with: aDestinationRoom.
	! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #DoorTest #test06aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #DoorTest #test08whenADoorIsOpenItIsInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #DoorTest #test10whenADoorIsClosedItIsInAClosedStateInBothRooms stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 21:34:03'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsNotEmpty stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #PlayableCharacterTest #test27cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'AD 12/17/2020 21:34:04'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'AD 12/17/2020 21:34:04'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:35:05'!
test27cantEnterAnObjectWhichIsntADoor
	| room1 room2 player door  doorkey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := self defaultPlayerIn: room1.
	doorkey:= self rustyDoorKey.
	player take: doorkey .
	door := Door opened.
	room1 at: 1@1 put: self paper .
	
	self should: [player enterDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room invalidPositionErrorDescription .! !

!testRun: #PlayableCharacterTest #test27cantEnterAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:35:12'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:35:31' prior: 50878017!
test27cantEnterAnObjectWhichIsntADoor
	| room1 player |

	
	room1 := self defaultRoom.
	
	player := self defaultPlayerIn: room1.
	
	
	
	room1 at: 1@1 put: self paper .
	
	self should: [player enterDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: Room invalidPositionErrorDescription .! !

!testRun: #PlayableCharacterTest #test27cantEnterAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:35:36'!
ERROR!
!StageObject methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:35:48'!
getEnteredBy: aPlayableCharacter 
	self shouldBeImplemented.! !
!StageObject methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:36:08' prior: 50878053!
getEnteredBy: aPlayableCharacter 
	aPlayableCharacter signalCantEnterANonDoorObject! !

!testRun: #PlayableCharacterTest #test27cantEnterAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:36:13'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:36:19'!
signalCantEnterANonDoorObject
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:36:39' prior: 50878067!
signalCantEnterANonDoorObject
	^self error: self class cantEnterANonDoorObject! !

!testRun: #PlayableCharacterTest #test27cantEnterAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:36:41'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:36:48'!
cantEnterANonDoorObject
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:37:04' prior: 50878082!
cantEnterANonDoorObject
	^'The object you are trying to enter is not a door'! !

!testRun: #PlayableCharacterTest #test27cantEnterAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:37:04'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:37:22' prior: 50878037!
test27cantEnterAnObjectWhichIsntADoor
	| room1 player |

	
	room1 := self defaultRoom.
	
	player := self defaultPlayerIn: room1.
	
	
	
	room1 at: 1@1 put: self paper .
	
	self should: [player enterDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: PlayableCharacter cantEnterANonDoorObject .! !

!testRun: #PlayableCharacterTest #test27cantEnterAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsNotEmpty stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test27cantEnterAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:37:22'!
PASSED!

!testRun: #PlayableCharacterTest #test27cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:37:22'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:37:36'!
test28cantEnterAnObjectWhichIsntADoor
	| room1 player |

	
	room1 := self defaultRoom.
	
	player := self defaultPlayerIn: room1.
	
	
	
	room1 at: 1@1 put: self paper .
	
	self should: [player enterDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: PlayableCharacter cantEnterANonDoorObject .! !

!methodRemoval: PlayableCharacterTest #test27cantEnterAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:37:36'!
test27cantEnterAnObjectWhichIsntADoor
	| room1 player |

	
	room1 := self defaultRoom.
	
	player := self defaultPlayerIn: room1.
	
	
	
	room1 at: 1@1 put: self paper .
	
	self should: [player enterDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: PlayableCharacter cantEnterANonDoorObject .!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:38:08'!
test29cantOpenAnObjectWhichIsntADoor
	| room1 player |

	
	room1 := self defaultRoom.
	
	player := self defaultPlayerIn: room1.
	
	
	
	room1 at: 1@1 put: self paper .
	
	self should: [player openWithKey: self rustyDoorKey ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: PlayableCharacter cantOpenANonDoorObject .! !

!testRun: #PlayableCharacterTest #test29cantOpenAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:38:09'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:38:19'!
cantOpenANonDoorObject
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:38:41' prior: 50878264!
cantOpenANonDoorObject
	^'cant open a non door stageobject'! !

!testRun: #PlayableCharacterTest #test29cantOpenAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:38:41'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:39:07' prior: 50878247!
test29cantOpenAnObjectWhichIsntADoor
	| room1 player |

	
	room1 := self defaultRoom.
	
	player := self defaultPlayerIn: room1.
	
	
	
	room1 at: 1@1 put: self paper .
	
	self should: [player openWithKey: (self rustyDoorKey )] 
	raise: Error - MessageNotUnderstood 
	withMessageText: PlayableCharacter cantOpenANonDoorObject .! !

!testRun: #PlayableCharacterTest #test29cantOpenAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:39:07'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:39:18' prior: 50878279!
test29cantOpenAnObjectWhichIsntADoor
	| room1 player |

	
	room1 := self defaultRoom.
	
	player := self defaultPlayerIn: room1.
	
	
	
	room1 at: 1@1 put: self paper .
	
	self should: [player openDoorUsing: (self rustyDoorKey )] 
	raise: Error - MessageNotUnderstood 
	withMessageText: PlayableCharacter cantOpenANonDoorObject .! !

!testRun: #PlayableCharacterTest #test29cantOpenAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:39:18'!
ERROR!
!StageObject methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:39:26'!
getOpenedBy: aPlayableCharacter using: aDoorKey 
	self shouldBeImplemented.! !
!StageObject methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:39:45' prior: 50878313!
getOpenedBy: aPlayableCharacter using: aDoorKey 
	aPlayableCharacter signalCantOpenANonDoorObject! !

!testRun: #PlayableCharacterTest #test29cantOpenAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:39:47'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:39:53'!
signalCantOpenANonDoorObject
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:40:08' prior: 50878329!
signalCantOpenANonDoorObject
	^self error: self class cantOpenANonDoorObject ! !

!testRun: #PlayableCharacterTest #test29cantOpenAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsNotEmpty stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test27cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test28cantEnterAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:40:09'!
PASSED!

!testRun: #PlayableCharacterTest #test29cantOpenAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:40:09'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:40:29'!
test30cantCloseAnObjectWhichIsntADoor
	| room1 player |

	
	room1 := self defaultRoom.
	
	player := self defaultPlayerIn: room1.
	
	
	
	room1 at: 1@1 put: self paper .
	
	self should: [player closeDoor ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: PlayableCharacter cantOpenANonDoorObject .! !

!testRun: #PlayableCharacterTest #test30cantCloseAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:40:38'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:42:00' prior: 50878456!
test30cantCloseAnObjectWhichIsntADoor
	| room1 player |

	
	room1 := self defaultRoom.
	
	player := self defaultPlayerIn: room1.
	
	
	
	room1 at: 1@1 put: self paper .
	
	self should: [player closeDoorUsing: (self rustyDoorKey) ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: PlayableCharacter cantOpenANonDoorObject .! !

!testRun: #PlayableCharacterTest #test30cantCloseAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:42:03'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:42:07'!
closeDoorUsing: aDoorKey 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:42:26' prior: 50878490!
closeDoorUsing: aDoorKey 
	(room at: self forwardPosition ) getClosedBy: self using: aDoorKey .! !

!testRun: #PlayableCharacterTest #test30cantCloseAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:42:28'!
ERROR!
!StageObject methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:42:38'!
getClosedBy: aPlayableCharacter using: aDoorKey 
	self shouldBeImplemented.! !
!StageObject methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:42:55' prior: 50878505!
getClosedBy: aPlayableCharacter using: aDoorKey 
	aPlayableCharacter signalCantCloseANonDoorObject! !

!testRun: #PlayableCharacterTest #test30cantCloseAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:42:57'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:43:03'!
signalCantCloseANonDoorObject
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:43:30' prior: 50878521!
signalCantCloseANonDoorObject
	^self error: self class cantCloseANonDoorStageObject! !

!testRun: #PlayableCharacterTest #test30cantCloseAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:43:33'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:43:38'!
cantCloseANonDoorStageObject
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'AD 12/17/2020 21:44:00' prior: 50878537!
cantCloseANonDoorStageObject
	^'Cant close an stage object which isnt a door'! !

!testRun: #PlayableCharacterTest #test30cantCloseAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:44:01'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:44:25' prior: 50878473!
test30cantCloseAnObjectWhichIsntADoor
	| room1 player |

	
	room1 := self defaultRoom.
	
	player := self defaultPlayerIn: room1.
	
	
	
	room1 at: 1@1 put: self paper .
	
	self should: [player closeDoorUsing: (self rustyDoorKey) ] 
	raise: Error - MessageNotUnderstood 
	withMessageText: PlayableCharacter cantCloseANonDoorStageObject .! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:45:14' prior: 50877065!
test22canCloseDoorUsingKey
	| room1 room2 player door doorKey|

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := self defaultPlayerIn: room1.
	player take: doorKey .
	door := Door opened.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	self assert: door isOpen.
	
	player closeDoorUsing: (self rustyDoorKey ).
	self deny: door isOpen.
	! !

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:45:15'!
ERROR!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:45:34'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:45:41' prior: 50878566!
test22canCloseDoorUsingKey
	| room1 room2 player door |

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := self defaultPlayerIn: room1.
	door := Door opened.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	self assert: door isOpen.
	
	player closeDoorUsing: (self rustyDoorKey ).
	self deny: door isOpen.
	! !

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:45:42'!
ERROR!
!Door methodsFor: 'initialization' stamp: 'AD 12/17/2020 21:46:07' prior: 50876143!
connectRooms: aRoom with: aDestinationRoom
	room1:= aRoom.
	room2:= aDestinationRoom ! !
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 21:47:19' overrides: 50878511!
getClosedBy: aPlayableCharacter using: aDoorKey 

	self isOpen ifFalse: [self closeWithKey: (aPlayableCharacter useDoorKey: aDoorKey )]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:47:25'!
FAILURE!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsNotEmpty stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test27cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test28cantEnterAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test29cantOpenAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test30cantCloseAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:47:25'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:47:25'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:47:31'!
FAILURE!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsNotEmpty stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test27cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test28cantEnterAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test29cantOpenAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test30cantCloseAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:47:31'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:47:31'!
FAILURE!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 21:48:40'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:49:38'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:49:44'!
FAILURE!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsNotEmpty stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test27cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test28cantEnterAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test29cantOpenAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test30cantCloseAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:49:44'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:49:44'!
FAILURE!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:49:50'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #DoorTest #test06aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #DoorTest #test08whenADoorIsOpenItIsInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #DoorTest #test10whenADoorIsClosedItIsInAClosedStateInBothRooms stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:49:54'!
FAILURE!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsNotEmpty stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test27cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test28cantEnterAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test29cantOpenAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test30cantCloseAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'AD 12/17/2020 21:49:54'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:49:54'!
FAILURE!

----SNAPSHOT----(17 December 2020 21:50:11) CuisUniversity-4384.image priorSource: 17422064!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 21:50:19'!
PASSED!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:50:22'!
PASSED!

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsNotEmpty stamp: 'AD 12/17/2020 21:50:25'!
PASSED!

!testRun: #PlayableCharacterTest #test27cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:50:28'!
PASSED!

!testRun: #PlayableCharacterTest #test28cantEnterAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:50:32'!
PASSED!

!testRun: #PlayableCharacterTest #test29cantOpenAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:50:35'!
PASSED!

!testRun: #PlayableCharacterTest #test30cantCloseAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:50:38'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:50:44'!
FAILURE!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:50:44'!
FAILURE!
!Door methodsFor: 'accessing' stamp: 'AD 12/17/2020 21:51:17' prior: 50878610 overrides: 50878511!
getClosedBy: aPlayableCharacter using: aDoorKey 

	self isOpen ifTrue: [self closeWithKey: (aPlayableCharacter useDoorKey: aDoorKey )]! !

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:51:20'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:51:40' prior: 50878587!
test22canCloseDoorUsingKey
	| room1 room2 player door |

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := self defaultPlayerIn: room1.
	door := Door opened.
	
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	self assert: door isOpen.
	
	player closeDoor.
	self deny: door isOpen.
	! !

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:51:42'!
ERROR!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:51:42'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/17/2020 21:51:58' prior: 50879285!
test22canCloseDoorUsingKey
	| room1 room2 player door |

	
	room1 := self defaultRoom.
	room2 := self defaultRoom.
	player := self defaultPlayerIn: room1.
	door := Door opened.
	player take: self rustyDoorKey .
	room1 at: 1@1 putDoor: door intoRoom: room2 at: 2@2.
	self assert: door isOpen.
	
	player closeDoor.
	self deny: door isOpen.
	! !

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsNotEmpty stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test27cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test28cantEnterAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test29cantOpenAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #PlayableCharacterTest #test30cantCloseAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:51:58'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #DoorTest #test01cantCreateDoorOutsideOfRoom stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #DoorTest #test02whenCreatingADoorThePositionThatYouEndUpOnWhenOpeningCantBeOutsideOfRoom stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #DoorTest #test03youCanCreateADoorIntoAnotherRoomWhenDestinationPositionIsValid stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #DoorTest #test04aDoorCanOnlyBeClosedUsingAKey stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #DoorTest #test05aDoorClosedByACertainKeyCantBeOpenedUsingAnObjectWhichIsntADoorKey stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #DoorTest #test06aDoorClosedByACertainKeyCantBeOpenedUsingAnotherKey stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #DoorTest #test07aDoorCantLeadIntoTheSameRoom stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #DoorTest #test08whenADoorIsOpenItIsInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 21:52:04'!
PASSED!

!testRun: #DoorTest #test09aDoorCanBeOpenedWithTheCorrectDoorKeyAndTheDoorIsLeftInAOpenedStateInBothRooms stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #DoorTest #test10whenADoorIsClosedItIsInAClosedStateInBothRooms stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test21cantCloseDoorOnEmptyPosition stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test22canCloseDoorUsingKey stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test22cantOpenDoorUsingIncorrectDoorKey stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test23cantCloseDoorWithNoAssociatedKeyWhenPlayerHasNoDoorKey stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test24cantEnterClosedDoor stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test25canEnterOpenedDoor stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test26cantEnterDoorIfDestinationPositionIsNotEmpty stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test27cantEnterDoorIfDestinationPositionIsInvalid stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test28cantEnterAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test29cantOpenAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #PlayableCharacterTest #test30cantCloseAnObjectWhichIsntADoor stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'AD 12/17/2020 21:52:05'!
PASSED!

----SNAPSHOT----(17 December 2020 21:53:17) CuisUniversity-4384.image priorSource: 17522672!

----SNAPSHOT----(17 December 2020 21:54:16) CuisUniversity-4384.image priorSource: 17537014!