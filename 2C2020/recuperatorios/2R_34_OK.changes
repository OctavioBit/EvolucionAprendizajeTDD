----STARTUP---- (17 December 2020 17:09:32) as E:\Cursada Actual IS1\!!Recuperatorio Segundo Parcial\windows64\CuisUniversity-4384.image!


----End fileIn of E:\Cursada Actual IS1\!!Recuperatorio Segundo Parcial\ISW1-2020-2C-Recuperatorio-2doParcial.st----!

TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'LNB 12/17/2020 17:32:42'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'LNB 12/17/2020 17:47:57'!
StageObject subclass: #Door
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'nil' stamp: 'LNB 12/17/2020 17:47:46'!
test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid

	self 
		should: [Door connecting: (Room ofWidth: 10 andHeight: 10) at: (-1@5) to: (Room ofWidth: 10 andHeight: 10) at: (0@5) ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door cantCreateDoorOnNonValidSpaceInRoom equals: anError messageText.
			]! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 17:48:19' prior: 50869237!
test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid

	self 
		should: [| room1 |
	room1 := Room ofWidth: 10 andHeight: 10.
	Door connecting: (room1) at: (-1@5) to: (Room ofWidth: 10 andHeight: 10) at: (0@5) ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door cantCreateDoorOnNonValidSpaceInRoom equals: anError messageText.
			]! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 17:49:03' prior: 50869251!
test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid

	| room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
		
	self 
		should: [
	
	Door connecting: room1 at: (-1@5) to: room2 at: (0@5) ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door cantCreateDoorOnNonValidSpaceInRoom equals: anError messageText.
			]! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 17:49:54' prior: 50869266!
test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid

	| room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
		
	self 
		should: [
	
	Door connecting: room1 at: (-1@5) to: room2 at: (0@5) ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door cantCreateDoorOnNonValidSpaceInRoom equals: anError messageText.
			self asert: room1 isEmptyAt: (-1@5).
			self asert: room2 isEmptyAt: (0@5) ]! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 17:50:07' prior: 50869282!
test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid

	| room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
		
	self 
		should: [
	
	Door connecting: room1 at: (-1@5) to: room2 at: (0@5) ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door cantCreateDoorOnNonValidSpaceInRoom equals: anError messageText.
			self assert: (room1 isEmptyAt: (-1@5)).
			self assert: (room2 isEmptyAt: (0@5)). ]! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 17:51:10' prior: 50869300!
test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid

	| room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
		
	self 
		should: [ Door connecting: room1 at: (-1@5) to: room2 at: (0@5) ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door cantCreateDoorOnNonValidSpaceInRoom equals: anError messageText.
			self assert: (room1 isEmptyAt: (-1@5)).
			self assert: (room2 isEmptyAt: (0@5)). ]! !

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 17:51:17'!
ERROR!
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 17:51:43'!
connecting: aRoom at: aPoint to: aRoom3 at: aPoint4 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeConnecting: aRoom at: aPoint to: aRoom3 at: aPoint4 ! !
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 17:51:59' prior: 50869341!
connecting: aRoom at: aPoint to: aRoom3 at: aPoint4 

	^self new initializeConnecting: aRoom at: aPoint to: aRoom3 at: aPoint4 ! !
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 17:52:16' prior: 50869351!
connecting: aRoom at: aPosition to: aRoom3 at: aPoint4 

	^self new initializeConnecting: aRoom at: aPosition to: aRoom3 at: aPoint4 ! !
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 17:53:49' prior: 50869359!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 

	^self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom ! !

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 17:53:51'!
ERROR!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'LNB 12/17/2020 17:54:25'!
StageObject subclass: #Door
	instanceVariableNames: 'room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'LNB 12/17/2020 17:54:25'!
StageObject subclass: #Door
	instanceVariableNames: 'room positionInRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'LNB 12/17/2020 17:54:26'!
StageObject subclass: #Door
	instanceVariableNames: 'room positionInRoom adjacentRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'LNB 12/17/2020 17:54:26'!
StageObject subclass: #Door
	instanceVariableNames: 'room positionInRoom adjacentRoom positionInAdjacentRoom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'initialization' stamp: 'LNB 12/17/2020 17:54:26'!
initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 
	self shouldBeImplemented.
	room := aRoom.
	positionInRoom := aPositionInRoom.
	adjacentRoom := anAdjacentRoom.
	positionInAdjacentRoom := aPositionInAdjacentRoom.! !

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 17:54:44'!
ERROR!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 17:54:44'!
ERROR!
!Door methodsFor: 'initialization' stamp: 'LNB 12/17/2020 17:55:00' prior: 50869416!
initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 
	
	room := aRoom.
	positionInRoom := aPositionInRoom.
	adjacentRoom := anAdjacentRoom.
	positionInAdjacentRoom := aPositionInAdjacentRoom.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 17:55:39'!
cantCreateDoorOnNonValidSpaceInRoom
	self shouldBeImplemented.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 17:56:37' prior: 50869445!
cantCreateDoorOnNonValidSpaceInRoom
	^'Cant create door on non valid space in a room.'.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 17:57:15'!
cantCreateDoorOnNonValidSpaceInRoomErrorDescription
	^'Cant create door on non valid space in a room.'.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 17:57:15' prior: 50869319!
test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid

	| room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
		
	self 
		should: [ Door connecting: room1 at: (-1@5) to: room2 at: (0@5) ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door cantCreateDoorOnNonValidSpaceInRoomErrorDescription equals: anError messageText.
			self assert: (room1 isEmptyAt: (-1@5)).
			self assert: (room2 isEmptyAt: (0@5)). ]! !

!methodRemoval: Door class #cantCreateDoorOnNonValidSpaceInRoom stamp: 'LNB 12/17/2020 17:57:15'!
cantCreateDoorOnNonValidSpaceInRoom
	^'Cant create door on non valid space in a room.'.!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 17:57:32'!
FAILURE!
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 18:01:35' prior: 50869367!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 


	self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom. 
	aRoom at: aPositionInRoom put: 1.
	self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom.! !
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 18:02:28' prior: 50869493!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 


	| createdDoor |
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom. 
	aRoom at: aPositionInRoom put: 1.
	self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom.! !
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 18:03:20' prior: 50869507!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 

	| createdDoor |
	
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom. 
	
	aRoom at: aPositionInRoom put: createdDoor.
	
	^createdDoor! !
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 18:04:09' prior: 50869522!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 

	| createdDoor |
	
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom. 
	
	[aRoom at: aPositionInRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: []
	
	^createdDoor! !
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 18:04:13' prior: 50869535!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 

	| createdDoor |
	
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom. 
	
	[aRoom at: aPositionInRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [].
	
	^createdDoor! !
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 18:04:22' prior: 50869549!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 

	| createdDoor |
	
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom. 
	
	[aRoom at: aPositionInRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [Door cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
	
	^createdDoor! !

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:04:36'!
FAILURE!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:04:36'!
FAILURE!
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 18:04:49' prior: 50869563!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 

	| createdDoor |
	
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom. 
	
	[aRoom at: aPositionInRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ self error: Door cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
	
	^createdDoor! !

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:04:50'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:05:24'!
test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid

	| room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
		
	self 
		should: [ Door connecting: room1 at: (0@5) to: room2 at: (-1@5) ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door cantCreateDoorOnNonValidSpaceInRoomErrorDescription equals: anError messageText.
			self assert: (room1 isEmptyAt: (-1@5)).
			self assert: (room2 isEmptyAt: (0@5)). ]! !

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:05:40'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:06:06' prior: 50869605!
test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid

	| room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
		
	self 
		should: [ Door connecting: room1 at: (0@5) to: room2 at: (-1@5) ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door cantCreateDoorOnNonValidSpaceInRoomErrorDescription equals: anError messageText.
			self assert: (room1 isEmptyAt: (0@5)).
			self assert: (room2 isEmptyAt: (-1@5)). ]! !

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:06:08'!
FAILURE!
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 18:07:49' prior: 50869586!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 

	| createdDoor |
	
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom. 
	
	[aRoom at: aPositionInRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ self error: Door cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
		
	[anAdjacentRoom at: aPositionInAdjacentRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ aRoom removeAt: aPositionInRoom.
			self error: Door cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
	
	^createdDoor! !

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:07:50'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:07:50'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:07:51'!
PASSED!
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 18:08:08' prior: 50869651!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 

	| createdDoor |
	
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom. 
	
	[aRoom at: aPositionInRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ self error: Door cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
		
	[anAdjacentRoom at: aPositionInAdjacentRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ "aRoom removeAt: aPositionInRoom."
			self error: Door cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
	
	^createdDoor! !

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:08:10'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:08:11'!
FAILURE!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:08:11'!
FAILURE!
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 18:08:54' prior: 50869685!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 

	| createdDoor |
	
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom. 
	
	[aRoom at: aPositionInRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ self error: Door cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
		
	[anAdjacentRoom at: aPositionInAdjacentRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ aRoom removeAt: aPositionInRoom.
			self error: Door cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
	
	^createdDoor! !

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:08:55'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:08:55'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'LNB 12/17/2020 18:08:58'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'LNB 12/17/2020 18:08:58'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'LNB 12/17/2020 18:08:58'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'LNB 12/17/2020 18:08:58'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'LNB 12/17/2020 18:08:58'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'LNB 12/17/2020 18:08:58'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 18:08:58'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 18:08:58'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'LNB 12/17/2020 18:08:58'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'LNB 12/17/2020 18:08:59'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'LNB 12/17/2020 18:08:59'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'LNB 12/17/2020 18:08:59'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'LNB 12/17/2020 18:08:59'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'LNB 12/17/2020 18:08:59'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'LNB 12/17/2020 18:08:59'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:08:59'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:08:59'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 18:08:59'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 18:08:59'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 18:08:59'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 18:08:59'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 18:08:59'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 18:09:00'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 18:09:00'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 18:09:00'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 18:09:00'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 18:09:00'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 18:09:00'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 18:09:00'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 18:09:00'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 18:09:00'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 18:09:00'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 18:09:00'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 18:09:00'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 18:09:01'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 18:09:01'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 18:09:01'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'LNB 12/17/2020 18:09:01'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'LNB 12/17/2020 18:09:01'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'LNB 12/17/2020 18:09:01'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'LNB 12/17/2020 18:09:01'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'LNB 12/17/2020 18:09:01'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'LNB 12/17/2020 18:09:01'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'LNB 12/17/2020 18:09:01'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'LNB 12/17/2020 18:09:01'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'LNB 12/17/2020 18:09:01'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'LNB 12/17/2020 18:09:01'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'LNB 12/17/2020 18:09:02'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'LNB 12/17/2020 18:09:02'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:10:05'!
test03ACreatedDoorMustShowUpPlacedInEachRoom

	| room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
		
	self 
		should: [ Door connecting: room1 at: (0@5) to: room2 at: (-1@5) ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door cantCreateDoorOnNonValidSpaceInRoomErrorDescription equals: anError messageText.
			self assert: (room1 isEmptyAt: (0@5)).
			self assert: (room2 isEmptyAt: (-1@5)). ]! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:13:30' prior: 50869927!
test03ACreatedDoorMustShowUpPlacedInEachRoom

	| room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
		
	Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self assert: (room1 at: (0@5)) equals: 1.
	self assert: (room2 at: (0@5)) equals: 1.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:13:37' prior: 50869946!
test03ACreatedDoorMustShowUpPlacedInEachRoom

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self assert: (room1 at: (0@5)) equals: 1.
	self assert: (room2 at: (0@5)) equals: 1.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:13:45' prior: 50869959!
test03ACreatedDoorMustShowUpPlacedInEachRoom

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self assert: (room1 at: (0@5)) equals: door.
	self assert: (room2 at: (0@5)) equals: door.! !

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 18:13:47'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:13:47'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:13:47'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 18:13:47'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:19:55'!
paper

	^ PointsPortableObject named: 'paper' weighing: 1 worth: 1! !
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 18:21:03' prior: 50869719!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 

	| createdDoor |
	
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom. 
	
	[aRoom at: aPositionInRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ self error: self cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
		
	[anAdjacentRoom at: aPositionInAdjacentRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ aRoom removeAt: aPositionInRoom.
			self error: self cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
	
	^createdDoor! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:24:30'!
test04ACreatedDoorCantBeTakenFromARoom

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	
	
	(PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 42 limitingPointsTo: 42) at: (1@5) heading: #West in: room1) take.
	
	self assert: (room1 at: (0@5)) equals: door.
	self assert: (room2 at: (0@5)) equals: door.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:24:39' prior: 50870028!
test04ACreatedDoorCantBeTakenFromARoom

	| room1 room2 door playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: (Backpack containingUpTo: 42 limitingPointsTo: 42) at: (1@5) heading: #West in: room1.
	(playableCharacter) take.
	
	self assert: (room1 at: (0@5)) equals: door.
	self assert: (room2 at: (0@5)) equals: door.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:25:23' prior: 50870046!
test04ACreatedDoorCantBeTakenFromARoom

	| room1 room2 door playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (Backpack containingUpTo: 42 limitingPointsTo: 42) 
		at: (1@5) 
		heading: #West 
		in: room1.
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	
	
	
	playableCharacter take.
	
	self assert: (room1 at: (0@5)) equals: door.
	self assert: (room2 at: (0@5)) equals: door.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:25:48'!
defaultBackpack

	^ Backpack containingUpTo: 42 limitingPointsTo: 42! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:25:48' prior: 50870065!
test04ACreatedDoorCantBeTakenFromARoom

	| room1 room2 door playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	
	
	
	playableCharacter take.
	
	self assert: (room1 at: (0@5)) equals: door.
	self assert: (room2 at: (0@5)) equals: door.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:28:15' prior: 50870090!
test04ACreatedDoorCantBeTakenFromARoom

	| room1 room2 door playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ playableCharacter take. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: 1 equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:29:56' prior: 50870109!
test04ACreatedDoorCantBeTakenFromARoom

	| room1 room2 door playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	playableCharacter take.
	self assert: (room1 at: (0@5)) equals: door.
	self assert: (room2 at: (0@5)) equals: door.! !

!testRun: #DoorTest #test04ACreatedDoorCantBeTakenFromARoom stamp: 'LNB 12/17/2020 18:30:42'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:31:00' overrides: 50868997!
takenBy: aPlayableCharacter 
	self shouldBeImplemented.! !
!Door methodsFor: 'taken' stamp: 'LNB 12/17/2020 18:32:32' prior: 50870154 overrides: 50868997!
takenBy: aPlayableCharacter 
	! !

!testRun: #DoorTest #test04ACreatedDoorCantBeTakenFromARoom stamp: 'LNB 12/17/2020 18:32:37'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:32:40'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:32:40'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 18:32:40'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCantBeTakenFromARoom stamp: 'LNB 12/17/2020 18:32:40'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:28:15' prior: 50870132!
test04ACreatedDoorCantBeTakenFromARoom

	| room1 room2 door playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ playableCharacter take. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: 1 equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:35:10' prior: 50870181!
test04ACreatedDoorCantBeTakenFromARoom

	| room1 room2 door playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ playableCharacter take. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeTakenFromRoomByCharacter equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:35:31'!
test04ACreatedDoorCanNotBeTakenFromARoom

	| room1 room2 door playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ playableCharacter take. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeTakenFromRoomByCharacter equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.].! !

!methodRemoval: DoorTest #test04ACreatedDoorCantBeTakenFromARoom stamp: 'LNB 12/17/2020 18:35:31'!
test04ACreatedDoorCantBeTakenFromARoom

	| room1 room2 door playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ playableCharacter take. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeTakenFromRoomByCharacter equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.].!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 18:35:37'!
FAILURE!
!Door methodsFor: 'taken' stamp: 'LNB 12/17/2020 18:36:19' prior: 50870159 overrides: 50868997!
takenBy: aPlayableCharacter 
	self error: (self class canNotBeTakenFromRoomByCharacter)! !

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:36:20'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:36:20'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 18:36:21'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 18:36:21'!
ERROR!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 18:36:21'!
ERROR!
!Door class methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:36:29'!
canNotBeTakenFromRoomByCharacter
	self shouldBeImplemented.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:36:49' prior: 50870303!
canNotBeTakenFromRoomByCharacter
	^'Door cannot be taken from room by a character'! !

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:36:50'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:36:50'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 18:36:50'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 18:36:50'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:36:53'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:36:53'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 18:36:53'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 18:36:53'!
PASSED!

----SNAPSHOT----(17 December 2020 18:39:04) CuisUniversity-4384.image priorSource: 17155564!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:47:44'!
test05ADoorCanNotBeIntroducedIntoANonPortableObject

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ NonPortableObject named: 'Chest' withAll: {door}. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: NonPortableObject doorCanNotBeIntroducedIntoANonPortableObject equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.].! !

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 18:47:48'!
FAILURE!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 18:51:10' prior: 50869066!
named: aName withAll: aCollectionOfStageObjects 
	
	(aCollectionOfStageObjects anySatisfy: [ :aStageObject | aStageObject isKindOf: Door]) ifTrue: [self error: self hola].
	
	^self new initializeNamed: aName withAll: aCollectionOfStageObjects.! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 18:51:36' prior: 50870370!
named: aName withAll: aCollectionOfStageObjects 
	
	(aCollectionOfStageObjects anySatisfy: [ :aStageObject | aStageObject isKindOf: Door]) 
		ifTrue: [self error: self doorCanNotBeIntroducedIntoANonPortableObject].
	
	^self new initializeNamed: aName withAll: aCollectionOfStageObjects.! !

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:51:38'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:51:38'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 18:51:38'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 18:51:39'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 18:51:39'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 18:51:39'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 18:51:39'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 18:51:39'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 18:51:39'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 18:51:39'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 18:51:39'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 18:51:39'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 18:51:39'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 18:51:40'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 18:51:40'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 18:51:40'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 18:51:40'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 18:51:40'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 18:51:40'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 18:51:40'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 18:51:40'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 18:51:40'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 18:51:40'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 18:51:41'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 18:51:41'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 18:51:41'!
ERROR!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 18:51:44'!
ERROR!
!NonPortableObject class methodsFor: 'error description' stamp: 'LNB 12/17/2020 18:52:00'!
doorCanNotBeIntroducedIntoANonPortableObject
	self shouldBeImplemented.! !
!NonPortableObject class methodsFor: 'error description' stamp: 'LNB 12/17/2020 18:52:21' prior: 50870496!
doorCanNotBeIntroducedIntoANonPortableObject
	^'Door cannot be introduced into a NonPortableObject'! !

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 18:52:23'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:52:23'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:52:23'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 18:52:23'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 18:52:23'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 18:52:23'!
PASSED!
!Door class methodsFor: 'error description' stamp: 'LNB 12/17/2020 18:52:59'!
canNotBeTakenFromRoomByCharacterErrorDescription
	^'Door cannot be taken from room by a character'! !
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:52:59' prior: 50870280 overrides: 50868997!
takenBy: aPlayableCharacter 
	self error: (self class canNotBeTakenFromRoomByCharacterErrorDescription)! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:52:59' prior: 50870228!
test04ACreatedDoorCanNotBeTakenFromARoom

	| room1 room2 door playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ playableCharacter take. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeTakenFromRoomByCharacterErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.].! !

!methodRemoval: Door class #canNotBeTakenFromRoomByCharacter stamp: 'LNB 12/17/2020 18:52:59'!
canNotBeTakenFromRoomByCharacter
	^'Door cannot be taken from room by a character'!
!NonPortableObject class methodsFor: 'error description' stamp: 'LNB 12/17/2020 18:53:15'!
doorCanNotBeIntroducedIntoANonPortableObjectErrorDescription
	^'Door cannot be introduced into a NonPortableObject'! !
!NonPortableObject class methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:53:15' prior: 50870382!
named: aName withAll: aCollectionOfStageObjects 
	
	(aCollectionOfStageObjects anySatisfy: [ :aStageObject | aStageObject isKindOf: Door]) 
		ifTrue: [self error: self doorCanNotBeIntroducedIntoANonPortableObjectErrorDescription].
	
	^self new initializeNamed: aName withAll: aCollectionOfStageObjects.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 18:53:15' prior: 50870345!
test05ADoorCanNotBeIntroducedIntoANonPortableObject

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ NonPortableObject named: 'Chest' withAll: {door}. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: NonPortableObject doorCanNotBeIntroducedIntoANonPortableObjectErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.].! !

!methodRemoval: NonPortableObject class #doorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 18:53:15'!
doorCanNotBeIntroducedIntoANonPortableObject
	^'Door cannot be introduced into a NonPortableObject'!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'LNB 12/17/2020 18:53:20'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'LNB 12/17/2020 18:53:20'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'LNB 12/17/2020 18:53:20'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'LNB 12/17/2020 18:53:20'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'LNB 12/17/2020 18:53:20'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'LNB 12/17/2020 18:53:20'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 18:53:20'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 18:53:20'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'LNB 12/17/2020 18:53:21'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'LNB 12/17/2020 18:53:21'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'LNB 12/17/2020 18:53:21'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'LNB 12/17/2020 18:53:21'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'LNB 12/17/2020 18:53:21'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'LNB 12/17/2020 18:53:21'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'LNB 12/17/2020 18:53:21'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:53:21'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:53:21'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 18:53:21'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 18:53:21'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 18:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 18:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 18:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 18:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 18:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 18:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 18:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 18:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 18:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 18:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 18:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 18:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 18:53:23'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 18:53:23'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 18:53:23'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 18:53:23'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 18:53:23'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 18:53:23'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 18:53:23'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 18:53:23'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 18:53:23'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'LNB 12/17/2020 18:53:23'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'LNB 12/17/2020 18:53:23'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'LNB 12/17/2020 18:53:23'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'LNB 12/17/2020 18:53:23'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'LNB 12/17/2020 18:53:24'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'LNB 12/17/2020 18:53:24'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'LNB 12/17/2020 18:53:24'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'LNB 12/17/2020 18:53:24'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'LNB 12/17/2020 18:53:24'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'LNB 12/17/2020 18:53:24'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'LNB 12/17/2020 18:53:24'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'LNB 12/17/2020 18:53:24'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 18:58:18'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:58:20'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 18:58:20'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 18:58:20'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 18:58:20'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 18:58:20'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:01:48'!
test06ADoorCanNotBeOpenIfAlreadyOpen

	| room1 room2 door playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ playableCharacter openDoor. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenIfAlreadyOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.].! !

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:01:52'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:02:03'!
openDoor
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:02:52' prior: 50870860!
openDoor
	room openDoorAt: self forwardPosition.! !

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:02:58'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:03:13'!
openDoorAt: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:04:35' prior: 50870873!
openDoorAt: aDoorPosition 
	
	(self at: aDoorPosition) openDoor.! !

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:04:37'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:04:45'!
openDoor
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:05:16' prior: 50870886!
openDoor
	self error: self class canNotBeOpenIfAlreadyOpenErrorDescription.! !

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:05:20'!
ERROR!
!Door class methodsFor: 'error description' stamp: 'LNB 12/17/2020 19:05:38'!
canNotBeOpenIfAlreadyOpenErrorDescription
	self shouldBeImplemented.! !
!Door class methodsFor: 'error description' stamp: 'LNB 12/17/2020 19:05:53' prior: 50870900!
canNotBeOpenIfAlreadyOpenErrorDescription
	^'Door is already open'! !

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:05:54'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:05:54'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:05:54'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 19:05:54'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 19:05:54'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 19:05:54'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:05:54'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:08:09'!
test07ADoorIsOpenAfterCreation

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self assert: door isOpen.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:08:41'!
test07ADoorIsOpenIfNotCreatedWithAKey

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self assert: door isOpen.! !

!methodRemoval: DoorTest #test07ADoorIsOpenAfterCreation stamp: 'LNB 12/17/2020 19:08:41'!
test07ADoorIsOpenAfterCreation

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self assert: door isOpen.!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:09:37'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:09:50'!
isOpen
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:10:01' prior: 50870969!
isOpen
	^'true'! !

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:10:02'!
ERROR!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:10:09'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:10:21' prior: 50870973!
isOpen
	^true! !

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:10:22'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:10:22'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:10:22'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 19:10:22'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 19:10:22'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 19:10:22'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:10:22'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:10:23'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:12:08'!
test08ADoorIsClosedIfCreatedWithAKey

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	NoPointsPortableObject named: 'Skull Key' weighing: 1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self assert: door isOpen.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:12:15' prior: 50871014!
test08ADoorIsClosedIfCreatedWithAKey

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	NoPointsPortableObject named: 'Skull Key' weighing: 1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:13:42' prior: 50871027!
test08ADoorIsClosedIfCreatedWithAKey

	| room1 room2 door doorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'Skull Key' weighing: 1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.! !

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:13:45'!
ERROR!
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 19:13:50'!
connecting: aRoom at: aPoint to: aRoom3 at: aPoint4 closedWith: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeConnecting: aRoom at: aPoint to: aRoom3 at: aPoint4 closedWith: aSmallInteger ! !
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 19:15:01' prior: 50871056!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: aNonPortableObjectKey
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeConnecting: aRoom at: 1 to: 1 at: 1 closedWith: 1! !
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 19:15:12' prior: 50871068!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: aNonPortableObjectKey
	
	| createdDoor |
	
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom. 
	
	[aRoom at: aPositionInRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ self error: self cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
		
	[anAdjacentRoom at: aPositionInAdjacentRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ aRoom removeAt: aPositionInRoom.
			self error: self cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
	
	^createdDoor! !
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 19:15:49' prior: 50870005!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 

	^ self connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: nil! !
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 19:16:05' prior: 50871104!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 

	^ self connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: #noKey! !
!Door methodsFor: 'initialization' stamp: 'LNB 12/17/2020 19:17:39'!
initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: aPortableObjectKey  
	
	room := aRoom.
	positionInRoom := aPositionInRoom.
	adjacentRoom := anAdjacentRoom.
	positionInAdjacentRoom := aPositionInAdjacentRoom.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:17:39' prior: 50871080!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: aNonPortableObjectKey
	
	| createdDoor |
	
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: aPortableObjectKey. 
	
	[aRoom at: aPositionInRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ self error: self cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
		
	[anAdjacentRoom at: aPositionInAdjacentRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ aRoom removeAt: aPositionInRoom.
			self error: self cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
	
	^createdDoor! !

!methodRemoval: Door #initializeConnecting:at:to:at: stamp: 'LNB 12/17/2020 19:17:39'!
initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom 
	
	room := aRoom.
	positionInRoom := aPositionInRoom.
	adjacentRoom := anAdjacentRoom.
	positionInAdjacentRoom := aPositionInAdjacentRoom.!
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 19:17:51' prior: 50871135!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: aPortableObjectKey
	
	| createdDoor |
	
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: aPortableObjectKey. 
	
	[aRoom at: aPositionInRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ self error: self cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
		
	[anAdjacentRoom at: aPositionInAdjacentRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ aRoom removeAt: aPositionInRoom.
			self error: self cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
	
	^createdDoor! !

!classDefinition: #Door category: 'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'LNB 12/17/2020 19:18:11'!
StageObject subclass: #Door
	instanceVariableNames: 'room positionInRoom adjacentRoom positionInAdjacentRoom key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'initialization' stamp: 'LNB 12/17/2020 19:18:09' prior: 50871123!
initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: aPortableObjectKey  
	
	room := aRoom.
	positionInRoom := aPositionInRoom.
	adjacentRoom := anAdjacentRoom.
	positionInAdjacentRoom := aPositionInAdjacentRoom.
	key := aPortableObjectKey.! !

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:18:19'!
FAILURE!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:18:19'!
FAILURE!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:18:44' prior: 50870983!
isOpen
	^key = #noKey! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'LNB 12/17/2020 19:18:50'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'LNB 12/17/2020 19:18:50'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'LNB 12/17/2020 19:18:50'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'LNB 12/17/2020 19:18:50'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'LNB 12/17/2020 19:18:50'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'LNB 12/17/2020 19:18:50'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 19:18:50'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 19:18:50'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'LNB 12/17/2020 19:18:51'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'LNB 12/17/2020 19:18:51'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'LNB 12/17/2020 19:18:51'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'LNB 12/17/2020 19:18:51'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'LNB 12/17/2020 19:18:51'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'LNB 12/17/2020 19:18:51'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'LNB 12/17/2020 19:18:51'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:18:51'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:18:51'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 19:18:51'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 19:18:51'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 19:18:52'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:18:52'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:18:52'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:18:52'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 19:18:52'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 19:18:52'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 19:18:52'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 19:18:52'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 19:18:52'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 19:18:52'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 19:18:52'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 19:18:52'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 19:18:52'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 19:18:53'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 19:18:53'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 19:18:53'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 19:18:53'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 19:18:53'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 19:18:53'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 19:18:53'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 19:18:53'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 19:18:53'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 19:18:53'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 19:18:53'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'LNB 12/17/2020 19:18:53'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'LNB 12/17/2020 19:18:53'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'LNB 12/17/2020 19:18:54'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'LNB 12/17/2020 19:18:54'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'LNB 12/17/2020 19:18:54'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'LNB 12/17/2020 19:18:54'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'LNB 12/17/2020 19:18:54'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'LNB 12/17/2020 19:18:54'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'LNB 12/17/2020 19:18:54'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'LNB 12/17/2020 19:18:54'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'LNB 12/17/2020 19:18:54'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'LNB 12/17/2020 19:18:54'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:21:06'!
test09ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'Skull Key' weighing: 1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.! !
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:22:22'!
openDoor: aPortableObjectKey
	self error: self class canNotBeOpenIfAlreadyOpenErrorDescription.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:22:22'!
openDoor: aPortableObjectKey
	room openDoorAt: self forwardPosition.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:22:22' prior: 50870832!
test06ADoorCanNotBeOpenIfAlreadyOpen

	| room1 room2 door playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ playableCharacter openDoor: key. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenIfAlreadyOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.].! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:22:23' prior: 50870878!
openDoorAt: aDoorPosition 
	
	(self at: aDoorPosition) openDoor: key.! !

!methodRemoval: Door #openDoor stamp: 'LNB 12/17/2020 19:22:23'!
openDoor
	self error: self class canNotBeOpenIfAlreadyOpenErrorDescription.!

!methodRemoval: PlayableCharacter #openDoor stamp: 'LNB 12/17/2020 19:22:23'!
openDoor
	room openDoorAt: self forwardPosition.!
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:23:57'!
openDoorAt: aDoorPosition with: aPortableObjectKey  
	
	(self at: aDoorPosition) openDoor: key.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:23:57' prior: 50871445!
openDoor: aPortableObjectKey
	room openDoorAt: self forwardPosition with: aPortableObjectKey.! !

!methodRemoval: Room #openDoorAt: stamp: 'LNB 12/17/2020 19:23:58'!
openDoorAt: aDoorPosition 
	
	(self at: aDoorPosition) openDoor: key.!
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:24:05' prior: 50871490!
openDoorAt: aDoorPosition with: aPortableObjectKey  
	
	(self at: aDoorPosition) openDoor: aPortableObjectKey.! !

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:24:16'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:24:16'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 19:24:16'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 19:24:16'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 19:24:16'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:24:17'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:24:17'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:24:17'!
PASSED!

!testRun: #DoorTest #test09ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:24:17'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:24:29'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:24:59'!
key

	^ NoPointsPortableObject named: 'Skull Key' weighing: 1! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:25:00' prior: 50871426!
test09ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:25:11' prior: 50871451!
test06ADoorCanNotBeOpenIfAlreadyOpen

	| room1 room2 door playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ playableCharacter openDoor: self key. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenIfAlreadyOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:26:09' prior: 50871553!
test09ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.
	
	self 
		should: [ playableCharacter openDoor: self key. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenIfAlreadyOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:26:33' prior: 50871590!
test09ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.
	
	self 
		should: [ playableCharacter openDoor: doorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenIfAlreadyOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:26:45' prior: 50871614!
test09ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.
	
	self 
		should: [ playableCharacter openDoor: doorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenIfAlreadyOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !
!Door class methodsFor: 'error description' stamp: 'LNB 12/17/2020 19:27:07'!
canNotBeOpenErrorDescription
	^'Door is already open'! !
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:27:07' prior: 50871439!
openDoor: aPortableObjectKey
	self error: self class canNotBeOpenErrorDescription.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:27:07' prior: 50871638!
test09ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.
	
	self 
		should: [ playableCharacter openDoor: doorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:27:07' prior: 50871565!
test06ADoorCanNotBeOpenIfAlreadyOpen

	| room1 room2 door playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ playableCharacter openDoor: self key. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.].! !

!methodRemoval: Door class #canNotBeOpenIfAlreadyOpenErrorDescription stamp: 'LNB 12/17/2020 19:27:08'!
canNotBeOpenIfAlreadyOpenErrorDescription
	^'Door is already open'!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:28:01'!
test10ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.
	
	self 
		should: [ playableCharacter openDoor: doorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !

!methodRemoval: DoorTest #test09ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:28:01'!
test09ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.
	
	self 
		should: [ playableCharacter openDoor: doorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:28:23'!
test09ADoorCanOnlyBeCreatedWithAPortableObject

	| room1 room2 door doorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'Skull Key' weighing: 1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:28:46' prior: 50871040!
test08ADoorIsClosedIfCreatedWithAKey

	| room1 room2 door doorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'Skull Key' weighing: 1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self deny: door isOpen.! !

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:28:49'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:28:49'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:28:49'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 19:28:49'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 19:28:49'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 19:28:49'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:28:50'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:28:50'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:28:50'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObject stamp: 'LNB 12/17/2020 19:28:50'!
PASSED!

!testRun: #DoorTest #test10ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:28:50'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:29:05' prior: 50871790!
test09ADoorCanOnlyBeCreatedWithAPortableObject

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:31:18'!
test09ADoorCanOnlyBeCreatedWithAPortableObjectKey

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	NonPortableObject named: 'bookcase'.
	
	self 
		should: [door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[ :anError |
			]! !

!methodRemoval: DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObject stamp: 'LNB 12/17/2020 19:31:31'!
test09ADoorCanOnlyBeCreatedWithAPortableObject

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:31:40' prior: 50871866!
test09ADoorCanOnlyBeCreatedWithAPortableObjectKey

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	NonPortableObject named: 'bookcase'.
	
	self 
		should: [door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[ :anError |
			self assert: Door cantCreateDoorOnNonValidSpaceInRoomErrorDescription equals: anError messageText.
			self assert: (room1 isEmptyAt: (0@5)).
			self assert: (room2 isEmptyAt: (-1@5)).]! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:31:52' prior: 50871893!
test09ADoorCanOnlyBeCreatedWithAPortableObjectKey

	| room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	NonPortableObject named: 'bookcase'.
	
	self 
		should: [Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[ :anError |
			self assert: Door cantCreateDoorOnNonValidSpaceInRoomErrorDescription equals: anError messageText.
			self assert: (room1 isEmptyAt: (0@5)).
			self assert: (room2 isEmptyAt: (-1@5)).]! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:32:06' prior: 50871914!
test09ADoorCanOnlyBeCreatedWithAPortableObjectKey

	| room1 room2 nonPortableObject |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	nonPortableObject := NonPortableObject named: 'bookcase'.
	
	self 
		should: [Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[ :anError |
			self assert: Door cantCreateDoorOnNonValidSpaceInRoomErrorDescription equals: anError messageText.
			self assert: (room1 isEmptyAt: (0@5)).
			self assert: (room2 isEmptyAt: (-1@5)).]! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:32:11' prior: 50871934!
test09ADoorCanOnlyBeCreatedWithAPortableObjectKey

	| room1 room2 nonPortableObject |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	nonPortableObject := NonPortableObject named: 'bookcase'.
	
	self 
		should: [Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: nonPortableObject.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[ :anError |
			self assert: Door cantCreateDoorOnNonValidSpaceInRoomErrorDescription equals: anError messageText.
			self assert: (room1 isEmptyAt: (0@5)).
			self assert: (room2 isEmptyAt: (-1@5)).]! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:32:58' prior: 50871956!
test09ADoorCanOnlyBeCreatedWithAPortableObjectKey

	| room1 room2 nonPortableObject |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	nonPortableObject := NonPortableObject named: 'bookcase'.
	
	self 
		should: [Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: nonPortableObject.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[ :anError |
			self assert: Door canOnlyCreateDoorsClosedWithPortableObjectKeys equals: anError messageText.
			self assert: (room1 isEmptyAt: (0@5)).
			self assert: (room2 isEmptyAt: (-1@5)).]! !

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 19:33:03'!
FAILURE!
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 19:34:45' prior: 50871170!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: aPortableObjectKey
	
	| createdDoor |
	
	(aPortableObjectKey isKindOf: PortableObject) ifFalse: [ self error: self canOnlyCreateDoorsClosedWithPortableObjectKeys ].
	
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: aPortableObjectKey. 
	
	[aRoom at: aPositionInRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ self error: self cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
		
	[anAdjacentRoom at: aPositionInAdjacentRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ aRoom removeAt: aPositionInRoom.
			self error: self cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
	
	^createdDoor! !

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 19:34:53'!
ERROR!
!Door class methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:35:11'!
canOnlyCreateDoorsClosedWithPortableObjectKeys
	self shouldBeImplemented.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:35:26'!
canOnlyCreateDoorsClosedWithPortableObjectKeysErrorDescription
	self shouldBeImplemented.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:35:26' prior: 50872003!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: aPortableObjectKey
	
	| createdDoor |
	
	(aPortableObjectKey isKindOf: PortableObject) ifFalse: [ self error: self canOnlyCreateDoorsClosedWithPortableObjectKeysErrorDescription ].
	
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: aPortableObjectKey. 
	
	[aRoom at: aPositionInRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ self error: self cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
		
	[anAdjacentRoom at: aPositionInAdjacentRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ aRoom removeAt: aPositionInRoom.
			self error: self cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
	
	^createdDoor! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:35:26' prior: 50871978!
test09ADoorCanOnlyBeCreatedWithAPortableObjectKey

	| room1 room2 nonPortableObject |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	nonPortableObject := NonPortableObject named: 'bookcase'.
	
	self 
		should: [Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: nonPortableObject.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[ :anError |
			self assert: Door canOnlyCreateDoorsClosedWithPortableObjectKeysErrorDescription equals: anError messageText.
			self assert: (room1 isEmptyAt: (0@5)).
			self assert: (room2 isEmptyAt: (-1@5)).]! !

!methodRemoval: Door class #canOnlyCreateDoorsClosedWithPortableObjectKeys stamp: 'LNB 12/17/2020 19:35:26'!
canOnlyCreateDoorsClosedWithPortableObjectKeys
	self shouldBeImplemented.!
!Door class methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:36:15' prior: 50872040!
canOnlyCreateDoorsClosedWithPortableObjectKeysErrorDescription
	^'Key must be a Portable Object'! !

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 19:36:17'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:36:17'!
FAILURE!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:36:17'!
FAILURE!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 19:36:17'!
ERROR!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 19:36:18'!
ERROR!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 19:36:18'!
ERROR!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:36:18'!
ERROR!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:36:18'!
ERROR!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:36:18'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 19:36:18'!
PASSED!

!testRun: #DoorTest #test10ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:36:18'!
ERROR!
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 19:37:01' prior: 50872046!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: aPortableObjectKey
	
	| createdDoor |
	
	(aPortableObjectKey isKindOf: PortableObject or: [aPortableObjectKey = #noKey]) ifFalse: [ self error: self canOnlyCreateDoorsClosedWithPortableObjectKeysErrorDescription ].
	
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: aPortableObjectKey. 
	
	[aRoom at: aPositionInRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ self error: self cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
		
	[anAdjacentRoom at: aPositionInAdjacentRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ aRoom removeAt: aPositionInRoom.
			self error: self cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
	
	^createdDoor! !
!Door class methodsFor: 'instance creation' stamp: 'LNB 12/17/2020 19:37:08' prior: 50872148!
connecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: aPortableObjectKey
	
	| createdDoor |
	
	((aPortableObjectKey isKindOf: PortableObject) or: [aPortableObjectKey = #noKey]) ifFalse: [ self error: self canOnlyCreateDoorsClosedWithPortableObjectKeysErrorDescription ].
	
	createdDoor := self new initializeConnecting: aRoom at: aPositionInRoom to: anAdjacentRoom at: aPositionInAdjacentRoom closedWith: aPortableObjectKey. 
	
	[aRoom at: aPositionInRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ self error: self cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
		
	[anAdjacentRoom at: aPositionInAdjacentRoom put: createdDoor.]
		on: Error - MessageNotUnderstood 
		do: [ aRoom removeAt: aPositionInRoom.
			self error: self cantCreateDoorOnNonValidSpaceInRoomErrorDescription ].
	
	^createdDoor! !

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:37:09'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:37:09'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 19:37:09'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 19:37:09'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 19:37:09'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:37:10'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:37:10'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:37:10'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 19:37:10'!
PASSED!

!testRun: #DoorTest #test10ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:37:10'!
ERROR!

!testRun: #DoorTest #test10ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:37:10'!
ERROR!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:37:54'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:37:54'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 19:37:54'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 19:37:54'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 19:37:54'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:37:55'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:37:55'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:37:55'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 19:37:55'!
PASSED!

!testRun: #DoorTest #test10ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:37:55'!
ERROR!

!testRun: #DoorTest #test10ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:37:55'!
ERROR!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:38:01'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:38:04'!
PASSED!

!testRun: #DoorTest #test10ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:38:06'!
ERROR!

!testRun: #DoorTest #test10ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:38:06'!
ERROR!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 19:38:09'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:38:30'!
atest10ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.
	
	self 
		should: [ playableCharacter openDoor: doorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !

!methodRemoval: DoorTest #test10ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:38:30'!
test10ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.
	
	self 
		should: [ playableCharacter openDoor: doorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:38:33'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:38:33'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 19:38:33'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 19:38:33'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 19:38:34'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:38:34'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:38:34'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:38:34'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 19:38:34'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'LNB 12/17/2020 19:38:36'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'LNB 12/17/2020 19:38:36'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'LNB 12/17/2020 19:38:36'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'LNB 12/17/2020 19:38:36'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'LNB 12/17/2020 19:38:37'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'LNB 12/17/2020 19:38:37'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 19:38:37'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 19:38:37'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'LNB 12/17/2020 19:38:37'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'LNB 12/17/2020 19:38:37'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'LNB 12/17/2020 19:38:37'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'LNB 12/17/2020 19:38:37'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'LNB 12/17/2020 19:38:37'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'LNB 12/17/2020 19:38:37'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'LNB 12/17/2020 19:38:38'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:38:38'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:38:38'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 19:38:38'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 19:38:38'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 19:38:38'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:38:38'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:38:38'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:38:38'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 19:38:38'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 19:38:38'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 19:38:38'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 19:38:38'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 19:38:38'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 19:38:39'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 19:38:39'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 19:38:39'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 19:38:39'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 19:38:39'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 19:38:39'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 19:38:39'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 19:38:39'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 19:38:39'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 19:38:39'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 19:38:39'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 19:38:39'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 19:38:39'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 19:38:40'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 19:38:40'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 19:38:40'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'LNB 12/17/2020 19:38:40'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'LNB 12/17/2020 19:38:40'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'LNB 12/17/2020 19:38:40'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'LNB 12/17/2020 19:38:40'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'LNB 12/17/2020 19:38:40'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'LNB 12/17/2020 19:38:40'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'LNB 12/17/2020 19:38:40'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'LNB 12/17/2020 19:38:40'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'LNB 12/17/2020 19:38:40'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'LNB 12/17/2020 19:38:40'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'LNB 12/17/2020 19:38:41'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'LNB 12/17/2020 19:38:41'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:38:47'!
test10ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.
	
	self 
		should: [ playableCharacter openDoor: doorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !

!methodRemoval: DoorTest #atest10ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:38:47'!
atest10ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: 1.
	
	self deny: door isOpen.
	
	self 
		should: [ playableCharacter openDoor: doorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:40:13' prior: 50872588!
test10ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self deny: door isOpen.
	
	self 
		should: [ playableCharacter openDoor: doorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:43:04' prior: 50872643!
test10ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self 
		should: [ door openDoor: doorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:43:22' prior: 50871705!
test06ADoorCanNotBeOpenIfAlreadyOpen

	| room1 room2 door playableCharacter |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	playableCharacter := 
	PlayableCharacter 
		named: 'Luigi' 
		using: (self defaultBackpack) 
		at: (1@5) 
		heading: #West 
		in: room1.
		
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ door openDoor: self key. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:43:33' prior: 50872693!
test06ADoorCanNotBeOpenIfAlreadyOpen

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ door openDoor: self key. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:44:23' prior: 50872671!
test10ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self 
		should: [ door openDoor: doorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:44:51' prior: 50872736!
test10ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self 
		should: [ door openDoor: anotherDoorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:45:06'!
anotherKey

	^ NoPointsPortableObject named: 'Magical Key' weighing: 1! !

!testRun: #DoorTest #test10ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:45:17'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:45:17'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:45:17'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 19:45:17'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 19:45:17'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 19:45:18'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:45:18'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:45:18'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:45:18'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 19:45:18'!
PASSED!

!testRun: #DoorTest #test10ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:45:18'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:46:27'!
atest11ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self 
		should: [ door openDoor: anotherDoorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !

!methodRemoval: DoorTest #test10ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:46:27'!
test10ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self 
		should: [ door openDoor: anotherDoorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:47:40'!
test10ADoorShouldOpenWithTheRightKey

	| room1 room2 door doorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	door openDoor: doorKey.
	self assert: (room1 at: (0@5)) equals: door.
	self assert: (room2 at: (0@5)) equals: door.
	self assert: door isOpen.! !

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 19:47:51'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:49:18' prior: 50871671!
openDoor: aPortableObjectKey
	(aPortableObjectKey = key) 
		ifTrue: [ key = #noKey] 
		ifFalse: [self error: self class canNotBeOpenErrorDescription.]! !

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 19:49:22'!
FAILURE!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 19:49:25'!
FAILURE!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 19:49:25'!
FAILURE!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 19:49:54'!
FAILURE!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 19:49:54'!
FAILURE!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 19:50:09'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 19:50:14'!
FAILURE!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 19:50:14'!
FAILURE!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:51:17' prior: 50872890!
openDoor: aPortableObjectKey
	(aPortableObjectKey = key) 
		ifTrue: [ key := #noKey] 
		ifFalse: [self error: self class canNotBeOpenErrorDescription.]! !

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:51:18'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:51:19'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 19:51:19'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 19:51:19'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 19:51:19'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:51:19'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:51:19'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:51:19'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 19:51:19'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 19:51:19'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:51:33'!
test11ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self 
		should: [ door openDoor: anotherDoorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !

!methodRemoval: DoorTest #atest11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:51:33'!
atest11ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self 
		should: [ door openDoor: anotherDoorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:51:42'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:51:42'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:51:42'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 19:51:42'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 19:51:42'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 19:51:42'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:51:43'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:51:43'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:51:43'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 19:51:43'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 19:51:43'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:51:43'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:55:21'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:55:21'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:55:21'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 19:55:21'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 19:55:21'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 19:55:21'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:55:21'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:55:22'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:55:22'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 19:55:22'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 19:55:22'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:55:22'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:56:05'!
test11ADoorCanNotBeClosedWhenClosed

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self 
		should: [ door closeDoor: anotherDoorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeClosedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:56:19'!
test12ADoorCanNotBeClosedWhenClosed

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self 
		should: [ door closeDoor: anotherDoorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeClosedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !

!methodRemoval: DoorTest #test11ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 19:56:19'!
test11ADoorCanNotBeClosedWhenClosed

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self 
		should: [ door closeDoor: anotherDoorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeClosedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:57:04' prior: 50872717!
test06ADoorCanNotBeOpenIfAlreadyOpen

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ door openDoor: self key. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self assert: door isOpen].! !

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:57:05'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:57:05'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:57:05'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 19:57:06'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 19:57:06'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 19:57:06'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:57:06'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:57:06'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:57:06'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 19:57:06'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 19:57:06'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:57:06'!
PASSED!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 19:57:06'!
ERROR!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 19:57:06'!
ERROR!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 19:57:11'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:57:15'!
closeDoor: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:57:37' prior: 50873232!
closeDoor: aNoPointsPortableObject 
	self error: self class canNotBeClosedErrorDescription! !

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 19:57:39'!
ERROR!
!Door class methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:57:45'!
canNotBeClosedErrorDescription
	self shouldBeImplemented.! !
!Door class methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 19:58:00' prior: 50873246!
canNotBeClosedErrorDescription
	^'Cant close door'.! !

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 19:58:01'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:58:01'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 19:58:01'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 19:58:01'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 19:58:01'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 19:58:02'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 19:58:02'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 19:58:02'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 19:58:02'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 19:58:02'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 19:58:02'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 19:58:02'!
PASSED!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 19:58:02'!
PASSED!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 19:58:06'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:00:01'!
test13ClosingADoorHasToMakeItClosed

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	door closeDoor: anotherDoorKey .
	
	self assert: (room1 at: (0@5)) equals: door.
	self assert: (room2 at: (0@5)) equals: door.
	self deny: door isOpen.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:00:12' prior: 50873302!
test13ClosingADoorHasToMakeItClosed

	| room1 room2 door doorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	door closeDoor: doorKey .
	
	self assert: (room1 at: (0@5)) equals: door.
	self assert: (room2 at: (0@5)) equals: door.
	self deny: door isOpen.! !

!testRun: #DoorTest #test13ClosingADoorHasToMakeItClosed stamp: 'LNB 12/17/2020 20:00:15'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:04:19' prior: 50873237!
closeDoor: aNoPointsPortableObject 
	(self isOpen) ifFalse: [self error: self class canNotBeClosedErrorDescription].
	key := aNoPointsPortableObject.! !

!testRun: #DoorTest #test13ClosingADoorHasToMakeItClosed stamp: 'LNB 12/17/2020 20:04:25'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 20:04:25'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 20:04:25'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 20:04:25'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 20:04:25'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 20:04:25'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 20:04:25'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 20:04:25'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 20:04:25'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 20:04:25'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 20:04:25'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 20:04:25'!
PASSED!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 20:04:26'!
PASSED!

!testRun: #DoorTest #test13ClosingADoorHasToMakeItClosed stamp: 'LNB 12/17/2020 20:04:26'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 20:04:29'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 20:04:29'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 20:04:29'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 20:04:29'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 20:04:29'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 20:04:29'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 20:04:29'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 20:04:29'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 20:04:30'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 20:04:30'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 20:04:30'!
PASSED!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 20:04:30'!
PASSED!

!testRun: #DoorTest #test13ClosingADoorHasToMakeItClosed stamp: 'LNB 12/17/2020 20:04:30'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:07:35'!
test14AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	door openDoor: doorKey.
	door closeDoor: anotherDoorKey.
	self deny: door isOpen.! !

!testRun: #DoorTest #test14AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey stamp: 'LNB 12/17/2020 20:07:49'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:13:06'!
test13ADoorShouldCloseGivenAValidKey

	| room1 room2 door doorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	door closeDoor: doorKey .
	
	self assert: (room1 at: (0@5)) equals: door.
	self assert: (room2 at: (0@5)) equals: door.
	self deny: door isOpen.! !

!methodRemoval: DoorTest #test13ClosingADoorHasToMakeItClosed stamp: 'LNB 12/17/2020 20:13:07'!
test13ClosingADoorHasToMakeItClosed

	| room1 room2 door doorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	door closeDoor: doorKey .
	
	self assert: (room1 at: (0@5)) equals: door.
	self assert: (room2 at: (0@5)) equals: door.
	self deny: door isOpen.!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:13:13'!
test15AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	door openDoor: doorKey.
	door closeDoor: anotherDoorKey.
	self deny: door isOpen.! !

!methodRemoval: DoorTest #test14AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey stamp: 'LNB 12/17/2020 20:13:13'!
test14AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	door openDoor: doorKey.
	door closeDoor: anotherDoorKey.
	self deny: door isOpen.!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:14:22'!
test14ADoorCanNotBeClosedWhenGivenKeyIsNotValid

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ door closeDoor: 10 . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeClosedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:15:17'!
bookcase

	^ NonPortableObject named: 'bookcase'! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:15:17' prior: 50872076!
test09ADoorCanOnlyBeCreatedWithAPortableObjectKey

	| room1 room2 nonPortableObject |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	nonPortableObject := self bookcase.
	
	self 
		should: [Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: nonPortableObject.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[ :anError |
			self assert: Door canOnlyCreateDoorsClosedWithPortableObjectKeysErrorDescription equals: anError messageText.
			self assert: (room1 isEmptyAt: (0@5)).
			self assert: (room2 isEmptyAt: (-1@5)).]! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:17:16' prior: 50873521!
test14ADoorCanNotBeClosedWhenGivenKeyIsNotValid

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	
	self 
		should: [ door closeDoor: self bookcase . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeClosedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self assert: door isOpen.].! !

!testRun: #DoorTest #test14ADoorCanNotBeClosedWhenGivenKeyIsNotValid stamp: 'LNB 12/17/2020 20:17:25'!
FAILURE!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:18:29' prior: 50873338!
closeDoor: aPortableObject 
	(self isOpen and: [aPortableObject isKindOf: PortableObject]) ifFalse: [self error: self class canNotBeClosedErrorDescription].
	key := aPortableObject.! !

!testRun: #DoorTest #test14ADoorCanNotBeClosedWhenGivenKeyIsNotValid stamp: 'LNB 12/17/2020 20:18:44'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 20:18:45'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 20:18:45'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 20:18:45'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 20:18:45'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 20:18:45'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 20:18:45'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 20:18:45'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 20:18:45'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 20:18:45'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 20:18:45'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 20:18:45'!
PASSED!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 20:18:45'!
PASSED!

!testRun: #DoorTest #test13ADoorShouldCloseGivenAValidKey stamp: 'LNB 12/17/2020 20:18:46'!
PASSED!

!testRun: #DoorTest #test14ADoorCanNotBeClosedWhenGivenKeyIsNotValid stamp: 'LNB 12/17/2020 20:18:46'!
PASSED!

!testRun: #DoorTest #test15AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey stamp: 'LNB 12/17/2020 20:18:46'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:18:56'!
test14ADoorCanNotBeClosedWhenGivenKeyIsNotPortable

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	
	self 
		should: [ door closeDoor: self bookcase . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeClosedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self assert: door isOpen.].! !

!methodRemoval: DoorTest #test14ADoorCanNotBeClosedWhenGivenKeyIsNotValid stamp: 'LNB 12/17/2020 20:18:56'!
test14ADoorCanNotBeClosedWhenGivenKeyIsNotValid

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	
	self 
		should: [ door closeDoor: self bookcase . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeClosedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self assert: door isOpen.].!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 20:27:55'!
test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack

	| room  player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.

	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 20:30:33' prior: 50873696!
test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self
		should: []
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeClosedErrorDescription equals: anError messageText ]
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 20:31:06' prior: 50873712!
test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self
		should: [player openDoor]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeClosedErrorDescription equals: anError messageText ]
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 20:32:26' prior: 50873733!
test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self
		should: [player openDoor]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenErrorDescription equals: anError messageText. 
			self deny: door isOpen.
			]
	! !
!Door class methodsFor: 'error description' stamp: 'LNB 12/17/2020 20:32:31'!
canNotBeOpenedErrorDescription
	^'Door is already open'! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:32:31' prior: 50873755!
test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self
		should: [player openDoor]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText. 
			self deny: door isOpen.
			]
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:32:32' prior: 50873163!
test06ADoorCanNotBeOpenIfAlreadyOpen

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ door openDoor: self key. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self assert: door isOpen].! !
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:32:32' prior: 50872924!
openDoor: aPortableObjectKey
	(aPortableObjectKey = key) 
		ifTrue: [ key := #noKey] 
		ifFalse: [self error: self class canNotBeOpenedErrorDescription.]! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:32:32' prior: 50872966!
test11ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self 
		should: [ door openDoor: anotherDoorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !

!methodRemoval: Door class #canNotBeOpenErrorDescription stamp: 'LNB 12/17/2020 20:32:32'!
canNotBeOpenErrorDescription
	^'Door is already open'!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 20:33:53'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 20:34:22' prior: 50873783!
test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self
		should: [player openDoor]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText. 
			self deny: door isOpen.
			]
	! !

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 20:34:30'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:34:38'!
openDoor
	self shouldBeImplemented.! !

!methodRemoval: PlayableCharacter #openDoor: stamp: 'LNB 12/17/2020 20:34:52'!
openDoor: aPortableObjectKey
	room openDoorAt: self forwardPosition with: aPortableObjectKey.!

!methodRemoval: Room #openDoorAt:with: stamp: 'LNB 12/17/2020 20:35:03'!
openDoorAt: aDoorPosition with: aPortableObjectKey  
	
	(self at: aDoorPosition) openDoor: aPortableObjectKey.!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:37:50' prior: 50873894!
openDoor
	room openDoorAt: self forwardPosition checkingWithAllKeysIn: backpack.! !

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 20:37:56'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:38:06'!
openDoorAt: aPoint checkingWithAllKeysIn: aBackpack 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:38:44' prior: 50873920!
openDoorAt: aDoorPosition checkingWithAllKeysIn: aBackpack 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:39:50' prior: 50873926!
openDoorAt: aDoorPosition checkingWithAllKeysIn: aBackpack 
	(self at: aDoorPosition) tryToOpenWithAllKeysIn: aBackpack.! !

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 20:39:54'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:40:06'!
tryToOpenWithAllKeysIn: aBackpack 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:40:23'!
OpenWithAnyKeyIn: aBackpack 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:40:23' prior: 50873932!
openDoorAt: aDoorPosition checkingWithAllKeysIn: aBackpack 
	(self at: aDoorPosition) OpenWithAnyKeyIn: aBackpack.! !

!methodRemoval: Door #tryToOpenWithAllKeysIn: stamp: 'LNB 12/17/2020 20:40:23'!
tryToOpenWithAllKeysIn: aBackpack 
	self shouldBeImplemented.!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 20:40:37'!
FAILURE!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 20:40:37'!
FAILURE!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:44:59' prior: 50873948!
OpenWithAnyKeyIn: aBackpack 
	(aBackpack includes: key) 
		ifTrue: [self openDoor: key]
		ifFalse: [self error: self class canNotBeOpenedErrorDescription.].! !

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 20:45:01'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 20:45:05'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:46:11'!
test06ADoorCanNotBeOpenIfKeyIsNotPortable

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ door openDoor: self bookcase. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self assert: door isOpen].! !

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 20:46:12'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 20:46:12'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 20:46:12'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 20:46:12'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 20:46:12'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 20:46:12'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 20:46:13'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 20:46:13'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 20:46:13'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 20:46:13'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 20:46:13'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 20:46:13'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 20:46:13'!
PASSED!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 20:46:13'!
PASSED!

!testRun: #DoorTest #test13ADoorShouldCloseGivenAValidKey stamp: 'LNB 12/17/2020 20:46:13'!
PASSED!

!testRun: #DoorTest #test14ADoorCanNotBeClosedWhenGivenKeyIsNotPortable stamp: 'LNB 12/17/2020 20:46:13'!
PASSED!

!testRun: #DoorTest #test15AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey stamp: 'LNB 12/17/2020 20:46:13'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:46:37'!
test15ADoorCanNotBeOpenIfKeyIsNotPortable

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ door openDoor: self bookcase. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self assert: door isOpen].! !

!methodRemoval: DoorTest #test06ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 20:46:37'!
test06ADoorCanNotBeOpenIfKeyIsNotPortable

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ door openDoor: self bookcase. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self assert: door isOpen].!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:46:41'!
test16AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	door openDoor: doorKey.
	door closeDoor: anotherDoorKey.
	self deny: door isOpen.! !

!methodRemoval: DoorTest #test15AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey stamp: 'LNB 12/17/2020 20:46:41'!
test15AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	door openDoor: doorKey.
	door closeDoor: anotherDoorKey.
	self deny: door isOpen.!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:47:27' prior: 50874067!
test15ADoorCanNotBeOpenIfKeyIsNotPortable

	| room1 room2 door key |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	key := self key.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closeDoor: key.
	
	self 
		should: [ door openDoor: self bookcase. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self assert: door isOpen].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:47:47' prior: 50874141!
test15ADoorCanNotBeOpenIfKeyIsNotPortable

	| room1 room2 door key |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	key := self key.
	door := Door  connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: key.
	
	self 
		should: [ door openDoor: self bookcase. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self assert: door isOpen].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:47:50' prior: 50874163!
test15ADoorCanNotBeOpenIfKeyIsNotPortable

	| room1 room2 door key |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	key := self key.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: key.
	
	self 
		should: [ door openDoor: self bookcase. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self assert: door isOpen].! !

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 20:47:52'!
FAILURE!

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 20:47:57'!
FAILURE!

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 20:47:57'!
FAILURE!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:48:51' prior: 50873826!
openDoor: aPortableObjectKey
	(aPortableObjectKey = key and: [aPortableObjectKey isKindOf: PortableObject]) 
		ifTrue: [ key := #noKey] 
		ifFalse: [self error: self class canNotBeOpenedErrorDescription.]! !
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:48:56' prior: 50873592!
closeDoor: aPortableObjectKey 
	(self isOpen and: [aPortableObjectKey isKindOf: PortableObject]) ifFalse: [self error: self class canNotBeClosedErrorDescription].
	key := aPortableObjectKey.! !

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 20:49:51'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 20:50:31'!
test21CharacterCanOpenDoorIfHeCarriesHisKeyInItsBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self
		should: [player openDoor]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText. 
			self deny: door isOpen.
			]
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 20:50:35'!
test22CharacterCanOpenDoorIfHeCarriesHisKeyInItsBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self
		should: [player openDoor]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText. 
			self deny: door isOpen.
			]
	! !

!methodRemoval: PlayableCharacterTest #test21CharacterCanOpenDoorIfHeCarriesHisKeyInItsBackpack stamp: 'LNB 12/17/2020 20:50:35'!
test21CharacterCanOpenDoorIfHeCarriesHisKeyInItsBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self
		should: [player openDoor]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText. 
			self deny: door isOpen.
			]
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 20:50:57' prior: 50874264!
test22CharacterCanOpenDoorIfHeCarriesHisKeyInItsBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	player openDoor
	self assert: door isOpen.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 20:52:03' prior: 50874313!
test22CharacterCanOpenDoorIfHeCarriesHisKeyInItsBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	room1 at: (0@4) put: doorKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	player openDoor
	self assert: door isOpen.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 20:52:20' prior: 50874332!
test22CharacterCanOpenDoorIfHeCarriesHisKeyInItsBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	room1 at: (0@4) put: doorKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room1.
	
	player take; moveForward.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	player openDoor
	self assert: door isOpen.
	! !

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInItsBackpack stamp: 'LNB 12/17/2020 20:52:47'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 20:53:00' prior: 50874352!
test22CharacterCanOpenDoorIfHeCarriesHisKeyInItsBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	room1 at: (0@4) put: doorKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room1.
	
	player take; moveForward.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	player openDoor.
	self assert: door isOpen.
	! !

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInItsBackpack stamp: 'LNB 12/17/2020 20:53:01'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 20:53:02'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 20:53:02'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 20:53:02'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 20:53:02'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 20:53:02'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 20:53:02'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 20:53:02'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 20:53:02'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 20:53:02'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 20:53:02'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 20:53:02'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 20:53:02'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 20:53:03'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 20:53:03'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 20:53:03'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 20:53:03'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 20:53:03'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 20:53:03'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 20:53:03'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 20:53:03'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 20:53:03'!
PASSED!

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInItsBackpack stamp: 'LNB 12/17/2020 20:53:03'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 20:53:59'!
test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	room1 at: (0@4) put: doorKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room1.
	
	player take; moveForward.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	player openDoor.
	self assert: door isOpen.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 20:54:14'!
test22CharacterCanOpenDoorIfHeCarriesHisKeyInHisBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	room1 at: (0@4) put: doorKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room1.
	
	player take; moveForward.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	player openDoor.
	self assert: door isOpen.
	! !

!methodRemoval: PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInItsBackpack stamp: 'LNB 12/17/2020 20:54:15'!
test22CharacterCanOpenDoorIfHeCarriesHisKeyInItsBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	room1 at: (0@4) put: doorKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room1.
	
	player take; moveForward.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	player openDoor.
	self assert: door isOpen.
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 20:54:59' prior: 50874486!
test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	room1 at: (0@4) put: doorKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room1.
	
	player take; moveForward.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	player closeDoor: doorKey.
	self deny: door isOpen.
	! !

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 20:55:01'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:55:17'!
closeDoor: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:56:24' prior: 50874572!
closeDoor: aPortableObjectKey
	room closeDoorAt: self forwardPosition withKey: aPortableObjectKey.! !

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 20:56:27'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:56:38'!
closeDoorAt: aPoint withKey: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:56:49' prior: 50874588!
closeDoorAt: aDoorPosition withKey: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:56:55' prior: 50874594!
closeDoorAt: aDoorPosition withKey: aPortableObjectKey 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:58:38' prior: 50874600!
closeDoorAt: aDoorPosition withKey: aPortableObjectKey 
	(self at: aDoorPosition) closeDoor: aPortableObjectKey.! !

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 20:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 20:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 20:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 20:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 20:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 20:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 20:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 20:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 20:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 20:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 20:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 20:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 20:58:41'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 20:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 20:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 20:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 20:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 20:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 20:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 20:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 20:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 20:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInHisBackpack stamp: 'LNB 12/17/2020 20:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 20:58:42'!
PASSED!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:59:05'!
openDoorWith: aPortableObjectKey
	(aPortableObjectKey = key and: [aPortableObjectKey isKindOf: PortableObject]) 
		ifTrue: [ key := #noKey] 
		ifFalse: [self error: self class canNotBeOpenedErrorDescription.]! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:59:05' prior: 50874107!
test16AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	door openDoorWith: doorKey.
	door closeDoor: anotherDoorKey.
	self deny: door isOpen.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:59:06' prior: 50872871!
test10ADoorShouldOpenWithTheRightKey

	| room1 room2 door doorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	door openDoorWith: doorKey.
	self assert: (room1 at: (0@5)) equals: door.
	self assert: (room2 at: (0@5)) equals: door.
	self assert: door isOpen.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:59:06' prior: 50873806!
test06ADoorCanNotBeOpenIfAlreadyOpen

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self 
		should: [ door openDoorWith: self key. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self assert: door isOpen].! !
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:59:06' prior: 50873973!
OpenWithAnyKeyIn: aBackpack 
	(aBackpack includes: key) 
		ifTrue: [self openDoorWith: key]
		ifFalse: [self error: self class canNotBeOpenedErrorDescription.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:59:06' prior: 50874185!
test15ADoorCanNotBeOpenIfKeyIsNotPortable

	| room1 room2 door key |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	key := self key.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: key.
	
	self 
		should: [ door openDoorWith: self bookcase. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self assert: door isOpen].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:59:06' prior: 50873834!
test11ADoorCanNotBeOpenedWithTheWrongKey

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self 
		should: [ door openDoorWith: anotherDoorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !

!methodRemoval: Door #openDoor: stamp: 'LNB 12/17/2020 20:59:06'!
openDoor: aPortableObjectKey
	(aPortableObjectKey = key and: [aPortableObjectKey isKindOf: PortableObject]) 
		ifTrue: [ key := #noKey] 
		ifFalse: [self error: self class canNotBeOpenedErrorDescription.]!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:59:29'!
closeDoorWith: aPortableObjectKey 
	(self isOpen and: [aPortableObjectKey isKindOf: PortableObject]) ifFalse: [self error: self class canNotBeClosedErrorDescription].
	key := aPortableObjectKey.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:59:29'!
closeDoorWith: aPortableObjectKey
	room closeDoorAt: self forwardPosition withKey: aPortableObjectKey.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:59:29' prior: 50873457!
test13ADoorShouldCloseGivenAValidKey

	| room1 room2 door doorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	door closeDoorWith: doorKey .
	
	self assert: (room1 at: (0@5)) equals: door.
	self assert: (room2 at: (0@5)) equals: door.
	self deny: door isOpen.! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:59:29' prior: 50874606!
closeDoorAt: aDoorPosition withKey: aPortableObjectKey 
	(self at: aDoorPosition) closeDoorWith: aPortableObjectKey.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:59:30' prior: 50873655!
test14ADoorCanNotBeClosedWhenGivenKeyIsNotPortable

	| room1 room2 door |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	
	self 
		should: [ door closeDoorWith: self bookcase . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeClosedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self assert: door isOpen.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:59:30' prior: 50873116!
test12ADoorCanNotBeClosedWhenClosed

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	
	self 
		should: [ door closeDoorWith: anotherDoorKey . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeClosedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen.].! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:59:30' prior: 50874716!
test16AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey

	| room1 room2 door doorKey anotherDoorKey |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := self key.
	anotherDoorKey := self anotherKey.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: doorKey.
	door openDoorWith: doorKey.
	door closeDoorWith: anotherDoorKey.
	self deny: door isOpen.! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 20:59:30' prior: 50874548!
test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	room1 at: (0@4) put: doorKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room1.
	
	player take; moveForward.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	player closeDoorWith: doorKey.
	self deny: door isOpen.
	! !

!methodRemoval: Door #closeDoor: stamp: 'LNB 12/17/2020 20:59:30'!
closeDoor: aPortableObjectKey 
	(self isOpen and: [aPortableObjectKey isKindOf: PortableObject]) ifFalse: [self error: self class canNotBeClosedErrorDescription].
	key := aPortableObjectKey.!

!methodRemoval: PlayableCharacter #closeDoor: stamp: 'LNB 12/17/2020 20:59:30'!
closeDoor: aPortableObjectKey
	room closeDoorAt: self forwardPosition withKey: aPortableObjectKey.!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'LNB 12/17/2020 20:59:34'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'LNB 12/17/2020 20:59:34'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'LNB 12/17/2020 20:59:34'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'LNB 12/17/2020 20:59:35'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'LNB 12/17/2020 20:59:35'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'LNB 12/17/2020 20:59:35'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 20:59:35'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 20:59:35'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'LNB 12/17/2020 20:59:35'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'LNB 12/17/2020 20:59:35'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'LNB 12/17/2020 20:59:35'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'LNB 12/17/2020 20:59:35'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'LNB 12/17/2020 20:59:35'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'LNB 12/17/2020 20:59:35'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'LNB 12/17/2020 20:59:35'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 20:59:36'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 20:59:36'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 20:59:36'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 20:59:36'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 20:59:36'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 20:59:36'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 20:59:36'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 20:59:36'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 20:59:36'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 20:59:36'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 20:59:36'!
PASSED!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 20:59:36'!
PASSED!

!testRun: #DoorTest #test13ADoorShouldCloseGivenAValidKey stamp: 'LNB 12/17/2020 20:59:36'!
PASSED!

!testRun: #DoorTest #test14ADoorCanNotBeClosedWhenGivenKeyIsNotPortable stamp: 'LNB 12/17/2020 20:59:37'!
PASSED!

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 20:59:37'!
FAILURE!

!testRun: #DoorTest #test16AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey stamp: 'LNB 12/17/2020 20:59:37'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 20:59:37'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 20:59:37'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 20:59:37'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 20:59:37'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 20:59:37'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 20:59:37'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 20:59:37'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 20:59:37'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 20:59:37'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 20:59:37'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 20:59:37'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 20:59:38'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 20:59:38'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 20:59:38'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 20:59:38'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 20:59:38'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 20:59:38'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 20:59:38'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 20:59:38'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 20:59:38'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 20:59:38'!
PASSED!

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInHisBackpack stamp: 'LNB 12/17/2020 20:59:38'!
PASSED!

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 20:59:38'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'LNB 12/17/2020 20:59:38'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'LNB 12/17/2020 20:59:39'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'LNB 12/17/2020 20:59:39'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'LNB 12/17/2020 20:59:39'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'LNB 12/17/2020 20:59:39'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'LNB 12/17/2020 20:59:39'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'LNB 12/17/2020 20:59:39'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'LNB 12/17/2020 20:59:39'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'LNB 12/17/2020 20:59:39'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'LNB 12/17/2020 20:59:39'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'LNB 12/17/2020 20:59:39'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'LNB 12/17/2020 20:59:39'!
PASSED!

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 20:59:39'!
FAILURE!

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 20:59:44'!
PASSED!

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInHisBackpack stamp: 'LNB 12/17/2020 20:59:46'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 20:59:47'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 20:59:55'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 20:59:55'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 20:59:55'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 20:59:55'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 20:59:55'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 20:59:55'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 20:59:55'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 20:59:55'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 20:59:55'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 20:59:55'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 20:59:55'!
PASSED!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 20:59:55'!
PASSED!

!testRun: #DoorTest #test13ADoorShouldCloseGivenAValidKey stamp: 'LNB 12/17/2020 20:59:56'!
PASSED!

!testRun: #DoorTest #test14ADoorCanNotBeClosedWhenGivenKeyIsNotPortable stamp: 'LNB 12/17/2020 20:59:56'!
PASSED!

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 20:59:56'!
FAILURE!

!testRun: #DoorTest #test16AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey stamp: 'LNB 12/17/2020 20:59:56'!
PASSED!

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 20:59:56'!
FAILURE!

!testRun: #DoorTest #test16AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey stamp: 'LNB 12/17/2020 20:59:59'!
PASSED!

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 21:00:00'!
FAILURE!

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 21:00:00'!
FAILURE!

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 21:00:32'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:00:58' prior: 50874778!
test15ADoorCanNotBeOpenIfKeyIsNotPortable

	| room1 room2 door key |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	key := self key.
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5) closedWith: key.
	
	self 
		should: [ door openDoorWith: self bookcase. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeOpenedErrorDescription equals: anError messageText.
			self assert: (room1 at: (0@5)) equals: door.
			self assert: (room2 at: (0@5)) equals: door.
			self deny: door isOpen].! !

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 21:00:59'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 21:00:59'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 21:00:59'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 21:00:59'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 21:00:59'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 21:00:59'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 21:00:59'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 21:01:00'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 21:01:00'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 21:01:00'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 21:01:00'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 21:01:00'!
PASSED!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 21:01:00'!
PASSED!

!testRun: #DoorTest #test13ADoorShouldCloseGivenAValidKey stamp: 'LNB 12/17/2020 21:01:00'!
PASSED!

!testRun: #DoorTest #test14ADoorCanNotBeClosedWhenGivenKeyIsNotPortable stamp: 'LNB 12/17/2020 21:01:00'!
PASSED!

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 21:01:00'!
PASSED!

!testRun: #DoorTest #test16AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey stamp: 'LNB 12/17/2020 21:01:00'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'LNB 12/17/2020 21:01:03'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'LNB 12/17/2020 21:01:03'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'LNB 12/17/2020 21:01:03'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'LNB 12/17/2020 21:01:03'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'LNB 12/17/2020 21:01:03'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'LNB 12/17/2020 21:01:03'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 21:01:03'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 21:01:03'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'LNB 12/17/2020 21:01:04'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'LNB 12/17/2020 21:01:04'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'LNB 12/17/2020 21:01:04'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'LNB 12/17/2020 21:01:04'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'LNB 12/17/2020 21:01:04'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'LNB 12/17/2020 21:01:04'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'LNB 12/17/2020 21:01:04'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 21:01:04'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 21:01:04'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 21:01:04'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 21:01:04'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 21:01:04'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 21:01:04'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 21:01:04'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 21:01:04'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 21:01:05'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 21:01:05'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 21:01:05'!
PASSED!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 21:01:05'!
PASSED!

!testRun: #DoorTest #test13ADoorShouldCloseGivenAValidKey stamp: 'LNB 12/17/2020 21:01:05'!
PASSED!

!testRun: #DoorTest #test14ADoorCanNotBeClosedWhenGivenKeyIsNotPortable stamp: 'LNB 12/17/2020 21:01:05'!
PASSED!

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 21:01:05'!
PASSED!

!testRun: #DoorTest #test16AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey stamp: 'LNB 12/17/2020 21:01:05'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 21:01:05'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 21:01:05'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 21:01:05'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 21:01:05'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 21:01:05'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 21:01:05'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 21:01:06'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 21:01:06'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 21:01:06'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 21:01:06'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 21:01:06'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 21:01:06'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:01:06'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:01:06'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 21:01:06'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 21:01:06'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 21:01:06'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 21:01:06'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 21:01:06'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 21:01:07'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 21:01:07'!
PASSED!

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInHisBackpack stamp: 'LNB 12/17/2020 21:01:07'!
PASSED!

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:01:07'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'LNB 12/17/2020 21:01:07'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'LNB 12/17/2020 21:01:07'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'LNB 12/17/2020 21:01:07'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'LNB 12/17/2020 21:01:07'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'LNB 12/17/2020 21:01:07'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'LNB 12/17/2020 21:01:07'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'LNB 12/17/2020 21:01:07'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'LNB 12/17/2020 21:01:07'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'LNB 12/17/2020 21:01:07'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'LNB 12/17/2020 21:01:08'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'LNB 12/17/2020 21:01:08'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'LNB 12/17/2020 21:01:08'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 21:01:33'!
test23CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	room1 at: (0@4) put: doorKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room1.
	
	player take; moveForward.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	player closeDoorWith: doorKey.
	self deny: door isOpen.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 21:01:41'!
test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	room1 at: (0@4) put: doorKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room1.
	
	player take; moveForward.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	player closeDoorWith: doorKey.
	self deny: door isOpen.
	! !

!methodRemoval: PlayableCharacterTest #test23CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:01:41'!
test23CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	room1 at: (0@4) put: doorKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room1.
	
	player take; moveForward.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	player closeDoorWith: doorKey.
	self deny: door isOpen.
	!

----SNAPSHOT----(17 December 2020 21:03:41) CuisUniversity-4384.image priorSource: 17238107!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 21:06:31' prior: 50875630!
test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self
		should: [player closeDoorWith: doorKey]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Door canNotBeClosedErrorDescription equals: anError messageText. 
			self assert: door isOpen.
			]
	! !

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:06:33'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 21:07:28' prior: 50875675!
test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self
		should: [player closeDoorWith: doorKey]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter doesNotOwnKey equals: anError messageText. 
			self assert: door isOpen.
			]
	! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:09:03' prior: 50874841!
closeDoorWith: aPortableObjectKey
	self assertCharacterOwnsKey: aPortableObjectKey.
	room closeDoorAt: self forwardPosition withKey: aPortableObjectKey.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 21:09:12'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 21:09:12'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 21:09:12'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 21:09:12'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 21:09:12'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 21:09:12'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 21:09:12'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 21:09:12'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 21:09:12'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 21:09:12'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 21:09:12'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 21:09:12'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:09:13'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:09:13'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 21:09:13'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 21:09:13'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 21:09:13'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 21:09:13'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 21:09:13'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 21:09:13'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 21:09:13'!
PASSED!

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInHisBackpack stamp: 'LNB 12/17/2020 21:09:13'!
PASSED!

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:09:13'!
ERROR!

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:09:13'!
ERROR!

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:09:18'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:09:26'!
assertCharacterOwnsKey: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:10:25' prior: 50875835!
assertCharacterOwnsKey: aPortableObject 
	(backpack includes: aPortableObject) ifFalse: [self error: self class doesNotOwnKey]! !

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:10:33'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:10:41'!
doesNotOwnKey
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:10:58'!
doesNotOwnKeyErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:10:59' prior: 50875704!
test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack

	| player door doorKey room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	doorKey := NoPointsPortableObject named: 'SkullKey' weighing: 1.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	self
		should: [player closeDoorWith: doorKey]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter doesNotOwnKeyErrorDescription equals: anError messageText. 
			self assert: door isOpen.
			]
	! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:10:59' prior: 50875841!
assertCharacterOwnsKey: aPortableObject 
	(backpack includes: aPortableObject) ifFalse: [self error: self class doesNotOwnKeyErrorDescription]! !

!methodRemoval: PlayableCharacter class #doesNotOwnKey stamp: 'LNB 12/17/2020 21:10:59'!
doesNotOwnKey
	self shouldBeImplemented.!
!PlayableCharacter class methodsFor: 'nil' stamp: 'LNB 12/17/2020 21:11:13'!
doesNotOwnKey
	^'Character does not have key in backpack'! !

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:11:14'!
PASSED!

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:11:16'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 21:11:27'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 21:11:27'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 21:11:27'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 21:11:27'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 21:11:27'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 21:11:27'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 21:11:27'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 21:11:27'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 21:11:27'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 21:11:27'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 21:11:27'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 21:11:28'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:11:28'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:11:28'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 21:11:28'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 21:11:28'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 21:11:28'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 21:11:28'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 21:11:28'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 21:11:28'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 21:11:28'!
PASSED!

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInHisBackpack stamp: 'LNB 12/17/2020 21:11:28'!
PASSED!

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:11:28'!
PASSED!

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:11:28'!
ERROR!

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:11:29'!
ERROR!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'LNB 12/17/2020 21:11:34'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'LNB 12/17/2020 21:11:34'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'LNB 12/17/2020 21:11:35'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'LNB 12/17/2020 21:11:35'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'LNB 12/17/2020 21:11:35'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'LNB 12/17/2020 21:11:35'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 21:11:35'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 21:11:35'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'LNB 12/17/2020 21:11:35'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'LNB 12/17/2020 21:11:35'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'LNB 12/17/2020 21:11:35'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'LNB 12/17/2020 21:11:35'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'LNB 12/17/2020 21:11:35'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'LNB 12/17/2020 21:11:35'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'LNB 12/17/2020 21:11:35'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 21:11:36'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 21:11:36'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 21:11:36'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 21:11:36'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 21:11:36'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 21:11:36'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 21:11:36'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 21:11:36'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 21:11:36'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 21:11:36'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 21:11:36'!
PASSED!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 21:11:36'!
PASSED!

!testRun: #DoorTest #test13ADoorShouldCloseGivenAValidKey stamp: 'LNB 12/17/2020 21:11:36'!
PASSED!

!testRun: #DoorTest #test14ADoorCanNotBeClosedWhenGivenKeyIsNotPortable stamp: 'LNB 12/17/2020 21:11:37'!
PASSED!

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 21:11:37'!
PASSED!

!testRun: #DoorTest #test16AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey stamp: 'LNB 12/17/2020 21:11:37'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 21:11:37'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 21:11:37'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 21:11:37'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 21:11:37'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 21:11:37'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 21:11:37'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 21:11:37'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 21:11:37'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 21:11:38'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 21:11:38'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 21:11:38'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 21:11:38'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:11:38'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:11:38'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 21:11:38'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 21:11:38'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 21:11:38'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 21:11:38'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 21:11:38'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 21:11:38'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 21:11:38'!
PASSED!

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInHisBackpack stamp: 'LNB 12/17/2020 21:11:39'!
PASSED!

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:11:39'!
PASSED!

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:11:39'!
ERROR!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'LNB 12/17/2020 21:11:39'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'LNB 12/17/2020 21:11:39'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'LNB 12/17/2020 21:11:39'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'LNB 12/17/2020 21:11:39'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'LNB 12/17/2020 21:11:39'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'LNB 12/17/2020 21:11:39'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'LNB 12/17/2020 21:11:39'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'LNB 12/17/2020 21:11:39'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'LNB 12/17/2020 21:11:39'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'LNB 12/17/2020 21:11:39'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'LNB 12/17/2020 21:11:40'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'LNB 12/17/2020 21:11:40'!
PASSED!

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:11:40'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:12:18' prior: 50875858!
doesNotOwnKeyErrorDescription
	^'Character does not have key in backpack'! !

!methodRemoval: PlayableCharacter class #doesNotOwnKey stamp: 'LNB 12/17/2020 21:12:20'!
doesNotOwnKey
	^'Character does not have key in backpack'!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'LNB 12/17/2020 21:12:34'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'LNB 12/17/2020 21:12:34'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'LNB 12/17/2020 21:12:34'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'LNB 12/17/2020 21:12:34'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'LNB 12/17/2020 21:12:35'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'LNB 12/17/2020 21:12:35'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 21:12:35'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 21:12:35'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'LNB 12/17/2020 21:12:35'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'LNB 12/17/2020 21:12:35'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'LNB 12/17/2020 21:12:35'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'LNB 12/17/2020 21:12:35'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'LNB 12/17/2020 21:12:35'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'LNB 12/17/2020 21:12:35'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'LNB 12/17/2020 21:12:35'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 21:12:36'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 21:12:36'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 21:12:36'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 21:12:36'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 21:12:36'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 21:12:36'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 21:12:36'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 21:12:36'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 21:12:36'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 21:12:36'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 21:12:36'!
PASSED!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 21:12:37'!
PASSED!

!testRun: #DoorTest #test13ADoorShouldCloseGivenAValidKey stamp: 'LNB 12/17/2020 21:12:37'!
PASSED!

!testRun: #DoorTest #test14ADoorCanNotBeClosedWhenGivenKeyIsNotPortable stamp: 'LNB 12/17/2020 21:12:37'!
PASSED!

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 21:12:37'!
PASSED!

!testRun: #DoorTest #test16AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey stamp: 'LNB 12/17/2020 21:12:37'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 21:12:37'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 21:12:37'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 21:12:37'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 21:12:37'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 21:12:37'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 21:12:37'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 21:12:37'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 21:12:37'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 21:12:37'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 21:12:38'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 21:12:38'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 21:12:38'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:12:38'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:12:38'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 21:12:38'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 21:12:38'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 21:12:38'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 21:12:38'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 21:12:38'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 21:12:38'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 21:12:38'!
PASSED!

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInHisBackpack stamp: 'LNB 12/17/2020 21:12:39'!
PASSED!

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:12:39'!
PASSED!

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:12:39'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'LNB 12/17/2020 21:12:39'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'LNB 12/17/2020 21:12:39'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'LNB 12/17/2020 21:12:39'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'LNB 12/17/2020 21:12:39'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'LNB 12/17/2020 21:12:39'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'LNB 12/17/2020 21:12:39'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'LNB 12/17/2020 21:12:39'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'LNB 12/17/2020 21:12:39'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'LNB 12/17/2020 21:12:39'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'LNB 12/17/2020 21:12:39'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'LNB 12/17/2020 21:12:40'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'LNB 12/17/2020 21:12:40'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 21:16:59'!
test25CharacterCanMoveThroughADoor

	| player door room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	player moveForward.
	self assert: 1.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 21:18:41' prior: 50876512!
test25CharacterCanMoveThroughADoor

	| player door room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	player moveForward.
	self assert: (player isAt: (0@6) heading: #North).
	self assert: (player isAtRoom: room2).
	! !

!testRun: #PlayableCharacterTest #test25CharacterCanMoveThroughADoor stamp: 'LNB 12/17/2020 21:18:55'!
ERROR!
!Room methodsFor: 'contents' stamp: 'LNB 12/17/2020 21:19:57' prior: 50868867 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	self assertIsEmptyButNotADoor: aPosition.
	
	contents at: aPosition put: aStageObject ! !
!Room methodsFor: 'contents' stamp: 'LNB 12/17/2020 21:20:30' prior: 50876548 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aStageObject ! !
!Room methodsFor: 'contents' stamp: 'LNB 12/17/2020 21:21:32'!
moveCharacterFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:21:32' prior: 50868650!
moveTo: aNewPosition
	
	room moveCharacterFrom: self position to: aNewPosition.
		! !

!methodRemoval: Room #moveFrom:to: stamp: 'LNB 12/17/2020 21:21:32'!
moveFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	self at: aTargetPosition put: toMove.
	contents removeKey: aSourcePosition.
	!
!Room methodsFor: 'contents' stamp: 'LNB 12/17/2020 21:23:37' prior: 50876564!
moveCharacterFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	self moveTo: aTargetPosition aCharacter: toMove.
	contents removeKey: aSourcePosition.
	! !
!Room methodsFor: 'contents' stamp: 'LNB 12/17/2020 21:24:16'!
moveTo: aPosition aCharacter: aPlayableCharacter

	self assertPositionIsValid: aPosition.
	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aPlayableCharacter ! !
!Room methodsFor: 'contents' stamp: 'LNB 12/17/2020 21:25:45'!
addTo: aPosition aCharacter: aPlayableCharacter

	self assertPositionIsValid: aPosition.
	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aPlayableCharacter ! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:25:46' prior: 50876587!
moveCharacterFrom: aSourcePosition to: aTargetPosition

	| toMove |
	
	toMove := self at: aSourcePosition.
	self addTo: aTargetPosition aCharacter: toMove.
	contents removeKey: aSourcePosition.
	! !

!methodRemoval: Room #moveTo:aCharacter: stamp: 'LNB 12/17/2020 21:25:46'!
moveTo: aPosition aCharacter: aPlayableCharacter

	self assertPositionIsValid: aPosition.
	self assertIsEmpty: aPosition.
	
	contents at: aPosition put: aPlayableCharacter !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:26:16' prior: 50876604!
addTo: aPosition aCharacter: aPlayableCharacter

	self assertPositionIsValid: aPosition.
	self assertValidPlacement: aPosition.
	
	contents at: aPosition put: aPlayableCharacter ! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:27:08'!
assertValidPlacement: aPosition.
	
	^(self isEmptyAt: aPosition) ifFalse: [ self error: self class positionIsNotEmptyErrorDescription ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:27:33'!
assertValidPlacementForCharacter: aPosition.
	
	^(self isEmptyAt: aPosition) ifFalse: [ self error: self class positionIsNotEmptyErrorDescription ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:27:33' prior: 50876630!
addTo: aPosition aCharacter: aPlayableCharacter

	self assertPositionIsValid: aPosition.
	self assertValidPlacementForCharacter: aPosition.
	
	contents at: aPosition put: aPlayableCharacter ! !

!methodRemoval: Room #assertValidPlacement: stamp: 'LNB 12/17/2020 21:27:34'!
assertValidPlacement: aPosition.
	
	^(self isEmptyAt: aPosition) ifFalse: [ self error: self class positionIsNotEmptyErrorDescription ]!
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:30:27' prior: 50876645!
assertValidPlacementForCharacter: aPosition.
	
	^(self isEmptyAt: aPosition or: [contents characterCanMoveInto]) ifFalse: [ self error: self class positionIsNotEmptyErrorDescription ]! !

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'LNB 12/17/2020 21:30:32'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'LNB 12/17/2020 21:30:32'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'LNB 12/17/2020 21:30:32'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'LNB 12/17/2020 21:30:32'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'LNB 12/17/2020 21:30:32'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'LNB 12/17/2020 21:30:32'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'LNB 12/17/2020 21:30:32'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'LNB 12/17/2020 21:30:32'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'LNB 12/17/2020 21:30:32'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'LNB 12/17/2020 21:30:33'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'LNB 12/17/2020 21:30:33'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'LNB 12/17/2020 21:30:33'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 21:30:42'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 21:30:42'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 21:30:42'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 21:30:42'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 21:30:42'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 21:30:42'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 21:30:42'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 21:30:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 21:30:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 21:30:42'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 21:30:42'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 21:30:42'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:30:43'!
ERROR!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:30:43'!
ERROR!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 21:30:43'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 21:30:43'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 21:30:43'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 21:30:43'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 21:30:43'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 21:30:43'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 21:30:43'!
PASSED!

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInHisBackpack stamp: 'LNB 12/17/2020 21:30:43'!
ERROR!

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:30:43'!
ERROR!

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:30:43'!
PASSED!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveThroughADoor stamp: 'LNB 12/17/2020 21:30:43'!
ERROR!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveThroughADoor stamp: 'LNB 12/17/2020 21:30:48'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:31:17' prior: 50876669!
assertValidPlacementForCharacter: aPosition.
	
	^((self isEmptyAt: aPosition) or: [contents characterCanMoveInto]) ifFalse: [ self error: self class positionIsNotEmptyErrorDescription ]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 21:31:22'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 21:31:22'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 21:31:22'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 21:31:22'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 21:31:22'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 21:31:22'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 21:31:23'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 21:31:23'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 21:31:23'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 21:31:23'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 21:31:23'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 21:31:23'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:31:23'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:31:23'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 21:31:23'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 21:31:23'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 21:31:23'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 21:31:23'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 21:31:23'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 21:31:24'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 21:31:24'!
PASSED!

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInHisBackpack stamp: 'LNB 12/17/2020 21:31:24'!
PASSED!

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:31:24'!
PASSED!

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:31:24'!
PASSED!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveThroughADoor stamp: 'LNB 12/17/2020 21:31:24'!
ERROR!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveThroughADoor stamp: 'LNB 12/17/2020 21:31:24'!
ERROR!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveThroughADoor stamp: 'LNB 12/17/2020 21:31:32'!
ERROR!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveThroughADoor stamp: 'LNB 12/17/2020 21:31:32'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:32:03' prior: 50876817!
assertValidPlacementForCharacter: aPosition.
	
	^((self isEmptyAt: aPosition) or: [(contents at: aPosition) characterCanMoveInto]) ifFalse: [ self error: self class positionIsNotEmptyErrorDescription ]! !

!testRun: #PlayableCharacterTest #test25CharacterCanMoveThroughADoor stamp: 'LNB 12/17/2020 21:32:09'!
ERROR!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveThroughADoor stamp: 'LNB 12/17/2020 21:32:09'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:32:17'!
characterCanMoveInto
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:32:24' prior: 50876950!
characterCanMoveInto
	^true.! !

!testRun: #PlayableCharacterTest #test25CharacterCanMoveThroughADoor stamp: 'LNB 12/17/2020 21:32:28'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:35:47' prior: 50876653!
addTo: aPosition aCharacter: aPlayableCharacter

	self assertPositionIsValid: aPosition.
	self assertValidPlacementForCharacter: aPosition.
	
	((contents at: aPosition) characterCanMoveInto) ifFalse: [contents at: aPosition put: aPlayableCharacter].! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:38:19'!
isDoor: aPosition.
	
	^((self isEmptyAt: aPosition) or: [(contents at: aPosition) characterCanMoveInto])! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:38:35' prior: 50876974!
isDoor: aPosition.
	
	^((self isEmptyAt: aPosition) not and: [(contents at: aPosition) characterCanMoveInto])! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:40:01' prior: 50876963!
addTo: aPosition aCharacter: aPlayableCharacter

	self assertPositionIsValid: aPosition.
	self assertValidPlacementForCharacter: aPosition.
	
	(self isDoor: aPosition) 
		ifFalse: [contents at: aPosition put: aPlayableCharacter]
		ifTrue: []! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:40:05' prior: 50876988!
addTo: aPosition aCharacter: aPlayableCharacter

	self assertPositionIsValid: aPosition.
	self assertValidPlacementForCharacter: aPosition.
	
	(self isDoor: aPosition) 
		ifFalse: [contents at: aPosition put: aPlayableCharacter]
		ifTrue: [].! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:41:18' prior: 50876999!
addTo: aPosition aCharacter: aPlayableCharacter

	self assertPositionIsValid: aPosition.
	self assertValidPlacementForCharacter: aPosition.
	
	(self isDoor: aPosition) 
		ifFalse: [contents at: aPosition put: aPlayableCharacter]
		ifTrue: [(contents at: aPosition) move: aPlayableCharacter throughDoorFrom: self].! !

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'LNB 12/17/2020 21:41:19'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'LNB 12/17/2020 21:41:19'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'LNB 12/17/2020 21:41:19'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'LNB 12/17/2020 21:41:19'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'LNB 12/17/2020 21:41:20'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'LNB 12/17/2020 21:41:20'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'LNB 12/17/2020 21:41:20'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'LNB 12/17/2020 21:41:20'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'LNB 12/17/2020 21:41:20'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'LNB 12/17/2020 21:41:20'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'LNB 12/17/2020 21:41:20'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'LNB 12/17/2020 21:41:20'!
PASSED!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveThroughADoor stamp: 'LNB 12/17/2020 21:41:25'!
ERROR!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveThroughADoor stamp: 'LNB 12/17/2020 21:41:26'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:41:35'!
move: aPlayableCharacter throughDoorFrom: aRoom 
	self shouldBeImplemented.! !
!Door methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:43:39' prior: 50877069!
move: aPlayableCharacter throughDoorFrom: aRoom 
	(aRoom = room) ifTrue: [ aPlayableCharacter changeRoomTo: adjacentRoom through: self]! !
!Room methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:44:12' prior: 50877010!
addTo: aPosition aCharacter: aPlayableCharacter

	self assertPositionIsValid: aPosition.
	self assertValidPlacementForCharacter: aPosition.
	
	(self isDoor: aPosition) 
		ifFalse: [contents at: aPosition put: aPlayableCharacter]
		ifTrue: [(contents at: aPosition) move: aPlayableCharacter throughDoorFrom: self ].! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 21:45:31'!
test25CharacterCanMoveForwardsThroughADoor

	| player door room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	player moveForward.
	self assert: (player isAt: (0@6) heading: #North).
	self assert: (player isAtRoom: room2).
	! !

!methodRemoval: PlayableCharacterTest #test25CharacterCanMoveThroughADoor stamp: 'LNB 12/17/2020 21:45:46'!
test25CharacterCanMoveThroughADoor

	| player door room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	player moveForward.
	self assert: (player isAt: (0@6) heading: #North).
	self assert: (player isAtRoom: room2).
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'LNB 12/17/2020 21:46:20'!
test25CharacterCanMoveForwardsThroughADoorNorth

	| player door room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	player moveForward.
	self assert: (player isAt: (0@6) heading: #North).
	self assert: (player isAtRoom: room2).
	! !

!methodRemoval: PlayableCharacterTest #test25CharacterCanMoveForwardsThroughADoor stamp: 'LNB 12/17/2020 21:46:26'!
test25CharacterCanMoveForwardsThroughADoor

	| player door room1 room2 |

	room1 := Room ofWidth: 10 andHeight: 10.
	room2 := Room ofWidth: 10 andHeight: 10.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #North in: room1.
	
	door := Door connecting: room1 at: (0@5) to: room2 at: (0@5).
	
	player moveForward.
	self assert: (player isAt: (0@6) heading: #North).
	self assert: (player isAtRoom: room2).
	!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveForwardsThroughADoorNorth stamp: 'LNB 12/17/2020 21:47:11'!
ERROR!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveForwardsThroughADoorNorth stamp: 'LNB 12/17/2020 21:47:11'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:47:22'!
changeRoomTo: aRoom through: aDoor 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:51:01' prior: 50877173!
changeRoomTo: aRoom through: aDoor 

	aRoom at: self.
	room := aRoom.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:51:33' prior: 50877179!
changeRoomTo: aRoom through: aDoor 

	aRoom at: self forwardPosition put: self.
	room := aRoom.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 21:51:34'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 21:51:34'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 21:51:34'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 21:51:35'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 21:51:35'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 21:51:35'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 21:51:35'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 21:51:35'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 21:51:35'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 21:51:35'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 21:51:35'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 21:51:35'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:51:35'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:51:35'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 21:51:35'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 21:51:36'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 21:51:36'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 21:51:36'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 21:51:36'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 21:51:36'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 21:51:36'!
PASSED!

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInHisBackpack stamp: 'LNB 12/17/2020 21:51:36'!
PASSED!

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:51:36'!
PASSED!

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:51:36'!
PASSED!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveForwardsThroughADoorNorth stamp: 'LNB 12/17/2020 21:51:36'!
ERROR!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveForwardsThroughADoorNorth stamp: 'LNB 12/17/2020 21:51:36'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 21:51:44'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 21:51:45'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 21:51:47'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 21:51:48'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 21:51:49'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 21:51:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 21:51:56'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 21:51:57'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 21:52:01'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 21:52:01'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 21:52:01'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 21:52:01'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 21:52:01'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 21:52:01'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 21:52:01'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 21:52:01'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 21:52:01'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 21:52:01'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 21:52:01'!
PASSED!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 21:52:01'!
PASSED!

!testRun: #DoorTest #test13ADoorShouldCloseGivenAValidKey stamp: 'LNB 12/17/2020 21:52:01'!
PASSED!

!testRun: #DoorTest #test14ADoorCanNotBeClosedWhenGivenKeyIsNotPortable stamp: 'LNB 12/17/2020 21:52:02'!
PASSED!

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 21:52:02'!
PASSED!

!testRun: #DoorTest #test16AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey stamp: 'LNB 12/17/2020 21:52:02'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'LNB 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'LNB 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'LNB 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'LNB 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'LNB 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'LNB 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'LNB 12/17/2020 21:52:05'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'LNB 12/17/2020 21:52:06'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'LNB 12/17/2020 21:52:06'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'LNB 12/17/2020 21:52:06'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'LNB 12/17/2020 21:52:06'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'LNB 12/17/2020 21:52:06'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 21:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 21:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 21:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 21:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 21:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 21:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 21:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 21:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 21:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 21:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 21:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 21:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 21:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 21:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 21:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 21:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 21:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 21:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 21:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInHisBackpack stamp: 'LNB 12/17/2020 21:52:09'!
PASSED!

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:52:10'!
PASSED!

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:52:10'!
PASSED!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveForwardsThroughADoorNorth stamp: 'LNB 12/17/2020 21:52:10'!
ERROR!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveForwardsThroughADoorNorth stamp: 'LNB 12/17/2020 21:52:10'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:53:03' prior: 50877185!
changeRoomTo: aRoom through: aDoor 

	aRoom at: (self forwardPosition + self forwardPoint) put: self.
	room := aRoom.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 21:53:04'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 21:53:04'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 21:53:04'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 21:53:04'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 21:53:04'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 21:53:04'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 21:53:04'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 21:53:04'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 21:53:04'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 21:53:05'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 21:53:05'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 21:53:05'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:53:05'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:53:05'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 21:53:05'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 21:53:05'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 21:53:05'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 21:53:05'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 21:53:05'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 21:53:05'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 21:53:05'!
PASSED!

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInHisBackpack stamp: 'LNB 12/17/2020 21:53:05'!
PASSED!

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:53:06'!
PASSED!

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:53:06'!
PASSED!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveForwardsThroughADoorNorth stamp: 'LNB 12/17/2020 21:53:06'!
ERROR!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveForwardsThroughADoorNorth stamp: 'LNB 12/17/2020 21:53:06'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:53:39' prior: 50877519!
changeRoomTo: aRoom through: aDoor 

	aRoom at: (self forwardPosition + (0@1)) put: self.
	room := aRoom.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 21:53:39'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 21:53:40'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 21:53:40'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 21:53:40'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 21:53:40'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 21:53:40'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 21:53:40'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 21:53:40'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 21:53:40'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 21:53:40'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 21:53:40'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 21:53:40'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:53:40'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:53:40'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 21:53:41'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 21:53:41'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 21:53:41'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 21:53:41'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 21:53:41'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 21:53:41'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 21:53:41'!
PASSED!

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInHisBackpack stamp: 'LNB 12/17/2020 21:53:41'!
PASSED!

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:53:41'!
PASSED!

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:53:41'!
PASSED!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveForwardsThroughADoorNorth stamp: 'LNB 12/17/2020 21:53:41'!
ERROR!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveForwardsThroughADoorNorth stamp: 'LNB 12/17/2020 21:53:41'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:53:50'!
isAtRoom: aRoom 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'LNB 12/17/2020 21:53:59' prior: 50877736!
isAtRoom: aRoom 
	^room = aRoom ! !

!testRun: #PlayableCharacterTest #test25CharacterCanMoveForwardsThroughADoorNorth stamp: 'LNB 12/17/2020 21:53:59'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'LNB 12/17/2020 21:54:02'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'LNB 12/17/2020 21:54:02'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'LNB 12/17/2020 21:54:02'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'LNB 12/17/2020 21:54:02'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'LNB 12/17/2020 21:54:02'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'LNB 12/17/2020 21:54:02'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 21:54:02'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'LNB 12/17/2020 21:54:03'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'LNB 12/17/2020 21:54:03'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'LNB 12/17/2020 21:54:03'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'LNB 12/17/2020 21:54:03'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'LNB 12/17/2020 21:54:03'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'LNB 12/17/2020 21:54:03'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'LNB 12/17/2020 21:54:03'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'LNB 12/17/2020 21:54:03'!
PASSED!

!testRun: #DoorTest #test01ADoorCantBeCreatedIfFirstRoomPositionIsNotValid stamp: 'LNB 12/17/2020 21:54:03'!
PASSED!

!testRun: #DoorTest #test02ADoorCantBeCreatedIfSecondRoomPositionIsNotValid stamp: 'LNB 12/17/2020 21:54:03'!
PASSED!

!testRun: #DoorTest #test03ACreatedDoorMustShowUpPlacedInEachRoom stamp: 'LNB 12/17/2020 21:54:03'!
PASSED!

!testRun: #DoorTest #test04ACreatedDoorCanNotBeTakenFromARoom stamp: 'LNB 12/17/2020 21:54:03'!
PASSED!

!testRun: #DoorTest #test05ADoorCanNotBeIntroducedIntoANonPortableObject stamp: 'LNB 12/17/2020 21:54:03'!
PASSED!

!testRun: #DoorTest #test06ADoorCanNotBeOpenIfAlreadyOpen stamp: 'LNB 12/17/2020 21:54:04'!
PASSED!

!testRun: #DoorTest #test07ADoorIsOpenIfNotCreatedWithAKey stamp: 'LNB 12/17/2020 21:54:04'!
PASSED!

!testRun: #DoorTest #test08ADoorIsClosedIfCreatedWithAKey stamp: 'LNB 12/17/2020 21:54:04'!
PASSED!

!testRun: #DoorTest #test09ADoorCanOnlyBeCreatedWithAPortableObjectKey stamp: 'LNB 12/17/2020 21:54:04'!
PASSED!

!testRun: #DoorTest #test10ADoorShouldOpenWithTheRightKey stamp: 'LNB 12/17/2020 21:54:04'!
PASSED!

!testRun: #DoorTest #test11ADoorCanNotBeOpenedWithTheWrongKey stamp: 'LNB 12/17/2020 21:54:04'!
PASSED!

!testRun: #DoorTest #test12ADoorCanNotBeClosedWhenClosed stamp: 'LNB 12/17/2020 21:54:04'!
PASSED!

!testRun: #DoorTest #test13ADoorShouldCloseGivenAValidKey stamp: 'LNB 12/17/2020 21:54:04'!
PASSED!

!testRun: #DoorTest #test14ADoorCanNotBeClosedWhenGivenKeyIsNotPortable stamp: 'LNB 12/17/2020 21:54:04'!
PASSED!

!testRun: #DoorTest #test15ADoorCanNotBeOpenIfKeyIsNotPortable stamp: 'LNB 12/17/2020 21:54:04'!
PASSED!

!testRun: #DoorTest #test16AClosedDoorShouldBeAbleToOpenWithItsKeyAndBeClosedWithAnotherKey stamp: 'LNB 12/17/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LNB 12/17/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LNB 12/17/2020 21:54:04'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LNB 12/17/2020 21:54:05'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LNB 12/17/2020 21:54:05'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LNB 12/17/2020 21:54:05'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LNB 12/17/2020 21:54:05'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LNB 12/17/2020 21:54:05'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LNB 12/17/2020 21:54:05'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LNB 12/17/2020 21:54:05'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LNB 12/17/2020 21:54:05'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'LNB 12/17/2020 21:54:05'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'LNB 12/17/2020 21:54:05'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:54:05'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'LNB 12/17/2020 21:54:05'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'LNB 12/17/2020 21:54:05'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'LNB 12/17/2020 21:54:06'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'LNB 12/17/2020 21:54:06'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'LNB 12/17/2020 21:54:06'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'LNB 12/17/2020 21:54:06'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'LNB 12/17/2020 21:54:06'!
PASSED!

!testRun: #PlayableCharacterTest #test21CharacterCantOpenDoorIfRequiredKeyIsNotInBackpack stamp: 'LNB 12/17/2020 21:54:06'!
PASSED!

!testRun: #PlayableCharacterTest #test22CharacterCanOpenDoorIfHeCarriesHisKeyInHisBackpack stamp: 'LNB 12/17/2020 21:54:06'!
PASSED!

!testRun: #PlayableCharacterTest #test23CharacterCanCloseDoorIfHeCarriesTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:54:06'!
PASSED!

!testRun: #PlayableCharacterTest #test24CharacterCanNotCloseDoorIfHeDoesNotCarryTheKeyInTheBackpack stamp: 'LNB 12/17/2020 21:54:06'!
PASSED!

!testRun: #PlayableCharacterTest #test25CharacterCanMoveForwardsThroughADoorNorth stamp: 'LNB 12/17/2020 21:54:06'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'LNB 12/17/2020 21:54:06'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'LNB 12/17/2020 21:54:06'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'LNB 12/17/2020 21:54:06'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'LNB 12/17/2020 21:54:07'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'LNB 12/17/2020 21:54:07'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'LNB 12/17/2020 21:54:07'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'LNB 12/17/2020 21:54:07'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'LNB 12/17/2020 21:54:07'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'LNB 12/17/2020 21:54:07'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'LNB 12/17/2020 21:54:07'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'LNB 12/17/2020 21:54:07'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'LNB 12/17/2020 21:54:07'!
PASSED!

----SNAPSHOT----(17 December 2020 21:54:23) CuisUniversity-4384.image priorSource: 17408671!