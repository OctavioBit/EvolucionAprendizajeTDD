----End fileIn of /Users/monteagudo/Downloads/ISW1-2020-2C-Recuperatorio-2doParcial.st----!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'HG 12/15/2020 16:52:45' prior: 50943561!
take
	
	| toTake |
	
	toTake := room at: self forwardPosition.
	toTake takenBy: self 
	! !

----End fileIn of /Users/monteagudo/Desktop/1crecu.st----!
!ShippingTest methodsFor: 'tests' stamp: 'HG 12/15/2020 18:00:10'!
test09

	| distributionCenter maxDeliveryTime robot targetCity bikeVehicle sourceCity truckVehicle |
	
	targetCity := 'CABA'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	truckVehicle := CargoVehicle 
		ofType: #Truck from: sourceCity to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: targetCity to: sourceCity  leavingAt: maxDeliveryTime previous: 10*second  maxWeight: 11  routingWith: self.
	distributionCenter := DistibutionCenter withAvailableCargoVehicles: {truckVehicle. bikeVehicle }.
	
		! !
!ShippingTest methodsFor: 'tests' stamp: 'HG 12/15/2020 18:04:40' prior: 50945972!
test09

	| distributionCenter maxDeliveryTime robot targetCity bikeVehicle sourceCity truckVehicle |
	
	targetCity := 'CABA'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	truckVehicle := CargoVehicle 
		ofType: #Truck from: sourceCity to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: targetCity to: sourceCity  leavingAt: maxDeliveryTime previous: 10*second  maxWeight: 11  routingWith: self.
	truckVehicle carry: bikeVehicle. 
	
	distributionCenter := DistibutionCenter withAvailableCargoVehicles: {truckVehicle.}.
	"
	self deny: robot hasTrailerAttached.
	self assert: (selectedCargoVehicle willShip: trailer)
	
	"
	
		! !
!ShippingTest methodsFor: 'tests' stamp: 'HG 12/15/2020 18:40:12' prior: 50945995!
test09

	| distributionCenter maxDeliveryTime robot targetCity bikeVehicle sourceCity truckVehicle trailer |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	truckVehicle := CargoVehicle 
		ofType: #Truck from: sourceCity to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: targetCity to: sourceCity  leavingAt: maxDeliveryTime previous: 10*second  maxWeight: 11  routingWith: self.
	truckVehicle carry: bikeVehicle. 
	robot shipWith: truckVehicle.

	self deny: robot hasTrailerAttached.
	self assert: (truckVehicle willShip: trailer)
		
		! !
!ShippingTest methodsFor: 'tests' stamp: 'HG 12/15/2020 18:40:20' prior: 50946022!
test09

	| maxDeliveryTime robot targetCity bikeVehicle sourceCity truckVehicle trailer |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	truckVehicle := CargoVehicle 
		ofType: #Truck from: sourceCity to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: targetCity to: sourceCity  leavingAt: maxDeliveryTime previous: 10*second  maxWeight: 11  routingWith: self.
	truckVehicle carry: bikeVehicle. 
	robot shipWith: truckVehicle.

	self deny: robot hasTrailerAttached.
	self assert: (truckVehicle willShip: trailer)
		
		! !
!ShippingTest methodsFor: 'tests' stamp: 'HG 12/15/2020 18:41:29' prior: 50946048!
test09

	| maxDeliveryTime robot targetCity bikeVehicle sourceCity truckVehicle trailer |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	truckVehicle := CargoVehicle 
		ofType: #Truck from: sourceCity to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: targetCity to: sourceCity  leavingAt: maxDeliveryTime previous: 10*second  maxWeight: 11  routingWith: self.
	truckVehicle carry: bikeVehicle. 
	robot shipWith: truckVehicle.

	self deny: robot hasTrailerAttached.
	self assert: (truckVehicle willShip: trailer)! !
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/15/2020 18:43:38'!
ofType: aType from: sourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator  
	
	| arrivingTime |
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight ! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/15/2020 18:43:38' prior: 50944680!
test07ArrivingLastSelectsTheLatestArrivingCargoVehicle

	| distributionCenter maxDeliveryTime robot targetCity trailer arrivingFirstCargoVehicle arrivingLastCargoVehicle selectedCargoVehicle |
	
	targetCity := 'CABA'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	
	arrivingFirstCargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: targetCity leavingAt: (maxDeliveryTime previous: 10*second) maxWeight: 11 routingWith: self.
	arrivingLastCargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	distributionCenter := DistibutionCenter withAvailableCargoVehicles: {arrivingFirstCargoVehicle. arrivingLastCargoVehicle }.
		
	selectedCargoVehicle := distributionCenter 
		ship: robot to: targetCity at: maxDeliveryTime selectingWith: ArrivingLastSelectionCriteria new.
	
	self deny: robot hasTrailerAttached.
	self assert: (arrivingLastCargoVehicle willShip: trailer).
	self assert: arrivingLastCargoVehicle equals: selectedCargoVehicle
		! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/15/2020 18:43:38' prior: 50944716!
test08LighterSelectionCriteriaSelectsLigtherCargoVehicle

	| distributionCenter maxDeliveryTime robot targetCity trailer heavierCargoVehicle lighterCargoVehicle selectedCargoVehicle |
	
	targetCity := 'CABA'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	heavierCargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	lighterCargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	distributionCenter := DistibutionCenter withAvailableCargoVehicles: {heavierCargoVehicle. lighterCargoVehicle }.
	robot shipWith: heavierCargoVehicle.
	
	robot := self createRobot.
	trailer := robot trailer.
	selectedCargoVehicle := distributionCenter 
		ship: robot to: targetCity at: maxDeliveryTime selectingWith: LigtherCargoVehicleSelectionCriteria new.
	
	self deny: robot hasTrailerAttached.
	self assert: (lighterCargoVehicle willShip: trailer).
	self assert: lighterCargoVehicle equals: selectedCargoVehicle
		! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/15/2020 18:43:38' prior: 50944631!
test05CanNotShipRobotWhenCurrentVehicleWeightPlusRobotWeightIsGreaterThanMaxVehicleWeight

	| distributionCenter maxDeliveryTime robot targetCity cargoVehicle |
	
	targetCity := 'CABA'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.	
	cargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	distributionCenter := DistibutionCenter withAvailableCargoVehicles: {cargoVehicle}.
	distributionCenter ship: robot to: targetCity at: maxDeliveryTime selectingWith: ArrivingLastSelectionCriteria new.

	robot := self createRobot.
	
	self asssert: robot canNotBeShippTo: targetCity at: maxDeliveryTime in: distributionCenter with: cargoVehicle.
! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/15/2020 18:43:38' prior: 50944589!
test03CanNotShipRobotWhenThereIsNoCargoVehicleToTargetCity

	| distributionCenter maxDeliveryTime robot targetCity cargoVehicle |
	
	targetCity := 'CABA'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	cargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: 'Mendoza' leavingAt: maxDeliveryTime previous maxWeight: 10 routingWith: self.
	distributionCenter := DistibutionCenter withAvailableCargoVehicles: {cargoVehicle}.

	self asssert: robot canNotBeShippTo: targetCity at: maxDeliveryTime in: distributionCenter with: cargoVehicle.
		! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/15/2020 18:43:38' prior: 50944657!
test06CanNotShipRobotWhenArrivingTimeIsLaterThanMaxDeliveryTime

	| distributionCenter maxDeliveryTime robot targetCity cargoVehicle |
	
	targetCity := 'CABA'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	
	routingTimeCalculator := [ :fromCity :toCity :type | 2*second ].
	cargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	distributionCenter := DistibutionCenter withAvailableCargoVehicles: {cargoVehicle}.
		
	self asssert: robot canNotBeShippTo: targetCity at: maxDeliveryTime in: distributionCenter with: cargoVehicle.
! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/15/2020 18:43:38' prior: 50944610!
test04CanNotShipRobotWhenRobotWeightExceedsCargoVehicleWeight

	| distributionCenter maxDeliveryTime robot targetCity cargoVehicle |
	
	targetCity := 'CABA'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	
	cargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 0 routingWith: self.
	distributionCenter := DistibutionCenter withAvailableCargoVehicles: {cargoVehicle}.

	self asssert: robot canNotBeShippTo: targetCity at: maxDeliveryTime in: distributionCenter with: cargoVehicle.

		! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/15/2020 18:43:38' prior: 50944563!
test02RobotIsShippedWhenThereIsACargoVehicleToShipIt

	| distributionCenter maxDeliveryTime robot targetCity trailer cargoVehicle selectedCargoVehicle |
	
	targetCity := 'CABA'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	cargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 10 routingWith: self.
	distributionCenter := DistibutionCenter withAvailableCargoVehicles: {cargoVehicle}.

	selectedCargoVehicle := distributionCenter 
		ship: robot to: targetCity at: maxDeliveryTime selectingWith: ArrivingLastSelectionCriteria new.
	
	self deny: robot hasTrailerAttached.
	self assert: (selectedCargoVehicle willShip: trailer)
	! !

!methodRemoval: CargoVehicle class #ofType:to:leavingAt:maxWeight:routingWith: stamp: 'HG 12/15/2020 18:43:38'!
ofType: aType to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator  
	
	| arrivingTime |
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight !
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/15/2020 18:43:45' prior: 50946100!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator  
	
	| arrivingTime |
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight ! !
!CargoVehicle methodsFor: 'initialization' stamp: 'HG 12/15/2020 18:44:37'!
initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: anArrivingTime maxWeight: aMaxWeight 
	
	targetCity := aTargetCity.
	leavingTime := aLeavingTime.
	arrivingTime := anArrivingTime.
	maxWeight := aMaxWeight.
	trailers := OrderedCollection new.! !
!CargoVehicle class methodsFor: 'as yet unclassified' stamp: 'HG 12/15/2020 18:44:37' prior: 50946331!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator  
	
	| arrivingTime |
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: 'Cordoba' leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight ! !

!methodRemoval: CargoVehicle #initializeTo:leavingAt:arrivingAt:maxWeight: stamp: 'HG 12/15/2020 18:44:37'!
initializeTo: aTargetCity leavingAt: aLeavingTime arrivingAt: anArrivingTime maxWeight: aMaxWeight 
	
	targetCity := aTargetCity.
	leavingTime := aLeavingTime.
	arrivingTime := anArrivingTime.
	maxWeight := aMaxWeight.
	trailers := OrderedCollection new.!
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/15/2020 18:44:48' prior: 50946358!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator  
	
	| arrivingTime |
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight ! !

!classDefinition: #CargoVehicle category: #'ISW1-2020-1C-2doParcial' stamp: 'HG 12/15/2020 18:45:12'!
Object subclass: #CargoVehicle
	instanceVariableNames: 'targetCity leavingTime maxWeight trailers arrivingTime sourceCity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!
!CargoVehicle methodsFor: 'initialization' stamp: 'HG 12/15/2020 18:45:10' prior: 50946346!
initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: anArrivingTime maxWeight: aMaxWeight 
	
	sourceCity := aSourceCity.
	targetCity := aTargetCity.
	leavingTime := aLeavingTime.
	arrivingTime := anArrivingTime.
	maxWeight := aMaxWeight.
	trailers := OrderedCollection new.! !
!ShippingTest methodsFor: 'tests' stamp: 'HG 12/15/2020 18:45:56' prior: 50946074!
test09

	| maxDeliveryTime robot targetCity bikeVehicle sourceCity truckVehicle trailer |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	truckVehicle := CargoVehicle 
		ofType: #Truck from: sourceCity to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 10*second) maxWeight: 11  routingWith: self.
	truckVehicle carry: bikeVehicle. 
	robot shipWith: truckVehicle.

	self deny: robot hasTrailerAttached.
	self assert: (truckVehicle willShip: trailer)! !
!ShippingTest methodsFor: 'tests' stamp: 'HG 12/15/2020 18:45:58' prior: 50946424!
test09

	| maxDeliveryTime robot targetCity bikeVehicle sourceCity truckVehicle trailer |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	truckVehicle := CargoVehicle 
		ofType: #Truck from: sourceCity to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 10*second) maxWeight: 11  routingWith: self.
		
	truckVehicle carry: bikeVehicle. 
	robot shipWith: truckVehicle.

	self deny: robot hasTrailerAttached.
	self assert: (truckVehicle willShip: trailer)! !
!ShippingTest methodsFor: 'tests' stamp: 'HG 12/15/2020 19:07:50' prior: 50946450!
test09

	| maxDeliveryTime robot targetCity bikeVehicle sourceCity truckVehicle trailer |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	truckVehicle := CargoVehicle 
		ofType: #Truck from: sourceCity to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 10*second) maxWeight: 11  routingWith: self.
	
	robot shipWith: bikeVehicle.
	truckVehicle carry: bikeVehicle. 

	self deny: robot hasTrailerAttached.
	self assert: (truckVehicle willShip: trailer)! !

!testRun: #ShippingTest #test09 stamp: 'HG 12/15/2020 19:07:51'!
ERROR!
!CargoVehicle methodsFor: 'carrying' stamp: 'HG 12/15/2020 19:08:13'!
carry: aCargoVehicle 
	self shouldBeImplemented.! !

!classDefinition: #CargoVehicle category: #'ISW1-2020-1C-2doParcial' stamp: 'HG 12/15/2020 19:08:41'!
Object subclass: #CargoVehicle
	instanceVariableNames: 'targetCity leavingTime maxWeight trailers arrivingTime sourceCity vehiclesCarried'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!
!CargoVehicle methodsFor: 'carrying' stamp: 'HG 12/15/2020 19:08:39' prior: 50946503!
carry: aCargoVehicle 
	vehiclesCarried add: aCargoVehicle. ! !

!testRun: #ShippingTest #test09 stamp: 'HG 12/15/2020 19:08:44'!
ERROR!

!testRun: #ShippingTest #test09 stamp: 'HG 12/15/2020 19:10:33'!
ERROR!
!CargoVehicle methodsFor: 'initialization' stamp: 'HG 12/15/2020 19:10:52' prior: 50946411!
initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: anArrivingTime maxWeight: aMaxWeight 
	
	sourceCity := aSourceCity.
	targetCity := aTargetCity.
	leavingTime := aLeavingTime.
	arrivingTime := anArrivingTime.
	maxWeight := aMaxWeight.
	trailers := OrderedCollection new.
	vehiclesCarried := OrderedCollection new.! !

!testRun: #ShippingTest #test01CanNotShipRobotWhenThereIsNoCargoVehicleAvailable stamp: 'HG 12/15/2020 19:10:53'!
PASSED!

!testRun: #ShippingTest #test02RobotIsShippedWhenThereIsACargoVehicleToShipIt stamp: 'HG 12/15/2020 19:10:53'!
PASSED!

!testRun: #ShippingTest #test03CanNotShipRobotWhenThereIsNoCargoVehicleToTargetCity stamp: 'HG 12/15/2020 19:10:53'!
PASSED!

!testRun: #ShippingTest #test04CanNotShipRobotWhenRobotWeightExceedsCargoVehicleWeight stamp: 'HG 12/15/2020 19:10:53'!
PASSED!

!testRun: #ShippingTest #test05CanNotShipRobotWhenCurrentVehicleWeightPlusRobotWeightIsGreaterThanMaxVehicleWeight stamp: 'HG 12/15/2020 19:10:53'!
PASSED!

!testRun: #ShippingTest #test06CanNotShipRobotWhenArrivingTimeIsLaterThanMaxDeliveryTime stamp: 'HG 12/15/2020 19:10:53'!
PASSED!

!testRun: #ShippingTest #test07ArrivingLastSelectsTheLatestArrivingCargoVehicle stamp: 'HG 12/15/2020 19:10:53'!
PASSED!

!testRun: #ShippingTest #test08LighterSelectionCriteriaSelectsLigtherCargoVehicle stamp: 'HG 12/15/2020 19:10:53'!
PASSED!

!testRun: #ShippingTest #test09 stamp: 'HG 12/15/2020 19:10:53'!
FAILURE!

!testRun: #ShippingTest #test09 stamp: 'HG 12/15/2020 19:10:53'!
FAILURE!
!CargoVehicle methodsFor: 'testing' stamp: 'HG 12/15/2020 19:44:06' prior: 50944992!
willShip: aTrailer 
	
	^trailers includes: aTrailer or:
		(vehiclesCarried anySatisfy: [:aVehicle | aVehicle willShip: aTrailer])! !
!CargoVehicle methodsFor: 'testing' stamp: 'HG 12/15/2020 19:44:16' prior: 50946579!
willShip: aTrailer 
	
	^(trailers includes: aTrailer) or:
		(vehiclesCarried anySatisfy: [:aVehicle | aVehicle willShip: aTrailer])! !
!CargoVehicle methodsFor: 'testing' stamp: 'HG 12/15/2020 19:44:22' prior: 50946586!
willShip: aTrailer 
	
	^(trailers includes: aTrailer) 
		or: (vehiclesCarried anySatisfy: [:aVehicle | aVehicle willShip: aTrailer])! !
!CargoVehicle methodsFor: 'testing' stamp: 'HG 12/15/2020 19:44:33' prior: 50946593!
willShip: aTrailer 
	
	^(trailers includes: aTrailer)
		or: (vehiclesCarried anySatisfy: [:aVehicle | aVehicle willShip: aTrailer]).! !

!testRun: #ShippingTest #test01CanNotShipRobotWhenThereIsNoCargoVehicleAvailable stamp: 'HG 12/15/2020 19:44:33'!
PASSED!

!testRun: #ShippingTest #test02RobotIsShippedWhenThereIsACargoVehicleToShipIt stamp: 'HG 12/15/2020 19:44:33'!
PASSED!

!testRun: #ShippingTest #test03CanNotShipRobotWhenThereIsNoCargoVehicleToTargetCity stamp: 'HG 12/15/2020 19:44:33'!
PASSED!

!testRun: #ShippingTest #test04CanNotShipRobotWhenRobotWeightExceedsCargoVehicleWeight stamp: 'HG 12/15/2020 19:44:33'!
PASSED!

!testRun: #ShippingTest #test05CanNotShipRobotWhenCurrentVehicleWeightPlusRobotWeightIsGreaterThanMaxVehicleWeight stamp: 'HG 12/15/2020 19:44:33'!
PASSED!

!testRun: #ShippingTest #test06CanNotShipRobotWhenArrivingTimeIsLaterThanMaxDeliveryTime stamp: 'HG 12/15/2020 19:44:33'!
PASSED!

!testRun: #ShippingTest #test07ArrivingLastSelectsTheLatestArrivingCargoVehicle stamp: 'HG 12/15/2020 19:44:33'!
PASSED!

!testRun: #ShippingTest #test08LighterSelectionCriteriaSelectsLigtherCargoVehicle stamp: 'HG 12/15/2020 19:44:33'!
PASSED!

!testRun: #ShippingTest #test09 stamp: 'HG 12/15/2020 19:44:33'!
PASSED!
!ShippingTest methodsFor: 'tests' stamp: 'HG 12/15/2020 19:52:15'!
test10

	| maxDeliveryTime robot targetCity bikeVehicle sourceCity truckVehicle trailer |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	truckVehicle := CargoVehicle 
		ofType: #Truck from: sourceCity to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 10*second) maxWeight: 11  routingWith: self.
	
	robot shipWith: bikeVehicle.
	truckVehicle carry: bikeVehicle. 

	self deny: robot hasTrailerAttached.
	self assert: (truckVehicle willShip: trailer)! !
!ShippingTest methodsFor: 'tests' stamp: 'HG 12/15/2020 19:53:24' prior: 50946641!
test10

	| maxDeliveryTime robot targetCity bikeVehicle sourceCity dronVehicle trailer truckVehicle |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 10*second) maxWeight: 11  routingWith: self.
	dronVehicle := CargoVehicle 
		ofType: #Dron from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	
	robot shipWith: bikeVehicle.
	bikeVehicle carry: dronVehicle. 

	self deny: robot hasTrailerAttached.
	self assert: (bikeVehicle willShip: trailer)! !
!ShippingTest methodsFor: 'tests' stamp: 'HG 12/15/2020 19:53:27' prior: 50946667!
test10

	| maxDeliveryTime robot targetCity bikeVehicle sourceCity dronVehicle trailer |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 10*second) maxWeight: 11  routingWith: self.
	dronVehicle := CargoVehicle 
		ofType: #Dron from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	
	robot shipWith: dronVehicle.
	bikeVehicle carry: dronVehicle. 

	self deny: robot hasTrailerAttached.
	self assert: (bikeVehicle willShip: trailer)! !
!ShippingTest methodsFor: 'tests' stamp: 'HG 12/15/2020 19:53:42' prior: 50946476!
test09

	| maxDeliveryTime robot targetCity bikeVehicle sourceCity truckVehicle trailer |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	truckVehicle := CargoVehicle 
		ofType: #Truck from: sourceCity to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: targetCity to: sourceCity leavingAt: (maxDeliveryTime previous: 10*second) maxWeight: 11  routingWith: self.
	
	robot shipWith: bikeVehicle.
	truckVehicle carry: bikeVehicle. 

	self deny: robot hasTrailerAttached.
	self assert: (truckVehicle willShip: trailer)! !

!testRun: #ShippingTest #test09 stamp: 'HG 12/15/2020 19:54:05'!
PASSED!

!testRun: #ShippingTest #test01CanNotShipRobotWhenThereIsNoCargoVehicleAvailable stamp: 'HG 12/15/2020 19:54:05'!
PASSED!

!testRun: #ShippingTest #test02RobotIsShippedWhenThereIsACargoVehicleToShipIt stamp: 'HG 12/15/2020 19:54:05'!
PASSED!

!testRun: #ShippingTest #test03CanNotShipRobotWhenThereIsNoCargoVehicleToTargetCity stamp: 'HG 12/15/2020 19:54:05'!
PASSED!

!testRun: #ShippingTest #test04CanNotShipRobotWhenRobotWeightExceedsCargoVehicleWeight stamp: 'HG 12/15/2020 19:54:05'!
PASSED!

!testRun: #ShippingTest #test05CanNotShipRobotWhenCurrentVehicleWeightPlusRobotWeightIsGreaterThanMaxVehicleWeight stamp: 'HG 12/15/2020 19:54:05'!
PASSED!

!testRun: #ShippingTest #test06CanNotShipRobotWhenArrivingTimeIsLaterThanMaxDeliveryTime stamp: 'HG 12/15/2020 19:54:05'!
PASSED!

!testRun: #ShippingTest #test07ArrivingLastSelectsTheLatestArrivingCargoVehicle stamp: 'HG 12/15/2020 19:54:05'!
PASSED!

!testRun: #ShippingTest #test08LighterSelectionCriteriaSelectsLigtherCargoVehicle stamp: 'HG 12/15/2020 19:54:05'!
PASSED!

!testRun: #ShippingTest #test09 stamp: 'HG 12/15/2020 19:54:05'!
PASSED!

!testRun: #ShippingTest #test10 stamp: 'HG 12/15/2020 19:54:05'!
PASSED!
!ShippingTest methodsFor: 'tests' stamp: 'HG 12/15/2020 19:54:25'!
test11

	| maxDeliveryTime robot targetCity bikeVehicle sourceCity dronVehicle trailer |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 10*second) maxWeight: 11  routingWith: self.
	dronVehicle := CargoVehicle 
		ofType: #Dron from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	
	robot shipWith: dronVehicle.
	bikeVehicle carry: dronVehicle. 

	self deny: robot hasTrailerAttached.
	self assert: (bikeVehicle willShip: trailer)! !
!ShippingTest methodsFor: 'tests' stamp: 'HG 12/15/2020 19:56:11' prior: 50946782!
test11

	| maxDeliveryTime robot targetCity bikeVehicle sourceCity dronVehicle trailer |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 10*second) maxWeight: 11  routingWith: self.
	dronVehicle := CargoVehicle 
		ofType: #Dron from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self.
	
	robot shipWith: bikeVehicle.
	dronVehicle carry: bikeVehicle. 

	self deny: robot hasTrailerAttached.
	self deny: (dronVehicle willShip: trailer)! !

!testRun: #ShippingTest #test11 stamp: 'HG 12/15/2020 19:56:12'!
FAILURE!
!CargoVehicle methodsFor: 'carrying' stamp: 'HG 12/15/2020 19:57:22' prior: 50946518!
carry: aCargoVehicle 
	
	vehiclesCarried add: aCargoVehicle. ! !

TestCase subclass: #CargoVehicleTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classDefinition: #CargoVehicleTest category: #'ISW1-2020-1C-2doParcial' stamp: 'HG 12/15/2020 22:51:18'!
TestCase subclass: #CargoVehicleTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!
!CargoVehicleTest methodsFor: 'nil' stamp: 'HG 12/15/2020 22:51:22'!
test01! !
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 14:25:47' prior: 50946852!
test01
! !
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 15:54:59' prior: 50946856!
test01

	| maxDeliveryTime  carriedVehicle sourceCity targetCity |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	
	carriedVehicle := CargoVehicle 
		ofType: #Truck from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
		
	self should: [ CargoVehicle ofType: #Truck from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 1*hour) maxWeight: 11 routingWith: self carrying: {carriedVehicle}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CargoVehicle CanNotTransportVehicleErrorDescription.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 15:55:04'!
ERROR!
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 15:55:45'!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight ! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 15:55:45' prior: 50946288!
test02RobotIsShippedWhenThereIsACargoVehicleToShipIt

	| distributionCenter maxDeliveryTime robot targetCity trailer cargoVehicle selectedCargoVehicle |
	
	targetCity := 'CABA'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	cargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 10 routingWith: self carrying: {}.
	distributionCenter := DistibutionCenter withAvailableCargoVehicles: {cargoVehicle}.

	selectedCargoVehicle := distributionCenter 
		ship: robot to: targetCity at: maxDeliveryTime selectingWith: ArrivingLastSelectionCriteria new.
	
	self deny: robot hasTrailerAttached.
	self assert: (selectedCargoVehicle willShip: trailer)
	! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 15:55:45' prior: 50946242!
test06CanNotShipRobotWhenArrivingTimeIsLaterThanMaxDeliveryTime

	| distributionCenter maxDeliveryTime robot targetCity cargoVehicle |
	
	targetCity := 'CABA'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	
	routingTimeCalculator := [ :fromCity :toCity :type | 2*second ].
	cargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
	distributionCenter := DistibutionCenter withAvailableCargoVehicles: {cargoVehicle}.
		
	self asssert: robot canNotBeShippTo: targetCity at: maxDeliveryTime in: distributionCenter with: cargoVehicle.
! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 15:55:45' prior: 50946266!
test04CanNotShipRobotWhenRobotWeightExceedsCargoVehicleWeight

	| distributionCenter maxDeliveryTime robot targetCity cargoVehicle |
	
	targetCity := 'CABA'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	
	cargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 0 routingWith: self carrying: {}.
	distributionCenter := DistibutionCenter withAvailableCargoVehicles: {cargoVehicle}.

	self asssert: robot canNotBeShippTo: targetCity at: maxDeliveryTime in: distributionCenter with: cargoVehicle.

		! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 15:55:45' prior: 50946718!
test09

	| maxDeliveryTime robot targetCity bikeVehicle sourceCity truckVehicle trailer |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	truckVehicle := CargoVehicle 
		ofType: #Truck from: sourceCity to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: targetCity to: sourceCity leavingAt: (maxDeliveryTime previous: 10*second) maxWeight: 11  routingWith: self carrying: {}.
	
	robot shipWith: bikeVehicle.
	truckVehicle carry: bikeVehicle. 

	self deny: robot hasTrailerAttached.
	self assert: (truckVehicle willShip: trailer)! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 15:55:45' prior: 50946192!
test05CanNotShipRobotWhenCurrentVehicleWeightPlusRobotWeightIsGreaterThanMaxVehicleWeight

	| distributionCenter maxDeliveryTime robot targetCity cargoVehicle |
	
	targetCity := 'CABA'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.	
	cargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
	distributionCenter := DistibutionCenter withAvailableCargoVehicles: {cargoVehicle}.
	distributionCenter ship: robot to: targetCity at: maxDeliveryTime selectingWith: ArrivingLastSelectionCriteria new.

	robot := self createRobot.
	
	self asssert: robot canNotBeShippTo: targetCity at: maxDeliveryTime in: distributionCenter with: cargoVehicle.
! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 15:55:45' prior: 50946807!
test11

	| maxDeliveryTime robot targetCity bikeVehicle sourceCity dronVehicle trailer |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 10*second) maxWeight: 11  routingWith: self carrying: {}.
	dronVehicle := CargoVehicle 
		ofType: #Dron from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
	
	robot shipWith: bikeVehicle.
	dronVehicle carry: bikeVehicle. 

	self deny: robot hasTrailerAttached.
	self deny: (dronVehicle willShip: trailer)! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 15:55:45' prior: 50946153!
test08LighterSelectionCriteriaSelectsLigtherCargoVehicle

	| distributionCenter maxDeliveryTime robot targetCity trailer heavierCargoVehicle lighterCargoVehicle selectedCargoVehicle |
	
	targetCity := 'CABA'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	heavierCargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
	lighterCargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
	distributionCenter := DistibutionCenter withAvailableCargoVehicles: {heavierCargoVehicle. lighterCargoVehicle }.
	robot shipWith: heavierCargoVehicle.
	
	robot := self createRobot.
	trailer := robot trailer.
	selectedCargoVehicle := distributionCenter 
		ship: robot to: targetCity at: maxDeliveryTime selectingWith: LigtherCargoVehicleSelectionCriteria new.
	
	self deny: robot hasTrailerAttached.
	self assert: (lighterCargoVehicle willShip: trailer).
	self assert: lighterCargoVehicle equals: selectedCargoVehicle
		! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 15:55:45' prior: 50946115!
test07ArrivingLastSelectsTheLatestArrivingCargoVehicle

	| distributionCenter maxDeliveryTime robot targetCity trailer arrivingFirstCargoVehicle arrivingLastCargoVehicle selectedCargoVehicle |
	
	targetCity := 'CABA'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	
	arrivingFirstCargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: targetCity leavingAt: (maxDeliveryTime previous: 10*second) maxWeight: 11 routingWith: self carrying: {}.
	arrivingLastCargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: targetCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
	distributionCenter := DistibutionCenter withAvailableCargoVehicles: {arrivingFirstCargoVehicle. arrivingLastCargoVehicle }.
		
	selectedCargoVehicle := distributionCenter 
		ship: robot to: targetCity at: maxDeliveryTime selectingWith: ArrivingLastSelectionCriteria new.
	
	self deny: robot hasTrailerAttached.
	self assert: (arrivingLastCargoVehicle willShip: trailer).
	self assert: arrivingLastCargoVehicle equals: selectedCargoVehicle
		! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 15:55:46' prior: 50946220!
test03CanNotShipRobotWhenThereIsNoCargoVehicleToTargetCity

	| distributionCenter maxDeliveryTime robot targetCity cargoVehicle |
	
	targetCity := 'CABA'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	cargoVehicle := CargoVehicle 
		ofType: #Truck from: 'Cordoba' to: 'Mendoza' leavingAt: maxDeliveryTime previous maxWeight: 10 routingWith: self carrying: {}.
	distributionCenter := DistibutionCenter withAvailableCargoVehicles: {cargoVehicle}.

	self asssert: robot canNotBeShippTo: targetCity at: maxDeliveryTime in: distributionCenter with: cargoVehicle.
		! !
!ShippingTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 15:55:46' prior: 50946693!
test10

	| maxDeliveryTime robot targetCity bikeVehicle sourceCity dronVehicle trailer |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	robot := self createRobot.
	trailer := robot trailer.
	
	bikeVehicle := CargoVehicle 
		ofType: #Bike from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 10*second) maxWeight: 11  routingWith: self carrying: {}.
	dronVehicle := CargoVehicle 
		ofType: #Dron from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
	
	robot shipWith: dronVehicle.
	bikeVehicle carry: dronVehicle. 

	self deny: robot hasTrailerAttached.
	self assert: (bikeVehicle willShip: trailer)! !

!methodRemoval: CargoVehicle class #ofType:from:to:leavingAt:maxWeight:routingWith: stamp: 'HG 12/16/2020 15:55:46'!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator  
	
	| arrivingTime |
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight !
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 15:56:00' prior: 50946886!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !
!CargoVehicle methodsFor: 'initialization' stamp: 'HG 12/16/2020 15:56:23'!
initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: anArrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection  
	
	sourceCity := aSourceCity.
	targetCity := aTargetCity.
	leavingTime := aLeavingTime.
	arrivingTime := anArrivingTime.
	maxWeight := aMaxWeight.
	trailers := OrderedCollection new.
	vehiclesCarried := OrderedCollection new.! !

!methodRemoval: CargoVehicle #initializeTo:from:leavingAt:arrivingAt:maxWeight: stamp: 'HG 12/16/2020 15:56:23'!
initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: anArrivingTime maxWeight: aMaxWeight 
	
	sourceCity := aSourceCity.
	targetCity := aTargetCity.
	leavingTime := aLeavingTime.
	arrivingTime := anArrivingTime.
	maxWeight := aMaxWeight.
	trailers := OrderedCollection new.
	vehiclesCarried := OrderedCollection new.!
!CargoVehicle methodsFor: 'initialization' stamp: 'HG 12/16/2020 15:56:34' prior: 50947223!
initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: anArrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection  
	
	sourceCity := aSourceCity.
	targetCity := aTargetCity.
	leavingTime := aLeavingTime.
	arrivingTime := anArrivingTime.
	maxWeight := aMaxWeight.
	trailers := OrderedCollection new.
	vehiclesCarried := aCargoVehicleCollection asOrderedCollection.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 15:56:36'!
ERROR!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 15:56:36'!
ERROR!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 15:56:47'!
ERROR!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 15:57:00'!
ERROR!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 16:01:51'!
ERROR!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 16:07:02'!
ERROR!
!CargoVehicleTest methodsFor: 'timing' stamp: 'HG 12/16/2020 16:07:19'!
from: aString to: aString2 forCargoVehicleType: aSymbol 
	self shouldBeImplemented.! !
!CargoVehicleTest methodsFor: 'timing' stamp: 'HG 12/16/2020 16:07:40' prior: 50947283!
from: aSourceCity to: aTargetCity forCargoVehicleType: aCargoVehicleType 
	^1*minute.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 16:07:42'!
ERROR!
!CargoVehicle class methodsFor: 'error messages' stamp: 'HG 12/16/2020 16:07:57'!
CanNotTransportVehicleErrorDescription
	self shouldBeImplemented.! !
!CargoVehicle class methodsFor: 'error messages' stamp: 'HG 12/16/2020 16:08:05' prior: 50947297!
CanNotTransportVehicleErrorDescription
	^'Vehicle Error'.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 16:08:06'!
FAILURE!
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 16:13:12' prior: 50947205!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	(aType=#Truck) 
		ifTrue: [^aCargoVehicleCollection allSatisfy:
				 [:aCargoVehicle | aCargoVehicle = #Truck not ]
				].
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 16:13:56' prior: 50947311!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	(aType=#Truck) 
		ifTrue: [^aCargoVehicleCollection noneSatisfy:
				 [:aCargoVehicle | aCargoVehicle = #Truck ]
				].
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 16:15:06' prior: 50947333!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	(aCargoVehicleCollection anySatisfy: [:aCargoVehicle | aCargoVehicle = #Truck ])
					ifTrue:[self error: self class CanNotTransportVehicleErrorDescription].
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 16:15:06'!
FAILURE!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 16:15:06'!
FAILURE!
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 16:15:40' prior: 50946860!
test01

	| maxDeliveryTime  carriedVehicle sourceCity targetCity |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	
	carriedVehicle := CargoVehicle 
		ofType: #Truck from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
		
	self should: [ CargoVehicle ofType: #Truck from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 1*hour) maxWeight: 11 routingWith: self carrying: {carriedVehicle}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CargoVehicle CanNotTransportVehicleErrorDescription.! !
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 16:16:39' prior: 50947355!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	(aCargoVehicleCollection anySatisfy: [:aCargoVehicle | aCargoVehicle type = #Truck ])
					ifTrue:[self error: self class CanNotTransportVehicleErrorDescription].
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 16:16:41'!
ERROR!
!CargoVehicle methodsFor: 'accessing' stamp: 'HG 12/16/2020 16:16:47'!
type
	self shouldBeImplemented.! !

!classDefinition: #CargoVehicle category: #'ISW1-2020-1C-2doParcial' stamp: 'HG 12/16/2020 16:16:54'!
Object subclass: #CargoVehicle
	instanceVariableNames: 'targetCity leavingTime maxWeight trailers arrivingTime sourceCity vehiclesCarried type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!
!CargoVehicle methodsFor: 'accessing' stamp: 'HG 12/16/2020 16:16:53' prior: 50947432!
type
	^type.! !
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 16:56:30' prior: 50947407!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	aCargoVehicleCollection do: [:aCarriedVehicle | 
			(aType=#Truck and: (aCarriedVehicle type=#Truck)) 
			ifTrue:[self error: self class CanNotTransportVehicleErrorDescription]].
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 16:56:31'!
FAILURE!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 16:56:31'!
FAILURE!
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 16:56:39' prior: 50947451!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	aCargoVehicleCollection do: [:aCarriedVehicle | 
			(aType=#Truck and: (aCarriedVehicle type=#Truck)) 
			ifTrue: [self error: self class CanNotTransportVehicleErrorDescription]].
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 16:58:06' prior: 50947480!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	aCargoVehicleCollection do: [:aCarriedVehicle | 
			(aType=#Truck and: (aCarriedVehicle type=#Truck)) 
			ifTrue: [self error: self class CanNotTransportVehicleErrorDescription]].
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !
!CargoVehicle methodsFor: 'initialization' stamp: 'HG 12/16/2020 16:59:11'!
initializeTo: aTargetCity from: aSourceCity ofType: aType leavingAt: aLeavingTime arrivingAt: anArrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection  
	
	sourceCity := aSourceCity.
	targetCity := aTargetCity.
	leavingTime := aLeavingTime.
	arrivingTime := anArrivingTime.
	maxWeight := aMaxWeight.
	trailers := OrderedCollection new.
	vehiclesCarried := aCargoVehicleCollection asOrderedCollection.! !
!CargoVehicle class methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 16:59:11' prior: 50947504!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	aCargoVehicleCollection do: [:aCarriedVehicle | 
			(aType=#Truck and: (aCarriedVehicle type=#Truck)) 
			ifTrue: [self error: self class CanNotTransportVehicleErrorDescription]].
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity ofType: #Truck leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !

!methodRemoval: CargoVehicle #initializeTo:from:leavingAt:arrivingAt:maxWeight:carrying: stamp: 'HG 12/16/2020 16:59:11'!
initializeTo: aTargetCity from: aSourceCity leavingAt: aLeavingTime arrivingAt: anArrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection  
	
	sourceCity := aSourceCity.
	targetCity := aTargetCity.
	leavingTime := aLeavingTime.
	arrivingTime := anArrivingTime.
	maxWeight := aMaxWeight.
	trailers := OrderedCollection new.
	vehiclesCarried := aCargoVehicleCollection asOrderedCollection.!
!CargoVehicle methodsFor: 'initialization' stamp: 'HG 12/16/2020 16:59:18' prior: 50947527!
initializeTo: aTargetCity from: aSourceCity ofType: aType leavingAt: aLeavingTime arrivingAt: anArrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection  
	
	sourceCity := aSourceCity.
	targetCity := aTargetCity.
	leavingTime := aLeavingTime.
	arrivingTime := anArrivingTime.
	maxWeight := aMaxWeight.
	trailers := OrderedCollection new.
	vehiclesCarried := aCargoVehicleCollection asOrderedCollection.
	type := aType.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 16:59:28'!
ERROR!
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 16:59:54' prior: 50947544!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	aCargoVehicleCollection do: [:aCarriedVehicle | 
			(aType=#Truck and: (aCarriedVehicle type=#Truck)) 
			ifTrue: [self error: self CanNotTransportVehicleErrorDescription]].
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity ofType: #Truck leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 16:59:55'!
PASSED!
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 17:03:16'!
test02

	| maxDeliveryTime  carriedVehicle sourceCity targetCity |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	
	carriedVehicle := CargoVehicle 
		ofType: #Truck from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
		
	self should: [ CargoVehicle ofType: #Truck from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 1*hour) maxWeight: 11 routingWith: self carrying: {carriedVehicle}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CargoVehicle CanNotTransportVehicleErrorDescription.! !
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 17:03:48' prior: 50947631!
test02

	| maxDeliveryTime  carriedVehicle sourceCity targetCity |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	
	carriedVehicle := CargoVehicle 
		ofType: #Truck from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
		
	self should: [ CargoVehicle ofType: #Motorcycle from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 1*hour) maxWeight: 11 routingWith: self carrying: {carriedVehicle}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CargoVehicle CanNotTransportVehicleErrorDescription.! !

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:03:49'!
FAILURE!
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 17:04:43' prior: 50947605!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	aCargoVehicleCollection do: [:aCarriedVehicle | 
			((aType=#Truck and: (aCarriedVehicle type=#Truck)) 
			or: (aType=#Motorcycle and: (aCarriedVehicle type=#Truck))
			)
			ifTrue: [self error: self CanNotTransportVehicleErrorDescription]].
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity ofType: #Truck leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:04:45'!
PASSED!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:04:46'!
PASSED!
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 17:05:46'!
test03

	| maxDeliveryTime  carriedVehicle sourceCity targetCity |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	
	carriedVehicle := CargoVehicle 
		ofType: #Truck from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
		
	self should: [ CargoVehicle ofType: #Motorcycle from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 1*hour) maxWeight: 11 routingWith: self carrying: {carriedVehicle}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CargoVehicle CanNotTransportVehicleErrorDescription.! !
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 17:06:52' prior: 50947712!
test03

	| maxDeliveryTime  carriedVehicle sourceCity targetCity |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	
	carriedVehicle := CargoVehicle 
		ofType: #Truck from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
		
	self should: [ CargoVehicle ofType: #Drone from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 1*hour) maxWeight: 11 routingWith: self carrying: {carriedVehicle}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CargoVehicle CanNotTransportVehicleErrorDescription.! !

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:06:54'!
FAILURE!
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 17:07:11' prior: 50947681!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	aCargoVehicleCollection do: [:aCarriedVehicle | 
			((aType=#Truck and: (aCarriedVehicle type=#Truck)) 
			or: (aType=#Motorcycle and: (aCarriedVehicle type=#Truck))
			or: (aType=#Drone and: (aCarriedVehicle type=#Truck))
			)
			ifTrue: [self error: self CanNotTransportVehicleErrorDescription]].
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity ofType: #Truck leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:07:12'!
PASSED!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:07:12'!
PASSED!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:07:12'!
PASSED!
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 17:07:45'!
test04

	| maxDeliveryTime  carriedVehicle sourceCity targetCity |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	
	carriedVehicle := CargoVehicle 
		ofType: #Motorcycle from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
		
	self should: [ CargoVehicle ofType: #Motorcycle from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 1*hour) maxWeight: 11 routingWith: self carrying: {carriedVehicle}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CargoVehicle CanNotTransportVehicleErrorDescription.! !

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:07:46'!
PASSED!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:07:46'!
PASSED!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:07:46'!
PASSED!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:07:46'!
PASSED!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:07:46'!
PASSED!
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 17:10:12' prior: 50947762!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	aCargoVehicleCollection do: [:aCarriedVehicle | 
			((aType=#Truck and: (aCarriedVehicle type=#Truck)) 
			or: (aType=#Motorcycle and: (aCarriedVehicle type=#Truck))
			or: (aType=#Drone and: (aCarriedVehicle type=#Truck))
			)
			ifTrue: [self error: self CanNotTransportVehicleErrorDescription]].
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity ofType: aType leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:10:13'!
PASSED!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:10:13'!
PASSED!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:10:13'!
PASSED!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:10:13'!
FAILURE!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:10:13'!
FAILURE!
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 17:10:38' prior: 50947833!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	aCargoVehicleCollection do: [:aCarriedVehicle | 
			(
			(aType=aCarriedVehicle type) 
			or: (aType=#Motorcycle and: (aCarriedVehicle type=#Truck))
			or: (aType=#Drone and: (aCarriedVehicle type=#Truck))
			)
			ifTrue: [self error: self CanNotTransportVehicleErrorDescription]].
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity ofType: aType leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:10:39'!
PASSED!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:10:39'!
PASSED!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:10:39'!
PASSED!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:10:39'!
PASSED!
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 17:17:17'!
test05

	| maxDeliveryTime  carriedVehicle sourceCity targetCity |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	
	carriedVehicle := CargoVehicle 
		ofType: #Motorcycle from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
		
	self should: [ CargoVehicle ofType: #Drone from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 1*hour) maxWeight: 11 routingWith: self carrying: {carriedVehicle}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CargoVehicle CanNotTransportVehicleErrorDescription.! !

!testRun: #CargoVehicleTest #test05 stamp: 'HG 12/16/2020 17:17:18'!
FAILURE!
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 17:17:37' prior: 50947873!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	aCargoVehicleCollection do: [:aCarriedVehicle | 
			(
			(aType=aCarriedVehicle type) 
			or: (aType=#Motorcycle and: (aCarriedVehicle type=#Truck))
			or: (aType=#Drone and: (aCarriedVehicle type=#Truck))
			or: (aType=#Drone and: (aCarriedVehicle type=#Motorcycle))
			)
			ifTrue: [self error: self CanNotTransportVehicleErrorDescription]].
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity ofType: aType leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:17:38'!
PASSED!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:17:38'!
PASSED!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:17:38'!
PASSED!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:17:38'!
PASSED!

!testRun: #CargoVehicleTest #test05 stamp: 'HG 12/16/2020 17:17:38'!
PASSED!

!testRun: #CargoVehicleTest #test05 stamp: 'HG 12/16/2020 17:19:32'!
PASSED!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:19:32'!
PASSED!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:19:32'!
PASSED!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:19:32'!
PASSED!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:19:32'!
PASSED!

!testRun: #CargoVehicleTest #test05 stamp: 'HG 12/16/2020 17:19:33'!
PASSED!

!testRun: #CargoVehicleTest #test05 stamp: 'HG 12/16/2020 17:19:53'!
PASSED!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:19:53'!
PASSED!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:19:53'!
PASSED!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:19:53'!
PASSED!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:19:53'!
PASSED!

!testRun: #CargoVehicleTest #test05 stamp: 'HG 12/16/2020 17:19:53'!
PASSED!
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 17:19:57'!
test06

	| maxDeliveryTime  carriedVehicle sourceCity targetCity |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	
	carriedVehicle := CargoVehicle 
		ofType: #Motorcycle from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
		
	self should: [ CargoVehicle ofType: #Drone from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 1*hour) maxWeight: 11 routingWith: self carrying: {carriedVehicle}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CargoVehicle CanNotTransportVehicleErrorDescription.! !
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 17:20:05' prior: 50948007!
test06

	| maxDeliveryTime  carriedVehicle sourceCity targetCity |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	
	carriedVehicle := CargoVehicle 
		ofType: #Drone from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
		
	self should: [ CargoVehicle ofType: #Drone from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 1*hour) maxWeight: 11 routingWith: self carrying: {carriedVehicle}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CargoVehicle CanNotTransportVehicleErrorDescription.! !

!testRun: #CargoVehicleTest #test06 stamp: 'HG 12/16/2020 17:20:06'!
PASSED!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:20:06'!
PASSED!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:20:06'!
PASSED!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:20:06'!
PASSED!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:20:06'!
PASSED!

!testRun: #CargoVehicleTest #test05 stamp: 'HG 12/16/2020 17:20:06'!
PASSED!

!testRun: #CargoVehicleTest #test06 stamp: 'HG 12/16/2020 17:20:06'!
PASSED!
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 17:21:14' prior: 50947383!
test01
	
	self assertType: #Truck canNotCarryType: #Truck.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:21:15'!
ERROR!
!CargoVehicleTest methodsFor: 'assertions' stamp: 'HG 12/16/2020 17:21:22'!
assertType: aSymbol canNotCarryType: aSymbol2 
	self shouldBeImplemented.! !
!CargoVehicleTest methodsFor: 'assertions' stamp: 'HG 12/16/2020 17:21:53' prior: 50948079!
assertType: aConveyorType canNotCarryType: aCarriedType 
	
	| maxDeliveryTime  carriedVehicle sourceCity targetCity |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	
	carriedVehicle := CargoVehicle 
		ofType: aCarriedType from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
		
	self should: [ CargoVehicle ofType: aConveyorType from: sourceCity to: targetCity leavingAt: (maxDeliveryTime previous: 1*hour) maxWeight: 11 routingWith: self carrying: {carriedVehicle}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CargoVehicle CanNotTransportVehicleErrorDescription.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:21:55'!
PASSED!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:21:55'!
PASSED!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:21:55'!
PASSED!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:21:55'!
PASSED!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:21:55'!
PASSED!

!testRun: #CargoVehicleTest #test05 stamp: 'HG 12/16/2020 17:21:55'!
PASSED!

!testRun: #CargoVehicleTest #test06 stamp: 'HG 12/16/2020 17:21:55'!
PASSED!
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 17:22:21' prior: 50947655!
test02
	
	self assertType: #Motorcycle canNotCarryType: #Truck.
! !

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:22:22'!
PASSED!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:22:22'!
PASSED!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:22:22'!
PASSED!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:22:22'!
PASSED!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:22:22'!
PASSED!

!testRun: #CargoVehicleTest #test05 stamp: 'HG 12/16/2020 17:22:22'!
PASSED!

!testRun: #CargoVehicleTest #test06 stamp: 'HG 12/16/2020 17:22:22'!
PASSED!
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 17:32:01' prior: 50947736!
test03
	
	self assertType: #Drone canNotCarryType: #Truck.
! !

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:32:01'!
PASSED!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:32:01'!
PASSED!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:32:01'!
PASSED!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:32:01'!
PASSED!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:32:01'!
PASSED!

!testRun: #CargoVehicleTest #test05 stamp: 'HG 12/16/2020 17:32:01'!
PASSED!

!testRun: #CargoVehicleTest #test06 stamp: 'HG 12/16/2020 17:32:01'!
PASSED!
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 17:32:19' prior: 50947797!
test04
	self assertType: #Motorcycle canNotCarryType: #Motorcycle.! !

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:32:20'!
PASSED!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:32:20'!
PASSED!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:32:20'!
PASSED!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:32:20'!
PASSED!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:32:20'!
PASSED!

!testRun: #CargoVehicleTest #test05 stamp: 'HG 12/16/2020 17:32:20'!
PASSED!

!testRun: #CargoVehicleTest #test06 stamp: 'HG 12/16/2020 17:32:20'!
PASSED!
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 17:32:37' prior: 50947910!
test05
	self assertType: #Drone canNotCarryType: #Motorcycle.
! !
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 17:32:51' prior: 50948031!
test06
	self assertType: #Drone canNotCarryType: #Drone.
! !

!testRun: #CargoVehicleTest #test06 stamp: 'HG 12/16/2020 17:32:51'!
PASSED!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:32:51'!
PASSED!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:32:51'!
PASSED!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:32:51'!
PASSED!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:32:51'!
PASSED!

!testRun: #CargoVehicleTest #test05 stamp: 'HG 12/16/2020 17:32:51'!
PASSED!

!testRun: #CargoVehicleTest #test06 stamp: 'HG 12/16/2020 17:32:52'!
PASSED!
!CargoVehicleTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 17:34:05'!
test07	
	| maxDeliveryTime  carriedVehicle sourceCity targetCity |
	
	targetCity := 'CABA'.
	sourceCity := 'Cordoba'.
	maxDeliveryTime := GregorianDateTime now next: 10*hour. 
	
	carriedVehicle := CargoVehicle 
		ofType: #Motorcycle from: targetCity to: sourceCity leavingAt: maxDeliveryTime previous maxWeight: 11 routingWith: self carrying: {}.
		
	self should: [ CargoVehicle ofType: #Truck from: targetCity to: sourceCity leavingAt: (maxDeliveryTime previous: 1*hour) maxWeight: 11 routingWith: self carrying: {carriedVehicle}. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: CargoVehicle CanNotTransportVehicleErrorDescription.! !

!testRun: #CargoVehicleTest #test07 stamp: 'HG 12/16/2020 17:34:06'!
FAILURE!

!testRun: #CargoVehicleTest #test07 stamp: 'HG 12/16/2020 17:41:40'!
FAILURE!
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 17:54:28' prior: 50947936!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	aCargoVehicleCollection do: [:aCarriedVehicle | 
			(
			(aType=aCarriedVehicle type) 
			or: (aType=#Motorcycle and: (aCarriedVehicle type=#Truck))
			or: (aType=#Drone and: (aCarriedVehicle type=#Truck))
			or: (aType=#Drone and: (aCarriedVehicle type=#Motorcycle))
			or: ((aTargetCity = aCarriedVehicle targetCity) not)
			)
			ifTrue: [self error: self CanNotTransportVehicleErrorDescription]].
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity ofType: aType leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:54:31'!
ERROR!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:54:31'!
ERROR!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:54:31'!
ERROR!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:54:31'!
ERROR!

!testRun: #CargoVehicleTest #test05 stamp: 'HG 12/16/2020 17:54:31'!
ERROR!

!testRun: #CargoVehicleTest #test06 stamp: 'HG 12/16/2020 17:54:31'!
ERROR!

!testRun: #CargoVehicleTest #test07 stamp: 'HG 12/16/2020 17:54:31'!
ERROR!

!testRun: #CargoVehicleTest #test07 stamp: 'HG 12/16/2020 17:54:49'!
ERROR!
!CargoVehicle methodsFor: 'accessing' stamp: 'HG 12/16/2020 17:54:55'!
targetCity
	self shouldBeImplemented.
	^targetCity! !
!CargoVehicle methodsFor: 'accessing' stamp: 'HG 12/16/2020 17:54:58' prior: 50948304!
targetCity
	^targetCity! !

!testRun: #CargoVehicleTest #test07 stamp: 'HG 12/16/2020 17:55:00'!
FAILURE!

!testRun: #CargoVehicleTest #test07 stamp: 'HG 12/16/2020 17:55:05'!
FAILURE!

aCarriedVehicle targetCity!

aTargetCity!
!CargoVehicle class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 17:57:10' prior: 50948254!
ofType: aType from: aSourceCity to: aTargetCity leavingAt: aLeavingTime maxWeight: aMaxWeight routingWith: aRouteTimeCalculator carrying: aCargoVehicleCollection   
	
	| arrivingTime |
	
	aCargoVehicleCollection do: [:aCarriedVehicle | 
			(
			(aType=aCarriedVehicle type) 
			or: (aType=#Motorcycle and: (aCarriedVehicle type=#Truck))
			or: (aType=#Drone and: (aCarriedVehicle type=#Truck))
			or: (aType=#Drone and: (aCarriedVehicle type=#Motorcycle))
			or: ((aTargetCity = aCarriedVehicle sourceCity) not)
			)
			ifTrue: [self error: self CanNotTransportVehicleErrorDescription]].
	
	arrivingTime := aLeavingTime next: (aRouteTimeCalculator from: 'CABA' to: aTargetCity forCargoVehicleType: aType).
	
	^self new initializeTo: aTargetCity from: aSourceCity ofType: aType leavingAt: aLeavingTime arrivingAt: arrivingTime maxWeight: aMaxWeight carrying: aCargoVehicleCollection.! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:57:11'!
ERROR!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:57:11'!
ERROR!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:57:11'!
ERROR!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:57:11'!
ERROR!

!testRun: #CargoVehicleTest #test05 stamp: 'HG 12/16/2020 17:57:11'!
ERROR!

!testRun: #CargoVehicleTest #test06 stamp: 'HG 12/16/2020 17:57:11'!
ERROR!

!testRun: #CargoVehicleTest #test07 stamp: 'HG 12/16/2020 17:57:11'!
ERROR!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:57:12'!
ERROR!
!CargoVehicle methodsFor: 'accessing' stamp: 'HG 12/16/2020 17:57:19'!
sourceCity
	self shouldBeImplemented.
	^sourceCity! !
!CargoVehicle methodsFor: 'accessing' stamp: 'HG 12/16/2020 17:57:21' prior: 50948370!
sourceCity
	^sourceCity! !

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:57:22'!
PASSED!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:57:22'!
PASSED!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:57:22'!
PASSED!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:57:22'!
PASSED!

!testRun: #CargoVehicleTest #test05 stamp: 'HG 12/16/2020 17:57:22'!
PASSED!

!testRun: #CargoVehicleTest #test06 stamp: 'HG 12/16/2020 17:57:22'!
PASSED!

!testRun: #CargoVehicleTest #test07 stamp: 'HG 12/16/2020 17:57:22'!
PASSED!

!testRun: #CargoVehicleTest #test01 stamp: 'HG 12/16/2020 17:59:58'!
PASSED!

!testRun: #CargoVehicleTest #test02 stamp: 'HG 12/16/2020 17:59:58'!
PASSED!

!testRun: #CargoVehicleTest #test03 stamp: 'HG 12/16/2020 17:59:58'!
PASSED!

!testRun: #CargoVehicleTest #test04 stamp: 'HG 12/16/2020 17:59:58'!
PASSED!

!testRun: #CargoVehicleTest #test05 stamp: 'HG 12/16/2020 17:59:58'!
PASSED!

!testRun: #CargoVehicleTest #test06 stamp: 'HG 12/16/2020 17:59:58'!
PASSED!

!testRun: #CargoVehicleTest #test07 stamp: 'HG 12/16/2020 17:59:58'!
PASSED!

TestCase subclass: #MountableTrailerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classDefinition: #MountableTrailerTest category: #'ISW1-2020-1C-2doParcial' stamp: 'HG 12/16/2020 18:37:13'!
TestCase subclass: #MountableTrailerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!
!MountableTrailerTest methodsFor: 'nil' stamp: 'HG 12/16/2020 19:21:25'!
test01
	
	"
	self should: [
		MountableTrailer 
		]
		
	"! !
!MountableTrailerTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 19:22:59' prior: 50948426!
test01
	
	
	"self should: [MountableTrailer with: 10 and: 10 carrying: {}]"
		
	! !

!classDefinition: #MountableTrailer category: #'ISW1-2020-1C-2doParcial' stamp: 'HG 12/16/2020 19:26:31'!
Object subclass: #MountableTrailer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classDefinition: #HeavierTrailerSelectionCriteria category: #'ISW1-2020-1C-2doParcial' stamp: 'HG 12/16/2020 19:26:39'!
Object subclass: #HeavierTrailerSelectionCriteria
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!
!MountableTrailerTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 19:26:04' prior: 50948432!
test01
	
	
	self should: [MountableTrailer carrying: {} withCriteriaSelection: HeavierTrailerSelectionCriteria new]
		raise: Error - MessageNotUnderstood 
		withMessageText: [MountableTrailer EmptyMountableTrailerErrorDescription].
		
	! !

!testRun: #MountableTrailerTest #test01 stamp: 'HG 12/16/2020 19:26:43'!
ERROR!
!MountableTrailer class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 19:26:48'!
carrying: anArray withCriteriaSelection: aHeavierTrailerSelectionCriteria 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCarrying: anArray withCriteriaSelection: aHeavierTrailerSelectionCriteria ! !
!MountableTrailer class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 19:27:25' prior: 50948468!
carrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	^self new initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria. ! !

!testRun: #MountableTrailerTest #test01 stamp: 'HG 12/16/2020 19:27:26'!
ERROR!

!testRun: #MountableTrailerTest #test01 stamp: 'HG 12/16/2020 19:27:26'!
ERROR!

!classDefinition: #MountableTrailer category: #'ISW1-2020-1C-2doParcial' stamp: 'HG 12/16/2020 19:27:35'!
Object subclass: #MountableTrailer
	instanceVariableNames: 'productCarrierCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!

!classDefinition: #MountableTrailer category: #'ISW1-2020-1C-2doParcial' stamp: 'HG 12/16/2020 19:27:35'!
Object subclass: #MountableTrailer
	instanceVariableNames: 'productCarrierCollection productCarrierSelectionCriteria'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!
!MountableTrailer methodsFor: 'initialization' stamp: 'HG 12/16/2020 19:27:35'!
initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	self shouldBeImplemented.
	productCarrierCollection := aProductCarrierCollection.
	productCarrierSelectionCriteria := aProductCarrierSelectionCriteria.! !
!MountableTrailer methodsFor: 'initialization' stamp: 'HG 12/16/2020 19:27:41' prior: 50948513!
initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	productCarrierCollection := aProductCarrierCollection.
	productCarrierSelectionCriteria := aProductCarrierSelectionCriteria.! !

!classDefinition: #MountableTrailer category: #'ISW1-2020-1C-2doParcial' stamp: 'HG 12/16/2020 19:27:59'!
Object subclass: #MountableTrailer
	instanceVariableNames: 'trailers productCarrierSelectionCriteria'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!
!MountableTrailer methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 19:27:59' prior: 50948525!
initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	trailers := aProductCarrierCollection.
	productCarrierSelectionCriteria := aProductCarrierSelectionCriteria.! !

!classDefinition: #MountableTrailer category: #'ISW1-2020-1C-2doParcial' stamp: 'HG 12/16/2020 19:28:11'!
Object subclass: #MountableTrailer
	instanceVariableNames: 'trailers selectionCriteria'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!
!MountableTrailer methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 19:28:11' prior: 50948545!
initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	trailers := aProductCarrierCollection.
	selectionCriteria := aProductCarrierSelectionCriteria.! !

!testRun: #MountableTrailerTest #test01 stamp: 'HG 12/16/2020 19:28:14'!
FAILURE!
!MountableTrailer class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 19:28:59' prior: 50948480!
carrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	
	aProductCarrierCollection isEmpty ifTrue: [^self error: self EmptyMountableTrailerErrorDescription].
	
	^self new initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria. ! !

!testRun: #MountableTrailerTest #test01 stamp: 'HG 12/16/2020 19:29:00'!
ERROR!

!testRun: #MountableTrailerTest #test01 stamp: 'HG 12/16/2020 19:29:00'!
ERROR!
!MountableTrailer class methodsFor: 'error description' stamp: 'HG 12/16/2020 19:29:15'!
EmptyMountableTrailerErrorDescription
	self shouldBeImplemented.! !
!MountableTrailer class methodsFor: 'error description' stamp: 'HG 12/16/2020 19:29:23' prior: 50948595!
EmptyMountableTrailerErrorDescription
	^'Empty mountable trailer'.! !

!testRun: #MountableTrailerTest #test01 stamp: 'HG 12/16/2020 19:29:24'!
PASSED!

!testRun: #MountableTrailerTest #test01 stamp: 'HG 12/16/2020 19:29:27'!
PASSED!

!testRun: #MountableTrailerTest #test01 stamp: 'HG 12/16/2020 19:29:27'!
PASSED!
!MountableTrailerTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 20:14:18'!
test02
	
	
	self should: [MountableTrailer carrying: {} withCriteriaSelection: HeavierTrailerSelectionCriteria new]
		raise: Error - MessageNotUnderstood 
		withMessageText: [MountableTrailer EmptyMountableTrailerErrorDescription].
		
	! !
!CleaningTrailerTest methodsFor: 'tests' stamp: 'HG 12/16/2020 20:16:36' prior: 50944214!
test02BleachCleanerReducesProductBPollutionIndexBy3

	| cleaningTrailer initialPollutionIndex product trailer |
	
	trailer := self createTrailer.
	cleaningTrailer := CleaningTrailer for: trailer cleaningWith: {BleachCleaner new}.
	initialPollutionIndex := 10.
	product := ProductB with: 1 and: 1 pollutionIndex: initialPollutionIndex.
	
	cleaningTrailer carry: product.
	
	self assertPollutionIndexOf: product is: initialPollutionIndex - 3 andIncludedIn: trailer

! !
!MountableTrailerTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 20:16:51' prior: 50948614!
test02
	
	| cleaningTrailer trailer |
	trailer := Trailer with: 1  and: 0.
	cleaningTrailer := CleaningTrailer for: trailer cleaningWith: {BleachCleaner new}.

	self should: [MountableTrailer carrying: {} withCriteriaSelection: HeavierTrailerSelectionCriteria new]
		raise: Error - MessageNotUnderstood 
		withMessageText: [MountableTrailer EmptyMountableTrailerErrorDescription].
		
	! !
!MountableTrailerTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 20:18:05' prior: 50948643!
test02
	
	| cleaningTrailer trailer mountableTrailer |
	trailer := Trailer with: 1  and: 0.
	cleaningTrailer := CleaningTrailer for: trailer cleaningWith: {BleachCleaner new}.
	mountableTrailer := MountableTrailer carrying: {trailer. cleaningTrailer.} withCriteriaSelection: HeavierTrailerSelectionCriteria new.
	self should: [MountableTrailer carrying: {trailer. cleaningTrailer.} withCriteriaSelection: HeavierTrailerSelectionCriteria new]
		raise: Error - MessageNotUnderstood 
		withMessageText: [MountableTrailer EmptyMountableTrailerErrorDescription].
		
	! !
!MountableTrailerTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 20:18:28' prior: 50948659!
test02
	
	| trailer mountableTrailer |
	trailer := Trailer with: 1  and: 0.
	mountableTrailer := MountableTrailer carrying: {trailer.} withCriteriaSelection: HeavierTrailerSelectionCriteria new.
	
	self should: [MountableTrailer carrying: {trailer.} withCriteriaSelection: HeavierTrailerSelectionCriteria new]
		raise: Error - MessageNotUnderstood 
		withMessageText: [MountableTrailer EmptyMountableTrailerErrorDescription].
		
	! !
!MountableTrailer class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 20:22:22' prior: 50948577!
carrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	
	aProductCarrierCollection isEmpty ifTrue: [self error: self EmptyMountableTrailerErrorDescription].
	
	^self new initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria. ! !

!testRun: #MountableTrailerTest #test01 stamp: 'HG 12/16/2020 20:22:22'!
PASSED!

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:22:22'!
ERROR!

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:22:22'!
ERROR!
!MountableTrailer class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 20:22:33' prior: 50948697!
carrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	
	aProductCarrierCollection isEmpty ifTrue: [^self error: self EmptyMountableTrailerErrorDescription].
	
	^self new initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria. ! !
!MountableTrailer class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 20:22:42' prior: 50948718!
carrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	
	aProductCarrierCollection isEmpty 
		ifTrue: [^self error: self EmptyMountableTrailerErrorDescription].
	
	^self new initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria. ! !
!MountableTrailer class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 20:25:48' prior: 50948732!
carrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	
	aProductCarrierCollection isEmpty 
		ifTrue: [^self error: self EmptyMountableTrailerErrorDescription].
	
	aProductCarrierCollection do: [:aTrailer | aTrailer isMountedOn: self. ].
	
	^self new initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria. ! !

!testRun: #MountableTrailerTest #test01 stamp: 'HG 12/16/2020 20:25:53'!
PASSED!

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:25:53'!
ERROR!

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:25:53'!
ERROR!

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:25:58'!
ERROR!
!MountableTrailerTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 20:26:06' prior: 50948680!
test02
	
	| trailer mountableTrailer |
	trailer := Trailer with: 1  and: 2.
	mountableTrailer := MountableTrailer carrying: {trailer.} withCriteriaSelection: HeavierTrailerSelectionCriteria new.
	
	self should: [MountableTrailer carrying: {trailer.} withCriteriaSelection: HeavierTrailerSelectionCriteria new]
		raise: Error - MessageNotUnderstood 
		withMessageText: [MountableTrailer EmptyMountableTrailerErrorDescription].
		
	! !

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:26:09'!
ERROR!
!Trailer methodsFor: 'associating' stamp: 'HG 12/16/2020 20:26:17'!
isMountedOn: aClass 
	self shouldBeImplemented.! !

!classDefinition: #Trailer category: #'ISW1-2020-1C-2doParcial' stamp: 'HG 12/16/2020 20:26:47'!
ProductCarrier subclass: #Trailer
	instanceVariableNames: 'weightCapacity heightCapacity container mountedOn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!
!Trailer methodsFor: 'associating' stamp: 'HG 12/16/2020 20:26:45' prior: 50948791!
isMountedOn: aMountingTrailer 
	mountedOn := aMountingTrailer.! !

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:26:48'!
FAILURE!
!MountableTrailer class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 20:28:58' prior: 50948746!
carrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	
	aProductCarrierCollection isEmpty 
		ifTrue: [^self error: self EmptyMountableTrailerErrorDescription].
	(aProductCarrierCollection anySatisfy: [:aTrailer | aTrailer mountedOn isNotNil ])
		ifTrue: [^self error: self maxPointsExceededErrorDescription].
	
	aProductCarrierCollection do: [:aTrailer | aTrailer isMountedOn: self. ].
	
	^self new initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria. ! !
!MountableTrailer class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 20:29:04' prior: 50948813!
carrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	
	aProductCarrierCollection isEmpty 
		ifTrue: [^self error: self EmptyMountableTrailerErrorDescription].
	(aProductCarrierCollection anySatisfy: [:aTrailer | aTrailer mountedOn isNotNil ])
		ifTrue: [^self error: self TrailerAlreadyMountedErrorDescription].
	
	aProductCarrierCollection do: [:aTrailer | aTrailer isMountedOn: self. ].
	
	^self new initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria. ! !

!testRun: #MountableTrailerTest #test01 stamp: 'HG 12/16/2020 20:29:06'!
PASSED!

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:29:06'!
ERROR!

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:29:06'!
ERROR!
!Trailer methodsFor: 'accessing' stamp: 'HG 12/16/2020 20:29:11'!
mountedOn
	self shouldBeImplemented.
	^mountedOn! !
!Trailer methodsFor: 'accessing' stamp: 'HG 12/16/2020 20:29:14' prior: 50948861!
mountedOn
	^mountedOn! !

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:29:16'!
ERROR!
!MountableTrailer class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 20:29:24' prior: 50948834!
carrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	
	aProductCarrierCollection isEmpty 
		ifTrue: [^self error: self EmptyMountableTrailerErrorDescription].
	(aProductCarrierCollection anySatisfy: [:aTrailer | (aTrailer mountedOn) isNotNil ])
		ifTrue: [^self error: self TrailerAlreadyMountedErrorDescription].
	
	aProductCarrierCollection do: [:aTrailer | aTrailer isMountedOn: self. ].
	
	^self new initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria. ! !
!MountableTrailer class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 20:29:29' prior: 50948873!
carrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	
	aProductCarrierCollection isEmpty 
		ifTrue: [^self error: self EmptyMountableTrailerErrorDescription].
	(aProductCarrierCollection anySatisfy: [:aTrailer | aTrailer mountedOn isNotNil ])
		ifTrue: [^self error: self TrailerAlreadyMountedErrorDescription].
	
	aProductCarrierCollection do: [:aTrailer | aTrailer isMountedOn: self. ].
	
	^self new initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria. ! !
!Trailer methodsFor: 'initialization' stamp: 'HG 12/16/2020 20:29:57' prior: 50945554!
initializeWith: aWeightCapacity and: aHeightCapacity

	weightCapacity := aWeightCapacity.
	heightCapacity := aHeightCapacity.
	mountedOn := nil.
	container := OrderedCollection new.! !

!classDefinition: #CleaningTrailer category: #'ISW1-2020-1C-2doParcial' stamp: 'HG 12/16/2020 20:30:08'!
ProductCarrier subclass: #CleaningTrailer
	instanceVariableNames: 'trailer cleaners mountedOn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-2doParcial'!
!CleaningTrailer methodsFor: 'initialization' stamp: 'HG 12/16/2020 20:30:06' prior: 50945501!
initializeFor: aTrailer cleaningWith: aCollectionOfCleaners 
	
	trailer := aTrailer.
	cleaners := aCollectionOfCleaners.
	mountedOn := nil.! !
!CleaningTrailer methodsFor: 'accesing' stamp: 'HG 12/16/2020 20:30:29'!
isMountedOn
	^mountedOn. ! !
!ProductCarrier methodsFor: 'accesing' stamp: 'HG 12/16/2020 20:30:41'!
isMountedOn
	self subclassResponsibility. ! !

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:32:00'!
ERROR!

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:32:24'!
ERROR!

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:32:28'!
ERROR!

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:32:38'!
ERROR!

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:33:23'!
ERROR!

aTrailer mountedOn isNotNil!
!Trailer methodsFor: 'initialization' stamp: 'HG 12/16/2020 20:34:31' prior: 50948914!
initializeWith: aWeightCapacity and: aHeightCapacity

	weightCapacity := aWeightCapacity.
	heightCapacity := aHeightCapacity.
	mountedOn := nil.
	container := OrderedCollection new.! !

aTrailer mountedOn!

aTrailer mountedOn isNotNil!

(aTrailer mountedOn) isNotNil!
!MountableTrailer class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 20:36:10' prior: 50948894!
carrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	
	aProductCarrierCollection isEmpty 
		ifTrue: [^self error: self EmptyMountableTrailerErrorDescription].
	(aProductCarrierCollection allSatisfy: [:aTrailer | aTrailer mountedOn isNil ])
		ifTrue: [^self error: self TrailerAlreadyMountedErrorDescription].
	
	aProductCarrierCollection do: [:aTrailer | aTrailer isMountedOn: self. ].
	
	^self new initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria. ! !

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:36:12'!
ERROR!
!MountableTrailer class methodsFor: 'error description' stamp: 'HG 12/16/2020 20:36:21'!
TrailerAlreadyMountedErrorDescription
	self shouldBeImplemented.! !
!MountableTrailer class methodsFor: 'error description' stamp: 'HG 12/16/2020 20:36:30' prior: 50948996!
TrailerAlreadyMountedErrorDescription
	^'Trailer already mounted'.! !

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:36:32'!
ERROR!

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:36:36'!
ERROR!
!MountableTrailer class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 20:42:30' prior: 50948973!
carrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	
	aProductCarrierCollection isEmpty 
		ifTrue: [^self error: self EmptyMountableTrailerErrorDescription].
	(aProductCarrierCollection allSatisfy: [:aTrailer | aTrailer mountedOn = #NotMounted])
		ifTrue: [^self error: self TrailerAlreadyMountedErrorDescription].
	
	aProductCarrierCollection do: [:aTrailer | aTrailer isMountedOn: self. ].
	
	^self new initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria. ! !
!CleaningTrailer methodsFor: 'initialization' stamp: 'HG 12/16/2020 20:42:40' prior: 50948932!
initializeFor: aTrailer cleaningWith: aCollectionOfCleaners 
	
	trailer := aTrailer.
	cleaners := aCollectionOfCleaners.
	mountedOn := #NotMounted.! !
!Trailer methodsFor: 'initialization' stamp: 'HG 12/16/2020 20:42:45' prior: 50948961!
initializeWith: aWeightCapacity and: aHeightCapacity

	weightCapacity := aWeightCapacity.
	heightCapacity := aHeightCapacity.
	mountedOn := #NotMounted.
	container := OrderedCollection new.! !

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:42:49'!
ERROR!
!MountableTrailer class methodsFor: 'instance creation' stamp: 'HG 12/16/2020 20:43:12' prior: 50949013!
carrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria 
	
	aProductCarrierCollection isEmpty 
		ifTrue: [^self error: self EmptyMountableTrailerErrorDescription].
	(aProductCarrierCollection allSatisfy: [:aTrailer | aTrailer mountedOn = #NotMounted])
		ifFalse: [^self error: self TrailerAlreadyMountedErrorDescription].
	
	aProductCarrierCollection do: [:aTrailer | aTrailer isMountedOn: self. ].
	
	^self new initializeCarrying: aProductCarrierCollection withCriteriaSelection: aProductCarrierSelectionCriteria. ! !

!testRun: #MountableTrailerTest #test01 stamp: 'HG 12/16/2020 20:43:13'!
PASSED!

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:43:13'!
FAILURE!

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:43:13'!
FAILURE!
!MountableTrailerTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 20:43:30' prior: 50948772!
test02
	
	| trailer mountableTrailer |
	trailer := Trailer with: 1  and: 2.
	mountableTrailer := MountableTrailer carrying: {trailer.} withCriteriaSelection: HeavierTrailerSelectionCriteria new.
	
	self should: [MountableTrailer carrying: {trailer.} withCriteriaSelection: HeavierTrailerSelectionCriteria new]
		raise: Error - MessageNotUnderstood 
		withMessageText: [MountableTrailer TrailerAlreadyMountedErrorDescription ].
		
	! !

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:43:33'!
PASSED!

!testRun: #MountableTrailerTest #test01 stamp: 'HG 12/16/2020 20:43:33'!
PASSED!

!testRun: #MountableTrailerTest #test02 stamp: 'HG 12/16/2020 20:43:33'!
PASSED!
!MountableTrailerTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 20:43:35' prior: 50949083!
test02
	
	| trailer mountableTrailer |
	trailer := Trailer with: 1  and: 2.
	mountableTrailer := MountableTrailer carrying: {trailer.} withCriteriaSelection: HeavierTrailerSelectionCriteria new.
	
	self should: [MountableTrailer carrying: {trailer.} withCriteriaSelection: HeavierTrailerSelectionCriteria new]
		raise: Error - MessageNotUnderstood 
		withMessageText: [MountableTrailer TrailerAlreadyMountedErrorDescription].
		
	! !
!MountableTrailerTest methodsFor: 'as yet unclassified' stamp: 'HG 12/16/2020 20:44:41'!
test03
	
	| trailer mountableTrailer |
	trailer := Trailer with: 1  and: 2.
	mountableTrailer := MountableTrailer carrying: {trailer.} withCriteriaSelection: HeavierTrailerSelectionCriteria new.
	
	self should: [MountableTrailer carrying: {trailer.} withCriteriaSelection: HeavierTrailerSelectionCriteria new]
		raise: Error - MessageNotUnderstood 
		withMessageText: [MountableTrailer TrailerAlreadyMountedErrorDescription].
		
	! !

----STARTUP---- (16 December 2020 22:16:15) as /Users/monteagudo/Downloads/macos64/CuisUniversity-4137.image!


!classRemoval: #PointsPortableObject stamp: 'HG 12/16/2020 22:20:18'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'HG 12/16/2020 22:20:19'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PortableObject stamp: 'HG 12/16/2020 22:20:19'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NonPortableObject stamp: 'HG 12/16/2020 22:20:20'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight points contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #StageObject stamp: 'HG 12/16/2020 22:20:20'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Room stamp: 'HG 12/16/2020 22:20:20'!
Object subclass: #Room
	instanceVariableNames: 'width height size positions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'HG 12/16/2020 22:20:21'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'HG 12/16/2020 22:20:21'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Backpack stamp: 'HG 12/16/2020 22:20:22'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #RoomTest stamp: 'HG 12/16/2020 22:20:22'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'HG 12/16/2020 22:20:22'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #BackpackTest stamp: 'HG 12/16/2020 22:20:23'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

----End fileIn of /Users/monteagudo/Downloads/ISW1-2020-2C-Recuperatorio-2doParcial (1).st----!

----STARTUP---- (17 December 2020 08:57:16) as /Users/monteagudo/Downloads/macos64/CuisUniversity-4137.image!


!classRemoval: #PointsPortableObject stamp: 'HG 12/17/2020 16:54:29'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'HG 12/17/2020 16:54:30'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PortableObject stamp: 'HG 12/17/2020 16:54:30'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NonPortableObject stamp: 'HG 12/17/2020 16:54:31'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight points contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #StageObject stamp: 'HG 12/17/2020 16:54:31'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Room stamp: 'HG 12/17/2020 16:54:32'!
Object subclass: #Room
	instanceVariableNames: 'width height size positions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'HG 12/17/2020 16:54:32'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'HG 12/17/2020 16:54:32'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Backpack stamp: 'HG 12/17/2020 16:54:33'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #RoomTest stamp: 'HG 12/17/2020 16:54:33'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'HG 12/17/2020 16:54:34'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #BackpackTest stamp: 'HG 12/17/2020 16:54:34'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

----End fileIn of /Users/monteagudo/Downloads/ISW1-2020-2C-Recuperatorio-2doParcial (3).st----!
!RoomTest methodsFor: 'tests' stamp: 'HG 12/17/2020 17:16:49'!
test13

	| room |
	
	room := Room ofWidth: 10 andHeight: 10.
	
	room at: 0@0 put: self paper.
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'HG 12/17/2020 17:26:57' prior: 50952213!
test13

	| room anotherRoom doorPositions |
	
	room := Room ofWidth: 10 andHeight: 10.
	room at: 0@0 put: self paper.
	
	anotherRoom := Room ofWidth: 10 andHeight: 10.

	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	"	
	door := Door withPositions: doorPositions. 
	
	self 
		should: []
		"! !

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'HG 12/17/2020 17:30:00'!
StageObject subclass: #Door
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!RoomTest methodsFor: 'tests' stamp: 'HG 12/17/2020 17:29:49' prior: 50952220!
test13

	| room anotherRoom door doorPositions |
	
	room := Room ofWidth: 10 andHeight: 10.
	room at: 0@0 put: self paper.
	
	anotherRoom := Room ofWidth: 10 andHeight: 10.

	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
		
	door := Door withPositions: doorPositions. 
	
	self 
		should: [door addToRooms]
		raise: Error-MessageNotUnderstood 
		withMessageText: Room invalidPositionToAddDoorErrorDescription.
		! !

!testRun: #RoomTest #test13 stamp: 'HG 12/17/2020 17:30:06'!
ERROR!
!Door class methodsFor: 'instance creation' stamp: 'HG 12/17/2020 17:30:11'!
withPositions: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPositions: aDictionary ! !
!Door class methodsFor: 'instance creation' stamp: 'HG 12/17/2020 17:30:23' prior: 50952262!
withPositions: aDoorPositions 
	^self new initializeWithPositions: aDoorPositions. ! !

!testRun: #RoomTest #test13 stamp: 'HG 12/17/2020 17:30:24'!
ERROR!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'HG 12/17/2020 17:30:43'!
StageObject subclass: #Door
	instanceVariableNames: 'doorPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'initialization' stamp: 'HG 12/17/2020 17:30:43'!
initializeWithPositions: aDoorPositions 
	self shouldBeImplemented.
	doorPositions := aDoorPositions.! !

!testRun: #RoomTest #test13 stamp: 'HG 12/17/2020 17:30:47'!
ERROR!
!Door methodsFor: 'initialization' stamp: 'HG 12/17/2020 17:31:00' prior: 50952287!
initializeWithPositions: aDoorPositions 
	doorPositions := aDoorPositions.! !

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'HG 12/17/2020 17:31:03'!
StageObject subclass: #Door
	instanceVariableNames: 'positions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:31:03' prior: 50952296!
initializeWithPositions: aDoorPositions 
	positions := aDoorPositions.! !

!testRun: #RoomTest #test13 stamp: 'HG 12/17/2020 17:31:32'!
ERROR!
!Room class methodsFor: 'errorDescription' stamp: 'HG 12/17/2020 17:31:49'!
invalidPositionToAddDoorErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'errorDescription' stamp: 'HG 12/17/2020 17:31:58' prior: 50952317!
invalidPositionToAddDoorErrorDescription
	^'Invalid position to add a Door'.! !

!testRun: #RoomTest #test13 stamp: 'HG 12/17/2020 17:31:59'!
ERROR!

!testRun: #RoomTest #test13 stamp: 'HG 12/17/2020 17:32:18'!
ERROR!
!Door methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:32:23'!
addToRooms
	self shouldBeImplemented.! !
!RoomTest methodsFor: 'tests' stamp: 'HG 12/17/2020 17:32:41' prior: 50952242!
test13

	| room anotherRoom doorPositions |
	
	room := Room ofWidth: 10 andHeight: 10.
	room at: 0@0 put: self paper.
	anotherRoom := Room ofWidth: 10 andHeight: 10.

	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions. ]
		raise: Error-MessageNotUnderstood 
		withMessageText: Room invalidPositionToAddDoorErrorDescription.
		! !

!testRun: #RoomTest #test13 stamp: 'HG 12/17/2020 17:32:44'!
FAILURE!
!Door class methodsFor: 'instance creation' stamp: 'HG 12/17/2020 17:36:55' prior: 50952271!
withPositions: aDoorPositions 
	
	aDoorPositions keysAndValuesDo: [:aRoom :aPosition | aRoom at: aPosition put: self.].
	^self new initializeWithPositions: aDoorPositions. ! !

!testRun: #RoomTest #test13 stamp: 'HG 12/17/2020 17:37:14'!
FAILURE!
!RoomTest methodsFor: 'tests' stamp: 'HG 12/17/2020 17:37:43' prior: 50952337!
test13

	| room anotherRoom doorPositions |
	
	room := Room ofWidth: 10 andHeight: 10.
	room at: 0@0 put: self paper.
	anotherRoom := Room ofWidth: 10 andHeight: 10.

	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions. ]
		raise: Error-MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
		! !

!testRun: #RoomTest #test13 stamp: 'HG 12/17/2020 17:37:44'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'HG 12/17/2020 17:37:44'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'HG 12/17/2020 17:37:44'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'HG 12/17/2020 17:37:44'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'HG 12/17/2020 17:37:44'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'HG 12/17/2020 17:37:44'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'HG 12/17/2020 17:37:44'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'HG 12/17/2020 17:37:44'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'HG 12/17/2020 17:37:44'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'HG 12/17/2020 17:37:44'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'HG 12/17/2020 17:37:44'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'HG 12/17/2020 17:37:44'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'HG 12/17/2020 17:37:44'!
PASSED!

!testRun: #RoomTest #test13 stamp: 'HG 12/17/2020 17:37:44'!
PASSED!

!methodRemoval: Door #addToRooms stamp: 'HG 12/17/2020 17:38:37'!
addToRooms
	self shouldBeImplemented.!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 17:39:23'!
test21

	| room  player box paper anotherPaper |

	room := self defaultRoom.
	paper := self paper.
	anotherPaper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper. anotherPaper }.
	room at: 0@1 put: box.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
	
	self assert: box equals: (room at: 0@1).
	self deny: box isEmpty.
	self assert: (box includes: anotherPaper).
	self assert: (player backpackIncludes: paper).
	self assert: 1 equals: player backpackSize! !

!methodRemoval: PlayableCharacterTest #test21 stamp: 'HG 12/17/2020 17:40:35'!
test21

	| room  player box paper anotherPaper |

	room := self defaultRoom.
	paper := self paper.
	anotherPaper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper. anotherPaper }.
	room at: 0@1 put: box.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
	
	self assert: box equals: (room at: 0@1).
	self deny: box isEmpty.
	self assert: (box includes: anotherPaper).
	self assert: (player backpackIncludes: paper).
	self assert: 1 equals: player backpackSize!

TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!

!classDefinition: #DoorTest category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'HG 12/17/2020 17:40:58'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!DoorTest methodsFor: 'nil' stamp: 'HG 12/17/2020 17:41:08'!
test01
	| room anotherRoom doorPositions |
	
	room := Room ofWidth: 10 andHeight: 10.
	room at: 0@0 put: self paper.
	anotherRoom := Room ofWidth: 10 andHeight: 10.

	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions. ]
		raise: Error-MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
		! !

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 17:41:09'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:41:20' prior: 50952489!
test01
	| room anotherRoom doorPositions |
	
	room := Room ofWidth: 10 andHeight: 10.
	room at: 0@0 put: Room paper.
	anotherRoom := Room ofWidth: 10 andHeight: 10.

	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions. ]
		raise: Error-MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
		! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:41:29' prior: 50952508!
test01
	| room anotherRoom doorPositions |
	
	room := Room ofWidth: 10 andHeight: 10.
	room at: 0@0 put: self paper.
	anotherRoom := Room ofWidth: 10 andHeight: 10.

	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions. ]
		raise: Error-MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
		! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:41:46'!
paper

	^ PointsPortableObject named: 'paper' weighing: 1 worth: 1! !

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 17:41:48'!
PASSED!

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 17:41:48'!
PASSED!

!methodRemoval: RoomTest #test13 stamp: 'HG 12/17/2020 17:41:57'!
test13

	| room anotherRoom doorPositions |
	
	room := Room ofWidth: 10 andHeight: 10.
	room at: 0@0 put: self paper.
	anotherRoom := Room ofWidth: 10 andHeight: 10.

	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions. ]
		raise: Error-MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
		!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:42:15'!
test02

	| room  player box paper |

	room := self defaultRoom.
	paper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper }.
	room at: 0@1 put: box.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player take.
	
	self assert: box equals: (room at: 0@1).
	self assert: box isEmpty.
	self assert: (player backpackIncludes: paper).
		! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:42:33' prior: 50952566!
test02

	| room  player box paper |

	room := self defaultRoom.
	paper := self paper.
	box := NonPortableObject named: 'Box' withAll: { paper }.
	room at: 0@1 put: box.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	player take.
	
	self assert: box equals: (room at: 0@1).
	self assert: box isEmpty.
	self assert: (player backpackIncludes: paper).
		! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:44:34' prior: 50952582!
test02

	| room  anotherRoom door doorPositions |

	room := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [NonPortableObject named: 'Box' withAll: { door }]
		raise: Error-MessageNotUnderstood 
		withMessageText: [Door ].
	
	"
	self assert: box equals: (room at: 0@1).
	self assert: box isEmpty.
	self assert: (player backpackIncludes: paper).
		"! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:45:05' prior: 50952598!
test02

	| room  anotherRoom door doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [NonPortableObject named: 'Box' withAll: { door }]
		raise: Error-MessageNotUnderstood 
		withMessageText: [Door ].
	
	"
	self assert: box equals: (room at: 0@1).
	self assert: box isEmpty.
	self assert: (player backpackIncludes: paper).
		"! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:45:54' prior: 50952617!
test02

	| room  anotherRoom door doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [NonPortableObject named: 'Box' withAll: { door }]
		raise: Error-MessageNotUnderstood 
		withMessageText: [Door canNotGetIntoaPortableObjectErrorDescription. ].
	
	"
	self assert: box equals: (room at: 0@1).
	self assert: box isEmpty.
	self assert: (player backpackIncludes: paper).
		"! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:47:05' prior: 50952637!
test02

	| room  anotherRoom door doorPositions box |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [box := NonPortableObject named: 'Box' withAll: { door }]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = Door canNotGetIntoaPortableObjectErrorDescription. 
			self assert: box isEmpty. 
			].
	
	"
	self assert: box equals: (room at: 0@1).
	self assert: box isEmpty.
	self assert: (player backpackIncludes: paper).
		"! !

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:47:21'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:47:37' prior: 50952525!
test01
	| room anotherRoom doorPositions |
	
	room := self defaultRoom.
	room at: 0@0 put: self paper.
	anotherRoom := Room ofWidth: 10 andHeight: 10.

	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions. ]
		raise: Error-MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
		! !

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 17:47:37'!
ERROR!
!DoorTest methodsFor: 'test objects' stamp: 'HG 12/17/2020 17:47:48'!
defaultRoom
	self shouldBeImplemented.! !
!DoorTest methodsFor: 'test objects' stamp: 'HG 12/17/2020 17:47:51' prior: 50952702!
defaultRoom
	^Room ofWidth: 10 andHeight: 10.! !

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 17:47:52'!
PASSED!

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 17:47:52'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:47:52'!
FAILURE!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:47:52'!
FAILURE!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:47:56'!
FAILURE!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'HG 12/17/2020 17:49:49' prior: 50952064!
named: aName withAll: aCollectionOfStageObjects 
	
	| validStageObjectsToAdd |
	validStageObjectsToAdd := 
		aCollectionOfStageObjects collect: [:aStageObject |
			aStageObject canBeAddedToNonPortableObject].
		
	^self new initializeNamed: aName withAll: aCollectionOfStageObjects ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'HG 12/17/2020 17:50:02' prior: 50952722!
named: aName withAll: aCollectionOfStageObjects 
	
	| validStageObjectsToAdd |
	validStageObjectsToAdd := 
		aCollectionOfStageObjects collect: [:aStageObject |
			aStageObject canBeAddedToNonPortableObject].
		
	^self new initializeNamed: aName withAll: validStageObjectsToAdd ! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:50:21' prior: 50952658!
test02

	| room  anotherRoom door doorPositions box paper |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	paper := self paper.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [box := NonPortableObject named: 'Box' withAll: { door }]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = Door canNotGetIntoaPortableObjectErrorDescription. 
			self assert: box isEmpty. 
			].
	
	"
	self assert: box equals: (room at: 0@1).
	self assert: box isEmpty.
	self assert: (player backpackIncludes: paper).
		"! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:50:27' prior: 50952747!
test02

	| room  anotherRoom door doorPositions box paper |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	paper := self paper.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [box := NonPortableObject named: 'Box' withAll: { door. paper. }]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = Door canNotGetIntoaPortableObjectErrorDescription. 
			self assert: box isEmpty. 
			].
	
	"
	self assert: box equals: (room at: 0@1).
	self assert: box isEmpty.
	self assert: (player backpackIncludes: paper).
		"! !

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:50:28'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:51:29' prior: 50952771!
test02

	| room  anotherRoom door doorPositions box paper |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	paper := self paper.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [box := NonPortableObject named: 'Box' withAll: { door. paper. }]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = Door canNotGetIntoaPortableObjectErrorDescription. 
			self assert: box includes: paper.
			self deny: (box includes: door)].
	
	"
	self assert: box equals: (room at: 0@1).
	self assert: box isEmpty.
	self assert: (player backpackIncludes: paper).
		"! !

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:51:31'!
ERROR!
!Door methodsFor: 'testing' stamp: 'HG 12/17/2020 17:51:45'!
canBeAddedToNonPortableObject
	self shouldBeImplemented.! !
!Door methodsFor: 'testing' stamp: 'HG 12/17/2020 17:51:48' prior: 50952825!
canBeAddedToNonPortableObject
	^false.! !

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:51:49'!
ERROR!
!PointsPortableObject methodsFor: 'testing' stamp: 'HG 12/17/2020 17:51:58'!
canBeAddedToNonPortableObject
	self shouldBeImplemented.! !
!PointsPortableObject methodsFor: 'testing' stamp: 'HG 12/17/2020 17:52:03' prior: 50952836!
canBeAddedToNonPortableObject
	^true.! !

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:52:04'!
FAILURE!
!StageObject methodsFor: 'testing' stamp: 'HG 12/17/2020 17:52:27'!
canBeAddedToNonPortableObject
	self subclassResponsibility.! !
!NonPortableObject methodsFor: 'testing' stamp: 'HG 12/17/2020 17:52:44' overrides: 50952847!
canBeAddedToNonPortableObject
	^true.! !
!PortableObject methodsFor: 'testing' stamp: 'HG 12/17/2020 17:53:03' overrides: 50952847!
canBeAddedToNonPortableObject
	^true.! !

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:53:11'!
FAILURE!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:53:15'!
FAILURE!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'HG 12/17/2020 17:55:39' prior: 50952735!
named: aName withAll: aCollectionOfStageObjects 
	
	| validStageObjectsToAdd |
	validStageObjectsToAdd := OrderedCollection new.
	aCollectionOfStageObjects select: [:aStageObject |
			aStageObject canBeAddedToNonPortableObject].
		
	^self new initializeNamed: aName withAll: validStageObjectsToAdd ! !

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:55:41'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 17:55:41'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 17:55:41'!
FAILURE!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 17:55:41'!
FAILURE!

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:55:57'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 17:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 17:55:57'!
FAILURE!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 17:55:57'!
FAILURE!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:55:58'!
FAILURE!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 17:56:06'!
FAILURE!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 17:56:17'!
FAILURE!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'HG 12/17/2020 17:57:55' prior: 50952867!
named: aName withAll: aCollectionOfStageObjects 
	
	| validStageObjectsToAdd |
	
	validStageObjectsToAdd:=aCollectionOfStageObjects select: [:aStageObject | aStageObject canBeAddedToNonPortableObject].
		
	^self new initializeNamed: aName withAll: validStageObjectsToAdd ! !

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:57:56'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 17:57:56'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:57:56'!
FAILURE!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:58:32'!
FAILURE!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:58:43'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:58:57' prior: 50952798!
test02

	| room  anotherRoom door doorPositions box paper |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	paper := self paper.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [box := NonPortableObject named: 'Box' withAll: { door. paper. }]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = Door canNotGetIntoaPortableObjectErrorDescription. 
			].
	
	"
	self assert: box equals: (room at: 0@1).
	self assert: box isEmpty.
	self assert: (player backpackIncludes: paper).
		"! !

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 17:58:59'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:59:02' prior: 50953150!
test02

	| room  anotherRoom door doorPositions box paper |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	paper := self paper.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [box := NonPortableObject named: 'Box' withAll: { door. paper. }]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = Door canNotGetIntoaPortableObjectErrorDescription. 
			self assert: box includes: paper.
			self deny: (box includes: door)].
	
	"
	self assert: box equals: (room at: 0@1).
	self assert: box isEmpty.
	self assert: (player backpackIncludes: paper).
		"! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 17:59:28' prior: 50953176!
test02

	| room  anotherRoom door doorPositions box paper |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	paper := self paper.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [box := NonPortableObject named: 'Box' withAll: { door. paper. }]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = Door canNotGetIntoaPortableObjectErrorDescription. 
			self assert: box includes: paper.
			self deny: (box includes: door)].
	
	"
	self assert: box equals: (room at: 0@1).
	self assert: box isEmpty.
	self assert: (player backpackIncludes: paper).
		"! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'HG 12/17/2020 18:01:51' prior: 50953051!
named: aName withAll: aCollectionOfStageObjects 
	"
	| validStageObjectsToAdd |
	
	validStageObjectsToAdd:=aCollectionOfStageObjects select: [:aStageObject | aStageObject canBeAddedToNonPortableObject].
	"
	(aCollectionOfStageObjects 
		allSatisfy: [:aStageObject | aStageObject canBeAddedToNonPortableObject])
			ifFalse: [self error: self canNotAddaDoorErrorDescription.].
		
	^self new initializeNamed: aName withAll: aCollectionOfStageObjects ! !

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 18:01:53'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 18:01:53'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 18:01:53'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 18:01:53'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 18:01:53'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 18:01:53'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 18:01:53'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 18:01:54'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 18:01:54'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 18:01:54'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 18:01:54'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 18:01:54'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 18:01:54'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 18:01:54'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 18:01:54'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 18:01:54'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 18:01:54'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 18:01:54'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 18:01:54'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 18:01:54'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 18:01:54'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 18:01:54'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 18:01:54'!
ERROR!
!NonPortableObject class methodsFor: 'error description' stamp: 'HG 12/17/2020 18:02:13'!
canNotAddaDoorErrorDescription
	self shouldBeImplemented.! !
!NonPortableObject class methodsFor: 'error description' stamp: 'HG 12/17/2020 18:02:21' prior: 50953328!
canNotAddaDoorErrorDescription
	^'Can not add a door'.! !

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 18:02:22'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 18:02:36' prior: 50953202!
test02

	| room  anotherRoom door doorPositions box paper |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	paper := self paper.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [box := NonPortableObject named: 'Box' withAll: { door. paper. }]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = NonPortableObject canNotAddaDoorErrorDescription. 
			self assert: box includes: paper.
			self deny: (box includes: door)].
	
	"
	self assert: box equals: (room at: 0@1).
	self assert: box isEmpty.
	self assert: (player backpackIncludes: paper).
		"! !

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 18:02:37'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 18:02:47' prior: 50953341!
test02

	| room  anotherRoom door doorPositions box paper |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	paper := self paper.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [box := NonPortableObject named: 'Box' withAll: { door. paper. }]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = NonPortableObject canNotAddaDoorErrorDescription.].
	
	"
	self assert: box equals: (room at: 0@1).
	self assert: box isEmpty.
	self assert: (player backpackIncludes: paper).
		"! !

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 18:02:49'!
PASSED!

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 18:02:49'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 18:02:49'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 18:02:59' prior: 50953369!
test02

	| room  anotherRoom door doorPositions box paper |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	paper := self paper.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [box := NonPortableObject named: 'Box' withAll: { door. paper. }]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = NonPortableObject canNotAddaDoorErrorDescription.].
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 18:03:03'!
test03

	| room  anotherRoom door doorPositions box paper |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	paper := self paper.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [box := NonPortableObject named: 'Box' withAll: { door. paper. }]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = NonPortableObject canNotAddaDoorErrorDescription.].
	! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 18:03:11' prior: 50953418!
test03

	| room  anotherRoom door doorPositions paper |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	paper := self paper.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [NonPortableObject named: 'Box' withAll: { door. paper. }]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = NonPortableObject canNotAddaDoorErrorDescription.].
	! !

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:03:15'!
PASSED!

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 18:03:15'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 18:03:15'!
PASSED!

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:03:15'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 18:03:24' prior: 50953399!
test02

	| room  anotherRoom door doorPositions paper |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	paper := self paper.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [NonPortableObject named: 'Box' withAll: { door. paper. }]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = NonPortableObject canNotAddaDoorErrorDescription.].
	! !

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 18:03:24'!
PASSED!

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 18:03:24'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 18:03:24'!
PASSED!

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:03:24'!
PASSED!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 18:05:53' prior: 50953438!
test03
	
	
	| room  player anotherRoom door doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@1);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.

	room at: 0@1 put: door.
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Door CanNotBeTakenErrorDescription. ].
	
	self deny: (room isEmptyAt: 0@1).
	self deny: (player backpackIncludes: door).
	! !

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:06:09'!
ERROR!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 18:06:21' prior: 50953494!
test03
	
	
	| room  player anotherRoom door doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@1);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Door CanNotBeTakenErrorDescription. ].
	
	self deny: (room isEmptyAt: 0@1).
	self deny: (player backpackIncludes: door).
	! !

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:06:22'!
ERROR!
!DoorTest methodsFor: 'test objects' stamp: 'HG 12/17/2020 18:06:46'!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:06:51'!
ERROR!

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:07:17'!
ERROR!
!Door class methodsFor: 'instance creation' stamp: 'HG 12/17/2020 18:08:07' prior: 50952356!
withPositions: aDoorPositions 
	
	
	^self new initializeWithPositions: aDoorPositions. ! !
!Door methodsFor: 'initialization' stamp: 'HG 12/17/2020 18:08:15' prior: 50952310!
initializeWithPositions: aDoorPositions 
	positions := aDoorPositions.
	
	aDoorPositions 
		keysAndValuesDo: [:aRoom :aPosition | aRoom at: aPosition put: self.].! !

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:08:20'!
ERROR!
!Door class methodsFor: 'error messages' stamp: 'HG 12/17/2020 18:08:30'!
CanNotBeTakenErrorDescription
	self shouldBeImplemented.! !
!Door class methodsFor: 'error messages' stamp: 'HG 12/17/2020 18:08:41' prior: 50953568!
CanNotBeTakenErrorDescription
	^'Can not take a Door'.! !

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:08:42'!
FAILURE!

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:08:50'!
FAILURE!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 18:09:00' prior: 50953519!
test03
	
	
	| room  player anotherRoom door doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@1);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error-MessageNotUnderstood
		withMessageText: [ self CanNotBeTakenErrorDescription. ].
	
	self deny: (room isEmptyAt: 0@1).
	self deny: (player backpackIncludes: door).
	! !

!methodRemoval: Door class #CanNotBeTakenErrorDescription stamp: 'HG 12/17/2020 18:09:16'!
CanNotBeTakenErrorDescription
	^'Can not take a Door'.!

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:09:24'!
ERROR!
!DoorTest methodsFor: 'error messages' stamp: 'HG 12/17/2020 18:09:30'!
CanNotBeTakenErrorDescription
	self shouldBeImplemented.! !
!DoorTest methodsFor: 'error messages' stamp: 'HG 12/17/2020 18:09:35' prior: 50953611!
CanNotBeTakenErrorDescription
	^'Can not take a Door'.! !

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:09:36'!
FAILURE!
!Door methodsFor: 'taken' stamp: 'HG 12/17/2020 18:10:23'!
takenBy
	^self error: self class canNotBeTakenErrorDescription.! !
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 18:10:32' prior: 50953583!
test03
	
	
	| room  player anotherRoom door doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@1);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Door CanNotBeTakenErrorDescription. ].
	
	self deny: (room isEmptyAt: 0@1).
	self deny: (player backpackIncludes: door).
	! !

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:10:33'!
ERROR!
!Door class methodsFor: 'error messages' stamp: 'HG 12/17/2020 18:10:41'!
CanNotBeTakenErrorDescription
	self shouldBeImplemented.! !
!Door class methodsFor: 'error messages' stamp: 'HG 12/17/2020 18:10:50' prior: 50953650!
CanNotBeTakenErrorDescription
	^'Can not take a Door'.! !

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:10:51'!
FAILURE!

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:10:58'!
FAILURE!
!Door methodsFor: 'taken' stamp: 'HG 12/17/2020 18:11:27' overrides: 50951995!
takenBy: aPlayableCharacter
	^self error: self class canNotBeTakenErrorDescription.! !

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 18:11:27'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 18:11:27'!
PASSED!

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:11:27'!
ERROR!

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:11:27'!
ERROR!

!methodRemoval: Door #takenBy stamp: 'HG 12/17/2020 18:11:39'!
takenBy
	^self error: self class canNotBeTakenErrorDescription.!

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 18:11:43'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 18:11:43'!
PASSED!

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:11:43'!
ERROR!

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:11:43'!
ERROR!
!Door methodsFor: 'taken' stamp: 'HG 12/17/2020 18:11:57' prior: 50953664 overrides: 50951995!
takenBy: aPlayableCharacter
	^self error: self class CanNotBeTakenErrorDescription
.! !

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 18:11:57'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 18:11:57'!
PASSED!

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:11:57'!
PASSED!

!methodRemoval: DoorTest #CanNotBeTakenErrorDescription stamp: 'HG 12/17/2020 18:12:06'!
CanNotBeTakenErrorDescription
	^'Can not take a Door'.!
!DoorTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 18:12:19'!
test04
	
	| room  player anotherRoom door doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@1);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Door CanNotBeTakenErrorDescription. ].
	
	self deny: (room isEmptyAt: 0@1).
	self deny: (player backpackIncludes: door).
	! !
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:14:46' prior: 50953709!
test04
	
	| room  anotherRoom door doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@20);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [ door := Door withPositions: doorPositions. ]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Room . ].
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:15:43' prior: 50953730!
test04
	
	| room  anotherRoom door doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (20@1);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [ door := Door withPositions: doorPositions. ]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Room invalidPositionErrorDescription. ].
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:15:58' prior: 50953744!
test04
	
	| room  anotherRoom doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (20@1);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions.]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Room invalidPositionErrorDescription. ].
	
	! !

!testRun: #DoorTest #test04 stamp: 'HG 12/17/2020 18:15:59'!
PASSED!

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 18:15:59'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 18:15:59'!
PASSED!

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:15:59'!
PASSED!

!testRun: #DoorTest #test04 stamp: 'HG 12/17/2020 18:15:59'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:16:08'!
test05
	
	| room  anotherRoom doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (1@20);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions.]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Room invalidPositionErrorDescription. ].
	
	! !

!testRun: #DoorTest #test05 stamp: 'HG 12/17/2020 18:16:11'!
PASSED!

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 18:16:11'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 18:16:11'!
PASSED!

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:16:11'!
PASSED!

!testRun: #DoorTest #test04 stamp: 'HG 12/17/2020 18:16:11'!
PASSED!

!testRun: #DoorTest #test05 stamp: 'HG 12/17/2020 18:16:11'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:16:31'!
test06
	
	| room  anotherRoom doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (1@20);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions.]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Room invalidPositionErrorDescription. ].
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:16:44' prior: 50953811!
test06
	
	| room  anotherRoom doorPositions player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.

	
	self 
		should: [Door withPositions: doorPositions.]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Room invalidPositionErrorDescription. ].
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:17:45' prior: 50953825!
test06
	
	| room  anotherRoom doorPositions player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [Door withPositions: doorPositions.]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Room invalidPositionErrorDescription. ].
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:18:02' prior: 50952684!
test01
	| room anotherRoom doorPositions |
	
	room := self defaultRoom.
	room at: 0@0 put: self paper.
	anotherRoom := Room ofWidth: 10 andHeight: 10.

	doorPositions := Dictionary new
		at: room put: (0@1.2);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions. ]
		raise: Error-MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
		! !

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 18:18:03'!
FAILURE!
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:18:13' prior: 50953861!
test01
	| room anotherRoom doorPositions |
	
	room := self defaultRoom.
	room at: 0@0 put: self paper.
	anotherRoom := Room ofWidth: 10 andHeight: 10.

	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions. ]
		raise: Error-MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
		! !

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 18:18:14'!
PASSED!

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 18:18:14'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 18:18:14'!
PASSED!

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:18:14'!
PASSED!

!testRun: #DoorTest #test04 stamp: 'HG 12/17/2020 18:18:14'!
PASSED!

!testRun: #DoorTest #test05 stamp: 'HG 12/17/2020 18:18:14'!
PASSED!

!testRun: #DoorTest #test06 stamp: 'HG 12/17/2020 18:18:14'!
FAILURE!

!testRun: #DoorTest #test06 stamp: 'HG 12/17/2020 18:18:14'!
FAILURE!
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:19:13' prior: 50953843!
test06
	
	| room  anotherRoom doorPositions door |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	! !
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:20:38' prior: 50953912!
test06
	
	| room  anotherRoom doorPositions door |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	self assert: (room positionOf: door) equals: 0@0.
	self assert: (anotherRoom positionOf: door) equals: 0@0.	! !

!testRun: #DoorTest #test06 stamp: 'HG 12/17/2020 18:20:39'!
PASSED!

!testRun: #DoorTest #test01 stamp: 'HG 12/17/2020 18:20:39'!
PASSED!

!testRun: #DoorTest #test02 stamp: 'HG 12/17/2020 18:20:39'!
PASSED!

!testRun: #DoorTest #test03 stamp: 'HG 12/17/2020 18:20:39'!
PASSED!

!testRun: #DoorTest #test04 stamp: 'HG 12/17/2020 18:20:39'!
PASSED!

!testRun: #DoorTest #test05 stamp: 'HG 12/17/2020 18:20:39'!
PASSED!

!testRun: #DoorTest #test06 stamp: 'HG 12/17/2020 18:20:39'!
PASSED!
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:20:53' prior: 50953923!
test06
	
	| room anotherRoom doorPositions door |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	self assert: (room positionOf: door) equals: 0@0.
	self assert: (anotherRoom positionOf: door) equals: 0@0.	! !
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:22:19'!
test01DoorCanNotBeInitializatedAtOccupiedPosition
	| room anotherRoom doorPositions |
	
	room := self defaultRoom.
	room at: 0@0 put: self paper.
	anotherRoom := Room ofWidth: 10 andHeight: 10.

	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions. ]
		raise: Error-MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
		! !

!methodRemoval: DoorTest #test01 stamp: 'HG 12/17/2020 18:22:19'!
test01
	| room anotherRoom doorPositions |
	
	room := self defaultRoom.
	room at: 0@0 put: self paper.
	anotherRoom := Room ofWidth: 10 andHeight: 10.

	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions. ]
		raise: Error-MessageNotUnderstood 
		withMessageText: Room positionIsNotEmptyErrorDescription.
		!
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:22:50'!
test02CanNotAddaDoorToNonPortableObject

	| room  anotherRoom door doorPositions paper |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	paper := self paper.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [NonPortableObject named: 'Box' withAll: { door. paper. }]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = NonPortableObject canNotAddaDoorErrorDescription.].
	! !

!methodRemoval: DoorTest #test02 stamp: 'HG 12/17/2020 18:22:50'!
test02

	| room  anotherRoom door doorPositions paper |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	paper := self paper.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.
	
	self 
		should: [NonPortableObject named: 'Box' withAll: { door. paper. }]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = NonPortableObject canNotAddaDoorErrorDescription.].
	!
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:23:02'!
test03DoorCanNotBeTaken
	
	
	| room  player anotherRoom door doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@1);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Door CanNotBeTakenErrorDescription. ].
	
	self deny: (room isEmptyAt: 0@1).
	self deny: (player backpackIncludes: door).
	! !

!methodRemoval: DoorTest #test03 stamp: 'HG 12/17/2020 18:23:02'!
test03
	
	
	| room  player anotherRoom door doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@1);
		at: anotherRoom put: (0@0);
		yourself.
	door := Door withPositions: doorPositions.

	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	
	self 
		should: [ player take ]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Door CanNotBeTakenErrorDescription. ].
	
	self deny: (room isEmptyAt: 0@1).
	self deny: (player backpackIncludes: door).
	!
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:23:23'!
test04CanNotInitializeDoorWithInvalidXPosition
	
	| room  anotherRoom doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (20@1);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions.]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Room invalidPositionErrorDescription. ].
	
	! !

!methodRemoval: DoorTest #test04 stamp: 'HG 12/17/2020 18:23:23'!
test04
	
	| room  anotherRoom doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (20@1);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions.]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Room invalidPositionErrorDescription. ].
	
	!
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:23:32'!
test05CanNotInitializeDoorWithInvalidYPosition
	
	| room  anotherRoom doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (1@20);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions.]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Room invalidPositionErrorDescription. ].
	
	! !

!methodRemoval: DoorTest #test05 stamp: 'HG 12/17/2020 18:23:32'!
test05
	
	| room  anotherRoom doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (1@20);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions.]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Room invalidPositionErrorDescription. ].
	
	!
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:23:57'!
test06DoorKeepsAtEachRoom
	
	| room anotherRoom doorPositions door |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	self assert: (room positionOf: door) equals: 0@0.
	self assert: (anotherRoom positionOf: door) equals: 0@0.	! !

!methodRemoval: DoorTest #test06 stamp: 'HG 12/17/2020 18:23:57'!
test06
	
	| room anotherRoom doorPositions door |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	self assert: (room positionOf: door) equals: 0@0.
	self assert: (anotherRoom positionOf: door) equals: 0@0.	!
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:24:09'!
test06DoorKeepsAtEachRoomInValidPosition
	
	| room anotherRoom doorPositions door |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	self assert: (room positionOf: door) equals: 0@0.
	self assert: (anotherRoom positionOf: door) equals: 0@0.	! !

!methodRemoval: DoorTest #test06DoorKeepsAtEachRoom stamp: 'HG 12/17/2020 18:24:09'!
test06DoorKeepsAtEachRoom
	
	| room anotherRoom doorPositions door |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	self assert: (room positionOf: door) equals: 0@0.
	self assert: (anotherRoom positionOf: door) equals: 0@0.	!
!DoorTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:25:25' prior: 50954077!
test04CanNotInitializeDoorWithInvalidXPosition
	
	| room  anotherRoom doorPositions |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (1.2@1);
		at: anotherRoom put: (0@0);
		yourself.
	
	self 
		should: [Door withPositions: doorPositions.]
		raise: Error-MessageNotUnderstood
		withMessageText: [ Room invalidPositionErrorDescription. ].
	
	! !

!testRun: #DoorTest #test04CanNotInitializeDoorWithInvalidXPosition stamp: 'HG 12/17/2020 18:25:25'!
PASSED!

!testRun: #DoorTest #test01DoorCanNotBeInitializatedAtOccupiedPosition stamp: 'HG 12/17/2020 18:25:25'!
PASSED!

!testRun: #DoorTest #test02CanNotAddaDoorToNonPortableObject stamp: 'HG 12/17/2020 18:25:25'!
PASSED!

!testRun: #DoorTest #test03DoorCanNotBeTaken stamp: 'HG 12/17/2020 18:25:25'!
PASSED!

!testRun: #DoorTest #test04CanNotInitializeDoorWithInvalidXPosition stamp: 'HG 12/17/2020 18:25:25'!
PASSED!

!testRun: #DoorTest #test05CanNotInitializeDoorWithInvalidYPosition stamp: 'HG 12/17/2020 18:25:25'!
PASSED!

!testRun: #DoorTest #test06DoorKeepsAtEachRoomInValidPosition stamp: 'HG 12/17/2020 18:25:25'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:34:28'!
test21

	| room  player |

	room := self defaultRoom.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #West in: room.
	player moveForward.
	
	self assert: (player isAt: 0@1 heading: #West).
	self assert: player equals: (room at: 0@1).
	self assert: (room isEmptyAt: 1@1).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:38:52' prior: 50954232!
test21

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			].
	
	
	self assert: (player isAt: 0@1 heading: #West).
	self assert: player equals: (room at: 0@1).
	self assert: (room isEmptyAt: 1@1).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:40:36' prior: 50954245!
test21

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = Door CantCrossAClosedDoor.
			self assert: (player isAt: 0@1 heading: #South).
			self assert: player equals: (room at: 0@1).
			self assert: door isClosed.
			].
	
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:40:49' prior: 50954268!
test21

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = Door CantCrossAClosedDoorErrorDescription.
			self assert: (player isAt: 0@1 heading: #South).
			self assert: player equals: (room at: 0@1).
			self assert: door isClosed.].
	
	
	! !

!testRun: #PlayableCharacterTest #test21 stamp: 'HG 12/17/2020 18:40:52'!
ERROR!
!Door methodsFor: 'actions' stamp: 'HG 12/17/2020 18:41:00'!
close
	self shouldBeImplemented.! !

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'HG 12/17/2020 18:41:16'!
StageObject subclass: #Door
	instanceVariableNames: 'positions state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'actions' stamp: 'HG 12/17/2020 18:41:14' prior: 50954320!
close
	state = self closed.! !

!testRun: #PlayableCharacterTest #test21 stamp: 'HG 12/17/2020 18:41:19'!
ERROR!
!Door methodsFor: 'door states' stamp: 'HG 12/17/2020 18:41:28'!
closed
	self shouldBeImplemented.! !
!Door methodsFor: 'door states' stamp: 'HG 12/17/2020 18:41:33' prior: 50954339!
closed
	^#Closed.! !

!testRun: #PlayableCharacterTest #test21 stamp: 'HG 12/17/2020 18:41:34'!
ERROR!
!Door class methodsFor: 'error messages' stamp: 'HG 12/17/2020 18:41:43'!
CantCrossAClosedDoorErrorDescription
	self shouldBeImplemented.! !
!Door class methodsFor: 'error messages' stamp: 'HG 12/17/2020 18:41:50' prior: 50954349!
CantCrossAClosedDoorErrorDescription
	^'Cant Cross a Closed Door'.! !

!testRun: #PlayableCharacterTest #test21 stamp: 'HG 12/17/2020 18:41:51'!
ERROR!
!Door methodsFor: 'testing' stamp: 'HG 12/17/2020 18:41:59'!
isClosed
	self shouldBeImplemented.! !
!Door methodsFor: 'testing' stamp: 'HG 12/17/2020 18:42:10' prior: 50954361!
isClosed
	state = self closed.! !

!testRun: #PlayableCharacterTest #test21 stamp: 'HG 12/17/2020 18:42:12'!
ERROR!
!Door methodsFor: 'door states' stamp: 'HG 12/17/2020 18:42:31'!
opened
	^#Opened.! !
!Door methodsFor: 'initialization' stamp: 'HG 12/17/2020 18:42:42' prior: 50953558!
initializeWithPositions: aDoorPositions 
	positions := aDoorPositions.
	state := self opened.
	aDoorPositions 
		keysAndValuesDo: [:aRoom :aPosition | aRoom at: aPosition put: self.].! !
!Door methodsFor: 'initialization' stamp: 'HG 12/17/2020 18:42:51' prior: 50954375!
initializeWithPositions: aDoorPositions 

	aDoorPositions 
		keysAndValuesDo: [:aRoom :aPosition | aRoom at: aPosition put: self.].
	positions := aDoorPositions.
	state := self opened.
	! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #DoorTest #test01DoorCanNotBeInitializatedAtOccupiedPosition stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #DoorTest #test02CanNotAddaDoorToNonPortableObject stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #DoorTest #test03DoorCanNotBeTaken stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #DoorTest #test04CanNotInitializeDoorWithInvalidXPosition stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #DoorTest #test05CanNotInitializeDoorWithInvalidYPosition stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #DoorTest #test06DoorKeepsAtEachRoomInValidPosition stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test21 stamp: 'HG 12/17/2020 18:42:54'!
ERROR!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'HG 12/17/2020 18:42:54'!
PASSED!

!testRun: #PlayableCharacterTest #test21 stamp: 'HG 12/17/2020 18:42:54'!
ERROR!

!testRun: #PlayableCharacterTest #test21 stamp: 'HG 12/17/2020 18:43:00'!
ERROR!
!Door methodsFor: 'testing' stamp: 'HG 12/17/2020 18:43:11' prior: 50954365!
isClosed
	^state = self closed.! !

!testRun: #PlayableCharacterTest #test21 stamp: 'HG 12/17/2020 18:43:14'!
FAILURE!

!testRun: #PlayableCharacterTest #test21 stamp: 'HG 12/17/2020 18:43:21'!
FAILURE!

door isClosed!

self closed!
!Door methodsFor: 'actions' stamp: 'HG 12/17/2020 18:45:07' prior: 50954333!
close
	state = #Closed.! !

!testRun: #PlayableCharacterTest #test21 stamp: 'HG 12/17/2020 18:45:10'!
FAILURE!
!Door methodsFor: 'actions' stamp: 'HG 12/17/2020 18:41:14' prior: 50954599!
close
	state = self closed.! !
!Door methodsFor: 'actions' stamp: 'HG 12/17/2020 18:45:47' prior: 50954605!
close
	state _ self closed.! !

!testRun: #PlayableCharacterTest #test21 stamp: 'HG 12/17/2020 18:45:49'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 18:45:49'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 18:45:49'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 18:45:49'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 18:45:49'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 18:45:49'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 18:45:49'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 18:45:49'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 18:45:49'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 18:45:49'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 18:45:49'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 18:45:49'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 18:45:49'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 18:45:49'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 18:45:49'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 18:45:49'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 18:45:50'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 18:45:50'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 18:45:50'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 18:45:50'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 18:45:50'!
PASSED!

!testRun: #PlayableCharacterTest #test21 stamp: 'HG 12/17/2020 18:45:50'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:46:38'!
test21ClosedDoorCanNotBeTrespassed

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = Door CantCrossAClosedDoorErrorDescription.
			self assert: (player isAt: 0@1 heading: #South).
			self assert: player equals: (room at: 0@1).
			self assert: door isClosed.].
	
	
	! !

!methodRemoval: PlayableCharacterTest #test21 stamp: 'HG 12/17/2020 18:46:38'!
test21

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = Door CantCrossAClosedDoorErrorDescription.
			self assert: (player isAt: 0@1 heading: #South).
			self assert: player equals: (room at: 0@1).
			self assert: door isClosed.].
	
	
	!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 18:48:38'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 18:48:38'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 18:49:54' prior: 50954694!
test21ClosedDoorCanNotBeTrespassed

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Door CantCrossAClosedDoorErrorDescription.
			self assert: (player isAt: 0@1 heading: #South).
			self assert: player equals: (room at: 0@1).
			self assert: door isClosed.].
	
	
	! !

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 18:49:54'!
FAILURE!
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 18:55:12' prior: 50951893!
assertIsEmpty: aPosition

	^(self isEmptyAt: aPosition) 
		ifFalse: [ 
			(self at: aPosition) 
				canBeTrespassed
					ifFalse: [self error: self class positionIsNotEmptyErrorDescription]]! !
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 18:55:32'!
assertPossitionCanBeTrespassed: aPosition

	^ (self at: aPosition) 
				canBeTrespassed
					ifFalse: [self error: self class positionIsNotEmptyErrorDescription]! !
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 18:55:32' prior: 50954857!
assertIsEmpty: aPosition

	^(self isEmptyAt: aPosition) 
		ifFalse: [ 
			self assertPossitionCanBeTrespassed: aPosition]! !
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 18:55:37' prior: 50954874!
assertIsEmpty: aPosition

	^(self isEmptyAt: aPosition) 
		ifFalse: [self assertPossitionCanBeTrespassed: aPosition]! !

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 18:55:48'!
ERROR!
!Door methodsFor: 'testing' stamp: 'HG 12/17/2020 18:56:00'!
canBeTrespassed
	self shouldBeImplemented.! !
!Door methodsFor: 'testing' stamp: 'HG 12/17/2020 18:56:08' prior: 50954891!
canBeTrespassed
	^self isOpened.! !

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 18:56:10'!
ERROR!
!Door methodsFor: 'testing' stamp: 'HG 12/17/2020 18:56:17'!
isOpened
	self shouldBeImplemented.! !
!Door methodsFor: 'testing' stamp: 'HG 12/17/2020 18:56:25' prior: 50954902!
isOpened
	^state = self opened. ! !

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 18:56:26'!
FAILURE!
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 18:57:42' prior: 50954866!
assertPossitionCanBeTrespassed: aPosition

	^ (self at: aPosition) 
			canBeTrespassed
					ifFalse: [self error: Door CantCrossAClosedDoorErrorDescription]! !
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 18:57:59'!
assertPositionCanBeTrespassed: aPosition

	^ (self at: aPosition) 
			canBeTrespassed
					ifFalse: [self error: Door CantCrossAClosedDoorErrorDescription]! !
!Room methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 18:57:59' prior: 50954881!
assertIsEmpty: aPosition

	^(self isEmptyAt: aPosition) 
		ifFalse: [self assertPositionCanBeTrespassed: aPosition]! !

!methodRemoval: Room #assertPossitionCanBeTrespassed: stamp: 'HG 12/17/2020 18:57:59'!
assertPossitionCanBeTrespassed: aPosition

	^ (self at: aPosition) 
			canBeTrespassed
					ifFalse: [self error: Door CantCrossAClosedDoorErrorDescription]!
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 18:58:38' prior: 50954921!
assertPositionCanBeTrespassed: aPosition

	^ (self at: aPosition) 
			canBeTrespassed
					ifFalse: [self error: Door CantCrossAClosedDoorErrorDescription]
					ifTrue: [^true]! !
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 18:59:19' prior: 50954929!
assertIsEmpty: aPosition

	^(self isEmptyAt: aPosition) 
		ifFalse: [
			(self assertPositionCanBeTrespassed: aPosition)
				ifFalse: [self error: self class positionIsNotEmptyErrorDescription]
			].
	! !

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'HG 12/17/2020 18:59:19'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'HG 12/17/2020 18:59:19'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'HG 12/17/2020 18:59:19'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'HG 12/17/2020 18:59:19'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'HG 12/17/2020 18:59:19'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'HG 12/17/2020 18:59:19'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'HG 12/17/2020 18:59:19'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'HG 12/17/2020 18:59:19'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'HG 12/17/2020 18:59:19'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'HG 12/17/2020 18:59:19'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'HG 12/17/2020 18:59:19'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'HG 12/17/2020 18:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 18:59:28'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 18:59:28'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 18:59:28'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 18:59:28'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 18:59:28'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 18:59:28'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 18:59:28'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 18:59:28'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 18:59:28'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 18:59:28'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 18:59:28'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 18:59:28'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 18:59:29'!
ERROR!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 18:59:29'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 18:59:29'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 18:59:29'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 18:59:29'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 18:59:29'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 18:59:29'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 18:59:29'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 18:59:29'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 18:59:29'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 18:59:29'!
ERROR!
!NoPointsPortableObject methodsFor: 'testing' stamp: 'HG 12/17/2020 18:59:38'!
canBeTrespassed
	self shouldBeImplemented.! !
!NoPointsPortableObject methodsFor: 'testing' stamp: 'HG 12/17/2020 18:59:42' prior: 50955087!
canBeTrespassed
	^false.! !

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 18:59:45'!
FAILURE!
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 19:00:57' prior: 50954943!
assertPositionCanBeTrespassed: aPosition

	^ (self at: aPosition) 
			canBeTrespassed
					ifFalse: [self error: Door CantCrossAClosedDoorErrorDescription]
					! !
!Door methodsFor: 'testing' stamp: 'HG 12/17/2020 19:01:42'!
cannotBeTrespassed
	^self isOpened.! !
!NoPointsPortableObject methodsFor: 'testing' stamp: 'HG 12/17/2020 19:01:42'!
cannotBeTrespassed
	^false.! !
!Room methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 19:01:42' prior: 50955100!
assertPositionCanBeTrespassed: aPosition

	^ (self at: aPosition) 
			cannotBeTrespassed
					ifFalse: [self error: Door CantCrossAClosedDoorErrorDescription]
					! !

!methodRemoval: Door #canBeTrespassed stamp: 'HG 12/17/2020 19:01:42'!
canBeTrespassed
	^self isOpened.!

!methodRemoval: NoPointsPortableObject #canBeTrespassed stamp: 'HG 12/17/2020 19:01:42'!
canBeTrespassed
	^false.!
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 19:01:46' prior: 50955116!
assertPositionCanBeTrespassed: aPosition

	^ (self at: aPosition) 
			cannotBeTrespassed
					ifTrue: [self error: Door CantCrossAClosedDoorErrorDescription]
					! !
!Door methodsFor: 'testing' stamp: 'HG 12/17/2020 19:01:57' prior: 50955108!
cannotBeTrespassed
	^self isClosed.! !

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 19:02:01'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 19:02:01'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 19:02:01'!
FAILURE!
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 19:02:46' prior: 50955131!
assertPositionCanBeTrespassed: aPosition

	^ (self at: aPosition) 
			cannotBeTrespassed
					ifTrue: [self error: Door CantCrossAClosedDoorErrorDescription]
					ifFalse: [^false].! !

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 19:02:51'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 19:02:51'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 19:04:26'!
test22ClosedDoorInAnotherRoomCanNotBeTrespassed

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@1);
		yourself.
	
	door := Door withPositions: doorPositions.
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: anotherRoom.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Door CantCrossAClosedDoorErrorDescription.
			self assert: (player isAt: 0@1 heading: #South).
			self assert: player equals: (room at: 0@1).
			self assert: door isClosed.].
	
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 19:04:49' prior: 50955321!
test22ClosedDoorInAnotherRoomCanNotBeTrespassed

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@1);
		yourself.
	
	door := Door withPositions: doorPositions.
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: anotherRoom.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Door CantCrossAClosedDoorErrorDescription.
			self assert: (player isAt: 0@0 heading: #North).
			self assert: player equals: (anotherRoom at: 0@0).
			self assert: door isClosed.].
	
	
	! !

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 19:04:50'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 19:04:50'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 19:05:07'!
test23

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@1);
		yourself.
	
	door := Door withPositions: doorPositions.
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: anotherRoom.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Door CantCrossAClosedDoorErrorDescription.
			self assert: (player isAt: 0@0 heading: #North).
			self assert: player equals: (anotherRoom at: 0@0).
			self assert: door isClosed.].
	
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 19:07:24' prior: 50955462!
test23

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@1);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	player moveForward.
	
	self assert: (player isAt: 0@0 heading: #North).
	self assert: player equals: (anotherRoom at: 0@1).
	self assert: door isOpened.
	
	
	! !

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:07:24'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 19:09:40' prior: 50954952!
assertIsEmpty: aPosition

	^(self isEmptyAt: aPosition) 
		ifFalse: [
			(self assertPositionCanBeTrespassed: aPosition)
				ifFalse: [self error: self class positionIsNotEmptyErrorDescription]
				ifTrue: [^false].
			].
	! !
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 19:09:50'!
assertIsEmptyOrClosedDoor: aPosition

	^(self isEmptyAt: aPosition) 
		ifFalse: [
			(self assertPositionCanBeTrespassed: aPosition)
				ifFalse: [self error: self class positionIsNotEmptyErrorDescription]
				ifTrue: [^false].
			].
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 19:09:50' prior: 50951865 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	self assertIsEmptyOrClosedDoor: aPosition.
	
	contents at: aPosition put: aStageObject ! !

!methodRemoval: Room #assertIsEmpty: stamp: 'HG 12/17/2020 19:09:50'!
assertIsEmpty: aPosition

	^(self isEmptyAt: aPosition) 
		ifFalse: [
			(self assertPositionCanBeTrespassed: aPosition)
				ifFalse: [self error: self class positionIsNotEmptyErrorDescription]
				ifTrue: [^false].
			].
	!
!Room methodsFor: 'contents' stamp: 'HG 12/17/2020 19:10:47' prior: 50955531 overrides: 16880792!
at: aPosition put: aStageObject

	self assertPositionIsValid: aPosition.
	(self assertIsEmptyOrClosedDoor: aPosition)
		ifFalse: [ | aDoor |
			aDoor := (self at: aPosition).
			aStageObject crossOver: aDoor. 
			].
	
	contents at: aPosition put: aStageObject ! !
!Room methodsFor: 'contents' stamp: 'HG 12/17/2020 19:12:28' prior: 50955549 overrides: 16880792!
at: aPosition put: aStageObject
	
	| aDoor |
	self assertPositionIsValid: aPosition.
	(self assertIsEmptyOrClosedDoor: aPosition)
		ifFalse: [ 
			aDoor := (self at: aPosition).
			^aStageObject crossOver: aDoor. 
			].
	
	contents at: aPosition put: aStageObject ! !

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'HG 12/17/2020 19:13:00'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'HG 12/17/2020 19:13:00'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'HG 12/17/2020 19:13:00'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'HG 12/17/2020 19:13:00'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'HG 12/17/2020 19:13:00'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'HG 12/17/2020 19:13:00'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'HG 12/17/2020 19:13:00'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'HG 12/17/2020 19:13:00'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'HG 12/17/2020 19:13:00'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'HG 12/17/2020 19:13:00'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'HG 12/17/2020 19:13:00'!
ERROR!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'HG 12/17/2020 19:13:00'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'HG 12/17/2020 19:13:00'!
ERROR!
!Room methodsFor: 'contents' stamp: 'HG 12/17/2020 19:13:28' prior: 50955561 overrides: 16880792!
at: aPosition put: aStageObject
	
	| aDoor |
	self assertPositionIsValid: aPosition.
	(self assertIsEmptyOrClosedDoor: aPosition)
		ifFalse: [ 
			aDoor := (self at: aPosition).
			aStageObject crossOver: aDoor. 
			].
	
	contents at: aPosition put: aStageObject ! !

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'HG 12/17/2020 19:13:29'!
ERROR!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'HG 12/17/2020 19:13:36'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'HG 12/17/2020 19:13:36'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'HG 12/17/2020 19:13:36'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'HG 12/17/2020 19:13:36'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'HG 12/17/2020 19:13:36'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'HG 12/17/2020 19:13:36'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'HG 12/17/2020 19:13:36'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'HG 12/17/2020 19:13:36'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'HG 12/17/2020 19:13:36'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'HG 12/17/2020 19:13:36'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'HG 12/17/2020 19:13:36'!
ERROR!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'HG 12/17/2020 19:13:36'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'HG 12/17/2020 19:13:36'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:13:55'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 19:15:29' prior: 50955520!
assertIsEmptyOrClosedDoor: aPosition

	^(self isEmptyAt: aPosition) 
		ifFalse: [
			(self assertPositionCanBeTrespassed: aPosition)
				ifFalse: [self error: self class positionIsNotEmptyErrorDescription]
			].
	! !
!Room methodsFor: 'contents' stamp: 'HG 12/17/2020 19:15:38' prior: 50955614 overrides: 16880792!
at: aPosition put: aStageObject
	
	| aDoor |
	self assertPositionIsValid: aPosition.
	self assertIsEmptyOrClosedDoor: aPosition.
	
	contents at: aPosition put: aStageObject ! !

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:15:48'!
ERROR!
!Room methodsFor: 'contents' stamp: 'HG 12/17/2020 19:16:07' prior: 50955682 overrides: 16880792!
at: aPosition put: aStageObject
	
	| aDoor |
	self assertPositionIsValid: aPosition.
	self assertIsEmptyOrClosedDoor: aPosition.
	
	contents at: aPosition put: aStageObject ! !
!NoPointsPortableObject methodsFor: 'testing' stamp: 'HG 12/17/2020 19:19:27'!
canBeTrespassed
	^false.! !
!Door methodsFor: 'testing' stamp: 'HG 12/17/2020 19:19:27'!
canBeTrespassed
	^self isClosed.! !
!Room methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 19:19:27' prior: 50955230!
assertPositionCanBeTrespassed: aPosition

	^ (self at: aPosition) 
			canBeTrespassed
					ifTrue: [self error: Door CantCrossAClosedDoorErrorDescription]
					ifFalse: [^false].! !

!methodRemoval: NoPointsPortableObject #cannotBeTrespassed stamp: 'HG 12/17/2020 19:19:27'!
cannotBeTrespassed
	^false.!

!methodRemoval: Door #cannotBeTrespassed stamp: 'HG 12/17/2020 19:19:27'!
cannotBeTrespassed
	^self isClosed.!
!Door methodsFor: 'testing' stamp: 'HG 12/17/2020 19:19:35' prior: 50955705!
canBeTrespassed
	^self isOpened .! !
!Door methodsFor: 'testing' stamp: 'HG 12/17/2020 19:19:36' prior: 50955725!
canBeTrespassed
	^self isOpened.! !
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 19:20:15' prior: 50955709!
assertPositionCanBeTrespassed: aPosition

	^ (self at: aPosition) canBeTrespassed.! !
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 19:20:41' prior: 50955672!
assertIsEmptyOrClosedDoor: aPosition

	^(self isEmptyAt: aPosition) 
		ifFalse: [
			(self assertPositionCanBeTrespassed: aPosition)
				ifFalse: [self error: self class positionIsNotEmptyErrorDescription]
			].
	! !

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 19:20:48'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 19:20:48'!
FAILURE!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 19:20:48'!
FAILURE!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:20:48'!
FAILURE!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 19:20:54'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 19:21:09' prior: 50954827!
test21ClosedDoorCanNotBeTrespassed

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Room invalidPositionErrorDescription .
			self assert: (player isAt: 0@1 heading: #South).
			self assert: player equals: (room at: 0@1).
			self assert: door isClosed.].
	
	
	! !

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 19:21:10'!
FAILURE!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 19:21:14'!
FAILURE!

anError messageText!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 19:21:30' prior: 50955842!
test21ClosedDoorCanNotBeTrespassed

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Room positionIsNotEmptyErrorDescription.
			self assert: (player isAt: 0@1 heading: #South).
			self assert: player equals: (room at: 0@1).
			self assert: door isClosed.].
	
	
	! !

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 19:21:31'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 19:21:33'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 19:21:43' prior: 50955348!
test22ClosedDoorInAnotherRoomCanNotBeTrespassed

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@1);
		yourself.
	
	door := Door withPositions: doorPositions.
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: anotherRoom.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Room positionIsNotEmptyErrorDescription .
			self assert: (player isAt: 0@0 heading: #North).
			self assert: player equals: (anotherRoom at: 0@0).
			self assert: door isClosed.].
	
	
	! !

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 19:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:21:45'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 19:22:17' prior: 50955488!
test23

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@1);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	player moveForward.
	
	self assert: (player isAt: 0@1 heading: #North).
	self assert: player equals: (anotherRoom at: 0@1).
	self assert: door isOpened.
	
	
	! !

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:22:18'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:22:30'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'HG 12/17/2020 19:25:11' prior: 50955739!
assertIsEmptyOrClosedDoor: aPosition

	^(self isEmptyAt: aPosition) 
		ifFalse: [
			(self assertPositionCanBeTrespassed: aPosition)
				ifFalse: [self error: self class positionIsNotEmptyErrorDescription]
				
			].
	! !
!Room methodsFor: 'contents' stamp: 'HG 12/17/2020 19:28:04' prior: 50955694 overrides: 16880792!
at: aPosition put: aStageObject
	
	
	self assertPositionIsValid: aPosition.
	self assertIsEmptyOrClosedDoor: aPosition.
	(self isEmptyAt: aPosition)	
		ifFalse: [
			(self assertPositionCanBeTrespassed: aPosition)
				ifTrue: [aStageObject crossOver: (self at: aPosition) ]]
		ifTrue: [contents at: aPosition put: aStageObject ].
			
			
	! !
!Room methodsFor: 'contents' stamp: 'HG 12/17/2020 19:29:07'!
crossDoorAt: aPosition with: aStageObject

	^ (self assertPositionCanBeTrespassed: aPosition)
				ifTrue: [aStageObject crossOver: (self at: aPosition) ]! !
!Room methodsFor: 'contents' stamp: 'HG 12/17/2020 19:29:08' prior: 50955979 overrides: 16880792!
at: aPosition put: aStageObject
	
	
	self assertPositionIsValid: aPosition.
	self assertIsEmptyOrClosedDoor: aPosition.
	(self isEmptyAt: aPosition)	
		ifFalse: [
			self crossDoorAt: aPosition with: aStageObject]
		ifTrue: [contents at: aPosition put: aStageObject ].
			
			
	! !
!Room methodsFor: 'contents' stamp: 'HG 12/17/2020 19:29:15' prior: 50956000 overrides: 16880792!
at: aPosition put: aStageObject
	
	
	self assertPositionIsValid: aPosition.
	self assertIsEmptyOrClosedDoor: aPosition.
	(self isEmptyAt: aPosition)	
		ifFalse: [self crossDoorAt: aPosition with: aStageObject]
		ifTrue: [contents at: aPosition put: aStageObject ].
			
			
	! !

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'HG 12/17/2020 19:30:19'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'HG 12/17/2020 19:30:19'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'HG 12/17/2020 19:30:19'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'HG 12/17/2020 19:30:19'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'HG 12/17/2020 19:30:19'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'HG 12/17/2020 19:30:19'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'HG 12/17/2020 19:30:19'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'HG 12/17/2020 19:30:19'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'HG 12/17/2020 19:30:19'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'HG 12/17/2020 19:30:19'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'HG 12/17/2020 19:30:19'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'HG 12/17/2020 19:30:19'!
PASSED!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:30:23'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:30:42'!
crossOver: aDoor 
	self shouldBeImplemented.! !
!Room methodsFor: 'contents' stamp: 'HG 12/17/2020 19:31:31' prior: 50956012 overrides: 16880792!
at: aPosition put: aStageObject
	self assertPositionIsValid: aPosition.
	self assertIsEmptyOrClosedDoor: aPosition.
	(self isEmptyAt: aPosition)	
		ifFalse: [self crossDoorAt: aPosition with: aStageObject]
		ifTrue: [contents at: aPosition put: aStageObject ].
			
			
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:32:50' prior: 50956065!
crossOver: aDoor 
	
! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:34:37' prior: 50956082!
crossOver: aDoor 
	
	| dstRoom |
	dstRoom := aDoor keys select: [:aRoom | (aRoom = room) not ].! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:34:51' prior: 50956086!
crossOver: aDoor 
	
	| dstRoom |
	
	dstRoom := aDoor keys select: [:aRoom | (aRoom = room) not ].
	
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:35:21'!
trespassingRoomBy: aDoor

	^ aDoor keys select: [:aRoom | (aRoom = room) not ]! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:35:21' prior: 50956092!
crossOver: aDoor 
	
	| dstRoom |
	
	dstRoom := self trespassingRoomBy: aDoor.
	
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:35:34' prior: 50956104!
crossOver: aDoor 
	
	| dstRoom |
	
	dstRoom := self trespassingRoomBy: aDoor.
	
	
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:36:01'!
dstRoomByTrespassing: aDoor

	^ aDoor keys select: [:aRoom | (aRoom = room) not ]! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 19:36:01' prior: 50956110!
crossOver: aDoor 
	
	| dstRoom |
	
	dstRoom := self dstRoomByTrespassing: aDoor.
	
	
	! !

!methodRemoval: PlayableCharacter #trespassingRoomBy: stamp: 'HG 12/17/2020 19:36:01'!
trespassingRoomBy: aDoor

	^ aDoor keys select: [:aRoom | (aRoom = room) not ]!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:36:08' prior: 50956121!
crossOver: aDoor 
	
	| dstRoom |
	dstRoom := self dstRoomByTrespassing: aDoor.
	
	
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:36:43' prior: 50956132!
crossOver: aDoor 
	
	| dstRoom dstRoomDoorPosition |
	dstRoom := self dstRoomByTrespassing: aDoor.
	dstRoomDoorPosition := aDoor at: dstRoom.
	
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:37:05' prior: 50956138!
crossOver: aDoor 
	
	| dstRoom dstRoomDoorPosition |
	dstRoom := self dstRoomByTrespassing: aDoor.
	dstRoomDoorPosition := aDoor at: dstRoom.
	
	
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:38:44' prior: 50956146!
crossOver: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := self dstRoomByTrespassing: aDoor.
	dstRoomDoorPosition := aDoor at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	
	
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:38:57'!
crossForward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := self dstRoomByTrespassing: aDoor.
	dstRoomDoorPosition := aDoor at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	
	
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 19:38:57' prior: 50955992!
crossDoorAt: aPosition with: aStageObject

	^ (self assertPositionCanBeTrespassed: aPosition)
				ifTrue: [aStageObject crossForward: (self at: aPosition) ]! !

!methodRemoval: PlayableCharacter #crossOver: stamp: 'HG 12/17/2020 19:38:57'!
crossOver: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := self dstRoomByTrespassing: aDoor.
	dstRoomDoorPosition := aDoor at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	
	
	!
!Room methodsFor: 'contents' stamp: 'HG 12/17/2020 19:41:24' prior: 50956070 overrides: 16880792!
at: aPosition put: aStageObject
	self assertPositionIsValid: aPosition.
	self assertIsEmptyOrClosedDoor: aPosition.
	
			
	contents at: aPosition put: aStageObject		
! !

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'HG 12/17/2020 19:41:25'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'HG 12/17/2020 19:41:25'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'HG 12/17/2020 19:41:25'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'HG 12/17/2020 19:41:25'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'HG 12/17/2020 19:41:25'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'HG 12/17/2020 19:41:25'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'HG 12/17/2020 19:41:25'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'HG 12/17/2020 19:41:25'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'HG 12/17/2020 19:41:25'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'HG 12/17/2020 19:41:25'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'HG 12/17/2020 19:41:25'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'HG 12/17/2020 19:41:25'!
PASSED!
!Room methodsFor: 'contents' stamp: 'HG 12/17/2020 19:41:31' prior: 50956198 overrides: 16880792!
at: aPosition put: aStageObject
	self assertPositionIsValid: aPosition.
	self assertIsEmptyOrClosedDoor: aPosition.
	contents at: aPosition put: aStageObject		
! !

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 19:41:36'!
PASSED!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:41:36'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:41:36'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:43:02' prior: 50951644!
moveForward
	
	| newPosition |
	newPosition := self forwardPosition.
	(room isEmptyAt: self forwardPosition)	
		ifFalse: [self crossDoorAt: newPosition with: self]
		ifTrue: [self moveTo: self forwardPosition].
	 ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:44:51' prior: 50956347!
moveForward
	
	(room isEmptyAt: self forwardPosition)	
		ifFalse: [self crossForward: (room at: self position)]
		ifTrue: [self moveTo: self forwardPosition].
	 ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:45:25' prior: 50956357!
moveForward
	
	(room isEmptyAt: self forwardPosition)	
		ifTrue: [self moveTo: self forwardPosition].
		
		
	 ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:45:44'!
assertMovingToEmptyPosition

	^ room isEmptyAt: self forwardPosition! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:45:44' prior: 50956365!
moveForward
	
	(self assertMovingToEmptyPosition)	
		ifTrue: [self moveTo: self forwardPosition].
		
		
	 ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:46:01' prior: 50956377!
moveForward
	
	self assertMovingToEmptyPosition
		ifTrue: [self moveTo: self forwardPosition]
		ifFalse: [self crossForward: (room at: self position)]
		
	 ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:47:37' prior: 50956384!
moveForward
	
	self assertMovingToEmptyPosition
		ifTrue: [self moveTo: self forwardPosition]
		ifFalse: [
			(self assertPositionCanBeTrespassed: self forwardPosition)
				ifFalse: [self error: self class positionIsNotEmptyErrorDescription]
				ifTrue: [self crossForward: (room at: self position)]
				].

		
	 ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:47:55'!
crossOpenedDoor

	^ (self assertPositionCanBeTrespassed: self forwardPosition)
				ifFalse: [self error: self class positionIsNotEmptyErrorDescription]
				ifTrue: [self crossForward: (room at: self position)]! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:47:55' prior: 50956392!
moveForward
	
	self assertMovingToEmptyPosition
		ifTrue: [self moveTo: self forwardPosition]
		ifFalse: [
			self crossOpenedDoor
				].

		
	 ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:48:00' prior: 50956415!
moveForward
	
	self assertMovingToEmptyPosition
		ifTrue: [self moveTo: self forwardPosition]
		ifFalse: [self crossOpenedDoor].

		
	 ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 19:48:03'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 19:48:03'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 19:48:03'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 19:48:03'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 19:48:03'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 19:48:03'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 19:48:03'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 19:48:03'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 19:48:03'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 19:48:03'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 19:48:03'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 19:48:03'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 19:48:03'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 19:48:04'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 19:48:04'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 19:48:04'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 19:48:04'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 19:48:04'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 19:48:04'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 19:48:04'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 19:48:04'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 19:48:04'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:48:04'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:48:27'!
crossForwardOpenedDoor

	^ (self assertPositionCanBeTrespassed: self forwardPosition)
				ifFalse: [self error: self class positionIsNotEmptyErrorDescription]
				ifTrue: [self crossForward: (room at: self position)]! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 19:48:27' prior: 50956423!
moveForward
	
	self assertMovingToEmptyPosition
		ifTrue: [self moveTo: self forwardPosition]
		ifFalse: [self crossForwardOpenedDoor].

		
	 ! !

!methodRemoval: PlayableCharacter #crossOpenedDoor stamp: 'HG 12/17/2020 19:48:27'!
crossOpenedDoor

	^ (self assertPositionCanBeTrespassed: self forwardPosition)
				ifFalse: [self error: self class positionIsNotEmptyErrorDescription]
				ifTrue: [self crossForward: (room at: self position)]!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:50:57' prior: 50956166!
crossForward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := self dstRoomByTrespassing: aDoor.
	dstRoomDoorPosition := aDoor at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeKey: self position.
	room _ dstRoom.
	! !

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:51:06'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:51:27' prior: 50956516!
crossForwardOpenedDoor

	^ (room assertPositionCanBeTrespassed: self forwardPosition)
				ifFalse: [self error: self class positionIsNotEmptyErrorDescription]
				ifTrue: [self crossForward: (room at: self position)]! !

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:51:28'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:52:04' prior: 50956560!
crossForwardOpenedDoor

	^ (room assertPositionCanBeTrespassed: self forwardPosition)
				ifFalse: [self error: self class positionIsNotEmptyErrorDescription]
				ifTrue: [self crossForward: (room at: self forwardPosition)]! !

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:52:05'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:52:23'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:52:31' prior: 50956115!
dstRoomByTrespassing: aDoor

	^ aDoor rooms select: [:aRoom | (aRoom = room) not ]! !

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:52:34'!
ERROR!
!Door methodsFor: 'accessing' stamp: 'HG 12/17/2020 19:52:40'!
rooms
	self shouldBeImplemented.! !
!Door methodsFor: 'accessing' stamp: 'HG 12/17/2020 19:52:53' prior: 50956596!
rooms
	^positions keys.! !

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:52:54'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:54:00' prior: 50956544!
crossForward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := self dstRoomByTrespassing: aDoor.
	dstRoomDoorPosition := aDoor positions at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeKey: self position.
	room _ dstRoom.
	! !

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:54:05'!
ERROR!
!Door methodsFor: 'accessing' stamp: 'HG 12/17/2020 19:54:09'!
positions
	self shouldBeImplemented.
	^positions! !
!Door methodsFor: 'accessing' stamp: 'HG 12/17/2020 19:54:13' prior: 50956623!
positions
	^positions copy! !

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:54:14'!
ERROR!

aDoor first positions!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:56:16' prior: 50956607!
crossForward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := self dstRoomByTrespassing: aDoor.
	dstRoomDoorPosition := aDoor positions at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeKey: self position.
	room _ dstRoom.
	! !

aDoor first !

aDoor positions!

aDoor positions at: dstRoom!

aDoor rooms!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:57:47'!
ERROR!

aDoor positions!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:59:18' prior: 50956636!
crossForward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := self dstRoomByTrespassing: aDoor.
	dstRoomDoorPosition := aDoor positions at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeKey: self position.
	room _ dstRoom.
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 19:59:19'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 19:59:19'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 19:59:19'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:59:19'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 19:59:22'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:00:07' prior: 50956588!
dstRoomByTrespassing: aDoor

	^ aDoor rooms select: [:aRoom | (aRoom = room) not ] first.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:00:10'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:00:10'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:00:10'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:00:10'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:00:12'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:00:23' prior: 50956758!
dstRoomByTrespassing: aDoor

	^ aDoor rooms select: [:aRoom | (aRoom = room) not ] .! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:00:31' prior: 50956656!
crossForward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := self dstRoomByTrespassing: aDoor.
	dstRoomDoorPosition := aDoor positions at: dstRoom anyOne.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeKey: self position.
	room _ dstRoom.
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:00:31'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:00:31'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:00:31'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:00:31'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:00:34'!
ERROR!
!Door methodsFor: 'accessing' stamp: 'HG 12/17/2020 20:03:05' prior: 50956628!
positions
	^positions values.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:05:45' prior: 50956852!
dstRoomByTrespassing: aDoor

	^ aDoor rooms select: [:aRoom | (aRoom = room) not ] .! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:06:23'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:06:23'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:06:23'!
ERROR!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:06:25'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:06:31'!
ERROR!
!Door methodsFor: 'accessing' stamp: 'HG 12/17/2020 20:07:45' prior: 50956960!
positions
	^positions copy.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:07:55'!
dstRoomPositionByTrespassing: aDoor

	^ aDoor positions collect: [:aRoom | (aRoom = room) not ] .! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:59:18' prior: 50956858!
crossForward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := self dstRoomByTrespassing: aDoor.
	dstRoomDoorPosition := aDoor positions at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeKey: self position.
	room _ dstRoom.
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:00:31' prior: 50957071!
crossForward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := self dstRoomByTrespassing: aDoor.
	dstRoomDoorPosition := aDoor positions at: dstRoom anyOne.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeKey: self position.
	room _ dstRoom.
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:08:55' prior: 50957085!
crossForward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoomDoorPosition := self dstRoomByTrespassing: aDoor.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeKey: self position.
	room _ dstRoom.
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:59:18' prior: 50957099!
crossForward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := self dstRoomByTrespassing: aDoor.
	dstRoomDoorPosition := aDoor positions at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeKey: self position.
	room _ dstRoom.
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:09:29' prior: 50957112!
crossForward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := self dstRoomByTrespassing: aDoor.
	dstRoomDoorPosition := self dstRoomDoorPositionByTrespassing: aDoor.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeKey: self position.
	room _ dstRoom.
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:09:45'!
dstRoomDoorPositionByTrespassing: aDoor

	^ aDoor positions collect: [:aRoom | (aRoom = room) not ] .! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:09:50'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:09:50'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:09:50'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:09:50'!
ERROR!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:09:52'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:09:57'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 19:59:18' prior: 50957126!
crossForward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := self dstRoomByTrespassing: aDoor.
	dstRoomDoorPosition := aDoor positions at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeKey: self position.
	room _ dstRoom.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:11:13' prior: 50955944!
test23

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@1);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	player moveForward.
	
	self assert: (player isAt: 0@1 heading: #North).
	self assert: player equals: (anotherRoom at: 0@1).
	self assert: door isOpened.
	
	
	! !
!PlayableCharacterTest methodsFor: 'defaults' stamp: 'HG 12/17/2020 20:11:26'!
anotherDefaultRoom
	
	^Room ofWidth: 20 andHeight: 20! !

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:11:32'!
ERROR!

room = anotherRoom !

doorPositions at: room!

#(a Room) first!

dstRoom first!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:13:31' prior: 50957238!
crossForward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := self dstRoomByTrespassing: aDoor.
	dstRoomDoorPosition := aDoor positions first at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeKey: self position.
	room _ dstRoom.
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:13:50' prior: 50957282!
crossForward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := (self dstRoomByTrespassing: aDoor) first.
	dstRoomDoorPosition := aDoor positions first at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeKey: self position.
	room _ dstRoom.
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:14:02' prior: 50957296!
crossForward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := (self dstRoomByTrespassing: aDoor) first.
	dstRoomDoorPosition := aDoor positions at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeKey: self position.
	room _ dstRoom.
	! !

self position!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:14:40'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:15:03'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:15:14' prior: 50957311!
crossForward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := (self dstRoomByTrespassing: aDoor) first.
	dstRoomDoorPosition := aDoor positions at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeAt: self position.
	room _ dstRoom.
	! !

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:15:15'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:16:44'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:16:44'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:16:51'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:16:51'!
ERROR!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:16:51'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:16:53'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:18:32' prior: 50956527!
moveForward
	
	self assertMovingToEmptyPosition
		ifTrue: [self moveTo: self forwardPosition]
		ifFalse: [
			(room at: self forwardPosition)
				canBeTrespassed  
					ifTrue:[self crossForwardOpenedDoor] 
					ifFalse: [self invalidPositionErrorDescription ]	
			].

		
	 ! !

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:18:34'!
ERROR!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:18:40'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:18:50' prior: 50957528!
moveForward
	
	self assertMovingToEmptyPosition
		ifTrue: [self moveTo: self forwardPosition]
		ifFalse: [
			(room at: self forwardPosition)
				canBeTrespassed  
					ifTrue:[self crossForwardOpenedDoor] 
					ifFalse: [Room invalidPositionErrorDescription ]	
			].

		
	 ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:18:50'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:18:50'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:18:51'!
FAILURE!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:18:51'!
FAILURE!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:18:52'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:19:07' prior: 50957547!
moveForward
	
	self assertMovingToEmptyPosition
		ifTrue: [self moveTo: self forwardPosition]
		ifFalse: [
			(room at: self forwardPosition)
				canBeTrespassed  
					ifTrue:[self crossForwardOpenedDoor] 
					ifFalse: [Room positionIsNotEmptyErrorDescription ]	
			].

		
	 ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:19:07'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:19:07'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:19:07'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:19:07'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:19:07'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:19:07'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:19:07'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:19:07'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:19:08'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:19:08'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:19:08'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:19:08'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:19:08'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:19:08'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:19:08'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:19:08'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:19:08'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:19:08'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:19:08'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:19:08'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:19:08'!
FAILURE!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:19:08'!
FAILURE!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:19:08'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:19:09'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:19:22' prior: 50957648!
moveForward
	
	self assertMovingToEmptyPosition
		ifTrue: [self moveTo: self forwardPosition]
		ifFalse: [
			(room at: self forwardPosition)
				canBeTrespassed  
					ifTrue:[self crossForwardOpenedDoor] 
					ifFalse: [self error: Room positionIsNotEmptyErrorDescription ]	
			].

		
	 ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:19:22'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:19:23'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:19:23'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:19:23'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:19:23'!
PASSED!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:19:23'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:19:48'!
test24

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@1);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	player moveForward.
	
	self assert: (player isAt: 0@1 heading: #North).
	self assert: player equals: (anotherRoom at: 0@1).
	self assert: door isOpened.
	
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:20:14' prior: 50957847!
test24

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (9@9);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	player moveForward.
	
	self assert: (player isAt: 0@1 heading: #North).
	self assert: player equals: (anotherRoom at: 0@1).
	self assert: door isOpened.
	
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:21:33' prior: 50957867!
test24

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (9@9);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: anotherRoom.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = Room invalidPositionErrorDescription ].
	
	self assert: (player isAt: 0@1 heading: #North).
	self assert: player equals: (anotherRoom at: 0@1).
	self assert: door isOpened.
	
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:22:02' prior: 50957887!
test24

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (9@9);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: anotherRoom.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = Room invalidPositionErrorDescription ].
	
	
	
	! !

!testRun: #PlayableCharacterTest #test24 stamp: 'HG 12/17/2020 20:22:08'!
FAILURE!

heading forwardPoint!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:24:06'!
test25

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (9@9);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: anotherRoom.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = Room invalidPositionErrorDescription ].
	
	
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:24:45' prior: 50957912!
test24

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (9@9);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: anotherRoom.
	player moveForward.
	
	self assert: (player isAt: 9@8 heading: #South).
	self assert: player equals: (room at: 9@8).
	self assert: door isOpened.
	
	
	
	! !

!testRun: #PlayableCharacterTest #test24 stamp: 'HG 12/17/2020 20:24:48'!
PASSED!

!methodRemoval: PlayableCharacterTest #test25 stamp: 'HG 12/17/2020 20:26:21'!
test25

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (9@9);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: anotherRoom.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			anError messageText = Room invalidPositionErrorDescription ].
	
	
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:26:27'!
test25

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@1);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	player moveForward.
	
	self assert: (player isAt: 0@1 heading: #North).
	self assert: player equals: (anotherRoom at: 0@1).
	self assert: door isOpened.
	
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:26:51' prior: 50958000!
test25

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@1);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: room.
	player moveBackward.
	
	self assert: (player isAt: 0@1 heading: #North).
	self assert: player equals: (anotherRoom at: 0@1).
	self assert: door isOpened.
	
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:27:04' prior: 50958020!
test25

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@1);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: room.
	player moveBackward.
	
	self assert: (player isAt: 0@0 heading: #North).
	self assert: player equals: (anotherRoom at: 0@0).
	self assert: door isOpened.
	
	
	! !

!testRun: #PlayableCharacterTest #test25 stamp: 'HG 12/17/2020 20:27:04'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:28:22'!
crossOpenedDoorOrFail

	^ (room at: self forwardPosition)
				canBeTrespassed  
					ifTrue:[self crossForwardOpenedDoor] 
					ifFalse: [self error: Room positionIsNotEmptyErrorDescription ]! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:28:22' prior: 50957749!
moveForward
	
	self assertMovingToEmptyPosition
		ifTrue: [self moveTo: self forwardPosition]
		ifFalse: [
			self crossOpenedDoorOrFail	
			].

		
	 ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:28:30' prior: 50958071!
moveForward
	
	self assertMovingToEmptyPosition
		ifTrue: [self moveTo: self forwardPosition]
		ifFalse: [self crossOpenedDoorOrFail].

		
	 ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:28:47'!
crossOpenedDoorOrAssertsItsClosed

	^ (room at: self forwardPosition)
				canBeTrespassed  
					ifTrue:[self crossForwardOpenedDoor] 
					ifFalse: [self error: Room positionIsNotEmptyErrorDescription ]! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 20:28:47' prior: 50958079!
moveForward
	
	self assertMovingToEmptyPosition
		ifTrue: [self moveTo: self forwardPosition]
		ifFalse: [self crossOpenedDoorOrAssertsItsClosed].

		
	 ! !

!methodRemoval: PlayableCharacter #crossOpenedDoorOrFail stamp: 'HG 12/17/2020 20:28:47'!
crossOpenedDoorOrFail

	^ (room at: self forwardPosition)
				canBeTrespassed  
					ifTrue:[self crossForwardOpenedDoor] 
					ifFalse: [self error: Room positionIsNotEmptyErrorDescription ]!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:29:14'!
crossForwardOpenedDoorOrAssertsItsClosed

	^ (room at: self forwardPosition)
				canBeTrespassed  
					ifTrue:[self crossForwardOpenedDoor] 
					ifFalse: [self error: Room positionIsNotEmptyErrorDescription ]! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 20:29:14' prior: 50958096!
moveForward
	
	self assertMovingToEmptyPosition
		ifTrue: [self moveTo: self forwardPosition]
		ifFalse: [self crossForwardOpenedDoorOrAssertsItsClosed].

		
	 ! !

!methodRemoval: PlayableCharacter #crossOpenedDoorOrAssertsItsClosed stamp: 'HG 12/17/2020 20:29:14'!
crossOpenedDoorOrAssertsItsClosed

	^ (room at: self forwardPosition)
				canBeTrespassed  
					ifTrue:[self crossForwardOpenedDoor] 
					ifFalse: [self error: Room positionIsNotEmptyErrorDescription ]!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:29:48' prior: 50951639!
moveBackward
	
	self moveTo: self position - heading forwardPoint.
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:30:31' prior: 50958141!
moveBackward
	
	self assertMovingToEmptyPosition
		ifTrue: [self moveTo: self position - heading forwardPoint.]
		ifFalse: [self crossBackwardOpenedDoorOrAssertsItsClosed].
! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:30:41'!
crossBackwardOpenedDoorOrAssertsItsClosed

	^ (room at: self forwardPosition)
				canBeTrespassed  
					ifTrue:[self crossForwardOpenedDoor] 
					ifFalse: [self error: Room positionIsNotEmptyErrorDescription ]! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:31:01' prior: 50958155!
crossBackwardOpenedDoorOrAssertsItsClosed

	^ (room at: self position - heading forwardPoint)
				canBeTrespassed  
					ifTrue:[self crossForwardOpenedDoor] 
					ifFalse: [self error: Room positionIsNotEmptyErrorDescription ]! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:31:06'!
backwardPosition

	^ self position - heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:31:06' prior: 50958165!
crossBackwardOpenedDoorOrAssertsItsClosed

	^ (room at: self backwardPosition)
				canBeTrespassed  
					ifTrue:[self crossForwardOpenedDoor] 
					ifFalse: [self error: Room positionIsNotEmptyErrorDescription ]! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:31:13' prior: 50958180!
crossBackwardOpenedDoorOrAssertsItsClosed

	^ (room at: self backwardPosition)
				canBeTrespassed  
					ifTrue:[self crossBackwardOpenedDoor] 
					ifFalse: [self error: Room positionIsNotEmptyErrorDescription ]! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:31:25'!
crossBackwardOpenedDoor

	^ (room assertPositionCanBeTrespassed: self forwardPosition)
				ifFalse: [self error: self class positionIsNotEmptyErrorDescription]
				ifTrue: [self crossForward: (room at: self forwardPosition)]! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:31:37' prior: 50958200!
crossBackwardOpenedDoor

	^ (room assertPositionCanBeTrespassed: self backwardPosition)
				ifFalse: [self error: self class positionIsNotEmptyErrorDescription]
				ifTrue: [self crossBackward: (room at: self backwardPosition)]! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:31:44'!
crossBackward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := (self dstRoomByTrespassing: aDoor) first.
	dstRoomDoorPosition := aDoor positions at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeAt: self position.
	room _ dstRoom.
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:32:07' prior: 50958220!
crossBackward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := (self dstRoomByTrespassing: aDoor) first.
	dstRoomDoorPosition := aDoor positions at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition + heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeAt: self position.
	room _ dstRoom.
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:32:36' prior: 50958234!
crossBackward: aDoor 
	
	| dstRoom dstRoomDoorPosition dstRoomPlayerPosition |
	dstRoom := (self dstRoomByTrespassing: aDoor) first.
	dstRoomDoorPosition := aDoor positions at: dstRoom.
	dstRoomPlayerPosition := dstRoomDoorPosition - heading forwardPoint.
	
	dstRoom at: dstRoomPlayerPosition put: self.
	room removeAt: self position.
	room _ dstRoom.
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test24 stamp: 'HG 12/17/2020 20:32:43'!
PASSED!

!testRun: #PlayableCharacterTest #test25 stamp: 'HG 12/17/2020 20:32:43'!
ERROR!

!testRun: #PlayableCharacterTest #test25 stamp: 'HG 12/17/2020 20:32:43'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:34:24'!
assertMovingToEmptyBackwardPosition

	^ room isEmptyAt: self backwardPosition ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/17/2020 20:34:44' prior: 50958147!
moveBackward
	
	self assertMovingToEmptyBackwardPosition
		ifTrue: [self moveTo: self position - heading forwardPoint.]
		ifFalse: [self crossBackwardOpenedDoorOrAssertsItsClosed].
! !

!testRun: #PlayableCharacterTest #test25 stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:34:51'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:34:52'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:34:52'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:34:52'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:34:52'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:34:52'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:34:52'!
PASSED!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:34:52'!
PASSED!

!testRun: #PlayableCharacterTest #test24 stamp: 'HG 12/17/2020 20:34:52'!
PASSED!

!testRun: #PlayableCharacterTest #test25 stamp: 'HG 12/17/2020 20:34:52'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:35:15'!
test26

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: room.
	player moveBackward.
	
	self assert: (player isAt: 0@0 heading: #North).
	self assert: player equals: (anotherRoom at: 0@0).
	self assert: door isOpened.
	
	
	! !

!testRun: #PlayableCharacterTest #test26 stamp: 'HG 12/17/2020 20:35:20'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:36:05' prior: 50958463!
test26

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: room.
	
	self
		should: [player moveBackward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionErrorDescription ].
	
	! !

!testRun: #PlayableCharacterTest #test26 stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test24 stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test25 stamp: 'HG 12/17/2020 20:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test26 stamp: 'HG 12/17/2020 20:36:06'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:36:41'!
test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@1);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	player moveForward.
	
	self assert: (player isAt: 0@1 heading: #North).
	self assert: player equals: (anotherRoom at: 0@1).
	self assert: door isOpened.
	
	
	! !

!methodRemoval: PlayableCharacterTest #test23 stamp: 'HG 12/17/2020 20:36:41'!
test23

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@1);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: room.
	player moveForward.
	
	self assert: (player isAt: 0@1 heading: #North).
	self assert: player equals: (anotherRoom at: 0@1).
	self assert: door isOpened.
	
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:37:01'!
test24MovingForwardInAnotherDirectionGoesRight

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (9@9);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: anotherRoom.
	player moveForward.
	
	self assert: (player isAt: 9@8 heading: #South).
	self assert: player equals: (room at: 9@8).
	self assert: door isOpened.
	
	
	
	! !

!methodRemoval: PlayableCharacterTest #test24 stamp: 'HG 12/17/2020 20:37:01'!
test24

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (9@9);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: anotherRoom.
	player moveForward.
	
	self assert: (player isAt: 9@8 heading: #South).
	self assert: player equals: (room at: 9@8).
	self assert: door isOpened.
	
	
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:37:24'!
test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@1);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: room.
	player moveBackward.
	
	self assert: (player isAt: 0@0 heading: #North).
	self assert: player equals: (anotherRoom at: 0@0).
	self assert: door isOpened.
	
	
	! !

!methodRemoval: PlayableCharacterTest #test25 stamp: 'HG 12/17/2020 20:37:24'!
test25

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@1);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: room.
	player moveBackward.
	
	self assert: (player isAt: 0@0 heading: #North).
	self assert: player equals: (anotherRoom at: 0@0).
	self assert: door isOpened.
	
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:37:58'!
test26CanNotMoveBackwardTrespassingALimitRoomDoor

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: room.
	
	self
		should: [player moveBackward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionErrorDescription ].
	
	! !

!methodRemoval: PlayableCharacterTest #test26 stamp: 'HG 12/17/2020 20:37:58'!
test26

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: room.
	
	self
		should: [player moveBackward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionErrorDescription ].
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:38:26'!
test27CanNotMoveForwardTrespassingALimitRoomDoor

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (9@9);
		at: anotherRoom put: (0@2);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: room.
	
	self
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionErrorDescription ].
	
	! !

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 20:38:30'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:38:40' prior: 50958765!
test27CanNotMoveForwardTrespassingALimitRoomDoor

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (9@9);
		at: anotherRoom put: (0@2);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: anotherRoom.
	
	self
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionErrorDescription ].
	
	! !

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 20:38:45'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 20:38:45'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:40:24' prior: 50958791!
test27CanNotMoveForwardTrespassingALimitRoomDoor

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (9@9);
		at: anotherRoom put: (0@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: anotherRoom.
	
	self
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionErrorDescription ].
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:41:07'!
test28

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (9@9);
		at: anotherRoom put: (0@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: anotherRoom.
	
	self
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionErrorDescription ].
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:41:17' prior: 50958943!
test28

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (9@9);
		at: anotherRoom put: (0@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: anotherRoom.
	
	self
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionErrorDescription ].
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:42:07' prior: 50958964!
test28

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (9@9);
		at: anotherRoom put: (0@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self keyBackpack at: 0@1 heading: #North in: anotherRoom.
	
	self
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionErrorDescription ].
	
	! !

!classDefinition: #Key category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'HG 12/17/2020 20:43:12'!
PortableObject subclass: #Key
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!PlayableCharacterTest methodsFor: 'defaults' stamp: 'HG 12/17/2020 20:42:51'!
keyBackpack

	| keyBackpack |
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: Key new. ! !

----SNAPSHOT----(17 December 2020 20:43:23) CuisUniversity-4137.image priorSource: 19377060!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:46:12' prior: 50958985!
test28

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self keyBackpack at: 0@1 heading: #South in: room.
	
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:46:58' prior: 50959024!
test28

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self keyBackpack at: 0@2 heading: #South in: room.
	player open: door. 
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:47:37' prior: 50959040!
test28

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self keyBackpack at: 0@2 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = self ].
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:48:41' prior: 50959056!
test28

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self keyBackpack at: 0@2 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = self invalidPositionErrorDescription ].
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:48:49' prior: 50959076!
test28

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self keyBackpack at: 0@2 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionErrorDescription ].
	
	! !

!testRun: #PlayableCharacterTest #test28 stamp: 'HG 12/17/2020 20:48:50'!
ERROR!
!Key methodsFor: 'adding' stamp: 'HG 12/17/2020 20:49:13' overrides: 50952089!
assertCanAddTo: aBackpack
	^true.! !

!testRun: #PlayableCharacterTest #test28 stamp: 'HG 12/17/2020 20:49:24'!
ERROR!
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 20:49:37'!
open: aDoor 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 20:49:51' prior: 50959127!
open: aDoor 
	! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 20:49:59' prior: 50959132!
open: aDoor 
	^Room invalidPositionErrorDescription. ! !

!testRun: #PlayableCharacterTest #test28 stamp: 'HG 12/17/2020 20:50:00'!
FAILURE!
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 20:50:14' prior: 50959136!
open: aDoor 
	^self error: Room invalidPositionErrorDescription. ! !

!testRun: #PlayableCharacterTest #test28 stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test28 stamp: 'HG 12/17/2020 20:50:17'!
PASSED!

!testRun: #PlayableCharacterTest #test28 stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test28 stamp: 'HG 12/17/2020 20:50:20'!
PASSED!

!testRun: #PlayableCharacterTest #test28 stamp: 'HG 12/17/2020 20:53:34'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:53:34'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:53:34'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:53:34'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:53:34'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:53:34'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:53:34'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:53:34'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:53:34'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:53:34'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:53:34'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:53:34'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:53:35'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:53:35'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:53:35'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:53:35'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:53:35'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:53:35'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:53:35'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:53:35'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:53:35'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:53:35'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:53:35'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 20:53:35'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 20:53:35'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 20:53:35'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 20:53:35'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 20:53:35'!
PASSED!

!testRun: #PlayableCharacterTest #test28 stamp: 'HG 12/17/2020 20:53:35'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:54:47'!
test29

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self keyBackpack at: 0@1 heading: #South in: room.
	player open: door.
	
! !
!PlayableCharacterTest methodsFor: 'defaults' stamp: 'HG 12/17/2020 20:55:32' prior: 50959014!
keyBackpack

	| keyBackpack |
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: self validKey. ! !
!PlayableCharacterTest methodsFor: 'defaults' stamp: 'HG 12/17/2020 20:55:44'!
validKey
	^Key new.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:56:32' prior: 50959475!
test29

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close.
	
	player := PlayableCharacter named: 'Luigi' using: self keyBackpack at: 0@1 heading: #South in: room.
	player open: door.
	
! !
!Door methodsFor: 'actions' stamp: 'HG 12/17/2020 20:57:25'!
close: aKey
	state _ self closed.! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 20:57:25' prior: 50955910!
test22ClosedDoorInAnotherRoomCanNotBeTrespassed

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@1);
		yourself.
	
	door := Door withPositions: doorPositions.
	door close: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: anotherRoom.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Room positionIsNotEmptyErrorDescription .
			self assert: (player isAt: 0@0 heading: #North).
			self assert: player equals: (anotherRoom at: 0@0).
			self assert: door isClosed.].
	
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 20:57:25' prior: 50959097!
test28

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self keyBackpack at: 0@2 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionErrorDescription ].
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 20:57:25' prior: 50955876!
test21ClosedDoorCanNotBeTrespassed

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	door close: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Room positionIsNotEmptyErrorDescription.
			self assert: (player isAt: 0@1 heading: #South).
			self assert: player equals: (room at: 0@1).
			self assert: door isClosed.].
	
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 20:57:25' prior: 50959502!
test29

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self keyBackpack at: 0@1 heading: #South in: room.
	player open: door.
	
! !

!methodRemoval: Door #close stamp: 'HG 12/17/2020 20:57:25'!
close
	state _ self closed.!

!testRun: #PlayableCharacterTest #test29 stamp: 'HG 12/17/2020 20:57:28'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:57:52' prior: 50959599!
test29

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	player open: door.
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:58:04' prior: 50959621!
test29

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionErrorDescription ].
	
! !

!testRun: #PlayableCharacterTest #test29 stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test28 stamp: 'HG 12/17/2020 20:58:05'!
PASSED!

!testRun: #PlayableCharacterTest #test29 stamp: 'HG 12/17/2020 20:58:05'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:58:10'!
test30

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionErrorDescription ].
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:58:29' prior: 50959770!
test30

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self keyBackpack at: 0@1 heading: #South in: room.
	player open: door.
	
	self assert: door isOpened. 
	
! !

!testRun: #PlayableCharacterTest #test30 stamp: 'HG 12/17/2020 20:58:33'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:59:04' prior: 50959550!
test28

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self keyBackpack at: 0@2 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 20:59:11' prior: 50959638!
test29

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door close: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !
!Door class methodsFor: 'error messages' stamp: 'HG 12/17/2020 20:59:31'!
canNotOpenDoorErrorDescription
	^'Can not open a Door'.! !

!testRun: #PlayableCharacterTest #test30 stamp: 'HG 12/17/2020 20:59:43'!
ERROR!
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 20:59:55' prior: 50959144!
open: aDoor 
	^self error: Door canNotOpenDoorErrorDescription . ! !

!testRun: #PlayableCharacterTest #test30 stamp: 'HG 12/17/2020 20:59:57'!
ERROR!

!classDefinition: #Door category: #'ISW1-2020-2C-Recuperatorio-2doParcial' stamp: 'HG 12/17/2020 21:00:26'!
StageObject subclass: #Door
	instanceVariableNames: 'positions state closedBy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Recuperatorio-2doParcial'!
!Door methodsFor: 'actions' stamp: 'HG 12/17/2020 21:00:25' prior: 50959517!
close: aKey
	state _ self closed.
	closedBy _ aKey.! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:01:26' prior: 50959862!
open: aDoor 
	
	(backpack includes: aDoor openKey)
		ifFalse: [^self error: Door canNotOpenDoorErrorDescription.]
		ifTrue: [aDoor open].

	! !

!testRun: #PlayableCharacterTest #test30 stamp: 'HG 12/17/2020 21:01:30'!
ERROR!
!Door methodsFor: 'accessing' stamp: 'HG 12/17/2020 21:01:34'!
openKey
	self shouldBeImplemented.! !
!Door methodsFor: 'accessing' stamp: 'HG 12/17/2020 21:01:47' prior: 50959894!
openKey
	^closedBy.! !

!testRun: #PlayableCharacterTest #test30 stamp: 'HG 12/17/2020 21:01:52'!
ERROR!
!PlayableCharacterTest methodsFor: 'defaults' stamp: 'HG 12/17/2020 21:02:32' prior: 50959491!
keyBackpack

	| keyBackpack |
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: self validKey. 
	^keyBackpack.! !

!testRun: #PlayableCharacterTest #test30 stamp: 'HG 12/17/2020 21:02:34'!
ERROR!

aDoor openKey!

backpack includes: aDoor openKey!

backpack!

 aDoor openKey!
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:05:38' prior: 50959884!
open: aDoor 
	
	(self backpackIncludes: aDoor openKey)
		ifFalse: [^self error: Door canNotOpenDoorErrorDescription.]
		ifTrue: [aDoor open].

	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test28 stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test29 stamp: 'HG 12/17/2020 21:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test30 stamp: 'HG 12/17/2020 21:05:39'!
ERROR!

!testRun: #PlayableCharacterTest #test30 stamp: 'HG 12/17/2020 21:05:39'!
ERROR!
!Key methodsFor: 'testing' stamp: 'HG 12/17/2020 21:06:49' overrides: 50952857!
canBeAddedToNonPortableObject
	^true.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:08:01' prior: 50959792!
test30

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door close: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player open: door.
	
	self assert: door isOpened. 
	
! !
!Door methodsFor: 'actions' stamp: 'HG 12/17/2020 21:08:20'!
closeUsing: aKey
	state _ self closed.
	closedBy _ aKey.! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 21:08:20' prior: 50960044!
test30

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player open: door.
	
	self assert: door isOpened. 
	
! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 21:08:20' prior: 50959572!
test21ClosedDoorCanNotBeTrespassed

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	door closeUsing: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Room positionIsNotEmptyErrorDescription.
			self assert: (player isAt: 0@1 heading: #South).
			self assert: player equals: (room at: 0@1).
			self assert: door isClosed.].
	
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 21:08:20' prior: 50959833!
test29

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door closeUsing: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 21:08:20' prior: 50959812!
test28

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door closeUsing: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self keyBackpack at: 0@2 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'HG 12/17/2020 21:08:20' prior: 50959522!
test22ClosedDoorInAnotherRoomCanNotBeTrespassed

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@1);
		yourself.
	
	door := Door withPositions: doorPositions.
	door closeUsing: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: anotherRoom.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Room positionIsNotEmptyErrorDescription .
			self assert: (player isAt: 0@0 heading: #North).
			self assert: player equals: (anotherRoom at: 0@0).
			self assert: door isClosed.].
	
	
	! !

!methodRemoval: Door #close: stamp: 'HG 12/17/2020 21:08:20'!
close: aKey
	state _ self closed.
	closedBy _ aKey.!

!testRun: #PlayableCharacterTest #test30 stamp: 'HG 12/17/2020 21:08:22'!
ERROR!

!testRun: #PlayableCharacterTest #test30 stamp: 'HG 12/17/2020 21:08:34'!
ERROR!
!Door methodsFor: 'actions' stamp: 'HG 12/17/2020 21:08:41'!
open
	self shouldBeImplemented.! !
!Door methodsFor: 'actions' stamp: 'HG 12/17/2020 21:09:01' prior: 50960202!
open
	state _ self opened. ! !

!testRun: #PlayableCharacterTest #test30 stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test28 stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test29 stamp: 'HG 12/17/2020 21:09:03'!
PASSED!

!testRun: #PlayableCharacterTest #test30 stamp: 'HG 12/17/2020 21:09:03'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:09:35'!
test28CanNotOpenDoorFarAway

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door closeUsing: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self keyBackpack at: 0@2 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
	! !

!methodRemoval: PlayableCharacterTest #test28 stamp: 'HG 12/17/2020 21:09:35'!
test28

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door closeUsing: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self keyBackpack at: 0@2 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:09:40' prior: 50960324!
test28CanNotOpenDoorFarAway

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door closeUsing: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
	! !

!methodRemoval: PlayableCharacterTest #keyBackpack stamp: 'HG 12/17/2020 21:09:44'!
keyBackpack

	| keyBackpack |
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: self validKey. 
	^keyBackpack.!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:10:05'!
test29CanNotOpenDoorWithoutKey

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door closeUsing: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !

!methodRemoval: PlayableCharacterTest #test29 stamp: 'HG 12/17/2020 21:10:05'!
test29

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door closeUsing: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:10:10'!
test31

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player open: door.
	
	self assert: door isOpened. 
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:11:02' prior: 50960071!
test30

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	door closeUsing: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:11:18' prior: 50960461!
test30

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:11:31' prior: 50960483!
test30

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !

!testRun: #PlayableCharacterTest #test30 stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotOpenDoorFarAway stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test30 stamp: 'HG 12/17/2020 21:11:32'!
PASSED!

!testRun: #PlayableCharacterTest #test31 stamp: 'HG 12/17/2020 21:11:32'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:11:48'!
test30CanNotOpenDoorWithoutFacingCorrectDirection

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !

!methodRemoval: PlayableCharacterTest #test30 stamp: 'HG 12/17/2020 21:11:48'!
test30

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: room.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:12:15'!
test31DoorOpensCorrectlyWithRightPositionAndValidKey

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player open: door.
	
	self assert: door isOpened. 
	
! !

!methodRemoval: PlayableCharacterTest #test31 stamp: 'HG 12/17/2020 21:12:15'!
test31

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player open: door.
	
	self assert: door isOpened. 
	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:12:52' prior: 50960704!
test31DoorOpensCorrectlyWithRightPositionAndValidKey

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player open: door.
	
	self assert: door isOpened. 
	self assert: player backpackIncludes: validKey.
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:12:58' prior: 50960749!
test31DoorOpensCorrectlyWithRightPositionAndValidKey

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player open: door.
	
	self assert: door isOpened. 
	self assert: (player backpackIncludes: validKey).
	
! !

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotOpenDoorFarAway stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:12:59'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:12:59'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:13:11'!
test32

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player open: door.
	
	self assert: door isOpened. 
	self assert: (player backpackIncludes: validKey).
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:15:16' prior: 50960094!
test21ClosedDoorCanNotBeTrespassed

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	player closeUsing: self validKey.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Room positionIsNotEmptyErrorDescription.
			self assert: (player isAt: 0@1 heading: #South).
			self assert: player equals: (room at: 0@1).
			self assert: door isClosed.].
	
	
	! !

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:15:20'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:15:30' prior: 50960945!
test21ClosedDoorCanNotBeTrespassed

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	player closeUsing: self validKey.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Room positionIsNotEmptyErrorDescription.
			self assert: (player isAt: 0@1 heading: #South).
			self assert: player equals: (room at: 0@1).
			self assert: door isClosed.].
	
	
	! !

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:15:31'!
ERROR!
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:16:28' prior: 50959918!
open: aDoor 
	
	(self backpackIncludes: aDoor openKey)
		ifFalse: [^self error: Door canNotOpenDoorErrorDescription.]
		ifTrue: [aDoor open].

	! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:16:56' prior: 50961007!
open: aDoor 
	(self backpackIncludes: aDoor openKey)
		ifFalse: [^self error: Door canNotOpenDoorErrorDescription.]
		ifTrue: [aDoor open].

	! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:17:01' prior: 50961015!
open: aDoor 
	(self backpackIncludes: aDoor openKey)
		ifFalse: [^self error: Door canNotOpenDoorErrorDescription.]
		ifTrue: [aDoor open].

	! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:18:17' prior: 50961023!
open: aDoor 
	(room at: self forwardPosition) 
		isDoor ifFalse:[Door canNotOpenDoorErrorDescription.].

	(self backpackIncludes: aDoor openKey)
		ifFalse: [^self error: Door canNotOpenDoorErrorDescription.]
		ifTrue: [aDoor open].

	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:18:19'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotOpenDoorFarAway stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:18:19'!
ERROR!

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:18:19'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:18:19'!
ERROR!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:18:19'!
ERROR!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:18:21'!
ERROR!

!testRun: #PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:18:27'!
ERROR!
!StageObject methodsFor: 'testing' stamp: 'HG 12/17/2020 21:18:42'!
isDoor
	self subclassResponsibility .! !
!Door methodsFor: 'testing' stamp: 'HG 12/17/2020 21:18:51' overrides: 50961168!
isDoor
	^true.! !
!NonPortableObject methodsFor: 'testing' stamp: 'HG 12/17/2020 21:19:04' overrides: 50961168!
isDoor
	^false.! !
!PortableObject methodsFor: 'testing' stamp: 'HG 12/17/2020 21:19:10' overrides: 50961168!
isDoor
	^false.! !

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:19:15'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotOpenDoorFarAway stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:19:15'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:19:15'!
ERROR!
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:19:57'!
closeUsing: aKey! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:20:19' prior: 50961311!
closeUsing: aKey

	(room at: self forwardPosition) 
		isDoor ifFalse:[Door canNotOpenDoorErrorDescription.].! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:20:26'!
assertFacingADoor

	^ (room at: self forwardPosition) 
		isDoor ifFalse:[Door canNotOpenDoorErrorDescription.]! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:20:26' prior: 50961315!
closeUsing: aKey

	self assertFacingADoor.! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:20:44' prior: 50961321!
assertFacingADoor

	^ (room at: self forwardPosition) 
		isDoor ifFalse:[self error: Door canNotOpenDoorErrorDescription.]! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:20:59' prior: 50961328!
closeUsing: aKey

	| door |
	self assertFacingADoor.	
	door := room at: self forwardPosition.
	door closeUsing: aKey.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotOpenDoorFarAway stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:21:01'!
PASSED!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:21:01'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:21:25' prior: 50960921!
test32

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.

	player open: door.
	
	self assert: door isOpened. 
	self assert: (player backpackIncludes: validKey).
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:21:43' prior: 50960774!
test31DoorOpensCorrectlyWithRightPositionAndValidKey

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.

	player open: door.
	
	self assert: door isOpened. 
	self assert: (player backpackIncludes: validKey).
	
! !

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotOpenDoorFarAway stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:21:44'!
PASSED!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:21:44'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:21:53' prior: 50960652!
test30CanNotOpenDoorWithoutFacingCorrectDirection

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #North in: room.
	player closeUsing: validKey.

	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:21:54'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:22:03' prior: 50961642!
test30CanNotOpenDoorWithoutFacingCorrectDirection

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: self keyBackpack at: 0@1 heading: #North in: room.
	player closeUsing: validKey.

	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:22:07' prior: 50961674!
test30CanNotOpenDoorWithoutFacingCorrectDirection

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using:  keyBackpack at: 0@1 heading: #North in: room.
	player closeUsing: validKey.

	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:22:08'!
ERROR!
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:22:41' prior: 50961333!
assertFacingADoor

	| door |
	door := (room at: self forwardPosition) ifAbsent: [self error: Door canNotOpenDoorErrorDescription.]
		isDoor ifFalse:[self error: Door canNotOpenDoorErrorDescription.]! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:22:54' prior: 50961734!
assertFacingADoor

	| object |
	object := (room at: self forwardPosition) ifAbsent: [self error: Door canNotOpenDoorErrorDescription.]
		isDoor ifFalse:[self error: Door canNotOpenDoorErrorDescription.]! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:23:01' prior: 50961744!
assertFacingADoor

	| object |
	object := (room at: self forwardPosition) ifAbsent: [self error: Door canNotOpenDoorErrorDescription.]
	object isDoor ifFalse:[self error: Door canNotOpenDoorErrorDescription.]! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:23:10' prior: 50961754!
assertFacingADoor

	| object |
	object := (room at: self forwardPosition) ifAbsent: [self error: Door canNotOpenDoorErrorDescription.].
	object isDoor ifFalse:[^self error: Door canNotOpenDoorErrorDescription.]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:23:11'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotOpenDoorFarAway stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:23:11'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:23:11'!
ERROR!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:23:11'!
ERROR!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:23:11'!
ERROR!
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:23:30' prior: 50961764!
assertFacingADoor

	| object |
	object := room at: self forwardPosition ifAbsent: [self error: Door canNotOpenDoorErrorDescription.].
	object isDoor ifFalse:[^self error: Door canNotOpenDoorErrorDescription.]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:23:31'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotOpenDoorFarAway stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:23:31'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:23:31'!
ERROR!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:23:31'!
ERROR!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:23:31'!
ERROR!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:23:33'!
ERROR!
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:23:50' prior: 50961894!
assertFacingADoor

	| object |
	object := room contents at: self forwardPosition ifAbsent: [self error: Door canNotOpenDoorErrorDescription.].
	object isDoor ifFalse:[^self error: Door canNotOpenDoorErrorDescription.]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:23:51'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotOpenDoorFarAway stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:23:51'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:23:51'!
ERROR!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:23:51'!
ERROR!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:23:51'!
ERROR!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:23:53'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:24:06'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:24:06'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:24:06'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:24:06'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:24:06'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:24:06'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:24:06'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:24:06'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:24:07'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotOpenDoorFarAway stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:24:07'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:24:07'!
ERROR!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:24:07'!
ERROR!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:24:07'!
ERROR!

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:24:09'!
ERROR!
!Room methodsFor: 'accessing' stamp: 'HG 12/17/2020 21:24:13'!
contents
	self shouldBeImplemented.
	^contents! !
!Room methodsFor: 'accessing' stamp: 'HG 12/17/2020 21:24:17' prior: 50962286!
contents
	^contents copy! !

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:24:18'!
ERROR!

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:24:27'!
ERROR!

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:24:34'!
ERROR!

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:24:50'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:25:08' prior: 50961702!
test30CanNotOpenDoorWithoutFacingCorrectDirection

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using:  keyBackpack at: 0@1 heading: #North in: room.
	self 
		should: [player closeUsing: validKey.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotOpenDoorFarAway stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:25:09'!
PASSED!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:25:09'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:25:16'!
test30CanNotCloseDoorWithoutFacingCorrectDirection

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using:  keyBackpack at: 0@1 heading: #North in: room.
	self 
		should: [player closeUsing: validKey.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !

!methodRemoval: PlayableCharacterTest #test30CanNotOpenDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:25:16'!
test30CanNotOpenDoorWithoutFacingCorrectDirection

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	door closeUsing: validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using:  keyBackpack at: 0@1 heading: #North in: room.
	self 
		should: [player closeUsing: validKey.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:26:04' prior: 50960166!
test22ClosedDoorInAnotherRoomCanNotBeTrespassed

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@1);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: anotherRoom.
	player closeUsing: self validKey.
	
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Room positionIsNotEmptyErrorDescription .
			self assert: (player isAt: 0@0 heading: #North).
			self assert: player equals: (anotherRoom at: 0@0).
			self assert: door isClosed.].
	
	
	! !

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotOpenDoorFarAway stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotCloseDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:26:05'!
PASSED!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:26:05'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:26:20' prior: 50960367!
test28CanNotOpenDoorFarAway

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #South in: room.
	player closeUsing: self validKey.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
	! !

!testRun: #PlayableCharacterTest #test28CanNotOpenDoorFarAway stamp: 'HG 12/17/2020 21:26:20'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:26:29'!
test28CanNotCloseDoorFarAway

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #South in: room.
	player closeUsing: self validKey.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
	! !

!methodRemoval: PlayableCharacterTest #test28CanNotOpenDoorFarAway stamp: 'HG 12/17/2020 21:26:29'!
test28CanNotOpenDoorFarAway

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #South in: room.
	player closeUsing: self validKey.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:26:37' prior: 50962696!
test28CanNotCloseDoorFarAway

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #South in: room.
	self 
		should: [player closeUsing: self validKey.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:26:42' prior: 50962741!
test28CanNotCloseDoorFarAway

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #South in: room.
	
	self 
		should: [player closeUsing: self validKey.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
	! !

!testRun: #PlayableCharacterTest #test28CanNotCloseDoorFarAway stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotCloseDoorFarAway stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotCloseDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:26:44'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:26:55' prior: 50960396!
test29CanNotOpenDoorWithoutKey

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	player closeUsing: self validKey.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !

!testRun: #PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:26:55'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:26:55'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotCloseDoorFarAway stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotCloseDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:26:56'!
PASSED!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:26:56'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:27:06'!
test29CanNotCloseDoorWithoutKey

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	player closeUsing: self validKey.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !

!methodRemoval: PlayableCharacterTest #test29CanNotOpenDoorWithoutKey stamp: 'HG 12/17/2020 21:27:06'!
test29CanNotOpenDoorWithoutKey

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	player closeUsing: self validKey.
	
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:27:20' prior: 50963055!
test29CanNotCloseDoorWithoutKey

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	self 
		should: [player closeUsing: self validKey.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !

!testRun: #PlayableCharacterTest #test29CanNotCloseDoorWithoutKey stamp: 'HG 12/17/2020 21:27:23'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:27:31' prior: 50963100!
test29CanNotCloseDoorWithoutKey

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	
	self 
		should: [player closeUsing: self validKey.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:29:03' prior: 50961340!
closeUsing: aKey

	| door |
	self assertFacingADoor.
	door := room at: self forwardPosition.
	(self backpackIncludes: door openKey)
		ifFalse: [^self error: Door canNotOpenDoorErrorDescription.]
		ifTrue: [door closeUsing: aKey.].
	! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:29:08' prior: 50963147!
closeUsing: aKey

	| door |
	self assertFacingADoor.
	door := room at: self forwardPosition.
	(self backpackIncludes: door openKey)
		ifFalse: [self error: Door canNotOpenDoorErrorDescription.]
		ifTrue: [door closeUsing: aKey.].
	! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:29:28'!
openWith: door a: aKey

	^ (self backpackIncludes: door openKey)
		ifFalse: [self error: Door canNotOpenDoorErrorDescription.]
		ifTrue: [door closeUsing: aKey.]! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:29:28' prior: 50963158!
closeUsing: aKey

	| door |
	self assertFacingADoor.
	door := room at: self forwardPosition.
	self openWith: door a: aKey.
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:29:30'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:29:30'!
ERROR!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotCloseDoorFarAway stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotCloseDoorWithoutKey stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotCloseDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:29:30'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:29:30'!
ERROR!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:29:30'!
ERROR!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:29:33'!
ERROR!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:29:48'!
ERROR!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:30:11'!
ERROR!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:30:16'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:30:32' prior: 50960976!
test21ClosedDoorCanNotBeTrespassed

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	player := PlayableCharacter named: 'Luigi' using:  keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: self validKey.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Room positionIsNotEmptyErrorDescription.
			self assert: (player isAt: 0@1 heading: #South).
			self assert: player equals: (room at: 0@1).
			self assert: door isClosed.].
	
	
	! !

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:30:35'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:30:43' prior: 50963318!
test21ClosedDoorCanNotBeTrespassed

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	player := PlayableCharacter named: 'Luigi' using:  keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Room positionIsNotEmptyErrorDescription.
			self assert: (player isAt: 0@1 heading: #South).
			self assert: player equals: (room at: 0@1).
			self assert: door isClosed.].
	
	
	! !

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:30:43'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:31:03' prior: 50963353!
test21ClosedDoorCanNotBeTrespassed

	| room anotherRoom doorPositions door player keyBackpack validKey |

	room := self defaultRoom.
	anotherRoom := self defaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (0@0);
		yourself.
	
	door := Door withPositions: doorPositions.
	
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using:  keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.
	
	self 
		should: [player moveForward.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Room positionIsNotEmptyErrorDescription.
			self assert: (player isAt: 0@1 heading: #South).
			self assert: player equals: (room at: 0@1).
			self assert: door isClosed.].
	
	
	! !

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:31:04'!
ERROR!
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:32:00' prior: 50963168!
openWith: door a: aKey

	^ (self backpackIncludes: door openKey)
		ifFalse: [self error: Door canNotOpenDoorErrorDescription.]
		ifTrue: [door open.]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:32:01'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:32:01'!
ERROR!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotCloseDoorFarAway stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotCloseDoorWithoutKey stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotCloseDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:32:01'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:32:01'!
ERROR!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:32:01'!
ERROR!
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:32:37' prior: 50963176!
closeUsing: aKey

	| door |
	self assertFacingADoor.
	door := room at: self forwardPosition.
	door closeUsing: aKey.
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotCloseDoorFarAway stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotCloseDoorWithoutKey stamp: 'HG 12/17/2020 21:32:38'!
FAILURE!

!testRun: #PlayableCharacterTest #test30CanNotCloseDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:32:38'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotCloseDoorWithoutKey stamp: 'HG 12/17/2020 21:32:38'!
FAILURE!
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:33:27' prior: 50963552!
closeUsing: aKey

	| door |
	self assertFacingADoor.
	door := room at: self forwardPosition.
	(self backpackIncludes: door openKey)
		ifFalse: [self error: Door canNotOpenDoorErrorDescription.]
		ifTrue: [door open.].
	door closeUsing: aKey.
	! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:33:37'!
assertPlayerHasKeyFor: door

	^ (self backpackIncludes: door openKey)
		ifFalse: [self error: Door canNotOpenDoorErrorDescription.]
		ifTrue: [door open.]! !
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:33:37' prior: 50963683!
closeUsing: aKey

	| door |
	self assertFacingADoor.
	door := room at: self forwardPosition.
	self assertPlayerHasKeyFor: door.
	door closeUsing: aKey.
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:33:39'!
ERROR!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:33:39'!
ERROR!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotCloseDoorFarAway stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotCloseDoorWithoutKey stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotCloseDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:33:39'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:33:39'!
ERROR!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:33:39'!
ERROR!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:33:44'!
ERROR!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:34:16'!
ERROR!
!PlayableCharacter methodsFor: 'actions' stamp: 'HG 12/17/2020 21:35:33' prior: 50963702!
closeUsing: aKey

	| door |
	self assertFacingADoor.
	door := room at: self forwardPosition.
	door closeUsing: aKey.
	! !

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotCloseDoorFarAway stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotCloseDoorWithoutKey stamp: 'HG 12/17/2020 21:35:35'!
FAILURE!

!testRun: #PlayableCharacterTest #test30CanNotCloseDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:35:35'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotCloseDoorWithoutKey stamp: 'HG 12/17/2020 21:35:35'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:36:21' prior: 50963125!
test29CanNotCloseDoorWithoutKey

	| room anotherRoom doorPositions door player |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	player := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: room.
	player closeUsing: self validKey.
	self 
		should: [player open: door.]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Door canNotOpenDoorErrorDescription ].
	
! !

!testRun: #PlayableCharacterTest #test29CanNotCloseDoorWithoutKey stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotCloseDoorFarAway stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotCloseDoorWithoutKey stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotCloseDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:36:23'!
PASSED!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:36:23'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:37:01' prior: 50961468!
test32

	| room anotherRoom doorPositions door player keyBackpack validKey anotherPlayer |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.
	
	anotherPlayer := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.

	player open: door.
	
	self assert: door isOpened. 
	self assert: (player backpackIncludes: validKey).
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:37:17' prior: 50964119!
test32

	| room anotherRoom doorPositions door player keyBackpack validKey anotherPlayer |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.
	
	anotherPlayer := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@1 heading: #South in: anotherRoom.

	player open: door.
	
	self assert: door isOpened. 
	self assert: (player backpackIncludes: validKey).
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:37:30' prior: 50964147!
test32

	| room anotherRoom doorPositions door player keyBackpack validKey anotherPlayer |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.
	
	anotherPlayer := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #South in: anotherRoom.

	player open: door.
	
	self assert: door isOpened. 
	self assert: (player backpackIncludes: validKey).
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:37:38' prior: 50964175!
test32

	| room anotherRoom doorPositions door player keyBackpack validKey anotherPlayer |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.
	
	anotherPlayer := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #South in: anotherRoom.

	player open: door.
	
	self assert: door isClosed
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:38:15' prior: 50964203!
test32

	| room anotherRoom doorPositions door player keyBackpack validKey anotherPlayer |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.
	
	anotherPlayer := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #South in: anotherRoom.

	self
		should: [player moveForward]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError ].
	
	self assert: door isClosed
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:38:32' prior: 50964229!
test32

	| room anotherRoom doorPositions door player keyBackpack validKey anotherPlayer |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.
	
	anotherPlayer := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #South in: anotherRoom.

	self
		should: [player moveForward]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError ].
	
	self assert: door isClosed
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:38:53' prior: 50964258!
test32

	| room anotherRoom doorPositions door player keyBackpack validKey anotherPlayer |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.
	
	anotherPlayer := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #South in: anotherRoom.

	self
		should: [player moveForward]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room positionIsNotEmptyErrorDescription].
	
	self assert: door isClosed
	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:39:07' prior: 50964287!
test32

	| room anotherRoom doorPositions door player keyBackpack validKey anotherPlayer |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.
	
	anotherPlayer := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #South in: anotherRoom.

	self
		should: [player moveForward]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Room positionIsNotEmptyErrorDescription.
			self assert: door isClosed].
	
	
	
! !

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:39:10'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:39:10'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:39:10'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:39:10'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:39:10'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotCloseDoorFarAway stamp: 'HG 12/17/2020 21:39:10'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotCloseDoorWithoutKey stamp: 'HG 12/17/2020 21:39:10'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotCloseDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:39:10'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:39:10'!
PASSED!

!testRun: #PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:39:10'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:39:24'!
test32aDoorCanBeClosedByAnotherPlayer

	| room anotherRoom doorPositions door player keyBackpack validKey anotherPlayer |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.
	
	anotherPlayer := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #South in: anotherRoom.

	self
		should: [player moveForward]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Room positionIsNotEmptyErrorDescription.
			self assert: door isClosed].
	
	
	
! !

!methodRemoval: PlayableCharacterTest #test32 stamp: 'HG 12/17/2020 21:39:24'!
test32

	| room anotherRoom doorPositions door player keyBackpack validKey anotherPlayer |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.
	
	anotherPlayer := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #South in: anotherRoom.

	self
		should: [player moveForward]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Room positionIsNotEmptyErrorDescription.
			self assert: door isClosed].
	
	
	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:39:31'!
test32aDoorCanBeClosedByAnotherPlayerAtOtherRoom

	| room anotherRoom doorPositions door player keyBackpack validKey anotherPlayer |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.
	
	anotherPlayer := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #South in: anotherRoom.

	self
		should: [player moveForward]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Room positionIsNotEmptyErrorDescription.
			self assert: door isClosed].
	
	
	
! !

!methodRemoval: PlayableCharacterTest #test32aDoorCanBeClosedByAnotherPlayer stamp: 'HG 12/17/2020 21:39:31'!
test32aDoorCanBeClosedByAnotherPlayer

	| room anotherRoom doorPositions door player keyBackpack validKey anotherPlayer |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.
	
	anotherPlayer := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #South in: anotherRoom.

	self
		should: [player moveForward]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Room positionIsNotEmptyErrorDescription.
			self assert: door isClosed].
	
	
	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/17/2020 21:39:41' prior: 50964534!
test32aDoorCanBeClosedByAnotherPlayerAtOtherRoom

	| room anotherRoom doorPositions door player keyBackpack validKey anotherPlayer |

	room := self defaultRoom.
	anotherRoom := self anotherDefaultRoom.
	doorPositions := Dictionary new
		at: room put: (0@0);
		at: anotherRoom put: (2@2);
		yourself.
	
	door := Door withPositions: doorPositions.	
	validKey := self validKey.
	
	keyBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	keyBackpack add: validKey. 
	
	player := PlayableCharacter named: 'Luigi' using: keyBackpack at: 0@1 heading: #South in: room.
	player closeUsing: validKey.
	
	anotherPlayer := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #South in: anotherRoom.

	self
		should: [anotherPlayer moveForward]
		raise: Error-MessageNotUnderstood 
		withExceptionDo: [:anError | 
			anError messageText = Room positionIsNotEmptyErrorDescription.
			self assert: door isClosed].
	
	
	
! !

!testRun: #PlayableCharacterTest #test32aDoorCanBeClosedByAnotherPlayerAtOtherRoom stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotCloseDoorFarAway stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotCloseDoorWithoutKey stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotCloseDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #PlayableCharacterTest #test32aDoorCanBeClosedByAnotherPlayerAtOtherRoom stamp: 'HG 12/17/2020 21:39:41'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #DoorTest #test01DoorCanNotBeInitializatedAtOccupiedPosition stamp: 'HG 12/17/2020 21:39:57'!
ERROR!

!testRun: #DoorTest #test02CanNotAddaDoorToNonPortableObject stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #DoorTest #test03DoorCanNotBeTaken stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #DoorTest #test04CanNotInitializeDoorWithInvalidXPosition stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #DoorTest #test05CanNotInitializeDoorWithInvalidYPosition stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #DoorTest #test06DoorKeepsAtEachRoomInValidPosition stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotCloseDoorFarAway stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotCloseDoorWithoutKey stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotCloseDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #PlayableCharacterTest #test32aDoorCanBeClosedByAnotherPlayerAtOtherRoom stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'HG 12/17/2020 21:39:57'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'HG 12/17/2020 21:39:58'!
PASSED!

!testRun: #DoorTest #test01DoorCanNotBeInitializatedAtOccupiedPosition stamp: 'HG 12/17/2020 21:39:58'!
ERROR!
!PointsPortableObject methodsFor: 'testing' stamp: 'HG 12/17/2020 21:40:10'!
canBeTrespassed
	self shouldBeImplemented.! !
!PointsPortableObject methodsFor: 'testing' stamp: 'HG 12/17/2020 21:40:13' prior: 50964996!
canBeTrespassed
	^false.! !

!testRun: #DoorTest #test01DoorCanNotBeInitializatedAtOccupiedPosition stamp: 'HG 12/17/2020 21:40:17'!
PASSED!

!testRun: #PlayableCharacterTest #test32aDoorCanBeClosedByAnotherPlayerAtOtherRoom stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotCloseDoorFarAway stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotCloseDoorWithoutKey stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotCloseDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #PlayableCharacterTest #test32aDoorCanBeClosedByAnotherPlayerAtOtherRoom stamp: 'HG 12/17/2020 21:40:20'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'HG 12/17/2020 21:40:22'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'HG 12/17/2020 21:40:22'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'HG 12/17/2020 21:40:22'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'HG 12/17/2020 21:40:22'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #DoorTest #test01DoorCanNotBeInitializatedAtOccupiedPosition stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #DoorTest #test02CanNotAddaDoorToNonPortableObject stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #DoorTest #test03DoorCanNotBeTaken stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #DoorTest #test04CanNotInitializeDoorWithInvalidXPosition stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #DoorTest #test05CanNotInitializeDoorWithInvalidYPosition stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #DoorTest #test06DoorKeepsAtEachRoomInValidPosition stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test11_CanNotCreateCharacterWithInvalidPosition stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test12_CanNotCreateCharacterOnNotEmptyPosition stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test13_moveForwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test14_moveBackwardModifiesPositionInRoom stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test15_canNotMoveToInvalidPosition stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test16_canNotTakeFromAnEmptyOrInvalidPosition stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test17_canTakeAPortableObject stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test18_emptyNonPortableObjectDoesNotAddObjectsToBackpack stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test19_portableInNonPortableObjectIsAddedToBackpack stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test20_takeFromNonPortableObjectsIsRecursive stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test21ClosedDoorCanNotBeTrespassed stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test22ClosedDoorInAnotherRoomCanNotBeTrespassed stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test23MovingForwardTrespassingDoorGoesCorrectlyToAnotherRoom stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test24MovingForwardInAnotherDirectionGoesRight stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test25MovingBackwardTrespassingDoorGoesAnotherRoomCorrectly stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test26CanNotMoveBackwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test27CanNotMoveForwardTrespassingALimitRoomDoor stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test28CanNotCloseDoorFarAway stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test29CanNotCloseDoorWithoutKey stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test30CanNotCloseDoorWithoutFacingCorrectDirection stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test31DoorOpensCorrectlyWithRightPositionAndValidKey stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #PlayableCharacterTest #test32aDoorCanBeClosedByAnotherPlayerAtOtherRoom stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #RoomTest #test01_WidthMustBeStrictlyPositive stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #RoomTest #test02_HeightMustBeStrictlyPositive stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #RoomTest #test03_WidthMustBeInteger stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #RoomTest #test04_HeightMustBeInteger stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #RoomTest #test05_CanNotPutAStageObjectWithXLessThanCero stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #RoomTest #test06_CanNotPutAStageObjectWithXGreaterOrEqualToWidth stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #RoomTest #test07_CanNotPutAStageObjectWithANonIntegerX stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #RoomTest #test08_CanNotPutAStageObjectWithYLessThanCero stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #RoomTest #test09_CanNotPutAStageObjectWithYGreaterOrEqualToHeight stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #RoomTest #test10_CanNotPutAStageObjectWithANonIntegerY stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #RoomTest #test11_StageObjectsAreKeept stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

!testRun: #RoomTest #test12_canNotGetPositionOfNonPutObject stamp: 'HG 12/17/2020 21:40:23'!
PASSED!

----SNAPSHOT----(17 December 2020 21:40:27) CuisUniversity-4137.image priorSource: 20075840!