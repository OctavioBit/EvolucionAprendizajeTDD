----STARTUP---- (10 December 2020 16:19:07) as /home/franco/Documents/smallTalk/linux64/CuisUniversity-4384.image!


----End fileIn of /home/franco/Documents/smallTalk/linux64/ISW1-2020-2C-2doParcial.st----!

----End fileIn of /home/franco/Documents/smallTalk/linux64/ISW1-2020-1C-2doParcial-SolucionDeVideo.st----!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 17:35:26'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 17:40:43'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'nil' stamp: 'FD 12/10/2020 17:40:55'!
test01

	| aRoom |
	
	self
	should: [ aRoom := Room withSize: 0 by: 5 ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert aRoom isNil
		]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 17:41:32' prior: 50870515!
test01

	| aRoom |
	
	self
	should: [ aRoom := Room withSize: 0 by: 5 ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert aRoom isNil
		]! !

!testRun: #RoomTest #test01 stamp: 'FD 12/10/2020 17:41:36'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 17:41:47'!
withSize: aSmallInteger by: aSmallInteger2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithSize: aSmallInteger by: aSmallInteger2 ! !
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 17:43:11' prior: 50870539!
withSize: aLength by: aWidth
	
	^self new initializeWithLength: aLength andWidth: aWidth. ! !

!testRun: #RoomTest #test01 stamp: 'FD 12/10/2020 17:43:21'!
ERROR!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 17:43:37'!
Object subclass: #Room
	instanceVariableNames: 'length'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 17:43:37'!
Object subclass: #Room
	instanceVariableNames: 'length width'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'FD 12/10/2020 17:43:37'!
initializeWithLength: aLength andWidth: aWidth 
	self shouldBeImplemented.
	length := aLength.
	width := aWidth.! !
!Room methodsFor: 'initialization' stamp: 'FD 12/10/2020 17:43:45' prior: 50870572!
initializeWithLength: aLength andWidth: aWidth 
	
	length := aLength.
	width := aWidth.! !

!testRun: #RoomTest #test01 stamp: 'FD 12/10/2020 17:43:46'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 17:46:56' prior: 50870549!
withSize: aLength by: aWidth

	
	
	^self new initializeWithLength: aLength andWidth: aWidth. ! !
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 17:48:06' prior: 50870587!
withSize: aLength by: aWidth

	aLength positive ifFalse: [self error: self invalid]
	
	^self new initializeWithLength: aLength andWidth: aWidth. ! !
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 17:48:34' prior: 50870593!
withSize: aLength by: aWidth

	aLength positive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth positive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	
	^self new initializeWithLength: aLength andWidth: aWidth. ! !

!testRun: #RoomTest #test01 stamp: 'FD 12/10/2020 17:48:36'!
FAILURE!

!testRun: #RoomTest #test01 stamp: 'FD 12/10/2020 17:48:36'!
FAILURE!
!Room class methodsFor: 'nil' stamp: 'FD 12/10/2020 17:49:09'!
invalidRoomSizeErrorMessage

	^ 'Room size is invalid'.! !

!testRun: #RoomTest #test01 stamp: 'FD 12/10/2020 17:49:13'!
FAILURE!

!testRun: #RoomTest #test01 stamp: 'FD 12/10/2020 17:49:13'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 17:49:28' prior: 50870526!
test01

	| aRoom |
	
	self
	should: [ aRoom := Room withSize: 0 by: 5 ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		]! !

!testRun: #RoomTest #test01 stamp: 'FD 12/10/2020 17:49:30'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 17:49:54' prior: 50870601!
withSize: aLength by: aWidth

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	
	^self new initializeWithLength: aLength andWidth: aWidth. ! !

!testRun: #RoomTest #test01 stamp: 'FD 12/10/2020 17:49:56'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 17:51:16'!
test01_RoomLengthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withSize: 0 by: 5 ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		]! !

!methodRemoval: RoomTest #test01 stamp: 'FD 12/10/2020 17:51:19'!
test01

	| aRoom |
	
	self
	should: [ aRoom := Room withSize: 0 by: 5 ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		]!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 17:51:27' prior: 50870640!
withSize: aLength by: aWidth

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	
	^self new initializeWithLength: aLength andWidth: aWidth. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 17:51:52'!
test02_RoomWidthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withSize: 5 by: 0 ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		]! !

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 17:51:55'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 17:52:05' prior: 50870675!
withSize: aLength by: aWidth

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
		
	^self new initializeWithLength: aLength andWidth: aWidth. ! !

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 17:52:06'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 17:52:06'!
PASSED!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 17:52:43'!
withLength: aLength andWidth: aWidth

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
		
	^self new initializeWithLength: aLength andWidth: aWidth. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 17:52:43' prior: 50870653!
test01_RoomLengthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withLength: 0 andWidth: 5 ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 17:52:43' prior: 50870683!
test02_RoomWidthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withLength: 5 andWidth: 0 ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		]! !

!methodRemoval: Room class #withSize:by: stamp: 'FD 12/10/2020 17:52:43'!
withSize: aLength by: aWidth

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
		
	^self new initializeWithLength: aLength andWidth: aWidth. !

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 17:52:46'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 17:52:46'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 17:53:42' prior: 50870739!
test02_RoomWidthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withLength: 5 andWidth: 0 ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		].! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:01:00' prior: 50870768!
test02_RoomWidthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withLength: 5 andWidth: 0 ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		].! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:06:31'!
test03_aRoomInitializesWithThePlayerAtTheLowerLeft

	| aRoom aPlayer |
	
	
	aRoom := Room withLength: 5 andWidth: 0! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:10:29'!
test03_aRoomInitializesWithThePlayableCharacterInHisPosition

	| aRoom aPlayableCharacter aBackpack |
	
	aBackpack := nil.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 2@2 heading: #North. 
	aRoom := Room withLength: 5 andWidth: 0! !

!methodRemoval: RoomTest #test03_aRoomInitializesWithThePlayerAtTheLowerLeft stamp: 'FD 12/10/2020 18:10:54'!
test03_aRoomInitializesWithThePlayerAtTheLowerLeft

	| aRoom aPlayer |
	
	
	aRoom := Room withLength: 5 andWidth: 0!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:12:45'!
test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition

	| aRoom aPlayableCharacter aBackpack |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North. 
	
	self assert: aRoom at: 2@2 equals: 1.! !

!methodRemoval: RoomTest #test03_aRoomInitializesWithThePlayableCharacterInHisPosition stamp: 'FD 12/10/2020 18:12:55'!
test03_aRoomInitializesWithThePlayableCharacterInHisPosition

	| aRoom aPlayableCharacter aBackpack |
	
	aBackpack := nil.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 2@2 heading: #North. 
	aRoom := Room withLength: 5 andWidth: 0!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:13:43' prior: 50870817!
test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition

	| aRoom aPlayableCharacter aBackpack |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North. 
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 0 ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room invalidPlayableCharacterPosition.
			self assert: aRoom isNil.
			].! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:14:40' prior: 50870842!
test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition

	| aRoom aPlayableCharacter aBackpack |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North. 
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 0 withPlayableCharacter: aPlayableCharacter ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room invalidPlayableCharacterPosition.
			self assert: aRoom isNil.
			].! !
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 18:17:18'!
withLength: aLength andWidth: aWidth withPlayableCharacter: aPlayableCharacter 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
		
	^self new initializeWithLength: aLength andWidth: aWidth. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:17:18' prior: 50870727!
test01_RoomLengthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withLength: 0 andWidth: 5 withPlayableCharacter: self defaultPlayableCharacter ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:17:18' prior: 50870780!
test02_RoomWidthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withLength: 5 andWidth: 0 withPlayableCharacter: self defaultPlayableCharacter ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		].! !

!methodRemoval: Room class #withLength:andWidth: stamp: 'FD 12/10/2020 18:17:18'!
withLength: aLength andWidth: aWidth

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
		
	^self new initializeWithLength: aLength andWidth: aWidth. !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:19:07'!
defaultPlayableCharacter

	| aBackpack |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	^PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North. ! !
!Room methodsFor: 'initialization' stamp: 'FD 12/10/2020 18:20:03'!
initializeWithLength: aLength andWidth: aWidth withPlayableCharacter: aPlayableCharacter  
	
	length := aLength.
	width := aWidth.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:20:03' prior: 50870883!
withLength: aLength andWidth: aWidth withPlayableCharacter: aPlayableCharacter 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
		
	^self new initializeWithLength: aLength andWidth: aWidth withPlayableCharacter: aPlayableCharacter. ! !

!methodRemoval: Room #initializeWithLength:andWidth: stamp: 'FD 12/10/2020 18:20:03'!
initializeWithLength: aLength andWidth: aWidth 
	
	length := aLength.
	width := aWidth.!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 18:20:13'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 18:20:13'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:20:13'!
ERROR!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:20:13'!
ERROR!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 18:20:14'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 18:20:14'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:20:14'!
ERROR!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:20:14'!
ERROR!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 18:20:16'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 18:20:16'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:20:16'!
ERROR!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:20:16'!
ERROR!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 18:20:17'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 18:20:17'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:20:17'!
ERROR!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:20:17'!
ERROR!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 18:20:17'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 18:20:17'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:20:17'!
ERROR!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:20:17'!
ERROR!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 18:20:22'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 18:20:22'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:20:22'!
ERROR!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:20:22'!
ERROR!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 18:20:25'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 18:20:25'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:20:25'!
ERROR!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:20:25'!
ERROR!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 18:20:42'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 18:20:42'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:20:42'!
ERROR!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:20:42'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:21:16' prior: 50870862!
test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition

	| aRoom aPlayableCharacter aBackpack |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North. 
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 0 withPlayableCharacter: aPlayableCharacter ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room invalidPlayableCharacterPositionErrorMessage.
			self assert: aRoom isNil.
			].! !

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:21:23'!
ERROR!
!Room class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:21:28'!
invalidPlayableCharacterPositionErrorMessage
	self shouldBeImplemented.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:21:55' prior: 50871110!
invalidPlayableCharacterPositionErrorMessage
	
	
	^ 'Invalid playableCharacter position'.! !

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:21:56'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 18:28:52'!
withLength: aLength andWidth: aWidth withMap: aPlayableCharacter 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
		
	^self new initializeWithLength: aLength andWidth: aWidth withPlayableCharacter: aPlayableCharacter. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:28:52' prior: 50870896!
test01_RoomLengthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withLength: 0 andWidth: 5 withMap: self defaultPlayableCharacter ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:28:52' prior: 50870910!
test02_RoomWidthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withLength: 5 andWidth: 0 withMap: self defaultPlayableCharacter ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		].! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:28:52' prior: 50871085!
test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition

	| aRoom aPlayableCharacter aBackpack |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North. 
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 0 withMap: aPlayableCharacter ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room invalidPlayableCharacterPositionErrorMessage.
			self assert: aRoom isNil.
			].! !

!methodRemoval: Room class #withLength:andWidth:withPlayableCharacter: stamp: 'FD 12/10/2020 18:28:52'!
withLength: aLength andWidth: aWidth withPlayableCharacter: aPlayableCharacter 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
		
	^self new initializeWithLength: aLength andWidth: aWidth withPlayableCharacter: aPlayableCharacter. !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:29:32'!
defaultMap

	| aBackpack |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	^PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:29:32' prior: 50871140!
test01_RoomLengthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withLength: 0 andWidth: 5 withMap: self defaultMap ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:29:32' prior: 50871154!
test02_RoomWidthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withLength: 5 andWidth: 0 withMap: self defaultMap ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		].! !

!methodRemoval: RoomTest #defaultPlayableCharacter stamp: 'FD 12/10/2020 18:29:32'!
defaultPlayableCharacter

	| aBackpack |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	^PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North. !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:29:32' prior: 50871203!
defaultMap

	| aBackpack |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	^PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:30:03' prior: 50871247!
defaultMap

	| aBackpack |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	^PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:30:12'!
defaultPlayableCharacter

	| aBackpack |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	^PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:30:12' prior: 50871225!
test02_RoomWidthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withLength: 5 andWidth: 0 withMap: self defaultPlayableCharacter ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		].! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:30:12' prior: 50871212!
test01_RoomLengthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withLength: 0 andWidth: 5 withMap: self defaultPlayableCharacter ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		]! !

!methodRemoval: RoomTest #defaultMap stamp: 'FD 12/10/2020 18:30:12'!
defaultMap

	| aBackpack |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	^PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North. !

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 18:30:14'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 18:30:14'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:30:14'!
FAILURE!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:30:14'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:30:57'!
defaultMap

	^ Dictionary new at: 0@0 put: self defaultPlayableCharacter.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:31:10' prior: 50871287!
test01_RoomLengthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withLength: 0 andWidth: 5 withMap: self defaultMap ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:31:14' prior: 50871273!
test02_RoomWidthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withLength: 5 andWidth: 0 withMap: self defaultMap ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorMessage.
		self assert: aRoom isNil.
		].! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:32:33' prior: 50871264!
defaultPlayableCharacter

	| aBackpack |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	^PlayableCharacter named: 'Juan' using: aBackpack at: 0@0 heading: #North. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:33:42' prior: 50871168!
test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition

	| aRoom aPlayableCharacter aBackpack aMap |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North.
	aMap := Dictionary new at: 8@2 put: aPlayableCharacter.
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 0 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room invalidPlayableCharacterPositionErrorMessage.
			self assert: aRoom isNil.
			].! !

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:34:24'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:34:46' prior: 50871363!
test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition

	| aRoom aPlayableCharacter aBackpack aMap |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North.
	aMap := Dictionary new at: 8@2 put: aPlayableCharacter.
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 5 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room invalidPlayableCharacterPositionErrorMessage.
			self assert: aRoom isNil.
			].! !

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:34:47'!
FAILURE!
!Room methodsFor: 'initialization' stamp: 'FD 12/10/2020 18:35:26'!
initializeWithLength: aLength andWidth: aWidth withMap: aPlayableCharacter  
	
	length := aLength.
	width := aWidth.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:35:26' prior: 50871126!
withLength: aLength andWidth: aWidth withMap: aPlayableCharacter 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
		
	^self new initializeWithLength: aLength andWidth: aWidth withMap: aPlayableCharacter. ! !

!methodRemoval: Room #initializeWithLength:andWidth:withPlayableCharacter: stamp: 'FD 12/10/2020 18:35:26'!
initializeWithLength: aLength andWidth: aWidth withPlayableCharacter: aPlayableCharacter  
	
	length := aLength.
	width := aWidth.!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 18:35:47'!
Object subclass: #Room
	instanceVariableNames: 'length width map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'FD 12/10/2020 18:35:44' prior: 50871416!
initializeWithLength: aLength andWidth: aWidth withMap: aMap  
	
	length := aLength.
	width := aWidth.
	map := aMap.! !
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 18:36:48' prior: 50871423!
withLength: aLength andWidth: aWidth withMap: aMap 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
		
	^self new initializeWithLength: aLength andWidth: aWidth withMap: aMap. ! !

----End fileIn of /home/franco/Documents/smallTalk/linux64/Packages/TerseGuide.pck.st----!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 18:39:50' prior: 50871458!
withLength: aLength andWidth: aWidth withMap: aMap 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	
	(aMap keys allSatisfy: [:point | point x strictlyPositive & point x < aLength]) ifFalse: [self error: self invalidPlayableCharacterPositionErrorMessage ].
		
	^self new initializeWithLength: aLength andWidth: aWidth withMap: aMap. ! !

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 18:39:52'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 18:39:52'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:39:52'!
ERROR!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:39:52'!
ERROR!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:40:28'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:41:27' prior: 50871322!
defaultMap

	| aMap |
	
	aMap := Dictionary new.
	aMap at: 0@0 put: self defaultPlayableCharacter.
	
	^aMap.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:41:37' prior: 50871390!
test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition

	| aRoom aPlayableCharacter aBackpack aMap |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North.
	aMap := Dictionary new.
	aMap at: 8@2 put: aPlayableCharacter.
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 5 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room invalidPlayableCharacterPositionErrorMessage.
			self assert: aRoom isNil.
			].! !

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:41:39'!
PASSED!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 18:41:39'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 18:41:39'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:41:39'!
PASSED!
!Room class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:42:21'!
mapHasAnInvalidPositionErrorMessage
	
	
	^ 'Invalid playableCharacter position'.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:42:21' prior: 50874449!
test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition

	| aRoom aPlayableCharacter aBackpack aMap |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North.
	aMap := Dictionary new.
	aMap at: 8@2 put: aPlayableCharacter.
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 5 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room mapHasAnInvalidPositionErrorMessage.
			self assert: aRoom isNil.
			].! !
!Room class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:42:21' prior: 50874406!
withLength: aLength andWidth: aWidth withMap: aMap 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	
	(aMap keys allSatisfy: [:point | point x strictlyPositive & point x < aLength]) ifFalse: [self error: self mapHasAnInvalidPositionErrorMessage ].
		
	^self new initializeWithLength: aLength andWidth: aWidth withMap: aMap. ! !

!methodRemoval: Room class #invalidPlayableCharacterPositionErrorMessage stamp: 'FD 12/10/2020 18:42:21'!
invalidPlayableCharacterPositionErrorMessage
	
	
	^ 'Invalid playableCharacter position'.!
!Room class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:42:31' prior: 50874486!
mapHasAnInvalidPositionErrorMessage
	
	
	^ 'Invalid map position'.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:42:58'!
test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition

	| aRoom aPlayableCharacter aBackpack aMap |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North.
	aMap := Dictionary new.
	aMap at: 8@2 put: aPlayableCharacter.
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 5 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room mapHasAnInvalidPositionErrorMessage.
			self assert: aRoom isNil.
			].! !

!methodRemoval: RoomTest #test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition stamp: 'FD 12/10/2020 18:43:00'!
test03_aRoomCannotBeCreatedWithThePlayableCharacterInAnInvalidXPosition

	| aRoom aPlayableCharacter aBackpack aMap |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 8@2 heading: #North.
	aMap := Dictionary new.
	aMap at: 8@2 put: aPlayableCharacter.
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 5 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room mapHasAnInvalidPositionErrorMessage.
			self assert: aRoom isNil.
			].!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:43:19'!
test03_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition

	| aRoom aPlayableCharacter aBackpack aMap |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 2@8 heading: #North.
	aMap := Dictionary new.
	aMap at: 2@8 put: aPlayableCharacter.
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 5 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room mapHasAnInvalidPositionErrorMessage.
			self assert: aRoom isNil.
			].! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:43:27'!
test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition

	| aRoom aPlayableCharacter aBackpack aMap |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 2@8 heading: #North.
	aMap := Dictionary new.
	aMap at: 2@8 put: aPlayableCharacter.
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 5 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room mapHasAnInvalidPositionErrorMessage.
			self assert: aRoom isNil.
			].! !

!methodRemoval: RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 18:43:27'!
test03_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition

	| aRoom aPlayableCharacter aBackpack aMap |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 2@8 heading: #North.
	aMap := Dictionary new.
	aMap at: 2@8 put: aPlayableCharacter.
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 5 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room mapHasAnInvalidPositionErrorMessage.
			self assert: aRoom isNil.
			].!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 18:43:30'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 18:43:30'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 18:43:30'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 18:43:30'!
FAILURE!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 18:43:30'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 18:44:24' prior: 50874515!
withLength: aLength andWidth: aWidth withMap: aMap 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	
	(aMap keys allSatisfy: [:point | 
		point x strictlyPositive & point x < aLength
		& point y strictlyPositive & point y < aWidth 
		]) ifFalse: [self error: self mapHasAnInvalidPositionErrorMessage ].
		
	^self new initializeWithLength: aLength andWidth: aWidth withMap: aMap. ! !

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 18:44:29'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 18:44:29'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 18:44:29'!
ERROR!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 18:44:29'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 18:44:29'!
ERROR!

8@2 y!

8@2 x!

(8@2) x!

(8@2) y!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 18:46:01' prior: 50874673!
withLength: aLength andWidth: aWidth withMap: aMap 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	
	(aMap keys allSatisfy: [:point | 
		(point x strictlyPositive & point x < aLength)
		& (point y strictlyPositive & point y < aWidth) 
		]) ifFalse: [self error: self mapHasAnInvalidPositionErrorMessage ].
		
	^self new initializeWithLength: aLength andWidth: aWidth withMap: aMap. ! !

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 18:46:02'!
PASSED!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 18:46:35' prior: 50874710!
withLength: aLength andWidth: aWidth withMap: aMap 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	
	(aMap keys allSatisfy: [:point | 
		(point x strictlyPositive & point x < aLength)
		and: [point y strictlyPositive & point y < aWidth]
		]) ifFalse: [self error: self mapHasAnInvalidPositionErrorMessage ].
		
	^self new initializeWithLength: aLength andWidth: aWidth withMap: aMap. ! !

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 18:46:54'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 18:46:54'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 18:46:54'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 18:46:54'!
PASSED!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 18:46:59'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 18:46:59'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 18:46:59'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 18:46:59'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:47:59'!
test05_aRoomCannotBeCreatedWithAMapThatHasAPlayableCharacterInAPositionOtherThanTheOneSpecified

	| aRoom aPlayableCharacter aBackpack aMap |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 2@8 heading: #North.
	aMap := Dictionary new.
	aMap at: 2@8 put: aPlayableCharacter.
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 5 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room mapHasAnInvalidPositionErrorMessage.
			self assert: aRoom isNil.
			].! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 18:48:49' prior: 50874779!
test05_aRoomCannotBeCreatedWithAMapThatHasAPlayableCharacterInAPositionOtherThanTheOneSpecified

	| aRoom aPlayableCharacter aBackpack aMap |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 4@4 heading: #North.
	aMap := Dictionary new.
	aMap at: 3@3 put: aPlayableCharacter.
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 5 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room playableCharacterIsNotInSpecifiedLocationErrorMessage.
			self assert: aRoom isNil.
			].! !

!testRun: #RoomTest #test05_aRoomCannotBeCreatedWithAMapThatHasAPlayableCharacterInAPositionOtherThanTheOneSpecified stamp: 'FD 12/10/2020 18:49:18'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 18:53:44' prior: 50874733!
withLength: aLength andWidth: aWidth withMap: aMap 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	
	(aMap keys allSatisfy: [:point | 
		(point x strictlyPositive & point x < aLength)
		and: [point y strictlyPositive & point y < aWidth]
		]) ifFalse: [self error: self mapHasAnInvalidPositionErrorMessage ].
		
	^self new initializeWithLength: aLength andWidth: aWidth withMap: aMap. ! !

!methodRemoval: RoomTest #test05_aRoomCannotBeCreatedWithAMapThatHasAPlayableCharacterInAPositionOtherThanTheOneSpecified stamp: 'FD 12/10/2020 18:54:07'!
test05_aRoomCannotBeCreatedWithAMapThatHasAPlayableCharacterInAPositionOtherThanTheOneSpecified

	| aRoom aPlayableCharacter aBackpack aMap |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPlayableCharacter := PlayableCharacter named: 'Juan' using: aBackpack at: 4@4 heading: #North.
	aMap := Dictionary new.
	aMap at: 3@3 put: aPlayableCharacter.
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 5 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room playableCharacterIsNotInSpecifiedLocationErrorMessage.
			self assert: aRoom isNil.
			].!

!methodRemoval: RoomTest #defaultPlayableCharacter stamp: 'FD 12/10/2020 19:01:05'!
defaultPlayableCharacter

	| aBackpack |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	^PlayableCharacter named: 'Juan' using: aBackpack at: 0@0 heading: #North. !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:02:16' prior: 50874442!
defaultMap

	| aMap |
	
	aMap := Dictionary new.
	aMap at: 0@0 put: ( NoPointsPortableObject named: 'pencil' weighing: 1).
	
	^aMap.! !

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 19:02:18'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 19:02:18'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 19:02:18'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 19:02:18'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:06:21'!
test11_canNotStartOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := Room withLength: 5 andWidth: 5 withMap: Dictionary new.
	
	self 
		should: [ playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West inRoom: aRoom. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidStartingPositionErrorDescription equals: anError messageText.
			self assert: playableCharacter isNil.
			]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:06:58'!
defaultRoom

	^ Room withLength: 5 andWidth: 5 withMap: Dictionary new! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:06:58' prior: 50874905!
test11_canNotStartOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	
	self 
		should: [ playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West inRoom: aRoom. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidStartingPositionErrorDescription equals: anError messageText.
			self assert: playableCharacter isNil.
			]
	
	! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:07:36'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint inRoom: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !

!methodRemoval: PlayableCharacter class #named:using:at:heading: stamp: 'FD 12/10/2020 19:07:36'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 19:07:39'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 19:07:39'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 19:07:39'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 19:07:39'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 19:07:39'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 19:07:39'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 19:07:39'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 19:07:39'!
FAILURE!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 19:07:39'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 19:07:39'!
ERROR!

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:07:39'!
FAILURE!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:07:36' prior: 50874948!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint inRoom: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:08:28' prior: 50867990!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North inRoom: self defaultRoom .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:08:34' prior: 50868002!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North inRoom: self defaultRoom  .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:08:38' prior: 50868014!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North inRoom: self defaultRoom  .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:08:41' prior: 50868025!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North inRoom: self defaultRoom  .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:08:44' prior: 50868036!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East inRoom: self defaultRoom  .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:08:48' prior: 50868050!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South inRoom: self defaultRoom  .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:08:51' prior: 50868064!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West inRoom: self defaultRoom  .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:08:56' prior: 50868078!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X inRoom: self defaultRoom  ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:08:58' prior: 50868091!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West inRoom: self defaultRoom  .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:09:01' prior: 50868104!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West inRoom: self defaultRoom  .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:09:06'!
FAILURE!
!Room methodsFor: 'initialization' stamp: 'FD 12/10/2020 19:11:16'!
isPositionOccupied: aPosition

	^ map includesKey: aPosition.! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:12:09' prior: 50875011!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint inRoom: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	(aRoom isPositionOccupied: aPosition) ifTrue: [self error: 'error'].
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacter class methodsFor: 'nil' stamp: 'FD 12/10/2020 19:12:48'!
invalidStartingPositionErrorDescription

	^ 'Character cannot start in this position'.! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:13:03' prior: 50875181!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint inRoom: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	(aRoom isPositionOccupied: aPosition) ifTrue: [self error: self invalidStartingPositionErrorDescription ].
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 19:13:05'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 19:13:05'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 19:13:05'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 19:13:05'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 19:13:05'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 19:13:05'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 19:13:05'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 19:13:05'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 19:13:05'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 19:13:05'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:13:05'!
FAILURE!

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:13:05'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 19:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 19:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 19:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 19:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 19:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 19:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 19:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 19:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 19:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 19:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:13:23'!
FAILURE!

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:13:23'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:13:46' prior: 50874930!
test11_canNotStartOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	
	self 
		should: [ playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 9@2 heading: #West inRoom: aRoom. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidStartingPositionErrorDescription equals: anError messageText.
			self assert: playableCharacter isNil.
			]
	
	! !
!Room methodsFor: 'initialization' stamp: 'FD 12/10/2020 19:15:51'!
isValidStartingPosition: aPosition

	^ (aPosition x positive & aPosition x < length )
		and: [aPosition y positive & aPosition y < width ] and: [map includesKey: aPosition].! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:16:14' prior: 50875201!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint inRoom: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	(aRoom isValidStartingPosition: aPosition) ifFalse: [self error: self invalidStartingPositionErrorDescription ].
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 19:16:18'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 19:16:18'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 19:16:18'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 19:16:18'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 19:16:18'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 19:16:18'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 19:16:18'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 19:16:18'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 19:16:18'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 19:16:18'!
ERROR!

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:16:18'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 19:16:28'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'FD 12/10/2020 19:17:29' prior: 50875323!
isValidStartingPosition: aPosition

	^ (aPosition x positive & aPosition x < length )
		and: [(aPosition y positive & aPosition y < width) and: [map includesKey: aPosition]].! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 19:17:34'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 19:17:40'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 19:17:40'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 19:17:40'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 19:17:40'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 19:17:40'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 19:17:40'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 19:17:40'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 19:17:40'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 19:17:40'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 19:17:40'!
ERROR!

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:17:40'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 19:17:43'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'FD 12/10/2020 19:18:26' prior: 50875392!
isValidStartingPosition: aPosition

	^ (aPosition x positive & aPosition x < length )
		and: [(aPosition y positive & aPosition y < width) and: [(map includesKey: aPosition) not]].! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 19:18:30'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 19:18:33'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 19:18:33'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 19:18:33'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 19:18:33'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 19:18:33'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 19:18:33'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 19:18:33'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 19:18:33'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 19:18:33'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 19:18:33'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:18:33'!
PASSED!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:19:18' prior: 50874831!
withLength: aLength andWidth: aWidth withMap: aMap 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	
	(aMap keys allSatisfy: [:point | 
		(point x positive & point x < aLength)
		and: [point y positive & point y < aWidth]
		]) ifFalse: [self error: self mapHasAnInvalidPositionErrorMessage ].
		
	^self new initializeWithLength: aLength andWidth: aWidth withMap: aMap. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:20:23' prior: 50874544!
test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition

	| aRoom aBackpack aMap |
	
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aMap := Dictionary new.
	aMap at: 5@2 put: (NoPointsPortableObject named: 'key' weighing: 1) .
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 5 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room mapHasAnInvalidPositionErrorMessage.
			self assert: aRoom isNil.
			].! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:20:35' prior: 50875524!
test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition

	| aRoom aMap |
	
	
	aMap := Dictionary new.
	aMap at: 5@2 put: (NoPointsPortableObject named: 'key' weighing: 1) .
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 5 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room mapHasAnInvalidPositionErrorMessage.
			self assert: aRoom isNil.
			].! !

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 19:20:37'!
PASSED!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 19:20:37'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 19:20:37'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 19:20:37'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 19:20:37'!
ERROR!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 19:20:37'!
ERROR!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 19:20:56'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:21:16' prior: 50874611!
test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition

	| aRoom  aMap |
	
	aMap := Dictionary new.
	aMap at: 2@5 put: (NoPointsPortableObject named: 'key' weighing: 1) .
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 5 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room mapHasAnInvalidPositionErrorMessage.
			self assert: aRoom isNil.
			].! !

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 19:21:19'!
PASSED!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 19:21:21'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 19:21:21'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 19:21:21'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 19:21:21'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 19:21:23'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 19:21:23'!
PASSED!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:22:53'!
m1: aLength m2: aWidth m3: point

	^ (point x positive & point x < aLength)
		and: [point y positive & point y < aWidth]! !
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:22:53' prior: 50875505!
withLength: aLength andWidth: aWidth withMap: aMap 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	
	(aMap keys allSatisfy: [:point | 
		self m1: aLength m2: aWidth m3: point
		]) ifFalse: [self error: self mapHasAnInvalidPositionErrorMessage ].
		
	^self new initializeWithLength: aLength andWidth: aWidth withMap: aMap. ! !
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:23:48'!
m3: point m2: aWidth m1: aLength

	^ (point x positive & point x < aLength)
		and: [point y positive & point y < aWidth]! !
!Room class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:23:48' prior: 50875737!
withLength: aLength andWidth: aWidth withMap: aMap 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	
	(aMap keys allSatisfy: [:point | 
		self m3: aLength m2: aWidth m1: point
		]) ifFalse: [self error: self mapHasAnInvalidPositionErrorMessage ].
		
	^self new initializeWithLength: aLength andWidth: aWidth withMap: aMap. ! !

!methodRemoval: Room class #m1:m2:m3: stamp: 'FD 12/10/2020 19:23:48'!
m1: aLength m2: aWidth m3: point

	^ (point x positive & point x < aLength)
		and: [point y positive & point y < aWidth]!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:24:30'!
isPoint: point withinWitdth: aWidth andLength: aLength

	^ (point x positive & point x < aLength)
		and: [point y positive & point y < aWidth]! !
!Room class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:24:30' prior: 50875761!
withLength: aLength andWidth: aWidth withMap: aMap 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	
	(aMap keys allSatisfy: [:point | 
		self isPoint: aLength withinWitdth: aWidth andLength: point
		]) ifFalse: [self error: self mapHasAnInvalidPositionErrorMessage ].
		
	^self new initializeWithLength: aLength andWidth: aWidth withMap: aMap. ! !

!methodRemoval: Room class #m3:m2:m1: stamp: 'FD 12/10/2020 19:24:30'!
m3: point m2: aWidth m1: aLength

	^ (point x positive & point x < aLength)
		and: [point y positive & point y < aWidth]!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:24:42'!
isPoint: point withinWidth: aWidth andLength: aLength

	^ (point x positive & point x < aLength)
		and: [point y positive & point y < aWidth]! !
!Room class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:24:42' prior: 50875792!
withLength: aLength andWidth: aWidth withMap: aMap 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	
	(aMap keys allSatisfy: [:point | 
		self isPoint: aLength withinWidth: aWidth andLength: point
		]) ifFalse: [self error: self mapHasAnInvalidPositionErrorMessage ].
		
	^self new initializeWithLength: aLength andWidth: aWidth withMap: aMap. ! !

!methodRemoval: Room class #isPoint:withinWitdth:andLength: stamp: 'FD 12/10/2020 19:24:42'!
isPoint: point withinWitdth: aWidth andLength: aLength

	^ (point x positive & point x < aLength)
		and: [point y positive & point y < aWidth]!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:25:17'!
isPoint: aLength within: point

	^ point x positive & point x < aLength! !
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:25:17' prior: 50875816!
isPoint: point withinWidth: aWidth andLength: aLength

	^ ((self isPoint: aLength within: point))
		and: [point y positive & point y < aWidth]! !
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:25:46' prior: 50875849!
isPoint: point within: aLength

	^ point x positive & point x < aLength! !
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:25:51' prior: 50875863!
isPoint: point within: aLimit

	^ point x positive & point x < aLimit! !
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:26:30'!
isCoordinate: point within: aLimit

	^ point x positive & point x < aLimit! !
!Room class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:26:30' prior: 50875855!
isPoint: point withinWidth: aWidth andLength: aLength

	^ ((self isCoordinate: aLength within: point))
		and: [point y positive & point y < aWidth]! !

!methodRemoval: Room class #isPoint:within: stamp: 'FD 12/10/2020 19:26:30'!
isPoint: point within: aLimit

	^ point x positive & point x < aLimit!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:26:36' prior: 50875874!
isCoordinate: aCoordinate within: aLimit

	^ aCoordinate x positive & aCoordinate x < aLimit! !
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:26:40' prior: 50875893!
isCoordinate: aCoordinate within: aLimit

	^ aCoordinate positive & aCoordinate x < aLimit! !
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:27:20' prior: 50875880!
isPoint: point withinWidth: aWidth andLength: aLength

	^ (self isCoordinate: point x within: aWidth )
		and: [self isCoordinate: point y within: aLength ]! !

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 19:27:22'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 19:27:22'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 19:27:22'!
ERROR!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 19:27:22'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:27:49' prior: 50875824!
withLength: aLength andWidth: aWidth withMap: aMap 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorMessage].
	
	(aMap keys allSatisfy: [:point | 
		self isPoint: point withinWidth: aWidth andLength: aLength 
		]) ifFalse: [self error: self mapHasAnInvalidPositionErrorMessage ].
		
	^self new initializeWithLength: aLength andWidth: aWidth withMap: aMap. ! !

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 19:27:50'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 19:27:50'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 19:27:50'!
ERROR!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 19:27:50'!
ERROR!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 19:27:54'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 19:27:55'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 19:27:55'!
ERROR!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 19:27:55'!
ERROR!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 19:28:29'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 19:28:29'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 19:28:29'!
ERROR!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 19:28:29'!
ERROR!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 19:28:32'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:28:49' prior: 50875899!
isCoordinate: aCoordinate within: aLimit

	^ aCoordinate positive & aCoordinate < aLimit! !

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 19:28:52'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 19:28:52'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 19:28:52'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 19:28:52'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 19:28:55'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 19:28:55'!
PASSED!
!Room methodsFor: 'testing' stamp: 'FD 12/10/2020 19:30:50' prior: 50875450!
isValidStartingPosition: aPosition

	^ (self class isPoint: aPosition withinWidth: width andLength: length ) and: [(map includesKey: aPosition) not].! !

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 19:30:51'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 19:30:51'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 19:30:51'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 19:30:51'!
PASSED!

!classRenamed: #PlayableCharacter as: #FreePlayableCharacter stamp: 'FD 12/10/2020 19:35:01'!
Smalltalk renameClassNamed: #PlayableCharacter as: #FreePlayableCharacter!
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:35:01' prior: 50875061!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North inRoom: self defaultRoom  .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:35:02' prior: 50875104!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West inRoom: self defaultRoom  .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:35:02' prior: 50875022!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North inRoom: self defaultRoom .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:35:02' prior: 50875306!
test11_canNotStartOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	
	self 
		should: [ playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 9@2 heading: #West inRoom: aRoom. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: FreePlayableCharacter invalidStartingPositionErrorDescription equals: anError messageText.
			self assert: playableCharacter isNil.
			]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:35:02' prior: 50875074!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East inRoom: self defaultRoom  .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:35:02' prior: 50875133!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West inRoom: self defaultRoom  .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:35:02' prior: 50875035!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North inRoom: self defaultRoom  .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:35:02' prior: 50875147!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West inRoom: self defaultRoom  .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:35:02' prior: 50875119!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X inRoom: self defaultRoom  ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: FreePlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:35:02' prior: 50875089!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South inRoom: self defaultRoom  .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:35:02' prior: 50875048!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North inRoom: self defaultRoom  .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 19:36:48'!
Object subclass: #PlayableCharacter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

PlayableCharacter subclass: #FreePlayableCharacter
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #FreePlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 19:36:48'!
PlayableCharacter subclass: #FreePlayableCharacter
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

PlayableCharacter subclass: #FreePlayableCharacter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #FreePlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 19:36:55'!
PlayableCharacter subclass: #FreePlayableCharacter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 19:36:59'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

PlayableCharacter subclass: #PlayableCharacterInARoom
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacterInARoom category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 19:37:24'!
PlayableCharacter subclass: #PlayableCharacterInARoom
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterInARoom class methodsFor: 'nil' stamp: 'FD 12/10/2020 19:38:14'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint inRoom: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	(aRoom isValidStartingPosition: aPosition) ifFalse: [self error: self invalidStartingPositionErrorDescription ].
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!FreePlayableCharacter class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:38:35'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !

!methodRemoval: FreePlayableCharacter class #named:using:at:heading: stamp: 'FD 12/10/2020 19:38:43'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading !
!FreePlayableCharacter class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:38:49' prior: 50875332!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint inRoom: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!FreePlayableCharacter class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 19:39:14'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint   
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:39:14' prior: 50876158!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:39:14' prior: 50876188!
test11_canNotStartOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	
	self 
		should: [ playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 9@2 heading: #West . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: FreePlayableCharacter invalidStartingPositionErrorDescription equals: anError messageText.
			self assert: playableCharacter isNil.
			]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:39:14' prior: 50876293!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:39:14' prior: 50876174!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:39:14' prior: 50876238!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:39:14' prior: 50876223!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:39:14' prior: 50876252!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:39:14' prior: 50876309!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:39:14' prior: 50876207!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:39:14' prior: 50876145!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:39:14' prior: 50876278!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [FreePlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: FreePlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !

!methodRemoval: FreePlayableCharacter class #named:using:at:heading:inRoom: stamp: 'FD 12/10/2020 19:39:14'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint inRoom: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading !

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 19:39:32'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 19:39:32'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 19:39:32'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 19:39:32'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:39:51' prior: 50876460!
test11_canNotStartOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	
	self 
		should: [ playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 9@2 heading: #West . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidStartingPositionErrorDescription equals: anError messageText.
			self assert: playableCharacter isNil.
			]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:40:08' prior: 50876635!
test11_canNotStartOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	
	self 
		should: [ playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 9@2 heading: #West inRoom: aRoom . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidStartingPositionErrorDescription equals: anError messageText.
			self assert: playableCharacter isNil.
			]
	
	! !

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:40:09'!
ERROR!

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:40:21'!
ERROR!

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:40:21'!
ERROR!
!PlayableCharacterInARoom class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:41:47' prior: 50876387!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint inRoom: aRoom  
	
	
	| character |
	
	character := FreePlayableCharacter named: aName using: aBackpack at: aPosition heading: aCardinalPoint.
	
	(aRoom isValidStartingPosition: aPosition) ifFalse: [self error: self invalidStartingPositionErrorDescription ].
	
	^self new initializeCharacter: character inRoom: aRoom.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 19:41:52'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 19:41:52'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 19:41:52'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 19:41:52'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 19:41:52'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 19:41:52'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 19:41:52'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 19:41:52'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 19:41:52'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 19:41:52'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:41:52'!
ERROR!

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:41:52'!
ERROR!

!methodRemoval: FreePlayableCharacter class #invalidStartingPositionErrorDescription stamp: 'FD 12/10/2020 19:42:10'!
invalidStartingPositionErrorDescription

	^ 'Character cannot start in this position'.!
!PlayableCharacterInARoom class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:42:28'!
invalidStartingPositionErrorDescription

	^ 'Character cannot start in this position'.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 19:42:30'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 19:42:30'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 19:42:30'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 19:42:30'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 19:42:30'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 19:42:30'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 19:42:30'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 19:42:30'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 19:42:30'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 19:42:30'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:42:30'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 19:42:32'!
PASSED!

TestCase subclass: #PlayableCharacterInARoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacterInARoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 19:45:33'!
TestCase subclass: #PlayableCharacterInARoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterInARoomTest methodsFor: 'nil' stamp: 'FD 12/10/2020 19:45:43'!
test01_canNotStartOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	
	self 
		should: [ playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 9@2 heading: #West inRoom: aRoom . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidStartingPositionErrorDescription equals: anError messageText.
			self assert: playableCharacter isNil.
			]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:46:05' prior: 50874924!
defaultRoom

	^ Room withLength: 5 andWidth: 5 withMap: Dictionary new! !

!methodRemoval: PlayableCharacterTest #defaultRoom stamp: 'FD 12/10/2020 19:46:13'!
defaultRoom

	^ Room withLength: 5 andWidth: 5 withMap: Dictionary new!

!methodRemoval: PlayableCharacterTest #test11_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:46:14'!
test11_canNotStartOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	
	self 
		should: [ playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 9@2 heading: #West inRoom: aRoom . ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidStartingPositionErrorDescription equals: anError messageText.
			self assert: playableCharacter isNil.
			]
	
	!
!PlayableCharacterInARoomTest methodsFor: 'nil' stamp: 'FD 12/10/2020 19:46:22'!
defaultRoom

	^ Room withLength: 5 andWidth: 5 withMap: Dictionary new! !

!classRenamed: #PlayableCharacterTest as: #FreePlayableCharacterTest stamp: 'FD 12/10/2020 19:46:49'!
Smalltalk renameClassNamed: #PlayableCharacterTest as: #FreePlayableCharacterTest!
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:49:15'!
test02_canNotMoveOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West inRoom: aRoom . 
	
	self 
		should: [ playableCharacter moveForward]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidMovePositionErrorDescription equals: anError messageText.
			self assert: (playableCharacter isAt: 0@0 heading: #West).
			]
	
	! !

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:49:27'!
ERROR!
!PlayableCharacterInARoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:50:03'!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:50:20'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:50:34'!
ERROR!

!classDefinition: #PlayableCharacterInARoom category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 19:51:00'!
PlayableCharacter subclass: #PlayableCharacterInARoom
	instanceVariableNames: 'character_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacterInARoom category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 19:51:01'!
PlayableCharacter subclass: #PlayableCharacterInARoom
	instanceVariableNames: 'character_CHANGE_ME room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterInARoom methodsFor: 'initialization' stamp: 'FD 12/10/2020 19:51:01'!
initializeCharacter: character inRoom: aRoom 
	self shouldBeImplemented.
	character_CHANGE_ME := character.
	room := aRoom.! !

!classDefinition: #PlayableCharacterInARoom category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 19:51:37'!
PlayableCharacter subclass: #PlayableCharacterInARoom
	instanceVariableNames: 'character_CHANGE_ME room playableCharacter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterInARoom methodsFor: 'initialization' stamp: 'FD 12/10/2020 19:51:35' prior: 50877036!
initializeCharacter: aPlayableCharacter inRoom: aRoom 
	
	
	playableCharacter := aPlayableCharacter.
	room := aRoom.! !

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:51:39'!
ERROR!
!PlayableCharacterInARoom methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:51:58'!
moveForward
	self shouldBeImplemented.! !
!PlayableCharacterInARoom methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:52:10' prior: 50877065!
moveForward
	
	playableCharacter moveForward.! !

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:52:11'!
FAILURE!
!PlayableCharacter methodsFor: 'nil' stamp: 'FD 12/10/2020 19:53:07'!
moveForward
	
	self subclassResponsibility.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:53:15'!
moveBackward
	
	self subclassResponsibility.! !
!PlayableCharacter methodsFor: 'nil' stamp: 'FD 12/10/2020 19:53:42'!
rotateLeft

	self subclassResponsibility.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:53:46'!
rotateRight

	self subclassResponsibility.! !
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 19:54:55'!
test02_canNotMoveForwardOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West inRoom: aRoom . 
	
	self 
		should: [ playableCharacter moveForward]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidMovePositionErrorDescription equals: anError messageText.
			self assert: (playableCharacter isAt: 0@0 heading: #West).
			]
	
	! !

!methodRemoval: PlayableCharacterInARoomTest #test02_canNotMoveOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:54:58'!
test02_canNotMoveOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West inRoom: aRoom . 
	
	self 
		should: [ playableCharacter moveForward]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidMovePositionErrorDescription equals: anError messageText.
			self assert: (playableCharacter isAt: 0@0 heading: #West).
			]
	
	!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:55:00'!
FAILURE!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 19:55:00'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'FD 12/10/2020 19:56:06'!
isValidPosition: aPosition

	^ (self class isPoint: aPosition withinWidth: width andLength: length ) and: [(map includesKey: aPosition) not].! !
!PlayableCharacterInARoom class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:56:06' prior: 50876683!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint inRoom: aRoom  
	
	
	| character |
	
	character := FreePlayableCharacter named: aName using: aBackpack at: aPosition heading: aCardinalPoint.
	
	(aRoom isValidPosition: aPosition) ifFalse: [self error: self invalidStartingPositionErrorDescription ].
	
	^self new initializeCharacter: character inRoom: aRoom.! !

!methodRemoval: Room #isValidStartingPosition: stamp: 'FD 12/10/2020 19:56:06'!
isValidStartingPosition: aPosition

	^ (self class isPoint: aPosition withinWidth: width andLength: length ) and: [(map includesKey: aPosition) not].!
!PlayableCharacterInARoom methodsFor: 'moving' stamp: 'FD 12/10/2020 19:57:30' prior: 50877070 overrides: 50877078!
moveForward

	room isValidPosition: playableCharacter.
	
	playableCharacter moveForward.! !

FreePlayableCharacter class
	instanceVariableNames: ''!

!classDefinition: 'FreePlayableCharacter class' category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 19:59:38'!
FreePlayableCharacter class
	instanceVariableNames: ''!

!classDefinition: 'PlayableCharacter class' category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 19:59:43'!
PlayableCharacter class
	instanceVariableNames: 'headings'!
!PlayableCharacter class methodsFor: 'nil' stamp: 'FD 12/10/2020 19:59:42'!
headingFor: aCardinalPoint
	
	^headings at: aCardinalPoint ifAbsent: [ self error: self invalidCardinalPointErrorDescription ]! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 19:59:56'!
invalidCardinalPointErrorDescription
	
	^'Invalid cardinal point'! !

!methodRemoval: FreePlayableCharacter class #headingFor: stamp: 'FD 12/10/2020 20:00:09'!
headingFor: aCardinalPoint
	
	^headings at: aCardinalPoint ifAbsent: [ self error: self invalidCardinalPointErrorDescription ]!

!methodRemoval: FreePlayableCharacter class #invalidCardinalPointErrorDescription stamp: 'FD 12/10/2020 20:00:09'!
invalidCardinalPointErrorDescription
	
	^'Invalid cardinal point'!
!PlayableCharacter class methodsFor: 'nil' stamp: 'FD 12/10/2020 20:00:31'!
forHeadingAt: aCardinalPoint leftIs: aLeftCardinalPoint rightIs: aRightCardinalPoint
	
	(headings at: aCardinalPoint) leftHeading: (headings at: aLeftCardinalPoint) rightHeading: (headings at: aRightCardinalPoint).
	! !
!PlayableCharacter class methodsFor: 'initialization' stamp: 'FD 12/10/2020 20:00:50' overrides: 16883149!
initialize

	self initializeHeadings! !
!PlayableCharacter class methodsFor: 'initialization' stamp: 'FD 12/10/2020 20:01:01'!
initializeHeadings

	headings := Dictionary new.
	
	(OrderedCollection 
		with: (PlayableCharacterHeading for: #North forwardWith: 0@1 )	
		with: (PlayableCharacterHeading for: #East forwardWith: 1@0 )
		with: (PlayableCharacterHeading for: #South forwardWith: 0@-1 )
		with: (PlayableCharacterHeading for: #West forwardWith: -1@0 ))
			do: [ :heading | headings at: heading cardinalPoint put: heading ].
	
	self 
		forHeadingAt: #North leftIs: #West rightIs: #East;
		forHeadingAt: #South leftIs: #East rightIs: #West;
		forHeadingAt: #East leftIs: #North rightIs: #South;
		forHeadingAt: #West leftIs: #South rightIs: #North.
	! !

!methodRemoval: FreePlayableCharacter class #forHeadingAt:leftIs:rightIs: stamp: 'FD 12/10/2020 20:01:06'!
forHeadingAt: aCardinalPoint leftIs: aLeftCardinalPoint rightIs: aRightCardinalPoint
	
	(headings at: aCardinalPoint) leftHeading: (headings at: aLeftCardinalPoint) rightHeading: (headings at: aRightCardinalPoint).
	!

!methodRemoval: FreePlayableCharacter class #initialize stamp: 'FD 12/10/2020 20:01:06'!
initialize

	self initializeHeadings!

!methodRemoval: FreePlayableCharacter class #initializeHeadings stamp: 'FD 12/10/2020 20:01:06'!
initializeHeadings

	headings := Dictionary new.
	
	(OrderedCollection 
		with: (PlayableCharacterHeading for: #North forwardWith: 0@1 )	
		with: (PlayableCharacterHeading for: #East forwardWith: 1@0 )
		with: (PlayableCharacterHeading for: #South forwardWith: 0@-1 )
		with: (PlayableCharacterHeading for: #West forwardWith: -1@0 ))
			do: [ :heading | headings at: heading cardinalPoint put: heading ].
	
	self 
		forHeadingAt: #North leftIs: #West rightIs: #East;
		forHeadingAt: #South leftIs: #East rightIs: #West;
		forHeadingAt: #East leftIs: #North rightIs: #South;
		forHeadingAt: #West leftIs: #South rightIs: #North.
	!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:01:10'!
ERROR!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 20:01:10'!
ERROR!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 20:01:10'!
ERROR!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 20:01:10'!
ERROR!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 20:01:10'!
ERROR!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 20:01:10'!
ERROR!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 20:01:10'!
ERROR!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 20:01:10'!
FAILURE!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 20:01:10'!
ERROR!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 20:01:10'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:01:10'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:01:10'!
ERROR!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 20:01:10'!
PASSED!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:01:24'!
ERROR!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:01:33'!
ERROR!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:02:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 20:02:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 20:02:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 20:02:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 20:02:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 20:02:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 20:02:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 20:02:14'!
FAILURE!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 20:02:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 20:02:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:02:19'!
ERROR!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:03:23'!
ERROR!
!FreePlayableCharacter class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 20:04:20' prior: 50876434!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint   
	
	| newHeading |

	newHeading := self superclass headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:04:25'!
ERROR!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 20:04:25'!
ERROR!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 20:04:25'!
ERROR!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 20:04:25'!
ERROR!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 20:04:25'!
ERROR!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 20:04:25'!
ERROR!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 20:04:25'!
ERROR!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 20:04:25'!
FAILURE!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 20:04:25'!
ERROR!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 20:04:25'!
ERROR!
!FreePlayableCharacter class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 20:04:30' prior: 50877466!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint   
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !

FreePlayableCharacter class
	instanceVariableNames: 'headings'!

PlayableCharacter class
	instanceVariableNames: ''!

!classDefinition: 'PlayableCharacter class' category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 20:05:49'!
PlayableCharacter class
	instanceVariableNames: ''!

!classDefinition: 'FreePlayableCharacter class' category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 20:05:58'!
FreePlayableCharacter class
	instanceVariableNames: 'headings'!
!FreePlayableCharacter class methodsFor: 'nil' stamp: 'FD 12/10/2020 20:05:56' overrides: 50877194!
headingFor: aCardinalPoint
	
	^headings at: aCardinalPoint ifAbsent: [ self error: self invalidCardinalPointErrorDescription ]! !
!FreePlayableCharacter class methodsFor: 'nil' stamp: 'FD 12/10/2020 20:06:07' overrides: 50877201!
invalidCardinalPointErrorDescription
	
	^'Invalid cardinal point'! !
!FreePlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:06:15' overrides: 50877219!
forHeadingAt: aCardinalPoint leftIs: aLeftCardinalPoint rightIs: aRightCardinalPoint
	
	(headings at: aCardinalPoint) leftHeading: (headings at: aLeftCardinalPoint) rightHeading: (headings at: aRightCardinalPoint).
	! !
!PlayableCharacter class methodsFor: 'initialization' stamp: 'FD 12/10/2020 20:06:28' prior: 50877230 overrides: 16883149!
initialize

	self initializeHeadings! !
!FreePlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:06:32' overrides: 50877567!
initialize

	self initializeHeadings! !
!FreePlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:06:42' overrides: 50877234!
initializeHeadings

	headings := Dictionary new.
	
	(OrderedCollection 
		with: (PlayableCharacterHeading for: #North forwardWith: 0@1 )	
		with: (PlayableCharacterHeading for: #East forwardWith: 1@0 )
		with: (PlayableCharacterHeading for: #South forwardWith: 0@-1 )
		with: (PlayableCharacterHeading for: #West forwardWith: -1@0 ))
			do: [ :heading | headings at: heading cardinalPoint put: heading ].
	
	self 
		forHeadingAt: #North leftIs: #West rightIs: #East;
		forHeadingAt: #South leftIs: #East rightIs: #West;
		forHeadingAt: #East leftIs: #North rightIs: #South;
		forHeadingAt: #West leftIs: #South rightIs: #North.
	! !

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:06:48'!
ERROR!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 20:06:48'!
ERROR!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 20:06:48'!
ERROR!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 20:06:48'!
ERROR!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 20:06:48'!
ERROR!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 20:06:48'!
ERROR!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 20:06:48'!
ERROR!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 20:06:48'!
FAILURE!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 20:06:48'!
ERROR!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 20:06:48'!
ERROR!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:06:51'!
ERROR!

!methodRemoval: PlayableCharacter class #headingFor: stamp: 'FD 12/10/2020 20:07:01'!
headingFor: aCardinalPoint
	
	^headings at: aCardinalPoint ifAbsent: [ self error: self invalidCardinalPointErrorDescription ]!

!methodRemoval: PlayableCharacter class #invalidCardinalPointErrorDescription stamp: 'FD 12/10/2020 20:07:01'!
invalidCardinalPointErrorDescription
	
	^'Invalid cardinal point'!

!methodRemoval: PlayableCharacter class #forHeadingAt:leftIs:rightIs: stamp: 'FD 12/10/2020 20:07:03'!
forHeadingAt: aCardinalPoint leftIs: aLeftCardinalPoint rightIs: aRightCardinalPoint
	
	(headings at: aCardinalPoint) leftHeading: (headings at: aLeftCardinalPoint) rightHeading: (headings at: aRightCardinalPoint).
	!

!methodRemoval: PlayableCharacter class #initialize stamp: 'FD 12/10/2020 20:07:03'!
initialize

	self initializeHeadings!

!methodRemoval: PlayableCharacter class #initializeHeadings stamp: 'FD 12/10/2020 20:07:03'!
initializeHeadings

	headings := Dictionary new.
	
	(OrderedCollection 
		with: (PlayableCharacterHeading for: #North forwardWith: 0@1 )	
		with: (PlayableCharacterHeading for: #East forwardWith: 1@0 )
		with: (PlayableCharacterHeading for: #South forwardWith: 0@-1 )
		with: (PlayableCharacterHeading for: #West forwardWith: -1@0 ))
			do: [ :heading | headings at: heading cardinalPoint put: heading ].
	
	self 
		forHeadingAt: #North leftIs: #West rightIs: #East;
		forHeadingAt: #South leftIs: #East rightIs: #West;
		forHeadingAt: #East leftIs: #North rightIs: #South;
		forHeadingAt: #West leftIs: #South rightIs: #North.
	!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:07:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 20:07:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 20:07:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 20:07:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 20:07:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 20:07:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 20:07:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 20:07:14'!
FAILURE!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 20:07:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 20:07:14'!
ERROR!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:07:16'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:09:19'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:09:19'!
ERROR!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:09:24'!
ERROR!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 20:09:24'!
ERROR!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 20:09:24'!
ERROR!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 20:09:24'!
ERROR!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 20:09:24'!
ERROR!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 20:09:24'!
ERROR!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 20:09:24'!
ERROR!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 20:09:24'!
FAILURE!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 20:09:24'!
ERROR!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 20:09:24'!
ERROR!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:09:26'!
ERROR!
!FreePlayableCharacter class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 20:11:33' prior: 50877517!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint   
	
	| newHeading |

	self initialize.
	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:11:35'!
PASSED!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 20:11:35'!
PASSED!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 20:11:35'!
PASSED!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 20:11:35'!
PASSED!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 20:11:35'!
PASSED!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 20:11:35'!
PASSED!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 20:11:35'!
PASSED!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 20:11:35'!
PASSED!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 20:11:35'!
PASSED!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 20:11:35'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:11:42'!
ERROR!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 20:11:42'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:11:42'!
ERROR!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:11:49'!
PASSED!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 20:11:49'!
PASSED!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 20:11:49'!
PASSED!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 20:11:49'!
PASSED!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 20:11:49'!
PASSED!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 20:11:49'!
PASSED!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 20:11:49'!
PASSED!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 20:11:49'!
PASSED!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 20:11:49'!
PASSED!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 20:11:49'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:11:52'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:11:52'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:11:52'!
ERROR!
!FreePlayableCharacter methodsFor: 'moving' stamp: 'FD 12/10/2020 20:12:58'!
forwardPoint

	^ heading forwardPoint! !
!FreePlayableCharacter methodsFor: 'moving' stamp: 'FD 12/10/2020 20:12:58' prior: 50868345 overrides: 50877083!
moveBackward
	
	position := position - self forwardPoint ! !
!PlayableCharacterInARoom methodsFor: 'moving' stamp: 'FD 12/10/2020 20:13:27' prior: 50877176 overrides: 50877078!
moveForward

	room isValidPosition: playableCharacter forwardPoint.
	
	playableCharacter moveForward.! !

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:13:31'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:13:31'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:13:31'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 20:14:16' prior: 50875989!
isCoordinate: aCoordinate within: aLimit

	^ aCoordinate positive and: [aCoordinate < aLimit].! !

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:14:18'!
FAILURE!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:14:22'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:14:22'!
FAILURE!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:14:22'!
FAILURE!
!PlayableCharacterInARoom methodsFor: 'moving' stamp: 'FD 12/10/2020 20:15:19' prior: 50878019 overrides: 50877078!
moveForward

	(room isValidPosition: playableCharacter forwardPoint) ifFalse: [self signalInvalidMovePosition].
	
	playableCharacter moveForward.! !

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:15:22'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:15:22'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:15:22'!
ERROR!
!PlayableCharacterInARoom methodsFor: 'signals' stamp: 'FD 12/10/2020 20:15:38'!
signalInvalidMovePosition
	self shouldBeImplemented.! !
!PlayableCharacterInARoom methodsFor: 'signals' stamp: 'FD 12/10/2020 20:16:05' prior: 50878079!
signalInvalidMovePosition
	self error: self class invalidMovePositionErrorDescription.! !

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:16:06'!
ERROR!
!PlayableCharacterInARoom class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:16:14'!
invalidMovePositionErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacterInARoom class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:16:24' prior: 50878094!
invalidMovePositionErrorDescription
	
	^ 'Cannot move to that position'.! !

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:16:25'!
ERROR!
!PlayableCharacter methodsFor: 'nil' stamp: 'FD 12/10/2020 20:16:59'!
isAt: aPosition heading: aCardinalPoint

	self subclassResponsibility.! !
!PlayableCharacterInARoom methodsFor: 'nil' stamp: 'FD 12/10/2020 20:17:29' overrides: 50878109!
isAt: aPosition heading: aCardinalPoint

	^character_CHANGE_ME isAt: aPosition heading: aCardinalPoint.! !

PlayableCharacter subclass: #PlayableCharacterInARoom
	instanceVariableNames: 'room playableCharacter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacterInARoom category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 20:17:39'!
PlayableCharacter subclass: #PlayableCharacterInARoom
	instanceVariableNames: 'room playableCharacter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterInARoom methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:17:49' prior: 50878115 overrides: 50878109!
isAt: aPosition heading: aCardinalPoint

	^playableCharacter isAt: aPosition heading: aCardinalPoint.! !

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:18:03'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:18:03'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 20:18:05'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 20:18:05'!
PASSED!
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 20:18:32'!
test03_canNotMoveBackwardOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North inRoom: aRoom . 
	
	self 
		should: [ playableCharacter moveForward]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidMovePositionErrorDescription equals: anError messageText.
			self assert: (playableCharacter isAt: 0@0 heading: #North).
			]
	
	! !
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 20:18:37' prior: 50878268!
test03_canNotMoveBackwardOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North inRoom: aRoom . 
	
	self 
		should: [ playableCharacter moveBackward]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidMovePositionErrorDescription equals: anError messageText.
			self assert: (playableCharacter isAt: 0@0 heading: #North).
			]
	
	! !

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:18:41'!
FAILURE!
!PlayableCharacterInARoom methodsFor: 'moving' stamp: 'FD 12/10/2020 20:19:26' overrides: 50877083!
moveBackward

	(room isValidPosition: playableCharacter forwardPoint) ifFalse: [self signalInvalidMovePosition].
	
	playableCharacter moveForward.! !
!FreePlayableCharacter methodsFor: 'moving' stamp: 'FD 12/10/2020 20:19:50' prior: 50878013 overrides: 50877083!
moveBackward
	
	position := position - heading forwardPoint! !
!FreePlayableCharacter methodsFor: 'moving' stamp: 'FD 12/10/2020 20:19:57' prior: 50868350 overrides: 50877078!
moveForward
	
	position := position + heading forwardPoint! !

!methodRemoval: FreePlayableCharacter #forwardPoint stamp: 'FD 12/10/2020 20:20:00'!
forwardPoint

	^ heading forwardPoint!
!FreePlayableCharacter methodsFor: 'moving' stamp: 'FD 12/10/2020 20:20:21'!
nextForwardPosition

	^ position + heading forwardPoint! !
!FreePlayableCharacter methodsFor: 'moving' stamp: 'FD 12/10/2020 20:20:21' prior: 50878328 overrides: 50877078!
moveForward
	
	position := self nextForwardPosition! !
!FreePlayableCharacter methodsFor: 'moving' stamp: 'FD 12/10/2020 20:20:37'!
nextBackwardPosition

	^ position - heading forwardPoint! !
!FreePlayableCharacter methodsFor: 'moving' stamp: 'FD 12/10/2020 20:20:37' prior: 50878322 overrides: 50877083!
moveBackward
	
	position := self nextBackwardPosition! !
!PlayableCharacterInARoom methodsFor: 'moving' stamp: 'FD 12/10/2020 20:20:49' prior: 50878060 overrides: 50877078!
moveForward

	(room isValidPosition: playableCharacter nextForwardPosition ) ifFalse: [self signalInvalidMovePosition].
	
	playableCharacter moveForward.! !
!PlayableCharacterInARoom methodsFor: 'moving' stamp: 'FD 12/10/2020 20:21:04' prior: 50878313 overrides: 50877083!
moveBackward

	(room isValidPosition: playableCharacter nextBackwardPosition ) ifFalse: [self signalInvalidMovePosition].
	
	playableCharacter moveForward.! !

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:21:07'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:21:07'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:21:07'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:21:14'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 20:21:17'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 20:21:17'!
PASSED!
!PlayableCharacterInARoom methodsFor: 'nil' stamp: 'FD 12/10/2020 20:21:53' overrides: 50877092!
rotateRight

	playableCharacter rotateRight ! !
!PlayableCharacterInARoom methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:22:01' overrides: 50877087!
rotateLeft

	playableCharacter rotateLeft ! !

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 20:23:19'!
PASSED!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 20:23:19'!
PASSED!
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 20:25:53'!
test04_canNotMoveForwardIntoAStageObject

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North inRoom: aRoom . 
	
	self 
		should: [ playableCharacter moveBackward]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidMovePositionErrorDescription equals: anError messageText.
			self assert: (playableCharacter isAt: 0@0 heading: #North).
			]
	
	! !
!PlayableCharacterInARoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:28:18' prior: 50876969!
defaultRoom

	| aMap |
	
	aMap := Dictionary new.
	aMap at: 3@3 put: (NoPointsPortableObject named: 'key' weighing: 1).

	^ Room withLength: 5 andWidth: 5 withMap: aMap.! !

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:28:30'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:28:30'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:28:30'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_canNotMoveForwardIntoAStageObject stamp: 'FD 12/10/2020 20:28:30'!
PASSED!
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 20:29:00' prior: 50878631!
test04_canNotMoveForwardIntoAStageObject

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	self 
		should: [ playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidMovePositionErrorDescription equals: anError messageText.
			self assert: (playableCharacter isAt: 3@2 heading: #North).
			]
	
	! !

!testRun: #PlayableCharacterInARoomTest #test04_canNotMoveForwardIntoAStageObject stamp: 'FD 12/10/2020 20:29:03'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:29:03'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:29:03'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:29:03'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_canNotMoveForwardIntoAStageObject stamp: 'FD 12/10/2020 20:29:03'!
PASSED!

!methodRemoval: PlayableCharacterInARoomTest #test04_canNotMoveForwardIntoAStageObject stamp: 'FD 12/10/2020 20:29:31'!
test04_canNotMoveForwardIntoAStageObject

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	self 
		should: [ playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidMovePositionErrorDescription equals: anError messageText.
			self assert: (playableCharacter isAt: 3@2 heading: #North).
			]
	
	!
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 20:29:44' prior: 50877097!
test02_canNotMoveForwardOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West inRoom: aRoom . 
	
	self 
		should: [ playableCharacter moveForward]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidMovePositionErrorDescription equals: anError messageText.
			self assert: (playableCharacter isAt: 0@0 heading: #West).
			]
	
	! !
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 20:29:58'!
test02_canNotMoveForwardIntoAnInvalidPosition

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West inRoom: aRoom . 
	
	self 
		should: [ playableCharacter moveForward]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidMovePositionErrorDescription equals: anError messageText.
			self assert: (playableCharacter isAt: 0@0 heading: #West).
			]
	
	! !

!methodRemoval: PlayableCharacterInARoomTest #test02_canNotMoveForwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:29:58'!
test02_canNotMoveForwardOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West inRoom: aRoom . 
	
	self 
		should: [ playableCharacter moveForward]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidMovePositionErrorDescription equals: anError messageText.
			self assert: (playableCharacter isAt: 0@0 heading: #West).
			]
	
	!
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 20:30:09'!
test03_canNotMoveBackwardIntoAnInvalidPosition

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North inRoom: aRoom . 
	
	self 
		should: [ playableCharacter moveBackward]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidMovePositionErrorDescription equals: anError messageText.
			self assert: (playableCharacter isAt: 0@0 heading: #North).
			]
	
	! !

!methodRemoval: PlayableCharacterInARoomTest #test03_canNotMoveBackwardOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:30:09'!
test03_canNotMoveBackwardOutsideTheRoomLimits

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North inRoom: aRoom . 
	
	self 
		should: [ playableCharacter moveBackward]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacterInARoom invalidMovePositionErrorDescription equals: anError messageText.
			self assert: (playableCharacter isAt: 0@0 heading: #North).
			]
	
	!
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 20:31:56'!
test04_takesThePortableObjectInFront

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	playableCharacter take.
	
	! !
!PlayableCharacterInARoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:32:29'!
defaultPortableObject

	^ NoPointsPortableObject named: 'key' weighing: 1! !
!PlayableCharacterInARoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:32:29' prior: 50878652!
defaultRoom

	| aMap |
	
	aMap := Dictionary new.
	aMap at: 3@3 put: (self defaultPortableObject).

	^ Room withLength: 5 andWidth: 5 withMap: aMap.! !
!PlayableCharacterInARoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:32:35' prior: 50878856!
defaultRoom

	| aMap |
	
	aMap := Dictionary new.
	aMap at: 3@3 put: self defaultPortableObject.

	^ Room withLength: 5 andWidth: 5 withMap: aMap.! !
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 20:32:59' prior: 50878838!
test04_takesThePortableObjectInFront

	| playableCharacter aRoom |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: self defaultPortableObject).
	
	! !

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:33:00'!
ERROR!
!PlayableCharacterInARoom methodsFor: 'nil' stamp: 'FD 12/10/2020 20:33:30'!
take

	! !
!PlayableCharacterInARoom methodsFor: 'taking objects' stamp: 'FD 12/10/2020 20:34:35' prior: 50878890!
take

	! !
!PlayableCharacterInARoom methodsFor: 'taking objects' stamp: 'FD 12/10/2020 20:36:17' prior: 50878894!
take

	room addObjectFrom: playableCharacter forwardPoint toBackpack: backpack.! !

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:36:21'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 20:36:21'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 20:36:21'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:36:21'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:36:21'!
ERROR!
!PlayableCharacterInARoom methodsFor: 'taking objects' stamp: 'FD 12/10/2020 20:36:47' prior: 50878898!
take

	room addObjectFrom: playableCharacter nextForwardPosition toBackpack: backpack.! !

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:36:55'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 20:36:55'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 20:36:55'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:36:55'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:36:55'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:37:00'!
addObjectFrom: aPoint toBackpack: anUndefinedObject 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:37:47' prior: 50878949!
addObjectFrom: aPoint toBackpack: aBackpack 
	
	aBackpack add: ( map at: aPoint ).! !

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:37:48'!
ERROR!

!methodRemoval: Room #addObjectFrom:toBackpack: stamp: 'FD 12/10/2020 20:38:09'!
addObjectFrom: aPoint toBackpack: aBackpack 
	
	aBackpack add: ( map at: aPoint ).!
!PlayableCharacterInARoom methodsFor: 'taking objects' stamp: 'FD 12/10/2020 20:39:12' prior: 50878924!
take

	! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:42:31'!
ERROR!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 20:42:31'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:42:31'!
ERROR!

Object subclass: #PlayableCharacter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 20:42:53'!
Object subclass: #PlayableCharacter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

PlayableCharacter subclass: #FreePlayableCharacter
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #FreePlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 20:42:57'!
PlayableCharacter subclass: #FreePlayableCharacter
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterInARoom methodsFor: 'taking objects' stamp: 'FD 12/10/2020 20:47:19' prior: 50878970!
take

	room takeFromPosition: playableCharacter nextForwardPosition.! !

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:47:21'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 20:47:21'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 20:47:21'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:47:21'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:47:21'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:47:28'!
takeFromPosition: aPoint 
	self shouldBeImplemented.! !
!PlayableCharacterInARoom methodsFor: 'taking objects' stamp: 'FD 12/10/2020 20:48:45' prior: 50879129!
take

	room takeFromPosition: playableCharacter nextForwardPosition for: self.! !

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:48:54'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 20:48:54'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 20:48:54'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:48:54'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:48:54'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:48:59'!
takeFromPosition: aPoint for: aPlayableCharacterInARoom 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:50:10' prior: 50879183!
takeFromPosition: aPoint for: aPlayableCharacterInARoom 
	
	| portableObject |
	
	portableObject := map at: aPoint.
	aPlayableCharacterInARoom take: portableObject .
	
	map removeKey: aPoint.
	! !

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:50:14'!
ERROR!
!PlayableCharacterInARoom methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:50:24'!
take: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!PlayableCharacterInARoom methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:50:51' prior: 50879202!
take: aPortableObject
 
	playableCharacter take: aPortableObject.! !

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:50:52'!
ERROR!
!PlayableCharacterInARoom methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:51:03'!
backpackIncludes: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!PlayableCharacterInARoom methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:51:17' prior: 50879217!
backpackIncludes: aPortableObject 
	
	^ playableCharacter backpackIncludes: aPortableObject.! !

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:51:21'!
FAILURE!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:51:44'!
FAILURE!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:53:29'!
FAILURE!
!PlayableCharacterInARoom methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:54:05' prior: 50879223!
backpackIncludes: aPortableObject 
	
	| res |
	
	res :=  playableCharacter backpackIncludes: aPortableObject.
	
	^ res.! !

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:54:06'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 20:54:06'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 20:54:06'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:54:06'!
FAILURE!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:54:06'!
FAILURE!
!PlayableCharacterInARoom methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:54:29' prior: 50879241!
backpackIncludes: aPortableObject 
	
	^ playableCharacter backpackIncludes: aPortableObject.! !

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 20:54:57'!
PASSED!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 20:54:57'!
PASSED!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 20:54:57'!
PASSED!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 20:54:57'!
PASSED!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 20:54:57'!
PASSED!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 20:54:57'!
PASSED!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 20:54:57'!
PASSED!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 20:54:57'!
PASSED!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 20:54:57'!
PASSED!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 20:54:57'!
PASSED!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 20:55:00'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 20:55:00'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 20:55:00'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 20:55:00'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:55:12' prior: 50879189!
takeFromPosition: aPoint for: aPlayableCharacterInARoom 
	
	| portableObject |
	
	portableObject := map at: aPoint.
	aPlayableCharacterInARoom take: portableObject .
	! !
!PlayableCharacter methodsFor: 'nil' stamp: 'FD 12/10/2020 20:55:27'!
take: aPortableObject

	self subclassResponsibility.! !
!PlayableCharacterInARoom methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:56:34' prior: 50879208 overrides: 50879335!
take: aPortableObject
 
		| took |
	playableCharacter take: aPortableObject.
	took := playableCharacter backpackIncludes: aPortableObject.! !

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:56:37'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 20:56:37'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 20:56:37'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:56:37'!
FAILURE!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:56:37'!
FAILURE!
!PlayableCharacterInARoom methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:57:06' prior: 50879341 overrides: 50879335!
take: aPortableObject
 
	playableCharacter take: aPortableObject.! !
!PlayableCharacterInARoom methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 20:58:15' prior: 50879369 overrides: 50879335!
take: aPortableObject
 
	| took |
	playableCharacter take: aPortableObject.
	took := playableCharacter backpackIncludes: aPortableObject.
	took := self backpackIncludes: aPortableObject.! !

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 20:58:18'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 20:58:18'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 20:58:18'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:58:18'!
FAILURE!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 20:58:18'!
FAILURE!

playableCharacter!
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:00:52' prior: 50878873!
test04_takesThePortableObjectInFront

	| playableCharacter aRoom aMap aPortableObject |
	
	aPortableObject := NoPointsPortableObject named: 'pencil' weighing: 1. 
	aMap := Dictionary new.
	aMap at: 3@3 put: aPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: self defaultPortableObject).
	
	! !
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:01:01' prior: 50879406!
test04_takesThePortableObjectInFront

	| playableCharacter aRoom aMap aPortableObject |
	
	aPortableObject := NoPointsPortableObject named: 'pencil' weighing: 1. 
	aMap := Dictionary new.
	aMap at: 3@3 put: aPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: aPortableObject).
	
	! !

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 21:01:05'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 21:01:05'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:01:05'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:01:05'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 21:01:05'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 21:01:08'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:01:08'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:01:08'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 21:01:08'!
PASSED!
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:01:39'!
test05_takenPortableObjectsAreNotInRoom

	| playableCharacter aRoom aMap aPortableObject |
	
	aPortableObject := NoPointsPortableObject named: 'pencil' weighing: 1. 
	aMap := Dictionary new.
	aMap at: 3@3 put: aPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: aPortableObject).
	
	! !
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:02:23' prior: 50879480!
test05_takenPortableObjectsAreNotInRoom

	| playableCharacter aRoom aMap aPortableObject |
	
	aPortableObject := NoPointsPortableObject named: 'pencil' weighing: 1. 
	aMap := Dictionary new.
	aMap at: 3@3 put: aPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	playableCharacter take.
	
	self deny: (aRoom isPositionOccupied: 3@3).
	
	! !

!testRun: #PlayableCharacterInARoomTest #test05_takenPortableObjectsAreNotInRoom stamp: 'FD 12/10/2020 21:02:26'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:02:40' prior: 50879327!
takeFromPosition: aPoint for: aPlayableCharacterInARoom 
	
	| portableObject |
	
	portableObject := map at: aPoint.
	aPlayableCharacterInARoom take: portableObject .
	
	map removeKey: aPoint.! !

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 21:02:44'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:02:44'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:02:44'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 21:02:44'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test05_takenPortableObjectsAreNotInRoom stamp: 'FD 12/10/2020 21:02:44'!
PASSED!
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:03:27'!
test06_noPortableObjectsCannotBeTaken

	| playableCharacter aRoom aMap aPortableObject |
	
	aPortableObject := NoPointsPortableObject named: 'pencil' weighing: 1. 
	aMap := Dictionary new.
	aMap at: 3@3 put: aPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	playableCharacter take.
	
	self deny: (aRoom isPositionOccupied: 3@3).
	
	! !
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:03:42' prior: 50879552!
test06_noPortableObjectsCannotBeTaken

	| playableCharacter aRoom aMap aNoPortableObject |
	
	aNoPortableObject := NoPointsPortableObject named: 'pencil' weighing: 1. 
	aMap := Dictionary new.
	aMap at: 3@3 put: aNoPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	playableCharacter take.
	
	self deny: (aRoom isPositionOccupied: 3@3).
	
	! !

StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NoPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 21:04:11'!
StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NoPortableObject class methodsFor: 'no messages' stamp: 'FD 12/10/2020 21:05:22'!
named: aName

	^ self new named: aName.! !
!NoPortableObject methodsFor: 'nil' stamp: 'FD 12/10/2020 21:05:33'!
named: aName

	name := aName.! !
!StageObject methodsFor: 'nil' stamp: 'FD 12/10/2020 21:05:58'!
assertCanAddTo: aBackpack

	self subclassResponsibility	! !
!NoPortableObject methodsFor: 'nil' stamp: 'FD 12/10/2020 21:06:19' overrides: 50879611!
assertCanAddTo: aBackpack

	^ false.! !
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:07:30' prior: 50879571!
test06_noPortableObjectsCannotBeTaken

	| playableCharacter aRoom aMap aNoPortableObject |
	
	aNoPortableObject := NoPointsPortableObject named: 'pencil' weighing: 1. 
	aMap := Dictionary new.
	aMap at: 3@3 put: aNoPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	self should: [ playableCharacter take ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
			
		]
	
	! !
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:07:50' prior: 50879621!
test06_noPortableObjectsCannotBeTaken

	| playableCharacter aRoom aMap aNoPortableObject |
	
	aNoPortableObject := NoPortableObject named: 'desk'. 
	aMap := Dictionary new.
	aMap at: 3@3 put: aNoPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	self should: [ playableCharacter take ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
			
		]
	
	! !
!Backpack methodsFor: 'adding - private' stamp: 'FD 12/10/2020 21:09:13'!
assertCanAddNoPortableObject: aNoPortableObject 
	
	self error: 'error'.
	! !
!NoPortableObject methodsFor: 'adding' stamp: 'FD 12/10/2020 21:09:33' prior: 50879616 overrides: 50879611!
assertCanAddTo: aBackpack

	^aBackpack assertCanAddNoPortableObject: self! !
!Backpack methodsFor: 'adding - private' stamp: 'FD 12/10/2020 21:10:35' prior: 50879661!
assertCanAddNoPortableObject: aNoPortableObject 
	
	self signalCantAddNoPortableObject
	! !
!Backpack methodsFor: 'exceptions' stamp: 'FD 12/10/2020 21:10:56'!
signalCantAddNoPortableObject

	self error: self class cantAddNoPortableObjectErrorDescription.! !
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:11:44' prior: 50879642!
test06_noPortableObjectsCannotBeTaken

	| playableCharacter aRoom aMap aNoPortableObject |
	
	aNoPortableObject := NoPortableObject named: 'desk'. 
	aMap := Dictionary new.
	aMap at: 3@3 put: aNoPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	self should: [ playableCharacter take ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
			self assert: Backpack cantAddNoPortableObjectErrorDescription equals: anError messageText.
			self assert: (aRoom isPositionOccupied: 3@3).
		]
	
	! !

!testRun: #PlayableCharacterInARoomTest #test06_noPortableObjectsCannotBeTaken stamp: 'FD 12/10/2020 21:11:45'!
ERROR!
!Backpack class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:11:54'!
cantAddNoPortableObjectErrorDescription
	self shouldBeImplemented.! !
!Backpack class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:12:07' prior: 50879713!
cantAddNoPortableObjectErrorDescription
	
	^ 'Cannot add a no portable object'.! !

!testRun: #PlayableCharacterInARoomTest #test06_noPortableObjectsCannotBeTaken stamp: 'FD 12/10/2020 21:12:11'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 21:12:11'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:12:11'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:12:11'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 21:12:11'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test05_takenPortableObjectsAreNotInRoom stamp: 'FD 12/10/2020 21:12:11'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test06_noPortableObjectsCannotBeTaken stamp: 'FD 12/10/2020 21:12:11'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test05_takenPortableObjectsAreNotInRoom stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test06_noPortableObjectsCannotBeTaken stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 21:12:14'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 21:12:14'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:12:38' prior: 50879523!
takeFromPosition: aPoint for: aPlayableCharacterInARoom 
	
	| stageObject |
	
	stageObject := map at: aPoint.
	aPlayableCharacterInARoom take: stageObject .
	
	map removeKey: aPoint.! !
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:14:22'!
test07_takesPortableObjectsFromNoPortableObjects

	| playableCharacter aRoom aMap aNoPortableObject aPortableObject |
	
	aPortableObject := NoPointsPortableObject named: 'key' weighing: 1. 
	aNoPortableObject := NoPortableObject named: 'desk' containing: aPortableObject. 
	aMap := Dictionary new.
	aMap at: 3@3 put: aNoPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	self should: [ playableCharacter take ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
			self assert: Backpack cantAddNoPortableObjectErrorDescription equals: anError messageText.
			self assert: (aRoom isPositionOccupied: 3@3).
		]
	
	! !
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:15:22' prior: 50879892!
test07_takesPortableObjectsFromNoPortableObjects

	| playableCharacter aRoom aMap aNoPortableObject aPortableObject |
	
	aPortableObject := NoPointsPortableObject named: 'key' weighing: 1. 
	aNoPortableObject := NoPortableObject named: 'desk' containing: aPortableObject. 
	aMap := Dictionary new.
	aMap at: 3@3 put: aNoPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: aPortableObject).
	self assert: (aRoom isPositionOccupied: 3@3).! !

!testRun: #PlayableCharacterInARoomTest #test07_takesPortableObjectsFromNoPortableObjects stamp: 'FD 12/10/2020 21:15:24'!
ERROR!
!NoPortableObject class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 21:15:36'!
named: aString containing: aNoPointsPortableObject 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString containing: aNoPointsPortableObject ! !
!NoPortableObject class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 21:16:01' prior: 50879948!
named: aName containing: aPortableObject 
	
	^self new initializeNamed: aName containing: aPortableObject. ! !

!testRun: #PlayableCharacterInARoomTest #test07_takesPortableObjectsFromNoPortableObjects stamp: 'FD 12/10/2020 21:16:02'!
ERROR!

!classDefinition: #NoPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 21:16:11'!
StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name portableObject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NoPortableObject methodsFor: 'initialization' stamp: 'FD 12/10/2020 21:16:11'!
initializeNamed: aName containing: aPortableObject 
	self shouldBeImplemented.
	name := aName.
	portableObject := aPortableObject.! !

!classDefinition: #NoPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 21:16:35'!
StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name portableObject contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NoPortableObject methodsFor: 'initialization' stamp: 'FD 12/10/2020 21:16:33' prior: 50879978!
initializeNamed: aName containing: aPortableObject 
	
	
	name := aName.
	contents := aPortableObject.! !

StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NoPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'FD 12/10/2020 21:16:41'!
StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NoPortableObject class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:16:59' prior: 50879603!
named: aName

	^ self new named: aName containing: OrderedCollection new.! !
!NoPortableObject class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 21:17:11' prior: 50879959!
named: aName containing: aPortableObject 
	
	^self new named: aName containing: aPortableObject. ! !
!NoPortableObject class methodsFor: 'instance creation' stamp: 'FD 12/10/2020 21:17:16' prior: 50880022!
named: aName containing: aCollection 
	
	^self new named: aName containing: aCollection. ! !
!NoPortableObject methodsFor: 'initialization' stamp: 'FD 12/10/2020 21:17:31'!
named: aName containing: aPortableObject 
	
	
	name := aName.
	contents := aPortableObject.! !

!methodRemoval: NoPortableObject #initializeNamed:containing: stamp: 'FD 12/10/2020 21:17:31'!
initializeNamed: aName containing: aPortableObject 
	
	
	name := aName.
	contents := aPortableObject.!
!NoPortableObject methodsFor: 'initialization' stamp: 'FD 12/10/2020 21:17:36' prior: 50880035!
named: aName containing: aCollection 
	
	
	name := aName.
	contents := aCollection.! !

!methodRemoval: NoPortableObject #named: stamp: 'FD 12/10/2020 21:17:41'!
named: aName

	name := aName.!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test05_takenPortableObjectsAreNotInRoom stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test06_noPortableObjectsCannotBeTaken stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test07_takesPortableObjectsFromNoPortableObjects stamp: 'FD 12/10/2020 21:17:47'!
ERROR!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 21:17:47'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test07_takesPortableObjectsFromNoPortableObjects stamp: 'FD 12/10/2020 21:17:47'!
ERROR!
!NoPortableObject methodsFor: 'adding' stamp: 'FD 12/10/2020 21:21:27' prior: 50879667 overrides: 50879611!
assertCanAddTo: aBackpack

	contents ifEmpty: [aBackpack assertCanAddNoPortableObject: self].
	contents do: [:aPortableObject | aPortableObject assertCanAddTo: aBackpack ]! !
!NoPortableObject methodsFor: 'adding' stamp: 'FD 12/10/2020 21:09:33' prior: 50880197 overrides: 50879611!
assertCanAddTo: aBackpack

	^aBackpack assertCanAddNoPortableObject: self! !

!methodRemoval: Room #takeFromPosition: stamp: 'FD 12/10/2020 21:22:30'!
takeFromPosition: aPoint 
	self shouldBeImplemented.!
!Room methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:23:50' prior: 50879883!
takeFromPosition: aPoint for: aPlayableCharacterInARoom 
	
	| stageObject |
	
	stageObject := map at: aPoint.
	aPlayableCharacterInARoom take: stageObject .
	
	map removeKey: aPoint.! !
!NoPortableObject methodsFor: 'adding' stamp: 'FD 12/10/2020 21:21:27' prior: 50880206 overrides: 50879611!
assertCanAddTo: aBackpack

	contents ifEmpty: [aBackpack assertCanAddNoPortableObject: self].
	contents do: [:aPortableObject | aPortableObject assertCanAddTo: aBackpack ]! !
!NoPortableObject methodsFor: 'adding' stamp: 'FD 12/10/2020 21:09:33' prior: 50880226 overrides: 50879611!
assertCanAddTo: aBackpack

	^aBackpack assertCanAddNoPortableObject: self! !
!NoPortableObject methodsFor: 'nil' stamp: 'FD 12/10/2020 21:27:22'!
firstPortableObject

	contents ifEmpty: [self error: 'object does not have portable contents'].
	^ contents first! !
!StageObject methodsFor: 'nil' stamp: 'FD 12/10/2020 21:27:44'!
firstPortableObject

	self subclassResponsibility.! !
!PortableObject methodsFor: 'nil' stamp: 'FD 12/10/2020 21:27:59' overrides: 50880246!
firstPortableObject

	^self.! !
!Room methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:28:24' prior: 50880216!
takeFromPosition: aPoint for: aPlayableCharacterInARoom 
	
	| stageObject |
	
	stageObject := map at: aPoint.
	aPlayableCharacterInARoom take: stageObject firstPortableObject.
	
	map removeKey: aPoint.! !

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 21:28:27'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 21:28:27'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 21:28:27'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 21:28:27'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test05_takenPortableObjectsAreNotInRoom stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test06_noPortableObjectsCannotBeTaken stamp: 'FD 12/10/2020 21:28:30'!
FAILURE!

!testRun: #PlayableCharacterInARoomTest #test07_takesPortableObjectsFromNoPortableObjects stamp: 'FD 12/10/2020 21:28:30'!
ERROR!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 21:28:30'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 21:28:41'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:28:41'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:28:41'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 21:28:41'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test05_takenPortableObjectsAreNotInRoom stamp: 'FD 12/10/2020 21:28:41'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test06_noPortableObjectsCannotBeTaken stamp: 'FD 12/10/2020 21:28:41'!
FAILURE!

!testRun: #PlayableCharacterInARoomTest #test07_takesPortableObjectsFromNoPortableObjects stamp: 'FD 12/10/2020 21:28:41'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test07_takesPortableObjectsFromNoPortableObjects stamp: 'FD 12/10/2020 21:28:46'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 21:29:04'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:29:04'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:29:04'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 21:29:04'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test05_takenPortableObjectsAreNotInRoom stamp: 'FD 12/10/2020 21:29:04'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test06_noPortableObjectsCannotBeTaken stamp: 'FD 12/10/2020 21:29:04'!
FAILURE!

!testRun: #PlayableCharacterInARoomTest #test07_takesPortableObjectsFromNoPortableObjects stamp: 'FD 12/10/2020 21:29:04'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test07_takesPortableObjectsFromNoPortableObjects stamp: 'FD 12/10/2020 21:29:06'!
ERROR!
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:29:44' prior: 50879920!
test07_takesPortableObjectsFromNoPortableObjects

	| playableCharacter aRoom aMap aNoPortableObject aPortableObject |
	
	aPortableObject := NoPointsPortableObject named: 'key' weighing: 1. 
	aNoPortableObject := NoPortableObject named: 'desk' containing: (OrderedCollection with: aPortableObject). 
	aMap := Dictionary new.
	aMap at: 3@3 put: aNoPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: aPortableObject).
	self assert: (aRoom isPositionOccupied: 3@3).! !

!testRun: #PlayableCharacterInARoomTest #test07_takesPortableObjectsFromNoPortableObjects stamp: 'FD 12/10/2020 21:29:45'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:31:20' prior: 50880255!
takeFromPosition: aPoint for: aPlayableCharacterInARoom 
	
	| stageObject portableObject |
	
	stageObject := map at: aPoint.
	portableObject := stageObject firstPortableObject.
	aPlayableCharacterInARoom take: portableObject.
	
	stageObject = portableObject ifTrue: [ map removeKey: aPoint].! !

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 21:31:22'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 21:31:22'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 21:31:22'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 21:31:22'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test05_takenPortableObjectsAreNotInRoom stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test06_noPortableObjectsCannotBeTaken stamp: 'FD 12/10/2020 21:31:24'!
FAILURE!

!testRun: #PlayableCharacterInARoomTest #test07_takesPortableObjectsFromNoPortableObjects stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 21:31:24'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test06_noPortableObjectsCannotBeTaken stamp: 'FD 12/10/2020 21:31:24'!
FAILURE!
!NoPortableObject methodsFor: 'accessing' stamp: 'FD 12/10/2020 21:31:56'!
objectDoesNoHavePortableContentsErrorDescription

	^ 'object does not have portable contents'! !
!NoPortableObject methodsFor: 'accessing' stamp: 'FD 12/10/2020 21:31:56' prior: 50880240 overrides: 50880246!
firstPortableObject

	contents ifEmpty: [self error: self objectDoesNoHavePortableContentsErrorDescription].
	^ contents first! !

!methodRemoval: NoPortableObject #objectDoesNoHavePortableContentsErrorDescription stamp: 'FD 12/10/2020 21:32:04'!
objectDoesNoHavePortableContentsErrorDescription

	^ 'object does not have portable contents'!
!NoPortableObject class methodsFor: 'nil' stamp: 'FD 12/10/2020 21:32:09'!
objectDoesNoHavePortableContentsErrorDescription

	^ 'object does not have portable contents'! !
!NoPortableObject methodsFor: 'accessing' stamp: 'FD 12/10/2020 21:32:19' prior: 50880677 overrides: 50880246!
firstPortableObject

	contents ifEmpty: [self error: self class objectDoesNoHavePortableContentsErrorDescription].
	^ contents first! !
!NoPortableObject methodsFor: 'accessing' stamp: 'FD 12/10/2020 21:32:30'!
signalNoPortableContents

	^ self error: self class objectDoesNoHavePortableContentsErrorDescription! !
!NoPortableObject methodsFor: 'accessing' stamp: 'FD 12/10/2020 21:32:30' prior: 50880698 overrides: 50880246!
firstPortableObject

	contents ifEmpty: [self signalNoPortableContents].
	^ contents first! !
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:33:12' prior: 50879685!
test06_noPortableObjectsCannotBeTaken

	| playableCharacter aRoom aMap aNoPortableObject |
	
	aNoPortableObject := NoPortableObject named: 'desk'. 
	aMap := Dictionary new.
	aMap at: 3@3 put: aNoPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	self should: [ playableCharacter take ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
			self assert: NoPointsPortableObject equals: anError messageText.
			self assert: (aRoom isPositionOccupied: 3@3).
		]
	
	! !
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:33:35' prior: 50880719!
test06_noPortableObjectsCannotBeTaken

	| playableCharacter aRoom aMap aNoPortableObject |
	
	aNoPortableObject := NoPortableObject named: 'desk'. 
	aMap := Dictionary new.
	aMap at: 3@3 put: aNoPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	self should: [ playableCharacter take ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
			self assert: NoPointsPortableObject objectDoesNoHavePortableContentsErrorDescription equals: anError messageText.
			self assert: (aRoom isPositionOccupied: 3@3).
		]
	
	! !

!testRun: #PlayableCharacterInARoomTest #test06_noPortableObjectsCannotBeTaken stamp: 'FD 12/10/2020 21:33:36'!
ERROR!
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:33:50' prior: 50880743!
test06_noPortableObjectsCannotBeTaken

	| playableCharacter aRoom aMap aNoPortableObject |
	
	aNoPortableObject := NoPortableObject named: 'desk'. 
	aMap := Dictionary new.
	aMap at: 3@3 put: aNoPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	self should: [ playableCharacter take ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
			self assert: NoPortableObject objectDoesNoHavePortableContentsErrorDescription equals: anError messageText.
			self assert: (aRoom isPositionOccupied: 3@3).
		]
	
	! !

!testRun: #PlayableCharacterInARoomTest #test06_noPortableObjectsCannotBeTaken stamp: 'FD 12/10/2020 21:33:51'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 21:33:51'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:33:51'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:33:51'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 21:33:51'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test05_takenPortableObjectsAreNotInRoom stamp: 'FD 12/10/2020 21:33:51'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test06_noPortableObjectsCannotBeTaken stamp: 'FD 12/10/2020 21:33:51'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test07_takesPortableObjectsFromNoPortableObjects stamp: 'FD 12/10/2020 21:33:51'!
PASSED!
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:34:07'!
test06_emptyNoPortableObjectsCannotBeTaken

	| playableCharacter aRoom aMap aNoPortableObject |
	
	aNoPortableObject := NoPortableObject named: 'desk'. 
	aMap := Dictionary new.
	aMap at: 3@3 put: aNoPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	self should: [ playableCharacter take ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
			self assert: NoPortableObject objectDoesNoHavePortableContentsErrorDescription equals: anError messageText.
			self assert: (aRoom isPositionOccupied: 3@3).
		]
	
	! !

!methodRemoval: PlayableCharacterInARoomTest #test06_noPortableObjectsCannotBeTaken stamp: 'FD 12/10/2020 21:34:09'!
test06_noPortableObjectsCannotBeTaken

	| playableCharacter aRoom aMap aNoPortableObject |
	
	aNoPortableObject := NoPortableObject named: 'desk'. 
	aMap := Dictionary new.
	aMap at: 3@3 put: aNoPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	self should: [ playableCharacter take ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
			self assert: NoPortableObject objectDoesNoHavePortableContentsErrorDescription equals: anError messageText.
			self assert: (aRoom isPositionOccupied: 3@3).
		]
	
	!
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:35:18'!
test08_cannotTakeFromEmptyLocation

	| playableCharacter aRoom aMap aNoPortableObject aPortableObject |
	
	aPortableObject := NoPointsPortableObject named: 'key' weighing: 1. 
	aNoPortableObject := NoPortableObject named: 'desk' containing: (OrderedCollection with: aPortableObject). 
	aMap := Dictionary new.
	aMap at: 3@3 put: aNoPortableObject.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: aPortableObject).
	self assert: (aRoom isPositionOccupied: 3@3).! !
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'FD 12/10/2020 21:36:23' prior: 50880878!
test08_cannotTakeFromEmptyLocation

	| playableCharacter aRoom aMap |
	
	
	aMap := Dictionary new.

	aRoom :=  Room withLength: 5 andWidth: 5 withMap: aMap.
	
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #North inRoom: aRoom . 
	
	self should: [ playableCharacter take ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
			self assert: Room cannotTakeFromEmptyLocationErrorDescription equals: anError messageText.
		]
	
	! !

!testRun: #PlayableCharacterInARoomTest #test08_cannotTakeFromEmptyLocation stamp: 'FD 12/10/2020 21:36:26'!
ERROR!
!Room class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:36:32'!
cannotTakeFromEmptyLocationErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:36:44' prior: 50880925!
cannotTakeFromEmptyLocationErrorDescription
	
	^ 'cannot take object from empty location'.! !

!testRun: #PlayableCharacterInARoomTest #test08_cannotTakeFromEmptyLocation stamp: 'FD 12/10/2020 21:36:46'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:37:46' prior: 50880506!
takeFromPosition: aPoint for: aPlayableCharacterInARoom 
	
	| stageObject portableObject |
	
	self assertPositionHasObject: aPoint.
	
	stageObject := map at: aPoint.
	portableObject := stageObject firstPortableObject.
	aPlayableCharacterInARoom take: portableObject.
	
	stageObject = portableObject ifTrue: [ map removeKey: aPoint].! !
!Room methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:38:37'!
assertPositionHasObject: aPoint

	(self isPositionOccupied: aPoint) ifFalse: [self error: self class cannotTakeFromEmptyLocationErrorDescription ].! !
!Room methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:38:50'!
signalEmptyLocation

	^ self error: self class cannotTakeFromEmptyLocationErrorDescription! !
!Room methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:38:50' prior: 50880954!
assertPositionHasObject: aPoint

	(self isPositionOccupied: aPoint) ifFalse: [self signalEmptyLocation ].! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test05_takenPortableObjectsAreNotInRoom stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test06_emptyNoPortableObjectsCannotBeTaken stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test07_takesPortableObjectsFromNoPortableObjects stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test08_cannotTakeFromEmptyLocation stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 21:39:04'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 21:39:04'!
PASSED!
!Room class methodsFor: 'error messages' stamp: 'FD 12/10/2020 21:41:06'!
invalidRoomSizeErrorDescription

	^ 'Room size is invalid'.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:41:06' prior: 50871328!
test01_RoomLengthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withLength: 0 andWidth: 5 withMap: self defaultMap ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorDescription.
		self assert: aRoom isNil.
		]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:41:06' prior: 50871341!
test02_RoomWidthMustBePositive

	| aRoom |
	
	self
	should: [ aRoom := Room withLength: 5 andWidth: 0 withMap: self defaultMap ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: Room invalidRoomSizeErrorDescription.
		self assert: aRoom isNil.
		].! !
!Room class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:41:06' prior: 50875927!
withLength: aLength andWidth: aWidth withMap: aMap 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorDescription].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorDescription].
	
	(aMap keys allSatisfy: [:point | 
		self isPoint: point withinWidth: aWidth andLength: aLength 
		]) ifFalse: [self error: self mapHasAnInvalidPositionErrorMessage ].
		
	^self new initializeWithLength: aLength andWidth: aWidth withMap: aMap. ! !

!methodRemoval: Room class #invalidRoomSizeErrorMessage stamp: 'FD 12/10/2020 21:41:06'!
invalidRoomSizeErrorMessage

	^ 'Room size is invalid'.!
!Room class methodsFor: 'error messages' stamp: 'FD 12/10/2020 21:41:16'!
mapHasAnInvalidPositionErrorDescription
	
	
	^ 'Invalid map position'.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:41:16' prior: 50881143!
withLength: aLength andWidth: aWidth withMap: aMap 

	aLength strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorDescription].
	aWidth strictlyPositive ifFalse: [self error: self invalidRoomSizeErrorDescription].
	
	(aMap keys allSatisfy: [:point | 
		self isPoint: point withinWidth: aWidth andLength: aLength 
		]) ifFalse: [self error: self mapHasAnInvalidPositionErrorDescription ].
		
	^self new initializeWithLength: aLength andWidth: aWidth withMap: aMap. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:41:16' prior: 50875586!
test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition

	| aRoom  aMap |
	
	aMap := Dictionary new.
	aMap at: 2@5 put: (NoPointsPortableObject named: 'key' weighing: 1) .
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 5 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room mapHasAnInvalidPositionErrorDescription.
			self assert: aRoom isNil.
			].! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FD 12/10/2020 21:41:16' prior: 50875544!
test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition

	| aRoom aMap |
	
	
	aMap := Dictionary new.
	aMap at: 5@2 put: (NoPointsPortableObject named: 'key' weighing: 1) .
	
	self
		should: [ aRoom := Room withLength: 5 andWidth: 5 withMap: aMap ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Room mapHasAnInvalidPositionErrorDescription.
			self assert: aRoom isNil.
			].! !

!methodRemoval: Room class #mapHasAnInvalidPositionErrorMessage stamp: 'FD 12/10/2020 21:41:16'!
mapHasAnInvalidPositionErrorMessage
	
	
	^ 'Invalid map position'.!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #FreePlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #FreePlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #FreePlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #FreePlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #FreePlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #FreePlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #FreePlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #FreePlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #FreePlayableCharacterTest #test09_canTakePortableObjects stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #FreePlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test01_canNotStartOutsideTheRoomLimits stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test02_canNotMoveForwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test03_canNotMoveBackwardIntoAnInvalidPosition stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test04_takesThePortableObjectInFront stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test05_takenPortableObjectsAreNotInRoom stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test06_emptyNoPortableObjectsCannotBeTaken stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test07_takesPortableObjectsFromNoPortableObjects stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #PlayableCharacterInARoomTest #test08_cannotTakeFromEmptyLocation stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #RoomTest #test01_RoomLengthMustBePositive stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #RoomTest #test02_RoomWidthMustBePositive stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #RoomTest #test03_aRoomCannotBeCreatedWithAMapWithAnInvalidXPosition stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

!testRun: #RoomTest #test04_aRoomCannotBeCreatedWithAMapWithAnInvalidYPosition stamp: 'FD 12/10/2020 21:41:18'!
PASSED!

----SNAPSHOT----(10 December 2020 21:42:12) CuisUniversity-4384.image priorSource: 17155564!