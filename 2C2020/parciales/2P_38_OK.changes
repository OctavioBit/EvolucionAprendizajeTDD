----STARTUP---- (10 December 2020 14:38:52) as /home/kali/exactas/ing1/vm-parcial/CuisUniversity-4384.image!


!classRemoval: #PointsPortableObject stamp: 'CJ 12/10/2020 14:39:29'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Resolucion'!

!classRemoval: #NoPointsPortableObject stamp: 'CJ 12/10/2020 14:39:30'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Resolucion'!

!classRemoval: #PortableObject stamp: 'CJ 12/10/2020 14:39:30'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Resolucion'!

!classRemoval: #Door stamp: 'CJ 12/10/2020 14:39:31'!
StageObject subclass: #Door
	instanceVariableNames: 'state key renameMe1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Resolucion'!

!classRemoval: #StageObject stamp: 'CJ 12/10/2020 14:39:31'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Resolucion'!

!classRemoval: #PlayableCharacter stamp: 'CJ 12/10/2020 14:39:32'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'name backpack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Resolucion'!

!classRemoval: #OpenedDoorState stamp: 'CJ 12/10/2020 14:39:32'!
DoorState subclass: #OpenedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Resolucion'!

!classRemoval: #KeyClosedDoorState stamp: 'CJ 12/10/2020 14:39:33'!
ClosedDoorState subclass: #KeyClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Resolucion'!

!classRemoval: #ClosedDoorState stamp: 'CJ 12/10/2020 14:39:33'!
DoorState subclass: #ClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Resolucion'!

!classRemoval: #DoorState stamp: 'CJ 12/10/2020 14:39:33'!
Object subclass: #DoorState
	instanceVariableNames: 'door'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Resolucion'!

!classRemoval: #Backpack stamp: 'CJ 12/10/2020 14:39:34'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Resolucion'!

!classRemoval: #DoorTest stamp: 'CJ 12/10/2020 14:39:34'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Resolucion'!

!classRemoval: #BackpackTest stamp: 'CJ 12/10/2020 14:39:35'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Resolucion'!

----End fileIn of /home/kali/exactas/ing1/vm-parcial/ISW1-2020-2C-2doParcial.st----!

TestCase subclass: #ExtensionTestCHANGEME
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #ExtensionTestCHANGEME category: 'ISW1-2020-2C-2doParcial' stamp: 'CJ 12/10/2020 15:33:36'!
TestCase subclass: #ExtensionTestCHANGEME
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'CJ 12/10/2020 15:35:43'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!ExtensionTestCHANGEME methodsFor: 'no messages' stamp: 'CJ 12/10/2020 15:35:40'!
test01RoomDimensionsCannotBeNegative

	self
		should: [ Room width: -1 height: -1 ]
		raise: Error
		withMessageText: ''! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:35:51' prior: 50895639!
test01RoomDimensionsCannotBeNegative

	self
		should: [ Room width: -1 height: 1 ]
		raise: Error
		withMessageText: ''! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:37:10' prior: 50895647!
test01RoomDimensionsCannotBeNegative

	self
		should: [ Room width: -1 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.
		
	self
		should: [ Room width: 1 height: -1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.! !

!testRun: #ExtensionTestCHANGEME #test01RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 15:37:15'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'CJ 12/10/2020 15:37:31'!
invalidRoomDimensionsErrorMessage
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'CJ 12/10/2020 15:37:57' prior: 50895670!
invalidRoomDimensionsErrorMessage
	
	^ 'Both room dimensions must be positive integers'! !

!testRun: #ExtensionTestCHANGEME #test01RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 15:37:59'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'CJ 12/10/2020 15:38:15'!
width: aSmallInteger height: aSmallInteger2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWidth: aSmallInteger height: aSmallInteger2 ! !
!Room class methodsFor: 'instance creation' stamp: 'CJ 12/10/2020 15:38:32' prior: 50895684!
width: aWidth height: aHeight 

	^ self new initializeWidth: aWidth height: aHeight ! !

!testRun: #ExtensionTestCHANGEME #test01RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 15:38:35'!
FAILURE!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'CJ 12/10/2020 15:38:50'!
Object subclass: #Room
	instanceVariableNames: 'width'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'CJ 12/10/2020 15:38:50'!
Object subclass: #Room
	instanceVariableNames: 'width height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'CJ 12/10/2020 15:38:50'!
initializeWidth: aWidth height: aHeight 
	self shouldBeImplemented.
	width := aWidth.
	height := aHeight.! !
!Room methodsFor: 'initialization' stamp: 'CJ 12/10/2020 15:38:53' prior: 50895718!
initializeWidth: aWidth height: aHeight 
	
	width := aWidth.
	height := aHeight.! !

!testRun: #ExtensionTestCHANGEME #test01RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 15:38:55'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'CJ 12/10/2020 15:39:22' prior: 50895694!
width: aWidth height: aHeight 
	
	self signalInvalidRoomDimensions.
	^ self new initializeWidth: aWidth height: aHeight ! !

!testRun: #ExtensionTestCHANGEME #test01RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 15:39:30'!
FAILURE!
!Room class methodsFor: 'exceptions' stamp: 'CJ 12/10/2020 15:39:39'!
signalInvalidRoomDimensions
	self shouldBeImplemented.! !
!Room class methodsFor: 'exceptions' stamp: 'CJ 12/10/2020 15:39:46' prior: 50895745!
signalInvalidRoomDimensions
	
	self error: self class invalidRoomDimensionsErrorMessage ! !

!testRun: #ExtensionTestCHANGEME #test01RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 15:39:47'!
FAILURE!
!Room class methodsFor: 'exceptions' stamp: 'CJ 12/10/2020 15:39:59' prior: 50895750!
signalInvalidRoomDimensions
	
	self error: self invalidRoomDimensionsErrorMessage ! !

!testRun: #ExtensionTestCHANGEME #test01RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 15:40:00'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 15:40:00'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:40:07'!
test01RoomDimensionsCannotBeZero

	self
		should: [ Room width: -1 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.
		
	self
		should: [ Room width: 1 height: -1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:40:13'!
test02RoomDimensionsCannotBeZero

	self
		should: [ Room width: -1 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.
		
	self
		should: [ Room width: 1 height: -1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.! !

!methodRemoval: ExtensionTestCHANGEME #test01RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 15:40:13'!
test01RoomDimensionsCannotBeZero

	self
		should: [ Room width: -1 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.
		
	self
		should: [ Room width: 1 height: -1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.!
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:40:22' prior: 50895785!
test02RoomDimensionsCannotBeZero

	self
		should: [ Room width: 0 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.
		
	self
		should: [ Room width: 1 height: 0 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:40:24' prior: 50895809!
test02RoomDimensionsCannotBeZero

	self
		should: [ Room width: 0 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.
		
	self
		should: [ Room width: 1 height: 0 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.! !

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 15:40:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 15:40:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 15:40:25'!
PASSED!

!methodRemoval: ExtensionTestCHANGEME #test02RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 15:40:44'!
test02RoomDimensionsCannotBeZero

	self
		should: [ Room width: 0 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.
		
	self
		should: [ Room width: 1 height: 0 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.!
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:42:34'!
test02RoomIsCreatedEmpty

	self
		should: [ Room width: -1 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.
		
	self
		should: [ Room width: 1 height: -1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:44:14'!
test02RoomPositionIsEmpty

	| room |
	
	room := Room width: 1 height: 1.
	
	self assert: (Room at: 0@0) isEmpty! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:44:19' prior: 50895867!
test02RoomPositionIsEmpty

	| room |
	
	room := Room width: 1 height: 1.
	
	self assert: (room at: 0@0) isEmpty! !

!testRun: #ExtensionTestCHANGEME #test02RoomPositionIsEmpty stamp: 'CJ 12/10/2020 15:44:22'!
ERROR!

!methodRemoval: ExtensionTestCHANGEME #test02RoomIsCreatedEmpty stamp: 'CJ 12/10/2020 15:44:27'!
test02RoomIsCreatedEmpty

	self
		should: [ Room width: -1 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.
		
	self
		should: [ Room width: 1 height: -1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.!

!testRun: #ExtensionTestCHANGEME #test02RoomPositionIsEmpty stamp: 'CJ 12/10/2020 15:44:30'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test02RoomPositionIsEmpty stamp: 'CJ 12/10/2020 15:44:30'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'CJ 12/10/2020 15:45:20' prior: 50895735!
width: aWidth height: aHeight 
	
	(aWidth = -1 or: [aHeight = -1]) ifTrue: [ self signalInvalidRoomDimensions ].
	^ self new initializeWidth: aWidth height: aHeight ! !

!testRun: #ExtensionTestCHANGEME #test02RoomPositionIsEmpty stamp: 'CJ 12/10/2020 15:45:23'!
ERROR!
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:45:40' prior: 50895874!
test02RoomPositionIsEmpty

	| room |
	
	room := Room width: 1 height: 1.
	
	self assert: (room atPosition: 0@0) isEmpty! !

!testRun: #ExtensionTestCHANGEME #test02RoomPositionIsEmpty stamp: 'CJ 12/10/2020 15:45:44'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:45:54'!
atPosition: aPoint 
	self shouldBeImplemented.! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:46:09' prior: 50895914!
test02RoomPositionIsEmpty

	| room |
	
	room := Room width: 1 height: 1.
	
	self assert: (room isEmptyAt: 0@0)! !

!methodRemoval: Room #atPosition: stamp: 'CJ 12/10/2020 15:46:14'!
atPosition: aPoint 
	self shouldBeImplemented.!

!testRun: #ExtensionTestCHANGEME #test01RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 15:46:18'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomPositionIsEmpty stamp: 'CJ 12/10/2020 15:46:18'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test02RoomPositionIsEmpty stamp: 'CJ 12/10/2020 15:46:18'!
ERROR!
!Room methodsFor: 'testing' stamp: 'CJ 12/10/2020 15:46:24'!
isEmptyAt: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'CJ 12/10/2020 15:46:34' prior: 50895948!
isEmptyAt: aPosition
	
	^ true! !

!testRun: #ExtensionTestCHANGEME #test02RoomPositionIsEmpty stamp: 'CJ 12/10/2020 15:46:35'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 15:46:37'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomPositionIsEmpty stamp: 'CJ 12/10/2020 15:46:37'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:46:57'!
test02RoomDimensionsCannotBeNegative

	self
		should: [ Room width: -1 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.
		
	self
		should: [ Room width: 1 height: -1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.! !

!methodRemoval: ExtensionTestCHANGEME #test01RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 15:46:57'!
test01RoomDimensionsCannotBeNegative

	self
		should: [ Room width: -1 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.
		
	self
		should: [ Room width: 1 height: -1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.!
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:47:02'!
test01RoomPositionIsEmpty

	| room |
	
	room := Room width: 1 height: 1.
	
	self assert: (room isEmptyAt: 0@0)! !

!methodRemoval: ExtensionTestCHANGEME #test02RoomPositionIsEmpty stamp: 'CJ 12/10/2020 15:47:02'!
test02RoomPositionIsEmpty

	| room |
	
	room := Room width: 1 height: 1.
	
	self assert: (room isEmptyAt: 0@0)!
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:47:07'!
test01NewRoomPositionIsEmpty

	| room |
	
	room := Room width: 1 height: 1.
	
	self assert: (room isEmptyAt: 0@0)! !

!methodRemoval: ExtensionTestCHANGEME #test01RoomPositionIsEmpty stamp: 'CJ 12/10/2020 15:47:07'!
test01RoomPositionIsEmpty

	| room |
	
	room := Room width: 1 height: 1.
	
	self assert: (room isEmptyAt: 0@0)!
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:47:17'!
test03RoomDimensionsCannotBeZero

	self
		should: [ Room width: -1 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.
		
	self
		should: [ Room width: 1 height: -1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:47:25' prior: 50896017!
test03RoomDimensionsCannotBeZero

	self
		should: [ Room width: 0 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.
		
	self
		should: [ Room width: 1 height: 0 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.! !

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 15:47:26'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'CJ 12/10/2020 15:47:57' prior: 50895902!
width: aWidth height: aHeight 
	
	(aWidth < 1 or: [aHeight < 1]) ifTrue: [ self signalInvalidRoomDimensions ].
	^ self new initializeWidth: aWidth height: aHeight ! !

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 15:48:01'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 15:48:01'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 15:48:01'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 15:48:01'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:48:39'!
assertDimensionIsInvalid

	self
		should: [ Room width: -1 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.
		
	self
		should: [ Room width: 1 height: -1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:48:40' prior: 50895966!
test02RoomDimensionsCannotBeNegative

	self assertDimensionIsInvalid.! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:49:04'!
assertDimensionIsInvalid: aDimension

	self
		should: [ Room width: aDimension height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.
		
	self
		should: [ Room width: 1 height: aDimension ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage! !

!methodRemoval: ExtensionTestCHANGEME #assertDimensionIsInvalid stamp: 'CJ 12/10/2020 15:49:13'!
assertDimensionIsInvalid

	self
		should: [ Room width: -1 height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage.
		
	self
		should: [ Room width: 1 height: -1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage!
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:49:23' prior: 50896078!
test02RoomDimensionsCannotBeNegative

	self assertDimensionIsInvalid: -1.! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:49:42' prior: 50896029!
test03RoomDimensionsCannotBeZero

	self assertDimensionIsInvalid: 0.! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:50:00'!
assertDimensionsAreInvalid: aDimension

	^ self
		should: [ Room width: aDimension height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:50:00' prior: 50896084!
assertDimensionIsInvalid: aDimension

	self assertDimensionsAreInvalid: aDimension.
		
	self
		should: [ Room width: 1 height: aDimension ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:50:42'!
assertInvalidWidth: aWidth andHeight: aHeight

	^ self
		should: [ Room width: aWidth height: aHeight ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:51:57' prior: 50896129!
assertDimensionIsInvalid: aDimension

	self assertInvalidWidth: aDimension andHeight: 1.
	self assertInvalidWidth: 1 andHeight: aDimension .! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:51:57' prior: 50896148!
assertDimensionIsInvalid: aDimension

	self assertInvalidWidth: aDimension andHeight: 1.
	self assertInvalidWidth: 1 andHeight: aDimension.! !

!methodRemoval: ExtensionTestCHANGEME #assertDimensionsAreInvalid: stamp: 'CJ 12/10/2020 15:52:01'!
assertDimensionsAreInvalid: aDimension

	^ self
		should: [ Room width: aDimension height: 1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage!
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:52:06' prior: 50896139!
assertInvalidWidth: aWidth andHeight: aHeight

	self
		should: [ Room width: aWidth height: aHeight ]
		raise: Error
		withMessageText: Room invalidRoomDimensionsErrorMessage! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:52:39'!
test03RoomDimensionsCannotBeNonIntegers

	self assertDimensionIsInvalid: 1.5.! !

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 15:52:42'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'CJ 12/10/2020 15:53:39' prior: 50896044!
width: aWidth height: aHeight 
	
	(aWidth < 1 or: [aHeight < 1]) ifTrue: [ self signalInvalidRoomDimensions ].
	(aWidth isInteger and: [aHeight isInteger]) ifFalse: [ self signalInvalidRoomDimensions ].
	^ self new initializeWidth: aWidth height: aHeight ! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 15:53:41'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 15:53:41'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 15:53:41'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 15:53:41'!
PASSED!
!Room class methodsFor: 'instance creation' stamp: 'CJ 12/10/2020 15:54:15'!
assertPositiveWidth: aWidth andHeight: aHeight

	^ (aWidth < 1 or: [aHeight < 1]) ifTrue: [ self signalInvalidRoomDimensions ]! !
!Room class methodsFor: 'instance creation' stamp: 'CJ 12/10/2020 15:54:15' prior: 50896192!
width: aWidth height: aHeight 
	
	self assertPositiveWidth: aWidth andHeight: aHeight.
	(aWidth isInteger and: [aHeight isInteger]) ifFalse: [ self signalInvalidRoomDimensions ].
	^ self new initializeWidth: aWidth height: aHeight ! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 15:54:18'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 15:54:18'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 15:54:18'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 15:54:18'!
PASSED!
!Room class methodsFor: 'instance creation' stamp: 'CJ 12/10/2020 15:55:36'!
assertIntegerWidth: aHeight andHeight: aWidth

	^ (aWidth isInteger and: [aHeight isInteger]) ifFalse: [ self signalInvalidRoomDimensions ]! !
!Room class methodsFor: 'instance creation' stamp: 'CJ 12/10/2020 15:55:36' prior: 50896224!
width: aWidth height: aHeight 
	
	self assertPositiveWidth: aWidth andHeight: aHeight.
	self assertIntegerWidth: aHeight andHeight: aWidth.
	^ self new initializeWidth: aWidth height: aHeight ! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 15:55:38'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 15:55:38'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 15:55:38'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 15:55:38'!
PASSED!
!Room class methodsFor: 'instance creation' stamp: 'CJ 12/10/2020 15:55:42' prior: 50896256!
width: aWidth height: aHeight 
	
	self assertPositiveWidth: aWidth andHeight: aHeight.
	self assertIntegerWidth: aHeight andHeight: aWidth.
	
	^ self new initializeWidth: aWidth height: aHeight ! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:55:56'!
test04RoomDimensionsCannotBeNonIntegers

	self assertDimensionIsInvalid: 1.5.! !

!methodRemoval: ExtensionTestCHANGEME #test03RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 15:55:56'!
test03RoomDimensionsCannotBeNonIntegers

	self assertDimensionIsInvalid: 1.5.!
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:57:54'!
test05CanPlaceObjectInsideRoomBounds

	self assertDimensionIsInvalid: 1.5.! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:58:26' prior: 50896300!
test05CanPlaceObjectInsideRoomBounds

	| room object |
	
	room := Room width: 1 height: 1.
	object := PortableObject initializedInstance
	
	self assert: (room isEmptyAt: 0@0)! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 15:59:08' prior: 50896306!
test05CanPlaceObjectInsideRoomBounds

	| room object |
	
	room := Room width: 1 height: 1.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	self assert: (room isEmptyAt: 0@0)! !
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:00:11' prior: 50896315!
test05CanPlaceObjectInsideRoomBounds

	| room object |
	
	room := Room width: 1 height: 1.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@0.
	
	self deny: (room isEmptyAt: 0@0).
	self assert: object equals: (room at: 0@0)! !

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:00:14'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:00:24'!
placeObject: aNoPointsPortableObject at: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'CJ 12/10/2020 16:01:27'!
Object subclass: #Room
	instanceVariableNames: 'width height contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:01:17' prior: 50896340!
placeObject: anObject at: aPosition
	
	contents at: aPosition put: anObject! !

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:01:30'!
ERROR!
!ExtensionTestCHANGEME methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:01:41' prior: 50896325!
test05CanPlaceObjectInsideRoomBounds

	| room object |
	
	room := Room width: 1 height: 1.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@0.
	
	self deny: (room isEmptyAt: 0@0).
	self assert: object equals: (room atPosition: 0@0)! !

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:01:42'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'CJ 12/10/2020 16:02:10' overrides: 16896425!
initialize

	contents := Dictionary new! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:02:11'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:02:11'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:02:11'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:02:11'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:02:11'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:02:11'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'CJ 12/10/2020 16:03:27' prior: 50895952!
isEmptyAt: aPosition
	
	(self atPosition: aPosition) isNotNil! !

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:03:35'!
ERROR!
!Room methodsFor: 'accessing' stamp: 'CJ 12/10/2020 16:03:41'!
atPosition: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'accessing' stamp: 'CJ 12/10/2020 16:04:11' prior: 50896413!
atPosition: aPosition

	^ contents at: [ aPosition ] ifAbsent: [ ^ nil ]! !

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:04:13'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:05:27'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:05:50'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:05:50'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:05:50'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:05:50'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:05:50'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:05:52'!
ERROR!
!Room methodsFor: 'accessing' stamp: 'CJ 12/10/2020 16:06:19' prior: 50896418!
atPosition: aPosition

	^ contents at: [ aPosition ] ifAbsent: [ nil ]! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:06:25'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:06:25'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:06:27'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:07:56'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:08:25'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:08:41'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:08:41'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:08:41'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:08:41'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:08:41'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:08:42'!
ERROR!
!Room methodsFor: 'testing' stamp: 'CJ 12/10/2020 16:09:33' prior: 50896405!
isEmptyAt: aPosition
	
	^ (self atPosition: aPosition) isNotNil! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:09:35'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:09:35'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:09:35'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:09:35'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:09:35'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:09:36'!
ERROR!
!Room methodsFor: 'testing' stamp: 'CJ 12/10/2020 16:11:23' prior: 50896504!
isEmptyAt: aPosition
	
	^ (self atPosition: aPosition) isNil not! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:11:31'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:11:31'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:11:54'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:11:54'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:11:54'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:11:54'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:11:54'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:12:00'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'CJ 12/10/2020 16:13:27' prior: 50896530!
isEmptyAt: aPosition
	
	^ (self atPosition: aPosition) isNil! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:13:30'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:13:30'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:13:30'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:13:30'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:13:30'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:13:30'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:13:30'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:13:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:13:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:13:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:13:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:13:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:13:34'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:13:34'!
FAILURE!
!Room methodsFor: 'accessing' stamp: 'CJ 12/10/2020 16:15:50' prior: 50896451!
atPosition: aPosition

	^ contents at: aPosition ifAbsent: [ nil ]! !

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:15:55'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests' stamp: 'CJ 12/10/2020 16:17:56'!
test06CannotPlaceObjectOutsideRoomBounds

	| room object |
	
	room := Room width: 1 height: 1.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	self
		should: [ room placeObject: object at: 1@1 ]
		raise: Error
		withMessageText: Room invalidPositionErrorMessage! !

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:17:59'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'CJ 12/10/2020 16:18:08'!
invalidPositionErrorMessage
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'CJ 12/10/2020 16:18:17' prior: 50896639!
invalidPositionErrorMessage
	
	^ 'Invalid position'! !

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:18:18'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:19:46' prior: 50896354!
placeObject: anObject at: aPosition
	
	(aPosition x > width or: [ aPosition y > height ]) ifTrue: [ self signalInvalidPosition ].
	contents at: aPosition put: anObject! !

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:19:51'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:19:51'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:19:56'!
FAILURE!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'CJ 12/10/2020 16:20:30'!
Object subclass: #Room
	instanceVariableNames: 'width height contents maxXCoordinate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'CJ 12/10/2020 16:20:31'!
Object subclass: #Room
	instanceVariableNames: 'width height contents maxXCoordinate maxYCoordinate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:20:28' prior: 50896653!
placeObject: anObject at: aPosition
	
	(aPosition x > maxXCoordinate or: [ aPosition y > maxYCoordinate ]) ifTrue: [ self signalInvalidPosition ].
	contents at: aPosition put: anObject! !
!Room methodsFor: 'initialization' stamp: 'CJ 12/10/2020 16:20:59' prior: 50895725!
initializeWidth: aWidth height: aHeight 
	
	width := aWidth.
	height := aHeight.
	maxXCoordinate := aWidth - 1.
	maxYCoordinate := aHeight - 1.! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:21:00'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:21:00'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:21:00'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:21:00'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:21:00'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:21:00'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:21:00'!
FAILURE!
!Room methodsFor: 'exceptions' stamp: 'CJ 12/10/2020 16:21:22'!
signalInvalidPosition
	self shouldBeImplemented.! !
!Room methodsFor: 'exceptions' stamp: 'CJ 12/10/2020 16:21:30' prior: 50896752!
signalInvalidPosition
	
	self error: self class invalidPositionErrorMessage! !

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:21:32'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:21:35'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:21:35'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:21:35'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:21:35'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:21:35'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:21:35'!
PASSED!

1.5@1!
!ExtensionTestCHANGEME methodsFor: 'tests' stamp: 'CJ 12/10/2020 16:23:32'!
test07CannotAccessRoomOutsideBounds

	| room |
	
	room := Room width: 1 height: 1.
	
	self
		should: [ room isEmptyAt: 1@1 ]
		raise: Error
		withMessageText: Room invalidPositionErrorMessage! !

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 16:23:33'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:23:57'!
assertValidPosition: aPosition

	^ (aPosition x > maxXCoordinate or: [ aPosition y > maxYCoordinate ]) ifTrue: [ self signalInvalidPosition ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:23:57' prior: 50896711!
placeObject: anObject at: aPosition
	
	self assertValidPosition: aPosition.
	contents at: aPosition put: anObject! !
!Room methodsFor: 'testing' stamp: 'CJ 12/10/2020 16:24:16' prior: 50896562!
isEmptyAt: aPosition
	
	self assertValidPosition: aPosition.
	^ (self atPosition: aPosition) isNil! !

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 16:24:20'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:24:20'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:24:20'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:24:20'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:24:20'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:24:20'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:24:20'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 16:24:20'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests' stamp: 'CJ 12/10/2020 16:25:09'!
test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition

	| room |
	
	room := Room width: 1 height: 1.
	
	self
		should: [ room isEmptyAt: 0.5@0 ]
		raise: Error
		withMessageText: Room invalidPositionErrorMessage! !
!ExtensionTestCHANGEME methodsFor: 'tests' stamp: 'CJ 12/10/2020 16:26:00' prior: 50896848!
test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition

	| room object |
	
	room := Room width: 1 height: 1.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	self
		should: [ room isEmptyAt: 0.5@0 ]
		raise: Error
		withMessageText: Room invalidPositionErrorMessage! !
!ExtensionTestCHANGEME methodsFor: 'tests' stamp: 'CJ 12/10/2020 16:26:26' prior: 50896858!
test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition

	| room object |
	
	room := Room width: 1 height: 1.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	self
		should: [ room isEmptyAt: 0.5@0 ]
		raise: Error
		withMessageText: Room invalidPositionErrorMessage.
		
	self
		should: [ room placeObject: object at: 0@0.5 ]
		raise: Error
		withMessageText: Room invalidPositionErrorMessage! !

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 16:26:29'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:26:29'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:26:29'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:26:29'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:26:29'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:26:29'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:26:29'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 16:26:29'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 16:26:29'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 16:26:37'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:26:37'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:26:37'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:26:37'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:26:37'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:26:37'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:26:37'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 16:26:37'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 16:26:37'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests' stamp: 'CJ 12/10/2020 16:26:58' prior: 50896870!
test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition

	| room object |
	
	room := Room width: 2 height: 2.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	self
		should: [ room isEmptyAt: 1.5@0 ]
		raise: Error
		withMessageText: Room invalidPositionErrorMessage.
		
	self
		should: [ room placeObject: object at: 0@1.5 ]
		raise: Error
		withMessageText: Room invalidPositionErrorMessage! !

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 16:26:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:26:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:26:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:26:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:26:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:26:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:26:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 16:26:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 16:26:59'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests' stamp: 'CJ 12/10/2020 16:27:36' prior: 50896952!
test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition

	| room object |
	
	room := Room width: 2 height: 2.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	self
		should: [ room isEmptyAt: 0.5@0 ]
		raise: Error
		withMessageText: Room invalidPositionErrorMessage.
		
	self
		should: [ room placeObject: object at: 0@0.5 ]
		raise: Error
		withMessageText: Room invalidPositionErrorMessage! !

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 16:27:36'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:28:19' prior: 50896799!
assertValidPosition: aPosition

	(aPosition x > maxXCoordinate or: [ aPosition y > maxYCoordinate ]) ifTrue: [ self signalInvalidPosition ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:28:32'!
assertValidCoordinate: aPosition

	(aPosition x > maxXCoordinate or: [ aPosition y > maxYCoordinate ]) ifTrue: [ self signalInvalidPosition ]! !

!methodRemoval: Room #assertValidCoordinate: stamp: 'CJ 12/10/2020 16:28:35'!
assertValidCoordinate: aPosition

	(aPosition x > maxXCoordinate or: [ aPosition y > maxYCoordinate ]) ifTrue: [ self signalInvalidPosition ]!
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:29:46' prior: 50897021!
assertValidPosition: aPosition

	(aPosition x > maxXCoordinate or: [ aPosition y > maxYCoordinate ]) ifTrue: [ self signalInvalidPosition ].
	(aPosition x isInteger and: [ aPosition y isInteger ]) ifFalse: [ self signalInvalidPosition ]! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:29:48'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:29:48'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:29:48'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:29:48'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:29:48'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:29:48'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 16:29:48'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 16:29:48'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:30:22'!
positionOutsideBounds: aPosition

	^ aPosition x > maxXCoordinate or: [ aPosition y > maxYCoordinate ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:30:22' prior: 50897043!
assertValidPosition: aPosition

	(self positionOutsideBounds: aPosition) ifTrue: [ self signalInvalidPosition ].
	(aPosition x isInteger and: [ aPosition y isInteger ]) ifFalse: [ self signalInvalidPosition ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:31:02'!
positionInsideBounds: aPosition

	^ aPosition x < width and: [ aPosition y < height ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:31:16' prior: 50897089!
assertValidPosition: aPosition

	(self positionInsideBounds: aPosition) ifFalse: [ self signalInvalidPosition ].
	(aPosition x isInteger and: [ aPosition y isInteger ]) ifFalse: [ self signalInvalidPosition ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:32:03' prior: 50897104!
assertValidPosition: aPosition

	((self positionInsideBounds: aPosition) and: (aPosition x isInteger and: [aPosition y isInteger]))
		ifFalse: [ self signalInvalidPosition ]! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:32:04'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:32:04'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:32:04'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:32:04'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:32:04'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:32:04'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 16:32:04'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 16:32:04'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests' stamp: 'CJ 12/10/2020 16:33:54'!
test09CannotPlaceObjectAtNonEmptyPosition

	| room object |
	
	room := Room width: 2 height: 2.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	self
		should: [ room isEmptyAt: 0.5@0 ]
		raise: Error
		withMessageText: Room invalidPositionErrorMessage.
		
	self
		should: [ room placeObject: object at: 0@0.5 ]
		raise: Error
		withMessageText: Room invalidPositionErrorMessage! !
!ExtensionTestCHANGEME methodsFor: 'tests' stamp: 'CJ 12/10/2020 16:35:16' prior: 50897151!
test09CannotPlaceObjectAtNonEmptyPosition

	| room object anotherObject |
	
	room := Room width: 1 height: 1.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	anotherObject := NoPointsPortableObject named: 'Pen' weighing: 1.
	
	room placeObject: object at: 0@0.
	
	self
		should: [ room placeObject: anotherObject at: 0@0 ]
		raise: Error
		withMessageText: Room positionNotEmptyErrorMessage.
	self assert: object equals: (room atPosition: 0@0)! !

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 16:35:19'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'CJ 12/10/2020 16:35:27'!
positionNotEmptyErrorMessage
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'CJ 12/10/2020 16:36:05' prior: 50897188!
positionNotEmptyErrorMessage
	
	^ 'Position not empty'! !

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 16:36:06'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 16:36:30' prior: 50896807!
placeObject: anObject at: aPosition
	
	self assertValidPosition: aPosition.
	self assertPositionIsEmpty: aPosition.
	
	contents at: aPosition put: anObject! !

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 16:36:36'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'CJ 12/10/2020 16:36:52'!
assertPositionIsEmpty: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'assertions' stamp: 'CJ 12/10/2020 16:37:34' prior: 50897213!
assertPositionIsEmpty: aPosition

	(self isEmptyAt: aPosition) ifFalse: [ self signalNotEmptyPosition ]! !

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 16:37:37'!
FAILURE!
!Room methodsFor: 'exceptions' stamp: 'CJ 12/10/2020 16:37:58'!
signalNotEmptyPosition
	self shouldBeImplemented.! !
!Room methodsFor: 'exceptions' stamp: 'CJ 12/10/2020 16:38:06' prior: 50897228!
signalNotEmptyPosition
	
	self error: self class positionNotEmptyErrorMessage ! !

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 16:38:07'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:38:07'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:38:07'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:38:07'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:38:07'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:38:07'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:38:07'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 16:38:07'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 16:38:07'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 16:38:07'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests' stamp: 'CJ 12/10/2020 16:39:09'!
assertInvalidPositionWhenRunning: aBlockToRun
	
	self
		should: aBlockToRun
		raise: Error
		withMessageText: Room invalidPositionErrorMessage! !
!ExtensionTestCHANGEME methodsFor: 'tests' stamp: 'CJ 12/10/2020 16:39:30' prior: 50896624!
test06CannotPlaceObjectOutsideRoomBounds

	| room object |
	
	room := Room width: 1 height: 1.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	self assertInvalidPositionWhenRunning: [ room placeObject: object at: 1@1 ]! !

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:39:31'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:39:31'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:39:31'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:39:31'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:39:31'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:39:31'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:39:31'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 16:39:31'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 16:39:31'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 16:39:31'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests' stamp: 'CJ 12/10/2020 16:39:49' prior: 50896787!
test07CannotAccessRoomOutsideBounds

	| room |
	
	room := Room width: 1 height: 1.
	
	self assertInvalidPositionWhenRunning: [ room isEmptyAt: 1@1 ]! !

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 16:39:50'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:39:50'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:39:50'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:39:50'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:39:50'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:39:50'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:39:50'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 16:39:50'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 16:39:50'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 16:39:50'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests' stamp: 'CJ 12/10/2020 16:40:24' prior: 50897001!
test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition

	| room object |
	
	room := Room width: 2 height: 2.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	self assertInvalidPositionWhenRunning: [ room isEmptyAt: 0.5@0 ].
	self assertInvalidPositionWhenRunning: [ room placeObject: object at: 0@0.5 ]! !

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 16:40:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 16:40:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 16:40:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 16:40:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 16:40:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 16:40:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 16:40:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 16:40:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 16:40:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 16:40:25'!
PASSED!

----SNAPSHOT----(10 December 2020 16:42:45) CuisUniversity-4384.image priorSource: 18015982!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 16:45:16'!
test10CharacterCanEnterRoomAtValidPosition

	| room object |
	
	room := Room width: 1 height: 1.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@0.
	
	self deny: (room isEmptyAt: 0@0).
	self assert: object equals: (room atPosition: 0@0)! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 16:53:43' prior: 50897426!
test10CharacterCanEnterRoomAtValidPosition

	| room playableCharacter |
	
	room := Room width: 1 height: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West.
	
	"room placeObject: object at: 0@0.
	
	self deny: (room isEmptyAt: 0@0).
	self assert: object equals: (room atPosition: 0@0)"! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 16:55:46' prior: 50897439!
test10CharacterCanEnterRoomAtValidPosition

	| room playableCharacter |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West.
	
	playableCharacter enterRoom: room at: 2@2.
	
	"room placeObject: object at: 0@0.
	
	self deny: (room isEmptyAt: 0@0).
	self assert: object equals: (room atPosition: 0@0)"! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 16:57:24' prior: 50897454!
test10CharacterCanEnterRoomAtValidPosition

	| room playableCharacter |
	
	room := Room width: 1 height: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West.
	
	playableCharacter enterRoom: room at: 0@0.
	
	self assert: playableCharacter equals: (room atPosition: 0@0)! !

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 16:57:26'!
ERROR!

Object subclass: #TestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!

!classDefinition: #TestObjectFactory category: 'ISW1-2020-2C-2doParcial-Solucion' stamp: 'CJ 12/10/2020 16:58:02'!
Object subclass: #TestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!

!classRenamed: #TestObjectFactory as: #AdventureGameTestObjectFactory stamp: 'CJ 12/10/2020 16:58:49'!
Smalltalk renameClassNamed: #TestObjectFactory as: #AdventureGameTestObjectFactory!
!AdventureGameTestObjectFactory methodsFor: 'nil' stamp: 'CJ 12/10/2020 16:59:12'!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !

!classDefinition: #ExtensionTestCHANGEME category: 'ISW1-2020-2C-2doParcial-Solucion' stamp: 'CJ 12/10/2020 16:59:42'!
TestCase subclass: #ExtensionTestCHANGEME
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!
!ExtensionTestCHANGEME methodsFor: 'nil' stamp: 'CJ 12/10/2020 16:59:40' overrides: 16927572!
setUp

	factory := AdventureGameTestObjectFactory new! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 16:59:56' prior: 50897470!
test10CharacterCanEnterRoomAtValidPosition

	| room playableCharacter |
	
	room := Room width: 1 height: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	playableCharacter enterRoom: room at: 0@0.
	
	self assert: playableCharacter equals: (room atPosition: 0@0)! !

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:00:03'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 17:00:15'!
enterRoom: aRoom at: aPoint 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 17:00:51' prior: 50897544!
enterRoom: aRoom at: aPosition 
	
	aRoom receiveCharacter: self! !

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:00:54'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 17:01:01'!
receiveCharacter: aPlayableCharacter 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 17:01:24' prior: 50897550!
enterRoom: aRoom at: aPosition 
	
	aRoom receiveCharacter: self at: aPosition ! !

!methodRemoval: Room #receiveCharacter: stamp: 'CJ 12/10/2020 17:01:41'!
receiveCharacter: aPlayableCharacter 
	self shouldBeImplemented.!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:01:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:01:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:01:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:01:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:01:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:01:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:01:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:01:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:01:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:01:43'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:01:43'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 17:01:49'!
receiveCharacter: aPlayableCharacter at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 17:02:20' prior: 50897614!
receiveCharacter: aPlayableCharacter at: aPosition

	contents at: aPosition put: aPlayableCharacter ! !

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:02:21'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:02:23'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:02:23'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:02:23'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:02:23'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:02:23'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:02:23'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:02:23'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:02:23'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:02:23'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:02:23'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:04:27' prior: 50897527!
test10CharacterCanEnterRoomAtValidPosition

	| room playableCharacter |
	
	room := Room width: 1 height: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self assert: playableCharacter equals: (room atPosition: 0@0)! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:05:01' prior: 50897667!
test10CharacterCanEnterRoomAtValidPosition

	| room playableCharacter |
	
	room := Room width: 1 height: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self assert: playableCharacter equals: (room atPosition: 0@0).
	self assert: (playableCharacter isAt: 0@0 heading: #North)! !

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:05:05'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 17:05:13'!
enterRoom: aRoom at: aPoint heading: aSymbol 
	self shouldBeImplemented.! !

!methodRemoval: PlayableCharacter #enterRoom:at:heading: stamp: 'CJ 12/10/2020 17:05:21'!
enterRoom: aRoom at: aPoint heading: aSymbol 
	self shouldBeImplemented.!
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:05:34'!
enterRoom: aRoom at: aPosition heading: aHeading
	
	aRoom receiveCharacter: self at: aPosition heading: aHeading! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'CJ 12/10/2020 17:05:36'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'CJ 12/10/2020 17:05:36'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'CJ 12/10/2020 17:05:36'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'CJ 12/10/2020 17:05:36'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'CJ 12/10/2020 17:05:36'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'CJ 12/10/2020 17:05:36'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'CJ 12/10/2020 17:05:36'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'CJ 12/10/2020 17:05:36'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'CJ 12/10/2020 17:05:36'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'CJ 12/10/2020 17:05:36'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:05:50'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:06:29' prior: 50897712!
enterRoom: aRoom at: aPosition heading: aHeading
	
	aRoom receiveCharacter: self at: aPosition! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'CJ 12/10/2020 17:06:30'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'CJ 12/10/2020 17:06:30'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'CJ 12/10/2020 17:06:30'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'CJ 12/10/2020 17:06:30'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'CJ 12/10/2020 17:06:30'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'CJ 12/10/2020 17:06:30'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'CJ 12/10/2020 17:06:30'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'CJ 12/10/2020 17:06:30'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'CJ 12/10/2020 17:06:30'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'CJ 12/10/2020 17:06:30'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:06:48'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:07:11' prior: 50897761!
enterRoom: aRoom at: aPosition heading: aHeading
	
	aRoom receiveCharacter: self at: aPosition.
	position := aPosition.
	heading := aHeading ! !

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:07:14'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:07:14'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:07:14'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:07:14'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:07:14'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:07:14'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:07:14'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:07:14'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:07:14'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:07:14'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:07:14'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:07:14'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:08:36' prior: 50897809!
enterRoom: aRoom at: aPosition heading: aHeading
	
	aRoom receiveCharacter: self at: aPosition.
	position := aPosition.
	heading := (self class headingFor: aHeading)! !
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:08:45' prior: 50897860!
enterRoom: aRoom at: aPosition heading: aCardinalPoint
	
	aRoom receiveCharacter: self at: aPosition.
	position := aPosition.
	heading := (self class headingFor: aCardinalPoint)! !

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:08:49'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'CJ 12/10/2020 17:08:54'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'CJ 12/10/2020 17:08:54'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'CJ 12/10/2020 17:08:54'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'CJ 12/10/2020 17:08:54'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'CJ 12/10/2020 17:08:54'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'CJ 12/10/2020 17:08:54'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'CJ 12/10/2020 17:08:54'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'CJ 12/10/2020 17:08:54'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'CJ 12/10/2020 17:08:54'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'CJ 12/10/2020 17:08:54'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:08:57'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:08:57'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:08:57'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:08:57'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:08:57'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:08:57'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:08:57'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:08:57'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:08:57'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:08:57'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:09:01'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:09:53'!
test11CharacterCannotEnterRoomAtInvalidPositions

	| room playableCharacter |
	
	room := Room width: 1 height: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self assert: playableCharacter equals: (room atPosition: 0@0).
	self assert: (playableCharacter isAt: 0@0 heading: #North)! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:10:38' prior: 50897960!
test11CharacterCannotEnterRoomAtInvalidPositions

	| room playableCharacter |
	
	room := Room width: 1 height: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: 1@1 heading: #West ].! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:11:25' prior: 50897977!
test11CharacterCannotEnterRoomAtInvalidPositions

	| room playableCharacter |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: 3@3 heading: #North ].
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: 1.5@0 heading: #North ].! !
!ExtensionTestCHANGEME methodsFor: 'tests - accessing and placing' stamp: 'CJ 12/10/2020 17:11:54' prior: 50897282!
test06CannotPlaceObjectOutsideRoomBounds

	| room object |
	
	room := Room width: 1 height: 1.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	self assertInvalidPositionWhenRunning: [ room placeObject: object at: 1@0 ].
	self assertInvalidPositionWhenRunning: [ room placeObject: object at: 0@-1 ]! !

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:11:56'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 17:12:41' prior: 50897098!
positionInsideBounds: aPosition

	^ aPosition between: 0@0 and: width@height! !

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:12:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:12:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:12:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:12:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:12:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:12:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:12:51'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:12:51'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:12:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:12:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:12:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidPositions stamp: 'CJ 12/10/2020 17:12:51'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:12:52'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 17:13:17' prior: 50898026!
positionInsideBounds: aPosition

	^ aPosition between: 0@0 and: maxXCoordinate@maxYCoordinate ! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:13:24'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:13:24'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:13:24'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:13:24'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:13:24'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:13:24'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:13:24'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:13:24'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:13:24'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:13:24'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidPositions stamp: 'CJ 12/10/2020 17:13:24'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidPositions stamp: 'CJ 12/10/2020 17:13:24'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 17:13:52' prior: 50897620!
receiveCharacter: aPlayableCharacter at: aPosition

	self assertValidPosition: aPosition.
	contents at: aPosition put: aPlayableCharacter ! !
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 17:13:54' prior: 50898129!
receiveCharacter: aPlayableCharacter at: aPosition

	self assertValidPosition: aPosition.
	
	contents at: aPosition put: aPlayableCharacter ! !

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidPositions stamp: 'CJ 12/10/2020 17:13:57'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:13:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:13:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:13:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:13:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:13:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:13:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:13:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:13:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:13:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:13:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:13:59'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidPositions stamp: 'CJ 12/10/2020 17:13:59'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests - accessing and placing' stamp: 'CJ 12/10/2020 17:14:12' prior: 50898009!
test06CannotPlaceObjectOutsideRoomBounds

	| room object |
	
	room := Room width: 1 height: 1.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	self assertInvalidPositionWhenRunning: [ room placeObject: object at: 1@0 ].
	self assertInvalidPositionWhenRunning: [ room placeObject: object at: 0@-1 ].! !
!ExtensionTestCHANGEME methodsFor: 'tests - accessing and placing' stamp: 'CJ 12/10/2020 17:14:13' prior: 50898193!
test06CannotPlaceObjectOutsideRoomBounds

	| room object |
	
	room := Room width: 1 height: 1.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	self assertInvalidPositionWhenRunning: [ room placeObject: object at: 1@0 ].
	self assertInvalidPositionWhenRunning: [ room placeObject: object at: 0@-1 ]! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:14:31' prior: 50897991!
test11CharacterCannotEnterRoomAtInvalidPositions

	| room playableCharacter |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: 3@3 heading: #North ].
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: 1.5@0 heading: #North ].
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: -1@0 heading: #North ].! !

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidPositions stamp: 'CJ 12/10/2020 17:14:32'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:14:32'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:14:32'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:14:32'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:14:32'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:14:32'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:14:32'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:14:32'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:14:32'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:14:32'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:14:32'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidPositions stamp: 'CJ 12/10/2020 17:14:32'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:14:51' prior: 50898221!
test11CharacterCannotEnterRoomAtInvalidPositions

	| room playableCharacter |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: 3@3 heading: #North ].
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: 1.5@0 heading: #North ].
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: -1@0 heading: #North ].
	self assert: (playableCharacter isAt: 2@2 heading: #West)! !

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidPositions stamp: 'CJ 12/10/2020 17:14:52'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:14:52'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:14:52'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:14:52'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:14:52'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:14:52'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:14:52'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:14:52'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:14:52'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:14:52'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:14:52'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidPositions stamp: 'CJ 12/10/2020 17:14:52'!
PASSED!
!Room methodsFor: 'testing' stamp: 'CJ 12/10/2020 17:15:28' prior: 50896814!
isEmptyAt: aPosition
	
	self assertValidPosition: aPosition.
	
	^ (self atPosition: aPosition) isNil! !

!methodRemoval: Room #positionOutsideBounds: stamp: 'CJ 12/10/2020 17:15:37'!
positionOutsideBounds: aPosition

	^ aPosition x > maxXCoordinate or: [ aPosition y > maxYCoordinate ]!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:16:31'!
test12CharacterCannotEnterRoomAtNonEmptyPosition

	| room playableCharacter |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: 3@3 heading: #North ].
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: 1.5@0 heading: #North ].
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: -1@0 heading: #North ].
	self assert: (playableCharacter isAt: 2@2 heading: #West)! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:17:52' prior: 50898365!
test12CharacterCannotEnterRoomAtNonEmptyPosition

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@0.
	
	self
		should: [ playableCharacter enterRoom: room at: 0@0 heading: #North ]
		raise: Error
		withMessageText: Room positionNotEmptyErrorMessage.
	self assert: object equals: (room atPosition: 0@0)! !

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotEnterRoomAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:17:56'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:18:06' prior: 50897869!
enterRoom: aRoom at: aPosition heading: aCardinalPoint
	
	aRoom receiveCharacter: self at: aPosition.
	
	position := aPosition.
	heading := (self class headingFor: aCardinalPoint)! !
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 17:18:20' prior: 50898137!
receiveCharacter: aPlayableCharacter at: aPosition

	self assertValidPosition: aPosition.
	self assertPositionIsEmpty: aPosition.
	
	contents at: aPosition put: aPlayableCharacter ! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:18:42'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:18:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:18:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:18:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:18:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:18:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:18:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:18:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:18:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:18:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidPositions stamp: 'CJ 12/10/2020 17:18:43'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotEnterRoomAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:18:43'!
PASSED!
!Room methodsFor: 'assertions' stamp: 'CJ 12/10/2020 17:19:32'!
assertPositionCanBeOccupied: aPosition

	self assertValidPosition: aPosition.
	self assertPositionIsEmpty: aPosition! !
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 17:19:49' prior: 50897202!
placeObject: anObject at: aPosition
	
	self assertPositionCanBeOccupied: aPosition.
	
	contents at: aPosition put: anObject! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidPositions stamp: 'CJ 12/10/2020 17:19:51'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotEnterRoomAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:19:51'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 17:20:04' prior: 50898421!
receiveCharacter: aPlayableCharacter at: aPosition

	self assertPositionCanBeOccupied: aPosition.
	
	contents at: aPosition put: aPlayableCharacter ! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:20:05'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:20:05'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:20:05'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:20:05'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:20:05'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:20:05'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:20:05'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:20:05'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:20:05'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:20:05'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidPositions stamp: 'CJ 12/10/2020 17:20:05'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotEnterRoomAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:20:05'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:20:46'!
test13CharacterCanMoveToValidPosition

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@0.
	
	self
		should: [ playableCharacter enterRoom: room at: 0@0 heading: #North ]
		raise: Error
		withMessageText: Room positionNotEmptyErrorMessage.
	self assert: object equals: (room atPosition: 0@0)! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:21:47'!
test13CharacterCannotMoveToInvalidOrNonEmptyPosition

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@0.
	
	self
		should: [ playableCharacter enterRoom: room at: 0@0 heading: #North ]
		raise: Error
		withMessageText: Room positionNotEmptyErrorMessage.
	self assert: object equals: (room atPosition: 0@0)! !

!methodRemoval: ExtensionTestCHANGEME #test13CharacterCanMoveToValidPosition stamp: 'CJ 12/10/2020 17:21:47'!
test13CharacterCanMoveToValidPosition

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@0.
	
	self
		should: [ playableCharacter enterRoom: room at: 0@0 heading: #North ]
		raise: Error
		withMessageText: Room positionNotEmptyErrorMessage.
	self assert: object equals: (room atPosition: 0@0)!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:22:44' prior: 50898603!
test13CharacterCannotMoveToInvalidOrNonEmptyPosition

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 1@0.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self
		should: [ playableCharacter enterRoom: room at: 0@0 heading: #North ]
		raise: Error
		withMessageText: Room positionNotEmptyErrorMessage.
	self assert: object equals: (room atPosition: 0@0)! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:23:21' prior: 50898644!
test13CharacterCannotMoveToInvalidOrNonEmptyPosition

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: Room positionNotEmptyErrorMessage! !

!testRun: #ExtensionTestCHANGEME #test13CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:23:26'!
FAILURE!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:23:34' prior: 50898667!
test13CharacterCannotMoveToInvalidOrNonEmptyPosition

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: Room positionNotEmptyErrorMessage! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:23:43' prior: 50898388!
test12CharacterCannotEnterRoomAtNonEmptyPosition

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@0.
	
	self
		should: [ playableCharacter enterRoom: room at: 0@0 heading: #North ]
		raise: Error
		withMessageText: Room positionNotEmptyErrorMessage.
	self assert: object equals: (room atPosition: 0@0)! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:24:32' prior: 50898691!
test13CharacterCannotMoveToInvalidOrNonEmptyPosition

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self assertInvalidPositionWhenRunning: [ playableCharacter moveBackward ].
	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: Room positionNotEmptyErrorMessage! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:27:43' prior: 50898286!
test11CharacterCannotEnterRoomAtInvalidPositions

	| room playableCharacter |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: 3@3 heading: #North ].
	self assert: (playableCharacter isAt: 2@2 heading: #West)! !

!methodRemoval: ExtensionTestCHANGEME #test12CharacterCannotEnterRoomAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:28:30'!
test12CharacterCannotEnterRoomAtNonEmptyPosition

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@0.
	
	self
		should: [ playableCharacter enterRoom: room at: 0@0 heading: #North ]
		raise: Error
		withMessageText: Room positionNotEmptyErrorMessage.
	self assert: object equals: (room atPosition: 0@0)!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:28:36'!
test12CharacterCannotMoveToInvalidOrNonEmptyPosition

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self assertInvalidPositionWhenRunning: [ playableCharacter moveBackward ].
	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: Room positionNotEmptyErrorMessage! !

!methodRemoval: ExtensionTestCHANGEME #test13CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:28:36'!
test13CharacterCannotMoveToInvalidOrNonEmptyPosition

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self assertInvalidPositionWhenRunning: [ playableCharacter moveBackward ].
	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: Room positionNotEmptyErrorMessage!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:28:38'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:29:56' prior: 50898412!
enterRoom: aRoom at: aPosition heading: aCardinalPoint
	
	aRoom receiveCharacter: self at: aPosition.
	
	position := aPosition.
	heading := (self class headingFor: aCardinalPoint).
	
	self nowInRoom: aRoom.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:31:23' prior: 50898839!
enterRoom: aRoom at: aPosition heading: aCardinalPoint

	| newHeading |
	
	" If the cardinal point is invalid, we want this to fail BEFORE putting the character in the room!!"
	newHeading := (self class headingFor: aCardinalPoint).
	
	aRoom receiveCharacter: self at: aPosition.
	
	position := aPosition.
	heading := newHeading.
	
	self nowInRoom: aRoom! !

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial-Solucion' stamp: 'CJ 12/10/2020 17:31:54'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:31:52' prior: 50898849!
enterRoom: aRoom at: aPosition heading: aCardinalPoint

	| newHeading |
	
	" If the cardinal point is invalid, we want this to fail BEFORE putting the character in the room!!"
	newHeading := (self class headingFor: aCardinalPoint).
	
	aRoom receiveCharacter: self at: aPosition.
	
	position := aPosition.
	heading := newHeading.
	room := aRoom! !
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:32:12' prior: 50898873!
enterRoom: aRoom at: aPosition heading: aCardinalPoint

	| newHeading |
	
	"If the cardinal point is invalid, we want this to fail BEFORE putting the character in the room!!"
	newHeading := (self class headingFor: aCardinalPoint).
	
	aRoom receiveCharacter: self at: aPosition.
	
	position := aPosition.
	heading := newHeading.
	room := aRoom! !
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:32:23' prior: 50898887!
enterRoom: aRoom at: aPosition heading: aCardinalPoint

	| newHeading |
	
	"If the cardinal point is invalid, we want this to raise BEFORE putting the character in the room!!"
	newHeading := (self class headingFor: aCardinalPoint).
	
	aRoom receiveCharacter: self at: aPosition.
	
	position := aPosition.
	heading := newHeading.
	room := aRoom! !
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:32:29' prior: 50898901!
enterRoom: aRoom at: aPosition heading: aCardinalPoint

	| newHeading |
	
	"If the cardinal point is invalid, we want this to raise an error BEFORE putting the character in the room!!"
	newHeading := (self class headingFor: aCardinalPoint).
	
	aRoom receiveCharacter: self at: aPosition.
	
	position := aPosition.
	heading := newHeading.
	room := aRoom! !
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:32:34' prior: 50898915!
enterRoom: aRoom at: aPosition heading: aCardinalPoint

	| newHeading |
	
	"If the cardinal point is invalid, we want this to raise an error
	BEFORE putting the character in the room!!"
	newHeading := (self class headingFor: aCardinalPoint).
	
	aRoom receiveCharacter: self at: aPosition.
	
	position := aPosition.
	heading := newHeading.
	room := aRoom! !

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:32:44'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:34:00' prior: 50895330!
moveForward
	
	| newPosition |
	
	newPosition := position + heading forwardPoint.
	room isNil ifFalse: [ room assertPositionCanBeOccupied: newPosition ].
	position := newPosition! !

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:34:03'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:34:03'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:34:03'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:34:03'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:34:03'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:34:03'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:34:03'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:34:03'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:34:03'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:34:03'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:34:04'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidPositions stamp: 'CJ 12/10/2020 17:34:04'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:34:04'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:34:04'!
FAILURE!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:34:20'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:35:11' prior: 50895325!
moveBackward
	
	| newPosition |
	
	newPosition := position - heading forwardPoint.
	room isNil ifFalse: [ room assertPositionCanBeOccupied: newPosition ].
	position := newPosition ! !

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:35:14'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:35:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:35:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:35:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:35:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:35:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:35:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:35:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:35:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:35:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:35:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:35:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidPositions stamp: 'CJ 12/10/2020 17:35:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:35:17'!
PASSED!

Object subclass: #NullRoom
	instanceVariableNames: 'width height contents maxXCoordinate maxYCoordinate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!

!classDefinition: #NullRoom category: 'ISW1-2020-2C-2doParcial-Solucion' stamp: 'CJ 12/10/2020 17:36:01'!
Object subclass: #NullRoom
	instanceVariableNames: 'width height contents maxXCoordinate maxYCoordinate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!

Object subclass: #NullRoom
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!

!classDefinition: #NullRoom category: 'ISW1-2020-2C-2doParcial-Solucion' stamp: 'CJ 12/10/2020 17:36:05'!
Object subclass: #NullRoom
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!

Object subclass: #AbstractRoom
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!

!classDefinition: #AbstractRoom category: 'ISW1-2020-2C-2doParcial-Solucion' stamp: 'CJ 12/10/2020 17:36:35'!
Object subclass: #AbstractRoom
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!

AbstractRoom subclass: #Room
	instanceVariableNames: 'width height contents maxXCoordinate maxYCoordinate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial-Solucion' stamp: 'CJ 12/10/2020 17:36:48'!
AbstractRoom subclass: #Room
	instanceVariableNames: 'width height contents maxXCoordinate maxYCoordinate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!

AbstractRoom subclass: #NullRoom
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!

!classDefinition: #NullRoom category: 'ISW1-2020-2C-2doParcial-Solucion' stamp: 'CJ 12/10/2020 17:36:52'!
AbstractRoom subclass: #NullRoom
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'CJ 12/10/2020 17:37:29' prior: 50895306!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room := NullRoom new! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'CJ 12/10/2020 17:37:31'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'CJ 12/10/2020 17:37:31'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'CJ 12/10/2020 17:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'CJ 12/10/2020 17:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'CJ 12/10/2020 17:37:31'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'CJ 12/10/2020 17:37:31'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'CJ 12/10/2020 17:37:31'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'CJ 12/10/2020 17:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'CJ 12/10/2020 17:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'CJ 12/10/2020 17:37:31'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'CJ 12/10/2020 17:37:33'!
ERROR!
!NullRoom methodsFor: 'assertions' stamp: 'CJ 12/10/2020 17:38:05'!
assertPositionCanBeOccupied: aPoint 
	self shouldBeImplemented.! !
!NullRoom methodsFor: 'assertions' stamp: 'CJ 12/10/2020 17:38:11' prior: 50899194!
assertPositionCanBeOccupied: aPosition! !
!NullRoom methodsFor: 'assertions' stamp: 'CJ 12/10/2020 17:38:22' prior: 50899199!
assertPositionCanBeOccupied: aPosition
	
	"Do nothing"! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'CJ 12/10/2020 17:38:23'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'CJ 12/10/2020 17:38:25'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'CJ 12/10/2020 17:38:25'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'CJ 12/10/2020 17:38:26'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'CJ 12/10/2020 17:38:27'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:38:48' prior: 50899012!
moveBackward
	
	| newPosition |
	
	newPosition := position - heading forwardPoint.
	room assertPositionCanBeOccupied: newPosition.
	position := newPosition ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:39:08' prior: 50898947!
moveForward
	
	| newPosition |
	
	newPosition := position + heading forwardPoint.
	room assertPositionCanBeOccupied: newPosition.
	position := newPosition! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'CJ 12/10/2020 17:39:14'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'CJ 12/10/2020 17:39:14'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'CJ 12/10/2020 17:39:14'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'CJ 12/10/2020 17:39:14'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'CJ 12/10/2020 17:39:14'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'CJ 12/10/2020 17:39:14'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'CJ 12/10/2020 17:39:14'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'CJ 12/10/2020 17:39:14'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'CJ 12/10/2020 17:39:14'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'CJ 12/10/2020 17:39:14'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:41:07'!
xxx: aBlockToRun
	
	| newPosition |
	
	newPosition := aBlockToRun value.
	room assertPositionCanBeOccupied: newPosition.
	position := newPosition ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:41:22' prior: 50899281!
xxx: blockToSetNewPosition
	
	| newPosition |
	
	newPosition := blockToSetNewPosition value.
	room assertPositionCanBeOccupied: newPosition.
	position := newPosition ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:42:00'!
moveToPositionIfPossible: blockToSetNewPosition
	
	| newPosition |
	
	newPosition := blockToSetNewPosition value.
	room assertPositionCanBeOccupied: newPosition.
	position := newPosition ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:42:30'!
setPositionIfValidAndFree: blockToSetNewPosition
	
	| newPosition |
	
	newPosition := blockToSetNewPosition value.
	room assertPositionCanBeOccupied: newPosition.
	position := newPosition ! !

!methodRemoval: PlayableCharacter #moveToPositionIfPossible: stamp: 'CJ 12/10/2020 17:42:30'!
moveToPositionIfPossible: blockToSetNewPosition
	
	| newPosition |
	
	newPosition := blockToSetNewPosition value.
	room assertPositionCanBeOccupied: newPosition.
	position := newPosition !
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:42:50' prior: 50899227!
moveBackward
	
	self setPositionIfValidAndFree: position - heading forwardPoint! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'CJ 12/10/2020 17:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'CJ 12/10/2020 17:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'CJ 12/10/2020 17:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'CJ 12/10/2020 17:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'CJ 12/10/2020 17:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'CJ 12/10/2020 17:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'CJ 12/10/2020 17:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'CJ 12/10/2020 17:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'CJ 12/10/2020 17:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'CJ 12/10/2020 17:42:52'!
PASSED!

!methodRemoval: PlayableCharacter #xxx: stamp: 'CJ 12/10/2020 17:42:55'!
xxx: blockToSetNewPosition
	
	| newPosition |
	
	newPosition := blockToSetNewPosition value.
	room assertPositionCanBeOccupied: newPosition.
	position := newPosition !
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:43:17' prior: 50899235!
moveForward
	
	self setPositionIfValidAndFree: position + heading forwardPoint! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'CJ 12/10/2020 17:43:18'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'CJ 12/10/2020 17:43:18'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'CJ 12/10/2020 17:43:18'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'CJ 12/10/2020 17:43:18'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'CJ 12/10/2020 17:43:18'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'CJ 12/10/2020 17:43:18'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'CJ 12/10/2020 17:43:18'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'CJ 12/10/2020 17:43:18'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'CJ 12/10/2020 17:43:18'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'CJ 12/10/2020 17:43:18'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:43:35'!
test11CharacterCannotEnterRoomAtInvalidPosition

	| room playableCharacter |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: 3@3 heading: #North ].
	self assert: (playableCharacter isAt: 2@2 heading: #West)! !

!methodRemoval: ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidPositions stamp: 'CJ 12/10/2020 17:43:35'!
test11CharacterCannotEnterRoomAtInvalidPositions

	| room playableCharacter |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: 3@3 heading: #North ].
	self assert: (playableCharacter isAt: 2@2 heading: #West)!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:43:51'!
test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition

	| room playableCharacter |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: 3@3 heading: #North ].
	self assert: (playableCharacter isAt: 2@2 heading: #West)! !

!methodRemoval: ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidPosition stamp: 'CJ 12/10/2020 17:43:51'!
test11CharacterCannotEnterRoomAtInvalidPosition

	| room playableCharacter |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	
	self assertInvalidPositionWhenRunning: [ playableCharacter enterRoom: room at: 3@3 heading: #North ].
	self assert: (playableCharacter isAt: 2@2 heading: #West)!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:43:54'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:44:45'!
test13CharacterCannotTakeFromEmptyPosition

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self assertInvalidPositionWhenRunning: [ playableCharacter moveBackward ].
	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: Room positionNotEmptyErrorMessage! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:45:33' prior: 50899488!
test13CharacterCannotTakeFromEmptyPosition

	| room playableCharacter |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.

	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: Room cannotTakeFromEmptyPositionErrorMessage! !

!testRun: #ExtensionTestCHANGEME #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 17:45:39'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'CJ 12/10/2020 17:46:07'!
cannotTakeFromEmptyPositionErrorMessage
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'CJ 12/10/2020 17:46:18' prior: 50899529!
cannotTakeFromEmptyPositionErrorMessage
	
	^ 'Cannot take an object from an empty position'! !

!testRun: #ExtensionTestCHANGEME #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 17:46:19'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'CJ 12/10/2020 17:46:48'!
take
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'CJ 12/10/2020 17:47:18' prior: 50899544!
take
	
	room signalCannotTakeFromEmptyPosition! !

!testRun: #ExtensionTestCHANGEME #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 17:47:20'!
FAILURE!
!Room methodsFor: 'exceptions' stamp: 'CJ 12/10/2020 17:47:37'!
signalCannotTakeFromEmptyPosition
	self shouldBeImplemented.! !
!Room methodsFor: 'exceptions' stamp: 'CJ 12/10/2020 17:47:44' prior: 50899557!
signalCannotTakeFromEmptyPosition
	
	self error: self class cannotTakeFromEmptyPositionErrorMessage ! !

!testRun: #ExtensionTestCHANGEME #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 17:47:45'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:47:45'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:47:45'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:47:45'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:47:45'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:47:45'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:47:45'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:47:45'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:47:45'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:47:45'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:47:45'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:47:45'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:47:45'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 17:47:45'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:48:19'!
test14CharacterCanTakePortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self assertInvalidPositionWhenRunning: [ playableCharacter moveBackward ].
	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: Room positionNotEmptyErrorMessage! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:48:34' prior: 50899621!
test14CharacterCanTakePortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assertInvalidPositionWhenRunning: [ playableCharacter moveBackward ].
	self
		should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: Room positionNotEmptyErrorMessage! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:49:09' prior: 50899643!
test14CharacterCanTakePortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: object).! !

!testRun: #ExtensionTestCHANGEME #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 17:49:12'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'CJ 12/10/2020 17:50:33'!
positionInFront
	
	^ position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'CJ 12/10/2020 17:51:12' prior: 50899549!
take
	
	(room isEmptyAt: self positionInFront) ifTrue: [ room signalCannotTakeFromEmptyPosition ].! !

!testRun: #ExtensionTestCHANGEME #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 17:51:17'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'CJ 12/10/2020 17:53:12' prior: 50899692!
take
	
	| object |
	
	object := room xxx: self positionInFront.
	self take: object! !

!testRun: #ExtensionTestCHANGEME #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 17:53:20'!
ERROR!
!Room methodsFor: 'character interactions' stamp: 'CJ 12/10/2020 17:53:34'!
xxx: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'character interactions' stamp: 'CJ 12/10/2020 17:54:02' prior: 50899711!
xxx: positionToTakeObjectFrom

	self assertValidPosition: positionToTakeObjectFrom.! !
!Room methodsFor: 'character interactions' stamp: 'CJ 12/10/2020 17:56:32' prior: 50899716!
xxx: positionToTakeObjectFrom

	| object |
	
	self assertValidPosition: positionToTakeObjectFrom.
	(self isEmptyAt: positionToTakeObjectFrom) ifTrue: [ self signalCannotTakeFromEmptyPosition ].
	
	object := 	self atPosition: positionToTakeObjectFrom.
	contents removeKey: positionToTakeObjectFrom.
	^ object! !

!testRun: #ExtensionTestCHANGEME #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 17:56:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:56:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:56:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:56:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:56:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:56:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:56:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:56:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:56:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:56:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:56:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:56:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:56:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 17:56:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 17:56:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:56:39'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:56:39'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:56:39'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:56:39'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:56:39'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:56:39'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:56:39'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:56:39'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:56:39'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:56:39'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:56:39'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:56:39'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 17:56:39'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 17:56:39'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 17:56:49' prior: 50899666!
test14CharacterCanTakePortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: object)! !
!Room methodsFor: 'character interactions' stamp: 'CJ 12/10/2020 17:57:59'!
objectAt: positionToTakeObjectFrom

	| object |
	
	self assertValidPosition: positionToTakeObjectFrom.
	(self isEmptyAt: positionToTakeObjectFrom) ifTrue: [ self signalCannotTakeFromEmptyPosition ].
	
	object := 	self atPosition: positionToTakeObjectFrom.
	contents removeKey: positionToTakeObjectFrom.
	^ object! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 17:57:59' prior: 50899702!
take
	
	| object |
	
	object := room objectAt: self positionInFront.
	self take: object! !

!methodRemoval: Room #xxx: stamp: 'CJ 12/10/2020 17:57:59'!
xxx: positionToTakeObjectFrom

	| object |
	
	self assertValidPosition: positionToTakeObjectFrom.
	(self isEmptyAt: positionToTakeObjectFrom) ifTrue: [ self signalCannotTakeFromEmptyPosition ].
	
	object := 	self atPosition: positionToTakeObjectFrom.
	contents removeKey: positionToTakeObjectFrom.
	^ object!
!Room methodsFor: 'objects' stamp: 'CJ 12/10/2020 17:58:35'!
assertCanTakeFrom: positionToTakeObjectFrom

	^ (self isEmptyAt: positionToTakeObjectFrom) ifTrue: [ self signalCannotTakeFromEmptyPosition ]! !
!Room methodsFor: 'objects' stamp: 'CJ 12/10/2020 17:58:35' prior: 50899859!
objectAt: positionToTakeObjectFrom

	| object |
	
	self assertValidPosition: positionToTakeObjectFrom.
	self assertCanTakeFrom: positionToTakeObjectFrom.
	
	object := 	self atPosition: positionToTakeObjectFrom.
	contents removeKey: positionToTakeObjectFrom.
	^ object! !
!Room methodsFor: 'assertions' stamp: 'CJ 12/10/2020 17:58:58' prior: 50899890!
assertCanTakeFrom: positionToTakeObjectFrom

	(self isEmptyAt: positionToTakeObjectFrom) ifTrue: [ self signalCannotTakeFromEmptyPosition ]! !
!Room methodsFor: 'assertions' stamp: 'CJ 12/10/2020 17:59:15'!
assertPortableObjectAt: positionToTakeObjectFrom

	(self isEmptyAt: positionToTakeObjectFrom) ifTrue: [ self signalCannotTakeFromEmptyPosition ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 17:59:15' prior: 50899897!
objectAt: positionToTakeObjectFrom

	| object |
	
	self assertValidPosition: positionToTakeObjectFrom.
	self assertPortableObjectAt: positionToTakeObjectFrom.
	
	object := 	self atPosition: positionToTakeObjectFrom.
	contents removeKey: positionToTakeObjectFrom.
	^ object! !

!methodRemoval: Room #assertCanTakeFrom: stamp: 'CJ 12/10/2020 17:59:15'!
assertCanTakeFrom: positionToTakeObjectFrom

	(self isEmptyAt: positionToTakeObjectFrom) ifTrue: [ self signalCannotTakeFromEmptyPosition ]!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:59:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:59:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:59:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:59:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:59:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:59:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:59:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:59:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:59:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:59:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:59:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:59:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 17:59:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 17:59:17'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 17:59:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 17:59:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 17:59:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 17:59:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 17:59:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 17:59:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 17:59:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 17:59:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 17:59:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 17:59:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:59:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 17:59:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 17:59:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 17:59:25'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 18:01:19'!
test15CharacterCannotTakeNonPortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: object)! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial-Solucion' stamp: 'CJ 12/10/2020 18:02:30'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 18:02:20' prior: 50900045!
test15CharacterCannotTakeNonPortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NonPortableObject named: 'Wardrobe' weighing: 100.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: object)! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 18:03:19' prior: 50900073!
test15CharacterCannotTakeNonPortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NonPortableObject named: 'Wardrobe' weighing: 100.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: Room cannotTakeNonPortableObjectErrorMessage.
	self deny: (playableCharacter backpackIncludes: object).! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 18:03:22' prior: 50900092!
test15CharacterCannotTakeNonPortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NonPortableObject named: 'Wardrobe' weighing: 100.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: Room cannotTakeNonPortableObjectErrorMessage.
	self deny: (playableCharacter backpackIncludes: object)! !

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:03:24'!
ERROR!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 18:05:23' prior: 50900115!
test15CharacterCannotTakeNonPortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NonPortableObject named: 'Wardrobe' weighing: 100.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: NonPortableObject cannotTakeNonPortableObjectErrorMessage.
	self deny: (playableCharacter backpackIncludes: object)! !

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:05:43'!
ERROR!
!PortableObject class methodsFor: 'instance creation' stamp: 'CJ 12/10/2020 18:06:19'!
named: aName weighing: aWeight
	
	^ self new initializeNamed: aName weighing: aWeight. ! !

!methodRemoval: NoPointsPortableObject class #named:weighing: stamp: 'CJ 12/10/2020 18:06:19'!
named: aName weighing: aWeight
	
	^ self new initializeNamed: aName weighing: aWeight. !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 18:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 18:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 18:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 18:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 18:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 18:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 18:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 18:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 18:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 18:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 18:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 18:06:25'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:06:25'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:06:25'!
ERROR!
!NoPointsPortableObject class methodsFor: 'instance creation' stamp: 'CJ 12/10/2020 18:06:55' overrides: 50900167!
named: aName weighing: aWeight
	
	^ self new initializeNamed: aName weighing: aWeight. ! !
!PointsPortableObject class methodsFor: 'instance creation' stamp: 'CJ 12/10/2020 18:06:55' overrides: 50900167!
named: aName weighing: aWeight
	
	^ self new initializeNamed: aName weighing: aWeight. ! !

!methodRemoval: PortableObject class #named:weighing: stamp: 'CJ 12/10/2020 18:06:55'!
named: aName weighing: aWeight
	
	^ self new initializeNamed: aName weighing: aWeight. !

!methodRemoval: PointsPortableObject class #named:weighing: stamp: 'CJ 12/10/2020 18:07:06'!
named: aName weighing: aWeight
	
	^ self new initializeNamed: aName weighing: aWeight. !
!NonPortableObject class methodsFor: 'no messages' stamp: 'CJ 12/10/2020 18:07:25'!
named: aName weighing: aWeight
	
	^ self new initializeNamed: aName weighing: aWeight. ! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 18:07:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 18:07:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 18:07:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 18:07:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 18:07:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 18:07:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 18:07:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 18:07:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 18:07:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 18:07:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:07:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:07:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 18:07:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 18:07:34'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:07:34'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:07:34'!
ERROR!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial-Solucion' stamp: 'CJ 12/10/2020 18:08:30'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial-Solucion' stamp: 'CJ 12/10/2020 18:08:31'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!
!NonPortableObject methodsFor: 'nil' stamp: 'CJ 12/10/2020 18:08:27'!
initializeNamed: aName weighing: aWeight
	
	name := aName.
	weight := aWeight.! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 18:08:33'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 18:08:33'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 18:08:33'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 18:08:33'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 18:08:33'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 18:08:33'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 18:08:33'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 18:08:33'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 18:08:33'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 18:08:33'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:08:33'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:08:33'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 18:08:33'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 18:08:33'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:08:33'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:08:33'!
ERROR!
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 18:09:13'!
assertCanAddTo: aBackpack 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 18:09:30' prior: 50900409!
assertCanAddTo: aBackpack 
	
	^ aBackpack assertCanAddNonPortableObject: self! !

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:09:53'!
ERROR!
!Backpack methodsFor: 'adding - private' stamp: 'CJ 12/10/2020 18:09:59'!
assertCanAddNonPortableObject: aNonPortableObject 
	self shouldBeImplemented.! !
!Backpack methodsFor: 'adding - private' stamp: 'CJ 12/10/2020 18:10:36' prior: 50900423!
assertCanAddNonPortableObject: aNonPortableObject 
	
	self signalCannotTakeNonPortableObject! !

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:10:39'!
ERROR!
!Backpack methodsFor: 'exceptions' stamp: 'CJ 12/10/2020 18:10:54'!
signalCannotTakeNonPortableObject
	self shouldBeImplemented.! !
!Backpack methodsFor: 'exceptions' stamp: 'CJ 12/10/2020 18:11:13' prior: 50900438!
signalCannotTakeNonPortableObject
	
	self error: self class cannotTakeNonPortableObjectErrorMessage! !

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:11:14'!
ERROR!
!Backpack class methodsFor: 'error messages' stamp: 'CJ 12/10/2020 18:11:22'!
cannotTakeNonPortableObjectErrorMessage
	self shouldBeImplemented.! !
!Backpack class methodsFor: 'error messages' stamp: 'CJ 12/10/2020 18:11:32' prior: 50900453!
cannotTakeNonPortableObjectErrorMessage
	
	^ 'Cannot take a non-portable object'! !

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:11:35'!
ERROR!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 18:11:54' prior: 50900141!
test15CharacterCannotTakeNonPortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NonPortableObject named: 'Wardrobe' weighing: 100.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: NonPortableObject cannotTakeNonPortableObjectErrorMessage.
	self deny: (playableCharacter backpackIncludes: object)! !

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:11:55'!
ERROR!
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 18:12:24' prior: 50900469!
test15CharacterCannotTakeNonPortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NonPortableObject named: 'Wardrobe' weighing: 100.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: Backpack cannotTakeNonPortableObjectErrorMessage.
	self deny: (playableCharacter backpackIncludes: object)! !

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:12:26'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 18:12:26'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 18:12:26'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 18:12:26'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 18:12:26'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 18:12:26'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 18:12:26'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 18:12:26'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 18:12:26'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 18:12:26'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 18:12:26'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:12:26'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:12:26'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 18:12:26'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 18:12:26'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:12:26'!
PASSED!
!ExtensionTestCHANGEME methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 18:13:37'!
test16CharacterCanTakePortableObjectsFromNonPortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NonPortableObject named: 'Wardrobe' weighing: 100.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: Backpack cannotTakeNonPortableObjectErrorMessage.
	self deny: (playableCharacter backpackIncludes: object)! !
!ExtensionTestCHANGEME methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 18:13:57' prior: 50900575!
test16CharacterCanTakePortableObjectsFromNonPortableObject

	| room playableCharacter nonPortableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe' weighing: 100.
	
	room placeObject: nonPortableObject at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: Backpack cannotTakeNonPortableObjectErrorMessage.
	self deny: (playableCharacter backpackIncludes: nonPortableObject)! !
!ExtensionTestCHANGEME methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 18:14:05' prior: 50900597!
test16CharacterCanTakePortableObjectsFromNonPortableObject

	| room playableCharacter nonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe' weighing: 100.
	
	room placeObject: nonPortableObject at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: Backpack cannotTakeNonPortableObjectErrorMessage.
	self deny: (playableCharacter backpackIncludes: nonPortableObject)! !
!ExtensionTestCHANGEME methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 18:21:29' prior: 50900621!
test16CharacterCanTakePortableObjectsFromNonPortableObject

	| room playableCharacter nonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe' weighing: 100.
	portableObject := PortableObject named: 'Coat' weighing: 10.
	
	room placeObject: nonPortableObject at: 0@1.
	portableObject add: nonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: nonPortableObject)! !

!testRun: #ExtensionTestCHANGEME #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 18:21:41'!
ERROR!
!ExtensionTestCHANGEME methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 18:22:16' prior: 50900645!
test16CharacterCanTakePortableObjectsFromNonPortableObject

	| room playableCharacter nonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe' weighing: 100.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: nonPortableObject at: 0@1.
	portableObject add: nonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: nonPortableObject)! !

!testRun: #ExtensionTestCHANGEME #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 18:22:17'!
ERROR!
!ExtensionTestCHANGEME methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 18:22:37' prior: 50900674!
test16CharacterCanTakePortableObjectsFromNonPortableObject

	| room playableCharacter nonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe' weighing: 100.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: nonPortableObject at: 0@1.
	nonPortableObject add: portableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject)! !

!testRun: #ExtensionTestCHANGEME #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 18:22:38'!
ERROR!
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 18:22:53'!
add: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!ExtensionTestCHANGEME methodsFor: 'tests - character interaction' stamp: 'CJ 12/10/2020 18:24:17' prior: 50899842!
test14CharacterCanTakePortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: object).
	self assert: (room isEmptyAt: 0@1)! !
!ExtensionTestCHANGEME methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 18:26:49' prior: 50900703!
test16CharacterCanTakePortableObjectsFromNonPortableObject

	| room playableCharacter nonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: nonPortableObject at: 0@1.
	nonPortableObject add: portableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject)! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 18:26:59'!
initializeNamed: aName
	
	name := aName! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial-Solucion' stamp: 'CJ 12/10/2020 18:28:20'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight objectsInside'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial-Solucion'!
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 18:28:15' prior: 50900730!
add: aStageObjectToAdd

	objectsInside add: aStageObjectToAdd ! !
!NonPortableObject class methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 18:28:53'!
named: aName
	
	^ self new initializeNamed: aName! !

!methodRemoval: NonPortableObject class #named:weighing: stamp: 'CJ 12/10/2020 18:29:00'!
named: aName weighing: aWeight
	
	^ self new initializeNamed: aName weighing: aWeight. !
!ExtensionTestCHANGEME methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 18:29:12' prior: 50900495!
test15CharacterCannotTakeNonPortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NonPortableObject named: 'Wardrobe'.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: Backpack cannotTakeNonPortableObjectErrorMessage.
	self deny: (playableCharacter backpackIncludes: object)! !

!methodRemoval: NonPortableObject #initializeNamed:weighing: stamp: 'CJ 12/10/2020 18:29:36'!
initializeNamed: aName weighing: aWeight
	
	name := aName.
	weight := aWeight.!

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 18:29:44'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 18:29:44'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 18:29:44'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 18:29:44'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 18:29:44'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 18:29:44'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 18:29:44'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 18:29:44'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 18:29:44'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 18:29:44'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:29:44'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:29:44'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 18:29:44'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 18:29:44'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:29:44'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 18:29:44'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 18:29:44'!
ERROR!
!NonPortableObject methodsFor: 'initialization' stamp: 'CJ 12/10/2020 18:30:25' prior: 50900779!
initializeNamed: aName
	
	name := aName.
	objectsInside := OrderedCollection new! !

!testRun: #ExtensionTestCHANGEME #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 18:30:27'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 18:30:27'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 18:30:27'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 18:30:27'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 18:30:27'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 18:30:27'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 18:30:27'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 18:30:27'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 18:30:27'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 18:30:27'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:30:27'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:30:27'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 18:30:27'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 18:30:27'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:30:27'!
PASSED!

!testRun: #ExtensionTestCHANGEME #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 18:30:27'!
ERROR!

!testRun: #ExtensionTestCHANGEME #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 18:30:27'!
ERROR!
!ExtensionTestCHANGEME methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 18:32:10' prior: 50900756!
test16CharacterCanTakePortableObjectsFromNonPortableObject

	| room playableCharacter nonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: nonPortableObject at: 0@1.
	nonPortableObject add: portableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self deny: (nonPortableObject includes: portableObject)! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'CJ 12/10/2020 18:32:45' prior: 50895344!
take: aStageObject

	backpack add: aStageObject.! !

!classRenamed: #ExtensionTestCHANGEME as: #AdventureGameTest stamp: 'CJ 12/10/2020 18:33:01'!
Smalltalk renameClassNamed: #ExtensionTestCHANGEME as: #AdventureGameTest!
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 18:37:09' prior: 50900414!
assertCanAddTo: aBackpack 
	
	^ objectsInside do: [ :anObject | aBackpack add: anObject ]! !
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 18:37:49' prior: 50901004!
assertCanAddTo: aBackpack 
	
	objectsInside ifEmpty: [ aBackpack assertCanAddNonPortableObject: self ].
	^ objectsInside do: [ :anObject | aBackpack add: anObject ]! !

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 18:38:00'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 18:38:00'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 18:38:00'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 18:38:00'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 18:38:00'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 18:38:00'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 18:38:00'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 18:38:00'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 18:38:00'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 18:38:00'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:38:00'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:38:00'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 18:38:00'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 18:38:00'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:38:00'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 18:38:00'!
ERROR!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 18:38:00'!
ERROR!
!NonPortableObject methodsFor: 'testing' stamp: 'CJ 12/10/2020 18:38:14'!
includes: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'testing' stamp: 'CJ 12/10/2020 18:38:28' prior: 50901080!
includes: aStageObject

	^ objectsInside includes: aStageObject ! !

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 18:38:29'!
FAILURE!
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 18:40:55' prior: 50901010!
assertCanAddTo: aBackpack 
	
	| toRemove |
	
	objectsInside ifEmpty: [ aBackpack assertCanAddNonPortableObject: self ].
	
	toRemove := OrderedCollection new.
	objectsInside do: [ :anObject |
		aBackpack add: anObject. toRemove add: anObject
		].
	objectsInside removeAll: toRemove! !

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 18:41:02'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 18:41:02'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 18:41:02'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 18:41:02'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 18:41:02'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 18:41:02'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 18:41:02'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 18:41:02'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 18:41:02'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 18:41:02'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:41:02'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:41:02'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 18:41:02'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 18:41:02'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:41:02'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 18:41:02'!
PASSED!
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 18:53:48' prior: 50900809!
test15CharacterCannotTakeNonPortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NonPortableObject named: 'Wardrobe'.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: NonPortableObject cannotTakeFromEmptyObjectErrorMessage.
	self deny: (playableCharacter backpackIncludes: object)! !
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 18:54:05'!
addTo: aBackpack 
	
	| toRemove |

	objectsInside ifEmpty: [ aBackpack assertCanAddNonPortableObject: self ].
	
	toRemove := OrderedCollection new.
	objectsInside do: [ :anObject |
		aBackpack add: anObject. toRemove add: anObject
		].
	objectsInside removeAll: toRemove! !

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:54:09'!
ERROR!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:54:14'!
ERROR!
!NonPortableObject class methodsFor: 'error messages' stamp: 'CJ 12/10/2020 18:54:33'!
cannotTakeFromEmptyObjectErrorMessage
	self shouldBeImplemented.! !
!NonPortableObject class methodsFor: 'error messages' stamp: 'CJ 12/10/2020 18:54:52' prior: 50901204!
cannotTakeFromEmptyObjectErrorMessage
	
	^ 'Cannot take anything from an empty object'! !

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:54:53'!
FAILURE!
!Backpack methodsFor: 'adding' stamp: 'CJ 12/10/2020 18:55:49' prior: 50895180!
add: aStageObject
	
	aStageObject assertCanAddTo: self.
	
	container add: aStageObject.
	! !
!Backpack methodsFor: 'adding' stamp: 'CJ 12/10/2020 18:56:10' prior: 50901219!
add: aStageObject
	
	aStageObject addTo: self! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'CJ 12/10/2020 18:56:11'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'CJ 12/10/2020 18:56:11'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'CJ 12/10/2020 18:56:11'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'CJ 12/10/2020 18:56:11'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'CJ 12/10/2020 18:56:11'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'CJ 12/10/2020 18:56:11'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'CJ 12/10/2020 18:56:11'!
FAILURE!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'CJ 12/10/2020 18:56:11'!
FAILURE!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'CJ 12/10/2020 18:56:11'!
ERROR!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'CJ 12/10/2020 18:56:11'!
ERROR!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'CJ 12/10/2020 18:56:11'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'CJ 12/10/2020 18:56:11'!
ERROR!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'CJ 12/10/2020 18:56:11'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'CJ 12/10/2020 18:56:11'!
ERROR!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'CJ 12/10/2020 18:56:11'!
ERROR!
!Backpack methodsFor: 'adding' stamp: 'CJ 12/10/2020 18:56:55'!
addNonPortable: aStageObject
	
	aStageObject assertCanAddTo: self.
	
	container add: aStageObject.
	! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'CJ 12/10/2020 18:57:00'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'CJ 12/10/2020 18:57:00'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'CJ 12/10/2020 18:57:00'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'CJ 12/10/2020 18:57:00'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'CJ 12/10/2020 18:57:00'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'CJ 12/10/2020 18:57:00'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'CJ 12/10/2020 18:57:00'!
FAILURE!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'CJ 12/10/2020 18:57:00'!
FAILURE!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'CJ 12/10/2020 18:57:00'!
ERROR!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'CJ 12/10/2020 18:57:00'!
ERROR!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'CJ 12/10/2020 18:57:00'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'CJ 12/10/2020 18:57:00'!
ERROR!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'CJ 12/10/2020 18:57:00'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'CJ 12/10/2020 18:57:00'!
ERROR!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'CJ 12/10/2020 18:57:00'!
ERROR!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'CJ 12/10/2020 18:57:03'!
ERROR!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'CJ 12/10/2020 18:57:25'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'CJ 12/10/2020 18:57:25'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'CJ 12/10/2020 18:57:25'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'CJ 12/10/2020 18:57:25'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'CJ 12/10/2020 18:57:25'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'CJ 12/10/2020 18:57:25'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'CJ 12/10/2020 18:57:25'!
FAILURE!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'CJ 12/10/2020 18:57:25'!
FAILURE!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'CJ 12/10/2020 18:57:25'!
ERROR!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'CJ 12/10/2020 18:57:25'!
ERROR!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'CJ 12/10/2020 18:57:25'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'CJ 12/10/2020 18:57:25'!
ERROR!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'CJ 12/10/2020 18:57:25'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'CJ 12/10/2020 18:57:25'!
ERROR!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'CJ 12/10/2020 18:57:25'!
ERROR!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'CJ 12/10/2020 18:57:26'!
ERROR!
!PortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 18:57:43'!
addTo: aBackpack 
	self shouldBeImplemented.! !
!Backpack methodsFor: 'adding' stamp: 'CJ 12/10/2020 18:58:11'!
addPortable: aStageObject
	
	aStageObject assertCanAddTo: self.
	
	container add: aStageObject.
	! !

!methodRemoval: Backpack #addNonPortable: stamp: 'CJ 12/10/2020 18:58:11'!
addNonPortable: aStageObject
	
	aStageObject assertCanAddTo: self.
	
	container add: aStageObject.
	!
!PortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 18:58:16' prior: 50901407!
addTo: aBackpack 
	
	aBackpack addPortable: self! !

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'CJ 12/10/2020 18:58:18'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'CJ 12/10/2020 18:58:20'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'CJ 12/10/2020 18:58:20'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'CJ 12/10/2020 18:58:20'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'CJ 12/10/2020 18:58:20'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'CJ 12/10/2020 18:58:20'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'CJ 12/10/2020 18:58:20'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'CJ 12/10/2020 18:58:20'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'CJ 12/10/2020 18:58:20'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'CJ 12/10/2020 18:58:20'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'CJ 12/10/2020 18:58:20'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'CJ 12/10/2020 18:58:20'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'CJ 12/10/2020 18:58:20'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'CJ 12/10/2020 18:58:20'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'CJ 12/10/2020 18:58:20'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'CJ 12/10/2020 18:58:20'!
PASSED!

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 18:58:23'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 18:58:23'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 18:58:23'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 18:58:23'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 18:58:23'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 18:58:23'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 18:58:23'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 18:58:23'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 18:58:23'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 18:58:23'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:58:23'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:58:23'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 18:58:23'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 18:58:23'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:58:23'!
FAILURE!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'CJ 12/10/2020 18:58:24'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:58:24'!
FAILURE!

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:58:42'!
FAILURE!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'CJ 12/10/2020 18:58:42'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 18:58:42'!
FAILURE!
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 19:00:51' prior: 50901185!
addTo: aBackpack 
	
	| toRemove |

	objectsInside ifEmpty: [ self signalCannotTakeFromEmptyObject ].
	
	toRemove := OrderedCollection new.
	objectsInside do: [ :anObject |
		aBackpack add: anObject. toRemove add: anObject
		].
	objectsInside removeAll: toRemove! !

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 19:01:01'!
FAILURE!
!NonPortableObject methodsFor: 'exceptions' stamp: 'CJ 12/10/2020 19:01:18'!
signalCannotTakeFromEmptyObject
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'exceptions' stamp: 'CJ 12/10/2020 19:01:29' prior: 50901810!
signalCannotTakeFromEmptyObject
	
	self error: self class cannotTakeFromEmptyObjectErrorMessage ! !

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:01:30'!
PASSED!
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:01:55'!
test17CharacterCanTakeDepth1PortableObjectsFromNonPortableObject

	| room playableCharacter nonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: nonPortableObject at: 0@1.
	nonPortableObject add: portableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self deny: (nonPortableObject includes: portableObject)! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:02:05' prior: 50901883!
test17CharacterCanTakeDepth1PortableObjectsFromNonPortableObject

	| room playableCharacter outerPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerPortableObject := NonPortableObject named: 'Wardrobe'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerPortableObject at: 0@1.
	outerPortableObject add: portableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self deny: (outerPortableObject includes: portableObject)! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:02:12' prior: 50901909!
test17CharacterCanTakeDepth1PortableObjectsFromNonPortableObject

	| room playableCharacter outerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	outerNonPortableObject add: portableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self deny: (outerNonPortableObject includes: portableObject)! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:02:24' prior: 50901935!
test17CharacterCanTakeDepth1PortableObjectsFromNonPortableObject

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	outerNonPortableObject add: portableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self deny: (outerNonPortableObject includes: portableObject)! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:02:43' prior: 50901962!
test17CharacterCanTakeDepth1PortableObjectsFromNonPortableObject

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	outerNonPortableObject add: portableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self deny: (outerNonPortableObject includes: portableObject)! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:03:04' prior: 50901989!
test17CharacterCanTakeDepth1PortableObjectsFromNonPortableObject

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	innerNonPortableObject add: portableObject.
	outerNonPortableObject add: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self deny: (outerNonPortableObject includes: portableObject)! !

!testRun: #AdventureGameTest #test17CharacterCanTakeDepth1PortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeDepth1PortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:03:16'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeDepth1PortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeDepth1PortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:03:27'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeDepth1PortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:03:33'!
PASSED!
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:03:58'!
test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	innerNonPortableObject add: portableObject.
	outerNonPortableObject add: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self deny: (outerNonPortableObject includes: portableObject)! !

!methodRemoval: AdventureGameTest #test17CharacterCanTakeDepth1PortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:03:58'!
test17CharacterCanTakeDepth1PortableObjectsFromNonPortableObject

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	innerNonPortableObject add: portableObject.
	outerNonPortableObject add: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self deny: (outerNonPortableObject includes: portableObject)!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 19:04:15'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:04:15'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:04:15'!
PASSED!

!methodRemoval: NonPortableObject #assertCanAddTo: stamp: 'CJ 12/10/2020 19:05:02'!
assertCanAddTo: aBackpack 
	
	| toRemove |
	
	objectsInside ifEmpty: [ aBackpack assertCanAddNonPortableObject: self ].
	
	toRemove := OrderedCollection new.
	objectsInside do: [ :anObject |
		aBackpack add: anObject. toRemove add: anObject
		].
	objectsInside removeAll: toRemove!
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:06:29' prior: 50902185!
test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	innerNonPortableObject add: portableObject.
	outerNonPortableObject add: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self assert: (outerNonPortableObject includes: innerNonPortableObject)! !

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:06:29'!
FAILURE!
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 19:07:15' prior: 50901795!
addTo: aBackpack 
	
	| toRemove |

	objectsInside ifEmpty: [ self signalCannotTakeFromEmptyObject ].
	
	toRemove := OrderedCollection new.
	objectsInside do: [ :anObject |
		aBackpack addTo: anObject. toRemove add: anObject
		].
	objectsInside removeAll: toRemove! !
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 19:07:30' prior: 50902306!
addTo: aBackpack 
	
	| toRemove |

	objectsInside ifEmpty: [ self signalCannotTakeFromEmptyObject ].
	
	toRemove := OrderedCollection new.
	objectsInside do: [ :anObject |
		anObject addTo: aBackpack. toRemove add: anObject
		].
	objectsInside removeAll: toRemove! !

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 19:07:38'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 19:07:38'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 19:07:38'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 19:07:38'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 19:07:38'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 19:07:38'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 19:07:38'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 19:07:38'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 19:07:38'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 19:07:38'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:07:38'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:07:38'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 19:07:38'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 19:07:38'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 19:07:38'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:07:38'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:07:38'!
FAILURE!

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:07:38'!
FAILURE!
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 19:08:10' prior: 50902318!
addTo: aBackpack 
	
	| toRemove |

	objectsInside ifEmpty: [ self signalCannotTakeFromEmptyObject ].
	
	toRemove := OrderedCollection new.
	objectsInside do: [ :anObject |
		anObject addTo: aBackpack.
		(anObject isKindOf: PortableObject) ifTrue: [ toRemove add: anObject ]
		].
	objectsInside removeAll: toRemove! !

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:08:11'!
PASSED!

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:08:23'!
PASSED!
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:10:34'!
test18CharacterCanTakeNonPortableObjectWhenThereIsAnEmptyObjectInside

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	innerNonPortableObject add: portableObject.
	outerNonPortableObject add: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self assert: (outerNonPortableObject includes: innerNonPortableObject)! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:10:48' prior: 50902533!
test18CharacterCanTakeNonPortableObjectWhenThereIsAnEmptyObjectInside

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	outerNonPortableObject add: portableObject.
	outerNonPortableObject add: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self assert: (outerNonPortableObject includes: innerNonPortableObject)! !

!testRun: #AdventureGameTest #test18CharacterCanTakeNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:11:01'!
ERROR!
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 19:12:52'!
addContentsTo: aBackpack 
	
	objectsInside ifEmpty: [ self signalCannotTakeFromEmptyObject ].
	
	self addTo: aBackpack! !

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:12:53'!
PASSED!

!testRun: #AdventureGameTest #test18CharacterCanTakeNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:12:53'!
ERROR!

!testRun: #AdventureGameTest #test18CharacterCanTakeNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:12:53'!
ERROR!
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 19:13:06' prior: 50902396!
addTo: aBackpack 
	
	| toRemove |
	
	toRemove := OrderedCollection new.
	objectsInside do: [ :anObject |
		anObject addTo: aBackpack.
		(anObject isKindOf: PortableObject) ifTrue: [ toRemove add: anObject ]
		].
	objectsInside removeAll: toRemove! !

!testRun: #AdventureGameTest #test18CharacterCanTakeNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:13:07'!
PASSED!

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 19:13:10'!
FAILURE!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test18CharacterCanTakeNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:13:10'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 19:13:10'!
FAILURE!
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 19:08:10' prior: 50902677!
addTo: aBackpack 
	
	| toRemove |

	objectsInside ifEmpty: [ self signalCannotTakeFromEmptyObject ].
	
	toRemove := OrderedCollection new.
	objectsInside do: [ :anObject |
		anObject addTo: aBackpack.
		(anObject isKindOf: PortableObject) ifTrue: [ toRemove add: anObject ]
		].
	objectsInside removeAll: toRemove! !
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 19:14:58' prior: 50902762!
addTo: aBackpack 
	
	objectsInside ifEmpty: [ self signalCannotTakeFromEmptyObject ].! !
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 19:15:11' prior: 50902599!
addContentsTo: aBackpack 
	
	| toRemove |
	
	toRemove := OrderedCollection new.
	objectsInside do: [ :anObject |
		anObject addTo: aBackpack.
		(anObject isKindOf: PortableObject) ifTrue: [ toRemove add: anObject ]
		].
	objectsInside removeAll: toRemove! !
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 19:15:47' prior: 50902775!
addTo: aBackpack 
	
	objectsInside ifEmpty: [ self signalCannotTakeFromEmptyObject ].
	
	self addContentsTo: aBackpack! !
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 19:16:10'!
addObject: aStageObjectToAdd

	objectsInside add: aStageObjectToAdd ! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:16:36' prior: 50900969!
test16CharacterCanTakePortableObjectsFromNonPortableObject

	| room playableCharacter nonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: nonPortableObject at: 0@1.
	nonPortableObject addObject: portableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self deny: (nonPortableObject includes: portableObject)! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:16:45' prior: 50902271!
test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	innerNonPortableObject addObject: portableObject.
	outerNonPortableObject addObject: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self assert: (outerNonPortableObject includes: innerNonPortableObject)! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:16:54' prior: 50902564!
test18CharacterCanTakeNonPortableObjectWhenThereIsAnEmptyObjectInside

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	outerNonPortableObject addObject: portableObject.
	outerNonPortableObject addObject: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self assert: (outerNonPortableObject includes: innerNonPortableObject)! !

!testRun: #AdventureGameTest #test18CharacterCanTakeNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:16:55'!
ERROR!
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 19:18:11' prior: 50902781!
addContentsTo: aBackpack 
	
	| toRemove |
	
	toRemove := OrderedCollection new.
	objectsInside do: [ :anObject |
		anObject addContentsTo: aBackpack.
		(anObject isKindOf: PortableObject) ifTrue: [ toRemove add: anObject ]
		].
	objectsInside removeAll: toRemove! !

!testRun: #AdventureGameTest #test18CharacterCanTakeNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:18:13'!
ERROR!
!PortableObject methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 19:18:37'!
addContentsTo: aBackpack 
	self shouldBeImplemented.! !
!PortableObject methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 19:19:09' prior: 50902915!
addContentsTo: aBackpack 
	
	self addTo: aBackpack! !

!testRun: #AdventureGameTest #test18CharacterCanTakeNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!

!testRun: #AdventureGameTest #test18CharacterCanTakeNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:19:11'!
PASSED!
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:20:22'!
test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	outerNonPortableObject addObject: portableObject.
	outerNonPortableObject addObject: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self assert: (outerNonPortableObject includes: innerNonPortableObject)! !

!methodRemoval: AdventureGameTest #test18CharacterCanTakeNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:20:22'!
test18CharacterCanTakeNonPortableObjectWhenThereIsAnEmptyObjectInside

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	outerNonPortableObject addObject: portableObject.
	outerNonPortableObject addObject: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self assert: (outerNonPortableObject includes: innerNonPortableObject)!
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 19:23:36' prior: 50902899!
addContentsTo: aBackpack 
	
	| toRemove |
	
	"Recursive helper method to addTo. It was needed because addTo is supposed to raise an error
	if the outermost non-portable object is empty, but it should be possible to have
	empty inner non-portable objects and take all the portable ones in the same composite."
	
	toRemove := OrderedCollection new.
	objectsInside do: [ :anObject |
		anObject addContentsTo: aBackpack.
		(anObject isKindOf: PortableObject) ifTrue: [ toRemove add: anObject ]
		].
	objectsInside removeAll: toRemove! !

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!

!testRun: #AdventureGameTest #test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:23:37'!
PASSED!
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:24:20'!
test19CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	outerNonPortableObject addObject: portableObject.
	outerNonPortableObject addObject: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self assert: (outerNonPortableObject includes: innerNonPortableObject)! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:24:29'!
test15CharacterCannotTakeFromEmptyNonPortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NonPortableObject named: 'Wardrobe'.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: NonPortableObject cannotTakeFromEmptyObjectErrorMessage.
	self deny: (playableCharacter backpackIncludes: object)! !

!methodRemoval: AdventureGameTest #test15CharacterCannotTakeNonPortableObject stamp: 'CJ 12/10/2020 19:24:29'!
test15CharacterCannotTakeNonPortableObject

	| room playableCharacter object |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	object := NonPortableObject named: 'Wardrobe'.
	
	room placeObject: object at: 0@1.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: NonPortableObject cannotTakeFromEmptyObjectErrorMessage.
	self deny: (playableCharacter backpackIncludes: object)!
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:24:55'!
test19CharacterCannotTakeFromNonPortableObjectWithOnlyEmptyObjects

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	outerNonPortableObject addObject: portableObject.
	outerNonPortableObject addObject: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self assert: (outerNonPortableObject includes: innerNonPortableObject)! !

!methodRemoval: AdventureGameTest #test19CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:24:55'!
test19CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	outerNonPortableObject addObject: portableObject.
	outerNonPortableObject addObject: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self assert: (outerNonPortableObject includes: innerNonPortableObject)!
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:25:21' prior: 50903219!
test19CharacterCannotTakeFromNonPortableObjectWithOnlyEmptyObjects

	| room playableCharacter outerNonPortableObject innerNonPortableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	
	room placeObject: outerNonPortableObject at: 0@1.
	outerNonPortableObject addObject: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:25:41' prior: 50902996!
test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	outerNonPortableObject addObject: portableObject.
	outerNonPortableObject addObject: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: NonPortableObject cannotTakeFromEmptyObjectErrorMessage! !

!testRun: #AdventureGameTest #test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:25:42'!
FAILURE!
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 19:27:20' prior: 50902792!
addTo: aBackpack 
	
	self hasPortableObjects ifFalse: [ self signalCannotTakeFromEmptyObject ].
	
	self addContentsTo: aBackpack! !

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 19:27:25'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 19:27:25'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 19:27:25'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 19:27:25'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 19:27:25'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 19:27:25'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 19:27:25'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 19:27:25'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 19:27:25'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 19:27:25'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:27:25'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:27:25'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 19:27:25'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 19:27:25'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeFromEmptyNonPortableObject stamp: 'CJ 12/10/2020 19:27:25'!
FAILURE!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:27:25'!
ERROR!

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:27:25'!
ERROR!

!testRun: #AdventureGameTest #test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:27:25'!
ERROR!

!testRun: #AdventureGameTest #test19CharacterCannotTakeFromNonPortableObjectWithOnlyEmptyObjects stamp: 'CJ 12/10/2020 19:27:25'!
ERROR!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:27:27'!
ERROR!
!NonPortableObject methodsFor: 'adding - private' stamp: 'CJ 12/10/2020 19:28:00'!
hasPortableObjects
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'adding - private' stamp: 'CJ 12/10/2020 19:28:43' prior: 50903424!
hasPortableObjects
	
	^ objectsInside anySatisfy: [ :anObject | anObject hasPortableObjects ]! !

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:28:48'!
ERROR!
!PortableObject methodsFor: 'adding - private' stamp: 'CJ 12/10/2020 19:29:05'!
hasPortableObjects
	self shouldBeImplemented.! !
!PortableObject methodsFor: 'adding - private' stamp: 'CJ 12/10/2020 19:29:10' prior: 50903439!
hasPortableObjects
	
	^ true! !

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:29:11'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:29:13'!
PASSED!

!testRun: #AdventureGameTest #test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:29:13'!
FAILURE!

!testRun: #AdventureGameTest #test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:29:32'!
FAILURE!

!testRun: #AdventureGameTest #test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:29:51'!
FAILURE!
!Room methodsFor: 'assertions' stamp: 'CJ 12/10/2020 19:30:27'!
assertObjectAt: positionToTakeObjectFrom

	(self isEmptyAt: positionToTakeObjectFrom) ifTrue: [ self signalCannotTakeFromEmptyPosition ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'CJ 12/10/2020 19:30:27' prior: 50899923!
objectAt: positionToTakeObjectFrom

	| object |
	
	self assertValidPosition: positionToTakeObjectFrom.
	self assertObjectAt: positionToTakeObjectFrom.
	
	object := 	self atPosition: positionToTakeObjectFrom.
	contents removeKey: positionToTakeObjectFrom.
	^ object! !

!methodRemoval: Room #assertPortableObjectAt: stamp: 'CJ 12/10/2020 19:30:27'!
assertPortableObjectAt: positionToTakeObjectFrom

	(self isEmptyAt: positionToTakeObjectFrom) ifTrue: [ self signalCannotTakeFromEmptyPosition ]!
!Room methodsFor: 'objects' stamp: 'CJ 12/10/2020 19:30:34' prior: 50903478!
objectAt: positionToTakeObjectFrom

	| object |
	
	self assertValidPosition: positionToTakeObjectFrom.
	self assertObjectAt: positionToTakeObjectFrom.
	
	object := 	self atPosition: positionToTakeObjectFrom.
	contents removeKey: positionToTakeObjectFrom.
	^ object! !

!testRun: #AdventureGameTest #test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:30:37'!
FAILURE!

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeFromEmptyNonPortableObject stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:30:45'!
PASSED!

!testRun: #AdventureGameTest #test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:30:45'!
FAILURE!

!testRun: #AdventureGameTest #test19CharacterCannotTakeFromNonPortableObjectWithOnlyEmptyObjects stamp: 'CJ 12/10/2020 19:30:45'!
ERROR!

!testRun: #AdventureGameTest #test19CharacterCannotTakeFromNonPortableObjectWithOnlyEmptyObjects stamp: 'CJ 12/10/2020 19:30:47'!
ERROR!
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:31:24' prior: 50903283!
test19CharacterCannotTakeFromNonPortableObjectWithOnlyEmptyObjects

	| room playableCharacter outerNonPortableObject innerNonPortableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	
	room placeObject: outerNonPortableObject at: 0@1.
	outerNonPortableObject addObject: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: NonPortableObject cannotTakeFromEmptyObjectErrorMessage! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:20:22' prior: 50903306!
test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	outerNonPortableObject addObject: portableObject.
	outerNonPortableObject addObject: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self assert: (outerNonPortableObject includes: innerNonPortableObject)! !

!testRun: #AdventureGameTest #test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeFromEmptyNonPortableObject stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:31:39'!
PASSED!

!testRun: #AdventureGameTest #test19CharacterCannotTakeFromNonPortableObjectWithOnlyEmptyObjects stamp: 'CJ 12/10/2020 19:31:39'!
ERROR!

!testRun: #AdventureGameTest #test19CharacterCannotTakeFromNonPortableObjectWithOnlyEmptyObjects stamp: 'CJ 12/10/2020 19:31:39'!
ERROR!
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:31:50' prior: 50903588!
test19CharacterCannotTakeFromNonPortableObjectWithOnlyEmptyObjects

	| room playableCharacter outerNonPortableObject innerNonPortableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	
	room placeObject: outerNonPortableObject at: 0@1.
	outerNonPortableObject addObject: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	
	self
		should: [ playableCharacter take ]
		raise: Error
		withMessageText: NonPortableObject cannotTakeFromEmptyObjectErrorMessage! !

!testRun: #AdventureGameTest #test19CharacterCannotTakeFromNonPortableObjectWithOnlyEmptyObjects stamp: 'CJ 12/10/2020 19:31:51'!
PASSED!

!testRun: #AdventureGameTest #test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeFromEmptyNonPortableObject stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!

!testRun: #AdventureGameTest #test19CharacterCannotTakeFromNonPortableObjectWithOnlyEmptyObjects stamp: 'CJ 12/10/2020 19:31:54'!
PASSED!
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:33:53' prior: 50903615!
test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside

	| room playableCharacter outerNonPortableObject innerNonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	outerNonPortableObject := NonPortableObject named: 'Wardrobe'.
	innerNonPortableObject := NonPortableObject named: 'Box'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: outerNonPortableObject at: 0@1.
	outerNonPortableObject addObject: portableObject.
	outerNonPortableObject addObject: innerNonPortableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject)! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:34:35'!
test20CharacterCanTakePortableObjectsAsLongAsBackpackHasRoom

	| room playableCharacter nonPortableObject portableObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe'.
	portableObject := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: nonPortableObject at: 0@1.
	nonPortableObject addObject: portableObject.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	self deny: (nonPortableObject includes: portableObject)! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:35:13' prior: 50903862!
test20CharacterCanTakePortableObjectsAsLongAsBackpackHasRoom

	| room playableCharacter nonPortableObject objectToTake |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe'.
	objectToTake := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: nonPortableObject at: 0@1.
	nonPortableObject addObject: objectToTake.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: objectToTake).
	self deny: (nonPortableObject includes: objectToTake)! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:35:50' prior: 50903888!
test20CharacterCanTakePortableObjectsAsLongAsBackpackHasRoom

	| room playableCharacter nonPortableObject objectToTake anotherObjectToTake tooHeavyObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe'.
	objectToTake := NoPointsPortableObject named: 'Coat' weighing: 10.
	
	room placeObject: nonPortableObject at: 0@1.
	nonPortableObject addObject: objectToTake.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: objectToTake).
	self deny: (nonPortableObject includes: objectToTake)! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:36:58' prior: 50903914!
test20CharacterCanTakePortableObjectsAsLongAsBackpackHasRoom

	| room playableCharacter nonPortableObject objectToTake anotherObjectToTake tooHeavyObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe'.
	objectToTake := NoPointsPortableObject named: 'Coat' weighing: 10.
	anotherObjectToTake := PointsPortableObject named: 'Dragon Ball' weighing: 90 worth: 100.
	
	room placeObject: nonPortableObject at: 0@1.
	nonPortableObject addObject: objectToTake.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: objectToTake).
	self deny: (nonPortableObject includes: objectToTake)! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:39:04' prior: 50903941!
test20CharacterCanTakePortableObjectsAsLongAsBackpackHasRoom

	| room playableCharacter nonPortableObject objectToTake anotherObjectToTake tooHeavyObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe'.
	objectToTake := NoPointsPortableObject named: 'Coat' weighing: 10.
	anotherObjectToTake := PointsPortableObject named: 'Dragon Ball' weighing: 90 worth: 100.
	tooHeavyObject := NoPointsPortableObject named: 'Horse' weighing: 91.
	
	room placeObject: nonPortableObject at: 0@1.
	nonPortableObject addObject: objectToTake.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: objectToTake).
	self assert: (playableCharacter backpackIncludes: anotherObjectToTake).
	self deny: (playableCharacter backpackIncludes: tooHeavyObject)! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:39:27' prior: 50903971!
test20CharacterCanTakePortableObjectsAsLongAsBackpackHasRoom

	| room playableCharacter nonPortableObject objectToTake anotherObjectToTake tooHeavyObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe'.
	objectToTake := NoPointsPortableObject named: 'Coat' weighing: 10.
	anotherObjectToTake := PointsPortableObject named: 'Dragon Ball' weighing: 90 worth: 100.
	tooHeavyObject := NoPointsPortableObject named: 'Horse' weighing: 91.
	
	room placeObject: nonPortableObject at: 0@1.
	nonPortableObject addObject: objectToTake.
	nonPortableObject addObject: tooHeavyObject.
	nonPortableObject addObject: anotherObjectToTake.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: objectToTake).
	self assert: (playableCharacter backpackIncludes: anotherObjectToTake).
	self deny: (playableCharacter backpackIncludes: tooHeavyObject)! !

!testRun: #AdventureGameTest #test20CharacterCanTakePortableObjectsAsLongAsBackpackHasRoom stamp: 'CJ 12/10/2020 19:39:34'!
ERROR!
!NonPortableObject methodsFor: 'adding' stamp: 'CJ 12/10/2020 19:41:47' prior: 50903059!
addContentsTo: aBackpack 
	
	| toRemove |
	
	"Recursive helper method to addTo. It was needed because addTo is supposed to raise an error
	if the outermost non-portable object is empty, but it should be possible to have
	empty inner non-portable objects and take all the portable ones in the same composite."
	
	toRemove := OrderedCollection new.
	objectsInside do: [ :anObject |
		[ anObject addContentsTo: aBackpack.
		(anObject isKindOf: PortableObject) ifTrue: [ toRemove add: anObject ] ] on: Error do: []
		].
	objectsInside removeAll: toRemove! !

!testRun: #AdventureGameTest #test20CharacterCanTakePortableObjectsAsLongAsBackpackHasRoom stamp: 'CJ 12/10/2020 19:41:49'!
FAILURE!

----SNAPSHOT----(10 December 2020 19:45:08) CuisUniversity-4384.image priorSource: 18104689!
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:45:35' prior: 50904005!
test20CharacterCanTakePortableObjectsAsLongAsBackpackHasRoom

	| room playableCharacter nonPortableObject objectToTake anotherObjectToTake tooHeavyObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe'.
	objectToTake := NoPointsPortableObject named: 'Coat' weighing: 10.
	anotherObjectToTake := PointsPortableObject named: 'Dragon Ball' weighing: 89 worth: 99.
	tooHeavyObject := NoPointsPortableObject named: 'Horse' weighing: 90.
	
	room placeObject: nonPortableObject at: 0@1.
	nonPortableObject addObject: objectToTake.
	nonPortableObject addObject: tooHeavyObject.
	nonPortableObject addObject: anotherObjectToTake.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: objectToTake).
	self assert: (playableCharacter backpackIncludes: anotherObjectToTake).
	self deny: (playableCharacter backpackIncludes: tooHeavyObject)! !

!testRun: #AdventureGameTest #test20CharacterCanTakePortableObjectsAsLongAsBackpackHasRoom stamp: 'CJ 12/10/2020 19:45:37'!
FAILURE!
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:49:09' prior: 50904074!
test20CharacterCanTakePortableObjectsAsLongAsBackpackHasRoom

	| room playableCharacter nonPortableObject objectToTake anotherObjectToTake tooHeavyObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe'.
	objectToTake := NoPointsPortableObject named: 'Coat' weighing: 10.
	anotherObjectToTake := PointsPortableObject named: 'Dragon Ball' weighing: 90 worth: 100.
	tooHeavyObject := NoPointsPortableObject named: 'Horse' weighing: 91.
	
	room placeObject: nonPortableObject at: 0@1.
	nonPortableObject addObject: objectToTake.
	nonPortableObject addObject: tooHeavyObject.
	nonPortableObject addObject: anotherObjectToTake.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: objectToTake).
	self assert: (playableCharacter backpackIncludes: anotherObjectToTake).
	self deny: (playableCharacter backpackIncludes: tooHeavyObject)! !
!AdventureGameTest methodsFor: 'tests - non-portable objects' stamp: 'CJ 12/10/2020 19:49:25' prior: 50904116!
test20CharacterCanTakePortableObjectsAsLongAsBackpackHasRoom

	| room playableCharacter nonPortableObject objectToTake anotherObjectToTake tooHeavyObject |
	
	room := Room width: 3 height: 3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West.
	nonPortableObject := NonPortableObject named: 'Wardrobe'.
	objectToTake := NoPointsPortableObject named: 'Coat' weighing: 10.
	anotherObjectToTake := PointsPortableObject named: 'Dragon Ball' weighing: 90 worth: 100.
	tooHeavyObject := NoPointsPortableObject named: 'A real live horse' weighing: 91.
	
	room placeObject: nonPortableObject at: 0@1.
	nonPortableObject addObject: objectToTake.
	nonPortableObject addObject: tooHeavyObject.
	nonPortableObject addObject: anotherObjectToTake.
	playableCharacter enterRoom: room at: 0@0 heading: #North.
	playableCharacter take.
	
	self assert: (playableCharacter backpackIncludes: objectToTake).
	self assert: (playableCharacter backpackIncludes: anotherObjectToTake).
	self deny: (playableCharacter backpackIncludes: tooHeavyObject)! !

!testRun: #AdventureGameTest #test20CharacterCanTakePortableObjectsAsLongAsBackpackHasRoom stamp: 'CJ 12/10/2020 19:53:58'!
PASSED!

!testRun: #AdventureGameTest #test20CharacterCanTakePortableObjectsAsLongAsBackpackHasRoom stamp: 'CJ 12/10/2020 19:54:01'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeFromEmptyNonPortableObject stamp: 'CJ 12/10/2020 19:54:04'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:54:04'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:54:04'!
PASSED!

!testRun: #AdventureGameTest #test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:54:04'!
PASSED!

!testRun: #AdventureGameTest #test19CharacterCannotTakeFromNonPortableObjectWithOnlyEmptyObjects stamp: 'CJ 12/10/2020 19:54:04'!
PASSED!

!testRun: #AdventureGameTest #test20CharacterCanTakePortableObjectsAsLongAsBackpackHasRoom stamp: 'CJ 12/10/2020 19:54:04'!
PASSED!

----SNAPSHOT----(10 December 2020 19:54:23) CuisUniversity-4384.image priorSource: 18317423!

!methodRemoval: NonPortableObject #add: stamp: 'CJ 12/10/2020 19:55:17'!
add: aStageObjectToAdd

	objectsInside add: aStageObjectToAdd !

!testRun: #AdventureGameTest #test01NewRoomPositionIsEmpty stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test02RoomDimensionsCannotBeNegative stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test03RoomDimensionsCannotBeZero stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test04RoomDimensionsCannotBeNonIntegers stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test05CanPlaceObjectInsideRoomBounds stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test06CannotPlaceObjectOutsideRoomBounds stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test07CannotAccessRoomOutsideBounds stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test08CannotPlaceObjectOrAccessRoomAtNonIntegerPosition stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test09CannotPlaceObjectAtNonEmptyPosition stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test10CharacterCanEnterRoomAtValidPosition stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test11CharacterCannotEnterRoomAtInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test12CharacterCannotMoveToInvalidOrNonEmptyPosition stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test13CharacterCannotTakeFromEmptyPosition stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test14CharacterCanTakePortableObject stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test15CharacterCannotTakeFromEmptyNonPortableObject stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test16CharacterCanTakePortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test17CharacterCanTakeNestedPortableObjectsFromNonPortableObject stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test18CharacterCanTakeFromNonPortableObjectWhenThereIsAnEmptyObjectInside stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test19CharacterCannotTakeFromNonPortableObjectWithOnlyEmptyObjects stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

!testRun: #AdventureGameTest #test20CharacterCanTakePortableObjectsAsLongAsBackpackHasRoom stamp: 'CJ 12/10/2020 19:56:17'!
PASSED!

----SNAPSHOT----(10 December 2020 19:56:54) CuisUniversity-4384.image priorSource: 18322353!

----SNAPSHOT----(10 December 2020 19:58:21) CuisUniversity-4384.image priorSource: 18324988!
!AbstractRoom commentStamp: '<historical>' prior: 0!
Esta clase deber�a tener definidos los m�todos polim�rficos entre NullRoom y Room, pero por cuestiones de tiempo no llegu� a hacerlos. Lo mismo vale para StageObject y los m�todos polim�rficos entre PortableObject y NonPortableObject.!
Esta clase deber�a tener definidos los m�todos polim�rficos entre NullRoom y Room, pero por cuestiones de tiempo no llegu� a hacerlos. Lo mismo vale para StageObject y los m�todos polim�rficos entre PortableObject y NonPortableObject.!

----QUIT----(10 December 2020 20:03:58) CuisUniversity-4384.image priorSource: 18325082!