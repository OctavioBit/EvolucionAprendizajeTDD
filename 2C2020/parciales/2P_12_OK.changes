----STARTUP---- (10 December 2020 15:10:22) as /home/doraserver/Escritorio/Cuis-Parcial/CuisUniversity-4384.image!


----End fileIn of /home/doraserver/Escritorio/Cuis-Parcial/ISW1-2020-2C-2doParcial.st----!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 17:33:01'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 17:34:20'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'nil' stamp: 'EMI 12/10/2020 17:34:05'!
test01
	| room |
	room _ Room withSize: 1@1.
	
	self assert: room isEmpty.! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 17:34:29'!
ERROR!

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 17:34:29'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'EMI 12/10/2020 17:34:41'!
withSize: aPoint 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithSize: aPoint ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 17:35:26' prior: 50868657!
test01
	| room |
	room _ Room width: 1 height: 1.
	
	self assert: room isEmpty.! !

!methodRemoval: Room class #withSize: stamp: 'EMI 12/10/2020 17:35:33'!
withSize: aPoint 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithSize: aPoint !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 17:35:36'!
ERROR!

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 17:35:36'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'EMI 12/10/2020 17:35:43'!
width: aSmallInteger height: aSmallInteger2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWidth: aSmallInteger height: aSmallInteger2 ! !
!Room class methodsFor: 'instance creation' stamp: 'EMI 12/10/2020 17:36:15' prior: 50868692!
width: aPositiveIntergerWidth height: aPositiveIntegerHeight 
	^self new initializeWidth: aPositiveIntergerWidth height: aPositiveIntegerHeight. ! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 17:36:16'!
ERROR!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 17:36:32'!
Object subclass: #Room
	instanceVariableNames: 'positiveIntergerWidth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 17:36:32'!
Object subclass: #Room
	instanceVariableNames: 'positiveIntergerWidth positiveIntegerHeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'EMI 12/10/2020 17:36:32'!
initializeWidth: aPositiveIntergerWidth height: aPositiveIntegerHeight 
	self shouldBeImplemented.
	positiveIntergerWidth := aPositiveIntergerWidth.
	positiveIntegerHeight := aPositiveIntegerHeight.! !
!Room methodsFor: 'initialization' stamp: 'EMI 12/10/2020 17:36:38' prior: 50868728!
initializeWidth: aPositiveIntergerWidth height: aPositiveIntegerHeight 
	positiveIntergerWidth := aPositiveIntergerWidth.
	positiveIntegerHeight := aPositiveIntegerHeight.! !
!Room methodsFor: 'initialization' stamp: 'EMI 12/10/2020 17:36:46' prior: 50868737!
initializeWidth: aPositiveIntegerWidth height: aPositiveIntegerHeight 
	positiveIntergerWidth := aPositiveIntegerWidth.
	positiveIntegerHeight := aPositiveIntegerHeight.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 17:36:59'!
Object subclass: #Room
	instanceVariableNames: 'width positiveIntegerHeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 17:36:59' prior: 50868746!
initializeWidth: aPositiveIntegerWidth height: aPositiveIntegerHeight 
	width := aPositiveIntegerWidth.
	positiveIntegerHeight := aPositiveIntegerHeight.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 17:37:08'!
Object subclass: #Room
	instanceVariableNames: 'width height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 17:37:08' prior: 50868763!
initializeWidth: aPositiveIntegerWidth height: aPositiveIntegerHeight 
	width := aPositiveIntegerWidth.
	height := aPositiveIntegerHeight.! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 17:37:14'!
ERROR!
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 17:37:26'!
isEmpty
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 17:37:33' prior: 50868788!
isEmpty
	^true.! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 17:37:35'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 17:41:19'!
test02
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ self defaultPlayer.
	room addPlayer: player.
	
	self deny: room isEmpty.! !

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 17:41:30'!
ERROR!
!RoomTest methodsFor: 'player movement' stamp: 'EMI 12/10/2020 17:41:46'!
defaultPlayer
	self shouldBeImplemented.! !
!RoomTest methodsFor: 'player movement' stamp: 'EMI 12/10/2020 17:42:32' prior: 50868807!
defaultPlayer
	^PlayableCharacter named: 'Guybrush' using: self defaultBackpack at: 1@1 heading: #North.! !

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 17:42:34'!
ERROR!
!RoomTest methodsFor: 'aux' stamp: 'EMI 12/10/2020 17:42:47'!
defaultBackpack
	self shouldBeImplemented.! !
!RoomTest methodsFor: 'aux' stamp: 'EMI 12/10/2020 17:43:01' prior: 50868820!
defaultBackpack
	^Backpack containingUpTo: 100 limitingPointsTo: 100.! !

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 17:43:02'!
ERROR!
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 17:43:15'!
addPlayer: aPlayableCharacter 
	self shouldBeImplemented.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 17:43:34'!
Object subclass: #Room
	instanceVariableNames: 'width height player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 17:43:31' prior: 50868831!
addPlayer: aPlayableCharacter 
	player _ aPlayableCharacter.! !

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 17:43:36'!
FAILURE!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 17:43:39'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 17:43:39'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 17:43:39'!
FAILURE!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 17:43:39'!
FAILURE!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 17:43:42'!
PASSED!
!Room methodsFor: 'initialization' stamp: 'EMI 12/10/2020 17:44:00' prior: 50868779!
initializeWidth: aPositiveIntegerWidth height: aPositiveIntegerHeight 
	width := aPositiveIntegerWidth.
	height := aPositiveIntegerHeight.
	player _ nil.! !
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 17:44:19' prior: 50868792!
isEmpty
	^player isNil.! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 17:44:21'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 17:44:21'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 17:47:18'!
test03
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ self invalidPositionPlayer.
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayerWithInvalidPositionMessage].
	
	self assert: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 17:47:28' prior: 50868879!
test03
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ self invalidPositionPlayer.
	
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayerWithInvalidPositionMessage].
	
	self assert: room isEmpty.! !

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 17:47:32'!
ERROR!
!RoomTest methodsFor: 'player movement' stamp: 'EMI 12/10/2020 17:47:49'!
invalidPositionPlayer
	self shouldBeImplemented.! !
!RoomTest methodsFor: 'player movement' stamp: 'EMI 12/10/2020 17:48:15' prior: 50868906!
invalidPositionPlayer
	^PlayableCharacter named: 'Guybrush' using: self defaultBackpack at: 0@0 heading: #North.! !

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 17:48:26'!
FAILURE!
!PlayableCharacter methodsFor: 'testing' stamp: 'EMI 12/10/2020 17:50:10'!
isAt: aPosition

	^position = aPosition! !

!methodRemoval: PlayableCharacter #isAt: stamp: 'EMI 12/10/2020 17:50:37'!
isAt: aPosition

	^position = aPosition!
!PlayableCharacter methodsFor: 'testing' stamp: 'EMI 12/10/2020 17:54:45'!
isWithinRoomWithWidth: aWidth andHeight: aHeight
	^(position x between: 1 and: aWidth) and: [position y between: 1 and: aHeight].! !
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 17:55:34' prior: 50868844!
addPlayer: aPlayableCharacter
	(aPlayableCharacter isWithinRoomWithWidth: width andHeight: height) ifFalse: [self signalCannotAddPlayerWithInvalidPosition].
	player _ aPlayableCharacter.! !
!Room methodsFor: 'nil' stamp: 'EMI 12/10/2020 17:56:08'!
signalCannotAddPlayerWithInvalidPosition
	^Error signal: self! !
!Room methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 17:56:21' prior: 50868943!
signalCannotAddPlayerWithInvalidPosition
	^Error signal: self class cannotAddPlayerWithInvalidPositionMessage.! !
!Room class methodsFor: 'nil' stamp: 'EMI 12/10/2020 17:56:46'!
cannotAddPlayerWithInvalidPositionMessage
	^'Cannot add player at invalid position, out of bounds'.! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 17:57:08'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 17:57:08'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 17:57:08'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 17:57:55'!
test04
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ self defaultPlayer.
	
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayerWithInvalidPositionMessage].
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 17:58:08' prior: 50868966!
test04
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ self defaultPlayer.
	
	room addPlayer: player.
	
	self should: []
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayerWithInvalidPositionMessage].
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:00:04' prior: 50868978!
test04
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ self defaultPlayer.
	
	room addPlayer: player.
	
	self should: []
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayerWithInvalidPositionMessage].
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:00:28' prior: 50868990!
test04
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ self defaultPlayer.
	
	room addPlayer: player.
	
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayerWithInvalidPositionMessage].
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:01:14' prior: 50869002!
test04
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ self defaultPlayer.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayerWithInvalidPositionMessage].
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:01:33' prior: 50869015!
test04
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ self defaultPlayer.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotMovePlayerOutsideRoomMessage].
	
	self deny: room isEmpty.! !

Object subclass: #BoundedPlayableCharacter
	instanceVariableNames: 'room player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #BoundedPlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 18:04:30'!
Object subclass: #BoundedPlayableCharacter
	instanceVariableNames: 'room player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:05:43' prior: 50869028!
test04
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotMovePlayerOutsideRoomMessage].
	
	self deny: room isEmpty.! !

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 18:05:56'!
ERROR!
!BoundedPlayableCharacter class methodsFor: 'instance creation' stamp: 'EMI 12/10/2020 18:06:03'!
bound: aPlayableCharacter to: aRoom 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeBound: aPlayableCharacter to: aRoom ! !
!BoundedPlayableCharacter class methodsFor: 'instance creation' stamp: 'EMI 12/10/2020 18:06:08' prior: 50869072!
bound: aPlayableCharacter to: aRoom 
	^self new initializeBound: aPlayableCharacter to: aRoom ! !

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 18:06:10'!
ERROR!

!classDefinition: #BoundedPlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 18:06:24'!
Object subclass: #BoundedPlayableCharacter
	instanceVariableNames: 'room player playableCharacter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!BoundedPlayableCharacter methodsFor: 'initialization' stamp: 'EMI 12/10/2020 18:06:24'!
initializeBound: aPlayableCharacter to: aRoom 
	self shouldBeImplemented.
	playableCharacter := aPlayableCharacter.
	room := aRoom.! !
!BoundedPlayableCharacter methodsFor: 'initialization' stamp: 'EMI 12/10/2020 18:06:34' prior: 50869100!
initializeBound: aPlayableCharacter to: aRoom 
	player := aPlayableCharacter.
	room := aRoom.! !

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 18:06:37'!
ERROR!
!BoundedPlayableCharacter methodsFor: 'testing' stamp: 'EMI 12/10/2020 18:06:50'!
isWithinRoomWithWidth: aSmallInteger andHeight: aSmallInteger2 
	self shouldBeImplemented.! !
!BoundedPlayableCharacter methodsFor: 'testing' stamp: 'EMI 12/10/2020 18:07:10' prior: 50869116!
isWithinRoomWithWidth: aWidth andHeight: aHeight 
	player isWithinRoomWithWidth: aWidth andHeight: aHeight.! !

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 18:07:12'!
ERROR!
!BoundedPlayableCharacter methodsFor: 'testing' stamp: 'EMI 12/10/2020 18:07:26' prior: 50869122!
isWithinRoomWithWidth: aWidth andHeight: aHeight 
	^player isWithinRoomWithWidth: aWidth andHeight: aHeight.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'EMI 12/10/2020 18:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'EMI 12/10/2020 18:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'EMI 12/10/2020 18:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'EMI 12/10/2020 18:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'EMI 12/10/2020 18:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'EMI 12/10/2020 18:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'EMI 12/10/2020 18:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'EMI 12/10/2020 18:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'EMI 12/10/2020 18:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'EMI 12/10/2020 18:07:30'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 18:07:36'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 18:07:36'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 18:07:36'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 18:07:36'!
ERROR!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 18:07:36'!
ERROR!

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 18:07:41'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 18:07:41'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 18:07:41'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 18:07:41'!
ERROR!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 18:07:41'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'EMI 12/10/2020 18:07:52'!
cannotMovePlayerOutsideRoomMessage
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'EMI 12/10/2020 18:08:07' prior: 50869198!
cannotMovePlayerOutsideRoomMessage
	^'Cannot move player outside room'.! !

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 18:08:08'!
FAILURE!
!BoundedPlayableCharacter methodsFor: 'nil' stamp: 'EMI 12/10/2020 18:08:44'!
moveFoward
	player moveForward.! !
!BoundedPlayableCharacter methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 18:08:56'!
moveForward
	player moveForward.! !

!methodRemoval: BoundedPlayableCharacter #moveFoward stamp: 'EMI 12/10/2020 18:08:56'!
moveFoward
	player moveForward.!
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 18:09:55'!
isInsideRoom: aPlayableCharacterOrStageObject
	^aPlayableCharacterOrStageObject isWithinRoomWithWidth: width andHeight: height.! !
!BoundedPlayableCharacter methodsFor: 'testing' stamp: 'EMI 12/10/2020 18:10:12' prior: 50869131!
isWithinRoomWithWidth: aWidth andHeight: aHeight
	^player isWithinRoomWithWidth: aWidth andHeight: aHeight.! !
!BoundedPlayableCharacter methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 18:12:34' prior: 50869216!
moveForward
	player moveForward.
	(room isInsideRoom: player) ifFalse: 
	[
		player moveBackward.
	].
	! !
!BoundedPlayableCharacter methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 18:14:23' prior: 50869238!
moveForward
	player moveForward.
	(room isInsideRoom: player) ifFalse: 
	[
		player moveBackward.
		room signalCannotMovePlayerOutsideRoom.
	].
	! !
!BoundedPlayableCharacter methodsFor: 'moving' stamp: 'EMI 12/10/2020 18:15:19' prior: 50869245!
moveForward
	player moveForward.
	(room isInsideRoom: player) ifFalse: 
	[
		player moveBackward.
		self signalCannotMovePlayerOutsideRoom.
	].
	! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:15:33' prior: 50869055!
test04
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayerOutsideRoomMessage].
	
	self deny: room isEmpty.! !
!BoundedPlayableCharacter class methodsFor: 'nil' stamp: 'EMI 12/10/2020 18:15:59'!
cannotMovePlayerOutsideRoomMessage
	^'Cannot move player outside room.'.! !
!BoundedPlayableCharacter methodsFor: 'nil' stamp: 'EMI 12/10/2020 18:16:46'!
signalCannotMovePlayerOutsideRoom
	^Error signal: self class cannotMovePlayerOutsideRoomMessage.! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 18:17:01'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 18:17:01'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 18:17:01'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 18:17:01'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:19:26'!
test05
	| room stageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	self addStageObject: stageObject at: 1@1.
	
	self deny: room isEmpty.! !

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 18:19:35'!
ERROR!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:19:46' prior: 50869295!
test05
	| room stageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room addStageObject: stageObject at: 1@1.
	
	self deny: room isEmpty.! !

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 18:19:47'!
ERROR!
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 18:19:55'!
addStageObject: aPointsPortableObject at: aPoint 
	self shouldBeImplemented.! !

----End fileIn of /home/doraserver/Escritorio/Cuis-Parcial/Packages/TerseGuide.pck.st----!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 18:22:01'!
Object subclass: #Room
	instanceVariableNames: 'width height player stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 18:21:56' prior: 50869318!
addStageObject: aStageObject at: aPosition 
	stageObjects add: #(aStageObject aPosition).! !

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 18:22:06'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'EMI 12/10/2020 18:22:34' prior: 50868863!
initializeWidth: aPositiveIntegerWidth height: aPositiveIntegerHeight 
	width := aPositiveIntegerWidth.
	height := aPositiveIntegerHeight.
	player _ nil.
	stageObjects _ OrderedCollection new.! !

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 18:22:40'!
FAILURE!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 18:22:40'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 18:23:29' prior: 50868871!
isEmpty
	^player isNil and:[stageObjects isEmpty].! !

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 18:23:41'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 18:23:44'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 18:23:44'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 18:23:44'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 18:23:44'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 18:23:44'!
PASSED!
!Room class methodsFor: 'instance creation' stamp: 'EMI 12/10/2020 18:24:24'!
width: aPositiveIntergerWidth height: aPositiveIntegerHeight withPlayableCharacter: aPlayableCharacter  
	^self new initializeWidth: aPositiveIntergerWidth height: aPositiveIntegerHeight. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 18:24:24' prior: 50868891!
test03
	| room player |
	room _ Room width: 1 height: 1 withPlayableCharacter: self.
	
	player _ self invalidPositionPlayer.
	
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayerWithInvalidPositionMessage].
	
	self assert: room isEmpty.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 18:24:24' prior: 50868675!
test01
	| room |
	room _ Room width: 1 height: 1 withPlayableCharacter: self.
	
	self assert: room isEmpty.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 18:24:24' prior: 50869261!
test04
	| room player |
	room _ Room width: 1 height: 1 withPlayableCharacter: self.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayerOutsideRoomMessage].
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 18:24:24' prior: 50868797!
test02
	| room player |
	room _ Room width: 1 height: 1 withPlayableCharacter: self.
	
	player _ self defaultPlayer.
	room addPlayer: player.
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 18:24:24' prior: 50869307!
test05
	| room stageObject |
	room _ Room width: 2 height: 2 withPlayableCharacter: self.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room addStageObject: stageObject at: 1@1.
	
	self deny: room isEmpty.! !

!methodRemoval: Room class #width:height: stamp: 'EMI 12/10/2020 18:24:24'!
width: aPositiveIntergerWidth height: aPositiveIntegerHeight 
	^self new initializeWidth: aPositiveIntergerWidth height: aPositiveIntegerHeight. !
!Room methodsFor: 'initialization' stamp: 'EMI 12/10/2020 18:25:05'!
initializeWidth: aPositiveIntegerWidth height: aPositiveIntegerHeight withPlayableCharacter: aPlayableCharacter  
	width := aPositiveIntegerWidth.
	height := aPositiveIntegerHeight.
	player _ nil.
	stageObjects _ OrderedCollection new.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 18:25:05' prior: 50872307!
width: aPositiveIntergerWidth height: aPositiveIntegerHeight withPlayableCharacter: aPlayableCharacter  
	^self new initializeWidth: aPositiveIntergerWidth height: aPositiveIntegerHeight withPlayableCharacter: aPlayableCharacter. ! !

!methodRemoval: Room #initializeWidth:height: stamp: 'EMI 12/10/2020 18:25:05'!
initializeWidth: aPositiveIntegerWidth height: aPositiveIntegerHeight 
	width := aPositiveIntegerWidth.
	height := aPositiveIntegerHeight.
	player _ nil.
	stageObjects _ OrderedCollection new.!
!Room methodsFor: 'initialization' stamp: 'EMI 12/10/2020 18:25:12' prior: 50872379!
initializeWidth: aPositiveIntegerWidth height: aPositiveIntegerHeight withPlayableCharacter: aPlayableCharacter  
	width := aPositiveIntegerWidth.
	height := aPositiveIntegerHeight.
	player _ aPlayableCharacter .
	stageObjects _ OrderedCollection new.! !
!Room methodsFor: 'initialization' stamp: 'EMI 12/10/2020 18:25:14' prior: 50872409!
initializeWidth: aPositiveIntegerWidth height: aPositiveIntegerHeight withPlayableCharacter: aPlayableCharacter  
	width := aPositiveIntegerWidth.
	height := aPositiveIntegerHeight.
	player _ aPlayableCharacter.
	stageObjects _ OrderedCollection new.! !

!methodRemoval: Room #addPlayer: stamp: 'EMI 12/10/2020 18:25:30'!
addPlayer: aPlayableCharacter
	(aPlayableCharacter isWithinRoomWithWidth: width andHeight: height) ifFalse: [self signalCannotAddPlayerWithInvalidPosition].
	player _ aPlayableCharacter.!
!Room class methodsFor: 'instance creation' stamp: 'EMI 12/10/2020 18:26:21' prior: 50872390!
width: aPositiveIntergerWidth height: aPositiveIntegerHeight withPlayableCharacter: aPlayableCharacter  
	^self new initializeWidth: aPositiveIntergerWidth height: aPositiveIntegerHeight withPlayableCharacter: aPlayableCharacter. ! !
!Room methodsFor: 'initialization' stamp: 'EMI 12/10/2020 18:26:45' prior: 50872420!
initializeWidth: aPositiveIntegerWidth height: aPositiveIntegerHeight withPlayableCharacter: aPlayableCharacter
	(aPlayableCharacter isWithinRoomWithWidth: aPositiveIntegerWidth andHeight: aPositiveIntegerHeight) ifFalse: [self signalCannotAddPlayerWithInvalidPosition.]. 
	width := aPositiveIntegerWidth.
	height := aPositiveIntegerHeight.
	player _ aPlayableCharacter.
	stageObjects _ OrderedCollection new.! !
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 18:27:09'!
add: aStageObject at: aPosition 
	stageObjects add: #(aStageObject aPosition).! !

!methodRemoval: Room #addStageObject:at: stamp: 'EMI 12/10/2020 18:27:09'!
addStageObject: aStageObject at: aPosition 
	stageObjects add: #(aStageObject aPosition).!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:27:19' prior: 50872362!
test05
	| room stageObject |
	room _ Room width: 2 height: 2 withPlayableCharacter: self.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room add: stageObject at: 1@1.
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:27:33' prior: 50872475!
test05
	| room stageObject |
	room _ Room width: 2 height: 2 withPlayableCharacter: self defaultPlayer.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room add: stageObject at: 1@1.
	
	self deny: room isEmpty.! !
!Room methodsFor: 'initialization' stamp: 'EMI 12/10/2020 18:31:01' prior: 50872449!
initializeWidth: aPositiveIntegerWidth height: aPositiveIntegerHeight withPlayableCharacter: aPlayableCharacter
	(aPlayableCharacter isWithinRoomWithWidth: aPositiveIntegerWidth andHeight: aPositiveIntegerHeight) ifFalse: [self signalCannotAddPlayerWithInvalidPosition.]. 
	width := aPositiveIntegerWidth.
	height := aPositiveIntegerHeight.
	player _ aPlayableCharacter.
	stageObjects _ OrderedCollection new.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:31:41' prior: 50872337!
test04
	| room player |
	
	player _ self defaultPlayer .
	room _ Room width: 1 height: 1 withPlayableCharacter: player.
	
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayerOutsideRoomMessage].
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:37:31' prior: 50872330!
test01
	| room |
	room _ Room width: 1 height: 1.
	
	self assert: room isEmpty.! !
!Room class methodsFor: 'instance creation' stamp: 'EMI 12/10/2020 18:37:41'!
width: aPositiveIntergerWidth height: aPositiveIntegerHeight
	^self new initializeWidth: aPositiveIntergerWidth height: aPositiveIntegerHeight. ! !
!Room methodsFor: 'initialization' stamp: 'EMI 12/10/2020 18:37:56'!
initializeWidth: aPositiveIntegerWidth height: aPositiveIntegerHeight
	width := aPositiveIntegerWidth.
	height := aPositiveIntegerHeight.
	player _ nil.
	stageObjects _ OrderedCollection new.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:24:24' prior: 50872512!
test04
	| room player |
	room _ Room width: 1 height: 1 withPlayableCharacter: self.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayerOutsideRoomMessage].
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:44:02' prior: 50872548!
test04
	| room player |
	room _ Room width: 1 height: 1 withPlayableCharacter: self defaultPlayer.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayerOutsideRoomMessage].
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:44:46' prior: 50872485!
test05
	| room stageObject |
	room _ Room width: 2 height: 2 withPlayableCharacter: self defaultPlayer.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room add: stageObject at: 1@1.
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:45:15'!
test06
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2 withPlayableCharacter: self defaultPlayer.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room add: stageObject at: 1@1.
	
	invalidStageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room add: stageObject at: 1@1.
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:45:28' prior: 50872589!
test06
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2 withPlayableCharacter: self defaultPlayer.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room add: stageObject at: 1@1.
	
	invalidStageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room add: invalidStageObject at: 1@1.
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:47:28' prior: 50872604!
test06
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2 withPlayableCharacter: self defaultPlayer.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room add: stageObject at: 1@1.
	
	invalidStageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	self should: [room add: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room class cannotAddObjectInAlreadyOccupiedPosition].
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:47:42' prior: 50872353!
test02
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ self defaultPlayer.
	room addPlayer: player.
	
	self deny: room isEmpty.! !
!Room methodsFor: 'nil' stamp: 'EMI 12/10/2020 18:48:06'!
addPlayer: aPlayableCharacter
	player _ aPlayableCharacter.! !
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 18:49:02' prior: 50872646!
addPlayer: aPlayableCharacter
	(aPlayableCharacter isWithinRoomWithWidth: width andHeight: height) ifFalse: [^self signalCannotAddPlayerWithInvalidPosition.].
	player _ aPlayableCharacter.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:49:26' prior: 50872316!
test03
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ self invalidPositionPlayer.
	
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayerWithInvalidPositionMessage].
	
	self assert: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:49:32' prior: 50872564!
test04
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayerOutsideRoomMessage].
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:49:58' prior: 50872660!
test03
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self invalidPositionPlayer to: room .
	
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayerWithInvalidPositionMessage].
	
	self assert: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:50:34' prior: 50872619!
test06
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room add: stageObject at: 1@1.
	
	invalidStageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	self should: [room add: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room class cannotAddObjectInAlreadyOccupiedPosition].
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:50:39' prior: 50872579!
test05
	| room stageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room add: stageObject at: 1@1.
	
	self deny: room isEmpty.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:51:46' prior: 50872639!
test02
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ self defaultPlayer.
	room addPlayer: player.
	
	self deny: room isEmpty.
	self assert: (room isPlayer: player at: 1@1).! !
!PlayableCharacter methodsFor: 'testing' stamp: 'EMI 12/10/2020 18:53:09'!
isAt: aPosition

	^position = aPosition.! !
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 18:53:18'!
isPlayerAt: aPosition
	^player isAt: aPosition.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:53:44' prior: 50872728!
test02
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ self defaultPlayer.
	room addPlayer: player.
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:54:20' prior: 50872673!
test04
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayerOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:54:51' prior: 50872719!
test05
	| room stageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room add: stageObject at: 1@1.
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 18:55:33' prior: 50872701!
test06
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room add: stageObject at: 1@1.
	
	invalidStageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	self should: [room add: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room class cannotAddObjectInAlreadyOccupiedPosition].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).! !

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 18:55:39'!
FAILURE!
!Room class methodsFor: 'error messages' stamp: 'EMI 12/10/2020 18:56:19'!
cannotAddObjectInAlreadyOccupiedPosition
	^'Cannot add object in already occupied position.'.! !
!Room methodsFor: 'signaling' stamp: 'EMI 12/10/2020 18:56:32' prior: 50868948!
signalCannotAddPlayerWithInvalidPosition
	^Error signal: self class cannotAddObjectInAlreadyOccupiedPosition.! !
!Room class methodsFor: 'error messages' stamp: 'EMI 12/10/2020 18:56:42'!
cannotAddObjectInAlreadyOccupiedPositionMessage
	^'Cannot add object in already occupied position.'.! !
!Room methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 18:56:42' prior: 50872809!
signalCannotAddPlayerWithInvalidPosition
	^Error signal: self class cannotAddObjectInAlreadyOccupiedPositionMessage.! !

!methodRemoval: Room class #cannotAddObjectInAlreadyOccupiedPosition stamp: 'EMI 12/10/2020 18:56:42'!
cannotAddObjectInAlreadyOccupiedPosition
	^'Cannot add object in already occupied position.'.!
!Room methodsFor: 'signaling' stamp: 'EMI 12/10/2020 18:57:16'!
signalCannotAddObjectInAlreadyOccupiedPosition
	^Error signal: self class cannotAddObjectInAlreadyOccupiedPositionMessage.! !
!Room methodsFor: 'signaling' stamp: 'EMI 12/10/2020 18:56:32' prior: 50872822!
signalCannotAddPlayerWithInvalidPosition
	^Error signal: self class cannotAddObjectInAlreadyOccupiedPosition.! !
!Room methodsFor: 'signaling' stamp: 'EMI 12/10/2020 18:57:33' prior: 50872841!
signalCannotAddPlayerWithInvalidPosition
	^Error signal: self class cannotAddObjectInAlreadyOccupiedPositionMessage.! !
!Room methodsFor: 'signaling' stamp: 'EMI 12/10/2020 18:57:40' prior: 50872848!
signalCannotAddPlayerWithInvalidPosition
	^Error signal: self class cannotAddPlayerWithInvalidPositionMessage.! !

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 18:57:57'!
FAILURE!

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 18:58:01'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 18:58:01'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 18:58:01'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 18:58:01'!
FAILURE!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 18:58:01'!
ERROR!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 18:58:01'!
FAILURE!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 18:58:03'!
ERROR!
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 18:58:13'!
isStageObject: aPointsPortableObject at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 18:59:59' prior: 50872464!
add: aStageObject at: aPosition 
	stageObjects add: #(aPosition aStageObject).! !
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:00:51' prior: 50872879!
isStageObject: aStageObject at: aPosition
	^stageObjects select: [:anItem | (anItem at: 1) = aPosition and: [(anItem at: 2) = aStageObject]].! !
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:01:44' prior: 50872889!
isStageObject: aStageObject at: aPosition
	^(stageObjects select: [:anItem | (anItem at: 1) = aPosition and: [(anItem at: 2) = aStageObject]]) isEmpty not.! !

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:01:50'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:03:25'!
findObjectAt: aStageObject equalTo: aPosition

	^ stageObjects select: [:anItem | (anItem at: 1) = aPosition and: [(anItem at: 2) = aStageObject]]! !
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:03:25' prior: 50872896!
isStageObject: aStageObject at: aPosition
	^(self findObjectAt: aStageObject equalTo: aPosition) isEmpty not.! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:03:31'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:03:31'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:03:31'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:03:31'!
FAILURE!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:03:31'!
FAILURE!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:03:31'!
FAILURE!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:03:33'!
FAILURE!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:03:45'!
FAILURE!

!methodRemoval: Room #initializeWidth:height:withPlayableCharacter: stamp: 'EMI 12/10/2020 19:04:10'!
initializeWidth: aPositiveIntegerWidth height: aPositiveIntegerHeight withPlayableCharacter: aPlayableCharacter
	(aPlayableCharacter isWithinRoomWithWidth: aPositiveIntegerWidth andHeight: aPositiveIntegerHeight) ifFalse: [self signalCannotAddPlayerWithInvalidPosition.]. 
	width := aPositiveIntegerWidth.
	height := aPositiveIntegerHeight.
	player _ aPlayableCharacter.
	stageObjects _ OrderedCollection new.!

!methodRemoval: Room class #width:height:withPlayableCharacter: stamp: 'EMI 12/10/2020 19:04:15'!
width: aPositiveIntergerWidth height: aPositiveIntegerHeight withPlayableCharacter: aPlayableCharacter  
	^self new initializeWidth: aPositiveIntergerWidth height: aPositiveIntegerHeight withPlayableCharacter: aPlayableCharacter. !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:04:54' prior: 50872781!
test06
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room add: stageObject at: 1@1.
	
	invalidStageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	self should: [room add: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room class cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:05:04'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:05:04'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:05:04'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:05:04'!
FAILURE!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:05:04'!
FAILURE!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:05:04'!
FAILURE!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:05:09'!
FAILURE!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:05:32' prior: 50872755!
test04
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayerOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:05:36'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:05:36'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:05:36'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:05:36'!
ERROR!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:05:36'!
FAILURE!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:05:36'!
FAILURE!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:05:41'!
ERROR!
!BoundedPlayableCharacter methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:06:24'!
isAt: aPosition
	^player isAt: aPosition.! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:06:28'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:06:28'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:06:28'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:06:28'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:06:28'!
FAILURE!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:06:28'!
FAILURE!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:06:30'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:07:35' prior: 50872914!
isStageObject: aStageObject at: aPosition
	
	^(self findObjectAt: aPosition equalTo: aStageObject) isEmpty not.! !

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:07:37'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:09:06' prior: 50872906!
findObjectAt: aStageObject equalTo: aPosition
	| stageObjectsInPosition |
	stageObjectsInPosition _ stageObjects select: [:anItem | (anItem at: 1) = aPosition ].

	^ stageObjectsInPosition select: [:anItem |  (anItem at: 2) = aStageObject].! !
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:09:11' prior: 50873061!
findObjectAt: aStageObject equalTo: aPosition
	| stageObjectsInPosition |
	stageObjectsInPosition _ stageObjects select: [:anItem | (anItem at: 1) = aPosition ].
	
	^ stageObjectsInPosition select: [:anItem |  (anItem at: 2) = aStageObject].! !
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:09:35'!
stageObjectsAt: aPosition

	^ stageObjects select: [:anItem | (anItem at: 1) = aPosition ]! !
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:09:35' prior: 50873072!
findObjectAt: aStageObject equalTo: aPosition
	| stageObjectsInPosition |
	stageObjectsInPosition _ self stageObjectsAt: aPosition.
	
	^ stageObjectsInPosition select: [:anItem |  (anItem at: 2) = aStageObject].! !
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:09:51'!
findStageObjectAt: aStageObject equalTo: aPosition
	| stageObjectsInPosition |
	stageObjectsInPosition _ self stageObjectsAt: aPosition.
	
	^ stageObjectsInPosition select: [:anItem |  (anItem at: 2) = aStageObject].! !
!Room methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 19:09:51' prior: 50873052!
isStageObject: aStageObject at: aPosition
	
	^(self findStageObjectAt: aPosition equalTo: aStageObject) isEmpty not.! !

!methodRemoval: Room #findObjectAt:equalTo: stamp: 'EMI 12/10/2020 19:09:51'!
findObjectAt: aStageObject equalTo: aPosition
	| stageObjectsInPosition |
	stageObjectsInPosition _ self stageObjectsAt: aPosition.
	
	^ stageObjectsInPosition select: [:anItem |  (anItem at: 2) = aStageObject].!

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:10:10'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:10:10'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:10:10'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:10:10'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:10:10'!
FAILURE!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:10:10'!
FAILURE!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:10:12'!
FAILURE!
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 19:11:51' prior: 50872884!
add: aStageObject at: aPosition 
	stageObjects add: (Array with: aPosition with: aStageObject).! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:11:54'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:11:54'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:11:54'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:11:54'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:11:54'!
FAILURE!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:11:54'!
FAILURE!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:11:56'!
FAILURE!

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:14:58'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:14:58'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:14:58'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:14:58'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:14:58'!
FAILURE!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:14:58'!
FAILURE!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:15:00'!
FAILURE!

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:15:53'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:15:53'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:15:53'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:15:53'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:15:53'!
FAILURE!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:15:53'!
FAILURE!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:15:55'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:16:53' prior: 50873097!
findStageObjectAt: aPosition equalTo: aStageObject
	| stageObjectsInPosition |
	stageObjectsInPosition _ self stageObjectsAt: aPosition.
	
	^ stageObjectsInPosition select: [:anItem |  (anItem at: 2) = aStageObject].! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:16:55'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:16:55'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:16:55'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:16:55'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:16:55'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:16:55'!
FAILURE!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:16:55'!
FAILURE!
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 19:17:25'!
addStageObject: aStageObject at: aPosition 
	stageObjects add: (Array with: aPosition with: aStageObject).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 19:17:25' prior: 50872770!
test05
	| room stageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room addStageObject: stageObject at: 1@1.
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 19:17:25' prior: 50872965!
test06
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room addStageObject: stageObject at: 1@1.
	
	invalidStageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	self should: [room addStageObject: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room class cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).! !

!methodRemoval: Room #add:at: stamp: 'EMI 12/10/2020 19:17:25'!
add: aStageObject at: aPosition 
	stageObjects add: (Array with: aPosition with: aStageObject).!
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 19:18:12' prior: 50873216!
addStageObject: aStageObject at: aPosition
	((self stageObjectsAt: aPosition) isEmpty) ifFalse: [self signalCannotAddObjectInAlreadyOccupiedPosition].
	stageObjects add: (Array with: aPosition with: aStageObject).! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:18:20'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:18:20'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:18:20'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:18:20'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:18:20'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:18:20'!
ERROR!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:18:20'!
ERROR!

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:18:56'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:18:56'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:18:56'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:18:56'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:18:56'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:18:56'!
ERROR!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:18:56'!
ERROR!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:19:16' prior: 50873235!
test06
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room addStageObject: stageObject at: 1@1.
	
	invalidStageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	self should: [room addStageObject: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).! !

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:19:18'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:19:21'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:19:21'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:19:21'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:19:21'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:19:21'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:19:21'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:20:43' prior: 50873302!
test06
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room addStageObject: stageObject at: 1@1.
	
	invalidStageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	self should: [room addStageObject: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isStageObject: invalidStageObject at: 1@1).! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:21:12' prior: 50873339!
test06
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room addStageObject: stageObject at: 1@1.
	
	invalidStageObject _ NoPointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	self should: [room addStageObject: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isStageObject: invalidStageObject at: 1@1).! !

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:21:18'!
ERROR!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:21:37' prior: 50873362!
test06
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room addStageObject: stageObject at: 1@1.
	
	invalidStageObject _ NoPointsPortableObject named: 'Moneda'.
	self should: [room addStageObject: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isStageObject: invalidStageObject at: 1@1).! !

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:21:38'!
ERROR!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:22:01' prior: 50873387!
test06
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1.
	room addStageObject: stageObject at: 1@1.
	
	invalidStageObject _ NoPointsPortableObject named: 'Moneda sin puntos' weighing: 1.
	self should: [room addStageObject: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isStageObject: invalidStageObject at: 1@1).! !

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:22:02'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:22:02'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:22:02'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:22:02'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:22:02'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:22:02'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:22:02'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:22:32'!
defaultPointsPortableObject

	^ PointsPortableObject named: 'Moneda' weighing: 1 worth: 1! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:22:32' prior: 50873223!
test05
	| room stageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:22:45' prior: 50873412!
test06
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	invalidStageObject _ NoPointsPortableObject named: 'Moneda sin puntos' weighing: 1.
	self should: [room addStageObject: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isStageObject: invalidStageObject at: 1@1).! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:23:04'!
defaultNoPointsPortableObject

	^ NoPointsPortableObject named: 'Moneda sin puntos' weighing: 1! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:23:04' prior: 50873467!
test06
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	invalidStageObject _ self defaultNoPointsPortableObject.
	self should: [room addStageObject: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isStageObject: invalidStageObject at: 1@1).! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:24:11'!
test07
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	invalidStageObject _ self defaultNoPointsPortableObject.
	self should: [room addStageObject: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isStageObject: invalidStageObject at: 1@1).! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:25:06' prior: 50873516!
test07
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	player _ self defaultPlayer .
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isPlayerAt: 1@1).
! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:25:23' prior: 50873537!
test07
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	player _ self defaultPlayer .
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayerInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isPlayerAt: 1@1).
! !

!testRun: #RoomTest #test07 stamp: 'EMI 12/10/2020 19:25:37'!
FAILURE!
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 19:27:02' prior: 50872651!
addPlayer: aPlayableCharacter
	(aPlayableCharacter isWithinRoomWithWidth: width andHeight: height) ifFalse: [^self signalCannotAddPlayerWithInvalidPosition.].
	player _ aPlayableCharacter.! !
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 19:28:24' prior: 50873577!
addPlayer: aPlayableCharacter
	(aPlayableCharacter isWithinRoomWithWidth: width andHeight: height) ifFalse: [^self signalCannotAddPlayerWithInvalidPosition.].
	(stageObjects select: [:anItem | aPlayableCharacter isAt: (anItem at: 1)]) isEmpty ifFalse: [^ self signalCannotAddPlayerToAlreadyOccupiedPosition].
	player _ aPlayableCharacter.! !
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 19:29:00'!
stageObjectsOverlappingWith: aPlayableCharacter

	^ stageObjects select: [:anItem | aPlayableCharacter isAt: (anItem at: 1)]! !
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 19:29:00' prior: 50873586!
addPlayer: aPlayableCharacter
	(aPlayableCharacter isWithinRoomWithWidth: width andHeight: height) ifFalse: [^self signalCannotAddPlayerWithInvalidPosition.].
	(self stageObjectsOverlappingWith: aPlayableCharacter) isEmpty ifFalse: [^ self signalCannotAddPlayerToAlreadyOccupiedPosition].
	player _ aPlayableCharacter.! !
!Room methodsFor: 'signaling' stamp: 'EMI 12/10/2020 19:29:38'!
signalCannotAddPlayerToAlreadyOccupiedPosition
	^Error signal: self class cannotAddPlayerToAlreadyOccupiedPositionMessage.! !
!Room class methodsFor: 'error messages' stamp: 'EMI 12/10/2020 19:30:11'!
cannotAddPlayerToAlreadyOccupiedPositionMessage
	^'Cannot add player to already occupied position'.! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:30:16'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:30:16'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:30:16'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:30:16'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:30:16'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:30:16'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'EMI 12/10/2020 19:30:16'!
ERROR!

!testRun: #RoomTest #test07 stamp: 'EMI 12/10/2020 19:30:16'!
ERROR!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:30:44' prior: 50873556!
test07
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	player _ self defaultPlayer .
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayerToAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isPlayerAt: 1@1).
! !

!testRun: #RoomTest #test07 stamp: 'EMI 12/10/2020 19:30:45'!
ERROR!

Object subclass: #NullPlayableCharacter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NullPlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 19:31:55'!
Object subclass: #NullPlayableCharacter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'EMI 12/10/2020 19:32:10' prior: 50872539!
initializeWidth: aPositiveIntegerWidth height: aPositiveIntegerHeight
	width := aPositiveIntegerWidth.
	height := aPositiveIntegerHeight.
	player _ NullPlayableCharacter new.
	stageObjects _ OrderedCollection new.! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:32:36'!
FAILURE!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:32:36'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:32:36'!
FAILURE!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:32:36'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:32:36'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:32:36'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'EMI 12/10/2020 19:32:36'!
ERROR!

!testRun: #RoomTest #test07 stamp: 'EMI 12/10/2020 19:32:38'!
ERROR!
!NullPlayableCharacter methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:32:55'!
isAt: aPoint 
	self shouldBeImplemented.! !
!NullPlayableCharacter methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:33:03' prior: 50873711!
isAt: aPoint 
	^False.! !
!NullPlayableCharacter methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:33:07' prior: 50873716!
isAt: aPoint 
	^false.! !

!testRun: #RoomTest #test07 stamp: 'EMI 12/10/2020 19:33:08'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:33:10'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:34:08' prior: 50872289!
isEmpty
	^(player isWithinRoomWithWidth: width andHeight: height) and:[stageObjects isEmpty].! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:34:09'!
ERROR!
!NullPlayableCharacter methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:34:19'!
isWithinRoomWithWidth: aSmallInteger andHeight: aSmallInteger2 
	self shouldBeImplemented.! !
!NullPlayableCharacter methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:34:35' prior: 50873736!
isWithinRoomWithWidth: aWidth andHeight: aHeight
	^false! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:34:36'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 19:34:59' prior: 50873728!
isEmpty
	^((player isWithinRoomWithWidth: width andHeight: height) not) and:[stageObjects isEmpty].! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:35:00'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:35:02'!
PASSED!

StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 19:36:01'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:37:17' prior: 50873650!
test07
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayerToAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isPlayerAt: 1@1).
! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:38:02' prior: 50872746!
test02
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:38:08'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:38:08'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:38:08'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:38:08'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:38:08'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:38:08'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'EMI 12/10/2020 19:38:08'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:38:31'!
test08
	| room player stageObject|
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayerOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:39:01' prior: 50873818!
test08
	| room player stageObject|
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	stageObject _ self defaultNonPortableObject.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayerOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:40:01' prior: 50873834!
test08
	| room player stageObject|
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	stageObject _ self defaultNonPortableObject.
	room addStageObject: stageObject at: 1@2.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayerOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:41:13' prior: 50873852!
test08
	| room player stageObject|
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	stageObject _ self defaultNonPortableObject.
	room addStageObject: stageObject at: 1@2.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter movingPlayerCausesOverlappingWithStageObject].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:42:12'!
defaultNonPortableObject

	^ NonPortableObject new.! !
!BoundedPlayableCharacter class methodsFor: 'error messages' stamp: 'EMI 12/10/2020 19:43:01'!
movingPlayerCausesOverlappingWithStageObjectMessage
	^'Moving player causes overlapping with stage object'.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:43:14' prior: 50873871!
test08
	| room player stageObject|
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	stageObject _ self defaultNonPortableObject.
	room addStageObject: stageObject at: 1@2.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter movingPlayerCausesOverlappingWithStageObjectMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !

!testRun: #RoomTest #test08 stamp: 'EMI 12/10/2020 19:43:15'!
FAILURE!
!BoundedPlayableCharacter methodsFor: 'moving' stamp: 'EMI 12/10/2020 19:44:58' prior: 50869253!
moveForward
	player moveForward.
	(room isInsideRoom: player) ifFalse: 
	[
		player moveBackward.
		self signalCannotMovePlayerOutsideRoom.
	].
	((room stageObjectsOverlappingWith: player) isEmpty) ifFalse: [
		player moveBackward.
		self signalCannotMovePlayerOutsideRoom.
	].
	! !
!BoundedPlayableCharacter methodsFor: 'signaling' stamp: 'EMI 12/10/2020 19:45:52'!
signalMovingPlayableCharacterCausesOverlapping
	^Error signal: self class movingPlayerCausesOverlappingWithStageObjectMessage.! !
!BoundedPlayableCharacter methodsFor: 'moving' stamp: 'EMI 12/10/2020 19:46:06' prior: 50873923!
moveForward
	player moveForward.
	(room isInsideRoom: player) ifFalse: 
	[
		player moveBackward.
		self signalCannotMovePlayerOutsideRoom.
	].
	((room stageObjectsOverlappingWith: player) isEmpty) ifFalse: [
		player moveBackward.
		self signalMovingPlayableCharacterCausesOverlapping .
	].
	! !

!testRun: #RoomTest #test08 stamp: 'EMI 12/10/2020 19:46:18'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:46:18'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:46:18'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:46:18'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:46:18'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:46:18'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:46:18'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'EMI 12/10/2020 19:46:18'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'EMI 12/10/2020 19:46:18'!
PASSED!
!BoundedPlayableCharacter class methodsFor: 'error messages' stamp: 'EMI 12/10/2020 19:48:06'!
cannotMovePlayableOutsideRoomMessage
	^'Cannot move player outside room.'.! !
!Room class methodsFor: 'error messages' stamp: 'EMI 12/10/2020 19:48:06'!
cannotMovePlayableOutsideRoomMessage
	^'Cannot move player outside room'.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 19:48:06' prior: 50873001!
test04
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayableOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !
!BoundedPlayableCharacter methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 19:48:06' prior: 50869281!
signalCannotMovePlayerOutsideRoom
	^Error signal: self class cannotMovePlayableOutsideRoomMessage.! !

!methodRemoval: BoundedPlayableCharacter class #cannotMovePlayerOutsideRoomMessage stamp: 'EMI 12/10/2020 19:48:06'!
cannotMovePlayerOutsideRoomMessage
	^'Cannot move player outside room.'.!

!methodRemoval: Room class #cannotMovePlayerOutsideRoomMessage stamp: 'EMI 12/10/2020 19:48:06'!
cannotMovePlayerOutsideRoomMessage
	^'Cannot move player outside room'.!
!Room class methodsFor: 'error messages' stamp: 'EMI 12/10/2020 19:48:24'!
cannotMovePlayableCharacterOutsideRoomMessage
	^'Cannot move player outside room'.! !
!BoundedPlayableCharacter class methodsFor: 'error messages' stamp: 'EMI 12/10/2020 19:48:24'!
cannotMovePlayableCharacterOutsideRoomMessage
	^'Cannot move player outside room.'.! !
!BoundedPlayableCharacter methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 19:48:24' prior: 50874004!
signalCannotMovePlayerOutsideRoom
	^Error signal: self class cannotMovePlayableCharacterOutsideRoomMessage.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 19:48:24' prior: 50873987!
test04
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayableCharacterOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !

!methodRemoval: Room class #cannotMovePlayableOutsideRoomMessage stamp: 'EMI 12/10/2020 19:48:24'!
cannotMovePlayableOutsideRoomMessage
	^'Cannot move player outside room'.!

!methodRemoval: BoundedPlayableCharacter class #cannotMovePlayableOutsideRoomMessage stamp: 'EMI 12/10/2020 19:48:24'!
cannotMovePlayableOutsideRoomMessage
	^'Cannot move player outside room.'.!
!BoundedPlayableCharacter class methodsFor: 'error messages' stamp: 'EMI 12/10/2020 19:48:38'!
movingPlayableCharacterCausesOverlappingWithStageObjectMessage
	^'Moving player causes overlapping with stage object'.! !
!BoundedPlayableCharacter methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 19:48:38' prior: 50873935!
signalMovingPlayableCharacterCausesOverlapping
	^Error signal: self class movingPlayableCharacterCausesOverlappingWithStageObjectMessage.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 19:48:38' prior: 50873901!
test08
	| room player stageObject|
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	stageObject _ self defaultNonPortableObject.
	room addStageObject: stageObject at: 1@2.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter movingPlayableCharacterCausesOverlappingWithStageObjectMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !

!methodRemoval: BoundedPlayableCharacter class #movingPlayerCausesOverlappingWithStageObjectMessage stamp: 'EMI 12/10/2020 19:48:38'!
movingPlayerCausesOverlappingWithStageObjectMessage
	^'Moving player causes overlapping with stage object'.!
!Room class methodsFor: 'error messages' stamp: 'EMI 12/10/2020 19:48:59'!
cannotAddPlayableCharacterToAlreadyOccupiedPositionMessage
	^'Cannot add player to already occupied position'.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 19:48:59' prior: 50873773!
test07
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayableCharacterToAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isPlayerAt: 1@1).
! !
!Room methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 19:48:59' prior: 50873619!
signalCannotAddPlayerToAlreadyOccupiedPosition
	^Error signal: self class cannotAddPlayableCharacterToAlreadyOccupiedPositionMessage.! !

!methodRemoval: Room class #cannotAddPlayerToAlreadyOccupiedPositionMessage stamp: 'EMI 12/10/2020 19:48:59'!
cannotAddPlayerToAlreadyOccupiedPositionMessage
	^'Cannot add player to already occupied position'.!
!Room class methodsFor: 'error messages' stamp: 'EMI 12/10/2020 19:49:15'!
cannotAddPlayableCharacterWithInvalidPositionMessage
	^'Cannot add player at invalid position, out of bounds'.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 19:49:15' prior: 50872687!
test03
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self invalidPositionPlayer to: room .
	
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayableCharacterWithInvalidPositionMessage].
	
	self assert: room isEmpty.! !
!Room methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 19:49:15' prior: 50872855!
signalCannotAddPlayerWithInvalidPosition
	^Error signal: self class cannotAddPlayableCharacterWithInvalidPositionMessage.! !

!methodRemoval: Room class #cannotAddPlayerWithInvalidPositionMessage stamp: 'EMI 12/10/2020 19:49:15'!
cannotAddPlayerWithInvalidPositionMessage
	^'Cannot add player at invalid position, out of bounds'.!

!testRun: #RoomTest #test01 stamp: 'EMI 12/10/2020 19:49:29'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'EMI 12/10/2020 19:49:29'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'EMI 12/10/2020 19:49:29'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'EMI 12/10/2020 19:49:29'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'EMI 12/10/2020 19:49:29'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'EMI 12/10/2020 19:49:29'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'EMI 12/10/2020 19:49:29'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'EMI 12/10/2020 19:49:29'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:49:47'!
test01RoomsCanBeEmpty
	| room |
	room _ Room width: 1 height: 1.
	
	self assert: room isEmpty.! !

!methodRemoval: RoomTest #test01 stamp: 'EMI 12/10/2020 19:49:47'!
test01
	| room |
	room _ Room width: 1 height: 1.
	
	self assert: room isEmpty.!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:50:09'!
test02CanAddAPlayableCharacterToARoom
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !

!methodRemoval: RoomTest #test02 stamp: 'EMI 12/10/2020 19:50:09'!
test02
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:50:39'!
test03CannotAddPlayableCharacterOutsideRoom
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self invalidPositionPlayer to: room .
	
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayableCharacterWithInvalidPositionMessage].
	
	self assert: room isEmpty.! !

!methodRemoval: RoomTest #test03 stamp: 'EMI 12/10/2020 19:50:39'!
test03
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self invalidPositionPlayer to: room .
	
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayableCharacterWithInvalidPositionMessage].
	
	self assert: room isEmpty.!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:51:04'!
test04CannotMovePlayableCharacterOutsideRoom
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayableCharacterOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !

!methodRemoval: RoomTest #test04 stamp: 'EMI 12/10/2020 19:51:04'!
test04
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayableCharacterOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:51:20'!
test05CanAddStageObjectsToRoom
	| room stageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).! !

!methodRemoval: RoomTest #test05 stamp: 'EMI 12/10/2020 19:51:20'!
test05
	| room stageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:51:54'!
test06CannotAdd2OverlappingStageObjectAtSamePosition
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	invalidStageObject _ self defaultNoPointsPortableObject.
	self should: [room addStageObject: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isStageObject: invalidStageObject at: 1@1).! !

!methodRemoval: RoomTest #test06 stamp: 'EMI 12/10/2020 19:51:54'!
test06
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	invalidStageObject _ self defaultNoPointsPortableObject.
	self should: [room addStageObject: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isStageObject: invalidStageObject at: 1@1).!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:52:33'!
test07CannotAddPlayableCharacterOverlappingAStageObject
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayableCharacterToAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isPlayerAt: 1@1).
! !

!methodRemoval: RoomTest #test07 stamp: 'EMI 12/10/2020 19:52:33'!
test07
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayableCharacterToAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isPlayerAt: 1@1).
!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:53:18'!
test08CannotMovePlayableCharacterToAOcuppiedPosition
	| room player stageObject|
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	stageObject _ self defaultNonPortableObject.
	room addStageObject: stageObject at: 1@2.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter movingPlayableCharacterCausesOverlappingWithStageObjectMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !

!methodRemoval: RoomTest #test08 stamp: 'EMI 12/10/2020 19:53:18'!
test08
	| room player stageObject|
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	stageObject _ self defaultNonPortableObject.
	room addStageObject: stageObject at: 1@2.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter movingPlayableCharacterCausesOverlappingWithStageObjectMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:54:08'!
test09CanMovePlayableCharacterToEmptyPosition
	| room player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	player moveForward.
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !

!testRun: #RoomTest #test09CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 19:54:11'!
FAILURE!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:54:22' prior: 50874441!
test09CanMovePlayableCharacterToEmptyPosition
	| room player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	player moveForward.
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@2).! !

!testRun: #RoomTest #test09CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 19:54:22'!
PASSED!

!testRun: #RoomTest #test01RoomsCanBeEmpty stamp: 'EMI 12/10/2020 19:54:22'!
PASSED!

!testRun: #RoomTest #test02CanAddAPlayableCharacterToARoom stamp: 'EMI 12/10/2020 19:54:22'!
PASSED!

!testRun: #RoomTest #test03CannotAddPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 19:54:22'!
PASSED!

!testRun: #RoomTest #test04CannotMovePlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 19:54:22'!
PASSED!

!testRun: #RoomTest #test05CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 19:54:22'!
PASSED!

!testRun: #RoomTest #test06CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 19:54:22'!
PASSED!

!testRun: #RoomTest #test07CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 19:54:22'!
PASSED!

!testRun: #RoomTest #test08CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 19:54:22'!
PASSED!

!testRun: #RoomTest #test09CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 19:54:22'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:55:34'!
test10CannotMovePlayableCharacterBackwardsOutsideRoom
	| room player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	player moveBackward.
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@2).! !

!testRun: #RoomTest #test10CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 19:55:36'!
ERROR!
!BoundedPlayableCharacter methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 19:55:46'!
moveBackward
	self shouldBeImplemented.! !
!BoundedPlayableCharacter methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 19:55:58' prior: 50874517!
moveBackward
	player moveBackward.! !
!BoundedPlayableCharacter methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 19:56:34' prior: 50874522!
moveBackward
	player moveBackward.
	(room isInsideRoom: player) ifFalse: 
	[
		player moveForward.
		self signalCannotMovePlayerOutsideRoom.
	].
	((room stageObjectsOverlappingWith: player) isEmpty) ifFalse: [
		player moveForward.
		self signalMovingPlayableCharacterCausesOverlapping .
	].! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:57:13'!
test04CanMovePlayableCharacterToEmptyPosition
	| room player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	player moveForward.
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@2).! !

!methodRemoval: RoomTest #test09CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 19:57:13'!
test09CanMovePlayableCharacterToEmptyPosition
	| room player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	player moveForward.
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@2).!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:57:33'!
test06CannotMovePlayableCharacterBackwardsOutsideRoom
	| room player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	player moveBackward.
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@2).! !

!methodRemoval: RoomTest #test10CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 19:57:33'!
test10CannotMovePlayableCharacterBackwardsOutsideRoom
	| room player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	player moveBackward.
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@2).!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:57:53'!
test05CannotMoveForwardPlayableCharacterOutsideRoom
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayableCharacterOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !

!methodRemoval: RoomTest #test04CannotMovePlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 19:57:53'!
test04CannotMovePlayableCharacterOutsideRoom
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayableCharacterOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:58:11'!
test07CannotAdd2OverlappingStageObjectAtSamePosition
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	invalidStageObject _ self defaultNoPointsPortableObject.
	self should: [room addStageObject: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isStageObject: invalidStageObject at: 1@1).! !

!methodRemoval: RoomTest #test06CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 19:58:11'!
test06CannotAdd2OverlappingStageObjectAtSamePosition
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	invalidStageObject _ self defaultNoPointsPortableObject.
	self should: [room addStageObject: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isStageObject: invalidStageObject at: 1@1).!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:58:18'!
test08CannotAddPlayableCharacterOverlappingAStageObject
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayableCharacterToAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isPlayerAt: 1@1).
! !

!methodRemoval: RoomTest #test07CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 19:58:18'!
test07CannotAddPlayableCharacterOverlappingAStageObject
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayableCharacterToAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isPlayerAt: 1@1).
!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:58:26'!
test10CannotMovePlayableCharacterToAOcuppiedPosition
	| room player stageObject|
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	stageObject _ self defaultNonPortableObject.
	room addStageObject: stageObject at: 1@2.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter movingPlayableCharacterCausesOverlappingWithStageObjectMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !

!methodRemoval: RoomTest #test08CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 19:58:26'!
test08CannotMovePlayableCharacterToAOcuppiedPosition
	| room player stageObject|
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	stageObject _ self defaultNonPortableObject.
	room addStageObject: stageObject at: 1@2.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter movingPlayableCharacterCausesOverlappingWithStageObjectMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:58:33'!
test09CannotMovePlayableCharacterToAOcuppiedPosition
	| room player stageObject|
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	stageObject _ self defaultNonPortableObject.
	room addStageObject: stageObject at: 1@2.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter movingPlayableCharacterCausesOverlappingWithStageObjectMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !

!methodRemoval: RoomTest #test10CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 19:58:33'!
test10CannotMovePlayableCharacterToAOcuppiedPosition
	| room player stageObject|
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	stageObject _ self defaultNonPortableObject.
	room addStageObject: stageObject at: 1@2.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter movingPlayableCharacterCausesOverlappingWithStageObjectMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:58:57'!
test07CanAddStageObjectsToRoom
	| room stageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).! !

!methodRemoval: RoomTest #test05CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 19:58:57'!
test05CanAddStageObjectsToRoom
	| room stageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:59:04'!
test08CannotAdd2OverlappingStageObjectAtSamePosition
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	invalidStageObject _ self defaultNoPointsPortableObject.
	self should: [room addStageObject: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isStageObject: invalidStageObject at: 1@1).! !

!methodRemoval: RoomTest #test07CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 19:59:04'!
test07CannotAdd2OverlappingStageObjectAtSamePosition
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	invalidStageObject _ self defaultNoPointsPortableObject.
	self should: [room addStageObject: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isStageObject: invalidStageObject at: 1@1).!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:59:10'!
test09CannotAddPlayableCharacterOverlappingAStageObject
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayableCharacterToAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isPlayerAt: 1@1).
! !

!methodRemoval: RoomTest #test08CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 19:59:10'!
test08CannotAddPlayableCharacterOverlappingAStageObject
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayableCharacterToAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isPlayerAt: 1@1).
!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 19:59:17'!
test10CannotMovePlayableCharacterToAOcuppiedPosition
	| room player stageObject|
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	stageObject _ self defaultNonPortableObject.
	room addStageObject: stageObject at: 1@2.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter movingPlayableCharacterCausesOverlappingWithStageObjectMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !

!methodRemoval: RoomTest #test09CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 19:59:17'!
test09CannotMovePlayableCharacterToAOcuppiedPosition
	| room player stageObject|
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	stageObject _ self defaultNonPortableObject.
	room addStageObject: stageObject at: 1@2.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter movingPlayableCharacterCausesOverlappingWithStageObjectMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).!

----SNAPSHOT----(10 December 2020 19:59:23) CuisUniversity-4384.image priorSource: 17155564!

StageObject subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 20:02:50'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

NonPortableObject subclass: #SingularNonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #SingularNonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 20:03:08'!
NonPortableObject subclass: #SingularNonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

NonPortableObject subclass: #ContainerNonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #ContainerNonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 20:03:13'!
NonPortableObject subclass: #ContainerNonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #ContainerNonPortableObject stamp: 'EMI 12/10/2020 20:04:49'!
NonPortableObject subclass: #ContainerNonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #SingularNonPortableObject stamp: 'EMI 12/10/2020 20:04:54'!
NonPortableObject subclass: #SingularNonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:05:58'!
test05CannotMovePlayableCharacterForwardOutsideRoom
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayableCharacterOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !

!methodRemoval: RoomTest #test05CannotMoveForwardPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 20:05:58'!
test05CannotMoveForwardPlayableCharacterOutsideRoom
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayableCharacterOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:06:26' prior: 50874563!
test06CannotMovePlayableCharacterBackwardsOutsideRoom
	| room player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	self should: [player moveBackward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayableCharacterOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@2).! !

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 20:06:27'!
FAILURE!

!testRun: #RoomTest #test01RoomsCanBeEmpty stamp: 'EMI 12/10/2020 20:06:49'!
PASSED!

!testRun: #RoomTest #test02CanAddAPlayableCharacterToARoom stamp: 'EMI 12/10/2020 20:06:49'!
PASSED!

!testRun: #RoomTest #test03CannotAddPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 20:06:49'!
PASSED!

!testRun: #RoomTest #test04CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 20:06:49'!
PASSED!

!testRun: #RoomTest #test05CannotMovePlayableCharacterForwardOutsideRoom stamp: 'EMI 12/10/2020 20:06:49'!
PASSED!

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 20:06:49'!
FAILURE!

!testRun: #RoomTest #test07CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 20:06:49'!
PASSED!

!testRun: #RoomTest #test08CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 20:06:49'!
PASSED!

!testRun: #RoomTest #test09CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 20:06:49'!
PASSED!

!testRun: #RoomTest #test10CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 20:06:49'!
PASSED!

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 20:06:49'!
FAILURE!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:07:05' prior: 50875048!
test06CannotMovePlayableCharacterBackwardsOutsideRoom
	| room player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayer to: room.
	room addPlayer: player.
	
	self should: [player moveBackward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayableCharacterOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 20:07:06'!
PASSED!

!testRun: #RoomTest #test01RoomsCanBeEmpty stamp: 'EMI 12/10/2020 20:07:09'!
PASSED!

!testRun: #RoomTest #test02CanAddAPlayableCharacterToARoom stamp: 'EMI 12/10/2020 20:07:09'!
PASSED!

!testRun: #RoomTest #test03CannotAddPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 20:07:09'!
PASSED!

!testRun: #RoomTest #test04CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 20:07:09'!
PASSED!

!testRun: #RoomTest #test05CannotMovePlayableCharacterForwardOutsideRoom stamp: 'EMI 12/10/2020 20:07:09'!
PASSED!

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 20:07:09'!
PASSED!

!testRun: #RoomTest #test07CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 20:07:09'!
PASSED!

!testRun: #RoomTest #test08CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 20:07:09'!
PASSED!

!testRun: #RoomTest #test09CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 20:07:09'!
PASSED!

!testRun: #RoomTest #test10CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 20:07:09'!
PASSED!
!RoomTest methodsFor: 'aux' stamp: 'EMI 12/10/2020 20:07:57'!
defaultPlayableCharacter
	^PlayableCharacter named: 'Guybrush' using: self defaultBackpack at: 1@1 heading: #North.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:07:57' prior: 50875107!
test06CannotMovePlayableCharacterBackwardsOutsideRoom
	| room player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayer: player.
	
	self should: [player moveBackward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayableCharacterOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:07:57' prior: 50874539!
test04CanMovePlayableCharacterToEmptyPosition
	| room player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayer: player.
	player moveForward.
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@2).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:07:57' prior: 50874910!
test10CannotMovePlayableCharacterToAOcuppiedPosition
	| room player stageObject|
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayer: player.
	
	stageObject _ self defaultNonPortableObject.
	room addStageObject: stageObject at: 1@2.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter movingPlayableCharacterCausesOverlappingWithStageObjectMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:07:57' prior: 50874866!
test09CannotAddPlayableCharacterOverlappingAStageObject
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayableCharacterToAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isPlayerAt: 1@1).
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:07:57' prior: 50874216!
test02CanAddAPlayableCharacterToARoom
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayer: player.
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:07:57' prior: 50875012!
test05CannotMovePlayableCharacterForwardOutsideRoom
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	
	room addPlayer: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayableCharacterOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !

!methodRemoval: RoomTest #defaultPlayer stamp: 'EMI 12/10/2020 20:07:57'!
defaultPlayer
	^PlayableCharacter named: 'Guybrush' using: self defaultBackpack at: 1@1 heading: #North.!
!RoomTest methodsFor: 'aux' stamp: 'EMI 12/10/2020 20:08:23'!
invalidPositionPlayableCharacter
	^PlayableCharacter named: 'Guybrush' using: self defaultBackpack at: 0@0 heading: #North.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:08:23' prior: 50874236!
test03CannotAddPlayableCharacterOutsideRoom
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self invalidPositionPlayableCharacter to: room .
	
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayableCharacterWithInvalidPositionMessage].
	
	self assert: room isEmpty.! !

!methodRemoval: RoomTest #invalidPositionPlayer stamp: 'EMI 12/10/2020 20:08:23'!
invalidPositionPlayer
	^PlayableCharacter named: 'Guybrush' using: self defaultBackpack at: 0@0 heading: #North.!
!RoomTest methodsFor: 'aux' stamp: 'EMI 12/10/2020 20:08:30' prior: 50875280!
invalidPositionPlayableCharacter
	^PlayableCharacter named: 'Largo' using: self defaultBackpack at: 0@0 heading: #North.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:09:25'!
test11CannotAddStageObjectOverlappingAPlayableCharacter
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	self should: [room addPlayer: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayableCharacterToAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isPlayerAt: 1@1).
! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:10:03' prior: 50875315!
test11CannotAddStageObjectOverlappingAPlayableCharacter
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayer: player.
	
	stageObject _ self defaultPointsPortableObject.

	self should: [room addStageObject: stageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isPlayerAt: 1@1).
! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:10:13' prior: 50875337!
test11CannotAddStageObjectOverlappingAPlayableCharacter
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayer: player.
	
	stageObject _ self defaultPointsPortableObject.

	self should: [room addStageObject: stageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self deny: (room isStageObject: stageObject at: 1@1).
	self assert: (room isPlayerAt: 1@1).
! !

!testRun: #RoomTest #test11CannotAddStageObjectOverlappingAPlayableCharacter stamp: 'EMI 12/10/2020 20:10:17'!
FAILURE!
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 20:11:16' prior: 50873261!
addStageObject: aStageObject at: aPosition
	((self stageObjectsAt: aPosition) isEmpty) ifFalse: [self signalCannotAddObjectInAlreadyOccupiedPosition].
	(self isPlayerAt: aPosition ) ifTrue: [self signalCannotAddObjectInAlreadyOccupiedPosition].
	stageObjects add: (Array with: aPosition with: aStageObject).! !

!testRun: #RoomTest #test01RoomsCanBeEmpty stamp: 'EMI 12/10/2020 20:11:19'!
PASSED!

!testRun: #RoomTest #test02CanAddAPlayableCharacterToARoom stamp: 'EMI 12/10/2020 20:11:19'!
PASSED!

!testRun: #RoomTest #test03CannotAddPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 20:11:19'!
PASSED!

!testRun: #RoomTest #test04CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 20:11:19'!
PASSED!

!testRun: #RoomTest #test05CannotMovePlayableCharacterForwardOutsideRoom stamp: 'EMI 12/10/2020 20:11:19'!
PASSED!

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 20:11:19'!
PASSED!

!testRun: #RoomTest #test07CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 20:11:19'!
PASSED!

!testRun: #RoomTest #test08CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 20:11:19'!
PASSED!

!testRun: #RoomTest #test09CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 20:11:19'!
PASSED!

!testRun: #RoomTest #test10CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 20:11:19'!
PASSED!

!testRun: #RoomTest #test11CannotAddStageObjectOverlappingAPlayableCharacter stamp: 'EMI 12/10/2020 20:11:19'!
PASSED!
!Room class methodsFor: 'error messages' stamp: 'EMI 12/10/2020 20:12:08'!
cannotAddStageObjectInAlreadyOccupiedPositionMessage
	^'Cannot add object in already occupied position.'.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:12:08' prior: 50875359!
test11CannotAddStageObjectOverlappingAPlayableCharacter
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayer: player.
	
	stageObject _ self defaultPointsPortableObject.

	self should: [room addStageObject: stageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddStageObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self deny: (room isStageObject: stageObject at: 1@1).
	self assert: (room isPlayerAt: 1@1).
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:12:08' prior: 50874820!
test08CannotAdd2OverlappingStageObjectAtSamePosition
	| room stageObject invalidStageObject |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	invalidStageObject _ self defaultNoPointsPortableObject.
	self should: [room addStageObject: invalidStageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddStageObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isStageObject: invalidStageObject at: 1@1).! !
!Room methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:12:08' prior: 50872834!
signalCannotAddObjectInAlreadyOccupiedPosition
	^Error signal: self class cannotAddStageObjectInAlreadyOccupiedPositionMessage.! !

!methodRemoval: Room class #cannotAddObjectInAlreadyOccupiedPositionMessage stamp: 'EMI 12/10/2020 20:12:08'!
cannotAddObjectInAlreadyOccupiedPositionMessage
	^'Cannot add object in already occupied position.'.!
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:12:48'!
test12CannotAddStageObjectOutsideRoom
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayer: player.
	
	stageObject _ self defaultPointsPortableObject.

	self should: [room addStageObject: stageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddStageObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self deny: (room isStageObject: stageObject at: 1@1).
	self assert: (room isPlayerAt: 1@1).
! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:13:18' prior: 50875499!
test12CannotAddStageObjectOutsideRoom
	| room stageObject |
	room _ Room width: 2 height: 2.

	stageObject _ self defaultPointsPortableObject.

	self should: [room addStageObject: stageObject at: 1@0.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddStageObjectToInvalidPosition].
	
	self assert: room isEmpty.
! !

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 20:13:27'!
FAILURE!
!Room class methodsFor: 'error messages' stamp: 'EMI 12/10/2020 20:14:02'!
cannotAddStageObjectToInvalidPositionMessage
	^'Cannot add StageObject to invalid position'.! !
!RoomTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:14:13' prior: 50875520!
test12CannotAddStageObjectOutsideRoom
	| room stageObject |
	room _ Room width: 2 height: 2.

	stageObject _ self defaultPointsPortableObject.

	self should: [room addStageObject: stageObject at: 1@0.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddStageObjectToInvalidPositionMessage].
	
	self assert: room isEmpty.
! !

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 20:14:15'!
FAILURE!
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 20:15:59' prior: 50875384!
addStageObject: aStageObject at: aPosition
	((aPosition x between: 1 and: width) and: [aPosition y between: 1 and: height]) ifFalse: [^self signalCannotAddStageObjectToInvalidPosition].
	((self stageObjectsAt: aPosition) isEmpty) ifFalse: [self signalCannotAddObjectInAlreadyOccupiedPosition].
	(self isPlayerAt: aPosition ) ifTrue: [self signalCannotAddObjectInAlreadyOccupiedPosition].
	stageObjects add: (Array with: aPosition with: aStageObject).! !

!testRun: #RoomTest #test01RoomsCanBeEmpty stamp: 'EMI 12/10/2020 20:16:02'!
PASSED!

!testRun: #RoomTest #test02CanAddAPlayableCharacterToARoom stamp: 'EMI 12/10/2020 20:16:02'!
PASSED!

!testRun: #RoomTest #test03CannotAddPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 20:16:02'!
PASSED!

!testRun: #RoomTest #test04CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 20:16:02'!
PASSED!

!testRun: #RoomTest #test05CannotMovePlayableCharacterForwardOutsideRoom stamp: 'EMI 12/10/2020 20:16:02'!
PASSED!

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 20:16:02'!
PASSED!

!testRun: #RoomTest #test07CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 20:16:02'!
PASSED!

!testRun: #RoomTest #test08CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 20:16:02'!
PASSED!

!testRun: #RoomTest #test09CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 20:16:02'!
PASSED!

!testRun: #RoomTest #test10CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 20:16:02'!
PASSED!

!testRun: #RoomTest #test11CannotAddStageObjectOverlappingAPlayableCharacter stamp: 'EMI 12/10/2020 20:16:02'!
PASSED!

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 20:16:02'!
FAILURE!

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 20:16:02'!
FAILURE!

!testRun: #RoomTest #test01RoomsCanBeEmpty stamp: 'EMI 12/10/2020 20:16:06'!
PASSED!

!testRun: #RoomTest #test02CanAddAPlayableCharacterToARoom stamp: 'EMI 12/10/2020 20:16:06'!
PASSED!

!testRun: #RoomTest #test03CannotAddPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 20:16:06'!
PASSED!

!testRun: #RoomTest #test04CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 20:16:06'!
PASSED!

!testRun: #RoomTest #test05CannotMovePlayableCharacterForwardOutsideRoom stamp: 'EMI 12/10/2020 20:16:06'!
PASSED!

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 20:16:06'!
PASSED!

!testRun: #RoomTest #test07CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 20:16:06'!
PASSED!

!testRun: #RoomTest #test08CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 20:16:06'!
PASSED!

!testRun: #RoomTest #test09CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 20:16:06'!
PASSED!

!testRun: #RoomTest #test10CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 20:16:06'!
PASSED!

!testRun: #RoomTest #test11CannotAddStageObjectOverlappingAPlayableCharacter stamp: 'EMI 12/10/2020 20:16:06'!
PASSED!

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 20:16:06'!
FAILURE!

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 20:16:06'!
FAILURE!
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 20:16:22' prior: 50875561!
addStageObject: aStageObject at: aPosition
	((aPosition x between: 1 and: width) and: [aPosition y between: 1 and: height]) ifFalse: [self signalCannotAddStageObjectToInvalidPosition].
	((self stageObjectsAt: aPosition) isEmpty) ifFalse: [self signalCannotAddObjectInAlreadyOccupiedPosition].
	(self isPlayerAt: aPosition ) ifTrue: [self signalCannotAddObjectInAlreadyOccupiedPosition].
	stageObjects add: (Array with: aPosition with: aStageObject).! !

!testRun: #RoomTest #test01RoomsCanBeEmpty stamp: 'EMI 12/10/2020 20:16:25'!
PASSED!

!testRun: #RoomTest #test02CanAddAPlayableCharacterToARoom stamp: 'EMI 12/10/2020 20:16:25'!
PASSED!

!testRun: #RoomTest #test03CannotAddPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 20:16:25'!
PASSED!

!testRun: #RoomTest #test04CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 20:16:25'!
PASSED!

!testRun: #RoomTest #test05CannotMovePlayableCharacterForwardOutsideRoom stamp: 'EMI 12/10/2020 20:16:25'!
PASSED!

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 20:16:25'!
PASSED!

!testRun: #RoomTest #test07CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 20:16:25'!
PASSED!

!testRun: #RoomTest #test08CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 20:16:25'!
PASSED!

!testRun: #RoomTest #test09CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 20:16:25'!
PASSED!

!testRun: #RoomTest #test10CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 20:16:25'!
PASSED!

!testRun: #RoomTest #test11CannotAddStageObjectOverlappingAPlayableCharacter stamp: 'EMI 12/10/2020 20:16:25'!
PASSED!

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 20:16:25'!
FAILURE!

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 20:16:25'!
FAILURE!
!Room methodsFor: 'nil' stamp: 'EMI 12/10/2020 20:16:59'!
signalCannotAddStageObjectToInvalidPosition
	^Error signal: self class cannotAddStageObjectToInvalidPositionMessage.! !

!testRun: #RoomTest #test01RoomsCanBeEmpty stamp: 'EMI 12/10/2020 20:16:59'!
PASSED!

!testRun: #RoomTest #test02CanAddAPlayableCharacterToARoom stamp: 'EMI 12/10/2020 20:16:59'!
PASSED!

!testRun: #RoomTest #test03CannotAddPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 20:16:59'!
PASSED!

!testRun: #RoomTest #test04CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 20:16:59'!
PASSED!

!testRun: #RoomTest #test05CannotMovePlayableCharacterForwardOutsideRoom stamp: 'EMI 12/10/2020 20:16:59'!
PASSED!

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 20:16:59'!
PASSED!

!testRun: #RoomTest #test07CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 20:16:59'!
PASSED!

!testRun: #RoomTest #test08CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 20:16:59'!
PASSED!

!testRun: #RoomTest #test09CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 20:16:59'!
PASSED!

!testRun: #RoomTest #test10CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 20:16:59'!
PASSED!

!testRun: #RoomTest #test11CannotAddStageObjectOverlappingAPlayableCharacter stamp: 'EMI 12/10/2020 20:16:59'!
PASSED!

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 20:16:59'!
PASSED!

!testRun: #RoomTest #test01RoomsCanBeEmpty stamp: 'EMI 12/10/2020 20:17:06'!
PASSED!

!testRun: #RoomTest #test02CanAddAPlayableCharacterToARoom stamp: 'EMI 12/10/2020 20:17:06'!
PASSED!

!testRun: #RoomTest #test03CannotAddPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 20:17:06'!
PASSED!

!testRun: #RoomTest #test04CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 20:17:06'!
PASSED!

!testRun: #RoomTest #test05CannotMovePlayableCharacterForwardOutsideRoom stamp: 'EMI 12/10/2020 20:17:06'!
PASSED!

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 20:17:06'!
PASSED!

!testRun: #RoomTest #test07CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 20:17:06'!
PASSED!

!testRun: #RoomTest #test08CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 20:17:06'!
PASSED!

!testRun: #RoomTest #test09CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 20:17:06'!
PASSED!

!testRun: #RoomTest #test10CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 20:17:06'!
PASSED!

!testRun: #RoomTest #test11CannotAddStageObjectOverlappingAPlayableCharacter stamp: 'EMI 12/10/2020 20:17:06'!
PASSED!

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 20:17:06'!
PASSED!

----SNAPSHOT----(10 December 2020 20:18:50) CuisUniversity-4384.image priorSource: 17385665!
!BoundedPlayableCharacter methodsFor: 'moving' stamp: 'EMI 12/10/2020 20:19:52' prior: 50874527!
moveBackward
	player moveBackward.
	(room isInsideRoom: player) ifFalse: 
	[
		player moveForward.
		self signalCannotMovePlayerOutsideRoom.
	].
	(room isOverlapping: player) ifTrue: [
		player moveForward.
		self signalMovingPlayableCharacterCausesOverlapping .
	].! !
!BoundedPlayableCharacter methodsFor: 'moving' stamp: 'EMI 12/10/2020 20:20:09' prior: 50873943!
moveForward
	player moveForward.
	(room isInsideRoom: player) ifFalse: 
	[
		player moveBackward.
		self signalCannotMovePlayerOutsideRoom.
	].
	(room isOverlapping: player) ifTrue: [
		player moveBackward.
		self signalMovingPlayableCharacterCausesOverlapping .
	].
	! !
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 20:20:41'!
isOverlapping: aPlayableCharacter

	^ (self stageObjectsOverlappingWith: aPlayableCharacter) isEmpty! !
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 20:20:41' prior: 50873606!
addPlayer: aPlayableCharacter
	(aPlayableCharacter isWithinRoomWithWidth: width andHeight: height) ifFalse: [^self signalCannotAddPlayerWithInvalidPosition.].
	(self isOverlapping: aPlayableCharacter) ifFalse: [^ self signalCannotAddPlayerToAlreadyOccupiedPosition].
	player _ aPlayableCharacter.! !
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 20:20:50' prior: 50875849!
addPlayer: aPlayableCharacter
	(aPlayableCharacter isWithinRoomWithWidth: width andHeight: height) ifFalse: [^self signalCannotAddPlayerWithInvalidPosition.].
	(self isOverlapping: aPlayableCharacter) ifTrue: [^ self signalCannotAddPlayerToAlreadyOccupiedPosition].
	player _ aPlayableCharacter.! !
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 20:21:35' prior: 50875843!
isOverlapping: aPlayableCharacter

	^ (self stageObjectsOverlappingWith: aPlayableCharacter) isEmpty not! !

!testRun: #RoomTest #test01RoomsCanBeEmpty stamp: 'EMI 12/10/2020 20:21:37'!
PASSED!

!testRun: #RoomTest #test02CanAddAPlayableCharacterToARoom stamp: 'EMI 12/10/2020 20:21:37'!
PASSED!

!testRun: #RoomTest #test03CannotAddPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 20:21:37'!
PASSED!

!testRun: #RoomTest #test04CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 20:21:37'!
PASSED!

!testRun: #RoomTest #test05CannotMovePlayableCharacterForwardOutsideRoom stamp: 'EMI 12/10/2020 20:21:37'!
PASSED!

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 20:21:37'!
PASSED!

!testRun: #RoomTest #test07CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 20:21:37'!
PASSED!

!testRun: #RoomTest #test08CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 20:21:37'!
PASSED!

!testRun: #RoomTest #test09CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 20:21:37'!
PASSED!

!testRun: #RoomTest #test10CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 20:21:37'!
PASSED!

!testRun: #RoomTest #test11CannotAddStageObjectOverlappingAPlayableCharacter stamp: 'EMI 12/10/2020 20:21:37'!
PASSED!

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 20:21:37'!
PASSED!
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 20:22:00'!
isOverlappingWithStageObjects: aPlayableCharacter

	^ (self stageObjectsOverlappingWith: aPlayableCharacter) isEmpty not! !
!BoundedPlayableCharacter methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:22:00' prior: 50875832!
moveForward
	player moveForward.
	(room isInsideRoom: player) ifFalse: 
	[
		player moveBackward.
		self signalCannotMovePlayerOutsideRoom.
	].
	(room isOverlappingWithStageObjects: player) ifTrue: [
		player moveBackward.
		self signalMovingPlayableCharacterCausesOverlapping .
	].
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:22:00' prior: 50875861!
addPlayer: aPlayableCharacter
	(aPlayableCharacter isWithinRoomWithWidth: width andHeight: height) ifFalse: [^self signalCannotAddPlayerWithInvalidPosition.].
	(self isOverlappingWithStageObjects: aPlayableCharacter) ifTrue: [^ self signalCannotAddPlayerToAlreadyOccupiedPosition].
	player _ aPlayableCharacter.! !
!BoundedPlayableCharacter methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:22:00' prior: 50875820!
moveBackward
	player moveBackward.
	(room isInsideRoom: player) ifFalse: 
	[
		player moveForward.
		self signalCannotMovePlayerOutsideRoom.
	].
	(room isOverlappingWithStageObjects: player) ifTrue: [
		player moveForward.
		self signalMovingPlayableCharacterCausesOverlapping .
	].! !

!methodRemoval: Room #isOverlapping: stamp: 'EMI 12/10/2020 20:22:00'!
isOverlapping: aPlayableCharacter

	^ (self stageObjectsOverlappingWith: aPlayableCharacter) isEmpty not!

----SNAPSHOT----(10 December 2020 20:22:03) CuisUniversity-4384.image priorSource: 17413301!

TestCase subclass: #NonPortableObjectTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObjectTest category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 20:22:38'!
TestCase subclass: #NonPortableObjectTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObjectTest methodsFor: 'nil' stamp: 'EMI 12/10/2020 20:23:31'!
test01
	| nPortableObject |
	
	nPortableObject _ NonPortableObject new.! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:25:03' prior: 50875987!
test01
	| nPortableObject |
	
	nPortableObject _ NonPortableObject new.
	self assert: nPortableObject isEmpty.! !

!testRun: #NonPortableObjectTest #test01 stamp: 'EMI 12/10/2020 20:25:03'!
ERROR!
!NonPortableObject methodsFor: 'testing' stamp: 'EMI 12/10/2020 20:25:13'!
isEmpty
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'testing' stamp: 'EMI 12/10/2020 20:25:18' prior: 50876002!
isEmpty
	^true.! !

!testRun: #NonPortableObjectTest #test01 stamp: 'EMI 12/10/2020 20:25:21'!
PASSED!

!testRun: #NonPortableObjectTest #test01 stamp: 'EMI 12/10/2020 20:25:21'!
PASSED!
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:26:43'!
test02
	| nPortableObject nPortableObject2 |
	
	nPortableObject _ NonPortableObject new.
	nPortableObject2 _ NonPortableObject new.
	
	nPortableObject add: nPortableObject2.
	
	self assert: nPortableObject2 isEmpty.
	self deny: nPortableObject isEmpty.! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:28:08' prior: 50875993!
test01
	| nPortableObject |
	
	nPortableObject _ NonPortableObject named: 'Mesa'.
	self assert: nPortableObject isEmpty.! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:28:37' prior: 50876016!
test02
	| nPortableObject nPortableObject2 |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	nPortableObject2 _ NonPortableObject named: 'Cajon'.
	
	nPortableObject add: nPortableObject2.
	
	self assert: nPortableObject2 isEmpty.
	self deny: nPortableObject isEmpty.! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:30:56'!
test03
	| nPortableObject portableObject |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	nPortableObject add: portableObject.
	
	self deny: nPortableObject isEmpty.! !

!testRun: #NonPortableObjectTest #test03 stamp: 'EMI 12/10/2020 20:31:20'!
ERROR!

!testRun: #NonPortableObjectTest #test03 stamp: 'EMI 12/10/2020 20:31:20'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'EMI 12/10/2020 20:31:27'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'EMI 12/10/2020 20:31:35' prior: 50876064!
named: aString 
	^self new initializeNamed: aString ! !

!testRun: #NonPortableObjectTest #test03 stamp: 'EMI 12/10/2020 20:31:36'!
ERROR!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 20:31:48'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'string'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'EMI 12/10/2020 20:31:48'!
initializeNamed: aString 
	self shouldBeImplemented.
	string := aString.! !
!NonPortableObject methodsFor: 'initialization' stamp: 'EMI 12/10/2020 20:31:57' prior: 50876089!
initializeNamed: aString 
	string := aString.! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 20:32:04'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 20:32:04' prior: 50876095!
initializeNamed: aString 
	name := aString.! !

!testRun: #NonPortableObjectTest #test03 stamp: 'EMI 12/10/2020 20:32:06'!
ERROR!
!NonPortableObject methodsFor: 'adding' stamp: 'EMI 12/10/2020 20:32:17'!
add: aNoPointsPortableObject 
	self shouldBeImplemented.! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 20:33:03'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name containedStageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'adding' stamp: 'EMI 12/10/2020 20:33:01' prior: 50876115!
add: aStageObject
	containedStageObjects add: aStageObject.! !

!testRun: #NonPortableObjectTest #test03 stamp: 'EMI 12/10/2020 20:33:04'!
ERROR!
!NonPortableObject methodsFor: 'initialization' stamp: 'EMI 12/10/2020 20:33:34' prior: 50876108!
initializeNamed: aString 
	name := aString.
	containedStageObjects _ OrderedCollection new.! !

!testRun: #NonPortableObjectTest #test01 stamp: 'EMI 12/10/2020 20:33:39'!
PASSED!

!testRun: #NonPortableObjectTest #test02 stamp: 'EMI 12/10/2020 20:33:39'!
FAILURE!

!testRun: #NonPortableObjectTest #test03 stamp: 'EMI 12/10/2020 20:33:39'!
FAILURE!

!testRun: #NonPortableObjectTest #test02 stamp: 'EMI 12/10/2020 20:33:41'!
FAILURE!
!NonPortableObject methodsFor: 'testing' stamp: 'EMI 12/10/2020 20:34:01' prior: 50876007!
isEmpty
	^containedStageObjects size.! !
!NonPortableObject methodsFor: 'testing' stamp: 'EMI 12/10/2020 20:34:07' prior: 50876154!
isEmpty
	^containedStageObjects isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:39:14'!
test04
	| nPortableObject portableObject |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	nPortableObject add: portableObject.
	
	self deny: nPortableObject isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:40:22' prior: 50876163!
test04
	| nPortableObject nPortableObjectChild portableObject |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	nPortableObjectChild _ NonPortableObject named: 'Cajon'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	nPortableObjectChild add: portableObject.
	nPortableObject add: nPortableObjectChild.
	
	self deny: nPortableObject isEmpty.
	self deny: nPortableObjectChild isEmpty.! !

!testRun: #NonPortableObjectTest #test04 stamp: 'EMI 12/10/2020 20:40:26'!
PASSED!

!testRun: #NonPortableObjectTest #test01 stamp: 'EMI 12/10/2020 20:40:26'!
PASSED!

!testRun: #NonPortableObjectTest #test02 stamp: 'EMI 12/10/2020 20:40:26'!
PASSED!

!testRun: #NonPortableObjectTest #test03 stamp: 'EMI 12/10/2020 20:40:26'!
PASSED!

!testRun: #NonPortableObjectTest #test04 stamp: 'EMI 12/10/2020 20:40:26'!
PASSED!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:40:53'!
test01CanCreateEmptyNonPortableObjects
	| nPortableObject |
	
	nPortableObject _ NonPortableObject named: 'Mesa'.
	self assert: nPortableObject isEmpty.! !

!methodRemoval: NonPortableObjectTest #test01 stamp: 'EMI 12/10/2020 20:40:53'!
test01
	| nPortableObject |
	
	nPortableObject _ NonPortableObject named: 'Mesa'.
	self assert: nPortableObject isEmpty.!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:41:29'!
test02CanAddOneNonPortableObjectToAnother
	| nPortableObject nPortableObject2 |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	nPortableObject2 _ NonPortableObject named: 'Cajon'.
	
	nPortableObject add: nPortableObject2.
	
	self assert: nPortableObject2 isEmpty.
	self deny: nPortableObject isEmpty.! !

!methodRemoval: NonPortableObjectTest #test02 stamp: 'EMI 12/10/2020 20:41:29'!
test02
	| nPortableObject nPortableObject2 |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	nPortableObject2 _ NonPortableObject named: 'Cajon'.
	
	nPortableObject add: nPortableObject2.
	
	self assert: nPortableObject2 isEmpty.
	self deny: nPortableObject isEmpty.!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:42:18'!
test03CanAddMoreThanOneNonPortableObjectToAnother
	| nPortableObject nPortableObject2 nPortableObject3 |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	nPortableObject2 _ NonPortableObject named: 'Cajon'.
	nPortableObject3 _ NonPortableObject named: 'Cajon'.
	
	nPortableObject add: nPortableObject2.
	nPortableObject add: nPortableObject3.
	
	self assert: nPortableObject2 isEmpty.
	self assert: nPortableObject3 isEmpty.
	self deny: nPortableObject isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:42:43'!
test02CanAddOneNonPortableObjectToAnotherNonPortableObject
	| nPortableObject nPortableObject2 |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	nPortableObject2 _ NonPortableObject named: 'Cajon'.
	
	nPortableObject add: nPortableObject2.
	
	self assert: nPortableObject2 isEmpty.
	self deny: nPortableObject isEmpty.! !

!methodRemoval: NonPortableObjectTest #test02CanAddOneNonPortableObjectToAnother stamp: 'EMI 12/10/2020 20:42:43'!
test02CanAddOneNonPortableObjectToAnother
	| nPortableObject nPortableObject2 |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	nPortableObject2 _ NonPortableObject named: 'Cajon'.
	
	nPortableObject add: nPortableObject2.
	
	self assert: nPortableObject2 isEmpty.
	self deny: nPortableObject isEmpty.!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:42:56'!
test03CanAddMoreThanOneNonPortableObjectToAnotherNonPortableObject
	| nPortableObject nPortableObject2 nPortableObject3 |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	nPortableObject2 _ NonPortableObject named: 'Cajon'.
	nPortableObject3 _ NonPortableObject named: 'Cajon'.
	
	nPortableObject add: nPortableObject2.
	nPortableObject add: nPortableObject3.
	
	self assert: nPortableObject2 isEmpty.
	self assert: nPortableObject3 isEmpty.
	self deny: nPortableObject isEmpty.! !

!methodRemoval: NonPortableObjectTest #test03CanAddMoreThanOneNonPortableObjectToAnother stamp: 'EMI 12/10/2020 20:42:56'!
test03CanAddMoreThanOneNonPortableObjectToAnother
	| nPortableObject nPortableObject2 nPortableObject3 |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	nPortableObject2 _ NonPortableObject named: 'Cajon'.
	nPortableObject3 _ NonPortableObject named: 'Cajon'.
	
	nPortableObject add: nPortableObject2.
	nPortableObject add: nPortableObject3.
	
	self assert: nPortableObject2 isEmpty.
	self assert: nPortableObject3 isEmpty.
	self deny: nPortableObject isEmpty.!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:43:25'!
test03CanAddOnePortableObjectToANonPortableObject
	| nPortableObject portableObject |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	nPortableObject add: portableObject.
	
	self deny: nPortableObject isEmpty.! !

!methodRemoval: NonPortableObjectTest #test03 stamp: 'EMI 12/10/2020 20:43:25'!
test03
	| nPortableObject portableObject |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	nPortableObject add: portableObject.
	
	self deny: nPortableObject isEmpty.!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:43:38'!
test04CanAddOnePortableObjectToANonPortableObject
	| nPortableObject portableObject |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	nPortableObject add: portableObject.
	
	self deny: nPortableObject isEmpty.! !

!methodRemoval: NonPortableObjectTest #test03CanAddOnePortableObjectToANonPortableObject stamp: 'EMI 12/10/2020 20:43:38'!
test03CanAddOnePortableObjectToANonPortableObject
	| nPortableObject portableObject |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	nPortableObject add: portableObject.
	
	self deny: nPortableObject isEmpty.!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:43:51'!
test05CanAddMoreThanOnePortableObjectToANonPortableObject
	| nPortableObject portableObject |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	nPortableObject add: portableObject.
	
	self deny: nPortableObject isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:44:30' prior: 50876370!
test05CanAddMoreThanOnePortableObjectToANonPortableObject
	| nPortableObject portableObject1 portableObject2|
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	portableObject1 _ NoPointsPortableObject named: 'Llave' weighing: 1.
	portableObject2 _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	nPortableObject add: portableObject1.
	nPortableObject add: portableObject2.
	
	self deny: nPortableObject isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:44:34' prior: 50876383!
test05CanAddMoreThanOnePortableObjectToANonPortableObject
	| nPortableObject portableObject1 portableObject2|
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	portableObject1 _ NoPointsPortableObject named: 'Llave' weighing: 1.
	portableObject2 _ NoPointsPortableObject named: 'Linterna' weighing: 1.
	
	nPortableObject add: portableObject1.
	nPortableObject add: portableObject2.
	
	self deny: nPortableObject isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:45:46'!
test06CanCreateTreeOfPortableObjects
	| nPortableObject nPortableObjectChild portableObject |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	nPortableObjectChild _ NonPortableObject named: 'Cajon'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	nPortableObjectChild add: portableObject.
	nPortableObject add: nPortableObjectChild.
	
	self deny: nPortableObject isEmpty.
	self deny: nPortableObjectChild isEmpty.! !

!methodRemoval: NonPortableObjectTest #test04 stamp: 'EMI 12/10/2020 20:45:46'!
test04
	| nPortableObject nPortableObjectChild portableObject |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	nPortableObjectChild _ NonPortableObject named: 'Cajon'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	nPortableObjectChild add: portableObject.
	nPortableObject add: nPortableObjectChild.
	
	self deny: nPortableObject isEmpty.
	self deny: nPortableObjectChild isEmpty.!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:45:57'!
test06CanCreateTreeOfNonPortableObjects
	| nPortableObject nPortableObjectChild portableObject |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	nPortableObjectChild _ NonPortableObject named: 'Cajon'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	nPortableObjectChild add: portableObject.
	nPortableObject add: nPortableObjectChild.
	
	self deny: nPortableObject isEmpty.
	self deny: nPortableObjectChild isEmpty.! !

!methodRemoval: NonPortableObjectTest #test06CanCreateTreeOfPortableObjects stamp: 'EMI 12/10/2020 20:45:57'!
test06CanCreateTreeOfPortableObjects
	| nPortableObject nPortableObjectChild portableObject |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	nPortableObjectChild _ NonPortableObject named: 'Cajon'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	nPortableObjectChild add: portableObject.
	nPortableObject add: nPortableObjectChild.
	
	self deny: nPortableObject isEmpty.
	self deny: nPortableObjectChild isEmpty.!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:47:01' prior: 50876449!
test06CanCreateTreeOfNonPortableObjects
	| nPortableObject nPortableObjectChildLeft nPortableObjectChildRight portableObject |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	nPortableObjectChildLeft _ NonPortableObject named: 'Cajon'.
	nPortableObjectChildRight _ NonPortableObject named: 'Cajon vacio'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	nPortableObjectChildLeft add: portableObject.
	nPortableObject add: nPortableObjectChildLeft.
	nPortableObject add: nPortableObjectChildRight.
	
	self deny: nPortableObject isEmpty.
	self deny: nPortableObjectChildLeft isEmpty.
	self deny: nPortableObjectChildRight isEmpty.! !

!testRun: #NonPortableObjectTest #test06CanCreateTreeOfNonPortableObjects stamp: 'EMI 12/10/2020 20:47:02'!
FAILURE!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:47:09' prior: 50876484!
test06CanCreateTreeOfNonPortableObjects
	| nPortableObject nPortableObjectChildLeft nPortableObjectChildRight portableObject |
	
	nPortableObject _ NonPortableObject named: 'Armario'.
	nPortableObjectChildLeft _ NonPortableObject named: 'Cajon'.
	nPortableObjectChildRight _ NonPortableObject named: 'Cajon vacio'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	nPortableObjectChildLeft add: portableObject.
	nPortableObject add: nPortableObjectChildLeft.
	nPortableObject add: nPortableObjectChildRight.
	
	self deny: nPortableObject isEmpty.
	self deny: nPortableObjectChildLeft isEmpty.
	self assert: nPortableObjectChildRight isEmpty.! !

!testRun: #NonPortableObjectTest #test06CanCreateTreeOfNonPortableObjects stamp: 'EMI 12/10/2020 20:47:10'!
PASSED!

!testRun: #NonPortableObjectTest #test01CanCreateEmptyNonPortableObjects stamp: 'EMI 12/10/2020 20:47:10'!
PASSED!

!testRun: #NonPortableObjectTest #test02CanAddOneNonPortableObjectToAnotherNonPortableObject stamp: 'EMI 12/10/2020 20:47:10'!
PASSED!

!testRun: #NonPortableObjectTest #test03CanAddMoreThanOneNonPortableObjectToAnotherNonPortableObject stamp: 'EMI 12/10/2020 20:47:10'!
PASSED!

!testRun: #NonPortableObjectTest #test04CanAddOnePortableObjectToANonPortableObject stamp: 'EMI 12/10/2020 20:47:10'!
PASSED!

!testRun: #NonPortableObjectTest #test05CanAddMoreThanOnePortableObjectToANonPortableObject stamp: 'EMI 12/10/2020 20:47:10'!
PASSED!

!testRun: #NonPortableObjectTest #test06CanCreateTreeOfNonPortableObjects stamp: 'EMI 12/10/2020 20:47:10'!
PASSED!
!RoomTest methodsFor: 'aux' stamp: 'EMI 12/10/2020 20:49:37' prior: 50873890!
defaultNonPortableObject

	^ NonPortableObject named: 'Mesa'.! !

!testRun: #RoomTest #test01RoomsCanBeEmpty stamp: 'EMI 12/10/2020 20:49:40'!
PASSED!

!testRun: #RoomTest #test02CanAddAPlayableCharacterToARoom stamp: 'EMI 12/10/2020 20:49:40'!
PASSED!

!testRun: #RoomTest #test03CannotAddPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 20:49:40'!
PASSED!

!testRun: #RoomTest #test04CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 20:49:40'!
PASSED!

!testRun: #RoomTest #test05CannotMovePlayableCharacterForwardOutsideRoom stamp: 'EMI 12/10/2020 20:49:40'!
PASSED!

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 20:49:40'!
PASSED!

!testRun: #RoomTest #test07CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 20:49:40'!
PASSED!

!testRun: #RoomTest #test08CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 20:49:40'!
PASSED!

!testRun: #RoomTest #test09CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 20:49:40'!
PASSED!

!testRun: #RoomTest #test10CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 20:49:40'!
PASSED!

!testRun: #RoomTest #test11CannotAddStageObjectOverlappingAPlayableCharacter stamp: 'EMI 12/10/2020 20:49:40'!
PASSED!

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 20:49:40'!
PASSED!

!testRun: #NonPortableObjectTest #test01CanCreateEmptyNonPortableObjects stamp: 'EMI 12/10/2020 20:49:45'!
PASSED!

!testRun: #NonPortableObjectTest #test02CanAddOneNonPortableObjectToAnotherNonPortableObject stamp: 'EMI 12/10/2020 20:49:45'!
PASSED!

!testRun: #NonPortableObjectTest #test03CanAddMoreThanOneNonPortableObjectToAnotherNonPortableObject stamp: 'EMI 12/10/2020 20:49:45'!
PASSED!

!testRun: #NonPortableObjectTest #test04CanAddOnePortableObjectToANonPortableObject stamp: 'EMI 12/10/2020 20:49:45'!
PASSED!

!testRun: #NonPortableObjectTest #test05CanAddMoreThanOnePortableObjectToANonPortableObject stamp: 'EMI 12/10/2020 20:49:45'!
PASSED!

!testRun: #NonPortableObjectTest #test06CanCreateTreeOfNonPortableObjects stamp: 'EMI 12/10/2020 20:49:45'!
PASSED!
!RoomTest methodsFor: 'tests - adding NonPortableObjects' stamp: 'EMI 12/10/2020 20:52:12'!
test13
	| room |

	room _ Room width: 2 height: 2.
	! !
!RoomTest methodsFor: 'tests - adding NonPortableObjects' stamp: 'EMI 12/10/2020 20:53:38' prior: 50876635!
test13
	| room nPortableObject portableObject |

	room _ Room width: 2 height: 2.
	
	nPortableObject _ NonPortableObject named: 'Caja'.
	portableObject _ NoPointsPortableObject named: 'Juguete' weighing: 5.
	
	nPortableObject add: portableObject.
	! !
!RoomTest methodsFor: 'tests - adding NonPortableObjects' stamp: 'EMI 12/10/2020 20:54:03' prior: 50876641!
test13
	| room nPortableObject portableObject |

	room _ Room width: 2 height: 2.
	
	nPortableObject _ NonPortableObject named: 'Caja'.
	portableObject _ NoPointsPortableObject named: 'Juguete' weighing: 5.
	
	nPortableObject add: portableObject.
	
	room addStageObject: nPortableObject at: portableObject.
	! !
!RoomTest methodsFor: 'tests - adding NonPortableObjects' stamp: 'EMI 12/10/2020 20:54:37' prior: 50876653!
test13
	| room nPortableObject portableObject |

	room _ Room width: 2 height: 2.
	
	nPortableObject _ NonPortableObject named: 'Caja'.
	portableObject _ NoPointsPortableObject named: 'Juguete' weighing: 5.
	
	nPortableObject add: portableObject.
	
	room addStageObject: nPortableObject at: portableObject.
	
	self assert: (room isStageObject: nPortableObject at: 1@1).
	! !
!RoomTest methodsFor: 'tests - adding NonPortableObjects' stamp: 'EMI 12/10/2020 20:54:43'!
test14
	| room nPortableObject portableObject |

	room _ Room width: 2 height: 2.
	
	nPortableObject _ NonPortableObject named: 'Caja'.
	portableObject _ NoPointsPortableObject named: 'Juguete' weighing: 5.
	
	nPortableObject add: portableObject.
	
	room addStageObject: nPortableObject at: portableObject.
	
	self assert: (room isStageObject: nPortableObject at: 1@1).
	! !
!RoomTest methodsFor: 'tests - adding NonPortableObjects' stamp: 'EMI 12/10/2020 20:54:59' prior: 50876682!
test14
	| room cajon portableObject |

	room _ Room width: 2 height: 2.
	
	cajon _ NonPortableObject named: 'Caja'.
	portableObject _ NoPointsPortableObject named: 'Juguete' weighing: 5.
	
	cajon add: portableObject.
	
	room addStageObject: cajon at: portableObject.
	
	self assert: (room isStageObject: cajon at: 1@1).
	! !
!RoomTest methodsFor: 'tests - adding NonPortableObjects' stamp: 'EMI 12/10/2020 20:55:08' prior: 50876698!
test14
	| room cajon juguete |

	room _ Room width: 2 height: 2.
	
	cajon _ NonPortableObject named: 'Caja'.
	juguete _ NoPointsPortableObject named: 'Juguete' weighing: 5.
	
	cajon add: juguete.
	
	room addStageObject: cajon at: juguete.
	
	self assert: (room isStageObject: cajon at: 1@1).
	! !
!RoomTest methodsFor: 'tests - adding NonPortableObjects' stamp: 'EMI 12/10/2020 20:55:16' prior: 50876712!
test14
	| room caja juguete |

	room _ Room width: 2 height: 2.
	
	caja _ NonPortableObject named: 'Caja'.
	juguete _ NoPointsPortableObject named: 'Juguete' weighing: 5.
	
	caja add: juguete.
	
	room addStageObject: caja at: juguete.
	
	self assert: (room isStageObject: caja at: 1@1).
	! !
!RoomTest methodsFor: 'tests - adding NonPortableObjects' stamp: 'EMI 12/10/2020 20:55:41' prior: 50876725!
test14
	| room cajon juguete |

	room _ Room width: 2 height: 2.
	
	cajon _ NonPortableObject named: 'Caja'.
	juguete _ NoPointsPortableObject named: 'Juguete' weighing: 5.
	
	cajon add: juguete.
	
	room addStageObject: cajon at: juguete.
	
	self assert: (room isStageObject: cajon at: 1@1).
	! !
!RoomTest methodsFor: 'tests - adding NonPortableObjects' stamp: 'EMI 12/10/2020 20:56:26' prior: 50876738!
test14
	| room armario cajon juguete |

	room _ Room width: 2 height: 2.
	
	armario _ NonPortableObject named: 'Armario'.
	cajon _ NonPortableObject named: 'Caja'.
	juguete _ NoPointsPortableObject named: 'Juguete' weighing: 5.
	
	cajon add: juguete.
	armario add: cajon.
	
	room addStageObject: armario at: 1@1.
	
	self assert: (room isStageObject: armario at: 1@1).
	! !
!RoomTest methodsFor: 'tests - adding NonPortableObjects' stamp: 'EMI 12/10/2020 20:56:54' prior: 50876667!
test13
	| room caja portableObject |

	room _ Room width: 2 height: 2.
	
	caja _ NonPortableObject named: 'Caja'.
	portableObject _ NoPointsPortableObject named: 'Juguete' weighing: 5.
	
	caja add: portableObject.
	
	room addStageObject: caja at: portableObject.
	
	self assert: (room isStageObject: caja at: 1@1).
	! !
!RoomTest methodsFor: 'tests - adding NonPortableObjects' stamp: 'EMI 12/10/2020 20:57:01' prior: 50876767!
test13
	| room caja juguete |

	room _ Room width: 2 height: 2.
	
	caja _ NonPortableObject named: 'Caja'.
	juguete _ NoPointsPortableObject named: 'Juguete' weighing: 5.
	
	caja add: juguete.
	
	room addStageObject: caja at: juguete.
	
	self assert: (room isStageObject: caja at: 1@1).
	! !
!RoomTest methodsFor: 'tests - adding NonPortableObjects' stamp: 'EMI 12/10/2020 20:57:06' prior: 50876781!
test13
	| room caja juguete |

	room _ Room width: 2 height: 2.
	
	caja _ NonPortableObject named: 'Caja'.
	juguete _ NoPointsPortableObject named: 'Juguete' weighing: 5.
	
	caja add: juguete.
	
	room addStageObject: caja at: 1@1.
	
	self assert: (room isStageObject: caja at: 1@1).
	! !

!testRun: #RoomTest #test01RoomsCanBeEmpty stamp: 'EMI 12/10/2020 20:57:08'!
PASSED!

!testRun: #RoomTest #test02CanAddAPlayableCharacterToARoom stamp: 'EMI 12/10/2020 20:57:08'!
PASSED!

!testRun: #RoomTest #test03CannotAddPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 20:57:08'!
PASSED!

!testRun: #RoomTest #test04CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 20:57:08'!
PASSED!

!testRun: #RoomTest #test05CannotMovePlayableCharacterForwardOutsideRoom stamp: 'EMI 12/10/2020 20:57:08'!
PASSED!

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 20:57:08'!
PASSED!

!testRun: #RoomTest #test07CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 20:57:08'!
PASSED!

!testRun: #RoomTest #test08CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 20:57:08'!
PASSED!

!testRun: #RoomTest #test09CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 20:57:08'!
PASSED!

!testRun: #RoomTest #test10CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 20:57:08'!
PASSED!

!testRun: #RoomTest #test11CannotAddStageObjectOverlappingAPlayableCharacter stamp: 'EMI 12/10/2020 20:57:08'!
PASSED!

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 20:57:08'!
PASSED!

!testRun: #RoomTest #test13 stamp: 'EMI 12/10/2020 20:57:08'!
PASSED!

!testRun: #RoomTest #test14 stamp: 'EMI 12/10/2020 20:57:08'!
PASSED!
!RoomTest methodsFor: 'tests - adding NonPortableObjects' stamp: 'EMI 12/10/2020 20:57:37'!
test13RoomCanAddNonPortableObjectContainingPortableObject
	| room caja juguete |

	room _ Room width: 2 height: 2.
	
	caja _ NonPortableObject named: 'Caja'.
	juguete _ NoPointsPortableObject named: 'Juguete' weighing: 5.
	
	caja add: juguete.
	
	room addStageObject: caja at: 1@1.
	
	self assert: (room isStageObject: caja at: 1@1).
	! !

!methodRemoval: RoomTest #test13 stamp: 'EMI 12/10/2020 20:57:37'!
test13
	| room caja juguete |

	room _ Room width: 2 height: 2.
	
	caja _ NonPortableObject named: 'Caja'.
	juguete _ NoPointsPortableObject named: 'Juguete' weighing: 5.
	
	caja add: juguete.
	
	room addStageObject: caja at: 1@1.
	
	self assert: (room isStageObject: caja at: 1@1).
	!
!RoomTest methodsFor: 'tests - adding NonPortableObjects' stamp: 'EMI 12/10/2020 20:58:26'!
test14RoomCanAddNonPortableObjectWithNonPortableObjectInside
	| room armario cajon juguete |

	room _ Room width: 2 height: 2.
	
	armario _ NonPortableObject named: 'Armario'.
	cajon _ NonPortableObject named: 'Caja'.
	juguete _ NoPointsPortableObject named: 'Juguete' weighing: 5.
	
	cajon add: juguete.
	armario add: cajon.
	
	room addStageObject: armario at: 1@1.
	
	self assert: (room isStageObject: armario at: 1@1).
	! !

!methodRemoval: RoomTest #test14 stamp: 'EMI 12/10/2020 20:58:26'!
test14
	| room armario cajon juguete |

	room _ Room width: 2 height: 2.
	
	armario _ NonPortableObject named: 'Armario'.
	cajon _ NonPortableObject named: 'Caja'.
	juguete _ NoPointsPortableObject named: 'Juguete' weighing: 5.
	
	cajon add: juguete.
	armario add: cajon.
	
	room addStageObject: armario at: 1@1.
	
	self assert: (room isStageObject: armario at: 1@1).
	!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 20:59:55' prior: 50876203!
test01CanCreateEmptyNonPortableObjects
	| mesa |
	
	mesa _ NonPortableObject named: 'Mesa'.
	self assert: mesa isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 21:00:09' prior: 50876259!
test02CanAddOneNonPortableObjectToAnotherNonPortableObject
	| armario nPortableObject2 |
	
	armario _ NonPortableObject named: 'Armario'.
	nPortableObject2 _ NonPortableObject named: 'Cajon'.
	
	armario add: nPortableObject2.
	
	self assert: nPortableObject2 isEmpty.
	self deny: armario isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 21:00:18' prior: 50876914!
test02CanAddOneNonPortableObjectToAnotherNonPortableObject
	| armario cajon |
	
	armario _ NonPortableObject named: 'Armario'.
	cajon _ NonPortableObject named: 'Cajon'.
	
	armario add: cajon.
	
	self assert: cajon isEmpty.
	self deny: armario isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 21:00:36' prior: 50876286!
test03CanAddMoreThanOneNonPortableObjectToAnotherNonPortableObject
	| armario nPortableObject2 nPortableObject3 |
	
	armario _ NonPortableObject named: 'Armario'.
	nPortableObject2 _ NonPortableObject named: 'Cajon'.
	nPortableObject3 _ NonPortableObject named: 'Cajon'.
	
	armario add: nPortableObject2.
	armario add: nPortableObject3.
	
	self assert: nPortableObject2 isEmpty.
	self assert: nPortableObject3 isEmpty.
	self deny: armario isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 21:00:49' prior: 50876938!
test03CanAddMoreThanOneNonPortableObjectToAnotherNonPortableObject
	| armario nPortableObject2 nPortableObject3 |
	
	armario _ NonPortableObject named: 'Armario'.
	nPortableObject2 _ NonPortableObject named: 'Cajon de arriba'.
	nPortableObject3 _ NonPortableObject named: 'Cajon de abajo'.
	
	armario add: nPortableObject2.
	armario add: nPortableObject3.
	
	self assert: nPortableObject2 isEmpty.
	self assert: nPortableObject3 isEmpty.
	self deny: armario isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 21:00:57' prior: 50876955!
test03CanAddMoreThanOneNonPortableObjectToAnotherNonPortableObject
	| armario cajonArriba nPortableObject3 |
	
	armario _ NonPortableObject named: 'Armario'.
	cajonArriba _ NonPortableObject named: 'Cajon de arriba'.
	nPortableObject3 _ NonPortableObject named: 'Cajon de abajo'.
	
	armario add: cajonArriba.
	armario add: nPortableObject3.
	
	self assert: cajonArriba isEmpty.
	self assert: nPortableObject3 isEmpty.
	self deny: armario isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 21:01:05' prior: 50876973!
test03CanAddMoreThanOneNonPortableObjectToAnotherNonPortableObject
	| armario cajonArriba cajonAbajo |
	
	armario _ NonPortableObject named: 'Armario'.
	cajonArriba _ NonPortableObject named: 'Cajon de arriba'.
	cajonAbajo _ NonPortableObject named: 'Cajon de abajo'.
	
	armario add: cajonArriba.
	armario add: cajonAbajo.
	
	self assert: cajonArriba isEmpty.
	self assert: cajonAbajo isEmpty.
	self deny: armario isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 21:01:16' prior: 50876345!
test04CanAddOnePortableObjectToANonPortableObject
	| armario portableObject |
	
	armario _ NonPortableObject named: 'Armario'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	armario add: portableObject.
	
	self deny: armario isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 21:01:36' prior: 50877007!
test04CanAddOnePortableObjectToANonPortableObject
	| armario llave |
	
	armario _ NonPortableObject named: 'Armario'.
	llave _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	armario add: llave.
	
	self deny: armario isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 21:01:50' prior: 50876400!
test05CanAddMoreThanOnePortableObjectToANonPortableObject
	| armario portableObject1 portableObject2|
	
	armario _ NonPortableObject named: 'Armario'.
	portableObject1 _ NoPointsPortableObject named: 'Llave' weighing: 1.
	portableObject2 _ NoPointsPortableObject named: 'Linterna' weighing: 1.
	
	armario add: portableObject1.
	armario add: portableObject2.
	
	self deny: armario isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 21:02:03' prior: 50877030!
test05CanAddMoreThanOnePortableObjectToANonPortableObject
	| armario llave portableObject2|
	
	armario _ NonPortableObject named: 'Armario'.
	llave _ NoPointsPortableObject named: 'Llave' weighing: 1.
	portableObject2 _ NoPointsPortableObject named: 'Linterna' weighing: 1.
	
	armario add: llave.
	armario add: portableObject2.
	
	self deny: armario isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 21:02:16' prior: 50877046!
test05CanAddMoreThanOnePortableObjectToANonPortableObject
	| armario llave linterna|
	
	armario _ NonPortableObject named: 'Armario'.
	llave _ NoPointsPortableObject named: 'Llave' weighing: 1.
	linterna _ NoPointsPortableObject named: 'Linterna' weighing: 1.
	
	armario add: llave.
	armario add: linterna.
	
	self deny: armario isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 21:02:35' prior: 50876512!
test06CanCreateTreeOfNonPortableObjects
	| armario nPortableObjectChildLeft nPortableObjectChildRight portableObject |
	
	armario _ NonPortableObject named: 'Armario'.
	nPortableObjectChildLeft _ NonPortableObject named: 'Cajon'.
	nPortableObjectChildRight _ NonPortableObject named: 'Cajon vacio'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	nPortableObjectChildLeft add: portableObject.
	armario add: nPortableObjectChildLeft.
	armario add: nPortableObjectChildRight.
	
	self deny: armario isEmpty.
	self deny: nPortableObjectChildLeft isEmpty.
	self assert: nPortableObjectChildRight isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 21:02:46' prior: 50877075!
test06CanCreateTreeOfNonPortableObjects
	| armario cajonIzq nPortableObjectChildRight portableObject |
	
	armario _ NonPortableObject named: 'Armario'.
	cajonIzq _ NonPortableObject named: 'Cajon'.
	nPortableObjectChildRight _ NonPortableObject named: 'Cajon vacio'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	cajonIzq add: portableObject.
	armario add: cajonIzq.
	armario add: nPortableObjectChildRight.
	
	self deny: armario isEmpty.
	self deny: cajonIzq isEmpty.
	self assert: nPortableObjectChildRight isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 21:02:55' prior: 50877098!
test06CanCreateTreeOfNonPortableObjects
	| armario cajonIzq cajonDer portableObject |
	
	armario _ NonPortableObject named: 'Armario'.
	cajonIzq _ NonPortableObject named: 'Cajon'.
	cajonDer _ NonPortableObject named: 'Cajon vacio'.
	portableObject _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	cajonIzq add: portableObject.
	armario add: cajonIzq.
	armario add: cajonDer.
	
	self deny: armario isEmpty.
	self deny: cajonIzq isEmpty.
	self assert: cajonDer isEmpty.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'EMI 12/10/2020 21:03:08' prior: 50877118!
test06CanCreateTreeOfNonPortableObjects
	| armario cajonIzq cajonDer llave |
	
	armario _ NonPortableObject named: 'Armario'.
	cajonIzq _ NonPortableObject named: 'Cajon'.
	cajonDer _ NonPortableObject named: 'Cajon vacio'.
	llave _ NoPointsPortableObject named: 'Llave' weighing: 1.
	
	cajonIzq add: llave.
	armario add: cajonIzq.
	armario add: cajonDer.
	
	self deny: armario isEmpty.
	self deny: cajonIzq isEmpty.
	self assert: cajonDer isEmpty.! !
!RoomTest methodsFor: 'tests - take' stamp: 'EMI 12/10/2020 21:04:17'!
test15
	| room |
	room _ Room width: 2 height: 2.! !
!RoomTest methodsFor: 'tests - take' stamp: 'EMI 12/10/2020 21:04:50' prior: 50877153!
test15
	| room player |
	room _ Room width: 2 height: 2.
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.! !
!RoomTest methodsFor: 'tests - take' stamp: 'EMI 12/10/2020 21:05:02' prior: 50877158!
test15
	| room player |
	room _ Room width: 2 height: 2.
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayer: player.! !
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 21:05:15'!
addPlayableCharacter: aPlayableCharacter
	(aPlayableCharacter isWithinRoomWithWidth: width andHeight: height) ifFalse: [^self signalCannotAddPlayerWithInvalidPosition.].
	(self isOverlappingWithStageObjects: aPlayableCharacter) ifTrue: [^ self signalCannotAddPlayerToAlreadyOccupiedPosition].
	player _ aPlayableCharacter.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 21:05:15' prior: 50875441!
test11CannotAddStageObjectOverlappingAPlayableCharacter
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayableCharacter: player.
	
	stageObject _ self defaultPointsPortableObject.

	self should: [room addStageObject: stageObject at: 1@1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddStageObjectInAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self deny: (room isStageObject: stageObject at: 1@1).
	self assert: (room isPlayerAt: 1@1).
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 21:05:15' prior: 50877166!
test15
	| room player |
	room _ Room width: 2 height: 2.
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayableCharacter: player.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 21:05:15' prior: 50875169!
test06CannotMovePlayableCharacterBackwardsOutsideRoom
	| room player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayableCharacter: player.
	
	self should: [player moveBackward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayableCharacterOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 21:05:15' prior: 50875222!
test09CannotAddPlayableCharacterOverlappingAStageObject
	| room stageObject player |
	room _ Room width: 2 height: 2.
	
	stageObject _ self defaultPointsPortableObject.
	room addStageObject: stageObject at: 1@1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	self should: [room addPlayableCharacter: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayableCharacterToAlreadyOccupiedPositionMessage].
	
	self deny: room isEmpty.
	self assert: (room isStageObject: stageObject at: 1@1).
	self deny: (room isPlayerAt: 1@1).
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 21:05:15' prior: 50875245!
test02CanAddAPlayableCharacterToARoom
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayableCharacter: player.
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 21:05:15' prior: 50875200!
test10CannotMovePlayableCharacterToAOcuppiedPosition
	| room player stageObject|
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayableCharacter: player.
	
	stageObject _ self defaultNonPortableObject.
	room addStageObject: stageObject at: 1@2.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter movingPlayableCharacterCausesOverlappingWithStageObjectMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 21:05:15' prior: 50875287!
test03CannotAddPlayableCharacterOutsideRoom
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self invalidPositionPlayableCharacter to: room .
	
	self should: [room addPlayableCharacter: player]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Room cannotAddPlayableCharacterWithInvalidPositionMessage].
	
	self assert: room isEmpty.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 21:05:15' prior: 50875257!
test05CannotMovePlayableCharacterForwardOutsideRoom
	| room player |
	room _ Room width: 1 height: 1.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	
	room addPlayableCharacter: player.
	
	self should: [player moveForward.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: BoundedPlayableCharacter cannotMovePlayableCharacterOutsideRoomMessage].
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@1).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 21:05:15' prior: 50875187!
test04CanMovePlayableCharacterToEmptyPosition
	| room player |
	room _ Room width: 2 height: 2.
	
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayableCharacter: player.
	player moveForward.
	
	self deny: room isEmpty.
	self assert: (room isPlayerAt: 1@2).! !

!methodRemoval: Room #addPlayer: stamp: 'EMI 12/10/2020 21:05:15'!
addPlayer: aPlayableCharacter
	(aPlayableCharacter isWithinRoomWithWidth: width andHeight: height) ifFalse: [^self signalCannotAddPlayerWithInvalidPosition.].
	(self isOverlappingWithStageObjects: aPlayableCharacter) ifTrue: [^ self signalCannotAddPlayerToAlreadyOccupiedPosition].
	player _ aPlayableCharacter.!
!RoomTest methodsFor: 'tests - take' stamp: 'EMI 12/10/2020 21:06:12' prior: 50877211!
test15
	| room player ball |
	room _ Room width: 2 height: 2.
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayableCharacter: player.
	
	ball _ NoPointsPortableObject named: 'Ball' weighing: 1.! !
!RoomTest methodsFor: 'tests - take' stamp: 'EMI 12/10/2020 21:06:30' prior: 50877356!
test15
	| room player ball |
	room _ Room width: 2 height: 2.
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayableCharacter: player.
	
	ball _ NoPointsPortableObject named: 'Ball' weighing: 1.
	room addStageObject: ball at: 1@2.! !
!RoomTest methodsFor: 'tests - take' stamp: 'EMI 12/10/2020 21:07:09' prior: 50877367!
test15
	| room player ball |
	room _ Room width: 2 height: 2.
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayableCharacter: player.
	
	ball _ NoPointsPortableObject named: 'Ball' weighing: 1.
	room addStageObject: ball at: 1@2.
	
	player take.! !
!RoomTest methodsFor: 'tests - take' stamp: 'EMI 12/10/2020 21:07:37' prior: 50877379!
test15
	| room player ball |
	room _ Room width: 2 height: 2.
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayableCharacter: player.
	
	ball _ NoPointsPortableObject named: 'Ball' weighing: 1.
	room addStageObject: ball at: 1@2.
	
	player take.
	
	self deny: room isStageObject: ball at: 1@2.! !
!RoomTest methodsFor: 'tests - take' stamp: 'EMI 12/10/2020 21:07:44' prior: 50877391!
test15
	| room player ball |
	room _ Room width: 2 height: 2.
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayableCharacter: player.
	
	ball _ NoPointsPortableObject named: 'Ball' weighing: 1.
	room addStageObject: ball at: 1@2.
	
	player take.
	
	self deny: (room isStageObject: ball at: 1@2).! !

!testRun: #RoomTest #test15 stamp: 'EMI 12/10/2020 21:07:49'!
ERROR!
!BoundedPlayableCharacter methodsFor: 'taking' stamp: 'EMI 12/10/2020 21:08:01'!
take
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'nil' stamp: 'EMI 12/10/2020 21:13:34'!
hasInFront: aPosition
	^aPosition =1.! !
!PlayableCharacter methodsFor: 'testing' stamp: 'EMI 12/10/2020 21:13:58' prior: 50877425!
hasInFront: aPosition
	^aPosition = (position + heading forwardPoint).! !
!BoundedPlayableCharacter methodsFor: 'taking' stamp: 'EMI 12/10/2020 21:15:01' prior: 50877421!
take! !
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:16:09'!
stageObjectsNextTo: aPlayableCharacter
	^stageObjects select: [:anItem | aPlayableCharacter hasInFront: (anItem at:1)] copy.! !
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:16:26' prior: 50877439!
stageObjectsNextTo: aPlayableCharacter
	^(stageObjects select: [:anItem | aPlayableCharacter hasInFront: (anItem at:1)]) copy.! !
!BoundedPlayableCharacter methodsFor: 'taking' stamp: 'EMI 12/10/2020 21:16:54' prior: 50877436!
take
! !
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:17:33'!
addToBackpackStageObjectsInFrontOf: aPlayableCharacter
	^(stageObjects select: [:anItem | aPlayableCharacter hasInFront: (anItem at:1)]) copy.! !

!methodRemoval: Room #stageObjectsNextTo: stamp: 'EMI 12/10/2020 21:17:33'!
stageObjectsNextTo: aPlayableCharacter
	^(stageObjects select: [:anItem | aPlayableCharacter hasInFront: (anItem at:1)]) copy.!
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:19:01' prior: 50877457!
addToBackpackStageObjectsInFrontOf: aPlayableCharacter
	| inFront |
	inFront _ stageObjects select: [:anItem | aPlayableCharacter hasInFront: (anItem at:1)].
	inFront do: [:anItem | aPlayableCharacter take: (anItem at:2)].! !
!Room methodsFor: 'initialization' stamp: 'EMI 12/10/2020 21:21:33' prior: 50873684!
initializeWidth: aPositiveIntegerWidth height: aPositiveIntegerHeight
	(aPositiveIntegerWidth isInteger and: [aPositiveIntegerWidth positive]) ifFalse: [^self signalInvalidRoomDimensions.].
	(aPositiveIntegerHeight isInteger and: [aPositiveIntegerHeight positive]) ifFalse: [^self signalInvalidRoomDimensions.].

	width := aPositiveIntegerWidth.
	height := aPositiveIntegerHeight.
	player _ NullPlayableCharacter new.
	stageObjects _ OrderedCollection new.! !
!Room methodsFor: 'nil' stamp: 'EMI 12/10/2020 21:22:04'!
signalInvalidRoomDimensions
	^Error signal: self class cannotCreateRoomWithInvalidValuesMessage.! !
!Room class methodsFor: 'nil' stamp: 'EMI 12/10/2020 21:22:18'!
cannotCreateRoomWithInvalidValuesMessage! !
!Room class methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 21:22:45' prior: 50877504!
cannotCreateRoomWithInvalidValuesMessage
	^'Cannot create room with invalid values'.! !

!classDefinition: #AbstactPlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 21:23:24'!
Object subclass: #AbstactPlayableCharacter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 21:23:24'!
AbstactPlayableCharacter subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

AbstactPlayableCharacter subclass: #NullPlayableCharacter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NullPlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 21:23:36'!
AbstactPlayableCharacter subclass: #NullPlayableCharacter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

AbstactPlayableCharacter subclass: #BoundedPlayableCharacter
	instanceVariableNames: 'room player playableCharacter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #BoundedPlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'EMI 12/10/2020 21:23:42'!
AbstactPlayableCharacter subclass: #BoundedPlayableCharacter
	instanceVariableNames: 'room player playableCharacter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:26:07'!
visitStageObjectsInFrontOf: aPlayableCharacter
	| inFront |
	inFront _ stageObjects select: [:anItem | aPlayableCharacter hasInFront: (anItem at:1)].
	inFront do: [:anItem | aPlayableCharacter take: (anItem at:2)].! !

!methodRemoval: Room #addToBackpackStageObjectsInFrontOf: stamp: 'EMI 12/10/2020 21:26:07'!
addToBackpackStageObjectsInFrontOf: aPlayableCharacter
	| inFront |
	inFront _ stageObjects select: [:anItem | aPlayableCharacter hasInFront: (anItem at:1)].
	inFront do: [:anItem | aPlayableCharacter take: (anItem at:2)].!
!Room methodsFor: 'private' stamp: 'EMI 12/10/2020 21:28:04'!
checkIfPositionIsInsideRoom: aPosition
	^(aPosition x between: 1 and: width) and: [aPosition y between: 1 and: height].! !
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 21:28:57' prior: 50869223!
isInsideRoom: aPlayableCharacter
	^aPlayableCharacter isWithinRoomWithWidth: width andHeight: height.! !
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 21:29:09'!
isPlayerInsideRoom: aPlayableCharacter
	^aPlayableCharacter isWithinRoomWithWidth: width andHeight: height.! !
!BoundedPlayableCharacter methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 21:29:09' prior: 50875928!
moveForward
	player moveForward.
	(room isPlayerInsideRoom: player) ifFalse: 
	[
		player moveBackward.
		self signalCannotMovePlayerOutsideRoom.
	].
	(room isOverlappingWithStageObjects: player) ifTrue: [
		player moveBackward.
		self signalMovingPlayableCharacterCausesOverlapping .
	].
	! !
!BoundedPlayableCharacter methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 21:29:09' prior: 50875954!
moveBackward
	player moveBackward.
	(room isPlayerInsideRoom: player) ifFalse: 
	[
		player moveForward.
		self signalCannotMovePlayerOutsideRoom.
	].
	(room isOverlappingWithStageObjects: player) ifTrue: [
		player moveForward.
		self signalMovingPlayableCharacterCausesOverlapping .
	].! !

!methodRemoval: Room #isInsideRoom: stamp: 'EMI 12/10/2020 21:29:09'!
isInsideRoom: aPlayableCharacter
	^aPlayableCharacter isWithinRoomWithWidth: width andHeight: height.!
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 21:29:15' prior: 50875920!
isOverlappingWithStageObjects: aPlayableCharacter
	^ (self stageObjectsOverlappingWith: aPlayableCharacter) isEmpty not! !
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 21:30:03' prior: 50873749!
isEmpty
	^((self isPlayerInsideRoom: player) not) and:[stageObjects isEmpty].! !
!Room methodsFor: 'testing' stamp: 'EMI 12/10/2020 21:30:17' prior: 50873107!
isStageObject: aStageObject at: aPosition
	^(self findStageObjectAt: aPosition equalTo: aStageObject) isEmpty not.! !
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 21:30:52' prior: 50877174!
addPlayableCharacter: aPlayableCharacter
	(self isPlayerInsideRoom: aPlayableCharacter) ifFalse: [^self signalCannotAddPlayerWithInvalidPosition.].
	(self isOverlappingWithStageObjects: aPlayableCharacter) ifTrue: [^ self signalCannotAddPlayerToAlreadyOccupiedPosition].
	player _ aPlayableCharacter.! !

!testRun: #RoomTest #test01RoomsCanBeEmpty stamp: 'EMI 12/10/2020 21:30:55'!
PASSED!

!testRun: #RoomTest #test02CanAddAPlayableCharacterToARoom stamp: 'EMI 12/10/2020 21:30:55'!
PASSED!

!testRun: #RoomTest #test03CannotAddPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 21:30:55'!
PASSED!

!testRun: #RoomTest #test04CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 21:30:55'!
PASSED!

!testRun: #RoomTest #test05CannotMovePlayableCharacterForwardOutsideRoom stamp: 'EMI 12/10/2020 21:30:55'!
PASSED!

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 21:30:55'!
PASSED!

!testRun: #RoomTest #test07CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 21:30:55'!
PASSED!

!testRun: #RoomTest #test08CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 21:30:55'!
PASSED!

!testRun: #RoomTest #test09CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 21:30:55'!
PASSED!

!testRun: #RoomTest #test10CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 21:30:55'!
PASSED!

!testRun: #RoomTest #test11CannotAddStageObjectOverlappingAPlayableCharacter stamp: 'EMI 12/10/2020 21:30:55'!
PASSED!

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 21:30:55'!
PASSED!

!testRun: #RoomTest #test13RoomCanAddNonPortableObjectContainingPortableObject stamp: 'EMI 12/10/2020 21:30:55'!
PASSED!

!testRun: #RoomTest #test14RoomCanAddNonPortableObjectWithNonPortableObjectInside stamp: 'EMI 12/10/2020 21:30:55'!
PASSED!

!testRun: #RoomTest #test15 stamp: 'EMI 12/10/2020 21:30:55'!
FAILURE!

!testRun: #RoomTest #test15 stamp: 'EMI 12/10/2020 21:30:55'!
FAILURE!
!Room methodsFor: 'private' stamp: 'EMI 12/10/2020 21:32:02'!
isPositionInsideRoom: aPosition
	^(aPosition x between: 1 and: width) and: [aPosition y between: 1 and: height].! !

!methodRemoval: Room #checkIfPositionIsInsideRoom: stamp: 'EMI 12/10/2020 21:32:02'!
checkIfPositionIsInsideRoom: aPosition
	^(aPosition x between: 1 and: width) and: [aPosition y between: 1 and: height].!
!Room methodsFor: 'private' stamp: 'EMI 12/10/2020 21:32:10'!
isPositionInside: aPosition
	^(aPosition x between: 1 and: width) and: [aPosition y between: 1 and: height].! !

!methodRemoval: Room #isPositionInsideRoom: stamp: 'EMI 12/10/2020 21:32:10'!
isPositionInsideRoom: aPosition
	^(aPosition x between: 1 and: width) and: [aPosition y between: 1 and: height].!
!Room methodsFor: 'adding' stamp: 'EMI 12/10/2020 21:32:37' prior: 50875667!
addStageObject: aStageObject at: aPosition
	(self isPositionInside: aPosition) ifFalse: [self signalCannotAddStageObjectToInvalidPosition].
	((self stageObjectsAt: aPosition) isEmpty) ifFalse: [self signalCannotAddObjectInAlreadyOccupiedPosition].
	(self isPlayerAt: aPosition ) ifTrue: [self signalCannotAddObjectInAlreadyOccupiedPosition].
	stageObjects add: (Array with: aPosition with: aStageObject).! !
!AbstactPlayableCharacter methodsFor: 'nil' stamp: 'EMI 12/10/2020 21:33:41'!
backpackIncludes: aPortableObject 
	^self subclassResponsibility.! !
!AbstactPlayableCharacter methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 21:34:04'!
isAt: aPoint 
	^self subclassResponsibility.! !

!methodRemoval: AbstactPlayableCharacter #backpackIncludes: stamp: 'EMI 12/10/2020 21:34:10'!
backpackIncludes: aPortableObject 
	^self subclassResponsibility.!
!AbstactPlayableCharacter methodsFor: 'nil' stamp: 'EMI 12/10/2020 21:34:30'!
isWithinRoomWithWidth: aWidth andHeight: aHeight
	^self subclassResponsibility.! !
!AbstactPlayableCharacter methodsFor: 'nil' stamp: 'EMI 12/10/2020 21:35:30'!
moveBackward
	^self subclassResponsibility.! !
!AbstactPlayableCharacter methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 21:35:36'!
moveForward
	^self subclassResponsibility.! !
!NullPlayableCharacter methodsFor: 'nil' stamp: 'EMI 12/10/2020 21:36:01' overrides: 50877777!
moveBackward! !
!NullPlayableCharacter methodsFor: 'as yet unclassified' stamp: 'EMI 12/10/2020 21:36:06' overrides: 50877782!
moveForward! !
!RoomTest methodsFor: 'tests - take' stamp: 'EMI 12/10/2020 21:36:53'!
test15PlayableCharacterCanTakeBallInFront
	| room player ball |
	room _ Room width: 2 height: 2.
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayableCharacter: player.
	
	ball _ NoPointsPortableObject named: 'Ball' weighing: 1.
	room addStageObject: ball at: 1@2.
	
	player take.
	
	self deny: (room isStageObject: ball at: 1@2).! !

!methodRemoval: RoomTest #test15 stamp: 'EMI 12/10/2020 21:36:53'!
test15
	| room player ball |
	room _ Room width: 2 height: 2.
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayableCharacter: player.
	
	ball _ NoPointsPortableObject named: 'Ball' weighing: 1.
	room addStageObject: ball at: 1@2.
	
	player take.
	
	self deny: (room isStageObject: ball at: 1@2).!
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:38:22'!
itemPosition: anItem

	^ anItem at:1! !
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:38:22' prior: 50877562!
visitStageObjectsInFrontOf: aPlayableCharacter
	| inFront |
	inFront _ stageObjects select: [:anItem | aPlayableCharacter hasInFront: (self itemPosition: anItem)].
	inFront do: [:anItem | aPlayableCharacter take: (anItem at:2)].! !
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:38:40'!
itemStageObject: anItem

	^ anItem at:2! !
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:38:40' prior: 50877825!
visitStageObjectsInFrontOf: aPlayableCharacter
	| inFront |
	inFront _ stageObjects select: [:anItem | aPlayableCharacter hasInFront: (self itemPosition: anItem)].
	inFront do: [:anItem | aPlayableCharacter take: (self itemStageObject: anItem)].! !
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:40:21' prior: 50877839!
visitStageObjectsInFrontOf: aPlayableCharacter
	| inFront |
	inFront _ stageObjects select: [:anItem | aPlayableCharacter hasInFront: (self itemPosition: anItem)].
	inFront do: [:anItem | (self itemStageObject: anItem) getTakenBy: aPlayableCharacter].! !
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:43:15' prior: 50877850!
visitStageObjectsInFrontOf: aPlayableCharacter
	| inFront |
	inFront _ stageObjects select: [:anItem | aPlayableCharacter hasInFront: (self itemPosition: anItem)].
	inFront do: [:anItem | ((self itemStageObject: anItem) getTakenBy: aPlayableCharacter)].! !

!testRun: #RoomTest #test01RoomsCanBeEmpty stamp: 'EMI 12/10/2020 21:44:57'!
PASSED!

!testRun: #RoomTest #test02CanAddAPlayableCharacterToARoom stamp: 'EMI 12/10/2020 21:44:57'!
PASSED!

!testRun: #RoomTest #test03CannotAddPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 21:44:57'!
PASSED!

!testRun: #RoomTest #test04CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 21:44:57'!
PASSED!

!testRun: #RoomTest #test05CannotMovePlayableCharacterForwardOutsideRoom stamp: 'EMI 12/10/2020 21:44:57'!
PASSED!

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 21:44:57'!
PASSED!

!testRun: #RoomTest #test07CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 21:44:57'!
PASSED!

!testRun: #RoomTest #test08CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 21:44:57'!
PASSED!

!testRun: #RoomTest #test09CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 21:44:57'!
PASSED!

!testRun: #RoomTest #test10CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 21:44:57'!
PASSED!

!testRun: #RoomTest #test11CannotAddStageObjectOverlappingAPlayableCharacter stamp: 'EMI 12/10/2020 21:44:57'!
PASSED!

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 21:44:57'!
PASSED!

!testRun: #RoomTest #test13RoomCanAddNonPortableObjectContainingPortableObject stamp: 'EMI 12/10/2020 21:44:57'!
PASSED!

!testRun: #RoomTest #test14RoomCanAddNonPortableObjectWithNonPortableObjectInside stamp: 'EMI 12/10/2020 21:44:57'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterCanTakeBallInFront stamp: 'EMI 12/10/2020 21:44:57'!
FAILURE!

!testRun: #RoomTest #test15PlayableCharacterCanTakeBallInFront stamp: 'EMI 12/10/2020 21:44:57'!
FAILURE!
!RoomTest methodsFor: 'tests - take' stamp: 'EMI 12/10/2020 21:45:08' prior: 50877794!
test15PlayableCharacterCanTakeBallInFront
	| room player ball |
	room _ Room width: 2 height: 2.
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayableCharacter: player.
	
	ball _ NoPointsPortableObject named: 'Ball' weighing: 1.
	room addStageObject: ball at: 1@2.
	
	player take.
	
	"self deny: (room isStageObject: ball at: 1@2)."! !

!testRun: #RoomTest #test01RoomsCanBeEmpty stamp: 'EMI 12/10/2020 21:45:11'!
PASSED!

!testRun: #RoomTest #test02CanAddAPlayableCharacterToARoom stamp: 'EMI 12/10/2020 21:45:11'!
PASSED!

!testRun: #RoomTest #test03CannotAddPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 21:45:11'!
PASSED!

!testRun: #RoomTest #test04CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 21:45:11'!
PASSED!

!testRun: #RoomTest #test05CannotMovePlayableCharacterForwardOutsideRoom stamp: 'EMI 12/10/2020 21:45:11'!
PASSED!

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 21:45:11'!
PASSED!

!testRun: #RoomTest #test07CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 21:45:11'!
PASSED!

!testRun: #RoomTest #test08CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 21:45:11'!
PASSED!

!testRun: #RoomTest #test09CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 21:45:11'!
PASSED!

!testRun: #RoomTest #test10CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 21:45:11'!
PASSED!

!testRun: #RoomTest #test11CannotAddStageObjectOverlappingAPlayableCharacter stamp: 'EMI 12/10/2020 21:45:11'!
PASSED!

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 21:45:11'!
PASSED!

!testRun: #RoomTest #test13RoomCanAddNonPortableObjectContainingPortableObject stamp: 'EMI 12/10/2020 21:45:11'!
PASSED!

!testRun: #RoomTest #test14RoomCanAddNonPortableObjectWithNonPortableObjectInside stamp: 'EMI 12/10/2020 21:45:11'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterCanTakeBallInFront stamp: 'EMI 12/10/2020 21:45:11'!
PASSED!
!RoomTest methodsFor: 'tests - take' stamp: 'EMI 12/10/2020 21:45:33' prior: 50877928!
test15PlayableCharacterCanTakeBallInFront
	| room player ball |
	room _ Room width: 2 height: 2.
	player _ BoundedPlayableCharacter bound: self defaultPlayableCharacter to: room.
	room addPlayableCharacter: player.
	
	ball _ NoPointsPortableObject named: 'Ball' weighing: 1.
	room addStageObject: ball at: 1@2.
	
	player take.
	
	"self deny: (room isStageObject: ball at: 1@2)."! !
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:46:47' prior: 50877861!
visitStageObjectsInFrontOf: aPlayableCharacter
	| inFront |
	inFront _ stageObjects select: [:anItem | aPlayableCharacter hasInFront: (self itemPosition: anItem)].
	inFront do: [:anItem | aPlayableCharacter take: (self itemStageObject: anItem)].! !
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:47:55' prior: 50878010!
visitStageObjectsInFrontOf: aPlayableCharacter
	| inFront takenStageObjects |
	inFront _ stageObjects select: [:anItem | aPlayableCharacter hasInFront: (self itemPosition: anItem)].
	inFront do: [:anItem | aPlayableCharacter take: (self itemStageObject: anItem) withStageObjectsTaken: takenStageObjects].! !
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:48:15' prior: 50878021!
visitStageObjectsInFrontOf: aPlayableCharacter
	| inFront takenStageObjects |
	takenStageObjects _ OrderedCollection new.
	inFront _ stageObjects select: [:anItem | aPlayableCharacter hasInFront: (self itemPosition: anItem)].
	inFront do: [:anItem | aPlayableCharacter take: (self itemStageObject: anItem) withStageObjectsTaken: takenStageObjects].! !
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:49:27'!
addToBackpackStageObjectsInFrontOf: aPlayableCharacter
	| inFront takenStageObjects |
	takenStageObjects _ OrderedCollection new.
	inFront _ stageObjects select: [:anItem | aPlayableCharacter hasInFront: (self itemPosition: anItem)].
	inFront do: [:anItem | aPlayableCharacter take: (self itemStageObject: anItem) withStageObjectsTaken: takenStageObjects].! !

!methodRemoval: Room #visitStageObjectsInFrontOf: stamp: 'EMI 12/10/2020 21:49:27'!
visitStageObjectsInFrontOf: aPlayableCharacter
	| inFront takenStageObjects |
	takenStageObjects _ OrderedCollection new.
	inFront _ stageObjects select: [:anItem | aPlayableCharacter hasInFront: (self itemPosition: anItem)].
	inFront do: [:anItem | aPlayableCharacter take: (self itemStageObject: anItem) withStageObjectsTaken: takenStageObjects].!
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:49:35' prior: 50878047!
addToBackpackStageObjectsInFrontOf: aPlayableCharacter
	| inFront takenStageObjects |
	takenStageObjects _ OrderedCollection new.
	inFront _ stageObjects select: [:anItem | aPlayableCharacter hasInFront: (self itemPosition: anItem)].! !
!Room methodsFor: 'accessing' stamp: 'EMI 12/10/2020 21:49:43' prior: 50878075!
addToBackpackStageObjectsInFrontOf: aPlayableCharacter
	| inFront |
	inFront _ stageObjects select: [:anItem | aPlayableCharacter hasInFront: (self itemPosition: anItem)].! !

!testRun: #RoomTest #test01RoomsCanBeEmpty stamp: 'EMI 12/10/2020 21:50:39'!
PASSED!

!testRun: #RoomTest #test02CanAddAPlayableCharacterToARoom stamp: 'EMI 12/10/2020 21:50:39'!
PASSED!

!testRun: #RoomTest #test03CannotAddPlayableCharacterOutsideRoom stamp: 'EMI 12/10/2020 21:50:39'!
PASSED!

!testRun: #RoomTest #test04CanMovePlayableCharacterToEmptyPosition stamp: 'EMI 12/10/2020 21:50:39'!
PASSED!

!testRun: #RoomTest #test05CannotMovePlayableCharacterForwardOutsideRoom stamp: 'EMI 12/10/2020 21:50:39'!
PASSED!

!testRun: #RoomTest #test06CannotMovePlayableCharacterBackwardsOutsideRoom stamp: 'EMI 12/10/2020 21:50:39'!
PASSED!

!testRun: #RoomTest #test07CanAddStageObjectsToRoom stamp: 'EMI 12/10/2020 21:50:39'!
PASSED!

!testRun: #RoomTest #test08CannotAdd2OverlappingStageObjectAtSamePosition stamp: 'EMI 12/10/2020 21:50:39'!
PASSED!

!testRun: #RoomTest #test09CannotAddPlayableCharacterOverlappingAStageObject stamp: 'EMI 12/10/2020 21:50:39'!
PASSED!

!testRun: #RoomTest #test10CannotMovePlayableCharacterToAOcuppiedPosition stamp: 'EMI 12/10/2020 21:50:39'!
PASSED!

!testRun: #RoomTest #test11CannotAddStageObjectOverlappingAPlayableCharacter stamp: 'EMI 12/10/2020 21:50:39'!
PASSED!

!testRun: #RoomTest #test12CannotAddStageObjectOutsideRoom stamp: 'EMI 12/10/2020 21:50:39'!
PASSED!

!testRun: #RoomTest #test13RoomCanAddNonPortableObjectContainingPortableObject stamp: 'EMI 12/10/2020 21:50:39'!
PASSED!

!testRun: #RoomTest #test14RoomCanAddNonPortableObjectWithNonPortableObjectInside stamp: 'EMI 12/10/2020 21:50:39'!
PASSED!

!testRun: #RoomTest #test15PlayableCharacterCanTakeBallInFront stamp: 'EMI 12/10/2020 21:50:39'!
PASSED!

!testRun: #NonPortableObjectTest #test01CanCreateEmptyNonPortableObjects stamp: 'EMI 12/10/2020 21:50:43'!
PASSED!

!testRun: #NonPortableObjectTest #test02CanAddOneNonPortableObjectToAnotherNonPortableObject stamp: 'EMI 12/10/2020 21:50:43'!
PASSED!

!testRun: #NonPortableObjectTest #test03CanAddMoreThanOneNonPortableObjectToAnotherNonPortableObject stamp: 'EMI 12/10/2020 21:50:43'!
PASSED!

!testRun: #NonPortableObjectTest #test04CanAddOnePortableObjectToANonPortableObject stamp: 'EMI 12/10/2020 21:50:43'!
PASSED!

!testRun: #NonPortableObjectTest #test05CanAddMoreThanOnePortableObjectToANonPortableObject stamp: 'EMI 12/10/2020 21:50:43'!
PASSED!

!testRun: #NonPortableObjectTest #test06CanCreateTreeOfNonPortableObjects stamp: 'EMI 12/10/2020 21:50:43'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'EMI 12/10/2020 21:50:45'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'EMI 12/10/2020 21:50:45'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'EMI 12/10/2020 21:50:45'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'EMI 12/10/2020 21:50:45'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'EMI 12/10/2020 21:50:45'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'EMI 12/10/2020 21:50:45'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'EMI 12/10/2020 21:50:45'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'EMI 12/10/2020 21:50:45'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'EMI 12/10/2020 21:50:45'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'EMI 12/10/2020 21:50:45'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'EMI 12/10/2020 21:50:47'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'EMI 12/10/2020 21:50:47'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'EMI 12/10/2020 21:50:47'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'EMI 12/10/2020 21:50:47'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'EMI 12/10/2020 21:50:47'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'EMI 12/10/2020 21:50:47'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'EMI 12/10/2020 21:50:47'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'EMI 12/10/2020 21:50:47'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'EMI 12/10/2020 21:50:47'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'EMI 12/10/2020 21:50:47'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'EMI 12/10/2020 21:50:47'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'EMI 12/10/2020 21:50:47'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'EMI 12/10/2020 21:50:47'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'EMI 12/10/2020 21:50:47'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'EMI 12/10/2020 21:50:47'!
PASSED!

----SNAPSHOT----(10 December 2020 21:51:27) CuisUniversity-4384.image priorSource: 17418255!

----QUIT----(10 December 2020 21:51:39) CuisUniversity-4384.image priorSource: 17491597!