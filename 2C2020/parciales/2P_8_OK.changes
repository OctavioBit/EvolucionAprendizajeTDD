

----STARTUP---- (10 December 2020 17:11:59) as E:\!!NUEVO\Programas\CuisUniversity\v4384\CuisUniversity-4384.image!


----End fileIn of E:\!!NUEVO\Programas\CuisUniversity\v4384\2020-2C - Segundo Parcial\ISW1-2020-2C-2doParcial.st----!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 17:45:42'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 17:47:43'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 17:47:36'!
test01WidthOfRoomCannotBeZero

	
	
	self should: [ Room withWidth: 0 height: 5 andObjects: Dictionary new ]
		raise: self functionalException
		withMessageText: Room invalidWidthErrorDescription.! !
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 17:47:50' prior: 50871439!
test01WidthOfRoomCannotBeZero
	
	self should: [ Room withWidth: 0 height: 5 andObjects: Dictionary new ]
		raise: self functionalException
		withMessageText: Room invalidWidthErrorDescription.! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:47:52'!
ERROR!

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:47:52'!
ERROR!
!RoomTest methodsFor: 'private - instances' stamp: 'FR 12/10/2020 17:47:59'!
functionalException
	self shouldBeImplemented.! !
!RoomTest methodsFor: 'private - instances' stamp: 'FR 12/10/2020 17:48:10' prior: 50871463!
functionalException
	
	^ Error - MessageNotUnderstood! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:48:11'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'FR 12/10/2020 17:48:24'!
invalidWidthErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'FR 12/10/2020 17:48:42' prior: 50871476!
invalidWidthErrorDescription
	
	^ 'This value for width is invalid!!'! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:48:43'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 17:48:46'!
withWidth: aSmallInteger height: aSmallInteger2 andObjects: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithWidth: aSmallInteger height: aSmallInteger2 andObjects: aDictionary ! !
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 17:49:27' prior: 50871489!
withWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects
	
	^self new initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects ! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:49:28'!
ERROR!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 17:49:34'!
Object subclass: #Room
	instanceVariableNames: 'width'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 17:49:35'!
Object subclass: #Room
	instanceVariableNames: 'width height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 17:49:35'!
Object subclass: #Room
	instanceVariableNames: 'width height dictionaryOfStageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'FR 12/10/2020 17:49:35'!
initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects 
	self shouldBeImplemented.
	width := aWidth.
	height := aHeight.
	dictionaryOfStageObjects := aDictionaryOfStageObjects.! !
!Room methodsFor: 'initialization' stamp: 'FR 12/10/2020 17:49:41' prior: 50871535!
initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects 

	width := aWidth.
	height := aHeight.
	dictionaryOfStageObjects := aDictionaryOfStageObjects.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 17:49:48'!
Object subclass: #Room
	instanceVariableNames: 'width height stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'FR 12/10/2020 17:49:48' prior: 50871545!
initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects 

	width := aWidth.
	height := aHeight.
	stageObjects := aDictionaryOfStageObjects.! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:49:50'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 17:50:15' prior: 50871501!
withWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects
	
	aWidth = 0 ifTrue: [ self signalInvalidWidth ].
	
	^self new initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects ! !
!Room class methodsFor: 'errors' stamp: 'FR 12/10/2020 17:50:30'!
signalInvalidWidth

	self error: self invalidWidthErrorDescription! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:50:32'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 17:50:43'!
test02WidthOfRoomCannotBeNegative
	
	self should: [ Room withWidth: -2 height: 5 andObjects: Dictionary new ]
		raise: self functionalException
		withMessageText: Room invalidWidthErrorDescription.! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:50:45'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:50:45'!
FAILURE!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:50:46'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 17:50:59' prior: 50871574!
withWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects
	
	aWidth <= 0 ifTrue: [ self signalInvalidWidth ].
	
	^self new initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects ! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:51:01'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:51:01'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 17:51:24'!
test03WidthOfRoomMustBeInteger
	
	self should: [ Room withWidth: 0.5 height: 5 andObjects: Dictionary new ]
		raise: self functionalException
		withMessageText: Room invalidWidthErrorDescription.! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:51:26'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:51:26'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:51:26'!
FAILURE!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:51:26'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 17:51:37' prior: 50871610!
withWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects
	
	(aWidth isInteger and: [aWidth <= 0]) ifTrue: [ self signalInvalidWidth ].
	
	^self new initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects ! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:51:38'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:51:38'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:51:38'!
FAILURE!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:51:38'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 17:51:49' prior: 50871646!
withWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects
	
	(aWidth isInteger and: [aWidth > 0]) ifFalse: [ self signalInvalidWidth ].
	
	^self new initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects ! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:51:50'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:51:50'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:51:50'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 17:52:02'!
test01HeightOfRoomCannotBeZero
	
	self should: [ Room withWidth: 5 height: 0 andObjects: Dictionary new ]
		raise: self functionalException
		withMessageText: Room invalidHeightErrorDescription.! !

!testRun: #RoomTest #test01HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:52:05'!
ERROR!

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:52:05'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:52:05'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:52:05'!
PASSED!

!testRun: #RoomTest #test01HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:52:05'!
ERROR!
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 17:52:09'!
test04HeightOfRoomCannotBeZero
	
	self should: [ Room withWidth: 5 height: 0 andObjects: Dictionary new ]
		raise: self functionalException
		withMessageText: Room invalidHeightErrorDescription.! !

!methodRemoval: RoomTest #test01HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:52:09'!
test01HeightOfRoomCannotBeZero
	
	self should: [ Room withWidth: 5 height: 0 andObjects: Dictionary new ]
		raise: self functionalException
		withMessageText: Room invalidHeightErrorDescription.!

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:52:10'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:52:10'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:52:10'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:52:10'!
ERROR!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:52:10'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'FR 12/10/2020 17:52:15'!
invalidHeightErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'FR 12/10/2020 17:52:23' prior: 50871744!
invalidHeightErrorDescription
	
	^ 'This value for height is invalid!!'! !

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:52:24'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 17:53:00' prior: 50871669!
withWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects
	
	(aWidth isInteger and: [aWidth > 0]) ifFalse: [ self signalInvalidWidth ].
	aHeight = 0 ifTrue: [ self signalInvalidHeight ].
	
	^self new initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects ! !
!Room class methodsFor: 'errors' stamp: 'FR 12/10/2020 17:53:11'!
signalInvalidHeight

	self error: self invalidHeightErrorDescription! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:53:13'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:53:13'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:53:13'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:53:13'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 17:53:26'!
test05HeightOfRoomCannotBeNegative
	
	self should: [ Room withWidth: 5 height: -5 andObjects: Dictionary new ]
		raise: self functionalException
		withMessageText: Room invalidHeightErrorDescription.! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:53:27'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:53:27'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:53:27'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:53:27'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:53:27'!
FAILURE!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:53:27'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 17:53:41' prior: 50871758!
withWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects
	
	(aWidth isInteger and: [aWidth > 0]) ifFalse: [ self signalInvalidWidth ].
	aHeight <= 0 ifTrue: [ self signalInvalidHeight ].
	
	^self new initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects ! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:53:42'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:53:42'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:53:42'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:53:43'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:53:43'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 17:53:57'!
test06HeightOfRoomMustBeInteger
	
	self should: [ Room withWidth: 5 height: 0.5 andObjects: Dictionary new ]
		raise: self functionalException
		withMessageText: Room invalidHeightErrorDescription.! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:53:58'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:53:58'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:53:58'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:53:58'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:53:58'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:53:58'!
FAILURE!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:53:58'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 17:54:17' prior: 50871815!
withWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects
	
	(aWidth isInteger and: [aWidth > 0]) ifFalse: [ self signalInvalidWidth ].
	(aHeight isInteger and: [aHeight > 0]) ifTrue: [ self signalInvalidHeight ].
	
	^self new initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects ! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:54:18'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:54:18'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:54:18'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:54:18'!
FAILURE!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:54:18'!
FAILURE!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:54:18'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 17:54:30' prior: 50871873!
withWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects
	
	(aWidth isInteger and: [aWidth > 0]) ifFalse: [ self signalInvalidWidth ].
	(aHeight isInteger and: [aHeight > 0]) ifFalse: [ self signalInvalidHeight ].
	
	^self new initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects ! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:54:32'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:54:32'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:54:32'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:54:32'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:54:32'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:54:32'!
PASSED!
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 17:54:42'!
assertIsValidWidth: aWidth

	^ (aWidth isInteger and: [aWidth > 0]) ifFalse: [ self signalInvalidWidth ]! !
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 17:54:42' prior: 50871905!
withWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects
	
	self assertIsValidWidth: aWidth.
	(aHeight isInteger and: [aHeight > 0]) ifFalse: [ self signalInvalidHeight ].
	
	^self new initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects ! !
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 17:54:54'!
assertIsValidHeight: aHeight

	^ (aHeight isInteger and: [aHeight > 0]) ifFalse: [ self signalInvalidHeight ]! !
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 17:54:54' prior: 50871943!
withWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects
	
	self assertIsValidWidth: aWidth.
	self assertIsValidHeight: aHeight.
	
	^self new initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects ! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:54:58'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:54:59'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:54:59'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:54:59'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:54:59'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:54:59'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 17:58:47'!
test07CannotPlaceObjectAtInvalidPosition
	
	
	
	
	self should: [ Room withWidth: 5 height: 5 andObjects: self aDictionaryWithStageObjectsOutOfBounds ]
		raise: self functionalException
		withMessageText: Room objectOutOfBoundsErrorDescription.! !
!RoomTest methodsFor: 'private - instances' stamp: 'FR 12/10/2020 17:59:10'!
aDictionaryWithStageObjectsOutOfBounds

	^ Dictionary with: (5@5 -> (PointsPortableObject named: 'key' weighing: 1 worth: 1 ))! !
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 17:59:17' prior: 50871990!
test07CannotPlaceObjectAtInvalidPosition
	
	self should: [ Room withWidth: 5 height: 5 andObjects: self aDictionaryWithStageObjectsOutOfBounds ]
		raise: self functionalException
		withMessageText: Room objectOutOfBoundsErrorDescription.! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:59:20'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:59:20'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:59:20'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 17:59:20'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 17:59:20'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 17:59:20'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 17:59:20'!
ERROR!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 17:59:20'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'FR 12/10/2020 17:59:25'!
objectOutOfBoundsErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'FR 12/10/2020 17:59:45' prior: 50872043!
objectOutOfBoundsErrorDescription
	
	^ 'At least one of the objects is out of the bounds of the room!!'! !

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 17:59:47'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 18:00:07' prior: 50871962!
withWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects
	
	self assertIsValidWidth: aWidth.
	self assertIsValidHeight: aHeight.
	self assertObjectsAreWithinBounds: aDictionaryOfStageObjects.
	
	^self new initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects ! !
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 18:01:26' prior: 50872058!
withWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects
	
	self assertIsValidWidth: aWidth.
	self assertIsValidHeight: aHeight.
	self assertObjects: aDictionaryOfStageObjects areWithingBoundsOf: (aWidth-1)@(aHeight-1).
	
	^self new initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects ! !
!Room class methodsFor: 'assertions' stamp: 'FR 12/10/2020 18:02:36'!
assertObjects: aDictionaryOfStageObjects areWithingBoundsOf: anUpperLimit

	^ aDictionaryOfStageObjects keys allSatisfy: [ :aPosition | aPosition between: 0@0 and: anUpperLimit]! !
!Room class methodsFor: 'assertions' stamp: 'FR 12/10/2020 18:02:53' prior: 50872084!
assertObjects: aDictionaryOfStageObjects areWithingBoundsOf: anUpperLimit

	(aDictionaryOfStageObjects keys allSatisfy: [ :aPosition | aPosition between: 0@0 and: anUpperLimit]) ifFalse: [ self signalObjectOutOfBounds ]! !
!Room class methodsFor: 'errors' stamp: 'FR 12/10/2020 18:03:05'!
signalObjectOutOfBounds

	self error: self objectOutOfBoundsErrorDescription! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 18:03:07'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 18:03:07'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 18:03:07'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 18:03:07'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 18:03:07'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 18:03:07'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 18:03:07'!
PASSED!

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 18:03:10'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 18:03:11'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 18:03:11'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 18:03:11'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 18:03:11'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 18:03:11'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 18:03:11'!
PASSED!

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 18:03:25'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 18:03:25'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 18:03:25'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 18:03:25'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 18:03:25'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 18:03:25'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 18:03:25'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 18:06:12'!
test08RoomIsCreatedCorrectlyWhenEverythingIsValid
	
	| aRoom aDictionaryOfStageObjects aStageObject |
	
	aStageObject := NoPointsPortableObject named: 'key' weighing: 1.
	aDictionaryOfStageObjects := Dictionary with: (1@1 -> aStageObject).
	
	aRoom := 	Room withWidth: 5 height: 5 andObjects: aDictionaryOfStageObjects.
	
	self assert: (aRoom at: 1@1) equals: aStageObject.! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 18:06:14'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 18:06:14'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 18:06:14'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 18:06:14'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 18:06:14'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 18:06:14'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 18:06:14'!
PASSED!

!testRun: #RoomTest #test08RoomIsCreatedCorrectlyWhenEverythingIsValid stamp: 'FR 12/10/2020 18:06:14'!
ERROR!

!testRun: #RoomTest #test08RoomIsCreatedCorrectlyWhenEverythingIsValid stamp: 'FR 12/10/2020 18:06:14'!
ERROR!
!Room methodsFor: 'accessing' stamp: 'FR 12/10/2020 18:06:54' overrides: 16880774!
at: aPosition

	^ stageObjects at: aPosition! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 18:06:58'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 18:06:59'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 18:06:59'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 18:06:59'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 18:06:59'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 18:06:59'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 18:06:59'!
PASSED!

!testRun: #RoomTest #test08RoomIsCreatedCorrectlyWhenEverythingIsValid stamp: 'FR 12/10/2020 18:06:59'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FR 12/10/2020 18:11:56'!
test11InitialPlayerPositionMustBeWithinBoundsOfRoom

	

	self should: [ PlayableCharacter 
				named: 'Luigi'
				using: self defaultBackpack
				at: 5@5
				heading: #South
				onRoom: self aRoomWithNoObjects
	]
		raise: self functionalException
		withMessageText: PlayableCharacter playerOutOfRoomErrorDescription.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FR 12/10/2020 18:12:04' prior: 50872243!
test11InitialPlayerPositionMustBeWithinBoundsOfRoom

	self should: [ PlayableCharacter 
				named: 'Luigi'
				using: self defaultBackpack
				at: 5@5
				heading: #South
				onRoom: self aRoomWithNoObjects
	]
		raise: self functionalException
		withMessageText: PlayableCharacter playerOutOfRoomErrorDescription.! !

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:12:09'!
ERROR!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:12:09'!
ERROR!
!PlayableCharacterTest methodsFor: 'private - instances' stamp: 'FR 12/10/2020 18:12:23'!
functionalException
	self shouldBeImplemented.! !
!PlayableCharacterTest methodsFor: 'private - instances' stamp: 'FR 12/10/2020 18:13:32' prior: 50872277!
functionalException
	
	^ Error - MessageNotUnderstood! !

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:13:39'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'FR 12/10/2020 18:13:57'!
playerOutOfRoomErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'FR 12/10/2020 18:14:12' prior: 50872291!
playerOutOfRoomErrorDescription
	
	^ 'Player is outside the bounds of the room!!'! !

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:14:14'!
ERROR!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:15:29'!
ERROR!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:15:30'!
ERROR!
!PlayableCharacterTest methodsFor: 'private - instances' stamp: 'FR 12/10/2020 18:16:31'!
aRoomWithNoObjects
	
	^ Room withWidth: 5 height: 5 andObjects: Dictionary new.! !

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:16:34'!
ERROR!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:16:34'!
ERROR!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 18:16:38'!
named: aString using: aBackpack at: aPoint heading: aSymbol onRoom: aRoom 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString using: aBackpack at: aPoint heading: aSymbol onRoom: aRoom ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 18:16:53' prior: 50872329!
named: aString using: aBackpack at: aPoint heading: aSymbol onRoom: aRoom 
	
	^self new initializeNamed: aString using: aBackpack at: aPoint heading: aSymbol onRoom: aRoom! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 18:17:38' prior: 50872341!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint onRoom: aRoom 
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: aCardinalPoint onRoom: aRoom! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 18:18:30' prior: 50871171!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	"| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading "
	
	^ self named: aName using: aBackpack at: aPosition heading: aCardinalPoint  onRoom: self anEmptyRoom! !
!PlayableCharacter class methodsFor: 'room' stamp: 'FR 12/10/2020 18:19:00'!
anEmptyRoom

	^ Room withWidth: 10 height: 10 andObjects: Dictionary new.! !

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 18:19:27'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'FR 12/10/2020 18:19:26'!
initializeNamed: aName using: aBackpack at: aPosition heading: aCardinalPoint onRoom: aRoom

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aCardinalPoint.
	room := aRoom.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 18:19:34'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 18:19:35'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 18:19:35'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 18:19:35'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 18:19:35'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 18:19:35'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 18:19:35'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 18:19:35'!
FAILURE!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 18:19:35'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 18:19:35'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:19:35'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 18:19:36'!
ERROR!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 18:20:16' prior: 50872350!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint onRoom: aRoom 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading onRoom: aRoom! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 18:20:17'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 18:20:17'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 18:20:17'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 18:20:17'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 18:20:17'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 18:20:17'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 18:20:18'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 18:20:18'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 18:20:18'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 18:20:18'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:20:18'!
FAILURE!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:20:18'!
FAILURE!

!methodRemoval: PlayableCharacter #initializeNamed:using:at:heading: stamp: 'FR 12/10/2020 18:20:34'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 18:21:28' prior: 50872443!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint onRoom: aRoom 
	
	| newHeading |

	self assertPosition: aPosition isWithin: aRoom.

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading onRoom: aRoom! !
!PlayableCharacter class methodsFor: 'assertions' stamp: 'FR 12/10/2020 18:22:02'!
assertPosition: aPosition isWithin: aRoom.

	(aRoom positionIsWithinBounds: aPosition) ifFalse: [ self signalPlayerOutOfRoom ]! !
!PlayableCharacter class methodsFor: 'errors' stamp: 'FR 12/10/2020 18:22:24'!
signalPlayerOutOfRoom

	self error: self playerOutOfRoomErrorDescription! !
!Room methodsFor: 'testing' stamp: 'FR 12/10/2020 18:23:15'!
positionIsWithinBounds: aPosition

	^ aPosition between: 0@0 and: (width-1)@(height-1)! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 18:23:18'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 18:23:18'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 18:23:18'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 18:23:18'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 18:23:18'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 18:23:19'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 18:23:19'!
PASSED!

!testRun: #RoomTest #test08RoomIsCreatedCorrectlyWhenEverythingIsValid stamp: 'FR 12/10/2020 18:23:19'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 18:23:20'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 18:23:20'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 18:23:20'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 18:23:20'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 18:23:20'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 18:23:20'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 18:23:20'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 18:23:20'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 18:23:20'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 18:23:20'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:23:21'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - room movement' stamp: 'FR 12/10/2020 18:24:08'!
test12InitialPlayerPositionMustNotBeAlreadyOccupied

	self should: [ PlayableCharacter 
				named: 'Luigi'
				using: self defaultBackpack
				at: 1@1
				heading: #South
				onRoom: self aRoomWithStageObjects
	]
		raise: self functionalException
		withMessageText: PlayableCharacter positionAlreadyOccupiedErrorDescription.! !
!PlayableCharacterTest methodsFor: 'private - instances' stamp: 'FR 12/10/2020 18:24:57'!
aRoomWithStageObjects
	
	| aStageObject |
	
	aStageObject := NoPointsPortableObject named: 'key' weighing: 1.
	
	^ Room withWidth: 5 height: 5 andObjects: (Dictionary with: (1@1 -> (aStageObject))).! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 18:24:59'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 18:24:59'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 18:24:59'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 18:24:59'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 18:24:59'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 18:24:59'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 18:24:59'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 18:24:59'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 18:25:00'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 18:25:00'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:25:00'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 18:25:00'!
ERROR!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 18:25:00'!
ERROR!
!PlayableCharacter class methodsFor: 'error descriptions' stamp: 'FR 12/10/2020 18:25:06'!
positionAlreadyOccupiedErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'error descriptions' stamp: 'FR 12/10/2020 18:25:18' prior: 50872682!
positionAlreadyOccupiedErrorDescription
	
	^ 'This position is already occupied by a stage object!!'! !

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 18:25:20'!
FAILURE!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 18:25:36' prior: 50872360!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 

	^ self named: aName using: aBackpack at: aPosition heading: aCardinalPoint  onRoom: self anEmptyRoom! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 18:25:55' prior: 50872510!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint onRoom: aRoom 
	
	| newHeading |

	self assertPosition: aPosition isWithin: aRoom.
	self assertPosition: aPosition notOccupiedOn: aRoom.

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading onRoom: aRoom! !
!PlayableCharacter class methodsFor: 'assertions' stamp: 'FR 12/10/2020 18:26:27'!
assertPosition: aPosition notOccupiedOn: aRoom.

	(aRoom isOccupied: aPosition) ifTrue: [ self signalPositionOccupied ]! !
!PlayableCharacter class methodsFor: 'errors' stamp: 'FR 12/10/2020 18:26:39'!
signalPositionOccupied

	self error: self positionAlreadyOccupiedErrorDescription! !
!Room methodsFor: 'testing' stamp: 'FR 12/10/2020 18:27:03'!
isOccupied: aPosition

	^ stageObjects includesKey: aPosition! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 18:27:08'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 18:27:08'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 18:27:08'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 18:27:08'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 18:27:08'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 18:27:08'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 18:27:08'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 18:27:08'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 18:27:08'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 18:27:08'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:27:09'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 18:27:09'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 18:27:19'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 18:27:19'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 18:27:19'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 18:27:19'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 18:27:19'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 18:27:19'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 18:27:19'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 18:27:19'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 18:27:19'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 18:27:19'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:27:19'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 18:27:19'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FR 12/10/2020 18:29:50'!
test13PlayerCannotMoveOutOfBoundsHorizontally

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 9@4 heading: #South onRoom: self aRoomWithNoObjects.

	playableCharacter rotateRight.
	self should: [ playableCharacter moveForward ]
		raise: self functionalException
		withMessageText: PlayableCharacter playerOutOfRoomErrorDescription.
	
	self assert: (playableCharacter isAt: 9@4 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests - room movement' stamp: 'FR 12/10/2020 18:30:10' prior: 50872831!
test13PlayerCannotMoveOutOfBoundsHorizontally

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@2 heading: #South onRoom: self aRoomWithNoObjects.

	playableCharacter rotateRight.
	self should: [ playableCharacter moveForward ]
		raise: self functionalException
		withMessageText: PlayableCharacter playerOutOfRoomErrorDescription.
	
	self assert: (playableCharacter isAt: 9@4 heading: #East)! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 18:30:13'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 18:30:14'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 18:30:14'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 18:30:14'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 18:30:14'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 18:30:14'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 18:30:14'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 18:30:14'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 18:30:14'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 18:30:14'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:30:14'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 18:30:14'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveOutOfBoundsHorizontally stamp: 'FR 12/10/2020 18:30:14'!
FAILURE!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveOutOfBoundsHorizontally stamp: 'FR 12/10/2020 18:30:14'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests - room movement' stamp: 'FR 12/10/2020 18:30:58' prior: 50872849!
test13PlayerCannotMoveOutOfBoundsHorizontally

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@2 heading: #North onRoom: self aRoomWithNoObjects.

	playableCharacter rotateRight.
	self should: [ playableCharacter moveForward ]
		raise: self functionalException
		withMessageText: PlayableCharacter playerOutOfRoomErrorDescription.
	
	self assert: (playableCharacter isAt: 9@4 heading: #East)! !

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:31:04'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 18:31:04'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveOutOfBoundsHorizontally stamp: 'FR 12/10/2020 18:31:04'!
FAILURE!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveOutOfBoundsHorizontally stamp: 'FR 12/10/2020 18:31:04'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests - room movement' stamp: 'FR 12/10/2020 18:31:41'!
test13PlayerCannotMoveForwardsOutOfBounds

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@2 heading: #North onRoom: self aRoomWithNoObjects.

	playableCharacter rotateRight.
	self should: [ playableCharacter moveForward ]
		raise: self functionalException
		withMessageText: PlayableCharacter playerOutOfRoomErrorDescription.
	
	self assert: (playableCharacter isAt: 9@4 heading: #East)! !

!methodRemoval: PlayableCharacterTest #test13PlayerCannotMoveOutOfBoundsHorizontally stamp: 'FR 12/10/2020 18:31:41'!
test13PlayerCannotMoveOutOfBoundsHorizontally

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@2 heading: #North onRoom: self aRoomWithNoObjects.

	playableCharacter rotateRight.
	self should: [ playableCharacter moveForward ]
		raise: self functionalException
		withMessageText: PlayableCharacter playerOutOfRoomErrorDescription.
	
	self assert: (playableCharacter isAt: 9@4 heading: #East)!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 18:31:55'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 18:31:55'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 18:31:55'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 18:31:55'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 18:31:55'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 18:31:55'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 18:31:56'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 18:31:57'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 18:31:57'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 18:31:58'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:31:58'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 18:31:58'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 18:31:58'!
FAILURE!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 18:31:59'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'FR 12/10/2020 18:32:30' prior: 50871131!
moveForward
	
	self assertIsWithinBounds: position + heading forwardPoint.
	position := position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'assertions' stamp: 'FR 12/10/2020 18:33:27'!
assertIsWithinBounds: aPosition

	(room positionIsWithinBounds: aPosition) ifFalse: [ self class signalPlayerOutOfRoom ]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 18:33:48'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 18:33:48'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 18:33:48'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 18:33:48'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 18:33:48'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 18:33:48'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 18:33:48'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 18:33:49'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 18:33:49'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 18:33:49'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:33:49'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 18:33:49'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 18:33:49'!
FAILURE!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 18:33:49'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests - room movement' stamp: 'FR 12/10/2020 18:34:19' prior: 50872954!
test13PlayerCannotMoveForwardsOutOfBounds

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@2 heading: #North onRoom: self aRoomWithNoObjects.

	playableCharacter rotateRight.
	self should: [ playableCharacter moveForward ]
		raise: self functionalException
		withMessageText: PlayableCharacter playerOutOfRoomErrorDescription.
	
	self assert: (playableCharacter isAt: 4@2 heading: #East)! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 18:34:20'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 18:34:20'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 18:34:20'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 18:34:20'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 18:34:20'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 18:34:20'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 18:34:20'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 18:34:20'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 18:34:21'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 18:34:21'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:34:21'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 18:34:21'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 18:34:21'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - room movement' stamp: 'FR 12/10/2020 18:34:59'!
test14PlayerCannotMoveBackwardsOutOfBounds

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@0 heading: #North onRoom: self aRoomWithNoObjects.

	self should: [ playableCharacter moveBackward ]
		raise: self functionalException
		withMessageText: PlayableCharacter playerOutOfRoomErrorDescription.
	
	self assert: (playableCharacter isAt: 3@0 heading: #North)! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 18:35:01'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 18:35:01'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 18:35:01'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 18:35:01'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 18:35:01'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 18:35:01'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 18:35:01'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 18:35:01'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 18:35:01'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 18:35:01'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:35:01'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 18:35:01'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 18:35:01'!
PASSED!

!testRun: #PlayableCharacterTest #test14PlayerCannotMoveBackwardsOutOfBounds stamp: 'FR 12/10/2020 18:35:01'!
FAILURE!

!testRun: #PlayableCharacterTest #test14PlayerCannotMoveBackwardsOutOfBounds stamp: 'FR 12/10/2020 18:35:01'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'FR 12/10/2020 18:35:20' prior: 50871126!
moveBackward

	self assertIsWithinBounds: position - heading forwardPoint .
	position := position - heading forwardPoint ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'FR 12/10/2020 18:35:22' prior: 50873253!
moveBackward

	self assertIsWithinBounds: position - heading forwardPoint.
	position := position - heading forwardPoint ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 18:35:24'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 18:35:24'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 18:35:24'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 18:35:24'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 18:35:24'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 18:35:24'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 18:35:24'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 18:35:24'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 18:35:24'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 18:35:24'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:35:24'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 18:35:24'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 18:35:24'!
PASSED!

!testRun: #PlayableCharacterTest #test14PlayerCannotMoveBackwardsOutOfBounds stamp: 'FR 12/10/2020 18:35:24'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'FR 12/10/2020 18:35:42'!
moveTo: aPosition

	self assertIsWithinBounds: aPosition.
	position := aPosition.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'FR 12/10/2020 18:35:53' prior: 50873043!
moveForward
	
	"self assertIsWithinBounds: position + heading forwardPoint.
	position := position + heading forwardPoint"
	self moveTo: position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'FR 12/10/2020 18:36:06' prior: 50873260!
moveBackward

	"self assertIsWithinBounds: position - heading forwardPoint.
	position := position - heading forwardPoint "
	self moveTo:  position - heading forwardPoint! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 18:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 18:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 18:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 18:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 18:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 18:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 18:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 18:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 18:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 18:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 18:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 18:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test14PlayerCannotMoveBackwardsOutOfBounds stamp: 'FR 12/10/2020 18:36:07'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FR 12/10/2020 18:36:09'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FR 12/10/2020 18:36:09'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FR 12/10/2020 18:36:09'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FR 12/10/2020 18:36:09'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FR 12/10/2020 18:36:09'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FR 12/10/2020 18:36:09'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FR 12/10/2020 18:36:09'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FR 12/10/2020 18:36:09'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FR 12/10/2020 18:36:09'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FR 12/10/2020 18:36:09'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FR 12/10/2020 18:36:09'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FR 12/10/2020 18:36:09'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FR 12/10/2020 18:36:09'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FR 12/10/2020 18:36:09'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FR 12/10/2020 18:36:09'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FR 12/10/2020 18:36:11'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FR 12/10/2020 18:36:11'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FR 12/10/2020 18:36:11'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FR 12/10/2020 18:36:11'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FR 12/10/2020 18:36:11'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FR 12/10/2020 18:36:11'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FR 12/10/2020 18:36:11'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FR 12/10/2020 18:36:11'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FR 12/10/2020 18:36:11'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FR 12/10/2020 18:36:11'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FR 12/10/2020 18:36:11'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #PlayableCharacterTest #test14PlayerCannotMoveBackwardsOutOfBounds stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 18:36:12'!
PASSED!

!testRun: #RoomTest #test08RoomIsCreatedCorrectlyWhenEverythingIsValid stamp: 'FR 12/10/2020 18:36:12'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'FR 12/10/2020 18:36:19' prior: 50873335!
moveBackward

	self moveTo:  position - heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'FR 12/10/2020 18:36:23' prior: 50873326!
moveForward
	
	self moveTo: position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'FR 12/10/2020 18:36:30' prior: 50873585!
moveBackward

	self moveTo: position - heading forwardPoint! !
!PlayableCharacterTest methodsFor: 'tests - room movement' stamp: 'FR 12/10/2020 18:38:05'!
test15PlayerCannotMoveToOccupiedPosition

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #West onRoom: self aRoomWithStageObjects.

	self should: [ playableCharacter moveForward ]
		raise: self functionalException
		withMessageText: PlayableCharacter positionAlreadyOccupiedErrorDescription.
	
	self assert: (playableCharacter isAt: 2@1 heading: #West)! !

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:38:08'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 18:38:08'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 18:38:08'!
PASSED!

!testRun: #PlayableCharacterTest #test14PlayerCannotMoveBackwardsOutOfBounds stamp: 'FR 12/10/2020 18:38:08'!
PASSED!

!testRun: #PlayableCharacterTest #test15PlayerCannotMoveToOccupiedPosition stamp: 'FR 12/10/2020 18:38:08'!
FAILURE!

!testRun: #PlayableCharacterTest #test15PlayerCannotMoveToOccupiedPosition stamp: 'FR 12/10/2020 18:38:08'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'FR 12/10/2020 18:38:50' prior: 50873320!
moveTo: aPosition

	self assertIsWithinBounds: aPosition.
	self assertIsNotOccupied: aPosition.
	position := aPosition.! !
!PlayableCharacter methodsFor: 'assertions' stamp: 'FR 12/10/2020 18:39:13'!
assertIsNotOccupied: aPosition

	(room isOccupied: aPosition) ifTrue: [ self class signalPositionOccupied ]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 18:39:16'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 18:39:16'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 18:39:16'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 18:39:16'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 18:39:16'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 18:39:17'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 18:39:17'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 18:39:17'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 18:39:17'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 18:39:17'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 18:39:17'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 18:39:17'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 18:39:17'!
PASSED!

!testRun: #PlayableCharacterTest #test14PlayerCannotMoveBackwardsOutOfBounds stamp: 'FR 12/10/2020 18:39:17'!
PASSED!

!testRun: #PlayableCharacterTest #test15PlayerCannotMoveToOccupiedPosition stamp: 'FR 12/10/2020 18:39:17'!
PASSED!

TestCase subclass: #NoPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NoPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 18:40:23'!
TestCase subclass: #NoPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRenamed: #NoPortableObject as: #NoPortableObjectTest stamp: 'FR 12/10/2020 18:40:27'!
Smalltalk renameClassNamed: #NoPortableObject as: #NoPortableObjectTest!

TestCase subclass: #ObjectTakingTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #ObjectTakingTest category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 18:46:08'!
TestCase subclass: #ObjectTakingTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!ObjectTakingTest methodsFor: 'tests' stamp: 'FR 12/10/2020 18:56:42'!
test01PlayerCanTakePortableObjectThatIsInReach

	| playableCharacter aStageObject aRoom |

	aRoom := self aRoomWithStageObjects.
	aStageObject := aRoom at: 1@1.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North onRoom: self aRoomWithStageObjects.

	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: aStageObject).
	self deny: (aRoom isOccupied: 1@1).! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 18:56:45'!
ERROR!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 18:56:45'!
ERROR!
!ObjectTakingTest methodsFor: 'private - instances' stamp: 'FR 12/10/2020 18:56:59'!
aRoomWithStageObjects
	self shouldBeImplemented.! !
!ObjectTakingTest methodsFor: 'private - instances' stamp: 'FR 12/10/2020 18:57:05' prior: 50873765!
aRoomWithStageObjects
	
	| aStageObject |
	
	aStageObject := NoPointsPortableObject named: 'key' weighing: 1.
	
	^ Room withWidth: 5 height: 5 andObjects: (Dictionary with: (1@1 -> (aStageObject))).! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 18:57:08'!
ERROR!
!ObjectTakingTest methodsFor: 'private - instances' stamp: 'FR 12/10/2020 18:57:28'!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 18:57:32'!
ERROR!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 18:57:32'!
ERROR!
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'FR 12/10/2020 18:57:45'!
take
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 18:59:41' prior: 50873796!
take

	self take: (room at: (position+ heading forwardPoint))! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 18:59:45' prior: 50873801!
take

	self take: (room at: (position + heading forwardPoint))! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 18:59:49'!
FAILURE!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 18:59:49'!
FAILURE!
!ObjectTakingTest methodsFor: 'tests' stamp: 'FR 12/10/2020 19:01:49' prior: 50873741!
test01PlayerCanTakePortableObjectThatIsInReach

	| playableCharacter aStageObject aRoom |
	
	aStageObject := NoPointsPortableObject named: 'key' weighing: 1.
	
	aRoom := Room withWidth: 5 height: 5 andObjects: (Dictionary with: (1@1 -> (aStageObject))).
		
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North onRoom: self aRoomWithStageObjects.

	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: aStageObject).
	self deny: (aRoom isOccupied: 1@1).! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:01:50'!
FAILURE!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:01:50'!
FAILURE!
!ObjectTakingTest methodsFor: 'tests' stamp: 'FR 12/10/2020 19:03:05' prior: 50873820!
test01PlayerCanTakePortableObjectThatIsInReach

	| playableCharacter aStageObject aRoom |
	
	aStageObject := NoPointsPortableObject named: 'key' weighing: 1.
	
	aRoom := Room withWidth: 5 height: 5 andObjects: (Dictionary with: (1@1 -> (aStageObject))).
		
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North onRoom: self aRoomWithStageObjects.

	playableCharacter take: aStageObject.

	self assert: (playableCharacter backpackIncludes: aStageObject).
	"self deny: (aRoom isOccupied: 1@1)."! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:03:09'!
PASSED!
!ObjectTakingTest methodsFor: 'tests' stamp: 'FR 12/10/2020 19:05:18' prior: 50873847!
test01PlayerCanTakePortableObjectThatIsInReach

	| playableCharacter aStageObject aRoom |
	
	aStageObject := NoPointsPortableObject named: 'key' weighing: 1.
	
	aRoom := Room withWidth: 5 height: 5 andObjects: (Dictionary with: (1@1 -> (aStageObject))).
		
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North onRoom: aRoom.

	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: aStageObject).
	self deny: (aRoom isOccupied: 1@1).! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:05:20'!
FAILURE!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:05:20'!
FAILURE!
!ObjectTakingTest methodsFor: 'tests' stamp: 'FR 12/10/2020 19:05:55' prior: 50873871!
test01PlayerCanTakePortableObjectThatIsInReach

	| playableCharacter aStageObject aRoom |
	
	aRoom := self aRoomWithStageObjects.

	aStageObject := aRoom at: 1@1.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North onRoom: aRoom.

	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: aStageObject).
	self deny: (aRoom isOccupied: 1@1).! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:05:57'!
FAILURE!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:05:57'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 19:06:21' prior: 50873807!
take

	self take: (room at: (position + heading forwardPoint)).
	room removeAt: (position + heading forwardPoint).! !
!Room methodsFor: 'removing' stamp: 'FR 12/10/2020 19:06:47'!
removeAt: aPosition

	stageObjects removeKey: aPosition! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:06:51'!
PASSED!
!ObjectTakingTest methodsFor: 'tests' stamp: 'FR 12/10/2020 19:08:49'!
test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer

	| playableCharacter aStageObject aRoom |
	
	aRoom := self aRoomWithStageObjects.

	aStageObject := aRoom at: 1@1.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #South onRoom: aRoom.

	self should: [ playableCharacter take ]
		raise: self functionalException
		withMessageText: PlayableCharacter noObjectToTakeErrorDescription.

	self deny: (playableCharacter backpackIncludes: aStageObject).
	self assert: (aRoom isOccupied: 1@1).! !
!ObjectTakingTest methodsFor: 'tests' stamp: 'FR 12/10/2020 19:08:59' prior: 50873936!
test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer

	| playableCharacter aStageObject aRoom |
	
	aRoom := self aRoomWithStageObjects.

	aStageObject := aRoom at: 1@1.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East onRoom: aRoom.

	self should: [ playableCharacter take ]
		raise: self functionalException
		withMessageText: PlayableCharacter noObjectToTakeErrorDescription.

	self deny: (playableCharacter backpackIncludes: aStageObject).
	self assert: (aRoom isOccupied: 1@1).! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:09:01'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 19:09:01'!
ERROR!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 19:09:01'!
ERROR!
!ObjectTakingTest methodsFor: 'private - instances' stamp: 'FR 12/10/2020 19:09:09'!
functionalException
	self shouldBeImplemented.! !
!ObjectTakingTest methodsFor: 'private - instances' stamp: 'FR 12/10/2020 19:09:18' prior: 50873988!
functionalException
	
	^ Error - MessageNotUnderstood! !

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 19:09:19'!
ERROR!
!PlayableCharacter class methodsFor: 'error descriptions' stamp: 'FR 12/10/2020 19:09:25'!
noObjectToTakeErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'error descriptions' stamp: 'FR 12/10/2020 19:09:40' prior: 50874002!
noObjectToTakeErrorDescription

	^ 'Player has not object in front of them to take!!'! !

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 19:09:41'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 19:11:03' prior: 50873922!
take

	| positionOfObjectToTake |
	
	positionOfObjectToTake := position + heading forwardPoint.

	[ self take: positionOfObjectToTake ] on: Error do: [ self signalNoObjectToTake ].
	room removeAt: positionOfObjectToTake.! !
!PlayableCharacter methodsFor: 'errors' stamp: 'FR 12/10/2020 19:11:20'!
signalNoObjectToTake

	self error: self class noObjectToTakeErrorDescription! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:11:26'!
ERROR!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 19:11:26'!
PASSED!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:11:26'!
ERROR!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:11:32'!
ERROR!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:11:32'!
ERROR!

!classRemoval: #NoPortableObjectTest stamp: 'FR 12/10/2020 19:12:18'!
TestCase subclass: #NoPortableObjectTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 19:13:04' prior: 50874018!
take

	| positionOfObjectToTake objectToTake |
	
	positionOfObjectToTake := position + heading forwardPoint.
	[ objectToTake := room at: positionOfObjectToTake ] on: Error do: [ self signalNoObjectToTake ].

	self take: objectToTake.
	room removeAt: positionOfObjectToTake.! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:13:06'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 19:13:06'!
PASSED!
!ObjectTakingTest methodsFor: 'tests' stamp: 'FR 12/10/2020 19:19:41'!
test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach

	| playableCharacter aWardrobe aBox aKey aPaper aRoom |
	
	aRoom := self aRoomWithNonPortableObject.

	aWardrobe := aRoom at: 1@1.
	aBox := aWardrobe items first.
	aKey := aWardrobe items second.
	aPaper := aBox items first.

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North onRoom: aRoom.

	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: aKey).
	self assert: (playableCharacter backpackIncludes: aPaper).
	self deny: (playableCharacter backpackIncludes: aBox).
	self deny: (playableCharacter backpackIncludes: aWardrobe).
	self assert: (aRoom at: 1@1) equals: aWardrobe.
	self assert: (aWardrobe includes: aBox).
	self deny: (aWardrobe includes: aKey).
	self assert: (aBox isEmpty).
! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 19:22:03'!
Object subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!ObjectTakingTest methodsFor: 'private - instances' stamp: 'FR 12/10/2020 19:21:57'!
aRoomWithNonPortableObject
	
	| aWardrobe aKey aBox aPaper |
	
	aKey := NoPointsPortableObject named: 'key' weighing: 1.
	aPaper := PointsPortableObject named: 'paper' weighing: 1 worth: 5.
	aBox := NonPortableObject named: 'box' with: {aPaper}.
	aWardrobe := NonPortableObject named: 'wardrobe' with: {aKey. aBox}.
	
	^ Room withWidth: 5 height: 5 andObjects: (Dictionary with: (1@1 -> (aWardrobe))).! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:22:30'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 19:22:31'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:22:31'!
ERROR!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:22:31'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 19:22:35'!
named: aString with: anArray 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString with: anArray ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 19:23:01' prior: 50874148!
named: aName with: aCollectionOfStageObjects 

	^self new initializeNamed: aName with: aCollectionOfStageObjects.! !

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:23:03'!
ERROR!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 19:23:09'!
Object subclass: #NonPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 19:23:09'!
Object subclass: #NonPortableObject
	instanceVariableNames: 'name collectionOfStageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'FR 12/10/2020 19:23:09'!
initializeNamed: aName with: aCollectionOfStageObjects 
	self shouldBeImplemented.
	name := aName.
	collectionOfStageObjects := aCollectionOfStageObjects.! !
!NonPortableObject methodsFor: 'initialization' stamp: 'FR 12/10/2020 19:23:28' prior: 50874185!
initializeNamed: aName with: aCollectionOfStageObjects 
	
	name := aName.
	collectionOfStageObjects := aCollectionOfStageObjects.! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 19:23:32'!
Object subclass: #NonPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'FR 12/10/2020 19:23:32' prior: 50874193!
initializeNamed: aName with: aCollectionOfStageObjects 
	
	name := aName.
	stageObjects := aCollectionOfStageObjects.! !

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:23:34'!
ERROR!
!ObjectTakingTest methodsFor: 'tests' stamp: 'FR 12/10/2020 19:24:46' prior: 50874079!
test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach

	| playableCharacter aWardrobe aKey aBox aPaper aRoom |
		
	aKey := NoPointsPortableObject named: 'key' weighing: 1.
	aPaper := PointsPortableObject named: 'paper' weighing: 1 worth: 5.
	aBox := NonPortableObject named: 'box' with: {aPaper}.
	aWardrobe := NonPortableObject named: 'wardrobe' with: {aKey. aBox}.
	
	aRoom := Room withWidth: 5 height: 5 andObjects: (Dictionary with: (1@1 -> (aWardrobe))).

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North onRoom: aRoom.

	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: aKey).
	self assert: (playableCharacter backpackIncludes: aPaper).
	self deny: (playableCharacter backpackIncludes: aBox).
	self deny: (playableCharacter backpackIncludes: aWardrobe).
	self assert: (aRoom at: 1@1) equals: aWardrobe.
	self assert: (aWardrobe includes: aBox).
	self deny: (aWardrobe includes: aKey).
	self assert: (aBox isEmpty).
! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:24:48'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 19:24:48'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:24:48'!
ERROR!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:24:48'!
ERROR!
!NonPortableObject methodsFor: 'adding' stamp: 'FR 12/10/2020 19:25:37'!
assertCanAddTo: aBackpack

	^ true! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:25:39'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 19:25:39'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:25:39'!
FAILURE!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:25:39'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 19:28:11' prior: 50871145!
take: aStageObject

	backpack add: aStageObject.! !
!Backpack methodsFor: 'adding' stamp: 'FR 12/10/2020 19:28:19' prior: 50870981!
add: aStageObject
	
	aStageObject assertCanAddTo: self.
	
	container add: aStageObject.
	! !
!Backpack methodsFor: 'adding' stamp: 'FR 12/10/2020 19:28:35' prior: 50874296!
add: aStageObject
	
	aStageObject assertCanAddTo: self.
	
	"container add: aStageObject."
	aStageObject addTo: container.
	! !
!PortableObject methodsFor: 'adding' stamp: 'FR 12/10/2020 19:29:00'!
addTo: aContainer

	aContainer add: self.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FR 12/10/2020 19:29:05'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FR 12/10/2020 19:29:05'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FR 12/10/2020 19:29:05'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FR 12/10/2020 19:29:05'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FR 12/10/2020 19:29:05'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FR 12/10/2020 19:29:05'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FR 12/10/2020 19:29:05'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FR 12/10/2020 19:29:05'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FR 12/10/2020 19:29:05'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FR 12/10/2020 19:29:05'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FR 12/10/2020 19:29:05'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FR 12/10/2020 19:29:05'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FR 12/10/2020 19:29:05'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:29:06'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test14PlayerCannotMoveBackwardsOutOfBounds stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #PlayableCharacterTest #test15PlayerCannotMoveToOccupiedPosition stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #RoomTest #test08RoomIsCreatedCorrectlyWhenEverythingIsValid stamp: 'FR 12/10/2020 19:29:06'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:29:06'!
ERROR!
!NonPortableObject methodsFor: 'adding' stamp: 'FR 12/10/2020 19:30:10'!
addTo: aContainer

	stageObjects do: [ :aStageObject | aStageObject addTo: aContainer ]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 19:30:12'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 19:30:12'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 19:30:12'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 19:30:12'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 19:30:12'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 19:30:12'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 19:30:12'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 19:30:12'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 19:30:12'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 19:30:12'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 19:30:12'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 19:30:13'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 19:30:13'!
PASSED!

!testRun: #PlayableCharacterTest #test14PlayerCannotMoveBackwardsOutOfBounds stamp: 'FR 12/10/2020 19:30:13'!
PASSED!

!testRun: #PlayableCharacterTest #test15PlayerCannotMoveToOccupiedPosition stamp: 'FR 12/10/2020 19:30:13'!
PASSED!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:30:15'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 19:30:15'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:30:15'!
ERROR!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:30:15'!
ERROR!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 19:31:35' prior: 50874060!
take

	| positionOfObjectToTake objectToTake |
	
	positionOfObjectToTake := position + heading forwardPoint.
	[ objectToTake := room at: positionOfObjectToTake ] on: Error do: [ self signalNoObjectToTake ].

	objectToTake takenBy: self.
	self take: objectToTake.
	room removeAt: positionOfObjectToTake.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 19:32:55' prior: 50874546!
take

	| positionOfObjectToTake objectToTake |
	
	positionOfObjectToTake := position + heading forwardPoint.
	[ objectToTake := room at: positionOfObjectToTake ] on: Error do: [ self signalNoObjectToTake ].

	objectToTake takenBy: self at: positionOfObjectToTake.
	self take: objectToTake.
	room removeAt: positionOfObjectToTake.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 19:32:58' prior: 50874559!
take

	| positionOfObjectToTake objectToTake |
	
	positionOfObjectToTake := position + heading forwardPoint.
	[ objectToTake := room at: positionOfObjectToTake ] on: Error do: [ self signalNoObjectToTake ].

	objectToTake takenBy: self at: positionOfObjectToTake.
	"self take: objectToTake.
	room removeAt: positionOfObjectToTake."! !
!NonPortableObject methodsFor: 'taking' stamp: 'FR 12/10/2020 19:33:49'!
takenBy: aPlayableCharacter at: myPosition

	aPlayableCharacter takeNonPortableObject: self at: myPosition.! !
!PortableObject methodsFor: 'taking' stamp: 'FR 12/10/2020 19:33:59'!
takenBy: aPlayableCharacter at: myPosition

	aPlayableCharacter takePortableObject: self at: myPosition.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 19:34:16'!
takePortableObject: aPortableObject at: positionOfPortableObject! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 19:34:32' prior: 50874598!
takePortableObject: aPortableObject at: positionOfPortableObject

	self take: aPortableObject.
	room removeAt: positionOfPortableObject! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 19:34:42' prior: 50874573!
take

	| positionOfObjectToTake objectToTake |
	
	positionOfObjectToTake := position + heading forwardPoint.
	[ objectToTake := room at: positionOfObjectToTake ] on: Error do: [ self signalNoObjectToTake ].

	objectToTake takenBy: self at: positionOfObjectToTake.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 19:35:04'!
takeNonPortableObject: aNonPortableObject

	self take: aNonPortableObject.! !
!NonPortableObject methodsFor: 'taking' stamp: 'FR 12/10/2020 19:35:12' prior: 50874586!
takenBy: aPlayableCharacter at: myPosition

	aPlayableCharacter takeNonPortableObject: self! !
!Backpack methodsFor: 'adding' stamp: 'FR 12/10/2020 19:35:44' prior: 50874302!
add: aStageObject
	
	aStageObject assertCanAddTo: self.
	
	aStageObject addTo: container.
	! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FR 12/10/2020 19:35:50'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:35:52'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 19:35:52'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #PlayableCharacterTest #test14PlayerCannotMoveBackwardsOutOfBounds stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #PlayableCharacterTest #test15PlayerCannotMoveToOccupiedPosition stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #RoomTest #test08RoomIsCreatedCorrectlyWhenEverythingIsValid stamp: 'FR 12/10/2020 19:35:53'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:35:53'!
ERROR!
!NonPortableObject methodsFor: 'testing' stamp: 'FR 12/10/2020 19:36:19'!
includes: aStageObject

	^ stageObjects includes: aStageObject! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:36:20'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 19:36:21'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:36:21'!
FAILURE!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:36:21'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 19:38:18' prior: 50874623!
takeNonPortableObject: aNonPortableObject

	aNonPortableObject do: [ :aStageObject | self take: aStageObject ].! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:38:21'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 19:38:21'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:38:21'!
ERROR!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 19:38:21'!
ERROR!

----STARTUP---- (10 December 2020 20:07:28) as E:\!!NUEVO\Programas\CuisUniversity\v4384\CuisUniversity-4384.image!


----End fileIn of E:\!!NUEVO\Programas\CuisUniversity\v4384\ISW1-2020-2C-2doParcialHaciendoNonPortableObject.st----!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 20:08:55' prior: 50875839!
take

	| positionOfObjectToTake objectToTake |
	
	positionOfObjectToTake := position + heading forwardPoint.
	[ objectToTake := room at: positionOfObjectToTake ] on: Error do: [ self signalNoObjectToTake ].

	objectToTake takenBy: self.
	objectToTake removedBy: self.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 20:09:23' prior: 50876323!
take

	| positionOfObjectToTake objectToTake |
	
	positionOfObjectToTake := position + heading forwardPoint.
	[ objectToTake := room at: positionOfObjectToTake ] on: Error do: [ self signalNoObjectToTake ].

	objectToTake takenBy: self.
	objectToTake removedBy: self at: positionOfObjectToTake.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 20:09:46'!
removeNonPortableObject: 	aNonPortableObject at: positionOfNonPortableObject! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 20:09:51'!
removePortableObject: 	aNonPortableObject at: positionOfNonPortableObject! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 20:10:01' prior: 50876353!
removePortableObject: 	aNonPortableObject at: positionOfPortableObject! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 20:10:55' prior: 50876359!
removePortableObject: 	aNonPortableObject at: positionOfPortableObject

	room removeAt: positionOfPortableObject! !
!NonPortableObject methodsFor: 'taking' stamp: 'FR 12/10/2020 20:11:34'!
takenBy: aPlayableCharacter

	aPlayableCharacter takeNonPortableObject: self! !
!PortableObject methodsFor: 'taking' stamp: 'FR 12/10/2020 20:11:41'!
takenBy: aPlayableCharacter

	aPlayableCharacter takePortableObject: self! !

!methodRemoval: PortableObject #takenBy:at: stamp: 'FR 12/10/2020 20:11:46'!
takenBy: aPlayableCharacter at: myPosition

	aPlayableCharacter takePortableObject: self at: myPosition.!

!methodRemoval: NonPortableObject #takenBy:at: stamp: 'FR 12/10/2020 20:11:49'!
takenBy: aPlayableCharacter at: myPosition

	aPlayableCharacter takeNonPortableObject: self!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 20:11:59'!
takePortableObject: aPortableObject

	self take: aPortableObject.! !
!NonPortableObject methodsFor: 'taking' stamp: 'FR 12/10/2020 20:12:55'!
removedBy: aPlayableCharacter at: positionOfObjectToRemove

	aPlayableCharacter removeNonPortableObject: self at: positionOfObjectToRemove! !
!PortableObject methodsFor: 'taking' stamp: 'FR 12/10/2020 20:13:13'!
removedBy: aPlayableCharacter at: myPosition

	aPlayableCharacter removePortableObject: self at: myPosition! !
!NonPortableObject methodsFor: 'taking' stamp: 'FR 12/10/2020 20:13:24' prior: 50876398!
removedBy: aPlayableCharacter at: myPosition

	aPlayableCharacter removeNonPortableObject: self at: myPosition! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:13:38'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 20:13:38'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:13:38'!
ERROR!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:13:38'!
ERROR!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 20:14:03' prior: 50875855!
takeNonPortableObject: aNonPortableObject

	aNonPortableObject do: [ :aStageObject | aStageObject takenBy: self ].! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:14:43'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 20:14:43'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:14:43'!
ERROR!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:14:43'!
ERROR!
!NonPortableObject methodsFor: 'accessing' stamp: 'FR 12/10/2020 20:15:04'!
do: aBlock

	stageObjects do: aBlock! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:15:06'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 20:15:06'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:15:06'!
FAILURE!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:15:06'!
FAILURE!

!methodRemoval: PlayableCharacter #takePortableObject:at: stamp: 'FR 12/10/2020 20:15:41'!
takePortableObject: aPortableObject at: positionOfPortableObject

	self take: aPortableObject.
	room removeAt: positionOfPortableObject!

StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 20:16:38'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

Object subclass: #StageObject
	instanceVariableNames: 'parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #StageObject category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 20:16:51'!
Object subclass: #StageObject
	instanceVariableNames: 'parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

StageObject subclass: #NonPortableObject
	instanceVariableNames: 'stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 20:16:59'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

StageObject subclass: #PortableObject
	instanceVariableNames: 'weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 20:17:02'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

Object subclass: #StageObject
	instanceVariableNames: 'parent name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #StageObject category: 'ISW1-2020-2C-2doParcial' stamp: 'FR 12/10/2020 20:17:06'!
Object subclass: #StageObject
	instanceVariableNames: 'parent name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'FR 12/10/2020 20:17:41' prior: 50875717!
initializeNamed: aName with: aCollectionOfStageObjects 
	
	name := aName.
	stageObjects := aCollectionOfStageObjects.
	stageObjects do: [ :aStageObject | aStageObject parent: self ].! !
!StageObject methodsFor: 'accessing' stamp: 'FR 12/10/2020 20:18:07'!
parent: aNonPortableObject

	parent := aNonPortableObject! !
!StageObject methodsFor: 'parent' stamp: 'FR 12/10/2020 20:18:24'!
parent

	^ parent! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 20:19:13' prior: 50876393!
takePortableObject: aPortableObject

	self take: aPortableObject.
	aPortableObject detachFromParent.! !
!PortableObject methodsFor: 'parent' stamp: 'FR 12/10/2020 20:19:53'!
detachFromParent

	parent isNotNil ifTrue: [ parent remove: self ] ! !
!NonPortableObject methodsFor: 'removing' stamp: 'FR 12/10/2020 20:20:26'!
remove: aStageObject

	stageObjects remove: aStageObject! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:20:28'!
ERROR!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 20:20:28'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:20:28'!
ERROR!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:20:30'!
ERROR!
!PortableObject methodsFor: 'parent' stamp: 'FR 12/10/2020 20:21:04' prior: 50876573!
detachFromParent

	parent isNil ifFalse: [ parent remove: self ] ! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:21:05'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:21:07'!
ERROR!
!NonPortableObject methodsFor: 'initialization' stamp: 'FR 12/10/2020 20:21:35' prior: 50876551!
initializeNamed: aName with: aCollectionOfStageObjects 
	
	name := aName.
	stageObjects := aCollectionOfStageObjects asOrderedCollection.
	stageObjects do: [ :aStageObject | aStageObject parent: self ].! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:21:38'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 20:21:38'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:21:38'!
FAILURE!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:21:38'!
FAILURE!

----End fileIn of E:\!!NUEVO\Programas\CuisUniversity\v4384\Packages\TerseGuide.pck.st----!
!NonPortableObject methodsFor: 'accessing' stamp: 'FR 12/10/2020 20:38:11' prior: 50876457!
do: aBlock

	(stageObjects copy) do: aBlock! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:38:15'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 20:38:15'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:38:15'!
ERROR!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:38:15'!
ERROR!
!NonPortableObject methodsFor: 'testing' stamp: 'FR 12/10/2020 20:38:32'!
isEmpty

	^ stageObjects isEmpty! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:38:34'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 20:38:34'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:38:34'!
PASSED!
!ObjectTakingTest methodsFor: 'tests' stamp: 'FR 12/10/2020 20:39:42'!
test03PlayerCanTakeContentsOfEmptyNonPortableObject

	| playableCharacter aWardrobe aRoom |
		
	aWardrobe := NonPortableObject named: 'wardrobe' with: {}.
	
	aRoom := Room withWidth: 5 height: 5 andObjects: (Dictionary with: (1@1 -> (aWardrobe))).

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North onRoom: aRoom.

	playableCharacter take.

	self deny: (playableCharacter backpackIncludes: aWardrobe).
	self assert: (aRoom at: 1@1) equals: aWardrobe.! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:39:47'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 20:39:47'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfEmptyNonPortableObject stamp: 'FR 12/10/2020 20:39:47'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:39:47'!
PASSED!
!ObjectTakingTest methodsFor: 'tests' stamp: 'FR 12/10/2020 20:40:45'!
test04PlayerCanTakeContentsOfNonPortableObjectWithPortableObjects

	| playableCharacter aWardrobe aKey aPaper aRoom |
		
	aKey := NoPointsPortableObject named: 'key' weighing: 1.
	aPaper := PointsPortableObject named: 'paper' weighing: 1 worth: 5.
	aWardrobe := NonPortableObject named: 'wardrobe' with: {aKey. aPaper}.
	
	aRoom := Room withWidth: 5 height: 5 andObjects: (Dictionary with: (1@1 -> (aWardrobe))).

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North onRoom: aRoom.

	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: aKey).
	self assert: (playableCharacter backpackIncludes: aPaper).
	self deny: (playableCharacter backpackIncludes: aWardrobe).
	self assert: (aRoom at: 1@1) equals: aWardrobe.
	self deny: (aWardrobe includes: aKey).
	self deny: (aWardrobe includes: aPaper).! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:40:48'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 20:40:48'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfEmptyNonPortableObject stamp: 'FR 12/10/2020 20:40:48'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:40:48'!
PASSED!

!testRun: #ObjectTakingTest #test04PlayerCanTakeContentsOfNonPortableObjectWithPortableObjects stamp: 'FR 12/10/2020 20:40:48'!
PASSED!
!ObjectTakingTest methodsFor: 'tests' stamp: 'FR 12/10/2020 20:41:07'!
test05PlayerCanTakeContentsOfNonPortableObjectWithBothKindsOfStageObjects

	| playableCharacter aWardrobe aKey aBox aPaper aRoom |
		
	aKey := NoPointsPortableObject named: 'key' weighing: 1.
	aPaper := PointsPortableObject named: 'paper' weighing: 1 worth: 5.
	aBox := NonPortableObject named: 'box' with: {aPaper}.
	aWardrobe := NonPortableObject named: 'wardrobe' with: {aKey. aBox}.
	
	aRoom := Room withWidth: 5 height: 5 andObjects: (Dictionary with: (1@1 -> (aWardrobe))).

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North onRoom: aRoom.

	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: aKey).
	self assert: (playableCharacter backpackIncludes: aPaper).
	self deny: (playableCharacter backpackIncludes: aBox).
	self deny: (playableCharacter backpackIncludes: aWardrobe).
	self assert: (aRoom at: 1@1) equals: aWardrobe.
	self assert: (aWardrobe includes: aBox).
	self deny: (aWardrobe includes: aKey).
	self assert: (aBox isEmpty).
! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:41:09'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 20:41:09'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfEmptyNonPortableObject stamp: 'FR 12/10/2020 20:41:09'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:41:09'!
PASSED!

!testRun: #ObjectTakingTest #test04PlayerCanTakeContentsOfNonPortableObjectWithPortableObjects stamp: 'FR 12/10/2020 20:41:09'!
PASSED!

!testRun: #ObjectTakingTest #test05PlayerCanTakeContentsOfNonPortableObjectWithBothKindsOfStageObjects stamp: 'FR 12/10/2020 20:41:09'!
PASSED!

!methodRemoval: ObjectTakingTest #test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:41:20'!
test03PlayerCanTakeContentsOfNonPortableObjectThatIsInReach

	| playableCharacter aWardrobe aKey aBox aPaper aRoom |
		
	aKey := NoPointsPortableObject named: 'key' weighing: 1.
	aPaper := PointsPortableObject named: 'paper' weighing: 1 worth: 5.
	aBox := NonPortableObject named: 'box' with: {aPaper}.
	aWardrobe := NonPortableObject named: 'wardrobe' with: {aKey. aBox}.
	
	aRoom := Room withWidth: 5 height: 5 andObjects: (Dictionary with: (1@1 -> (aWardrobe))).

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North onRoom: aRoom.

	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: aKey).
	self assert: (playableCharacter backpackIncludes: aPaper).
	self deny: (playableCharacter backpackIncludes: aBox).
	self deny: (playableCharacter backpackIncludes: aWardrobe).
	self assert: (aRoom at: 1@1) equals: aWardrobe.
	self assert: (aWardrobe includes: aBox).
	self deny: (aWardrobe includes: aKey).
	self assert: (aBox isEmpty).
!

(NoPointsPortableObject named: '' weighing: 1) size!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FR 12/10/2020 20:51:22'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FR 12/10/2020 20:51:22'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FR 12/10/2020 20:51:22'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FR 12/10/2020 20:51:22'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FR 12/10/2020 20:51:22'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FR 12/10/2020 20:51:22'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FR 12/10/2020 20:51:22'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FR 12/10/2020 20:51:22'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FR 12/10/2020 20:51:22'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FR 12/10/2020 20:51:22'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FR 12/10/2020 20:51:22'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FR 12/10/2020 20:51:22'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FR 12/10/2020 20:51:22'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FR 12/10/2020 20:51:22'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FR 12/10/2020 20:51:22'!
PASSED!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfEmptyNonPortableObject stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #ObjectTakingTest #test04PlayerCanTakeContentsOfNonPortableObjectWithPortableObjects stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #ObjectTakingTest #test05PlayerCanTakeContentsOfNonPortableObjectWithBothKindsOfStageObjects stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #PlayableCharacterTest #test14PlayerCannotMoveBackwardsOutOfBounds stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #PlayableCharacterTest #test15PlayerCannotMoveToOccupiedPosition stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 20:51:23'!
PASSED!

!testRun: #RoomTest #test08RoomIsCreatedCorrectlyWhenEverythingIsValid stamp: 'FR 12/10/2020 20:51:23'!
PASSED!
!ObjectTakingTest methodsFor: 'private - instances' stamp: 'FR 12/10/2020 20:55:31'!
aBackpackWithMaxWeightTen

	^ Backpack containingUpTo: 10 limitingPointsTo: 100! !
!ObjectTakingTest methodsFor: 'tests' stamp: 'FR 12/10/2020 20:56:52'!
test06PlayerCanPartiallyTakeContentsOfNonPortableObject

	| playableCharacter aWardrobe aKey aScarf aPaper aRoom |
		
	aKey := NoPointsPortableObject named: 'key' weighing: 5.
	aPaper := PointsPortableObject named: 'paper' weighing: 5 worth: 5.
	aScarf := PointsPortableObject named: 'scarf' weighing: 5 worth: 10.
	aWardrobe := NonPortableObject named: 'wardrobe' with: {aKey. aPaper. aScarf}.
	
	aRoom := Room withWidth: 5 height: 5 andObjects: (Dictionary with: (1@1 -> (aWardrobe))).

	playableCharacter := PlayableCharacter named: 'Luigi' using: self aBackpackWithMaxWeightTen at: 1@0 heading: #North onRoom: aRoom.

	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: aKey).
	self assert: (playableCharacter backpackIncludes: aPaper).
	self deny: (playableCharacter backpackIncludes: aScarf).
	self deny: (playableCharacter backpackIncludes: aWardrobe).
	self assert: (aRoom at: 1@1) equals: aWardrobe.
	self deny: (aWardrobe includes: aKey).
	self deny: (aWardrobe includes: aPaper).
	self assert: (aWardrobe includes: aScarf).! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 20:56:55'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 20:56:55'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfEmptyNonPortableObject stamp: 'FR 12/10/2020 20:56:55'!
PASSED!

!testRun: #ObjectTakingTest #test04PlayerCanTakeContentsOfNonPortableObjectWithPortableObjects stamp: 'FR 12/10/2020 20:56:55'!
PASSED!

!testRun: #ObjectTakingTest #test05PlayerCanTakeContentsOfNonPortableObjectWithBothKindsOfStageObjects stamp: 'FR 12/10/2020 20:56:55'!
PASSED!

!testRun: #ObjectTakingTest #test06PlayerCanPartiallyTakeContentsOfNonPortableObject stamp: 'FR 12/10/2020 20:56:55'!
FAILURE!

!testRun: #ObjectTakingTest #test06PlayerCanPartiallyTakeContentsOfNonPortableObject stamp: 'FR 12/10/2020 20:56:55'!
FAILURE!
!ObjectTakingTest methodsFor: 'tests' stamp: 'FR 12/10/2020 21:01:12' prior: 50879952!
test06PlayerCanPartiallyTakeContentsOfNonPortableObject

	| playableCharacter aWardrobe aKey aScarf aPaper aRoom |
		
	aKey := NoPointsPortableObject named: 'key' weighing: 5.
	aPaper := PointsPortableObject named: 'paper' weighing: 5 worth: 5.
	aScarf := PointsPortableObject named: 'scarf' weighing: 15 worth: 10.
	aWardrobe := NonPortableObject named: 'wardrobe' with: {aKey. aPaper. aScarf}.
	
	aRoom := Room withWidth: 5 height: 5 andObjects: (Dictionary with: (1@1 -> (aWardrobe))).

	playableCharacter := PlayableCharacter named: 'Luigi' using: self aBackpackWithMaxWeightTen at: 1@0 heading: #North onRoom: aRoom.

	playableCharacter take.

	self assert: (playableCharacter backpackIncludes: aKey).
	self assert: (playableCharacter backpackIncludes: aPaper).
	self deny: (playableCharacter backpackIncludes: aScarf).
	self deny: (playableCharacter backpackIncludes: aWardrobe).
	self assert: (aRoom at: 1@1) equals: aWardrobe.
	self deny: (aWardrobe includes: aKey).
	self deny: (aWardrobe includes: aPaper).
	self assert: (aWardrobe includes: aScarf).! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 21:01:14'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 21:01:14'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfEmptyNonPortableObject stamp: 'FR 12/10/2020 21:01:14'!
PASSED!

!testRun: #ObjectTakingTest #test04PlayerCanTakeContentsOfNonPortableObjectWithPortableObjects stamp: 'FR 12/10/2020 21:01:14'!
PASSED!

!testRun: #ObjectTakingTest #test05PlayerCanTakeContentsOfNonPortableObjectWithBothKindsOfStageObjects stamp: 'FR 12/10/2020 21:01:14'!
PASSED!

!testRun: #ObjectTakingTest #test06PlayerCanPartiallyTakeContentsOfNonPortableObject stamp: 'FR 12/10/2020 21:01:14'!
ERROR!

!testRun: #ObjectTakingTest #test06PlayerCanPartiallyTakeContentsOfNonPortableObject stamp: 'FR 12/10/2020 21:01:14'!
ERROR!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 21:02:18' prior: 50876435!
takeNonPortableObject: aNonPortableObject

	[ aNonPortableObject do: [ :aStageObject | aStageObject takenBy: self ] ] on: Error do: []! !

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 21:02:21'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 21:02:22'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfEmptyNonPortableObject stamp: 'FR 12/10/2020 21:02:22'!
PASSED!

!testRun: #ObjectTakingTest #test04PlayerCanTakeContentsOfNonPortableObjectWithPortableObjects stamp: 'FR 12/10/2020 21:02:22'!
PASSED!

!testRun: #ObjectTakingTest #test05PlayerCanTakeContentsOfNonPortableObjectWithBothKindsOfStageObjects stamp: 'FR 12/10/2020 21:02:22'!
PASSED!

!testRun: #ObjectTakingTest #test06PlayerCanPartiallyTakeContentsOfNonPortableObject stamp: 'FR 12/10/2020 21:02:22'!
PASSED!
!RoomTest methodsFor: 'assertions' stamp: 'FR 12/10/2020 21:05:26'!
creatinRoomWithWidth: aWidth height: aHeight andObjects: aDictionaryOfObjects shouldRaiseErrorWithDescription: anErrorDescription

	self should: [ Room withWidth: aWidth height: aHeight andObjects: aDictionaryOfObjects ]
		raise: self functionalException
		withMessageText: anErrorDescription! !
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 21:07:32'!
test09CannotHaveMultipleObjectsOnSamePosition
	
	self should: [ Room withWidth: 5 height: 5 andObjects: self aDictionaryWithMultipleObjectsOnSamePosition ]
		raise: self functionalException
		withMessageText: Room multipleObjectsErrorDescription.! !
!RoomTest methodsFor: 'private - instances' stamp: 'FR 12/10/2020 21:08:22'!
aDictionaryWithMultipleObjectsOnSamePosition

	| aStageObject anotherStageObject |
	
	aStageObject := PointsPortableObject named: 'key' weighing: 1 worth: 1.
	anotherStageObject := PointsPortableObject named: 'coin' weighing: 1 worth: 1.
 
	^ Dictionary with: (1@1 -> ({aStageObject. anotherStageObject}))! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test08RoomIsCreatedCorrectlyWhenEverythingIsValid stamp: 'FR 12/10/2020 21:08:25'!
PASSED!

!testRun: #RoomTest #test09CannotHaveMultipleObjectsOnSamePosition stamp: 'FR 12/10/2020 21:08:25'!
ERROR!

!testRun: #RoomTest #test09CannotHaveMultipleObjectsOnSamePosition stamp: 'FR 12/10/2020 21:08:25'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'FR 12/10/2020 21:08:30'!
multipleObjectsErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'FR 12/10/2020 21:08:39' prior: 50880180!
multipleObjectsErrorDescription
	
	^ 'Cannot have multiple objects on the same position!!'! !

!testRun: #RoomTest #test09CannotHaveMultipleObjectsOnSamePosition stamp: 'FR 12/10/2020 21:08:40'!
FAILURE!
!StageObject methodsFor: 'accessing' stamp: 'FR 12/10/2020 21:08:52' overrides: 16880927!
size

	^1! !
!Room class methodsFor: 'instance creation' stamp: 'FR 12/10/2020 21:09:39' prior: 50876161!
withWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects
	
	self assertIsValidWidth: aWidth.
	self assertIsValidHeight: aHeight.
	self assertObjects: aDictionaryOfStageObjects areWithingBoundsOf: (aWidth-1)@(aHeight-1).
	self assertAtMostOneObjectInEachPosition: aDictionaryOfStageObjects.
	
	^self new initializeWithWidth: aWidth height: aHeight andObjects: aDictionaryOfStageObjects ! !
!Room class methodsFor: 'assertions' stamp: 'FR 12/10/2020 21:10:31'!
assertAtMostOneObjectInEachPosition: aDictionaryOfStageObjects

	(aDictionaryOfStageObjects allSatisfy: [ :aValue | aValue size = 1]) ifFalse: [ self signalMultipleObjects ]! !
!Room class methodsFor: 'errors' stamp: 'FR 12/10/2020 21:10:42'!
signalMultipleObjects

	self error: self multipleObjectsErrorDescription! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 21:10:44'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 21:10:44'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 21:10:44'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 21:10:44'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 21:10:44'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 21:10:44'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 21:10:44'!
PASSED!

!testRun: #RoomTest #test08RoomIsCreatedCorrectlyWhenEverythingIsValid stamp: 'FR 12/10/2020 21:10:44'!
PASSED!

!testRun: #RoomTest #test09CannotHaveMultipleObjectsOnSamePosition stamp: 'FR 12/10/2020 21:10:44'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfEmptyNonPortableObject stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #ObjectTakingTest #test04PlayerCanTakeContentsOfNonPortableObjectWithPortableObjects stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #ObjectTakingTest #test05PlayerCanTakeContentsOfNonPortableObjectWithBothKindsOfStageObjects stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #ObjectTakingTest #test06PlayerCanPartiallyTakeContentsOfNonPortableObject stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 21:10:46'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test14PlayerCannotMoveBackwardsOutOfBounds stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test15PlayerCannotMoveToOccupiedPosition stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #RoomTest #test08RoomIsCreatedCorrectlyWhenEverythingIsValid stamp: 'FR 12/10/2020 21:10:47'!
PASSED!

!testRun: #RoomTest #test09CannotHaveMultipleObjectsOnSamePosition stamp: 'FR 12/10/2020 21:10:47'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 21:12:32' prior: 50875436!
test01WidthOfRoomCannotBeZero
	
	self creatinRoomWithWidth: 0 height: 5 andObjects: Dictionary new  shouldRaiseErrorWithDescription: Room invalidWidthErrorDescription
	"self should: [ Room withWidth: 0 height: 5 andObjects: Dictionary new ]
		raise: self functionalException
		withMessageText: Room invalidWidthErrorDescription."! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 21:12:34'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 21:12:38' prior: 50880420!
test01WidthOfRoomCannotBeZero
	
	self creatinRoomWithWidth: 0 height: 5 andObjects: Dictionary new  shouldRaiseErrorWithDescription: Room invalidWidthErrorDescription! !
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 21:13:01' prior: 50875445!
test02WidthOfRoomCannotBeNegative
	
	self creatinRoomWithWidth: -2 height: 5 andObjects: Dictionary new shouldRaiseErrorWithDescription: Room invalidWidthErrorDescription! !
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 21:13:28' prior: 50875454!
test03WidthOfRoomMustBeInteger
	
	self creatinRoomWithWidth: 0.5 height: 5 andObjects: Dictionary new shouldRaiseErrorWithDescription: Room invalidWidthErrorDescription! !
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 21:13:39' prior: 50880436!
test01WidthOfRoomCannotBeZero
	
	self  creatinRoomWithWidth: 0
		height: 5
		andObjects: Dictionary new
		shouldRaiseErrorWithDescription: Room invalidWidthErrorDescription! !
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 21:13:50' prior: 50880444!
test02WidthOfRoomCannotBeNegative
	
	self  creatinRoomWithWidth: -2
		height: 5
		andObjects: Dictionary new
		shouldRaiseErrorWithDescription: Room invalidWidthErrorDescription! !
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 21:14:01' prior: 50880452!
test03WidthOfRoomMustBeInteger
	
	self  creatinRoomWithWidth: 0.5
		height: 5
		andObjects: Dictionary new
		shouldRaiseErrorWithDescription: Room invalidWidthErrorDescription! !
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 21:14:26' prior: 50875463!
test04HeightOfRoomCannotBeZero
	
	self  creatinRoomWithWidth: 5
		height: 0
		andObjects: Dictionary new
		shouldRaiseErrorWithDescription: Room invalidHeightErrorDescription! !
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 21:14:54' prior: 50875472!
test05HeightOfRoomCannotBeNegative
	
	self  creatinRoomWithWidth: 5
		height: -5
		andObjects: Dictionary new
		shouldRaiseErrorWithDescription: Room invalidHeightErrorDescription! !
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 21:15:19' prior: 50875481!
test06HeightOfRoomMustBeInteger
	
	self  creatinRoomWithWidth: 5
		height: 0.5
		andObjects: Dictionary new
		shouldRaiseErrorWithDescription: Room invalidHeightErrorDescription! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 21:15:20'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 21:15:20'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 21:15:21'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 21:15:21'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 21:15:21'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 21:15:21'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 21:15:21'!
PASSED!

!testRun: #RoomTest #test08RoomIsCreatedCorrectlyWhenEverythingIsValid stamp: 'FR 12/10/2020 21:15:21'!
PASSED!

!testRun: #RoomTest #test09CannotHaveMultipleObjectsOnSamePosition stamp: 'FR 12/10/2020 21:15:21'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 21:16:01' prior: 50880125!
test09CannotHaveMultipleObjectsOnSamePosition
	
	self  creatinRoomWithWidth: 5
		height: 5
		andObjects: self aDictionaryWithMultipleObjectsOnSamePosition 
		shouldRaiseErrorWithDescription: Room multipleObjectsErrorDescription! !
!RoomTest methodsFor: 'tests' stamp: 'FR 12/10/2020 21:16:29' prior: 50875490!
test07CannotPlaceObjectAtInvalidPosition
	
	self  creatinRoomWithWidth: 5
		height: 5
		andObjects: self aDictionaryWithStageObjectsOutOfBounds 
		shouldRaiseErrorWithDescription: Room objectOutOfBoundsErrorDescription! !

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 21:16:30'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 21:16:30'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 21:16:30'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 21:16:30'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 21:16:30'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 21:16:30'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 21:16:31'!
PASSED!

!testRun: #RoomTest #test08RoomIsCreatedCorrectlyWhenEverythingIsValid stamp: 'FR 12/10/2020 21:16:31'!
PASSED!

!testRun: #RoomTest #test09CannotHaveMultipleObjectsOnSamePosition stamp: 'FR 12/10/2020 21:16:31'!
PASSED!
!StageObject methodsFor: 'taking' stamp: 'FR 12/10/2020 21:19:16'!
removedBy: aPlayableCharacter at: myPosition

	self subclassResponsibility! !
!StageObject methodsFor: 'taking' stamp: 'FR 12/10/2020 21:19:59'!
takenBy: aPlayableCharacter

	self subclassResponsibility! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 21:21:05'!
positionInFrontOfMe

	^ position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 21:21:05' prior: 50876335!
take

	| positionOfObjectToTake objectToTake |
	
	positionOfObjectToTake := self positionInFrontOfMe.
	[ objectToTake := room at: positionOfObjectToTake ] on: Error do: [ self signalNoObjectToTake ].

	objectToTake takenBy: self.
	objectToTake removedBy: self at: positionOfObjectToTake.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 21:22:20'!
objectInFrontOfMe

	^ [ room at: self positionInFrontOfMe ] on: Error do: [ self signalNoObjectToTake ].! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FR 12/10/2020 21:22:46' prior: 50880604!
take

	| objectToTake |
	
	objectToTake := self objectInFrontOfMe.

	objectToTake takenBy: self.
	objectToTake removedBy: self at: self positionInFrontOfMe.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfEmptyNonPortableObject stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #ObjectTakingTest #test04PlayerCanTakeContentsOfNonPortableObjectWithPortableObjects stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #ObjectTakingTest #test05PlayerCanTakeContentsOfNonPortableObjectWithBothKindsOfStageObjects stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #ObjectTakingTest #test06PlayerCanPartiallyTakeContentsOfNonPortableObject stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 21:23:01'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #PlayableCharacterTest #test14PlayerCannotMoveBackwardsOutOfBounds stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #PlayableCharacterTest #test15PlayerCannotMoveToOccupiedPosition stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #RoomTest #test08RoomIsCreatedCorrectlyWhenEverythingIsValid stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #RoomTest #test09CannotHaveMultipleObjectsOnSamePosition stamp: 'FR 12/10/2020 21:23:02'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FR 12/10/2020 21:25:54'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FR 12/10/2020 21:25:54'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FR 12/10/2020 21:25:54'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FR 12/10/2020 21:25:54'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FR 12/10/2020 21:25:54'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FR 12/10/2020 21:25:54'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FR 12/10/2020 21:25:54'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #ObjectTakingTest #test01PlayerCanTakePortableObjectThatIsInReach stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #ObjectTakingTest #test02CannotTakeStageObjectThatIsNotDirectlyInFrontOfPlayer stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #ObjectTakingTest #test03PlayerCanTakeContentsOfEmptyNonPortableObject stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #ObjectTakingTest #test04PlayerCanTakeContentsOfNonPortableObjectWithPortableObjects stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #ObjectTakingTest #test05PlayerCanTakeContentsOfNonPortableObjectWithBothKindsOfStageObjects stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #ObjectTakingTest #test06PlayerCanPartiallyTakeContentsOfNonPortableObject stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test11InitialPlayerPositionMustBeWithinBoundsOfRoom stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test12InitialPlayerPositionMustNotBeAlreadyOccupied stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test13PlayerCannotMoveForwardsOutOfBounds stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test14PlayerCannotMoveBackwardsOutOfBounds stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test15PlayerCannotMoveToOccupiedPosition stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #RoomTest #test01WidthOfRoomCannotBeZero stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #RoomTest #test02WidthOfRoomCannotBeNegative stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #RoomTest #test03WidthOfRoomMustBeInteger stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #RoomTest #test04HeightOfRoomCannotBeZero stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #RoomTest #test05HeightOfRoomCannotBeNegative stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #RoomTest #test06HeightOfRoomMustBeInteger stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #RoomTest #test07CannotPlaceObjectAtInvalidPosition stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #RoomTest #test08RoomIsCreatedCorrectlyWhenEverythingIsValid stamp: 'FR 12/10/2020 21:25:55'!
PASSED!

!testRun: #RoomTest #test09CannotHaveMultipleObjectsOnSamePosition stamp: 'FR 12/10/2020 21:25:56'!
PASSED!