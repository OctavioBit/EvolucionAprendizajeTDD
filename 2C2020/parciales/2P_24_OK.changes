

----SNAPSHOT----(10 December 2020 20:06:33) CuisUniversity-4384-2.image priorSource: 17383099!

----STARTUP---- (10 December 2020 20:07:25) as /Users/vpomsztein/Documents/Facu/ISW1/Parcial2/CuisUniversity-4384-2.image!

!PlayableCharacter methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:09:06' prior: 50875044!
take: anObject

	anObject beTakenBy: self.! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:10:42'!
beTakenBy: aPlayableCharacter

	childObjects isEmpty ifTrue: [ ^self error: self class canNotCarryNonPortableObject ].
	aPlayableCharacter addToBackpack: self.! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:11:03' prior: 50874912 overrides: 50874889!
addTo: aBackpack

	childObjects first addTo: aBackpack.! !
!PortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:11:26'!
beTakenBy: aPlayableCharacter

	aPlayableCharacter addToBackpack: self.! !
!PlayableCharacter methodsFor: 'taking objects -- private' stamp: 'VP 12/10/2020 20:12:06'!
addToBackpack: anObject

	backpack add: anObject.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:12:36'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:12:36'!
FAILURE!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:12:36'!
FAILURE!
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:13:48' prior: 50875060!
beTakenBy: aPlayableCharacter

	childObjects isEmpty ifTrue: [ ^self error: self class canNotCarryNonPortableObject ].
	aPlayableCharacter addToBackpackNonPortableObject: self.! !
!PortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:13:59' prior: 50875074!
beTakenBy: aPlayableCharacter

	aPlayableCharacter addPortableObjectToBackpack: self.! !
!PlayableCharacter methodsFor: 'taking objects -- private' stamp: 'VP 12/10/2020 20:14:11'!
addPortableObjectToBackpack: anObject

	backpack add: anObject.! !

!methodRemoval: PlayableCharacter #addToBackpack: stamp: 'VP 12/10/2020 20:14:14'!
addToBackpack: anObject

	backpack add: anObject.!
!PlayableCharacter methodsFor: 'taking objects -- private' stamp: 'VP 12/10/2020 20:14:29'!
addToBackpackPortableObject: anObject

	backpack add: anObject.! !

!methodRemoval: PlayableCharacter #addPortableObjectToBackpack: stamp: 'VP 12/10/2020 20:14:29'!
addPortableObjectToBackpack: anObject

	backpack add: anObject.!
!PlayableCharacter methodsFor: 'taking objects -- private' stamp: 'VP 12/10/2020 20:14:43'!
addToBackpackNonPortableObject: anObject

	backpack add: anObject.! !

!methodRemoval: PlayableCharacter #addToBackpackPortableObject: stamp: 'VP 12/10/2020 20:14:43'!
addToBackpackPortableObject: anObject

	backpack add: anObject.!
!PlayableCharacter methodsFor: 'taking objects -- private' stamp: 'VP 12/10/2020 20:14:53'!
addToBackpackPortableObject: anObject

	backpack add: anObject.! !

!methodRemoval: PlayableCharacter #addToBackpackNonPortableObject: stamp: 'VP 12/10/2020 20:14:53'!
addToBackpackNonPortableObject: anObject

	backpack add: anObject.!
!PortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:15:18' prior: 50875184!
beTakenBy: aPlayableCharacter

	aPlayableCharacter addToBackpackPortableObject: self.! !
!PlayableCharacter methodsFor: 'taking objects -- private' stamp: 'VP 12/10/2020 20:15:31'!
addToBackpackNonPortableObject: anObject

	backpack add: anObject.! !
!PlayableCharacter methodsFor: 'taking objects -- private' stamp: 'VP 12/10/2020 20:15:40' prior: 50875035!
takeObjectAt: takePosition

	self assertThereIsObjectToTakeAt: takePosition.
	
	self take: (room objectAtCell: takePosition).! !
!PlayableCharacter methodsFor: 'taking objects -- private' stamp: 'VP 12/10/2020 20:15:52' prior: 50875222!
addToBackpackPortableObject: anObject

	backpack add: anObject.
	room objectWasTakenFrom: self takePosition.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:15:53'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:15:53'!
ERROR!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:15:53'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:15:58'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'VP 12/10/2020 20:20:11' prior: 50871669!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: self defaultRoom.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 20:22:07' prior: 50873553!
objectWasTakenFrom: aCell 
	
	contents removeKey: aCell ifAbsent: [].! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:22:09'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:22:09'!
PASSED!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:22:35'!
test21_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject

	| room playableCharacter objectToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #South in: room.
	
	objectToTake := (room objectAtCell: 3@0) portableObject.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 3@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@0)).
	self assert: (playableCharacter backpackIncludes: objectToTake).! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:23:34' prior: 50875453!
test21_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject

	| room playableCharacter objectsToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #South in: room.
	
	objectsToTake := (room objectAtCell: 2@0) portableObjects.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 2@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@0)).
	objectsToTake do: [ :anObjectToTake |
		self assert: (playableCharacter backpackIncludes: anObjectToTake)
	].! !
!NonPortableObject methodsFor: 'accessing' stamp: 'VP 12/10/2020 20:23:49'!
portableObjects
	
	^childObjects ocpy.! !
!NonPortableObject methodsFor: 'accessing' stamp: 'VP 12/10/2020 20:23:51' prior: 50875494!
portableObjects
	
	^childObjects copy.! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:24:09'!
test22_PlayableCharacterCanTakePortableObjectInsideNonPortableObject

	| room playableCharacter objectToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #South in: room.
	
	objectToTake := (room objectAtCell: 3@0) portableObject.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 3@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@0)).
	self assert: (playableCharacter backpackIncludes: objectToTake).! !

!methodRemoval: PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:24:09'!
test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject

	| room playableCharacter objectToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #South in: room.
	
	objectToTake := (room objectAtCell: 3@0) portableObject.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 3@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@0)).
	self assert: (playableCharacter backpackIncludes: objectToTake).!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:24:16'!
test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject

	| room playableCharacter objectToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #South in: room.
	
	objectToTake := (room objectAtCell: 3@0) portableObject.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 3@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@0)).
	self assert: (playableCharacter backpackIncludes: objectToTake).! !

!methodRemoval: PlayableCharacterTest #test22_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:24:16'!
test22_PlayableCharacterCanTakePortableObjectInsideNonPortableObject

	| room playableCharacter objectToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #South in: room.
	
	objectToTake := (room objectAtCell: 3@0) portableObject.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 3@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@0)).
	self assert: (playableCharacter backpackIncludes: objectToTake).!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:24:20'!
test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject

	| room playableCharacter objectsToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #South in: room.
	
	objectsToTake := (room objectAtCell: 2@0) portableObjects.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 2@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@0)).
	objectsToTake do: [ :anObjectToTake |
		self assert: (playableCharacter backpackIncludes: anObjectToTake)
	].! !

!methodRemoval: PlayableCharacterTest #test21_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:24:20'!
test21_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject

	| room playableCharacter objectsToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #South in: room.
	
	objectsToTake := (room objectAtCell: 2@0) portableObjects.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 2@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@0)).
	objectsToTake do: [ :anObjectToTake |
		self assert: (playableCharacter backpackIncludes: anObjectToTake)
	].!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:24:29' prior: 50875544!
test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject

	| room playableCharacter objectToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #South in: room.
	
	objectToTake := (room objectAtCell: 3@0) portableObjects first.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 3@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@0)).
	self assert: (playableCharacter backpackIncludes: objectToTake).! !

!methodRemoval: NonPortableObject #portableObject stamp: 'VP 12/10/2020 20:24:40'!
portableObject
	
	^childObjects first.!
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 20:25:23'!
multiplePortableObjectsNonPortableObject
	
	^NonPortableObject named: 'Perchero' containing: {self defaultPortableObject. NoPointsPortableObject named: 'Book' weighing: 5}.! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 20:25:35' prior: 50875654!
multiplePortableObjectsNonPortableObject
	
	^NonPortableObject 
		named: 'Perchero' 
		containing: {self defaultPortableObject. NoPointsPortableObject named: 'Book' weighing: 5}.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:25:37'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:25:37'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:25:37'!
ERROR!
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 20:25:54' prior: 50874804!
defaultRoom

	| room |
	room := Room withDimension: 4@5.
	room put: self emptyNonPortableObject at: 3@4.
	room put: self singleObjectNonPortableObject at: 3@0.
	room put: self multiplePortableObjectsNonPortableObject at: 2@0.
	room put: self defaultPortableObject at: 0@4.
	
	^room.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:25:55'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:25:55'!
FAILURE!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:25:55'!
FAILURE!
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:26:39' prior: 50875069 overrides: 50874889!
addTo: aBackpack

	childObjects do: [ :aChildObject |
		aChildObject addTo: aBackpack.
	].! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:26:41' prior: 50875875 overrides: 50874889!
addTo: aBackpack

	childObjects do: [ :aChildObject |
		aChildObject addTo: aBackpack
	].! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:26:42'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:26:46'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:26:47'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:26:47'!
PASSED!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:28:00'!
test23_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject

	| room playableCharacter objectsToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #South in: room.
	
	objectsToTake := (room objectAtCell: 2@0) portableObjects.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 2@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@0)).
	objectsToTake do: [ :anObjectToTake |
		self assert: (playableCharacter backpackIncludes: anObjectToTake)
	].! !
!NonPortableObject methodsFor: 'accessing' stamp: 'VP 12/10/2020 20:28:16'!
childObjects
	
	^childObjects copy.! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 20:28:16' prior: 50875630!
test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject

	| room playableCharacter objectToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #South in: room.
	
	objectToTake := (room objectAtCell: 3@0) childObjects first.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 3@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@0)).
	self assert: (playableCharacter backpackIncludes: objectToTake).! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 20:28:16' prior: 50875585!
test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject

	| room playableCharacter objectsToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #South in: room.
	
	objectsToTake := (room objectAtCell: 2@0) childObjects.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 2@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@0)).
	objectsToTake do: [ :anObjectToTake |
		self assert: (playableCharacter backpackIncludes: anObjectToTake)
	].! !

!methodRemoval: NonPortableObject #portableObjects stamp: 'VP 12/10/2020 20:28:16'!
portableObjects
	
	^childObjects copy.!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:28:23' prior: 50876105!
test23_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject

	| room playableCharacter objectsToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #South in: room.
	
	objectsToTake := (room objectAtCell: 2@0) childObjects.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 2@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@0)).
	objectsToTake do: [ :anObjectToTake |
		self assert: (playableCharacter backpackIncludes: anObjectToTake)
	].! !

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:28:23'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:28:23'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:28:23'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:28:23'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:28:24'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:28:24'!
PASSED!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:28:35' prior: 50876177!
test23_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject

	| room playableCharacter objectsToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #South in: room.
	
	objectsToTake := (room objectAtCell: 1@0) childObjects.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 1@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 1@0)).
	objectsToTake do: [ :anObjectToTake |
		self assert: (playableCharacter backpackIncludes: anObjectToTake)
	].! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 20:29:18'!
onlyPortableObjectsNonPortableObject
	
	^NonPortableObject 
		named: 'Perchero' 
		containing: {self defaultPortableObject. NoPointsPortableObject named: 'Book' weighing: 5}.! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 20:29:18' prior: 50875767!
defaultRoom

	| room |
	room := Room withDimension: 4@5.
	room put: self emptyNonPortableObject at: 3@4.
	room put: self singleObjectNonPortableObject at: 3@0.
	room put: self onlyPortableObjectsNonPortableObject at: 2@0.
	room put: self defaultPortableObject at: 0@4.
	
	^room.! !

!methodRemoval: PlayableCharacterTest #multiplePortableObjectsNonPortableObject stamp: 'VP 12/10/2020 20:29:18'!
multiplePortableObjectsNonPortableObject
	
	^NonPortableObject 
		named: 'Perchero' 
		containing: {self defaultPortableObject. NoPointsPortableObject named: 'Book' weighing: 5}.!
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 20:29:43'!
multipleObjectsNonPortableObject
	
	^NonPortableObject 
		named: 'Perchero' 
		containing: {self defaultPortableObject. NoPointsPortableObject named: 'Book' weighing: 5. self emptyNonPortableObject }.! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 20:29:59' prior: 50876328!
defaultRoom

	| room |
	room := Room withDimension: 4@5.
	room put: self emptyNonPortableObject at: 3@4.
	room put: self singleObjectNonPortableObject at: 3@0.
	room put: self onlyPortableObjectsNonPortableObject at: 2@0.
	room put: self onlyPortableObjectsNonPortableObject at: 1@0.
	room put: self defaultPortableObject at: 0@4.
	
	^room.! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 20:30:04' prior: 50876359!
defaultRoom

	| room |
	room := Room withDimension: 4@5.
	room put: self emptyNonPortableObject at: 3@4.
	room put: self singleObjectNonPortableObject at: 3@0.
	room put: self onlyPortableObjectsNonPortableObject at: 2@0.
	room put: self multipleObjectsNonPortableObject at: 1@0.
	room put: self defaultPortableObject at: 0@4.
	
	^room.! !

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:30:09'!
FAILURE!
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 20:31:40' prior: 50876373!
defaultRoom

	| room |
	room := Room withDimension: 4@5.
	room put: self emptyNonPortableObject at: 3@4.
	room put: self singleObjectNonPortableObject at: 3@0.
	room put: self multipleObjectsNonPortableObject at: 2@0.
	room put: self defaultPortableObject at: 0@4.
	
	^room.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:31:41'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:31:41'!
FAILURE!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:31:41'!
ERROR!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:31:44'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:31:47'!
FAILURE!

!methodRemoval: PlayableCharacterTest #test23_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:31:58'!
test23_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject

	| room playableCharacter objectsToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #South in: room.
	
	objectsToTake := (room objectAtCell: 1@0) childObjects.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 1@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 1@0)).
	objectsToTake do: [ :anObjectToTake |
		self assert: (playableCharacter backpackIncludes: anObjectToTake)
	].!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:32:38' prior: 50876151!
test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject

	| room playableCharacter objectsToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #South in: room.
	
	objectsToTake := (room objectAtCell: 2@0) childObjects.
	objectsToTake removeLast.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 2@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@0)).
	objectsToTake do: [ :anObjectToTake |
		self assert: (playableCharacter backpackIncludes: anObjectToTake)
	].! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:32:39'!
ERROR!
!NonPortableObject methodsFor: 'initialization' stamp: 'VP 12/10/2020 20:33:08' prior: 50874843!
initializeNamed: anObjectName containing: someContainedObjects
	
	name := anObjectName.
	childObjects := OrderedCollection newFrom: someContainedObjects.! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:33:09'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:33:13'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:33:13'!
PASSED!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:35:28'!
test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject

	| room playableCharacter objectsToTake objectsToLeave |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #South in: room.
	
	objectsToTake := (room objectAtCell: 2@0) childObjects.
	objectsToLeave := OrderedCollection with: (room objectAtCell: 2@0).
	objectsToLeave add: objectsToTake last.
	objectsToTake removeLast.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 2@0).
	objectsToLeave do: [ :anObjectToTake |
		self deny: (playableCharacter backpackIncludes: anObjectToTake)
	].
	objectsToTake do: [ :anObjectToTake |
		self assert: (playableCharacter backpackIncludes: anObjectToTake)
	].! !

!methodRemoval: PlayableCharacterTest #test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:35:41'!
test22_PlayableCharacterCanTakeMultiplePortableObjectsInsideNonPortableObject

	| room playableCharacter objectsToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #South in: room.
	
	objectsToTake := (room objectAtCell: 2@0) childObjects.
	objectsToTake removeLast.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 2@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@0)).
	objectsToTake do: [ :anObjectToTake |
		self assert: (playableCharacter backpackIncludes: anObjectToTake)
	].!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:35:42'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:35:42'!
PASSED!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:36:25'!
test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@3 heading: #North in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: NonPortableObject canNotCarryNonPortableObject equals: anError messageText.
			self assert: (room hasObjectAt: 3@4).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@4)).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:36:29' prior: 50876928!
test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@3 heading: #South in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: NonPortableObject canNotCarryNonPortableObject equals: anError messageText.
			self assert: (room hasObjectAt: 3@4).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@4)).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:36:51' prior: 50876949!
test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #South in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: NonPortableObject canNotCarryNonPortableObject equals: anError messageText.
			self assert: (room hasObjectAt: 1@0).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 1@0)).
		].! !

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 20:36:56'!
FAILURE!
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 20:37:36'!
nonPortableObjectWithoutPortableObjects
	
	^NonPortableObject named: 'Perchero' containing: {self emptyNonPortableObject}.! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 20:37:45' prior: 50876392!
defaultRoom

	| room |
	room := Room withDimension: 4@5.
	room put: self emptyNonPortableObject at: 3@4.
	room put: self singleObjectNonPortableObject at: 3@0.
	room put: self multipleObjectsNonPortableObject at: 2@0.
	room put: self nonPortableObjectWithoutPortableObjects at: 1@0.
	room put: self defaultPortableObject at: 0@4.
	
	^room.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:37:49'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:37:49'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 20:37:49'!
FAILURE!
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 20:38:10' prior: 50877003!
defaultRoom

	| room |
	room := Room withDimension: 4@5.
	room put: self emptyNonPortableObject at: 3@4.
	room put: self singleObjectNonPortableObject at: 3@0.
	room put: self multipleObjectsNonPortableObject at: 2@0.
	room put: self nonPortableObjectWithoutPortableObjects at: 2@4.
	room put: self defaultPortableObject at: 0@4.
	
	^room.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:38:12'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 20:38:12'!
FAILURE!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 20:38:12'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:38:18'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 20:38:18'!
FAILURE!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 20:38:18'!
FAILURE!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:38:46' prior: 50876970!
test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #North in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: NonPortableObject canNotCarryNonPortableObject equals: anError messageText.
			self assert: (room hasObjectAt: 2@4).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@4)).
		].! !

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 20:38:47'!
FAILURE!

!methodRemoval: StageObject #assertCanAddTo: stamp: 'VP 12/10/2020 20:39:58'!
assertCanAddTo: aBackpack

	self subclassResponsibility	!

!methodRemoval: NonPortableObject #assertCanAddTo: stamp: 'VP 12/10/2020 20:40:11'!
assertCanAddTo: aBackpack

	^self error: self class canNotCarryNonPortableObject.!
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:41:20' prior: 50875175!
beTakenBy: aPlayableCharacter

	(childObjects anySatisfy: [ :aChildObject | aChildObject isPortable ]) ifTrue: [ ^self error: self class canNotCarryNonPortableObject ].
	aPlayableCharacter addToBackpackNonPortableObject: self.! !
!StageObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:42:39'!
isPortable

	^self subclassResponsibility.! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:42:58' overrides: 50877371!
isPortable

	^false! !
!PortableObject methodsFor: 'accessing' stamp: 'VP 12/10/2020 20:43:08' overrides: 50877371!
isPortable

	^true.! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:43:40'!
containsPortableObject

	^ childObjects anySatisfy: [ :aChildObject | aChildObject isPortable ]! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:43:40' prior: 50877361!
beTakenBy: aPlayableCharacter

	(self containsPortableObject) ifTrue: [ ^self error: self class canNotCarryNonPortableObject ].
	aPlayableCharacter addToBackpackNonPortableObject: self.! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:43:44' prior: 50877389!
beTakenBy: aPlayableCharacter

	self containsPortableObject ifTrue: [ ^self error: self class canNotCarryNonPortableObject ].
	aPlayableCharacter addToBackpackNonPortableObject: self.! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:44:10' prior: 50877398!
beTakenBy: aPlayableCharacter

	self containsPortableObject ifTrue: [ self error: self class canNotCarryNonPortableObject ].
	aPlayableCharacter addToBackpackNonPortableObject: self.! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:44:33'!
assertCanTakeSomething

	^ self containsPortableObject ifTrue: [ self error: self class canNotCarryNonPortableObject ]! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:44:33' prior: 50877407!
beTakenBy: aPlayableCharacter

	self assertCanTakeSomething.
	aPlayableCharacter addToBackpackNonPortableObject: self.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:44:53'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:44:53'!
FAILURE!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:44:53'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:44:53'!
ERROR!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 20:44:53'!
FAILURE!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:44:56'!
FAILURE!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:44:56'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:44:56'!
ERROR!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 20:44:56'!
FAILURE!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 20:44:56'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:45:05'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:45:05'!
FAILURE!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:45:05'!
ERROR!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:45:05'!
ERROR!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 20:45:05'!
FAILURE!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:45:09'!
FAILURE!
!NonPortableObject methodsFor: 'assertions -- private' stamp: 'VP 12/10/2020 20:45:31' prior: 50877416!
assertCanTakeSomething

	^ self containsPortableObject ifFalse: [ self error: self class canNotCarryNonPortableObject ]! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 20:45:32'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 20:45:35'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 20:45:35'!
PASSED!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:47:16' prior: 50876131!
test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject

	| room playableCharacter objectToTake nonPortableObject |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #South in: room.
	
	nonPortableObject := room objectAtCell: 3@0.
	objectToTake := nonPortableObject childObjects first.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 3@0).
	self deny: (playableCharacter backpackIncludes: nonPortableObject).
	self assert: (playableCharacter backpackIncludes: objectToTake).
	self deny: (nonPortableObject contains: objectToTake).! !

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:47:22'!
ERROR!
!NonPortableObject methodsFor: 'accessing' stamp: 'VP 12/10/2020 20:47:29'!
contains: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'accessing' stamp: 'VP 12/10/2020 20:48:37' prior: 50878164!
contains: anObject 
	
	^childObjects anySatisfy: [ :aChildObject |
		aChildObject = anObject or: [ aChildObject contains: anObject ]
	].! !

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:48:40'!
FAILURE!
!PortableObject methodsFor: 'testing' stamp: 'VP 12/10/2020 20:49:04'!
contains: anObject
	
	^false.! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:54:44' prior: 50875882 overrides: 50874889!
addTo: aBackpack

	childObjects do: [ :aChildObject |
		aChildObject addTo: aBackpack
	].! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:55:54' prior: 50878186 overrides: 50874889!
addTo: aBackpack

	childObjects do: [ :aChildObject |
		aChildObject addTo: aBackpack.
		aChildObject addedToBackpackFrom: self.
	].! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:56:53'!
addedToBackpackFrom: anObject

	! !
!PortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:57:36'!
addedToBackpackFrom: anObject

	anObject removePortableObject: self.! !
!NonPortableObject methodsFor: 'adding -- private' stamp: 'VP 12/10/2020 20:58:25'!
removePortableObject: aPortableObject

	childObjects remove: aPortableObject.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:58:51'!
FAILURE!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 20:58:51'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 20:58:51'!
FAILURE!

(room objectAtCell: 2@0) childObjects!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 21:01:40'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 21:01:40'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 21:01:40'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 21:01:40'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 21:01:40'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 21:01:40'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 21:01:40'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 21:01:40'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 21:01:40'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 21:01:40'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 21:01:43'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 21:01:43'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 21:01:43'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 21:01:43'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 21:01:43'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:01:43'!
FAILURE!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 21:01:43'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:01:43'!
FAILURE!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:02:30'!
FAILURE!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:02:58' prior: 50876783!
test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject

	| room playableCharacter objectsToTake objectsToLeave |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #South in: room.
	
	objectsToTake := (room objectAtCell: 2@0) childObjects.
	objectsToLeave := OrderedCollection with: (room objectAtCell: 2@0).
	objectsToLeave add: objectsToTake last.
	objectsToTake removeLast.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 2@0).
	objectsToLeave do: [ :anObjectToLeave |
		self deny: (playableCharacter backpackIncludes: anObjectToLeave)
	].
	objectsToTake do: [ :anObjectToTake |
		self assert: (playableCharacter backpackIncludes: anObjectToTake)
	].! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:03:00'!
FAILURE!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:03:39'!
FAILURE!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:03:39'!
FAILURE!

(room objectAtCell: 2@0)!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:04:56'!
FAILURE!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:04:56'!
FAILURE!
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 21:08:29' prior: 50878193 overrides: 50874889!
addTo: aBackpack

	childObjects do: [ :aChildObject |
		aChildObject addTo: aBackpack.
	].! !

!methodRemoval: NonPortableObject #addedToBackpackFrom: stamp: 'VP 12/10/2020 21:08:32'!
addedToBackpackFrom: anObject

	!

!methodRemoval: NonPortableObject #removePortableObject: stamp: 'VP 12/10/2020 21:08:37'!
removePortableObject: aPortableObject

	childObjects remove: aPortableObject.!

!methodRemoval: PortableObject #addedToBackpackFrom: stamp: 'VP 12/10/2020 21:08:41'!
addedToBackpackFrom: anObject

	anObject removePortableObject: self.!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 21:08:44'!
FAILURE!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 21:08:44'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 21:08:44'!
FAILURE!
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 21:11:03' prior: 50877423!
beTakenBy: aPlayableCharacter

	self assertCanTakeSomething.
	aPlayableCharacter addToBackpackNonPortableObject: self.! !

----SNAPSHOT----(10 December 2020 21:11:07) CuisUniversity-4384-2.image priorSource: 17388715!
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 21:11:55' prior: 50878567!
beTakenBy: aPlayableCharacter

	self assertCanTakeSomething.
	aPlayableCharacter addToBackpackNonPortableObject: self.! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 21:13:27' prior: 50878447 overrides: 50874889!
addTo: aBackpack

	| addedObjects |
	addedObjects := OrderedCollection new.
	childObjects do: [ :aChildObject |
		aChildObject addTo: aBackpack.
		addedObjects add: aChildObject.
	].

	childObjects removeAll: (addedObjects select: [ :anObject | anObject isPortable ])! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 21:13:36' prior: 50878585 overrides: 50874889!
addTo: aBackpack

	| addedObjects |
	addedObjects := OrderedCollection new.
	
	childObjects do: [ :aChildObject |
		aChildObject addTo: aBackpack.
		addedObjects add: aChildObject.
	].

	childObjects removeAll: (addedObjects select: [ :anObject | anObject isPortable ])! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 21:13:37'!
PASSED!

----End fileIn of /Users/vpomsztein/Documents/Facu/ISW1/Parcial2/Packages/TerseGuide.pck.st----!
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 21:15:58' prior: 50878597 overrides: 50874889!
addTo: aBackpack

	| addedObjects |
	addedObjects := OrderedCollection new.
	
	[childObjects do: [ :aChildObject |
		aChildObject addTo: aBackpack.
		addedObjects add: aChildObject.
	]] ensure: [
		childObjects removeAll: (addedObjects select: [ :anObject | anObject isPortable ])
	].! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 21:16:37'!
portableObjects: addedObjects

	^ addedObjects select: [ :anObject | anObject isPortable ]! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 21:16:37' prior: 50881677 overrides: 50874889!
addTo: aBackpack

	| addedObjects |
	addedObjects := OrderedCollection new.
	
	[childObjects do: [ :aChildObject |
		aChildObject addTo: aBackpack.
		addedObjects add: aChildObject.
	]] ensure: [
		childObjects removeAll: (self portableObjects: addedObjects)
	].! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 21:16:54'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 21:16:54'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 21:16:54'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 21:16:54'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 21:16:54'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 21:16:54'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 21:16:55'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 21:16:55'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 21:16:55'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 21:16:55'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 21:16:55'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 21:16:55'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:16:55'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:16:55'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:16:55'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:16:55'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 21:16:55'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 21:16:55'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 21:16:55'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 21:16:55'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 21:16:55'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:16:55'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 21:16:55'!
PASSED!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:17:50' prior: 50878395!
test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject

	| room playableCharacter objectsToTake objectsToLeave |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #South in: room.
	
	objectsToTake := (room objectAtCell: 2@0) childObjects.
	objectsToLeave := OrderedCollection with: (room objectAtCell: 2@0).
	objectsToLeave add: objectsToTake last.
	objectsToTake removeLast.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 2@0).
	objectsToLeave do: [ :anObjectToLeave |
		self deny: (playableCharacter backpackIncludes: anObjectToLeave)
	].
	objectsToTake do: [ :anObjectToTake |
		self assert: (playableCharacter backpackIncludes: anObjectToTake).
		self deny: (objectsToLeave first includes: anObjectToTake).
	].! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:17:50'!
ERROR!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:17:56' prior: 50881803!
test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject

	| room playableCharacter objectsToTake objectsToLeave |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #South in: room.
	
	objectsToTake := (room objectAtCell: 2@0) childObjects.
	objectsToLeave := OrderedCollection with: (room objectAtCell: 2@0).
	objectsToLeave add: objectsToTake last.
	objectsToTake removeLast.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 2@0).
	objectsToLeave do: [ :anObjectToLeave |
		self deny: (playableCharacter backpackIncludes: anObjectToLeave)
	].
	objectsToTake do: [ :anObjectToTake |
		self assert: (playableCharacter backpackIncludes: anObjectToTake).
		self deny: (objectsToLeave first contains: anObjectToTake).
	].! !

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 21:17:57'!
PASSED!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:18:48'!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #North in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: NonPortableObject canNotCarryNonPortableObject equals: anError messageText.
			self assert: (room hasObjectAt: 2@4).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@4)).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:19:35' prior: 50881966!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #North in: room.
	
	playableCharacter take: (NoPointsPortableObject named: 'Heavy stuff' weighing: 32).
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: NonPortableObject canNotCarryNonPortableObject equals: anError messageText.
			self assert: (room hasObjectAt: 2@4).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@4)).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:20:06' prior: 50881988!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #North in: room.
	
	playableCharacter take: (NoPointsPortableObject named: 'Heavy stuff' weighing: 95).
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: NonPortableObject canNotCarryNonPortableObject equals: anError messageText.
			self assert: (room hasObjectAt: 2@4).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@4)).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:20:29' prior: 50882013!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #North in: room.
	
	playableCharacter take: (NoPointsPortableObject named: 'Heavy stuff' weighing: 95).
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: NonPortableObject canNotCarryNonPortableObject equals: anError messageText.
			self assert: (room hasObjectAt: 2@0).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@0)).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:20:56' prior: 50882038!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #North in: room.
	
	playableCharacter take: (NoPointsPortableObject named: 'Heavy stuff' weighing: 95).
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (room hasObjectAt: 2@0).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@0)).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:21:41' prior: 50882063!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter objectToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #North in: room.
	objectToTake := ''.
	
	playableCharacter take: (NoPointsPortableObject named: 'Heavy stuff' weighing: 95).
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (room hasObjectAt: 2@0).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@0)).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:22:06' prior: 50882088!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter objectToTake nonPortableObject |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #North in: room.
	
	nonPortableObject := room objectAtCell: 2@0.
	objectToTake := nonPortableObject childObjects first.
	
	playableCharacter take: (NoPointsPortableObject named: 'Heavy stuff' weighing: 95).
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (room hasObjectAt: 2@0).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@0)).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:22:24' prior: 50882114!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter objectToTake nonPortableObject |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #North in: room.
	
	nonPortableObject := room objectAtCell: 3@0.
	objectToTake := nonPortableObject childObjects first.
	
	playableCharacter take: (NoPointsPortableObject named: 'Heavy stuff' weighing: 95).
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (room hasObjectAt: 3@0).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 2@0)).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:23:28' prior: 50882143!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter objectToTake nonPortableObject objectToLeave |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #North in: room.
	
	nonPortableObject := room objectAtCell: 3@0.
	objectToTake := nonPortableObject childObjects first.
	objectToLeave := nonPortableObject childObjects second.
	
	playableCharacter take: (NoPointsPortableObject named: 'Heavy stuff' weighing: 95).
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (room hasObjectAt: 3@0).
			self deny: (nonPortableObject contains: objectToTake).
			self assert: (playableCharacter backpackIncludes: objectToTake).
			self assert: (nonPortableObject contains: objectToLeave).
			self deny: (playableCharacter backpackIncludes: objectToLeave).
		].! !

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:23:31'!
ERROR!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:24:10' prior: 50882172!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter objectToTake nonPortableObject objectToLeave |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #North in: room.
	
	nonPortableObject := room objectAtCell: 2@0.
	objectToTake := nonPortableObject childObjects first.
	objectToLeave := nonPortableObject childObjects second.
	
	playableCharacter take: (NoPointsPortableObject named: 'Heavy stuff' weighing: 95).
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (room hasObjectAt: 2@0).
			self deny: (nonPortableObject contains: objectToTake).
			self assert: (playableCharacter backpackIncludes: objectToTake).
			self assert: (nonPortableObject contains: objectToLeave).
			self deny: (playableCharacter backpackIncludes: objectToLeave).
		].! !

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:24:11'!
FAILURE!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:24:38' prior: 50882214!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter objectToTake nonPortableObject objectToLeave |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #South in: room.
	
	nonPortableObject := room objectAtCell: 2@0.
	objectToTake := nonPortableObject childObjects first.
	objectToLeave := nonPortableObject childObjects second.
	
	playableCharacter take: (NoPointsPortableObject named: 'Heavy stuff' weighing: 95).
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (room hasObjectAt: 2@0).
			self deny: (nonPortableObject contains: objectToTake).
			self assert: (playableCharacter backpackIncludes: objectToTake).
			self assert: (nonPortableObject contains: objectToLeave).
			self deny: (playableCharacter backpackIncludes: objectToLeave).
		].! !

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:24:39'!
FAILURE!

self defaultRoom!

self multipleObjectsNonPortableObject!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:25:09'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:25:30'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:25:47'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:27:13'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:27:13'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:28:32'!
FAILURE!

playableCharacter take: (NoPointsPortableObject named: 'Heavy stuff' weighing: 95)!
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 21:31:20' prior: 50871115!
defaultPortableObject
	
	^NoPointsPortableObject named: 'Heavy stuff' weighing: 95.! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:31:48' prior: 50882256!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter objectToTake nonPortableObject objectToLeave |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #South in: room.
	
	nonPortableObject := room objectAtCell: 2@0.
	objectToTake := nonPortableObject childObjects first.
	objectToLeave := nonPortableObject childObjects second.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (room hasObjectAt: 2@0).
			self deny: (nonPortableObject contains: objectToTake).
			self assert: (playableCharacter backpackIncludes: objectToTake).
			self assert: (nonPortableObject contains: objectToLeave).
			self deny: (playableCharacter backpackIncludes: objectToLeave).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:31:59' prior: 50882342!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter objectToTake nonPortableObject objectToLeave |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #South in: room.
	
	playableCharacter take.
	
	nonPortableObject := room objectAtCell: 2@0.
	objectToTake := nonPortableObject childObjects first.
	objectToLeave := nonPortableObject childObjects second.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (room hasObjectAt: 2@0).
			self deny: (nonPortableObject contains: objectToTake).
			self assert: (playableCharacter backpackIncludes: objectToTake).
			self assert: (nonPortableObject contains: objectToLeave).
			self deny: (playableCharacter backpackIncludes: objectToLeave).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:33:19' prior: 50882376!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter objectToTake nonPortableObject objectToLeave |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room.
	
	playableCharacter take.
	
	playableCharacter moveBackward;
		moveBackward;
		rotateRight;
		moveForward;
		moveForward;
		rotateRight.
	
	
	nonPortableObject := room objectAtCell: 2@0.
	objectToTake := nonPortableObject childObjects first.
	objectToLeave := nonPortableObject childObjects second.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (room hasObjectAt: 2@0).
			self deny: (nonPortableObject contains: objectToTake).
			self assert: (playableCharacter backpackIncludes: objectToTake).
			self assert: (nonPortableObject contains: objectToLeave).
			self deny: (playableCharacter backpackIncludes: objectToLeave).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:33:21' prior: 50882411!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter objectToTake nonPortableObject objectToLeave |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room.
	
	playableCharacter take.
	
	playableCharacter moveBackward;
		moveBackward;
		rotateRight;
		moveForward;
		moveForward;
		rotateRight.
	
	nonPortableObject := room objectAtCell: 2@0.
	objectToTake := nonPortableObject childObjects first.
	objectToLeave := nonPortableObject childObjects second.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (room hasObjectAt: 2@0).
			self deny: (nonPortableObject contains: objectToTake).
			self assert: (playableCharacter backpackIncludes: objectToTake).
			self assert: (nonPortableObject contains: objectToLeave).
			self deny: (playableCharacter backpackIncludes: objectToLeave).
		].! !

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:33:22'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:34:06'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:34:06'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:34:37'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:35:23'!
FAILURE!
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 21:35:45' prior: 50881696 overrides: 50874889!
addTo: aBackpack

	| addedObjects |
	addedObjects := OrderedCollection new.
	
	[childObjects do: [ :aChildObject |
		aChildObject addTo: aBackpack.
		addedObjects add: aChildObject.
	]] ensure: [
self halt.
		childObjects removeAll: (self portableObjects: addedObjects)
	].! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 21:35:47'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:35:47'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:36:04'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:36:07'!
FAILURE!
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 21:37:09' prior: 50882515 overrides: 50874889!
addTo: aBackpack

	| addedObjects |
	addedObjects := OrderedCollection new.
	
	[childObjects do: [ :aChildObject |
		aChildObject addTo: aBackpack.
		addedObjects add: aChildObject.
	]] ensure: [
		childObjects removeAll: (self portableObjects: addedObjects)
	].! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 21:37:23' prior: 50882667 overrides: 50874889!
addTo: aBackpack

	| addedObjects |
	addedObjects := OrderedCollection new.
	
	[childObjects do: [ :aChildObject |
		aChildObject addTo: aBackpack.
		addedObjects add: aChildObject.
	]] ensure: [
self halt.
		childObjects removeAll: (self portableObjects: addedObjects)
	].! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:37:26'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:37:29'!
FAILURE!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:38:05' prior: 50882449!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter objectToTake nonPortableObject objectToLeave |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room.
	
	playableCharacter take.
	
	playableCharacter moveBackward;
		moveBackward;
		rotateRight;
		moveForward;
		moveForward;
		rotateRight.
	
	nonPortableObject := room objectAtCell: 2@0.
	objectToTake := nonPortableObject childObjects first.
	objectToLeave := nonPortableObject childObjects second.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 21:38:25' prior: 50882788!
test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached

	| room playableCharacter objectToTake nonPortableObject objectToLeave |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room.
	
	playableCharacter take.
	
	playableCharacter moveBackward;
		moveBackward;
		rotateRight;
		moveForward;
		moveForward;
		rotateRight.
	
	nonPortableObject := room objectAtCell: 2@0.
	objectToTake := nonPortableObject childObjects first.
	objectToLeave := nonPortableObject childObjects second.
	
	self should: [ playableCharacter take ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert: (room hasObjectAt: 2@0).
	self deny: (nonPortableObject contains: objectToTake).
	self assert: (playableCharacter backpackIncludes: objectToTake).
	self assert: (nonPortableObject contains: objectToLeave).
	self deny: (playableCharacter backpackIncludes: objectToLeave).! !

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:38:27'!
FAILURE!
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 21:38:58' prior: 50882679 overrides: 50874889!
addTo: aBackpack

	| addedObjects |
	addedObjects := OrderedCollection new.
	
	[childObjects do: [ :aChildObject |
		aChildObject addTo: aBackpack.
		addedObjects add: aChildObject.
	]] ensure: [
		childObjects removeAll: (self portableObjects: addedObjects)
	].! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 21:39:01' prior: 50882859 overrides: 50874889!
addTo: aBackpack

	| addedObjects |
	addedObjects := OrderedCollection new.
	
	[childObjects do: [ :aChildObject |
		aChildObject addTo: aBackpack.
		self halt.
		addedObjects add: aChildObject.
	]] ensure: [
		childObjects removeAll: (self portableObjects: addedObjects)
	].! !

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:39:05'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:39:10'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:39:13'!
FAILURE!
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 21:39:36' prior: 50882871 overrides: 50874889!
addTo: aBackpack

	| addedObjects |
	addedObjects := OrderedCollection new.
	
	[childObjects do: [ :aChildObject |
		aChildObject addTo: aBackpack.
		addedObjects add: aChildObject.
	]] ensure: [
		childObjects removeAll: (self portableObjects: addedObjects)
	].! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 21:39:42'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:39:42'!
FAILURE!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:39:42'!
FAILURE!
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 21:40:53' prior: 50876349!
multipleObjectsNonPortableObject
	
	^NonPortableObject 
		named: 'Perchero' 
		containing: {
			NoPointsPortableObject named: 'Key' weighing: 1. 
			NoPointsPortableObject named: 'Book' weighing: 5. 
			self emptyNonPortableObject 
		}.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:40:57'!
PASSED!

----SNAPSHOT----(10 December 2020 21:41:01) CuisUniversity-4384-2.image priorSource: 17501529!
!RoomTest methodsFor: 'contents' stamp: 'VP 12/10/2020 21:43:28'!
assertCantPutDueToOutOfBoundsIn: aPosition

	| room portableObject |

	room := Room withDimension: aPosition.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: aPosition ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room locationIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: aPosition).
		].! !
!RoomTest methodsFor: 'assertions' stamp: 'VP 12/10/2020 21:43:57' prior: 50883232!
assertCantPutDueToOutOfBoundsIn: aPosition

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: aPosition ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room locationIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: aPosition).
		].! !
!RoomTest methodsFor: 'contents' stamp: 'VP 12/10/2020 21:44:15' prior: 50870799!
test07_CannotPutObjectOutsideRoomToTheLeft

	self assertCantPutDueToOutOfBoundsIn: -1@0.! !
!RoomTest methodsFor: 'assertions' stamp: 'VP 12/10/2020 21:44:25'!
assertCantPutObjectDueToOutOfBoundsInPosition: aPosition

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: aPosition ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room locationIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: aPosition).
		].! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 21:44:25' prior: 50883264!
test07_CannotPutObjectOutsideRoomToTheLeft

	self assertCantPutObjectDueToOutOfBoundsInPosition: -1@0.! !

!methodRemoval: RoomTest #assertCantPutDueToOutOfBoundsIn: stamp: 'VP 12/10/2020 21:44:25'!
assertCantPutDueToOutOfBoundsIn: aPosition

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: aPosition ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room locationIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: aPosition).
		].!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 21:44:26'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 21:44:26'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 21:44:26'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 21:44:26'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 21:44:26'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 21:44:26'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 21:44:26'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 21:44:26'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 21:44:26'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 21:44:26'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 21:44:26'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 21:44:26'!
PASSED!
!RoomTest methodsFor: 'contents' stamp: 'VP 12/10/2020 21:44:36' prior: 50870783!
test08_CannotPutObjectOutsideRoomToTheRight

	self assertCantPutObjectDueToOutOfBoundsInPosition: 3@0.! !

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 21:44:37'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 21:44:37'!
PASSED!
!RoomTest methodsFor: 'contents' stamp: 'VP 12/10/2020 21:44:45' prior: 50870823!
test09_CannotPutObjectOutsideRoomDownwards

	| room portableObject |

	self assertCantPutObjectDueToOutOfBoundsInPosition: 0@-2.! !
!RoomTest methodsFor: 'contents' stamp: 'VP 12/10/2020 21:44:50' prior: 50883395!
test09_CannotPutObjectOutsideRoomDownwards

	self assertCantPutObjectDueToOutOfBoundsInPosition: 0@-1.! !

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 21:44:51'!
PASSED!
!RoomTest methodsFor: 'contents' stamp: 'VP 12/10/2020 21:44:59' prior: 50870839!
test10_CannotPutObjectOutsideRoomUpwards

	self assertCantPutObjectDueToOutOfBoundsInPosition: 0@4.! !

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 21:45:00'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 21:45:00'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 21:45:00'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 21:45:00'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 21:45:00'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 21:45:00'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 21:45:00'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 21:45:00'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 21:45:00'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 21:45:00'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 21:45:00'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 21:45:00'!
PASSED!
!RoomTest methodsFor: 'assertions' stamp: 'VP 12/10/2020 21:46:12'!
putObject: room inPosition: aPosition inRoom: portableObject

	^ self should: [ room put: portableObject at: aPosition ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room locationIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: aPosition).
		]! !
!RoomTest methodsFor: 'assertions' stamp: 'VP 12/10/2020 21:46:12' prior: 50883269!
assertCantPutObjectDueToOutOfBoundsInPosition: aPosition

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self putObject: room inPosition: aPosition inRoom: portableObject.! !
!RoomTest methodsFor: 'assertions' stamp: 'VP 12/10/2020 21:46:46' prior: 50883458!
putObject: portableObject inPosition: aPosition inRoom: aRoom

	^ self should: [ aRoom put: portableObject at: aPosition ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room locationIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (aRoom hasObjectAt: aPosition).
		]! !
!RoomTest methodsFor: 'assertions' stamp: 'VP 12/10/2020 21:46:54' prior: 50883471!
assertCantPutObjectDueToOutOfBoundsInPosition: aPosition

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self putObject: portableObject inPosition: aPosition inRoom: room.! !
!RoomTest methodsFor: 'assertions' stamp: 'VP 12/10/2020 21:47:30'!
assertPutObject: portableObject inPosition: aPosition inRoom: aRoom

	^ self should: [ aRoom put: portableObject at: aPosition ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room locationIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (aRoom hasObjectAt: aPosition).
		]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 21:47:30' prior: 50883495!
assertCantPutObjectDueToOutOfBoundsInPosition: aPosition

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self assertPutObject: portableObject inPosition: aPosition inRoom: room.! !

!methodRemoval: RoomTest #putObject:inPosition:inRoom: stamp: 'VP 12/10/2020 21:47:30'!
putObject: portableObject inPosition: aPosition inRoom: aRoom

	^ self should: [ aRoom put: portableObject at: aPosition ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room locationIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (aRoom hasObjectAt: aPosition).
		]!
!RoomTest methodsFor: 'assertions' stamp: 'VP 12/10/2020 21:47:57'!
assertPutObject: portableObject inPosition: aPosition inRoom: aRoom raisesErrorWithMessage: anErrorMessage

	^ self should: [ aRoom put: portableObject at: aPosition ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anErrorMessage equals: anError messageText.
			self deny: (aRoom hasObjectAt: aPosition).
		]! !

!methodRemoval: RoomTest #assertPutObject:inPosition:inRoom: stamp: 'VP 12/10/2020 21:48:00'!
assertPutObject: portableObject inPosition: aPosition inRoom: aRoom

	^ self should: [ aRoom put: portableObject at: aPosition ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room locationIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (aRoom hasObjectAt: aPosition).
		]!
!RoomTest methodsFor: 'assertions' stamp: 'VP 12/10/2020 21:48:36' prior: 50883519!
assertCantPutObjectDueToOutOfBoundsInPosition: aPosition

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self assertPutObject: portableObject inPosition: aPosition inRoom: room raisesErrorWithMessage: Room locationIsOutOfBoundsErrorMessage.! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 21:48:38'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 21:48:38'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 21:48:38'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 21:48:38'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 21:48:38'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 21:48:38'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 21:48:38'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 21:48:38'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 21:48:38'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 21:48:38'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 21:48:38'!
PASSED!
!RoomTest methodsFor: 'contents' stamp: 'VP 12/10/2020 21:49:02' prior: 50870618!
test11_CannotPutObjectInOccupiedCell

	| room portableObject nonPortableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Table'.
	
	room put: portableObject at: 0@0.
	
	self assertPutObject: nonPortableObject inPosition: 0@0 inRoom: room raisesErrorWithMessage: Room cellIsAlreadyOccupiedErrorMessage.! !

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 21:49:03'!
FAILURE!
!RoomTest methodsFor: 'contents' stamp: 'VP 12/10/2020 21:49:22' prior: 50883618!
test11_CannotPutObjectInOccupiedCell

	| room portableObject nonPortableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Table'.
	
	room put: portableObject at: 0@0.
	
	self should: [ room put: nonPortableObject at: 0@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsAlreadyOccupiedErrorMessage equals: anError messageText.
			self assert: portableObject equals: (room objectAtCell: 0@0).
		].! !
!RoomTest methodsFor: 'assertions' stamp: 'VP 12/10/2020 21:46:12' prior: 50883568!
assertCantPutObjectDueToOutOfBoundsInPosition: aPosition

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self putObject: room inPosition: aPosition inRoom: portableObject.! !
!RoomTest methodsFor: 'assertions' stamp: 'VP 12/10/2020 21:44:25' prior: 50883657!
assertCantPutObjectDueToOutOfBoundsInPosition: aPosition

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: aPosition ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room locationIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: aPosition).
		].! !

!methodRemoval: RoomTest #assertPutObject:inPosition:inRoom:raisesErrorWithMessage: stamp: 'VP 12/10/2020 21:49:56'!
assertPutObject: portableObject inPosition: aPosition inRoom: aRoom raisesErrorWithMessage: anErrorMessage

	^ self should: [ aRoom put: portableObject at: aPosition ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anErrorMessage equals: anError messageText.
			self deny: (aRoom hasObjectAt: aPosition).
		]!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 21:49:59'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 21:49:59'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 21:49:59'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 21:49:59'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 21:49:59'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 21:49:59'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 21:49:59'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 21:49:59'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 21:49:59'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 21:49:59'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 21:49:59'!
PASSED!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 21:50:31'!
assertRoomCantBeCreatedWithInvalidDimension

	^ self should: [ Room withDimension: 2@1.1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionErrorMessage! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 21:50:31' prior: 50868797!
test04_CanNotCreateRoomWithNonIntegerHeight

	self assertRoomCantBeCreatedWithInvalidDimension.! !
!RoomTest methodsFor: 'assertions' stamp: 'VP 12/10/2020 21:50:54'!
assertRoomCantBeCreatedWithInvalidDimension: anInvalidDimension

	^ self should: [ Room withDimension: anInvalidDimension ]
		raise: Error
		withMessageText: Room invalidRoomDimensionErrorMessage! !

!methodRemoval: RoomTest #assertRoomCantBeCreatedWithInvalidDimension stamp: 'VP 12/10/2020 21:50:56'!
assertRoomCantBeCreatedWithInvalidDimension

	^ self should: [ Room withDimension: 2@1.1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionErrorMessage!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 21:51:11' prior: 50868691!
test01_CanNotCreateRoomWithWidthLessThan1

	self assertRoomCantBeCreatedWithInvalidDimension: 0@2.! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 21:51:21' prior: 50868710!
test02_CanNotCreateRoomWithHeightLessThan1

	self assertRoomCantBeCreatedWithInvalidDimension: 1@0.! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 21:51:24' prior: 50883767!
test01_CanNotCreateRoomWithWidthLessThan1

	self assertRoomCantBeCreatedWithInvalidDimension: 0@1.! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 21:51:29' prior: 50868737!
test03_CanNotCreateRoomWithNonIntegerWidth

	self assertRoomCantBeCreatedWithInvalidDimension: 1.1@2.! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 17:44:47' prior: 50883743!
test04_CanNotCreateRoomWithNonIntegerHeight

	self should: [ Room withDimension: 2@1.1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionErrorMessage.! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 21:51:43' prior: 50883791!
test04_CanNotCreateRoomWithNonIntegerHeight

	self assertRoomCantBeCreatedWithInvalidDimension: 2@1.1.! !

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 21:51:44'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 21:51:44'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 21:51:44'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 21:51:44'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 21:51:44'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 21:51:44'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 21:51:44'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 21:51:44'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 21:51:44'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 21:51:44'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 21:51:44'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 21:51:44'!
PASSED!

----SNAPSHOT----(10 December 2020 21:51:53) CuisUniversity-4384-2.image priorSource: 17650503!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 21:54:00'!
assertCharacterCantMoveOutsideRoomWhenStartingAt: aStartingPoint heading: aHeading executingMovements: aMovementClosure

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: aStartingPoint heading: aHeading in: room.
	
	self should: aMovementClosure
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveOutsideRoomErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: aStartingPoint heading: aHeading).
		].! !
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 21:54:57' prior: 50872194!
test13_PlayableCharacterMovingForwardCannotLeaveRoom

	self assertCharacterCantMoveOutsideRoomWhenStartingAt: 1@4 heading: #North executingMovements: [ :aPlayableCharacter | aPlayableCharacter moveForward ].! !
!PlayableCharacterTest methodsFor: 'assertions -- private' stamp: 'VP 12/10/2020 21:55:09' prior: 50883849!
assertCharacterCantMoveOutsideRoomWhenStartingAt: aStartingPoint heading: aHeading executingMovements: aMovementClosure

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: aStartingPoint heading: aHeading in: room.
	
	self should: [ aMovementClosure value: playableCharacter ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveOutsideRoomErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: aStartingPoint heading: aHeading).
		].! !

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 21:55:12'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 21:55:12'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:55:12'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:55:12'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:55:12'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:55:12'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 21:55:15'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:55:15'!
PASSED!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 21:55:39' prior: 50872775!
test14_PlayableCharacterMovingBackwardCannotLeaveRoom

	self assertCharacterCantMoveOutsideRoomWhenStartingAt: 0@3 heading: #East executingMovements: [ :aPlayableCharacter | aPlayableCharacter moveBackward ].! !

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 21:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 21:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 21:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 21:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 21:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 21:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 21:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 21:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 21:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 21:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 21:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 21:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:55:39'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:55:40'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:55:40'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:55:40'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 21:55:40'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 21:55:40'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 21:55:40'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 21:55:40'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 21:55:40'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:55:40'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 21:55:40'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:55:40'!
PASSED!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 21:55:49' prior: 50872574!
test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell

	self assertCharacterCantMoveOutsideRoomWhenStartingAt: 3@3 heading: #North executingMovements: [ :aPlayableCharacter | aPlayableCharacter moveForward ].! !

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:55:50'!
FAILURE!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 21:56:02' prior: 50884143!
test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell

	self assertCharacterCantMoveOutsideRoomWhenStartingAt: 3@3 heading: #North executingMovements: [ :aPlayableCharacter | aPlayableCharacter moveForward ].! !

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:56:02'!
FAILURE!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 21:56:07' prior: 50884158!
test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@3 heading: #North in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveIntoOccupiedPositionErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 3@3 heading: #North).
		].! !
!PlayableCharacterTest methodsFor: 'assertions -- private' stamp: 'VP 12/10/2020 21:56:46'!
assertCharacterMovingFrom: aStartingPoint heading: aHeading executingMovements: aMovementClosure

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: aStartingPoint heading: aHeading in: room.
	
	self should: [ aMovementClosure value: playableCharacter ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveOutsideRoomErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: aStartingPoint heading: aHeading).
		].! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 21:56:46' prior: 50884028!
test14_PlayableCharacterMovingBackwardCannotLeaveRoom

	self assertCharacterMovingFrom: 0@3 heading: #East executingMovements: [ :aPlayableCharacter | aPlayableCharacter moveBackward ].! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 21:56:46' prior: 50883870!
test13_PlayableCharacterMovingForwardCannotLeaveRoom

	self assertCharacterMovingFrom: 1@4 heading: #North executingMovements: [ :aPlayableCharacter | aPlayableCharacter moveForward ].! !

!methodRemoval: PlayableCharacterTest #assertCharacterCantMoveOutsideRoomWhenStartingAt:heading:executingMovements: stamp: 'VP 12/10/2020 21:56:46'!
assertCharacterCantMoveOutsideRoomWhenStartingAt: aStartingPoint heading: aHeading executingMovements: aMovementClosure

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: aStartingPoint heading: aHeading in: room.
	
	self should: [ aMovementClosure value: playableCharacter ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveOutsideRoomErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: aStartingPoint heading: aHeading).
		].!
!PlayableCharacterTest methodsFor: 'assertions -- private' stamp: 'VP 12/10/2020 21:57:03'!
assertCharacterMovingFrom: aStartingPoint heading: aHeading executingMovements: aMovementClosure raisesErrorWithDescription: anErrorDescription

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: aStartingPoint heading: aHeading in: room.
	
	self should: [ aMovementClosure value: playableCharacter ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anErrorDescription equals: anError messageText.
			self assert: (playableCharacter isAt: aStartingPoint heading: aHeading).
		].! !
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 21:57:17' prior: 50884224!
test13_PlayableCharacterMovingForwardCannotLeaveRoom

	self assertCharacterMovingFrom: 1@4 heading: #North executingMovements: [ :aPlayableCharacter | aPlayableCharacter moveForward ] raisesErrorWithDescription: PlayableCharacter cantMoveOutsideRoomErrorMessage.! !
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 21:57:22' prior: 50884214!
test14_PlayableCharacterMovingBackwardCannotLeaveRoom

	self assertCharacterMovingFrom: 0@3 heading: #East executingMovements: [ :aPlayableCharacter | aPlayableCharacter moveBackward ] raisesErrorWithDescription: PlayableCharacter cantMoveOutsideRoomErrorMessage.! !

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 21:57:26'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:57:26'!
PASSED!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 21:57:42' prior: 50884173!
test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell

	self assertCharacterMovingFrom: 3@3 heading: #North executingMovements: [ :aPlayableCharacter | aPlayableCharacter moveForward ] raisesErrorWithDescription: PlayableCharacter cantMoveIntoOccupiedPositionErrorMessage.! !

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 21:57:43'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:57:43'!
PASSED!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 21:58:06' prior: 50872646!
test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell

	self assertCharacterMovingFrom: 1@4 heading: #East executingMovements: [ :aPlayableCharacter | aPlayableCharacter moveBackward ] raisesErrorWithDescription: PlayableCharacter cantMoveIntoOccupiedPositionErrorMessage .! !

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:58:06'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 21:58:06'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 21:58:06'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 21:58:06'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 21:58:06'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 21:58:06'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 21:58:06'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 21:58:06'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:58:07'!
PASSED!

!methodRemoval: PlayableCharacterTest #assertCharacterMovingFrom:heading:executingMovements: stamp: 'VP 12/10/2020 21:58:10'!
assertCharacterMovingFrom: aStartingPoint heading: aHeading executingMovements: aMovementClosure

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: aStartingPoint heading: aHeading in: room.
	
	self should: [ aMovementClosure value: playableCharacter ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveOutsideRoomErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: aStartingPoint heading: aHeading).
		].!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test22_PlayableCharacterCanOnlyTakePortableObjectsInsideNonPortableObject stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test23_PlayableCharacterCanNotTakeNonPortableObjectWithoutChildrenPortableObjects stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #PlayableCharacterTest #test24_PlayableCharacterCanNotTakeAllObjectsInsideNonPortableObjectIfMaximumBackpackCapacityIsReached stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 21:58:13'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 21:58:14'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 21:58:14'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 21:58:14'!
PASSED!

----STARTUP---- (10 December 2020 12:18:14) as /Users/vpomsztein/Documents/Facu/ISW1/Parcial2/CuisUniversity-4384.image!


----End fileIn of /Users/vpomsztein/Documents/Facu/ISW1/Parcial2/ISW1-2020-2C-2doParcial.st----!

----QUIT----(10 December 2020 12:42:42) CuisUniversity-4384.image priorSource: 17155564!

----STARTUP---- (10 December 2020 16:47:48) as /Users/vpomsztein/Documents/Facu/ISW1/Parcial2/CuisUniversity-4384.image!


TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'VP 12/10/2020 17:33:09'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'VP 12/10/2020 17:37:21'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'no messages' stamp: 'VP 12/10/2020 17:37:13'!
test01_CanNotCreateRoomWithWidthLessThan1

	self should: [ Room withDimension: 0@2 ]
		raise: Error 
		withMessageText: Room invalidRoomDimensionErrorMessage.! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 17:37:25'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'VP 12/10/2020 17:37:41'!
invalidRoomDimensionErrorMessage
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'VP 12/10/2020 17:38:35' prior: 50868675!
invalidRoomDimensionErrorMessage
	
	^'Invalid room dimension: dimension must have integer width and height, both at least 1'! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 17:38:37'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 17:38:46' prior: 50868664!
test01_CanNotCreateRoomWithWidthLessThan1

	self should: [ Room withDimension: 0@2 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionErrorMessage.! !
!Room class methodsFor: 'error messages' stamp: 'VP 12/10/2020 17:41:51'!
withDimension: aRoomDimension

	(aRoomDimension x < 1) ifTrue: [ self error: self invalidRoomDimensionErrorMessage ].

	^self new initializeWithDimension: aRoomDimension.! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 17:41:53'!
PASSED!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 17:42:32'!
test02_CanNotCreateRoomWithHeightLessThan1

	self should: [ Room withDimension: 1@0 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionErrorMessage.! !

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 17:42:34'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:43:12' prior: 50868699!
withDimension: aRoomDimension

	(aRoomDimension x < 1 or: [ aRoomDimension y < 1 ]) ifTrue: [ self error: self invalidRoomDimensionErrorMessage ].

	^self new initializeWithDimension: aRoomDimension.! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 17:43:13'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 17:43:13'!
PASSED!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 17:43:38'!
test03_CanNotCreateRoomWithNonIntegerWidth

	self should: [ Room withDimension: 1.1@2 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionErrorMessage.! !

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 17:43:40'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:44:20' prior: 50868722!
withDimension: aRoomDimension

	(aRoomDimension x < 1 or: [ aRoomDimension y < 1 ]) ifTrue: [ self error: self invalidRoomDimensionErrorMessage ].
	aRoomDimension x isInteger ifTrue: [ self error: self invalidRoomDimensionErrorMessage ].

	^self new initializeWithDimension: aRoomDimension.! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 17:44:21'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 17:44:21'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 17:44:21'!
FAILURE!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 17:44:21'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:44:27' prior: 50868749!
withDimension: aRoomDimension

	(aRoomDimension x < 1 or: [ aRoomDimension y < 1 ]) ifTrue: [ self error: self invalidRoomDimensionErrorMessage ].
	aRoomDimension x isInteger ifFalse: [ self error: self invalidRoomDimensionErrorMessage ].

	^self new initializeWithDimension: aRoomDimension.! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 17:44:28'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 17:44:28'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 17:44:28'!
PASSED!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 17:44:47'!
test04_CanNotCreateRoomWithNonIntegerHeight

	self should: [ Room withDimension: 2@1.1 ]
		raise: Error
		withMessageText: Room invalidRoomDimensionErrorMessage.! !

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 17:44:48'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:45:06' prior: 50868775!
withDimension: aRoomDimension

	(aRoomDimension x < 1 or: [ aRoomDimension y < 1 ]) ifTrue: [ self error: self invalidRoomDimensionErrorMessage ].
	(aRoomDimension x isInteger and: [ aRoomDimension y isInteger ]) ifFalse: [ self error: self invalidRoomDimensionErrorMessage ].

	^self new initializeWithDimension: aRoomDimension.! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 17:45:08'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 17:45:08'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 17:45:08'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 17:45:08'!
PASSED!
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:45:23' prior: 50868809!
withDimension: aRoomDimension

	(aRoomDimension x < 1 or: [ aRoomDimension y < 1 ]) ifTrue: [ self error: self invalidRoomDimensionErrorMessage ].
	(aRoomDimension x isInteger and: [ aRoomDimension y isInteger ]) ifFalse: [ self error: self invalidRoomDimensionErrorMessage ].

	^self new initializeWithDimension: aRoomDimension.! !
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:47:03'!
assertValidRoomDimension: aRoomDimension

	(aRoomDimension x < 1 or: [ aRoomDimension y < 1 ]) ifTrue: [ self error: self invalidRoomDimensionErrorMessage ].
	(aRoomDimension x isInteger and: [ aRoomDimension y isInteger ]) ifFalse: [ self error: self invalidRoomDimensionErrorMessage ]! !
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:47:03' prior: 50868836!
withDimension: aRoomDimension

	self assertValidRoomDimension: aRoomDimension.

	^self new initializeWithDimension: aRoomDimension.! !
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:47:33'!
dimensionIsLargeEnough: aRoomDimension

	^ aRoomDimension x < 1 or: [ aRoomDimension y < 1 ]! !
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:47:33' prior: 50868849!
assertValidRoomDimension: aRoomDimension

	(self dimensionIsLargeEnough: aRoomDimension) ifTrue: [ self error: self invalidRoomDimensionErrorMessage ].
	(aRoomDimension x isInteger and: [ aRoomDimension y isInteger ]) ifFalse: [ self error: self invalidRoomDimensionErrorMessage ]! !
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:47:57'!
dimensionIsInteger: aRoomDimension

	^ aRoomDimension x isInteger and: [ aRoomDimension y isInteger ]! !
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:47:57' prior: 50868874!
assertValidRoomDimension: aRoomDimension

	(self dimensionIsLargeEnough: aRoomDimension) ifTrue: [ self error: self invalidRoomDimensionErrorMessage ].
	(self dimensionIsInteger: aRoomDimension) ifFalse: [ self error: self invalidRoomDimensionErrorMessage ]! !
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:48:20' prior: 50868886!
dimensionIsInteger: aRoomDimension

	^ aRoomDimension x isInteger not or: [ aRoomDimension y isInteger not ]! !
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:48:27'!
dimensionIsNotInteger: aRoomDimension

	^ aRoomDimension x isInteger not or: [ aRoomDimension y isInteger not ]! !
!Room class methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 17:48:27' prior: 50868893!
assertValidRoomDimension: aRoomDimension

	(self dimensionIsLargeEnough: aRoomDimension) ifTrue: [ self error: self invalidRoomDimensionErrorMessage ].
	(self dimensionIsNotInteger: aRoomDimension) ifFalse: [ self error: self invalidRoomDimensionErrorMessage ]! !

!methodRemoval: Room class #dimensionIsInteger: stamp: 'VP 12/10/2020 17:48:28'!
dimensionIsInteger: aRoomDimension

	^ aRoomDimension x isInteger not or: [ aRoomDimension y isInteger not ]!
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:48:35' prior: 50868918!
assertValidRoomDimension: aRoomDimension

	(self dimensionIsLargeEnough: aRoomDimension) ifTrue: [ self error: self invalidRoomDimensionErrorMessage ].
	(self dimensionIsNotInteger: aRoomDimension) ifTrue: [ self error: self invalidRoomDimensionErrorMessage ]! !
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:48:59' prior: 50868936!
assertValidRoomDimension: aRoomDimension

	((self dimensionIsLargeEnough: aRoomDimension) or: [ self dimensionIsNotInteger: aRoomDimension ]) ifTrue: [ self error: self invalidRoomDimensionErrorMessage ].! !
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:49:27'!
isInvalidDimension: aRoomDimension

	^ (self dimensionIsLargeEnough: aRoomDimension) or: [ self dimensionIsNotInteger: aRoomDimension ]! !
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:49:27' prior: 50868948!
assertValidRoomDimension: aRoomDimension

	(self isInvalidDimension: aRoomDimension) ifTrue: [ self error: self invalidRoomDimensionErrorMessage ].! !
!Room class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 17:49:49' prior: 50868965!
assertValidRoomDimension: aRoomDimension

	(self isInvalidDimension: aRoomDimension) ifTrue: [ self error: self invalidRoomDimensionErrorMessage ].! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 17:49:50'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 17:49:50'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 17:49:50'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 17:49:50'!
PASSED!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 17:54:52'!
test05_RoomWithPortableObjectHoldsObjectInPosition

	| room portableObject |

	room := Room withDimension: 3@3.
	
	portableObject := PortableObject.
	
	room put: portableObject at: 0@0.
	
	self assert: portableObject equals: (room objectAtCell: 0@0).! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 17:56:09' prior: 50868994!
test05_RoomWithPortableObjectHoldsObjectInPosition

	| room portableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	room put: portableObject at: 0@0.
	
	self assert: portableObject equals: (room objectAtCell: 0@0).! !

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 17:56:13'!
ERROR!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'VP 12/10/2020 17:56:22'!
Object subclass: #Room
	instanceVariableNames: 'roomDimension'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'VP 12/10/2020 17:56:22'!
initializeWithDimension: aRoomDimension 
	self shouldBeImplemented.
	roomDimension := aRoomDimension.! !
!Room methodsFor: 'initialization' stamp: 'VP 12/10/2020 17:56:28' prior: 50869028!
initializeWithDimension: aRoomDimension 
	
	roomDimension := aRoomDimension.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'VP 12/10/2020 17:56:30'!
Object subclass: #Room
	instanceVariableNames: 'dimension'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 17:56:30' prior: 50869034!
initializeWithDimension: aRoomDimension 
	
	dimension := aRoomDimension.! !

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 17:56:33'!
ERROR!
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 17:57:17'!
put: aNoPointsPortableObject at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 17:57:22' prior: 50869056!
put: anObject at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 17:57:26' prior: 50869061!
put: anObject at: aCell 
	self shouldBeImplemented.! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 17:57:29' prior: 50869066!
put: anObject at: aCell 
	
	! !

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 17:57:30'!
ERROR!
!Room methodsFor: 'accessing' stamp: 'VP 12/10/2020 17:57:40'!
objectAtCell: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'VP 12/10/2020 17:57:59'!
Object subclass: #Room
	instanceVariableNames: 'dimension objectInCell'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'accessing' stamp: 'VP 12/10/2020 17:57:57' prior: 50869078!
objectAtCell: aPoint 
	
	^objectInCell.! !

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 17:58:00'!
FAILURE!
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 17:58:14' prior: 50869071!
put: anObject at: aCell 
	
	objectInCell := anObject.! !

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 17:58:15'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 17:58:15'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 17:58:15'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 17:58:15'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 17:58:15'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 17:58:15'!
PASSED!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'VP 12/10/2020 18:00:08'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 17:59:58'!
test05_RoomWithMultipleObjectsHoldsEachObjecteInPosition

	| room portableObject nonPortableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Table'.
	
	room put: portableObject at: 0@0.
	room put: portableObject at: 1@1.
	
	self assert: portableObject equals: (room objectAtCell: 0@0).
	self assert: nonPortableObject equals: (room objectAtCell: 1@1).! !

!testRun: #RoomTest #test05_RoomWithMultipleObjectsHoldsEachObjecteInPosition stamp: 'VP 12/10/2020 18:00:22'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 18:00:31'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 18:00:44' prior: 50869153!
named: anObjectName
	
	^self new initializeNamed: anObjectName. ! !

!testRun: #RoomTest #test05_RoomWithMultipleObjectsHoldsEachObjecteInPosition stamp: 'VP 12/10/2020 18:00:46'!
ERROR!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'VP 12/10/2020 18:00:53'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'objectName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'VP 12/10/2020 18:00:53'!
initializeNamed: anObjectName 
	self shouldBeImplemented.
	objectName := anObjectName.! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'VP 12/10/2020 18:00:59'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'objectName name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'VP 12/10/2020 18:00:57' prior: 50869179!
initializeNamed: anObjectName 
	
	name := anObjectName.! !

!testRun: #RoomTest #test05_RoomWithMultipleObjectsHoldsEachObjecteInPosition stamp: 'VP 12/10/2020 18:01:00'!
FAILURE!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:01:12'!
test06_RoomWithMultipleObjectsHoldsEachObjecteInPosition

	| room portableObject nonPortableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Table'.
	
	room put: portableObject at: 0@0.
	room put: portableObject at: 1@1.
	
	self assert: portableObject equals: (room objectAtCell: 0@0).
	self assert: nonPortableObject equals: (room objectAtCell: 1@1).! !

!methodRemoval: RoomTest #test05_RoomWithMultipleObjectsHoldsEachObjecteInPosition stamp: 'VP 12/10/2020 18:01:12'!
test05_RoomWithMultipleObjectsHoldsEachObjecteInPosition

	| room portableObject nonPortableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Table'.
	
	room put: portableObject at: 0@0.
	room put: portableObject at: 1@1.
	
	self assert: portableObject equals: (room objectAtCell: 0@0).
	self assert: nonPortableObject equals: (room objectAtCell: 1@1).!

StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'VP 12/10/2020 18:01:31'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'VP 12/10/2020 18:03:04'!
Object subclass: #Room
	instanceVariableNames: 'dimension objectInCell objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:03:03' prior: 50869098!
put: anObject at: aCell 
	
	objects put: anObject at: aCell.! !
!Room methodsFor: 'accessing' stamp: 'VP 12/10/2020 18:03:14' prior: 50869090!
objectAtCell: aPoint 
	
	^objects at: aPoint.! !

Object subclass: #Room
	instanceVariableNames: 'dimension objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'VP 12/10/2020 18:03:21'!
Object subclass: #Room
	instanceVariableNames: 'dimension objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:03:24'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:03:24'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:03:24'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:03:24'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:03:24'!
ERROR!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjecteInPosition stamp: 'VP 12/10/2020 18:03:24'!
ERROR!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:03:26'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'VP 12/10/2020 18:03:44' prior: 50869047!
initializeWithDimension: aRoomDimension 
	
	dimension := aRoomDimension.
	objects := Dictionary new.! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:03:44'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:03:44'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:03:44'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:03:44'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:03:44'!
ERROR!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjecteInPosition stamp: 'VP 12/10/2020 18:03:44'!
ERROR!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:03:46'!
ERROR!
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:04:10' prior: 50869259!
put: anObject at: aCell 
	
	objects at: anObject put: aCell.! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:04:10'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:04:10'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:04:10'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:04:10'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:04:10'!
ERROR!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjecteInPosition stamp: 'VP 12/10/2020 18:04:10'!
ERROR!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:04:11'!
ERROR!
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:04:54' prior: 50869335!
put: anObject at: aCell 
	
	objects at: aCell put: anObject.! !

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:04:55'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjecteInPosition stamp: 'VP 12/10/2020 18:04:56'!
FAILURE!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:05:12' prior: 50869202!
test06_RoomWithMultipleObjectsHoldsEachObjecteInPosition

	| room portableObject nonPortableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Table'.
	
	room put: portableObject at: 0@0.
	room put: nonPortableObject at: 1@1.
	
	self assert: portableObject equals: (room objectAtCell: 0@0).
	self assert: nonPortableObject equals: (room objectAtCell: 1@1).! !

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjecteInPosition stamp: 'VP 12/10/2020 18:05:14'!
PASSED!
!Room methodsFor: 'accessing' stamp: 'VP 12/10/2020 18:05:26' prior: 50869264!
objectAtCell: aCell 
	
	^objects at: aCell.! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:06:01'!
test06_RoomWithMultipleObjectsHoldsEachObjectInPosition

	| room portableObject nonPortableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Table'.
	
	room put: portableObject at: 0@0.
	room put: nonPortableObject at: 1@1.
	
	self assert: portableObject equals: (room objectAtCell: 0@0).
	self assert: nonPortableObject equals: (room objectAtCell: 1@1).! !

!methodRemoval: RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjecteInPosition stamp: 'VP 12/10/2020 18:06:01'!
test06_RoomWithMultipleObjectsHoldsEachObjecteInPosition

	| room portableObject nonPortableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Table'.
	
	room put: portableObject at: 0@0.
	room put: nonPortableObject at: 1@1.
	
	self assert: portableObject equals: (room objectAtCell: 0@0).
	self assert: nonPortableObject equals: (room objectAtCell: 1@1).!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:08:44'!
test07_CannotPutObjectOutsideRoomToTheLeft

	| room portableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: -1@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: room hasObjectAt: -1@0.
		].! !

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:08:45'!
FAILURE!
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:09:40' prior: 50869364!
put: anObject at: aCell 
	
	aCell x < 0 ifTrue: [ self error: self class  ]
	
	objects at: aCell put: anObject.! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:09:42' prior: 50869456!
put: anObject at: aCell 
	
	aCell x < 0 ifTrue: [ self error: self class  ].
	
	objects at: aCell put: anObject.! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:09:53' prior: 50869463!
put: anObject at: aCell 
	
	aCell x < 0 ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	
	objects at: aCell put: anObject.! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:09:55'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:09:55'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:09:55'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:09:55'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:09:55'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 18:09:55'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:09:55'!
ERROR!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:09:55'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'VP 12/10/2020 18:10:08'!
cellIsOutOfBoundsErrorMessage
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'VP 12/10/2020 18:10:34' prior: 50869504!
cellIsOutOfBoundsErrorMessage
	
	^'The given cell is out of bounds for the room'.! !

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:10:36'!
FAILURE!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:10:59' prior: 50869437!
test07_CannotPutObjectOutsideRoomToTheLeft

	| room portableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: -1@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: -1@0).
		].! !

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:11:01'!
ERROR!
!Room methodsFor: 'accessing' stamp: 'VP 12/10/2020 18:11:09'!
hasObjectAt: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'accessing' stamp: 'VP 12/10/2020 18:11:31' prior: 50869536!
hasObjectAt: aCell 
	
	^objects includesKey: aCell.! !

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:11:32'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:11:32'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:11:32'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:11:32'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:11:32'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:11:32'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 18:11:32'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:11:32'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:11:34'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:11:34'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:11:34'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:11:34'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:11:34'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:11:34'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 18:11:34'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:11:34'!
PASSED!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:11:39'!
test07_CannotPutObjectOutsideRoomToTheRight

	| room portableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: -1@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: -1@0).
		].! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:11:43'!
test08_CannotPutObjectOutsideRoomToTheRight

	| room portableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: -1@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: -1@0).
		].! !

!methodRemoval: RoomTest #test07_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 18:11:43'!
test07_CannotPutObjectOutsideRoomToTheRight

	| room portableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: -1@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: -1@0).
		].!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:11:47' prior: 50869615!
test08_CannotPutObjectOutsideRoomToTheRight

	| room portableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: 3@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: -1@0).
		].! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:11:50' prior: 50869646!
test08_CannotPutObjectOutsideRoomToTheRight

	| room portableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: 3@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: 3@0).
		].! !

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 18:11:51'!
FAILURE!
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:12:41' prior: 50869470!
put: anObject at: aCell 
	
	(aCell x < 0 or: [aCell x > dimension x]) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	
	objects at: aCell put: anObject.! !

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 18:12:42'!
FAILURE!
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:12:59' prior: 50869681!
put: anObject at: aCell 
	
	(aCell x < 0 or: [aCell x >= dimension x]) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	
	objects at: aCell put: anObject.! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:13:00'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:13:00'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:13:00'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:13:00'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:13:00'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 18:13:00'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:13:00'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 18:13:00'!
PASSED!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:13:52'!
test09_CannotPutObjectOutsideRoomDownwards

	| room portableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: 0@-1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: 0@-2).
		].! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:13:53' prior: 50869728!
test09_CannotPutObjectOutsideRoomDownwards

	| room portableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: 0@-1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: 0@-1).
		].! !

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 18:13:54'!
FAILURE!
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:14:14' prior: 50869693!
put: anObject at: aCell 
	
	(aCell x < 0 or: [aCell x >= dimension x]) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	(aCell y < 0) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	
	objects at: aCell put: anObject.! !

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 18:14:16'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:14:16'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:14:16'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:14:16'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:14:16'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:14:16'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 18:14:16'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:14:16'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 18:14:16'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 18:14:16'!
PASSED!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:14:26'!
test10_CannotPutObjectOutsideRoomUpwards

	| room portableObject |

	room := Room withDimension: 3@3.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: 0@3 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: 0@3).
		].! !

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 18:14:26'!
FAILURE!
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:14:41' prior: 50869763!
put: anObject at: aCell 
	
	(aCell x < 0 or: [aCell x >= dimension x]) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	(aCell y < 0 or: [aCell y >= dimension y]) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	
	objects at: aCell put: anObject.! !

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 18:14:42'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:14:42'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:14:42'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:14:42'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:14:42'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:14:42'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 18:14:42'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:14:42'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 18:14:42'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 18:14:42'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 18:14:42'!
PASSED!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:14:55' prior: 50869807!
test10_CannotPutObjectOutsideRoomUpwards

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: 0@4 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: 0@4).
		].! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:15:00' prior: 50869744!
test09_CannotPutObjectOutsideRoomDownwards

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: 0@-1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: 0@-1).
		].! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:15:04' prior: 50869662!
test08_CannotPutObjectOutsideRoomToTheRight

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: 3@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: 3@0).
		].! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:15:07' prior: 50869518!
test07_CannotPutObjectOutsideRoomToTheLeft

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: -1@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: -1@0).
		].! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:15:10' prior: 50869401!
test06_RoomWithMultipleObjectsHoldsEachObjectInPosition

	| room portableObject nonPortableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Table'.
	
	room put: portableObject at: 0@0.
	room put: nonPortableObject at: 1@1.
	
	self assert: portableObject equals: (room objectAtCell: 0@0).
	self assert: nonPortableObject equals: (room objectAtCell: 1@1).! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:15:13' prior: 50869005!
test05_RoomWithPortableObjectHoldsObjectInPosition

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	room put: portableObject at: 0@0.
	
	self assert: portableObject equals: (room objectAtCell: 0@0).! !

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 18:15:19'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 18:15:20'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:15:22'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:15:22'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:15:22'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:15:22'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:15:22'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 18:15:22'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:15:22'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 18:15:22'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 18:15:22'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 18:15:22'!
PASSED!
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:16:12'!
test11_CannotPutObjectOverObject

	| room portableObject nonPortableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: 0@4 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: 0@4).
		].! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:16:27' prior: 50870009!
test11_CannotPutObjectOverObject

	| room portableObject nonPortableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Table'.
	
	self should: [ room put: portableObject at: 0@4 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: 0@4).
		].! !
!RoomTest methodsFor: 'creation' stamp: 'VP 12/10/2020 18:17:15' prior: 50870025!
test11_CannotPutObjectOverObject

	| room portableObject nonPortableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Table'.
	
	room put: portableObject at: 0@0.
	
	self should: [ room put: nonPortableObject at: 0@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsAlreadyOccupiedErrorMessage equals: anError messageText.
			self assert: portableObject equals: (room objectAtCell: 0@0).
		].! !

!testRun: #RoomTest #test11_CannotPutObjectOverObject stamp: 'VP 12/10/2020 18:17:18'!
FAILURE!
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:17:56' prior: 50869826!
put: anObject at: aCell 
	
	(aCell x < 0 or: [aCell x >= dimension x]) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	(aCell y < 0 or: [aCell y >= dimension y]) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	(self hasObjectAt: aCell) ifTrue: [ self error: self class cellIsAlreadyOccupiedErrorMessage ].
	
	objects at: aCell put: anObject.! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:17:57'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:17:57'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:17:57'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:17:57'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:17:57'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 18:17:57'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:17:57'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 18:17:57'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 18:17:57'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 18:17:57'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectOverObject stamp: 'VP 12/10/2020 18:17:57'!
ERROR!

!testRun: #RoomTest #test11_CannotPutObjectOverObject stamp: 'VP 12/10/2020 18:17:57'!
ERROR!

!testRun: #RoomTest #test11_CannotPutObjectOverObject stamp: 'VP 12/10/2020 18:18:01'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'VP 12/10/2020 18:18:09'!
cellIsAlreadyOccupiedErrorMessage
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'VP 12/10/2020 18:18:21' prior: 50870123!
cellIsAlreadyOccupiedErrorMessage
	
	^'Cell is already occupied'.! !

!testRun: #RoomTest #test11_CannotPutObjectOverObject stamp: 'VP 12/10/2020 18:18:22'!
FAILURE!

!testRun: #RoomTest #test11_CannotPutObjectOverObject stamp: 'VP 12/10/2020 18:18:28'!
FAILURE!

!testRun: #RoomTest #test11_CannotPutObjectOverObject stamp: 'VP 12/10/2020 18:18:31'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:18:31'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:18:31'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:18:31'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:18:31'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:18:31'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 18:18:31'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:18:31'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 18:18:31'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 18:18:31'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 18:18:31'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectOverObject stamp: 'VP 12/10/2020 18:18:31'!
PASSED!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'VP 12/10/2020 18:21:49'!
Object subclass: #Room
	instanceVariableNames: 'dimension contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 18:21:49' prior: 50869541!
hasObjectAt: aCell 
	
	^contents includesKey: aCell.! !
!Room methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 18:21:49' prior: 50869305!
initializeWithDimension: aRoomDimension 
	
	dimension := aRoomDimension.
	contents := Dictionary new.! !
!Room methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 18:21:49' prior: 50869397!
objectAtCell: aCell 
	
	^contents at: aCell.! !
!Room methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 18:21:49' prior: 50870066!
put: anObject at: aCell 
	
	(aCell x < 0 or: [aCell x >= dimension x]) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	(aCell y < 0 or: [aCell y >= dimension y]) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	(self hasObjectAt: aCell) ifTrue: [ self error: self class cellIsAlreadyOccupiedErrorMessage ].
	
	contents at: aCell put: anObject.! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:22:29'!
isCellInRoomHorizontally: aCell

	^ aCell x < 0 or: [aCell x >= dimension x]! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:22:29' prior: 50870204!
put: anObject at: aCell 
	
	(self isCellInRoomHorizontally: aCell) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	(aCell y < 0 or: [aCell y >= dimension y]) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	(self hasObjectAt: aCell) ifTrue: [ self error: self class cellIsAlreadyOccupiedErrorMessage ].
	
	contents at: aCell put: anObject.! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:22:37'!
isCellInRoomVertically: aCell

	^ aCell y < 0 or: [aCell y >= dimension y]! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:22:37' prior: 50870225!
put: anObject at: aCell 
	
	(self isCellInRoomHorizontally: aCell) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	(self isCellInRoomVertically: aCell) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	(self hasObjectAt: aCell) ifTrue: [ self error: self class cellIsAlreadyOccupiedErrorMessage ].
	
	contents at: aCell put: anObject.! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:23:02' prior: 50870246!
put: anObject at: aCell 
	
	((self isCellInRoomHorizontally: aCell) and: [ self isCellInRoomVertically: aCell ]) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	(self hasObjectAt: aCell) ifTrue: [ self error: self class cellIsAlreadyOccupiedErrorMessage ].
	
	contents at: aCell put: anObject.! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:23:06'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:23:06'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:23:06'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:23:06'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:23:06'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 18:23:06'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:23:06'!
FAILURE!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 18:23:06'!
FAILURE!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 18:23:06'!
FAILURE!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 18:23:06'!
FAILURE!

!testRun: #RoomTest #test11_CannotPutObjectOverObject stamp: 'VP 12/10/2020 18:23:06'!
PASSED!
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:23:14' prior: 50870261!
put: anObject at: aCell 
	
	((self isCellInRoomHorizontally: aCell) or: [ self isCellInRoomVertically: aCell ]) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	(self hasObjectAt: aCell) ifTrue: [ self error: self class cellIsAlreadyOccupiedErrorMessage ].
	
	contents at: aCell put: anObject.! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:25:26'!
isCellOutOfRoomHorizontally: aCell

	^ aCell x < 0 or: [aCell x >= dimension x]! !
!Room methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 18:25:26' prior: 50870311!
put: anObject at: aCell 
	
	((self isCellOutOfRoomHorizontally: aCell) or: [ self isCellInRoomVertically: aCell ]) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	(self hasObjectAt: aCell) ifTrue: [ self error: self class cellIsAlreadyOccupiedErrorMessage ].
	
	contents at: aCell put: anObject.! !

!methodRemoval: Room #isCellInRoomHorizontally: stamp: 'VP 12/10/2020 18:25:26'!
isCellInRoomHorizontally: aCell

	^ aCell x < 0 or: [aCell x >= dimension x]!
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:25:35'!
isCellOutOfRoomVertically: aCell

	^ aCell y < 0 or: [aCell y >= dimension y]! !
!Room methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 18:25:35' prior: 50870329!
put: anObject at: aCell 
	
	((self isCellOutOfRoomHorizontally: aCell) or: [ self isCellOutOfRoomVertically: aCell ]) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	(self hasObjectAt: aCell) ifTrue: [ self error: self class cellIsAlreadyOccupiedErrorMessage ].
	
	contents at: aCell put: anObject.! !

!methodRemoval: Room #isCellInRoomVertically: stamp: 'VP 12/10/2020 18:25:35'!
isCellInRoomVertically: aCell

	^ aCell y < 0 or: [aCell y >= dimension y]!
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:25:47'!
isCellOutOfRoomBounds: aCell

	^ (self isCellOutOfRoomHorizontally: aCell) or: [ self isCellOutOfRoomVertically: aCell ]! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:25:47' prior: 50870353!
put: anObject at: aCell 
	
	(self isCellOutOfRoomBounds: aCell) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ].
	(self hasObjectAt: aCell) ifTrue: [ self error: self class cellIsAlreadyOccupiedErrorMessage ].
	
	contents at: aCell put: anObject.! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:26:12'!
assertCellIsInRoomBounds: aCell

	^ (self isCellOutOfRoomBounds: aCell) ifTrue: [ self error: self class cellIsOutOfBoundsErrorMessage ]! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:26:12' prior: 50870378!
put: anObject at: aCell 
	
	self assertCellIsInRoomBounds: aCell.
	(self hasObjectAt: aCell) ifTrue: [ self error: self class cellIsAlreadyOccupiedErrorMessage ].
	
	contents at: aCell put: anObject.! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:26:24'!
assertCellIsFree: aCell

	^ (self hasObjectAt: aCell) ifTrue: [ self error: self class cellIsAlreadyOccupiedErrorMessage ]! !
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 18:26:24' prior: 50870397!
put: anObject at: aCell 
	
	self assertCellIsInRoomBounds: aCell.
	self assertCellIsFree: aCell.
	
	contents at: aCell put: anObject.! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:28:17'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:28:17'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:28:17'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:28:17'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:28:17'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 18:28:17'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:28:17'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 18:28:17'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 18:28:17'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 18:28:17'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectOverObject stamp: 'VP 12/10/2020 18:28:17'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:28:33'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:28:33'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:28:33'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:28:33'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:28:33'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 18:28:33'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:28:33'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 18:28:33'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 18:28:33'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 18:28:33'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectOverObject stamp: 'VP 12/10/2020 18:28:33'!
PASSED!
!Room methodsFor: 'validations -- private' stamp: 'VP 12/10/2020 18:29:27' prior: 50870347!
isCellOutOfRoomVertically: aCell

	^ aCell y < 0 or: [aCell y >= dimension y]! !
!Room methodsFor: 'validations -- private' stamp: 'VP 12/10/2020 18:31:26' prior: 50870494!
isCellOutOfRoomVertically: aCell
	
	^ aCell y < 0 or: [aCell y >= dimension y]! !
!Room methodsFor: 'validations -- private' stamp: 'VP 12/10/2020 18:33:03' prior: 50870500!
isCellOutOfRoomVertically: aCell
	
	"Nota: S� que este c�digo podr�a haberse abstra�do en un mensaje between: and:, por ejemplo, para no repetir con
	 isCellOutOfRoomVertically. No lo hice porque en verdad ese mensaje ya existe, y al usarlo me pareci� que no quedaba
	 tan claro (quedaba medio 'feo'). Prefer� mantener el c�digo de esta manera, que me pareci� mucho m�s clara."
	^ aCell y < 0 or: [aCell y >= dimension y]! !
!Room methodsFor: 'validations -- private' stamp: 'VP 12/10/2020 18:33:16' prior: 50870506!
isCellOutOfRoomVertically: aCell
	
	"Nota: S� que este c�digo podr�a haberse abstra�do en un mensaje between: and:, por ejemplo, para no repetir con
	 isCellOutOfRoomHorizontally. No lo hice porque en verdad ese mensaje ya existe, y al usarlo me pareci� que no quedaba
	 tan claro (quedaba medio 'feo'). Prefer� mantener el c�digo de esta manera, que me pareci� mucho m�s clara."
	^ aCell y < 0 or: [aCell y >= dimension y]! !
!RoomTest methodsFor: 'contents' stamp: 'VP 12/10/2020 18:37:06'!
test11_CannotPutObjectOnOccupiedCell

	| room portableObject nonPortableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Table'.
	
	room put: portableObject at: 0@0.
	
	self should: [ room put: nonPortableObject at: 0@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsAlreadyOccupiedErrorMessage equals: anError messageText.
			self assert: portableObject equals: (room objectAtCell: 0@0).
		].! !

!methodRemoval: RoomTest #test11_CannotPutObjectOverObject stamp: 'VP 12/10/2020 18:37:06'!
test11_CannotPutObjectOverObject

	| room portableObject nonPortableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Table'.
	
	room put: portableObject at: 0@0.
	
	self should: [ room put: nonPortableObject at: 0@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsAlreadyOccupiedErrorMessage equals: anError messageText.
			self assert: portableObject equals: (room objectAtCell: 0@0).
		].!

!testRun: #RoomTest #test11_CannotPutObjectOnOccupiedCell stamp: 'VP 12/10/2020 18:37:24'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:37:24'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:37:24'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:37:24'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:37:24'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:37:24'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 18:37:24'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:37:24'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 18:37:24'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 18:37:24'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 18:37:24'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectOnOccupiedCell stamp: 'VP 12/10/2020 18:37:24'!
PASSED!
!RoomTest methodsFor: 'contents' stamp: 'VP 12/10/2020 18:39:18'!
test11_CannotPutObjectInOccupiedCell

	| room portableObject nonPortableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Table'.
	
	room put: portableObject at: 0@0.
	
	self should: [ room put: nonPortableObject at: 0@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsAlreadyOccupiedErrorMessage equals: anError messageText.
			self assert: portableObject equals: (room objectAtCell: 0@0).
		].! !

!methodRemoval: RoomTest #test11_CannotPutObjectOnOccupiedCell stamp: 'VP 12/10/2020 18:39:18'!
test11_CannotPutObjectOnOccupiedCell

	| room portableObject nonPortableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Table'.
	
	room put: portableObject at: 0@0.
	
	self should: [ room put: nonPortableObject at: 0@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsAlreadyOccupiedErrorMessage equals: anError messageText.
			self assert: portableObject equals: (room objectAtCell: 0@0).
		].!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 18:39:19'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 18:39:19'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 18:39:19'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 18:39:19'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 18:39:19'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 18:39:19'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 18:39:19'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 18:39:19'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 18:39:19'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 18:39:19'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 18:39:19'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 18:39:19'!
PASSED!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 18:46:25'!
test11_movingWhenHeadingWestWorksAsExpected

	| room playableCharacter |

	room := Room withDimension: 3@4.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: room.

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 18:46:29'!
defaultRoom

	^ Room withDimension: 3@4! !
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 18:46:29' prior: 50870698!
test11_movingWhenHeadingWestWorksAsExpected

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: room.

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 18:46:34' prior: 50870714!
defaultRoom

	^ Room withDimension: 3@4.! !
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 18:47:43'!
test11_PlayableCharacterMustBeCreatedInsideRoomBounds

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: room.

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !

!methodRemoval: PlayableCharacterTest #test11_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 18:47:43'!
test11_movingWhenHeadingWestWorksAsExpected

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: room.

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)!
!Room class methodsFor: 'error messages' stamp: 'VP 12/10/2020 18:48:56' prior: 50869509!
cellIsOutOfBoundsErrorMessage
	
	^'The given location is out of bounds for the room'.! !
!Room class methodsFor: 'error messages' stamp: 'VP 12/10/2020 18:49:03'!
locationIsOutOfBoundsErrorMessage
	
	^'The given location is out of bounds for the room'.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 18:49:03' prior: 50869907!
test08_CannotPutObjectOutsideRoomToTheRight

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: 3@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room locationIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: 3@0).
		].! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 18:49:03' prior: 50869923!
test07_CannotPutObjectOutsideRoomToTheLeft

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: -1@0 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room locationIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: -1@0).
		].! !
!Room methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 18:49:03' prior: 50870389!
assertCellIsInRoomBounds: aCell

	^ (self isCellOutOfRoomBounds: aCell) ifTrue: [ self error: self class locationIsOutOfBoundsErrorMessage ]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 18:49:03' prior: 50869891!
test09_CannotPutObjectOutsideRoomDownwards

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: 0@-1 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room locationIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: 0@-1).
		].! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 18:49:03' prior: 50869875!
test10_CannotPutObjectOutsideRoomUpwards

	| room portableObject |

	room := Room withDimension: 3@4.
	
	portableObject := NoPointsPortableObject named: 'Key' weighing: 1.
	
	self should: [ room put: portableObject at: 0@4 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room locationIsOutOfBoundsErrorMessage equals: anError messageText.
			self deny: (room hasObjectAt: 0@4).
		].! !

!methodRemoval: Room class #cellIsOutOfBoundsErrorMessage stamp: 'VP 12/10/2020 18:49:03'!
cellIsOutOfBoundsErrorMessage
	
	^'The given location is out of bounds for the room'.!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 18:49:14' prior: 50870739!
test11_PlayableCharacterMustBeCreatedInsideRoomBounds

	| room |

	room := self defaultRoom.
	
	self should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@2 heading: #West in: room ]
		raise: Error
		withMessageText: Room locationIsOutOfBoundsErrorMessage.! !

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 18:49:20'!
FAILURE!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 18:50:16'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in: aRoom.! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 18:52:01' prior: 50870877!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom
	
	| newHeading |
	
	aRoom assertCellIsInRoomBounds: aPosition.

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in: aRoom.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 18:52:02'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 18:52:02'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 18:52:02'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 18:52:02'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 18:52:02'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 18:52:02'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 18:52:02'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 18:52:02'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 18:52:02'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 18:52:02'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 18:52:02'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 18:52:06'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 18:52:06'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 18:52:06'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 18:52:06'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 18:52:06'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 18:52:06'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 18:52:06'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 18:52:06'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 18:52:06'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 18:52:06'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 18:52:06'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 18:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 18:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 18:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 18:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 18:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 18:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 18:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 18:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 18:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 18:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 18:52:08'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 18:52:14'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 18:52:14'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 18:52:14'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 18:52:14'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 18:52:14'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 18:52:14'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 18:52:14'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 18:52:14'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 18:52:14'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 18:52:14'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 18:52:14'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 18:52:14'!
PASSED!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 18:53:06'!
test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell

	| room |

	room := self defaultRoom.
	
	self should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: room ]
		raise: Error
		withMessageText: Room locationIsOutOfBoundsErrorMessage.! !
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 18:53:20' prior: 50871074!
test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell

	| room |

	room := self defaultRoom.
	
	self should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: room ]
		raise: Error
		withMessageText: Room cellIsAlreadyOccupiedErrorMessage.! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 18:54:06' prior: 50870735!
defaultRoom

	| room |
	room := Room withDimension: 3@4.
	room put: self defaultPortableObject at: 2@2.
	
	^room.! !

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 18:54:11'!
ERROR!
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 18:54:27'!
defaultPortableObject
	self shouldBeImplemented.! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 18:54:46' prior: 50871110!
defaultPortableObject
	
	^NoPointsPortableObject named: 'Key' weighing: 1.! !

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 18:54:47'!
FAILURE!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 18:55:21' prior: 50870888!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom
	
	| newHeading |
	
	aRoom assertCellIsInRoomBounds: aPosition.
	aRoom assertCellIsFree: aPosition.

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in: aRoom.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 18:55:23'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 18:55:23'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 18:55:23'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 18:55:23'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 18:55:23'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 18:55:23'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 18:55:23'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 18:55:23'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 18:55:23'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 18:55:23'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 18:55:23'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 18:55:23'!
PASSED!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 18:56:39'!
test13_PlayableCharacterCannotMoveOutsideRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: Room cellIsAlreadyOccupiedErrorMessage.! !
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 18:57:01' prior: 50871185!
test13_PlayableCharacterCannotMoveOutsideRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #North in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withMessageText: Room cellIsAlreadyOccupiedErrorMessage.! !

!testRun: #PlayableCharacterTest #test13_PlayableCharacterCannotMoveOutsideRoom stamp: 'VP 12/10/2020 18:57:05'!
ERROR!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'VP 12/10/2020 18:57:24'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name newHeading_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'VP 12/10/2020 18:57:24'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name newHeading_CHANGE_ME room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'VP 12/10/2020 18:57:24'!
initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in: aRoom 
	self shouldBeImplemented.
	name := aName.
	backpack := aBackpack.
	position := aPosition.
	newHeading_CHANGE_ME := newHeading.
	room := aRoom.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'VP 12/10/2020 18:57:30' prior: 50871236!
initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in: aRoom 
	
	name := aName.
	backpack := aBackpack.
	position := aPosition.
	newHeading_CHANGE_ME := newHeading.
	room := aRoom.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'VP 12/10/2020 18:57:48' prior: 50871247!
initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in: aRoom 
	
	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := newHeading.
	room := aRoom.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'VP 12/10/2020 18:57:54' prior: 50871257!
initializeNamed: aName using: aBackpack at: aPosition heading: aPlayableCharacterHeading in: aRoom 
	
	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aPlayableCharacterHeading.
	room := aRoom.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 18:58:01'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 18:58:01'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 18:58:01'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 18:58:01'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 18:58:01'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 18:58:01'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 18:58:01'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 18:58:01'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 18:58:01'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 18:58:01'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 18:58:01'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 18:58:01'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterCannotMoveOutsideRoom stamp: 'VP 12/10/2020 18:58:01'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterCannotMoveOutsideRoom stamp: 'VP 12/10/2020 18:58:01'!
FAILURE!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 18:59:15' prior: 50871199!
test13_PlayableCharacterCannotMoveOutsideRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #North in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsAlreadyOccupiedErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 2@1 heading: #North).
		].! !

!testRun: #PlayableCharacterTest #test13_PlayableCharacterCannotMoveOutsideRoom stamp: 'VP 12/10/2020 18:59:15'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'VP 12/10/2020 19:00:31' prior: 50868350!
moveForward
	
	| newPosition |
	newPosition := position + heading forwardPoint.
	room assertCellIsInRoomBounds: newPosition.
	
	position := newPosition.! !

!testRun: #PlayableCharacterTest #test13_PlayableCharacterCannotMoveOutsideRoom stamp: 'VP 12/10/2020 19:00:34'!
FAILURE!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:00:46' prior: 50871332!
test13_PlayableCharacterCannotMoveOutsideRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@1 heading: #North in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsAlreadyOccupiedErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 2@1 heading: #North).
		].! !

!testRun: #PlayableCharacterTest #test13_PlayableCharacterCannotMoveOutsideRoom stamp: 'VP 12/10/2020 19:00:46'!
FAILURE!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:00:59' prior: 50871366!
test13_PlayableCharacterCannotMoveOutsideRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@3 heading: #North in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsAlreadyOccupiedErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 2@1 heading: #North).
		].! !
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:01:01' prior: 50871388!
test13_PlayableCharacterCannotMoveOutsideRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room cellIsAlreadyOccupiedErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 2@1 heading: #North).
		].! !

!testRun: #PlayableCharacterTest #test13_PlayableCharacterCannotMoveOutsideRoom stamp: 'VP 12/10/2020 19:01:02'!
FAILURE!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:01:27' prior: 50871406!
test13_PlayableCharacterCannotMoveOutsideRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room locationIsOutOfBoundsErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 2@1 heading: #North).
		].! !

!testRun: #PlayableCharacterTest #test13_PlayableCharacterCannotMoveOutsideRoom stamp: 'VP 12/10/2020 19:01:30'!
FAILURE!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:01:38' prior: 50871428!
test13_PlayableCharacterCannotMoveOutsideRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Room locationIsOutOfBoundsErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 1@3 heading: #North).
		].! !

!testRun: #PlayableCharacterTest #test13_PlayableCharacterCannotMoveOutsideRoom stamp: 'VP 12/10/2020 19:01:39'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:01:39'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:01:39'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:01:39'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:01:39'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:01:40'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:01:40'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:01:40'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:01:40'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:01:40'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:01:40'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:01:40'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:01:40'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterCannotMoveOutsideRoom stamp: 'VP 12/10/2020 19:01:40'!
PASSED!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:03:04' prior: 50871450!
test13_PlayableCharacterCannotMoveOutsideRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveOutsideRoomErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 1@3 heading: #North).
		].! !

!methodRemoval: PlayableCharacter class #named:using:at:heading: stamp: 'VP 12/10/2020 19:04:49'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading !

!methodRemoval: PlayableCharacter #initializeNamed:using:at:heading: stamp: 'VP 12/10/2020 19:05:03'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'VP 12/10/2020 19:05:15' prior: 50867990!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: self defaultRoom.

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'VP 12/10/2020 19:05:19' prior: 50868002!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: self defaultRoom.

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'VP 12/10/2020 19:05:21' prior: 50868014!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: self defaultRoom.

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'VP 12/10/2020 19:05:25' prior: 50868025!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: self defaultRoom.

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'VP 12/10/2020 19:05:28' prior: 50868036!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East in: self defaultRoom.

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'VP 12/10/2020 19:05:31' prior: 50868050!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South in: self defaultRoom.

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'VP 12/10/2020 19:05:34' prior: 50868064!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: self defaultRoom.

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'VP 12/10/2020 19:05:41' prior: 50868078!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X in: self defaultRoom]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'VP 12/10/2020 19:05:44' prior: 50868091!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: self defaultRoom.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'VP 12/10/2020 19:05:47' prior: 50868104!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: self defaultRoom.
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:05:55'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:05:55'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterCannotMoveOutsideRoom stamp: 'VP 12/10/2020 19:05:55'!
ERROR!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterCannotMoveOutsideRoom stamp: 'VP 12/10/2020 19:05:55'!
ERROR!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:08:37'!
test13_PlayableCharacterMovingForwardCannotLeaveRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveOutsideRoomErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 1@3 heading: #North).
		].! !

!methodRemoval: PlayableCharacterTest #test13_PlayableCharacterCannotMoveOutsideRoom stamp: 'VP 12/10/2020 19:08:39'!
test13_PlayableCharacterCannotMoveOutsideRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@3 heading: #North in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveOutsideRoomErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 1@3 heading: #North).
		].!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:08:41'!
ERROR!
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 19:08:52'!
cantMoveOutsideRoomErrorMessage
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 19:09:06' prior: 50871765!
cantMoveOutsideRoomErrorMessage
	
	^'Can not move player outside room'.! !

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:09:08'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'VP 12/10/2020 19:09:29' prior: 50871354!
moveForward
	
	| newPosition |
	newPosition := position + heading forwardPoint.
	room isCellOutOfRoomBounds: newPosition.
	
	position := newPosition.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'VP 12/10/2020 19:09:47' prior: 50871781!
moveForward
	
	| newPosition |
	newPosition := position + heading forwardPoint.
	(room isCellOutOfRoomBounds: newPosition) ifTrue: [ self error: self class cantMoveOutsideRoomErrorMessage ].
	
	position := newPosition.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:09:47'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:09:47'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:09:47'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:09:47'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:09:47'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:09:47'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:09:47'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:09:47'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:09:47'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:09:47'!
ERROR!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:09:47'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:09:47'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:09:47'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:09:49'!
ERROR!
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 19:10:21' prior: 50871099!
defaultRoom

	| room |
	room := Room withDimension: 3@4.
	room put: self defaultPortableObject at: 2@2.
	
	^room.! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 19:10:23' prior: 50871854!
defaultRoom

	| room |
	room := Room withDimension: 3@4.
	room put: self defaultPortableObject at: 2@2.
	
	^room.! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 19:10:24' prior: 50871861!
defaultRoom

	| room |
	room := Room withDimension: 3@5.
	room put: self defaultPortableObject at: 2@2.
	
	^room.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:10:26'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:10:26'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:10:26'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:10:26'!
ERROR!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:10:26'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:10:26'!
FAILURE!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:10:27'!
ERROR!
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 19:10:42' prior: 50871868!
defaultRoom

	| room |
	room := Room withDimension: 4@5.
	room put: self defaultPortableObject at: 2@2.
	
	^room.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:10:42'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:10:42'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:10:42'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:10:42'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:10:42'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:10:42'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:10:42'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:10:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:10:42'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:10:42'!
ERROR!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:10:42'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:10:42'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:10:42'!
FAILURE!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:10:44'!
ERROR!
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 19:11:06' prior: 50871929!
defaultRoom

	| room |
	room := Room withDimension: 4@5.
	room put: self defaultPortableObject at: 3@4.
	
	^room.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:11:07'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:11:07'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:11:07'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:11:07'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:11:07'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:11:07'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:11:07'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:11:07'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:11:07'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:11:07'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:11:07'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:11:07'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:11:07'!
FAILURE!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:11:09'!
FAILURE!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:11:31' prior: 50870861!
test11_PlayableCharacterMustBeCreatedInsideRoomBounds

	| room |

	room := self defaultRoom.
	
	self should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@2 heading: #West in: room ]
		raise: Error
		withMessageText: Room locationIsOutOfBoundsErrorMessage.! !

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:11:31'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:11:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:11:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:11:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:11:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:11:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:11:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:11:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:11:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:11:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:11:31'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:11:31'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:11:31'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:11:31'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:11:33'!
FAILURE!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:11:41' prior: 50871087!
test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell

	| room |

	room := self defaultRoom.
	
	self should: [ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@4 heading: #West in: room ]
		raise: Error
		withMessageText: Room cellIsAlreadyOccupiedErrorMessage.! !

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:11:41'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:11:41'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:11:41'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:11:41'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:11:41'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:11:41'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:11:41'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:11:41'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:11:41'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:11:41'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:11:41'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:11:41'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:11:41'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:11:41'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:11:42'!
FAILURE!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:11:52' prior: 50871724!
test13_PlayableCharacterMovingForwardCannotLeaveRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@4 heading: #North in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveOutsideRoomErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 1@4 heading: #North).
		].! !

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:11:52'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:11:52'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:11:52'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:11:52'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:11:52'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:11:52'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:11:52'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:11:52'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:11:52'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:11:52'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:11:52'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:11:52'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:11:52'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:11:52'!
PASSED!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:12:09'!
test14_PlayableCharacterMovingBackwardCannotLeaveRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@4 heading: #North in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveOutsideRoomErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 1@4 heading: #North).
		].! !
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:12:43' prior: 50872267!
test14_PlayableCharacterMovingBackwardCannotLeaveRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #East in: room.
	
	self should: [ playableCharacter moveBackward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveOutsideRoomErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 1@4 heading: #North).
		].! !
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:12:48' prior: 50872286!
test14_PlayableCharacterMovingBackwardCannotLeaveRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@4 heading: #East in: room.
	
	self should: [ playableCharacter moveBackward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveOutsideRoomErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 0@4 heading: #East).
		].! !

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:12:49'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'VP 12/10/2020 19:13:05' prior: 50868345!
moveBackward
	
	| newPosition |
	newPosition := position - heading forwardPoint.
	(room isCellOutOfRoomBounds: newPosition) ifTrue: [ self error: self class cantMoveOutsideRoomErrorMessage ].
	
	position := newPosition.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:13:07'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:13:07'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'VP 12/10/2020 19:13:34'!
moveToPosition: newPosition

	(room isCellOutOfRoomBounds: newPosition) ifTrue: [ self error: self class cantMoveOutsideRoomErrorMessage ].
	
	position := newPosition! !
!PlayableCharacter methodsFor: 'moving' stamp: 'VP 12/10/2020 19:13:34' prior: 50872328!
moveBackward
	
	| newPosition |
	newPosition := position - heading forwardPoint.
	self moveToPosition: newPosition.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'VP 12/10/2020 19:13:43' prior: 50872401!
moveBackward
	
	self moveToPosition: (position - heading forwardPoint).! !
!PlayableCharacter methodsFor: 'moving' stamp: 'VP 12/10/2020 19:13:57' prior: 50871789!
moveForward
	
	self moveToPosition: (position + heading forwardPoint).! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:14:07'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:14:07'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:14:07'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:14:07'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:14:07'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:14:07'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:14:07'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:14:07'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:14:07'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:14:07'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:14:07'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:14:07'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:14:07'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:14:07'!
PASSED!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:15:34'!
test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@3 heading: #North in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveIntoOccupiedCellErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 1@4 heading: #North).
		].! !

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:15:39'!
FAILURE!
!PlayableCharacter methodsFor: 'moving -- private' stamp: 'VP 12/10/2020 19:16:36' prior: 50872392!
moveToPosition: newPosition

	(room isCellOutOfRoomBounds: newPosition) ifTrue: [ self error: self class cantMoveOutsideRoomErrorMessage ].
	(room hasObjectAt: newPosition) ifTrue: [ self error: self class cantMoveIntoOccupiedCellErrorMessage ].
	
	position := newPosition! !
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:16:47' prior: 50872474!
test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@3 heading: #North in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveIntoOccupiedPositionErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 1@4 heading: #North).
		].! !
!PlayableCharacter methodsFor: 'moving -- private' stamp: 'VP 12/10/2020 19:16:57' prior: 50872498!
moveToPosition: newPosition

	(room isCellOutOfRoomBounds: newPosition) ifTrue: [ self error: self class cantMoveOutsideRoomErrorMessage ].
	(room hasObjectAt: newPosition) ifTrue: [ self error: self class cantMoveIntoOccupiedPositionErrorMessage ].
	
	position := newPosition! !
!PlayableCharacter class methodsFor: 'error messages' stamp: 'VP 12/10/2020 19:17:08'!
cantMoveIntoOccupiedPositionErrorMessage
	
	^'Can not move player into an occupied position'.! !

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:17:19'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:17:19'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:17:19'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:17:19'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:17:19'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:17:19'!
FAILURE!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:17:28' prior: 50872510!
test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@3 heading: #North in: room.
	
	self should: [ playableCharacter moveForward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveIntoOccupiedPositionErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 3@3 heading: #North).
		].! !

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:17:30'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:17:32'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:17:32'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:17:32'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:17:32'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:17:33'!
PASSED!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:18:00'!
test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@3 heading: #North in: room.
	
	self should: [ playableCharacter moveBackward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveIntoOccupiedPositionErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 3@3 heading: #North).
		].! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 19:18:39' prior: 50871990!
defaultRoom

	| room |
	room := Room withDimension: 4@5.
	room put: self defaultPortableObject at: 3@4.
	room put: self defaultNonPortableObject at: 0@4.
	
	^room.! !
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:18:56' prior: 50872618!
test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@4 heading: #East in: room.
	
	self should: [ playableCharacter moveBackward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveIntoOccupiedPositionErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 1@4 heading: #East).
		].! !

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:18:56'!
ERROR!
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 19:19:07'!
defaultNonPortableObject
	self shouldBeImplemented.! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 19:19:40' prior: 50872669!
defaultNonPortableObject
	
	^NonPortableObject named: 'Perchero'! !

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:19:42'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:19:42'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:19:42'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:19:42'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:19:42'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:19:42'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:19:42'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:19:42'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:19:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:19:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:19:42'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:19:42'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:19:42'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:19:42'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:19:42'!
ERROR!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:19:42'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:19:42'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:19:42'!
ERROR!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:20:14' prior: 50872305!
test14_PlayableCharacterMovingBackwardCannotLeaveRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #East in: room.
	
	self should: [ playableCharacter moveBackward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveOutsideRoomErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 0@4 heading: #East).
		].! !

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:20:16'!
FAILURE!
!PlayableCharacterTest methodsFor: 'room movement' stamp: 'VP 12/10/2020 19:20:21' prior: 50872752!
test14_PlayableCharacterMovingBackwardCannotLeaveRoom

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #East in: room.
	
	self should: [ playableCharacter moveBackward ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter cantMoveOutsideRoomErrorMessage equals: anError messageText.
			self assert: (playableCharacter isAt: 0@3 heading: #East).
		].! !

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:20:23'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:20:24'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:20:26'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:20:26'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:20:26'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:20:26'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:20:26'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:20:26'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:20:30'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:20:30'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:20:30'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:20:30'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:20:31'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:20:31'!
PASSED!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:26:51'!
test17_PlayableCharacterCanNotTakeObjectIfNotNextToIt

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #North in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter newClassNameCanNotHaveSeparatorsErrorMessage equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 0@4)).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:27:05' prior: 50872890!
test17_PlayableCharacterCanNotTakeObjectIfNotNextToIt

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #North in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter nothingToTakeErrorMessage equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 0@4)).
		].! !
!PlayableCharacter class methodsFor: 'error messages' stamp: 'VP 12/10/2020 19:27:30'!
nothingToTakeErrorMessage
	
	^'There is no portable object nearby for the character to take'.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:27:32'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 19:27:32'!
FAILURE!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 19:27:32'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:28:11'!
take

	! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:28:52'!
takePosition

	^position + heading forwardPoint.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:29:31' prior: 50873007!
take

	self error: self class nothingToTakeErrorMessage.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:29:32'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:29:32'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:29:32'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:29:32'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:29:32'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:29:32'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:29:32'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:29:32'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:29:32'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:29:32'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:29:32'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:29:32'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:29:32'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:29:32'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:29:32'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:29:32'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 19:29:32'!
PASSED!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:30:23'!
test18_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter nothingToTakeErrorMessage equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: (room objectAtCell: 0@4)).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:31:02' prior: 50873087!
test18_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection

	| room playableCharacter objectToGrab |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room.
	
	objectToGrab := room objectAtCell: 0@4.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter nothingToTakeErrorMessage equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: objectToGrab).
			self deny: (room hasObjectAt: 0@4)
		].! !

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:31:03'!
FAILURE!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:31:08'!
test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection

	| room playableCharacter objectToGrab |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room.
	
	objectToGrab := room objectAtCell: 0@4.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter nothingToTakeErrorMessage equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: objectToGrab).
			self deny: (room hasObjectAt: 0@4)
		].! !

!methodRemoval: PlayableCharacterTest #test18_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:31:08'!
test18_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection

	| room playableCharacter objectToGrab |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room.
	
	objectToGrab := room objectAtCell: 0@4.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter nothingToTakeErrorMessage equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: objectToGrab).
			self deny: (room hasObjectAt: 0@4)
		].!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:31:11'!
test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #North in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter nothingToTakeErrorMessage equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 0@4)).
		].! !

!methodRemoval: PlayableCharacterTest #test17_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 19:31:11'!
test17_PlayableCharacterCanNotTakeObjectIfNotNextToIt

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #North in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter nothingToTakeErrorMessage equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 0@4)).
		].!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:31:27' prior: 50873180!
test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #North in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter nothingToTakeErrorMessage equals: anError messageText.
			self assert: (room hasObjectAt: 0@4).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 0@4)).
		].! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:33:29' prior: 50873015!
take

	(room hasObjectAt: position + 0@1) ifFalse: [ 	self error: self class nothingToTakeErrorMessage ].
! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:35:14' prior: 50873238!
take

	(room hasObjectAt: position + 0@1) ifFalse: [ 	self error: self class nothingToTakeErrorMessage ].
	self take: (room objectAtCell: position + 0@1).
	room objectWasTakenFromCell: position + 0@1.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:35:46'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:35:46'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:35:46'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:35:46'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:35:46'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:35:46'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:35:46'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:35:46'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:35:46'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:35:46'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:35:46'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:35:46'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:35:46'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:35:46'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:35:46'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:35:46'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:35:46'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 19:35:46'!
FAILURE!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:35:47'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:36:06' prior: 50873245!
take

	(room hasObjectAt: position + (0@1)) ifFalse: [ 	self error: self class nothingToTakeErrorMessage ].
	self take: (room objectAtCell: position + (0@1)).
	room objectWasTakenFromCell: position + (0@1).! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:36:07'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 19:36:07'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:36:07'!
FAILURE!
!StageObject methodsFor: 'no messages' stamp: 'VP 12/10/2020 19:36:52'!
assertCanAddTo: aBackpack

	self subclassResponsibility	! !

!methodRemoval: PortableObject #assertCanAddTo: stamp: 'VP 12/10/2020 19:36:57'!
assertCanAddTo: aBackpack

	self subclassResponsibility	!
!NonPortableObject methodsFor: 'initialization' stamp: 'VP 12/10/2020 19:37:24' overrides: 50873419!
assertCanAddTo: aBackpack

	self subclassResponsibility	! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 19:37:41' prior: 50873429 overrides: 50873419!
assertCanAddTo: aBackpack

	^false.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:37:42'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 19:37:42'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:37:42'!
FAILURE!
!Room methodsFor: 'putting objects' stamp: 'VP 12/10/2020 19:39:01'!
objectWasTakenFrom: aCell 
	
	contents removeKey: aCell.! !

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 19:39:02'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 19:39:02'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 19:39:02'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 19:39:02'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 19:39:02'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 19:39:02'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 19:39:02'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 19:39:02'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 19:39:02'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 19:39:02'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 19:39:02'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:39:11'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 19:39:11'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:39:11'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:39:34' prior: 50873332!
take

	(room hasObjectAt: position + (0@1)) ifFalse: [ 	self error: self class nothingToTakeErrorMessage ].
	self take: (room objectAtCell: position + (0@1)).
	room objectWasTakenFrom: position + (0@1).! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:39:34'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:39:35'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:39:35'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:39:35'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:39:35'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 19:39:35'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:39:35'!
FAILURE!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:40:18' prior: 50873134!
test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection

	| room playableCharacter objectToGrab |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room.
	
	objectToGrab := room objectAtCell: 0@4.
	
	playableCharacter take.
	self assert: (playableCharacter backpackIncludes: objectToGrab).
	self deny: (room hasObjectAt: 0@4).! !

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 19:40:19'!
PASSED!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:40:45'!
test18_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #East in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter nothingToTakeErrorMessage equals: anError messageText.
			self assert: (room hasObjectAt: 0@4).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 0@4)).
		].! !

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 19:40:46'!
FAILURE!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:40:51'!
test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #East in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter nothingToTakeErrorMessage equals: anError messageText.
			self assert: (room hasObjectAt: 0@4).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 0@4)).
		].! !

!methodRemoval: PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 19:40:51'!
test18_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #East in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter nothingToTakeErrorMessage equals: anError messageText.
			self assert: (room hasObjectAt: 0@4).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 0@4)).
		].!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 19:40:52'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:41:24' prior: 50873673!
take

	(room hasObjectAt: self takePosition) ifFalse: [ 	self error: self class nothingToTakeErrorMessage ].
	self take: (room objectAtCell: self takePosition).
	room objectWasTakenFrom: self takePosition.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 19:41:25'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 19:41:25'!
PASSED!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:42:29' prior: 50873923!
take

	| takePosition |
	takePosition := self takePosition.
	(room hasObjectAt: takePosition) ifFalse: [ 	self error: self class nothingToTakeErrorMessage ].
	
	self take: (room objectAtCell: takePosition).
	room objectWasTakenFrom: takePosition.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:42:45'!
takeObjectAt: takePosition

	(room hasObjectAt: takePosition) ifFalse: [ 	self error: self class nothingToTakeErrorMessage ].
	
	self take: (room objectAtCell: takePosition).
	room objectWasTakenFrom: takePosition! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:42:45' prior: 50874010!
take

	| takePosition |
	takePosition := self takePosition.
	self takeObjectAt: takePosition.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:42:52' prior: 50874031!
take

	self takeObjectAt: (self takePosition).! !
!PlayableCharacter methodsFor: 'take -- private' stamp: 'VP 12/10/2020 19:43:25'!
assertThereIsObjectToTakeAt: takePosition

	^ (room hasObjectAt: takePosition) ifFalse: [ 	self error: self class nothingToTakeErrorMessage ]! !
!PlayableCharacter methodsFor: 'take -- private' stamp: 'VP 12/10/2020 19:43:25' prior: 50874021!
takeObjectAt: takePosition

	self assertThereIsObjectToTakeAt: takePosition.
	
	self take: (room objectAtCell: takePosition).
	room objectWasTakenFrom: takePosition! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 19:43:56'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 19:43:56'!
PASSED!
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 19:44:32' prior: 50872637!
defaultRoom

	| room |
	room := Room withDimension: 4@5.
	room put: self defaultNonPortableObject at: 3@4.
	room put: self defaultPortableObject at: 0@4.
	
	^room.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 19:44:32'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 19:44:32'!
PASSED!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:46:19'!
test20_PlayableCharacterCanNotTakeEmptyNonPortableObject

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@4 heading: #North in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter nothingToTakeErrorMessage equals: anError messageText.
			self assert: (room hasObjectAt: 4@5).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 4@5)).
		].! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 19:48:59'!
canNotCarryNonPortableObject

	^'Non portable objects cannot be carried!!'.! !
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 19:49:20' prior: 50873435 overrides: 50873419!
assertCanAddTo: aBackpack

	^self error: self class canNotCarryNonPortableObject.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 19:49:21'!
ERROR!

!testRun: #RoomTest #test01_CanNotCreateRoomWithWidthLessThan1 stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #RoomTest #test02_CanNotCreateRoomWithHeightLessThan1 stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #RoomTest #test03_CanNotCreateRoomWithNonIntegerWidth stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #RoomTest #test04_CanNotCreateRoomWithNonIntegerHeight stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #RoomTest #test05_RoomWithPortableObjectHoldsObjectInPosition stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #RoomTest #test06_RoomWithMultipleObjectsHoldsEachObjectInPosition stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #RoomTest #test07_CannotPutObjectOutsideRoomToTheLeft stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #RoomTest #test08_CannotPutObjectOutsideRoomToTheRight stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #RoomTest #test09_CannotPutObjectOutsideRoomDownwards stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #RoomTest #test10_CannotPutObjectOutsideRoomUpwards stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #RoomTest #test11_CannotPutObjectInOccupiedCell stamp: 'VP 12/10/2020 19:49:21'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 19:49:21'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 19:49:30'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 19:49:30'!
ERROR!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 19:49:30'!
ERROR!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:49:51' prior: 50874221!
test20_PlayableCharacterCanNotTakeEmptyNonPortableObject

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@3 heading: #North in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: PlayableCharacter nothingToTakeErrorMessage equals: anError messageText.
			self assert: (room hasObjectAt: 3@4).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@4)).
		].! !

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 19:49:53'!
FAILURE!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:50:15' prior: 50874460!
test20_PlayableCharacterCanNotTakeEmptyNonPortableObject

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@3 heading: #North in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: NonPortableObject canNotCarryNonPortableObject equals: anError messageText.
			self assert: (room hasObjectAt: 3@4).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@4)).
		].! !

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 19:50:16'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 19:50:16'!
PASSED!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:51:12'!
test20_PlayableCharacterCanTakePortableObjectInsideNonPortableObject

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@3 heading: #North in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: NonPortableObject canNotCarryNonPortableObject equals: anError messageText.
			self assert: (room hasObjectAt: 3@4).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@4)).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:51:15'!
test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@3 heading: #North in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: NonPortableObject canNotCarryNonPortableObject equals: anError messageText.
			self assert: (room hasObjectAt: 3@4).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@4)).
		].! !

!methodRemoval: PlayableCharacterTest #test20_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 19:51:15'!
test20_PlayableCharacterCanTakePortableObjectInsideNonPortableObject

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@3 heading: #North in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: NonPortableObject canNotCarryNonPortableObject equals: anError messageText.
			self assert: (room hasObjectAt: 3@4).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@4)).
		].!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:52:34' prior: 50874610!
test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject

	| room playableCharacter |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #South in: room.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: NonPortableObject canNotCarryNonPortableObject equals: anError messageText.
			self assert: (room hasObjectAt: 3@1).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@4)).
			self assert: (playableCharacter backpackIncludes: (room objectAtCell: 3@4)).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:52:45' prior: 50873760!
test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection

	| room playableCharacter objectToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@3 heading: #North in: room.
	
	objectToTake := room objectAtCell: 0@4.
	
	playableCharacter take.
	self assert: (playableCharacter backpackIncludes: objectToTake).
	self deny: (room hasObjectAt: 0@4).! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:53:34' prior: 50874653!
test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject

	| room playableCharacter objectToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #South in: room.
	
	objectToTake := (room objectAtCell: 0@4) portableObject.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: NonPortableObject canNotCarryNonPortableObject equals: anError messageText.
			self assert: (room hasObjectAt: 3@1).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@4)).
			self assert: (playableCharacter backpackIncludes: objectToTake).
		].! !

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 19:53:41'!
ERROR!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:53:58' prior: 50874693!
test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject

	| room playableCharacter objectToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #South in: room.
	
	objectToTake := (room objectAtCell: 3@0) portableObject.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: NonPortableObject canNotCarryNonPortableObject equals: anError messageText.
			self assert: (room hasObjectAt: 3@1).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@4)).
			self assert: (playableCharacter backpackIncludes: objectToTake).
		].! !
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 19:54:07' prior: 50874723!
test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject

	| room playableCharacter objectToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #South in: room.
	
	objectToTake := (room objectAtCell: 3@0) portableObject.
	
	self should: [ playableCharacter take ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: NonPortableObject canNotCarryNonPortableObject equals: anError messageText.
			self assert: (room hasObjectAt: 3@0).
			self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@0)).
			self assert: (playableCharacter backpackIncludes: objectToTake).
		].! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 19:54:26' prior: 50874136!
defaultRoom

	| room |
	room := Room withDimension: 4@5.
	room put: self defaultNonPortableObject at: 3@4.
	room put: self defaultNonPortableObject at: 3@4.
	room put: self defaultPortableObject at: 0@4.
	
	^room.! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 19:54:32'!
emptyNonPortableObject
	
	^NonPortableObject named: 'Perchero'! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'VP 12/10/2020 19:54:32' prior: 50874773!
defaultRoom

	| room |
	room := Room withDimension: 4@5.
	room put: self emptyNonPortableObject at: 3@4.
	room put: self emptyNonPortableObject at: 3@4.
	room put: self defaultPortableObject at: 0@4.
	
	^room.! !

!methodRemoval: PlayableCharacterTest #defaultNonPortableObject stamp: 'VP 12/10/2020 19:54:32'!
defaultNonPortableObject
	
	^NonPortableObject named: 'Perchero'!
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 19:55:00' prior: 50874789!
defaultRoom

	| room |
	room := Room withDimension: 4@5.
	room put: self emptyNonPortableObject at: 3@4.
	room put: self singleObjectNonPortableObject at: 3@0.
	room put: self defaultPortableObject at: 0@4.
	
	^room.! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'VP 12/10/2020 19:55:37'!
singleObjectNonPortableObject
	
	^NonPortableObject named: 'Perchero' containing: {self defaultPortableObject}.! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 19:56:19'!
named: anObjectName containing: someContainedObjects
	
	^self new initializeNamed: anObjectName containing: someContainedObjects. ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'VP 12/10/2020 19:56:34' prior: 50869162!
named: anObjectName
	
	^self named: anObjectName containing: {}. ! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'VP 12/10/2020 19:56:54'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name childObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'VP 12/10/2020 19:56:52'!
initializeNamed: anObjectName containing: someContainedObjects
	
	name := anObjectName.
	childObjects := someContainedObjects.! !

!methodRemoval: NonPortableObject #initializeNamed: stamp: 'VP 12/10/2020 19:57:02'!
initializeNamed: anObjectName 
	
	name := anObjectName.!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 19:57:17'!
ERROR!
!NonPortableObject methodsFor: 'accessing' stamp: 'VP 12/10/2020 19:57:29'!
portableObject
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'accessing' stamp: 'VP 12/10/2020 19:57:40' prior: 50874859!
portableObject
	
	^childObjects first.! !

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 19:57:41'!
FAILURE!

----SNAPSHOT----(10 December 2020 19:58:31) CuisUniversity-4384.image priorSource: 17183614!
!Backpack methodsFor: 'adding' stamp: 'VP 12/10/2020 19:58:57' prior: 50868200!
add: aPortableObject
	
	aPortableObject addTo: self.
	! !
!Backpack methodsFor: 'adding' stamp: 'VP 12/10/2020 19:59:46'!
addPortableObject: aPortableObject
	
	container add: aPortableObject.! !
!Backpack methodsFor: 'adding' stamp: 'VP 12/10/2020 19:59:56' prior: 50874876!
add: anObject
	
	anObject addTo: self.
	! !
!StageObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:00:41'!
addTo: aBackpack

	self subclassResponsibility	! !
!NoPointsPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:01:20' overrides: 50874889!
addTo: aBackpack 
	
	self assertCanAddTo: aBackpack.
	
	aBackpack addPortableObject: self.! !
!PortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:01:28' overrides: 50874889!
addTo: aBackpack 
	
	self assertCanAddTo: aBackpack.
	
	aBackpack addPortableObject: self.! !

!methodRemoval: NoPointsPortableObject #addTo: stamp: 'VP 12/10/2020 20:01:28'!
addTo: aBackpack 
	
	self assertCanAddTo: aBackpack.
	
	aBackpack addPortableObject: self.!
!NonPortableObject methodsFor: 'adding' stamp: 'VP 12/10/2020 20:02:30' overrides: 50874889!
addTo: aBackpack

	childObjects isEmpty ifTrue: [ ^self error: self class canNotCarryNonPortableObject ].
	childObjects first addTo: aBackpack.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test11_PlayableCharacterMustBeCreatedInsideRoomBounds stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test12_PlayableCharacterCannotBeCreatedInOccupiedRoomCell stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test13_PlayableCharacterMovingForwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test14_PlayableCharacterMovingBackwardCannotLeaveRoom stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test15_PlayableCharacterMovingForwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test16_PlayableCharacterMovingBackwardCannotMoveIntoOccupiedCell stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test17_PlayableCharacterCanTakePortableObjectIfNextToItAndHeadingInItsDirection stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test18_PlayableCharacterCanNotTakeObjectIfNotNextToIt stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test19_PlayableCharacterCanNotTakeObjectIfNotLookingAtIt stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test20_PlayableCharacterCanNotTakeEmptyNonPortableObject stamp: 'VP 12/10/2020 20:02:36'!
PASSED!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:02:36'!
FAILURE!

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:02:36'!
FAILURE!
!PlayableCharacterTest methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:03:14' prior: 50874748!
test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject

	| room playableCharacter objectToTake |

	room := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #South in: room.
	
	objectToTake := (room objectAtCell: 3@0) portableObject.
	
	playableCharacter take.
	
	self assert: (room hasObjectAt: 3@0).
	self deny: (playableCharacter backpackIncludes: (room objectAtCell: 3@0)).
	self assert: (playableCharacter backpackIncludes: objectToTake).! !

!testRun: #PlayableCharacterTest #test21_PlayableCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'VP 12/10/2020 20:03:14'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects -- private' stamp: 'VP 12/10/2020 20:03:43' prior: 50874051!
takeObjectAt: takePosition

	self assertThereIsObjectToTakeAt: takePosition.
	
	self take: (room objectAtCell: takePosition).
	room objectWasTakenFrom: takePosition.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'VP 12/10/2020 20:05:03' prior: 50868364!
take: anObject

	backpack add: anObject.! !