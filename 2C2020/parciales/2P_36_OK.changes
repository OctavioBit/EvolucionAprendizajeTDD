----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 segundo parcial\ISW1-2020-2C-2doParcial.st----!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LH 12/10/2020 12:18:37'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LH 12/10/2020 12:18:37'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LH 12/10/2020 12:18:37'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LH 12/10/2020 12:18:37'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'LH 12/10/2020 12:18:50'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'LH 12/10/2020 12:18:50'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'LH 12/10/2020 12:18:50'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'LH 12/10/2020 12:18:50'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'LH 12/10/2020 12:18:50'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'LH 12/10/2020 12:18:50'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'LH 12/10/2020 12:18:50'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'LH 12/10/2020 12:18:50'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'LH 12/10/2020 12:18:50'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'LH 12/10/2020 12:18:50'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'LH 12/10/2020 12:18:50'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'LH 12/10/2020 12:18:50'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'LH 12/10/2020 12:18:50'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'LH 12/10/2020 12:18:50'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'LH 12/10/2020 12:18:50'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LH 12/10/2020 12:18:50'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LH 12/10/2020 12:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LH 12/10/2020 12:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LH 12/10/2020 12:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LH 12/10/2020 12:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LH 12/10/2020 12:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LH 12/10/2020 12:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LH 12/10/2020 12:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LH 12/10/2020 12:18:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LH 12/10/2020 12:18:51'!
PASSED!

headings!

newHeading!

newHeading!

----QUIT----(10 December 2020 12:23:25) CuisUniversity-4384.image priorSource: 17155564!

----STARTUP---- (10 December 2020 17:32:39) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 segundo parcial\CuisUniversity-4384.image!


!classRemoval: #PointsPortableObject stamp: 'LH 12/10/2020 17:32:48'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'LH 12/10/2020 17:32:49'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PortableObject stamp: 'LH 12/10/2020 17:32:49'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #StageObject stamp: 'LH 12/10/2020 17:32:50'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'LH 12/10/2020 17:32:50'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'LH 12/10/2020 17:32:51'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Backpack stamp: 'LH 12/10/2020 17:32:51'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'LH 12/10/2020 17:32:52'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #BackpackTest stamp: 'LH 12/10/2020 17:32:52'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\ISW1-2020-2C-2doParcial.st----!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 17:40:20'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 17:45:39'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 17:45:34'!
test01ARoomCantHave0Width

	self 
		should:[Room withHeight: 0 andWidth: 1]
		raise: Error
		withMessageText: Room invalidWidthOrHeight.! !

!testRun: #RoomTest #test01ARoomCantHave0Width stamp: 'LH 12/10/2020 17:45:46'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'LH 12/10/2020 17:45:55'!
invalidWidthOrHeight
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'LH 12/10/2020 17:46:56' prior: 50872657!
invalidWidthOrHeight
	^'The submited width and/or height are invalid'! !

!testRun: #RoomTest #test01ARoomCantHave0Width stamp: 'LH 12/10/2020 17:46:58'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 17:47:35'!
withHeight: aSmallInteger andWidth: aSmallInteger2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithHeight: aSmallInteger andWidth: aSmallInteger2 ! !
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 17:48:57' prior: 50872670!
withHeight: aSmallInteger andWidth: aSmallInteger2 
	
	^self error: self invalidWidthOrHeight .! !

!testRun: #RoomTest #test01ARoomCantHave0Width stamp: 'LH 12/10/2020 17:48:59'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Width stamp: 'LH 12/10/2020 17:48:59'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 17:52:26'!
test02ARoomCanHaveAValidCell
	|aRoom|
	
	aRoom := Room withHeight: 1 andWidth: 1.
	
	self assert: (aRoom isValidCell: 1@1).! !

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 17:52:31'!
ERROR!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 17:52:39'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 17:53:08' prior: 50872680!
withHeight: height andWidth: width 
	
	
	^self error: self invalidWidthOrHeight .! !
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 17:54:17' prior: 50872704!
withHeight: height andWidth: width 
	
	height = 0 ifTrue:[^self error: self invalidWidthOrHeight .].
	^self basicNew 
	! !

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 17:54:21'!
ERROR!
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 17:54:34'!
isValidCell: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 17:55:03' prior: 50872719!
isValidCell: aCell 
	^true.! !

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 17:55:04'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Width stamp: 'LH 12/10/2020 17:55:04'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 17:55:04'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 17:56:56'!
test03ARoomCanNotHave0Height
	
	self
		should:[Room withHeight: 0 andWidth: 1 ]
		raise: Error
		withMessageText: Room invalidWidthOrHeight.! !
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 17:57:21' prior: 50872735!
test03ARoomCanNotHave0Height
	
	self
		should:[Room withHeight: 1 andWidth: 0 ]
		raise: Error
		withMessageText: Room invalidWidthOrHeight.! !

!testRun: #RoomTest #test03ARoomCanNotHave0Height stamp: 'LH 12/10/2020 17:57:23'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 17:57:50' prior: 50872710!
withHeight: height andWidth: width 
	
	(height = 0 or: width = 0) ifTrue:[^self error: self invalidWidthOrHeight .].
	^self basicNew 
	! !

!testRun: #RoomTest #test03ARoomCanNotHave0Height stamp: 'LH 12/10/2020 17:57:51'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Width stamp: 'LH 12/10/2020 17:57:51'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 17:57:51'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHave0Height stamp: 'LH 12/10/2020 17:57:51'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 17:57:59'!
test01ARoomCantHave0Height

	self 
		should:[Room withHeight: 0 andWidth: 1]
		raise: Error
		withMessageText: Room invalidWidthOrHeight.! !

!methodRemoval: RoomTest #test01ARoomCantHave0Width stamp: 'LH 12/10/2020 17:57:59'!
test01ARoomCantHave0Width

	self 
		should:[Room withHeight: 0 andWidth: 1]
		raise: Error
		withMessageText: Room invalidWidthOrHeight.!
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 17:58:09'!
test03ARoomCanNotHave0Width
	
	self
		should:[Room withHeight: 1 andWidth: 0 ]
		raise: Error
		withMessageText: Room invalidWidthOrHeight.! !

!methodRemoval: RoomTest #test03ARoomCanNotHave0Height stamp: 'LH 12/10/2020 17:58:09'!
test03ARoomCanNotHave0Height
	
	self
		should:[Room withHeight: 1 andWidth: 0 ]
		raise: Error
		withMessageText: Room invalidWidthOrHeight.!

!methodRemoval: RoomTest #test03ARoomCanNotHave0Width stamp: 'LH 12/10/2020 18:00:32'!
test03ARoomCanNotHave0Width
	
	self
		should:[Room withHeight: 1 andWidth: 0 ]
		raise: Error
		withMessageText: Room invalidWidthOrHeight.!

!methodRemoval: RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:00:33'!
test02ARoomCanHaveAValidCell
	|aRoom|
	
	aRoom := Room withHeight: 1 andWidth: 1.
	
	self assert: (aRoom isValidCell: 1@1).!

!methodRemoval: RoomTest #test01ARoomCantHave0Height stamp: 'LH 12/10/2020 18:00:34'!
test01ARoomCantHave0Height

	self 
		should:[Room withHeight: 0 andWidth: 1]
		raise: Error
		withMessageText: Room invalidWidthOrHeight.!

!classRemoval: #Room stamp: 'LH 12/10/2020 18:00:37'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 18:04:43'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 18:04:39'!
test01ARoomCantHave0Cells

	self 
		should:[Room withHeight:0 andWidth:1]
		raise: Error
		withMessageText: Room invalidHeight.
		
	self 
		should:[Room withHeight:1 andWidth:0]
		raise: Error
		withMessageText: Room invalidHeight.! !

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:04:46'!
ERROR!
!Room class methodsFor: 'error message' stamp: 'LH 12/10/2020 18:05:00'!
invalidHeight
	self shouldBeImplemented.! !
!Room class methodsFor: 'error message' stamp: 'LH 12/10/2020 18:05:30' prior: 50872846!
invalidHeight
	^'The submited Height and/or Width are invalid'! !

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:05:32'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 18:05:45'!
withHeight: aSmallInteger andWidth: aSmallInteger2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithHeight: aSmallInteger andWidth: aSmallInteger2 ! !
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 18:06:02' prior: 50872859!
withHeight: aSmallInteger andWidth: aSmallInteger2 
	
	^self error: Room invalidHeight ! !

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:06:03'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:06:03'!
PASSED!
!Room class methodsFor: 'error message' stamp: 'LH 12/10/2020 18:06:20'!
invalidWidthOrHeight
	^'The submited Height and/or Width are invalid'! !
!Room class methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:06:20' prior: 50872869!
withHeight: aSmallInteger andWidth: aSmallInteger2 
	
	^self error: Room invalidWidthOrHeight ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:06:20' prior: 50872833!
test01ARoomCantHave0Cells

	self 
		should:[Room withHeight:0 andWidth:1]
		raise: Error
		withMessageText: Room invalidWidthOrHeight.
		
	self 
		should:[Room withHeight:1 andWidth:0]
		raise: Error
		withMessageText: Room invalidWidthOrHeight.! !

!methodRemoval: Room class #invalidHeight stamp: 'LH 12/10/2020 18:06:20'!
invalidHeight
	^'The submited Height and/or Width are invalid'!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:06:26'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:06:26'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 18:08:12'!
test02ARoomCanHaveAValidCell
	|aRoom|
	
	aRoom := Room withHeight: 1 andWidth: 1.
	
	self assert: (aRoom isValidCell: 0@0).! !

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:08:13'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 18:09:43' prior: 50872886!
withHeight: roomHeight andWidth: roomWidth 
	
	(roomHeight = 0 or: roomWidth = 0) ifTrue:[^self error: Room invalidWidthOrHeight ].
	
	^self basicNew initializeWidth: roomWidth andHeight: roomHeight.
	! !

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:09:46'!
ERROR!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 18:09:56'!
Object subclass: #Room
	instanceVariableNames: 'roomWidth_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 18:09:56'!
Object subclass: #Room
	instanceVariableNames: 'roomWidth_CHANGE_ME roomHeight_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'LH 12/10/2020 18:09:56'!
initializeWidth: roomWidth andHeight: roomHeight 
	self shouldBeImplemented.
	roomWidth_CHANGE_ME := roomWidth.
	roomHeight_CHANGE_ME := roomHeight.! !
!Room methodsFor: 'initialization' stamp: 'LH 12/10/2020 18:10:04' prior: 50872950!
initializeWidth: roomWidth andHeight: roomHeight 
	! !

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:10:05'!
ERROR!
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:10:14'!
isValidCell: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:10:19' prior: 50872965!
isValidCell: aPoint 
	^true.! !
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:10:25' prior: 50872969!
isValidCell: aCell 
	^true.! !

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:10:27'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:10:27'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:10:27'!
PASSED!

Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 18:10:34'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:10:38'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:10:38'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:10:38'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 18:14:32'!
test03ARoomCanNotHaveNegativeHeight
	
	self 
		should:[Room withHeight: -1 andWidth: 1]
		raise:Error
		withMessageText: Room invalidWidthOrHeight.! !

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:14:34'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 18:14:46' prior: 50872922!
withHeight: roomHeight andWidth: roomWidth 
	
	(roomHeight <= 0 or: roomWidth = 0) ifTrue:[^self error: Room invalidWidthOrHeight ].
	
	^self basicNew initializeWidth: roomWidth andHeight: roomHeight.
	! !

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:14:47'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:14:47'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:14:47'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:14:47'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 18:15:08'!
test04ARoomCanNotHaveNegativeWidth
	
	self 
		should:[Room withHeight: 1 andWidth: -1]
		raise:Error
		withMessageText: Room invalidWidthOrHeight.! !

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:15:09'!
FAILURE!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:15:21'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 18:15:33' prior: 50873016!
withHeight: roomHeight andWidth: roomWidth 
	
	(roomHeight <= 0 or: roomWidth <= 0) ifTrue:[^self error: Room invalidWidthOrHeight ].
	
	^self basicNew initializeWidth: roomWidth andHeight: roomHeight.
	! !

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:15:34'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:15:34'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:15:34'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:15:34'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:15:34'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 18:18:50'!
test04ARoomCanNotHaveValidCellsAboveItsHeight
	|aRoom|
	
	aRoom := Room withHeight: 10 andWidth: 10.
	
	self deny: (aRoom isValidCell: 11@0). ! !

!testRun: #RoomTest #test04ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:18:54'!
FAILURE!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 18:19:37'!
Object subclass: #Room
	instanceVariableNames: 'height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 18:19:38'!
Object subclass: #Room
	instanceVariableNames: 'height width'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'LH 12/10/2020 18:19:35' prior: 50872958!
initializeWidth: roomWidth andHeight: roomHeight 
	
	height := roomHeight.
	
	width := roomWidth.! !
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 18:20:08' prior: 50873051!
withHeight: roomHeight andWidth: roomWidth 
	
	(roomHeight <= 0 or: roomWidth <= 0) ifTrue:[^self error: Room invalidWidthOrHeight ].
	
	^self basicNew initializeWidth: roomHeight andHeight: roomWidth.
	! !
!Room methodsFor: 'initialization' stamp: 'LH 12/10/2020 18:20:23' prior: 50873101!
initializeWidth: roomHeight andHeight: roomWidth 
	
	height := roomHeight.
	
	width := roomWidth.! !
!Room methodsFor: 'initialization' stamp: 'LH 12/10/2020 18:20:43'!
initializeHeight: roomHeight andWidth: roomWidth 
	
	height := roomHeight.
	
	width := roomWidth.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:20:43' prior: 50873108!
withHeight: roomHeight andWidth: roomWidth 
	
	(roomHeight <= 0 or: roomWidth <= 0) ifTrue:[^self error: Room invalidWidthOrHeight ].
	
	^self basicNew initializeHeight: roomHeight andWidth: roomWidth.
	! !

!methodRemoval: Room #initializeWidth:andHeight: stamp: 'LH 12/10/2020 18:20:43'!
initializeWidth: roomHeight andHeight: roomWidth 
	
	height := roomHeight.
	
	width := roomWidth.!
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:21:52' prior: 50872973!
isValidCell: aCell 
	
	height <= aCell y ifTrue:[^false].
	^true.! !

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:21:54'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:21:54'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:21:54'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:21:54'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:21:54'!
FAILURE!

!testRun: #RoomTest #test04ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:21:54'!
FAILURE!

height!

aCell y!
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:22:44' prior: 50873146!
isValidCell: aCell 
	
	height <= aCell y ifTrue:[^false].
	^true.! !
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 18:23:25' prior: 50873075!
test04ARoomCanNotHaveValidCellsAboveItsHeight
	|aRoom|
	
	aRoom := Room withHeight: 10 andWidth: 10.
	
	self deny: (aRoom isValidCell: 0@11). ! !
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 18:23:52'!
withWidth: roomHeight andHeight: roomWidth 
	
	(roomHeight <= 0 or: roomWidth <= 0) ifTrue:[^self error: Room invalidWidthOrHeight ].
	
	^self basicNew initializeHeight: roomHeight andWidth: roomWidth.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:23:53' prior: 50873037!
test04ARoomCanNotHaveNegativeWidth
	
	self 
		should:[Room withWidth: 1 andHeight: -1]
		raise:Error
		withMessageText: Room invalidWidthOrHeight.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:23:53' prior: 50873005!
test03ARoomCanNotHaveNegativeHeight
	
	self 
		should:[Room withWidth: -1 andHeight: 1]
		raise:Error
		withMessageText: Room invalidWidthOrHeight.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:23:53' prior: 50872892!
test01ARoomCantHave0Cells

	self 
		should:[Room withWidth:0 andHeight:1]
		raise: Error
		withMessageText: Room invalidWidthOrHeight.
		
	self 
		should:[Room withWidth:1 andHeight:0]
		raise: Error
		withMessageText: Room invalidWidthOrHeight.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:23:53' prior: 50872912!
test02ARoomCanHaveAValidCell
	|aRoom|
	
	aRoom := Room withWidth: 1 andHeight: 1.
	
	self assert: (aRoom isValidCell: 0@0).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:23:53' prior: 50873175!
test04ARoomCanNotHaveValidCellsAboveItsHeight
	|aRoom|
	
	aRoom := Room withWidth: 10 andHeight: 10.
	
	self deny: (aRoom isValidCell: 0@11). ! !

!methodRemoval: Room class #withHeight:andWidth: stamp: 'LH 12/10/2020 18:23:53'!
withHeight: roomHeight andWidth: roomWidth 
	
	(roomHeight <= 0 or: roomWidth <= 0) ifTrue:[^self error: Room invalidWidthOrHeight ].
	
	^self basicNew initializeHeight: roomHeight andWidth: roomWidth.
	!
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 18:24:21' prior: 50873182!
withWidth: roomWidth andHeight:  roomHeight
	
	(roomHeight <= 0 or: roomWidth <= 0) ifTrue:[^self error: Room invalidWidthOrHeight ].
	
	^self basicNew initializeHeight: roomWidth andWidth: roomHeight.
	! !
!Room methodsFor: 'initialization' stamp: 'LH 12/10/2020 18:24:51'!
initializeWidth: roomHeight andHeight: roomWidth 
	
	height := roomHeight.
	
	width := roomWidth.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:24:51' prior: 50873243!
withWidth: roomWidth andHeight:  roomHeight
	
	(roomHeight <= 0 or: roomWidth <= 0) ifTrue:[^self error: Room invalidWidthOrHeight ].
	
	^self basicNew initializeWidth: roomWidth andHeight: roomHeight.
	! !

!methodRemoval: Room #initializeHeight:andWidth: stamp: 'LH 12/10/2020 18:24:51'!
initializeHeight: roomHeight andWidth: roomWidth 
	
	height := roomHeight.
	
	width := roomWidth.!
!Room methodsFor: 'initialization' stamp: 'LH 12/10/2020 18:25:09' prior: 50873252!
initializeWidth: roomWidth andHeight:  roomHeight
	
	height := roomHeight.
	
	width := roomWidth.! !

!testRun: #RoomTest #test04ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:25:15'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:25:17'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:25:17'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:25:17'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:25:17'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:25:17'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:25:17'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 18:26:01'!
test06ARoomCanNotHaveValidCellsBellowItsHeight
	|aRoom|
	
	aRoom := Room withWidth: 10 andHeight: 10.
	
	self deny: (aRoom isValidCell: 0@-1). ! !

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 18:26:03'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:27:02' prior: 50873170!
isValidCell: aCell 
	
	(height <= aCell y or: (aCell y < 0) )ifTrue:[^false].
	^true.! !

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 18:27:03'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:27:03'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:27:03'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:27:03'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:27:03'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:27:03'!
PASSED!

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 18:27:03'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 18:27:10'!
test05ARoomCanNotHaveValidCellsAboveItsHeight
	|aRoom|
	
	aRoom := Room withWidth: 10 andHeight: 10.
	
	self deny: (aRoom isValidCell: 0@11). ! !

!methodRemoval: RoomTest #test04ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:27:10'!
test04ARoomCanNotHaveValidCellsAboveItsHeight
	|aRoom|
	
	aRoom := Room withWidth: 10 andHeight: 10.
	
	self deny: (aRoom isValidCell: 0@11). !

!testRun: #RoomTest #test05ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:27:11'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:27:11'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:27:11'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:27:11'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:27:11'!
PASSED!

!testRun: #RoomTest #test05ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:27:11'!
PASSED!

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 18:27:11'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 18:28:04'!
test07ARoomCanNotHaveValidCellsOutsideItsWidth
	|aRoom|
	
	aRoom := Room withWidth: 1 andHeight: 1.
	
	self deny: (aRoom isValidCell: 1@0).
	self deny: (aRoom isValidCell: -1@0). ! !
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 18:28:11' prior: 50873302!
test06ARoomCanNotHaveValidCellsBellowItsHeight
	|aRoom|
	
	aRoom := Room withWidth: 1 andHeight: 1.
	
	self deny: (aRoom isValidCell: 0@-1). ! !
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 18:28:23' prior: 50873340!
test05ARoomCanNotHaveValidCellsAboveItsHeight
	|aRoom|
	
	aRoom := Room withWidth: 1 andHeight: 1.
	
	self deny: (aRoom isValidCell: 0@1). ! !

!testRun: #RoomTest #test07ARoomCanNotHaveValidCellsOutsideItsWidth stamp: 'LH 12/10/2020 18:28:27'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:28:49' prior: 50873313!
isValidCell: aCell 
	
	(height <= aCell y or: (aCell y < 0) )ifTrue:[^false].
	(height <= aCell x or: (aCell x < 0) )ifTrue:[^false].
	^true.! !

!testRun: #RoomTest #test07ARoomCanNotHaveValidCellsOutsideItsWidth stamp: 'LH 12/10/2020 18:28:50'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:28:50'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:28:50'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:28:50'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:28:50'!
PASSED!

!testRun: #RoomTest #test05ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:28:50'!
PASSED!

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 18:28:50'!
PASSED!

!testRun: #RoomTest #test07ARoomCanNotHaveValidCellsOutsideItsWidth stamp: 'LH 12/10/2020 18:28:50'!
PASSED!
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:30:00' prior: 50873404!
isValidCell: aCell 
	
	(1 <= aCell y or: (aCell y < 0) )ifTrue:[^false].
	(1 <= aCell x or: (aCell x < 0) )ifTrue:[^false].
	^true.! !

!testRun: #RoomTest #test07ARoomCanNotHaveValidCellsOutsideItsWidth stamp: 'LH 12/10/2020 18:30:03'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:30:03'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:30:03'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:30:03'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:30:03'!
PASSED!

!testRun: #RoomTest #test05ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:30:03'!
PASSED!

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 18:30:03'!
PASSED!

!testRun: #RoomTest #test07ARoomCanNotHaveValidCellsOutsideItsWidth stamp: 'LH 12/10/2020 18:30:03'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'LH 12/10/2020 18:31:32'!
test08ARoomCanNotHaveVariousCells
	|aRoom|
	
	aRoom := Room withWidth: 10 andHeight: 10.
	
	self assert: (aRoom isValidCell: 1@1).
	self assert: (aRoom isValidCell: 0@1).
	! !

!testRun: #RoomTest #test08ARoomCanNotHaveVariousCells stamp: 'LH 12/10/2020 18:31:34'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:31:48' prior: 50873437!
isValidCell: aCell 
	
	(height <= aCell y or: (aCell y < 0) )ifTrue:[^false].
	(width <= aCell x or: (aCell x < 0) )ifTrue:[^false].
	^true.! !

!testRun: #RoomTest #test08ARoomCanNotHaveVariousCells stamp: 'LH 12/10/2020 18:31:49'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:31:49'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:31:49'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:31:49'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:31:49'!
PASSED!

!testRun: #RoomTest #test05ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:31:49'!
PASSED!

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 18:31:49'!
PASSED!

!testRun: #RoomTest #test07ARoomCanNotHaveValidCellsOutsideItsWidth stamp: 'LH 12/10/2020 18:31:49'!
PASSED!

!testRun: #RoomTest #test08ARoomCanNotHaveVariousCells stamp: 'LH 12/10/2020 18:31:49'!
PASSED!
!RoomTest methodsFor: 'tests for room objects' stamp: 'LH 12/10/2020 18:36:41'!
test09ARoomCanHaveNoObjects
	|aRoom|
	
	aRoom := Room withWidth: 10 andHeight: 10 andObjects: Dictionary new.
	
	self assert: aRoom isEmpty.! !

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 18:36:47'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 18:36:53'!
withWidth: aSmallInteger andHeight: aSmallInteger2 andObjects: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithWidth: aSmallInteger andHeight: aSmallInteger2 andObjects: aDictionary ! !
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 18:37:42' prior: 50873526!
withWidth: roomWidth andHeight: roomHeight andObjects: roomObjects 
	
	^self new initializeWithWidth: roomWidth andHeight: roomHeight andObjects: roomObjects ! !

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 18:37:44'!
ERROR!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 18:37:52'!
Object subclass: #Room
	instanceVariableNames: 'height width roomWidth_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 18:37:52'!
Object subclass: #Room
	instanceVariableNames: 'height width roomWidth_CHANGE_ME roomHeight_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 18:37:52'!
Object subclass: #Room
	instanceVariableNames: 'height width roomWidth_CHANGE_ME roomHeight_CHANGE_ME roomObjects_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'LH 12/10/2020 18:37:52'!
initializeWithWidth: roomWidth andHeight: roomHeight andObjects: roomObjects 
	self shouldBeImplemented.
	roomWidth_CHANGE_ME := roomWidth.
	roomHeight_CHANGE_ME := roomHeight.
	roomObjects_CHANGE_ME := roomObjects.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 18:38:26'!
Object subclass: #Room
	instanceVariableNames: 'height width roomWidth_CHANGE_ME roomHeight_CHANGE_ME roomObjects_CHANGE_ME objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'LH 12/10/2020 18:38:24' prior: 50873575!
initializeWithWidth: roomWidth andHeight: roomHeight andObjects: roomObjects 

	width := roomWidth.
	height := roomHeight.
	objects := roomObjects.! !

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 18:38:27'!
ERROR!
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:38:33'!
isEmpty
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:38:40' prior: 50873605!
isEmpty
	^true.! !

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 18:38:41'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:38:41'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:38:41'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:38:41'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:38:41'!
PASSED!

!testRun: #RoomTest #test05ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:38:41'!
PASSED!

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 18:38:41'!
PASSED!

!testRun: #RoomTest #test07ARoomCanNotHaveValidCellsOutsideItsWidth stamp: 'LH 12/10/2020 18:38:41'!
PASSED!

!testRun: #RoomTest #test08ARoomCanNotHaveVariousCells stamp: 'LH 12/10/2020 18:38:41'!
PASSED!

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 18:38:41'!
PASSED!

Object subclass: #Room
	instanceVariableNames: 'height width objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 18:38:51'!
Object subclass: #Room
	instanceVariableNames: 'height width objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'factory' stamp: 'LH 12/10/2020 18:40:35'!
aRoomWithNoObjects

	^Room withWidth: 10 andHeight: 10 andObjects: Dictionary new.! !

!methodRemoval: Room class #withWidth:andHeight:andObjects: stamp: 'LH 12/10/2020 18:41:22'!
withWidth: roomWidth andHeight: roomHeight andObjects: roomObjects 
	
	^self new initializeWithWidth: roomWidth andHeight: roomHeight andObjects: roomObjects !
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 18:42:07'!
withWidth: roomWidth andHeight:  roomHeight andObjects: roomObjects 
	
	(roomHeight <= 0 or: roomWidth <= 0) ifTrue:[^self error: Room invalidWidthOrHeight ].
	
	^self basicNew initializeWidth: roomWidth andHeight: roomHeight.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:42:07' prior: 50873219!
test02ARoomCanHaveAValidCell
	|aRoom|
	
	aRoom := Room withWidth: 1 andHeight: 1 andObjects: Dictionary new.
	
	self assert: (aRoom isValidCell: 0@0).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:42:07' prior: 50873377!
test07ARoomCanNotHaveValidCellsOutsideItsWidth
	|aRoom|
	
	aRoom := Room withWidth: 1 andHeight: 1 andObjects: Dictionary new.
	
	self deny: (aRoom isValidCell: 1@0).
	self deny: (aRoom isValidCell: -1@0). ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:42:07' prior: 50873386!
test06ARoomCanNotHaveValidCellsBellowItsHeight
	|aRoom|
	
	aRoom := Room withWidth: 1 andHeight: 1 andObjects: Dictionary new.
	
	self deny: (aRoom isValidCell: 0@-1). ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:42:07' prior: 50873393!
test05ARoomCanNotHaveValidCellsAboveItsHeight
	|aRoom|
	
	aRoom := Room withWidth: 1 andHeight: 1 andObjects: Dictionary new.
	
	self deny: (aRoom isValidCell: 0@1). ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:42:07' prior: 50873469!
test08ARoomCanNotHaveVariousCells
	|aRoom|
	
	aRoom := Room withWidth: 10 andHeight: 10 andObjects: Dictionary new.
	
	self assert: (aRoom isValidCell: 1@1).
	self assert: (aRoom isValidCell: 0@1).
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:42:07' prior: 50873192!
test04ARoomCanNotHaveNegativeWidth
	
	self 
		should:[Room withWidth: 1 andHeight: -1 andObjects: Dictionary new]
		raise:Error
		withMessageText: Room invalidWidthOrHeight.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:42:07' prior: 50873208!
test01ARoomCantHave0Cells

	self 
		should:[Room withWidth:0 andHeight:1 andObjects: Dictionary new]
		raise: Error
		withMessageText: Room invalidWidthOrHeight.
		
	self 
		should:[Room withWidth:1 andHeight:0 andObjects: Dictionary new]
		raise: Error
		withMessageText: Room invalidWidthOrHeight.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 18:42:07' prior: 50873200!
test03ARoomCanNotHaveNegativeHeight
	
	self 
		should:[Room withWidth: -1 andHeight: 1 andObjects: Dictionary new]
		raise:Error
		withMessageText: Room invalidWidthOrHeight.! !

!methodRemoval: Room class #withWidth:andHeight: stamp: 'LH 12/10/2020 18:42:07'!
withWidth: roomWidth andHeight:  roomHeight
	
	(roomHeight <= 0 or: roomWidth <= 0) ifTrue:[^self error: Room invalidWidthOrHeight ].
	
	^self basicNew initializeWidth: roomWidth andHeight: roomHeight.
	!
!Room class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 18:42:51' prior: 50873670!
withWidth: roomWidth andHeight:  roomHeight andObjects: roomObjects 
	
	(roomHeight <= 0 or: roomWidth <= 0) ifTrue:[^self error: Room invalidWidthOrHeight ].
	
	^self basicNew initializeWidth: roomWidth andHeight: roomHeight andObjects: roomObjects.
	! !
!Room methodsFor: 'initialization' stamp: 'LH 12/10/2020 18:43:00'!
initializeWidth: roomWidth andHeight: roomHeight andObjects: roomObjects 

	width := roomWidth.
	height := roomHeight.
	objects := roomObjects.! !

!methodRemoval: Room #initializeWithWidth:andHeight:andObjects: stamp: 'LH 12/10/2020 18:43:00'!
initializeWithWidth: roomWidth andHeight: roomHeight andObjects: roomObjects 

	width := roomWidth.
	height := roomHeight.
	objects := roomObjects.!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:43:10'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:43:10'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:43:10'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:43:10'!
PASSED!

!testRun: #RoomTest #test05ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:43:10'!
PASSED!

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 18:43:10'!
PASSED!

!testRun: #RoomTest #test07ARoomCanNotHaveValidCellsOutsideItsWidth stamp: 'LH 12/10/2020 18:43:10'!
PASSED!

!testRun: #RoomTest #test08ARoomCanNotHaveVariousCells stamp: 'LH 12/10/2020 18:43:10'!
PASSED!

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 18:43:10'!
PASSED!
!RoomTest methodsFor: 'tests for room objects' stamp: 'LH 12/10/2020 18:43:25' prior: 50873516!
test09ARoomCanHaveNoObjects
	|aRoom|
	
	aRoom := self aRoomWithNoObjects .
	
	self assert: aRoom isEmpty.! !

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 18:43:26'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:43:26'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:43:26'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:43:26'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:43:26'!
PASSED!

!testRun: #RoomTest #test05ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:43:26'!
PASSED!

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 18:43:26'!
PASSED!

!testRun: #RoomTest #test07ARoomCanNotHaveValidCellsOutsideItsWidth stamp: 'LH 12/10/2020 18:43:26'!
PASSED!

!testRun: #RoomTest #test08ARoomCanNotHaveVariousCells stamp: 'LH 12/10/2020 18:43:26'!
PASSED!

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 18:43:26'!
PASSED!
!RoomTest methodsFor: 'tests for room objects' stamp: 'LH 12/10/2020 18:48:47'!
test10ARoomCanHaveOneObject
	|aRoom roomObjects|
	
	roomObjects := Dictionary new.
	roomObjects at: 0@0 put: (NoPointsPortableObject named: 'rock' weighing: 3 ).
	aRoom := Room withWidth: 10 andHeight: 10 andObjects: roomObjects.
	
	self deny: aRoom isEmpty.
	self assert: (aRoom thereIsAnObjectAt: 0@0).! !

!testRun: #RoomTest #test10ARoomCanHaveOneObject stamp: 'LH 12/10/2020 18:48:50'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:49:12'!
thereIsAnObjectAt: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:49:20' prior: 50873874!
thereIsAnObjectAt: aPoint 
	
	^true! !
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:49:25' prior: 50873879!
thereIsAnObjectAt: aCell 
	
	^true! !

!testRun: #RoomTest #test10ARoomCanHaveOneObject stamp: 'LH 12/10/2020 18:49:26'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:49:26'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:49:26'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:49:26'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:49:26'!
PASSED!

!testRun: #RoomTest #test05ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:49:26'!
PASSED!

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 18:49:27'!
PASSED!

!testRun: #RoomTest #test07ARoomCanNotHaveValidCellsOutsideItsWidth stamp: 'LH 12/10/2020 18:49:27'!
PASSED!

!testRun: #RoomTest #test08ARoomCanNotHaveVariousCells stamp: 'LH 12/10/2020 18:49:27'!
PASSED!

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 18:49:27'!
PASSED!

!testRun: #RoomTest #test10ARoomCanHaveOneObject stamp: 'LH 12/10/2020 18:49:27'!
FAILURE!

!testRun: #RoomTest #test10ARoomCanHaveOneObject stamp: 'LH 12/10/2020 18:49:27'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:49:47' prior: 50873609!
isEmpty
	^objects keys size = 0.! !

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:49:49'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:49:49'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:49:49'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:49:49'!
PASSED!

!testRun: #RoomTest #test05ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:49:49'!
PASSED!

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 18:49:49'!
PASSED!

!testRun: #RoomTest #test07ARoomCanNotHaveValidCellsOutsideItsWidth stamp: 'LH 12/10/2020 18:49:49'!
PASSED!

!testRun: #RoomTest #test08ARoomCanNotHaveVariousCells stamp: 'LH 12/10/2020 18:49:49'!
PASSED!

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 18:49:49'!
PASSED!

!testRun: #RoomTest #test10ARoomCanHaveOneObject stamp: 'LH 12/10/2020 18:49:49'!
PASSED!
!RoomTest methodsFor: 'tests for room objects' stamp: 'LH 12/10/2020 18:54:02' prior: 50873822!
test09ARoomCanHaveNoObjects
	|aRoom|
	
	aRoom := self aRoomWithNoObjects .
	
	self assert: (aRoom thereIsAnObjectAt: 0@0).! !

!methodRemoval: Room #isEmpty stamp: 'LH 12/10/2020 18:54:08'!
isEmpty
	^objects keys size = 0.!
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:54:37' prior: 50873883!
thereIsAnObjectAt: aCell 
	
	^objects keys size > 0.! !

!testRun: #RoomTest #test10ARoomCanHaveOneObject stamp: 'LH 12/10/2020 18:54:43'!
ERROR!
!RoomTest methodsFor: 'tests for room objects' stamp: 'LH 12/10/2020 18:54:53' prior: 50873859!
test10ARoomCanHaveOneObject
	|aRoom roomObjects|
	
	roomObjects := Dictionary new.
	roomObjects at: 0@0 put: (NoPointsPortableObject named: 'rock' weighing: 3 ).
	aRoom := Room withWidth: 10 andHeight: 10 andObjects: roomObjects.
	
	self assert: (aRoom thereIsAnObjectAt: 0@0).! !

!testRun: #RoomTest #test10ARoomCanHaveOneObject stamp: 'LH 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test05ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test07ARoomCanNotHaveValidCellsOutsideItsWidth stamp: 'LH 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test08ARoomCanNotHaveVariousCells stamp: 'LH 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 18:54:55'!
FAILURE!

!testRun: #RoomTest #test10ARoomCanHaveOneObject stamp: 'LH 12/10/2020 18:54:55'!
PASSED!

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 18:54:55'!
FAILURE!
!RoomTest methodsFor: 'tests for room objects' stamp: 'LH 12/10/2020 18:55:04' prior: 50873959!
test09ARoomCanHaveNoObjects
	|aRoom|
	
	aRoom := self aRoomWithNoObjects .
	
	self deny: (aRoom thereIsAnObjectAt: 0@0).! !

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 18:55:05'!
PASSED!
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 18:58:21' prior: 50873969!
thereIsAnObjectAt: aCell 
	
	^objects keys includes: 0@0.! !

!testRun: #RoomTest #test10ARoomCanHaveOneObject stamp: 'LH 12/10/2020 18:58:25'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:58:25'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:58:25'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:58:25'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:58:25'!
PASSED!

!testRun: #RoomTest #test05ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:58:25'!
PASSED!

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 18:58:25'!
PASSED!

!testRun: #RoomTest #test07ARoomCanNotHaveValidCellsOutsideItsWidth stamp: 'LH 12/10/2020 18:58:25'!
PASSED!

!testRun: #RoomTest #test08ARoomCanNotHaveVariousCells stamp: 'LH 12/10/2020 18:58:25'!
PASSED!

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 18:58:25'!
PASSED!

!testRun: #RoomTest #test10ARoomCanHaveOneObject stamp: 'LH 12/10/2020 18:58:25'!
PASSED!
!RoomTest methodsFor: 'tests for room objects' stamp: 'LH 12/10/2020 18:58:34'!
test11ARoomCanHaveMoreThanOneObject
	|aRoom roomObjects|
	
	roomObjects := Dictionary new.
	roomObjects at: 0@0 put: (NoPointsPortableObject named: 'rock' weighing: 3 ).
	roomObjects at: 0@1 put: (NoPointsPortableObject named: 'scissors' weighing: 2 ).
	roomObjects at: 1@1 put: (NoPointsPortableObject named: 'paper' weighing: 1 ).
	aRoom := Room withWidth: 10 andHeight: 10 andObjects: roomObjects.
	
	self assert: (aRoom thereIsAnObjectAt: 0@0).
	self assert: (aRoom thereIsAnObjectAt: 0@1).
	self assert: (aRoom thereIsAnObjectAt: 1@1).! !

!testRun: #RoomTest #test11ARoomCanHaveMoreThanOneObject stamp: 'LH 12/10/2020 18:58:35'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 18:58:35'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 18:58:35'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 18:58:35'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 18:58:35'!
PASSED!

!testRun: #RoomTest #test05ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 18:58:35'!
PASSED!

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 18:58:35'!
PASSED!

!testRun: #RoomTest #test07ARoomCanNotHaveValidCellsOutsideItsWidth stamp: 'LH 12/10/2020 18:58:35'!
PASSED!

!testRun: #RoomTest #test08ARoomCanNotHaveVariousCells stamp: 'LH 12/10/2020 18:58:35'!
PASSED!

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 18:58:35'!
PASSED!

!testRun: #RoomTest #test10ARoomCanHaveOneObject stamp: 'LH 12/10/2020 18:58:35'!
PASSED!

!testRun: #RoomTest #test11ARoomCanHaveMoreThanOneObject stamp: 'LH 12/10/2020 18:58:35'!
PASSED!
!RoomTest methodsFor: 'tests for room objects' stamp: 'LH 12/10/2020 19:01:27' prior: 50874075!
test11ARoomCanHaveMoreThanOneObject
	|aRoom roomObjects|
	
	roomObjects := Dictionary new.
	roomObjects at: 0@1 put: (NoPointsPortableObject named: 'scissors' weighing: 2 ).
	roomObjects at: 1@1 put: (NoPointsPortableObject named: 'paper' weighing: 1 ).
	aRoom := Room withWidth: 10 andHeight: 10 andObjects: roomObjects.
	
	self assert: (aRoom thereIsAnObjectAt: 0@1).
	self assert: (aRoom thereIsAnObjectAt: 1@1).! !

!testRun: #RoomTest #test11ARoomCanHaveMoreThanOneObject stamp: 'LH 12/10/2020 19:01:28'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 19:01:52' prior: 50874036!
thereIsAnObjectAt: aCell 
	
	^objects keys includes: aCell.! !

!testRun: #RoomTest #test11ARoomCanHaveMoreThanOneObject stamp: 'LH 12/10/2020 19:01:53'!
PASSED!

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 19:01:53'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 19:01:53'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 19:01:53'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 19:01:53'!
PASSED!

!testRun: #RoomTest #test05ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 19:01:53'!
PASSED!

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 19:01:53'!
PASSED!

!testRun: #RoomTest #test07ARoomCanNotHaveValidCellsOutsideItsWidth stamp: 'LH 12/10/2020 19:01:53'!
PASSED!

!testRun: #RoomTest #test08ARoomCanNotHaveVariousCells stamp: 'LH 12/10/2020 19:01:53'!
PASSED!

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 19:01:53'!
PASSED!

!testRun: #RoomTest #test10ARoomCanHaveOneObject stamp: 'LH 12/10/2020 19:01:53'!
PASSED!

!testRun: #RoomTest #test11ARoomCanHaveMoreThanOneObject stamp: 'LH 12/10/2020 19:01:53'!
PASSED!

!methodRemoval: Room #initializeWidth:andHeight: stamp: 'LH 12/10/2020 19:04:09'!
initializeWidth: roomWidth andHeight:  roomHeight
	
	height := roomHeight.
	
	width := roomWidth.!
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 19:08:28'!
theNumber: aNumber isBetween0And: anUpperLimit 
	
	^anUpperLimit <= aNumber or: (aNumber  < 0) ! !
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 19:10:24' prior: 50873480!
isValidCell: aCell 
	
	^(self theNumber: aCell y isBetween0And: height) and:(self theNumber: aCell x isBetween0And: width).
	! !
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 19:10:59' prior: 50874198!
theNumber: aNumber isBetween0And: anUpperLimit 
	
	^aNumber < anUpperLimit and: (0 <= aNumber).! !

!testRun: #RoomTest #test01ARoomCantHave0Cells stamp: 'LH 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test02ARoomCanHaveAValidCell stamp: 'LH 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test03ARoomCanNotHaveNegativeHeight stamp: 'LH 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test04ARoomCanNotHaveNegativeWidth stamp: 'LH 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test05ARoomCanNotHaveValidCellsAboveItsHeight stamp: 'LH 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test06ARoomCanNotHaveValidCellsBellowItsHeight stamp: 'LH 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test07ARoomCanNotHaveValidCellsOutsideItsWidth stamp: 'LH 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test08ARoomCanNotHaveVariousCells stamp: 'LH 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test09ARoomCanHaveNoObjects stamp: 'LH 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test10ARoomCanHaveOneObject stamp: 'LH 12/10/2020 19:11:01'!
PASSED!

!testRun: #RoomTest #test11ARoomCanHaveMoreThanOneObject stamp: 'LH 12/10/2020 19:11:01'!
PASSED!
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 19:11:25' prior: 50874151!
thereIsAnObjectAt: aCell 
	"returns if a cell is occupied by an object in this room"
	
	^objects keys includes: aCell.! !
!Room methodsFor: 'testing' stamp: 'LH 12/10/2020 19:12:03' prior: 50874204!
isValidCell: aCell 
	"checks if a cell has valid coordinates for this room"
	
	^(self theNumber: aCell y isBetween0And: height) and:(self theNumber: aCell x isBetween0And: width).
	! !

TestCase subclass: #PlayableCharacterRoomInteractionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacterRoomInteractionTest category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 19:13:04'!
TestCase subclass: #PlayableCharacterRoomInteractionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterRoomInteractionTest methodsFor: 'tests for moving' stamp: 'LH 12/10/2020 19:19:59'!
test01ACharacterCanNotInitializeInACellOutsideTheRoom
	|aRoom |
	
	aRoom := self aRoomWithNoObjects.
	
	self 
		should:[ self aCharacterAt: -1@1 WithinTheRoom: aRoom ]
		raise: Error
		withMessageText: PlayableCharacter invalidSpawnPoint.! !
!PlayableCharacterRoomInteractionTest methodsFor: 'tests for moving' stamp: 'LH 12/10/2020 19:20:07' prior: 50874282!
test01ACharacterCanNotInitializeInACellOutsideTheRoom
	|aRoom|
	
	aRoom := self aRoomWithNoObjects.
	
	self 
		should:[ self aCharacterAt: -1@1 WithinTheRoom: aRoom ]
		raise: Error
		withMessageText: PlayableCharacter invalidSpawnPoint.! !

!testRun: #PlayableCharacterRoomInteractionTest #test01ACharacterCanNotInitializeInACellOutsideTheRoom stamp: 'LH 12/10/2020 19:20:07'!
ERROR!
!PlayableCharacterRoomInteractionTest methodsFor: 'factory' stamp: 'LH 12/10/2020 19:20:19'!
aRoomWithNoObjects
	self shouldBeImplemented.! !
!PlayableCharacterRoomInteractionTest methodsFor: 'factory' stamp: 'LH 12/10/2020 19:20:40' prior: 50874309!
aRoomWithNoObjects
	^ Room withWidth: 10 andHeight: 10 andObjects: Dictionary new.! !

!testRun: #PlayableCharacterRoomInteractionTest #test01ACharacterCanNotInitializeInACellOutsideTheRoom stamp: 'LH 12/10/2020 19:20:42'!
ERROR!
!PlayableCharacter class methodsFor: 'error message' stamp: 'LH 12/10/2020 19:20:55'!
invalidSpawnPoint
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'error message' stamp: 'LH 12/10/2020 19:21:15' prior: 50874324!
invalidSpawnPoint
	^'invalid Spawn Point for the room'! !

!testRun: #PlayableCharacterRoomInteractionTest #test01ACharacterCanNotInitializeInACellOutsideTheRoom stamp: 'LH 12/10/2020 19:21:17'!
FAILURE!
!PlayableCharacterRoomInteractionTest methodsFor: 'factory' stamp: 'LH 12/10/2020 19:21:41'!
aCharacterAt: aPoint WithinTheRoom: aRoom 
	self shouldBeImplemented.! !
!PlayableCharacterRoomInteractionTest methodsFor: 'factory' stamp: 'LH 12/10/2020 19:22:29' prior: 50874339!
aCharacterAt: aPoint WithinTheRoom: aRoom 
	
	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North.! !

!testRun: #PlayableCharacterRoomInteractionTest #test01ACharacterCanNotInitializeInACellOutsideTheRoom stamp: 'LH 12/10/2020 19:22:31'!
FAILURE!

!testRun: #PlayableCharacterRoomInteractionTest #test01ACharacterCanNotInitializeInACellOutsideTheRoom stamp: 'LH 12/10/2020 19:22:58'!
FAILURE!

!testRun: #PlayableCharacterRoomInteractionTest #test01ACharacterCanNotInitializeInACellOutsideTheRoom stamp: 'LH 12/10/2020 19:22:58'!
FAILURE!
!PlayableCharacterRoomInteractionTest methodsFor: 'factory' stamp: 'LH 12/10/2020 19:23:26'!
defaultBackpack
	self shouldBeImplemented.! !
!PlayableCharacterRoomInteractionTest methodsFor: 'factory' stamp: 'LH 12/10/2020 19:23:35' prior: 50874366!
defaultBackpack
	^ Backpack containingUpTo: 100 limitingPointsTo: 100! !
!PlayableCharacterRoomInteractionTest methodsFor: 'factory' stamp: 'LH 12/10/2020 19:25:12' prior: 50874345!
aCharacterAt: aPoint WithinTheRoom: aRoom 
	
	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North withingTheRoom: aRoom.! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 19:26:21'!
named: aString using: aBackpack at: aPoint heading: aSymbol withingTheRoom: aRoom 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString using: aBackpack at: aPoint heading: aSymbol withingTheRoom: aRoom ! !

!methodRemoval: PlayableCharacter class #named:using:at:heading:withingTheRoom: stamp: 'LH 12/10/2020 19:29:52'!
named: aString using: aBackpack at: aPoint heading: aSymbol withingTheRoom: aRoom 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString using: aBackpack at: aPoint heading: aSymbol withingTheRoom: aRoom !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 19:30:42'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint withinTheRoom: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 19:30:42' prior: 50872094!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West withinTheRoom: self emptyRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 19:30:42' prior: 50872026!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East withinTheRoom: self emptyRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 19:30:42' prior: 50872004!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North withinTheRoom: self emptyRoom .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 19:30:42' prior: 50871980!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North withinTheRoom: self emptyRoom .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 19:30:42' prior: 50872015!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North withinTheRoom: self emptyRoom .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 19:30:42' prior: 50872054!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West withinTheRoom: self emptyRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 19:30:43' prior: 50872040!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South withinTheRoom: self emptyRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 19:30:43' prior: 50872068!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X withinTheRoom: self emptyRoom ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 19:30:43' prior: 50871992!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North withinTheRoom: self emptyRoom .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 19:30:43' prior: 50872081!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West withinTheRoom: self emptyRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !

!methodRemoval: PlayableCharacter class #named:using:at:heading: stamp: 'LH 12/10/2020 19:30:43'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 19:31:25'!
emptyRoom

	^ Room withWidth: 10 andHeight: 10 andObjects: Dictionary new. ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'LH 12/10/2020 19:31:29'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'LH 12/10/2020 19:31:29'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'LH 12/10/2020 19:31:29'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'LH 12/10/2020 19:31:29'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'LH 12/10/2020 19:31:29'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'LH 12/10/2020 19:31:29'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'LH 12/10/2020 19:31:29'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'LH 12/10/2020 19:31:29'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'LH 12/10/2020 19:31:29'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'LH 12/10/2020 19:31:29'!
PASSED!
!PlayableCharacterRoomInteractionTest methodsFor: 'factory' stamp: 'LH 12/10/2020 19:31:57' prior: 50874377!
aCharacterAt: aPoint WithinTheRoom: aRoom 
	
	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North withinTheRoom: aRoom.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'LH 12/10/2020 19:32:47'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading withinTheRoom: aRoom  

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 19:32:47' prior: 50874410!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint withinTheRoom: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading withinTheRoom: aRoom ! !

!methodRemoval: PlayableCharacter #initializeNamed:using:at:heading: stamp: 'LH 12/10/2020 19:32:47'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 19:33:07'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'LH 12/10/2020 19:33:05' prior: 50874642!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading withinTheRoom: aRoom  

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room := aRoom.! !

!testRun: #PlayableCharacterRoomInteractionTest #test01ACharacterCanNotInitializeInACellOutsideTheRoom stamp: 'LH 12/10/2020 19:33:24'!
FAILURE!
!PlayableCharacterRoomInteractionTest methodsFor: 'factory' stamp: 'LH 12/10/2020 19:34:12' prior: 50874634!
aCharacterAt: aPoint WithinTheRoom: aRoom 
	
	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North withinTheRoom: aRoom.! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 19:34:39' prior: 50874652!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint withinTheRoom: aRoom  
	
	| newHeading |
	
	aRoom isValidCell: aPosition.
	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading withinTheRoom: aRoom ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 19:35:18' prior: 50874706!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint withinTheRoom: aRoom  
	
	| newHeading |
	
	(aRoom isValidCell: aPosition) ifFalse:[^self error: PlayableCharacter invalidSpawnPoint].
	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading withinTheRoom: aRoom ! !

!testRun: #PlayableCharacterRoomInteractionTest #test01ACharacterCanNotInitializeInACellOutsideTheRoom stamp: 'LH 12/10/2020 19:35:19'!
FAILURE!
!PlayableCharacterRoomInteractionTest methodsFor: 'factory' stamp: 'LH 12/10/2020 19:35:57' prior: 50874697!
aCharacterAt: aPoint WithinTheRoom: aRoom 
	
	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: aPoint heading: #North withinTheRoom: aRoom.! !

!testRun: #PlayableCharacterRoomInteractionTest #test01ACharacterCanNotInitializeInACellOutsideTheRoom stamp: 'LH 12/10/2020 19:36:00'!
PASSED!

!testRun: #PlayableCharacterRoomInteractionTest #test01ACharacterCanNotInitializeInACellOutsideTheRoom stamp: 'LH 12/10/2020 19:36:00'!
PASSED!
!PlayableCharacterRoomInteractionTest methodsFor: 'tests for moving' stamp: 'LH 12/10/2020 19:37:59'!
test02ACharacterCanNotInitializeInACellWithAnObject
	|aRoom|
	
	aRoom := self aRoomWithAnObjectAt: 0@0.
	
	self 
		should:[ self aCharacterAt: 0@0 WithinTheRoom: aRoom ]
		raise: Error
		withMessageText: PlayableCharacter invalidSpawnPoint.! !

!testRun: #PlayableCharacterRoomInteractionTest #test02ACharacterCanNotInitializeInACellWithAnObject stamp: 'LH 12/10/2020 19:38:01'!
ERROR!
!PlayableCharacterRoomInteractionTest methodsFor: 'factory' stamp: 'LH 12/10/2020 19:38:07'!
aRoomWithAnObjectAt: aPoint 
	self shouldBeImplemented.! !
!PlayableCharacterRoomInteractionTest methodsFor: 'factory' stamp: 'LH 12/10/2020 19:40:15' prior: 50874772!
aRoomWithAnObjectAt: aCell 
	|objects|
	objects := Dictionary new.
	objects at: aCell put: self aPortableObject.
	
	^ Room withWidth: 10 andHeight: 10 andObjects: objects. ! !

!testRun: #PlayableCharacterRoomInteractionTest #test01ACharacterCanNotInitializeInACellOutsideTheRoom stamp: 'LH 12/10/2020 19:40:19'!
PASSED!

!testRun: #PlayableCharacterRoomInteractionTest #test02ACharacterCanNotInitializeInACellWithAnObject stamp: 'LH 12/10/2020 19:40:19'!
ERROR!

!testRun: #PlayableCharacterRoomInteractionTest #test02ACharacterCanNotInitializeInACellWithAnObject stamp: 'LH 12/10/2020 19:40:20'!
ERROR!
!PlayableCharacterRoomInteractionTest methodsFor: 'factory' stamp: 'LH 12/10/2020 19:40:30'!
aPortableObject
	self shouldBeImplemented.! !
!PlayableCharacterRoomInteractionTest methodsFor: 'factory' stamp: 'LH 12/10/2020 19:41:08' prior: 50874800!
aPortableObject
	^ NoPointsPortableObject named: 'rock' weighing: 3.! !

!testRun: #PlayableCharacterRoomInteractionTest #test02ACharacterCanNotInitializeInACellWithAnObject stamp: 'LH 12/10/2020 19:41:10'!
FAILURE!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 19:43:11' prior: 50874719!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint withinTheRoom: aRoom  
	
	| newHeading |
	
	(aRoom isValidCell: aPosition) ifFalse:[^self error: PlayableCharacter invalidSpawnPoint].
	(aRoom thereIsAnObjectAt: aPosition) ifTrue:[^self error: PlayableCharacter invalidSpawnPoint].
	
	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading withinTheRoom: aRoom ! !

!testRun: #PlayableCharacterRoomInteractionTest #test02ACharacterCanNotInitializeInACellWithAnObject stamp: 'LH 12/10/2020 19:43:12'!
PASSED!

!testRun: #PlayableCharacterRoomInteractionTest #test01ACharacterCanNotInitializeInACellOutsideTheRoom stamp: 'LH 12/10/2020 19:43:12'!
PASSED!

!testRun: #PlayableCharacterRoomInteractionTest #test02ACharacterCanNotInitializeInACellWithAnObject stamp: 'LH 12/10/2020 19:43:12'!
PASSED!
!PlayableCharacterRoomInteractionTest methodsFor: 'tests for moving' stamp: 'LH 12/10/2020 19:50:57'!
test03ACharacterCanNotMoveOutsideTheRoom
	|aRoom aCharacter|
	
	aRoom := self aRoomWithNoObjects .
	aCharacter := self aCharacterAt: 0@0 WithinTheRoom: aRoom.
	aCharacter rotateLeft.
	
	self 
		should:[ aCharacter moveForward ]
		raise: Error
		withExceptionDo:[:anError |
			self assert: anError equals: PlayableCharacter invalidMovement.
			self assert: (aCharacter isAt: 0@0 heading: #West)].! !

!testRun: #PlayableCharacterRoomInteractionTest #test03ACharacterCanNotMoveOutsideTheRoom stamp: 'LH 12/10/2020 19:50:58'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'LH 12/10/2020 19:52:57' prior: 50872340!
moveForward
	|newPosition|
	
	newPosition := position + heading forwardPoint.
	(room isValidCell: newPosition) ifFalse:[^self error: PlayableCharacter invalidMovement].
	
	position := newPosition.! !

!testRun: #PlayableCharacterRoomInteractionTest #test03ACharacterCanNotMoveOutsideTheRoom stamp: 'LH 12/10/2020 19:53:00'!
ERROR!
!PlayableCharacter class methodsFor: 'error message' stamp: 'LH 12/10/2020 19:53:12'!
invalidMovement
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'error message' stamp: 'LH 12/10/2020 19:53:36' prior: 50874882!
invalidMovement
	^'Cannot make that movement'! !

!testRun: #PlayableCharacterRoomInteractionTest #test03ACharacterCanNotMoveOutsideTheRoom stamp: 'LH 12/10/2020 19:53:39'!
FAILURE!
!PlayableCharacterRoomInteractionTest methodsFor: 'tests for moving' stamp: 'LH 12/10/2020 19:54:03' prior: 50874848!
test03ACharacterCanNotMoveOutsideTheRoom
	|aRoom aCharacter|
	
	aRoom := self aRoomWithNoObjects .
	aCharacter := self aCharacterAt: 0@0 WithinTheRoom: aRoom.
	aCharacter rotateLeft.
	
	self 
		should:[ aCharacter moveForward ]
		raise: Error
		withExceptionDo:[:anError |
			self assert: anError messageText equals: PlayableCharacter invalidMovement.
			self assert: (aCharacter isAt: 0@0 heading: #West)].! !

!testRun: #PlayableCharacterRoomInteractionTest #test03ACharacterCanNotMoveOutsideTheRoom stamp: 'LH 12/10/2020 19:54:05'!
PASSED!

!testRun: #PlayableCharacterRoomInteractionTest #test01ACharacterCanNotInitializeInACellOutsideTheRoom stamp: 'LH 12/10/2020 19:54:05'!
PASSED!

!testRun: #PlayableCharacterRoomInteractionTest #test02ACharacterCanNotInitializeInACellWithAnObject stamp: 'LH 12/10/2020 19:54:05'!
PASSED!

!testRun: #PlayableCharacterRoomInteractionTest #test03ACharacterCanNotMoveOutsideTheRoom stamp: 'LH 12/10/2020 19:54:05'!
PASSED!
!PlayableCharacterRoomInteractionTest methodsFor: 'tests for moving' stamp: 'LH 12/10/2020 19:55:08'!
test04ACharacterCanNotMoveIntoAnObject
	|aRoom aCharacter|
	
	aRoom := self aRoomWithAnObjectAt: 0@1.
	aCharacter := self aCharacterAt: 0@0 WithinTheRoom: aRoom.
	
	self 
		should:[ aCharacter moveForward ]
		raise: Error
		withExceptionDo:[:anError |
			self assert: anError messageText equals: PlayableCharacter invalidMovement.
			self assert: (aCharacter isAt: 0@0 heading: #North)].! !

!testRun: #PlayableCharacterRoomInteractionTest #test04ACharacterCanNotMoveIntoAnObject stamp: 'LH 12/10/2020 19:55:09'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'LH 12/10/2020 19:55:43' prior: 50874868!
moveForward
	|newPosition|
	
	newPosition := position + heading forwardPoint.
	(room isValidCell: newPosition) ifFalse:[^self error: PlayableCharacter invalidMovement].
	(room thereIsAnObjectAt: newPosition) ifFalse:[^self error: PlayableCharacter invalidMovement].
	
	position := newPosition.! !

!testRun: #PlayableCharacterRoomInteractionTest #test04ACharacterCanNotMoveIntoAnObject stamp: 'LH 12/10/2020 19:55:44'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'LH 12/10/2020 19:56:01' prior: 50874951!
moveForward
	|newPosition|
	
	newPosition := position + heading forwardPoint.
	(room isValidCell: newPosition) ifFalse:[^self error: PlayableCharacter invalidMovement].
	(room thereIsAnObjectAt: newPosition) ifTrue:[^self error: PlayableCharacter invalidMovement].
	
	position := newPosition.! !

!testRun: #PlayableCharacterRoomInteractionTest #test04ACharacterCanNotMoveIntoAnObject stamp: 'LH 12/10/2020 19:56:03'!
PASSED!

!testRun: #PlayableCharacterRoomInteractionTest #test01ACharacterCanNotInitializeInACellOutsideTheRoom stamp: 'LH 12/10/2020 19:56:03'!
PASSED!

!testRun: #PlayableCharacterRoomInteractionTest #test02ACharacterCanNotInitializeInACellWithAnObject stamp: 'LH 12/10/2020 19:56:03'!
PASSED!

!testRun: #PlayableCharacterRoomInteractionTest #test03ACharacterCanNotMoveOutsideTheRoom stamp: 'LH 12/10/2020 19:56:03'!
PASSED!

!testRun: #PlayableCharacterRoomInteractionTest #test04ACharacterCanNotMoveIntoAnObject stamp: 'LH 12/10/2020 19:56:03'!
PASSED!

----SNAPSHOT----(10 December 2020 20:08:05) CuisUniversity-4384.image priorSource: 17281119!

TestCase subclass: #StageObjectTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #StageObjectTest category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 20:08:35'!
TestCase subclass: #StageObjectTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRenamed: #StageObjectTest as: #NonPortableObjectTest stamp: 'LH 12/10/2020 20:09:23'!
Smalltalk renameClassNamed: #StageObjectTest as: #NonPortableObjectTest!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 20:14:45'!
Object subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 20:14:38'!
test01ANonPortableObjectCanNotBeAdded
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject named: 'big rock'.
	
	self deny: (aNonPortableObject assertCanAddTo: self aBackpack).! !

!testRun: #NonPortableObjectTest #test01ANonPortableObjectCanNotBeAdded stamp: 'LH 12/10/2020 20:15:00'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 20:15:08'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 20:15:21' prior: 50875043!
named: aName 

	^self new initializeNamed: aName ! !

!testRun: #NonPortableObjectTest #test01ANonPortableObjectCanNotBeAdded stamp: 'LH 12/10/2020 20:15:24'!
ERROR!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 20:15:35'!
Object subclass: #NonPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'LH 12/10/2020 20:15:35'!
initializeNamed: aName 
	self shouldBeImplemented.
	name := aName.! !
!NonPortableObject methodsFor: 'initialization' stamp: 'LH 12/10/2020 20:15:40' prior: 50875068!
initializeNamed: aName 

	name := aName.! !

!testRun: #NonPortableObjectTest #test01ANonPortableObjectCanNotBeAdded stamp: 'LH 12/10/2020 20:15:46'!
ERROR!
!NonPortableObjectTest methodsFor: 'factory' stamp: 'LH 12/10/2020 20:15:54'!
aBackpack
	self shouldBeImplemented.! !
!NonPortableObjectTest methodsFor: 'factory' stamp: 'LH 12/10/2020 20:16:21' prior: 50875082!
aBackpack
	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !

!testRun: #NonPortableObjectTest #test01ANonPortableObjectCanNotBeAdded stamp: 'LH 12/10/2020 20:16:23'!
ERROR!
!NonPortableObject methodsFor: 'assertions' stamp: 'LH 12/10/2020 20:16:40'!
assertCanAddTo: aBackpack 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'assertions' stamp: 'LH 12/10/2020 20:16:44' prior: 50875096!
assertCanAddTo: aBackpack 
	^false.! !

!testRun: #NonPortableObjectTest #test01ANonPortableObjectCanNotBeAdded stamp: 'LH 12/10/2020 20:16:46'!
PASSED!

!testRun: #NonPortableObjectTest #test01ANonPortableObjectCanNotBeAdded stamp: 'LH 12/10/2020 20:16:46'!
PASSED!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 20:19:24'!
test02ANonPortableObjectCanHaveNoObjectsInside
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject named: 'big rock' withStageObjects: OrderedCollection new.
	
	self assert: 0 equals: aNonPortableObject quantityOfObjectsInside.! !

!testRun: #NonPortableObjectTest #test02ANonPortableObjectCanHaveNoObjectsInside stamp: 'LH 12/10/2020 20:19:30'!
ERROR!

!testRun: #NonPortableObjectTest #test02ANonPortableObjectCanHaveNoObjectsInside stamp: 'LH 12/10/2020 20:19:30'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 20:20:27'!
named: aName withInsideObjects: insideObjects  

	^self new initializeNamed: aName ! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 20:20:28' prior: 50875030!
test01ANonPortableObjectCanNotBeAdded
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject named: 'big rock' withInsideObjects: OrderedCollection new.
	
	self deny: (aNonPortableObject assertCanAddTo: self aBackpack).! !

!methodRemoval: NonPortableObject class #named: stamp: 'LH 12/10/2020 20:20:28'!
named: aName 

	^self new initializeNamed: aName !
!NonPortableObject methodsFor: 'initialization' stamp: 'LH 12/10/2020 20:21:11'!
initializeNamed: aName withInsideObjects: insideObjects  

	name := aName.! !
!NonPortableObject class methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 20:21:11' prior: 50875131!
named: aName withInsideObjects: insideObjects  

	^self new initializeNamed: aName withInsideObjects: insideObjects ! !

!methodRemoval: NonPortableObject #initializeNamed: stamp: 'LH 12/10/2020 20:21:11'!
initializeNamed: aName 

	name := aName.!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 20:21:24'!
Object subclass: #NonPortableObject
	instanceVariableNames: 'name objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'LH 12/10/2020 20:21:23' prior: 50875152!
initializeNamed: aName withInsideObjects: insideObjects  

	name := aName.
	objects := insideObjects.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 20:22:06' prior: 50875112!
test02ANonPortableObjectCanHaveNoObjectsInside
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject named: 'big rock' withInsideObjects: OrderedCollection new.
	
	self assert: 0 equals: aNonPortableObject quantityOfObjectsInside.! !

!testRun: #NonPortableObjectTest #test02ANonPortableObjectCanHaveNoObjectsInside stamp: 'LH 12/10/2020 20:22:07'!
ERROR!
!NonPortableObject methodsFor: 'queries' stamp: 'LH 12/10/2020 20:22:22'!
quantityOfObjectsInside
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'queries' stamp: 'LH 12/10/2020 20:22:27' prior: 50875199!
quantityOfObjectsInside
	
	^0! !

!testRun: #NonPortableObjectTest #test02ANonPortableObjectCanHaveNoObjectsInside stamp: 'LH 12/10/2020 20:22:29'!
PASSED!

!testRun: #NonPortableObjectTest #test01ANonPortableObjectCanNotBeAdded stamp: 'LH 12/10/2020 20:22:29'!
PASSED!

!testRun: #NonPortableObjectTest #test02ANonPortableObjectCanHaveNoObjectsInside stamp: 'LH 12/10/2020 20:22:29'!
PASSED!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 20:24:48'!
test03ANonPortableObjectCanHaveAPortableObject
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject named: 'big rock' withInsideObjects: (OrderedCollection with: self aCommonPortableObject).
	
	self assert: 1 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: self aCommonPortableObject).! !

!testRun: #NonPortableObjectTest #test03ANonPortableObjectCanHaveAPortableObject stamp: 'LH 12/10/2020 20:24:50'!
ERROR!
!NonPortableObjectTest methodsFor: 'factory' stamp: 'LH 12/10/2020 20:24:57'!
aCommonPortableObject
	self shouldBeImplemented.! !
!NonPortableObjectTest methodsFor: 'factory' stamp: 'LH 12/10/2020 20:25:45' prior: 50875237!
aCommonPortableObject
	^ NoPointsPortableObject named: 'rock' weighing: 3.! !

!testRun: #NonPortableObjectTest #test03ANonPortableObjectCanHaveAPortableObject stamp: 'LH 12/10/2020 20:25:46'!
FAILURE!
!NonPortableObject methodsFor: 'queries' stamp: 'LH 12/10/2020 20:26:49' prior: 50875204!
quantityOfObjectsInside
	objects isEmpty ifTrue:[^0].
	^1! !

!testRun: #NonPortableObjectTest #test03ANonPortableObjectCanHaveAPortableObject stamp: 'LH 12/10/2020 20:27:02'!
ERROR!
!NonPortableObject methodsFor: 'testing' stamp: 'LH 12/10/2020 20:27:13'!
hasStageObject: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'testing' stamp: 'LH 12/10/2020 20:27:36' prior: 50875261!
hasStageObject: aStageObject 
	
	^true.! !

!testRun: #NonPortableObjectTest #test03ANonPortableObjectCanHaveAPortableObject stamp: 'LH 12/10/2020 20:27:37'!
PASSED!

!testRun: #NonPortableObjectTest #test01ANonPortableObjectCanNotBeAdded stamp: 'LH 12/10/2020 20:27:37'!
PASSED!

!testRun: #NonPortableObjectTest #test02ANonPortableObjectCanHaveNoObjectsInside stamp: 'LH 12/10/2020 20:27:37'!
PASSED!

!testRun: #NonPortableObjectTest #test03ANonPortableObjectCanHaveAPortableObject stamp: 'LH 12/10/2020 20:27:37'!
PASSED!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 20:33:21'!
test04ANonPortableObjectCanHaveManyPortableObjects
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: self aCommonPortableObject with: self anUncommonPortableObject).
	
	self assert: 2 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: self aCommonPortableObject).
	self assert: (aNonPortableObject hasStageObject: self anUncommonPortableObject).! !

!testRun: #NonPortableObjectTest #test04ANonPortableObjectCanHaveManyPortableObjects stamp: 'LH 12/10/2020 20:33:24'!
ERROR!
!NonPortableObjectTest methodsFor: 'factory' stamp: 'LH 12/10/2020 20:33:30'!
anUncommonPortableObject
	self shouldBeImplemented.! !
!NonPortableObjectTest methodsFor: 'factory' stamp: 'LH 12/10/2020 20:34:58' prior: 50875308!
anUncommonPortableObject
	^ PointsPortableObject named: 'amethyst' weighing: 5 worth: 5 .! !

!testRun: #NonPortableObjectTest #test04ANonPortableObjectCanHaveManyPortableObjects stamp: 'LH 12/10/2020 20:34:59'!
FAILURE!
!NonPortableObject methodsFor: 'queries' stamp: 'LH 12/10/2020 20:35:20' prior: 50875252!
quantityOfObjectsInside
	
	^ objects size.! !

!testRun: #NonPortableObjectTest #test04ANonPortableObjectCanHaveManyPortableObjects stamp: 'LH 12/10/2020 20:35:24'!
PASSED!

!testRun: #NonPortableObjectTest #test01ANonPortableObjectCanNotBeAdded stamp: 'LH 12/10/2020 20:35:24'!
PASSED!

!testRun: #NonPortableObjectTest #test02ANonPortableObjectCanHaveNoObjectsInside stamp: 'LH 12/10/2020 20:35:24'!
PASSED!

!testRun: #NonPortableObjectTest #test03ANonPortableObjectCanHaveAPortableObject stamp: 'LH 12/10/2020 20:35:24'!
PASSED!

!testRun: #NonPortableObjectTest #test04ANonPortableObjectCanHaveManyPortableObjects stamp: 'LH 12/10/2020 20:35:24'!
PASSED!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 20:40:36'!
test05ANonPortableObjectCanHaveANonPortableObject
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: self aCommonNonPortableObject).
	
	self assert: 1 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: self aCommonNonPortableObject).! !

!testRun: #NonPortableObjectTest #test05ANonPortableObjectCanHaveANonPortableObject stamp: 'LH 12/10/2020 20:40:40'!
ERROR!
!NonPortableObjectTest methodsFor: 'factory' stamp: 'LH 12/10/2020 20:42:11'!
aCommonNonPortableObject
	^ NonPortableObject named: 'reasonably sized rock' withInsideObjects: OrderedCollection new.! !

!testRun: #NonPortableObjectTest #test05ANonPortableObjectCanHaveANonPortableObject stamp: 'LH 12/10/2020 20:42:54'!
PASSED!

!testRun: #NonPortableObjectTest #test01ANonPortableObjectCanNotBeAdded stamp: 'LH 12/10/2020 20:42:54'!
PASSED!

!testRun: #NonPortableObjectTest #test02ANonPortableObjectCanHaveNoObjectsInside stamp: 'LH 12/10/2020 20:42:54'!
PASSED!

!testRun: #NonPortableObjectTest #test03ANonPortableObjectCanHaveAPortableObject stamp: 'LH 12/10/2020 20:42:54'!
PASSED!

!testRun: #NonPortableObjectTest #test04ANonPortableObjectCanHaveManyPortableObjects stamp: 'LH 12/10/2020 20:42:54'!
PASSED!

!testRun: #NonPortableObjectTest #test05ANonPortableObjectCanHaveANonPortableObject stamp: 'LH 12/10/2020 20:42:54'!
PASSED!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 20:44:57'!
named: aName withInsideObjects: insideObjects andNonPortableObjects: nonPortInsideObjects   

	^self new initializeNamed: aName withInsideObjects: insideObjects ! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 20:44:57' prior: 50875219!
test03ANonPortableObjectCanHaveAPortableObject
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject named: 'big rock' withInsideObjects: (OrderedCollection with: self aCommonPortableObject) andNonPortableObjects: OrderedCollection new.
	
	self assert: 1 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: self aCommonPortableObject).! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 20:44:57' prior: 50875138!
test01ANonPortableObjectCanNotBeAdded
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject named: 'big rock' withInsideObjects: OrderedCollection new andNonPortableObjects: OrderedCollection new.
	
	self deny: (aNonPortableObject assertCanAddTo: self aBackpack).! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 20:44:57' prior: 50875286!
test04ANonPortableObjectCanHaveManyPortableObjects
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: self aCommonPortableObject with: self anUncommonPortableObject) andNonPortableObjects: OrderedCollection new.
	
	self assert: 2 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: self aCommonPortableObject).
	self assert: (aNonPortableObject hasStageObject: self anUncommonPortableObject).! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 20:44:57' prior: 50875346!
test05ANonPortableObjectCanHaveANonPortableObject
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: self aCommonNonPortableObject) andNonPortableObjects: OrderedCollection new.
	
	self assert: 1 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: self aCommonNonPortableObject).! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 20:44:57' prior: 50875365!
aCommonNonPortableObject
	^ NonPortableObject named: 'reasonably sized rock' withInsideObjects: OrderedCollection new andNonPortableObjects: OrderedCollection new.! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 20:44:57' prior: 50875185!
test02ANonPortableObjectCanHaveNoObjectsInside
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject named: 'big rock' withInsideObjects: OrderedCollection new andNonPortableObjects: OrderedCollection new.
	
	self assert: 0 equals: aNonPortableObject quantityOfObjectsInside.! !

!methodRemoval: NonPortableObject class #named:withInsideObjects: stamp: 'LH 12/10/2020 20:44:58'!
named: aName withInsideObjects: insideObjects  

	^self new initializeNamed: aName withInsideObjects: insideObjects !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 20:45:33' prior: 50875453!
test05ANonPortableObjectCanHaveANonPortableObject
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: OrderedCollection new andNonPortableObjects: (OrderedCollection with: self aCommonNonPortableObject).
	
	self assert: 1 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: self aCommonNonPortableObject).! !
!NonPortableObject methodsFor: 'initialization' stamp: 'LH 12/10/2020 20:47:01'!
initializeNamed: aName withInsideObjects: insideObjects andNonPortInisdeObjects: nonPortableObjects   

	name := aName.
	objects := insideObjects.! !
!NonPortableObject class methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 20:47:02' prior: 50875395!
named: aName withInsideObjects: insideObjects andNonPortableObjects: nonPortInsideObjects   

	^self new initializeNamed: aName withInsideObjects: insideObjects andNonPortInisdeObjects: nonPortInsideObjects ! !

!methodRemoval: NonPortableObject #initializeNamed:withInsideObjects: stamp: 'LH 12/10/2020 20:47:02'!
initializeNamed: aName withInsideObjects: insideObjects  

	name := aName.
	objects := insideObjects.!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 20:47:26'!
Object subclass: #NonPortableObject
	instanceVariableNames: 'name objects nonPortObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'LH 12/10/2020 20:47:24' prior: 50875514!
initializeNamed: aName withInsideObjects: insideObjects andNonPortInisdeObjects: nonPortableObjects   

	name := aName.
	objects := insideObjects.
	nonPortObjects := nonPortableObjects.! !
!NonPortableObject methodsFor: 'queries' stamp: 'LH 12/10/2020 20:47:50' prior: 50875323!
quantityOfObjectsInside
	
	^ objects size + nonPortObjects size.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 20:49:45'!
test05ANonPortableObjectCanNotHaveStageObjectsNotInitializedWith
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: self aCommonPortableObject) andNonPortableObjects: OrderedCollection new.
	
	self assert: 1 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: self aCommonPortableObject).
	self deny: (aNonPortableObject hasStageObject: self aUncommonPortableObject).! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 20:49:55' prior: 50875562!
test05ANonPortableObjectCanNotHaveStageObjectsNotInitializedWith
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: self aCommonPortableObject) andNonPortableObjects: OrderedCollection new.
	
	self assert: 1 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: self aCommonPortableObject).
	self deny: (aNonPortableObject hasStageObject: self anUncommonPortableObject).! !

!testRun: #NonPortableObjectTest #test05ANonPortableObjectCanNotHaveStageObjectsNotInitializedWith stamp: 'LH 12/10/2020 20:50:10'!
FAILURE!
!NonPortableObject methodsFor: 'testing' stamp: 'LH 12/10/2020 20:50:52' prior: 50875267!
hasStageObject: aStageObject 
	
	^(objects includes: aStageObject) or:(nonPortObjects includes: aStageObject).! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 20:51:26'!
test06ANonPortableObjectCanHaveANonPortableObject
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: OrderedCollection new andNonPortableObjects: (OrderedCollection with: self aCommonNonPortableObject).
	
	self assert: 1 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: self aCommonNonPortableObject).! !

!methodRemoval: NonPortableObjectTest #test05ANonPortableObjectCanHaveANonPortableObject stamp: 'LH 12/10/2020 20:51:26'!
test05ANonPortableObjectCanHaveANonPortableObject
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: OrderedCollection new andNonPortableObjects: (OrderedCollection with: self aCommonNonPortableObject).
	
	self assert: 1 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: self aCommonNonPortableObject).!

!testRun: #NonPortableObjectTest #test06ANonPortableObjectCanHaveANonPortableObject stamp: 'LH 12/10/2020 20:51:29'!
FAILURE!

!testRun: #NonPortableObjectTest #test06ANonPortableObjectCanHaveANonPortableObject stamp: 'LH 12/10/2020 20:51:40'!
FAILURE!

!testRun: #NonPortableObjectTest #test06ANonPortableObjectCanHaveANonPortableObject stamp: 'LH 12/10/2020 20:51:40'!
FAILURE!

nonPortObjects includes: aStageObject!

nonPortInsideObjects!

nonPortObjects!

nonPortObjects!

self at: i!

!testRun: #NonPortableObjectTest #test03ANonPortableObjectCanHaveAPortableObject stamp: 'LH 12/10/2020 20:55:45'!
FAILURE!

!testRun: #NonPortableObjectTest #test03ANonPortableObjectCanHaveAPortableObject stamp: 'LH 12/10/2020 20:55:45'!
FAILURE!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 20:57:40' prior: 50875404!
test03ANonPortableObjectCanHaveAPortableObject
	|aNonPortableObject aPortObject|
	
	aPortObject := self aCommonPortableObject.
	aNonPortableObject := NonPortableObject named: 'big rock' withInsideObjects: (OrderedCollection with: aPortObject) andNonPortableObjects: OrderedCollection new.
	
	self assert: 1 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: aPortObject).! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 20:58:48' prior: 50875432!
test04ANonPortableObjectCanHaveManyPortableObjects
	|aNonPortableObject aPortObject1 aPortObject2|
	
	aPortObject1 := self aCommonPortableObject.
	aPortObject2 := self anUncommonPortableObject .
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: aPortObject1 with: aPortObject2) andNonPortableObjects: OrderedCollection new.
	
	self assert: 2 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: aPortObject1).
	self assert: (aNonPortableObject hasStageObject: aPortObject2).! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 21:00:30' prior: 50875581!
test05ANonPortableObjectCanNotHaveStageObjectsNotInitializedWith
	|aNonPortableObject aPortObject1 aPortObject2|
	
	aPortObject1 := self aCommonPortableObject.
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: aPortObject1) andNonPortableObjects: OrderedCollection new.
	
	aPortObject2 := self anUncommonPortableObject.
	self assert: 1 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: aPortObject1).
	self deny: (aNonPortableObject hasStageObject: aPortObject2).! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 21:01:11' prior: 50875611!
test06ANonPortableObjectCanHaveANonPortableObject
	|aNonPortableObject aNonPortObject|
	
	aNonPortObject := self aCommonNonPortableObject.
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: OrderedCollection new andNonPortableObjects: (OrderedCollection with: aNonPortObject).
	
	self assert: 1 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: aNonPortObject).! !

!testRun: #NonPortableObjectTest #test06ANonPortableObjectCanHaveANonPortableObject stamp: 'LH 12/10/2020 21:01:12'!
PASSED!

!testRun: #NonPortableObjectTest #test01ANonPortableObjectCanNotBeAdded stamp: 'LH 12/10/2020 21:01:12'!
PASSED!

!testRun: #NonPortableObjectTest #test02ANonPortableObjectCanHaveNoObjectsInside stamp: 'LH 12/10/2020 21:01:12'!
PASSED!

!testRun: #NonPortableObjectTest #test03ANonPortableObjectCanHaveAPortableObject stamp: 'LH 12/10/2020 21:01:12'!
PASSED!

!testRun: #NonPortableObjectTest #test04ANonPortableObjectCanHaveManyPortableObjects stamp: 'LH 12/10/2020 21:01:12'!
PASSED!

!testRun: #NonPortableObjectTest #test05ANonPortableObjectCanNotHaveStageObjectsNotInitializedWith stamp: 'LH 12/10/2020 21:01:12'!
PASSED!

!testRun: #NonPortableObjectTest #test06ANonPortableObjectCanHaveANonPortableObject stamp: 'LH 12/10/2020 21:01:12'!
PASSED!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 21:05:56'!
test07ANonPortableObjectHasTheObjectsOfItsNonPortObject
	|aNonPortableObject anInternalNonPortObject aPortObject|
	
	aPortObject := self anUncommonPortableObject.
	anInternalNonPortObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: OrderedCollection new andNonPortableObjects: (OrderedCollection with: aPortObject).
	
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: OrderedCollection new andNonPortableObjects: (OrderedCollection with: anInternalNonPortObject).
	
	self assert: 2 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: aPortObject).! !

!testRun: #NonPortableObjectTest #test07ANonPortableObjectHasTheObjectsOfItsNonPortObject stamp: 'LH 12/10/2020 21:05:59'!
FAILURE!
!NonPortableObject methodsFor: 'queries' stamp: 'LH 12/10/2020 21:10:08' prior: 50875557!
quantityOfObjectsInside
	
	^ objects size + nonPortObjects size + nonPortObjects sum:[:aFixedObject | aFixedObject size] ifEmpty:[0].! !
!NonPortableObject methodsFor: 'testing' stamp: 'LH 12/10/2020 21:12:11' prior: 50875605!
hasStageObject: aStageObject 
	
	^(objects includes: aStageObject) or:(nonPortObjects includes: aStageObject) or: (nonPortObjects detect:[:fixedObject | fixedObject hasStageObject: aStageObject]).! !
!NonPortableObject methodsFor: 'testing' stamp: 'LH 12/10/2020 21:19:41' prior: 50875811!
hasStageObject: aStageObject 
	|foundObject|
	foundObject := nonPortObjects detect:[:fixedObject | fixedObject hasStageObject: aStageObject] ifNone:[self].
	^(objects includes: aStageObject) or:(nonPortObjects includes: aStageObject) or: (self = foundObject) not.! !

!testRun: #NonPortableObjectTest #test07ANonPortableObjectHasTheObjectsOfItsNonPortObject stamp: 'LH 12/10/2020 21:20:00'!
ERROR!

!testRun: #NonPortableObjectTest #test07ANonPortableObjectHasTheObjectsOfItsNonPortObject stamp: 'LH 12/10/2020 21:20:00'!
ERROR!
!NonPortableObject methodsFor: 'queries' stamp: 'LH 12/10/2020 21:20:35' prior: 50875803!
quantityOfObjectsInside
	
	^ objects size + nonPortObjects size + (nonPortObjects sum:[:aFixedObject | aFixedObject size] ifEmpty:[0]).! !

!testRun: #NonPortableObjectTest #test07ANonPortableObjectHasTheObjectsOfItsNonPortObject stamp: 'LH 12/10/2020 21:20:41'!
ERROR!
!NonPortableObject methodsFor: 'queries' stamp: 'LH 12/10/2020 21:21:10' prior: 50875841!
quantityOfObjectsInside
	
	^ objects size + nonPortObjects size + (nonPortObjects sum:[:aFixedObject | aFixedObject quantityOfObjectsInside] ifEmpty:[0]).! !

!testRun: #NonPortableObjectTest #test07ANonPortableObjectHasTheObjectsOfItsNonPortObject stamp: 'LH 12/10/2020 21:21:12'!
ERROR!

nonPortObjects!
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 21:22:35' prior: 50875774!
test07ANonPortableObjectHasTheObjectsOfItsNonPortObject
	|aNonPortableObject anInternalNonPortObject aPortObject|
	
	aPortObject := self anUncommonPortableObject.
	anInternalNonPortObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: aPortObject) andNonPortableObjects: OrderedCollection new.
	
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: OrderedCollection new andNonPortableObjects: (OrderedCollection with: anInternalNonPortObject).
	
	self assert: 2 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: aPortObject).! !

!testRun: #NonPortableObjectTest #test07ANonPortableObjectHasTheObjectsOfItsNonPortObject stamp: 'LH 12/10/2020 21:22:37'!
PASSED!

StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name objects nonPortObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 21:23:06'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name objects nonPortObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

StageObject subclass: #PortableObject
	instanceVariableNames: 'weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 21:23:27'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

StageObject subclass: #NonPortableObject
	instanceVariableNames: 'objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 21:23:36'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

Object subclass: #StageObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #StageObject category: 'ISW1-2020-2C-2doParcial' stamp: 'LH 12/10/2020 21:23:41'!
Object subclass: #StageObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'LH 12/10/2020 21:24:06' prior: 50875548!
initializeNamed: aName withInsideObjects: insideObjects andNonPortInisdeObjects: nonPortableObjects   

	name := aName.
	objects := insideObjects.! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 21:25:14' prior: 50875729!
test06ANonPortableObjectCanHaveANonPortableObject
	|aNonPortableObject aNonPortObject|
	
	aNonPortObject := self aCommonNonPortableObject.
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: aNonPortObject) andNonPortableObjects: OrderedCollection new.
	
	self assert: 1 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: aNonPortObject).! !
!NonPortableObjectTest methodsFor: 'tests' stamp: 'LH 12/10/2020 21:25:31' prior: 50875866!
test07ANonPortableObjectHasTheObjectsOfItsNonPortObject
	|aNonPortableObject anInternalNonPortObject aPortObject|
	
	aPortObject := self anUncommonPortableObject.
	anInternalNonPortObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: aPortObject) andNonPortableObjects: OrderedCollection new.
	
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: anInternalNonPortObject) andNonPortableObjects: OrderedCollection new.
	
	self assert: 2 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: aPortObject).! !
!NonPortableObject methodsFor: 'initialization' stamp: 'LH 12/10/2020 21:25:57'!
initializeNamed: aName withInsideObjects: insideObjects    

	name := aName.
	objects := insideObjects.! !
!NonPortableObject class methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 21:25:57' prior: 50875523!
named: aName withInsideObjects: insideObjects andNonPortableObjects: nonPortInsideObjects   

	^self new initializeNamed: aName withInsideObjects: insideObjects ! !

!methodRemoval: NonPortableObject #initializeNamed:withInsideObjects:andNonPortInisdeObjects: stamp: 'LH 12/10/2020 21:25:57'!
initializeNamed: aName withInsideObjects: insideObjects andNonPortInisdeObjects: nonPortableObjects   

	name := aName.
	objects := insideObjects.!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'LH 12/10/2020 21:26:18'!
named: aName withInsideObjects: insideObjects    

	^self new initializeNamed: aName withInsideObjects: insideObjects ! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 21:26:18' prior: 50875470!
aCommonNonPortableObject
	^ NonPortableObject named: 'reasonably sized rock' withInsideObjects: OrderedCollection new .! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 21:26:18' prior: 50875668!
test03ANonPortableObjectCanHaveAPortableObject
	|aNonPortableObject aPortObject|
	
	aPortObject := self aCommonPortableObject.
	aNonPortableObject := NonPortableObject named: 'big rock' withInsideObjects: (OrderedCollection with: aPortObject) .
	
	self assert: 1 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: aPortObject).! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 21:26:18' prior: 50875707!
test05ANonPortableObjectCanNotHaveStageObjectsNotInitializedWith
	|aNonPortableObject aPortObject1 aPortObject2|
	
	aPortObject1 := self aCommonPortableObject.
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: aPortObject1) .
	
	aPortObject2 := self anUncommonPortableObject.
	self assert: 1 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: aPortObject1).
	self deny: (aNonPortableObject hasStageObject: aPortObject2).! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 21:26:18' prior: 50875956!
test06ANonPortableObjectCanHaveANonPortableObject
	|aNonPortableObject aNonPortObject|
	
	aNonPortObject := self aCommonNonPortableObject.
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: aNonPortObject) .
	
	self assert: 1 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: aNonPortObject).! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 21:26:18' prior: 50875479!
test02ANonPortableObjectCanHaveNoObjectsInside
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject named: 'big rock' withInsideObjects: OrderedCollection new .
	
	self assert: 0 equals: aNonPortableObject quantityOfObjectsInside.! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 21:26:18' prior: 50875420!
test01ANonPortableObjectCanNotBeAdded
	|aNonPortableObject|
	
	aNonPortableObject := NonPortableObject named: 'big rock' withInsideObjects: OrderedCollection new .
	
	self deny: (aNonPortableObject assertCanAddTo: self aBackpack).! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 21:26:18' prior: 50875685!
test04ANonPortableObjectCanHaveManyPortableObjects
	|aNonPortableObject aPortObject1 aPortObject2|
	
	aPortObject1 := self aCommonPortableObject.
	aPortObject2 := self anUncommonPortableObject .
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: aPortObject1 with: aPortObject2) .
	
	self assert: 2 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: aPortObject1).
	self assert: (aNonPortableObject hasStageObject: aPortObject2).! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'LH 12/10/2020 21:26:18' prior: 50875974!
test07ANonPortableObjectHasTheObjectsOfItsNonPortObject
	|aNonPortableObject anInternalNonPortObject aPortObject|
	
	aPortObject := self anUncommonPortableObject.
	anInternalNonPortObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: aPortObject) .
	
	aNonPortableObject := NonPortableObject 
							named: 'big rock' 
							withInsideObjects: (OrderedCollection with: anInternalNonPortObject) .
	
	self assert: 2 equals: aNonPortableObject quantityOfObjectsInside.
	self assert: (aNonPortableObject hasStageObject: aPortObject).! !

!methodRemoval: NonPortableObject class #named:withInsideObjects:andNonPortableObjects: stamp: 'LH 12/10/2020 21:26:18'!
named: aName withInsideObjects: insideObjects andNonPortableObjects: nonPortInsideObjects   

	^self new initializeNamed: aName withInsideObjects: insideObjects !
!NonPortableObject methodsFor: 'testing' stamp: 'LH 12/10/2020 21:26:51' prior: 50875821!
hasStageObject: aStageObject 
	|foundObject|
	foundObject := objects detect:[:fixedObject | fixedObject hasStageObject: aStageObject] ifNone:[self].
	^(objects includes: aStageObject) or: (self = foundObject) not.! !
!NonPortableObject methodsFor: 'queries' stamp: 'LH 12/10/2020 21:27:29' prior: 50875853!
quantityOfObjectsInside
	
	^ objects size + (objects sum:[:aFixedObject | aFixedObject quantityOfObjectsInside] ifEmpty:[0]).! !
!NonPortableObject methodsFor: 'testing' stamp: 'LH 12/10/2020 21:28:47' prior: 50876166!
hasStageObject: aStageObject 
	|foundObject|
	foundObject := objects detect:[:fixedObject | fixedObject hasStageObject: aStageObject] ifNone:[self].
	^(self = aStageObject) or: (self = foundObject) not.! !
!PortableObject methodsFor: 'testing' stamp: 'LH 12/10/2020 21:29:25'!
hasStageObject: aStageObject

	^ self = aStageObject.! !
!PortableObject methodsFor: 'queries' stamp: 'LH 12/10/2020 21:30:13'!
quantityOfObjectsInside

	^0.! !

!testRun: #NonPortableObjectTest #test01ANonPortableObjectCanNotBeAdded stamp: 'LH 12/10/2020 21:30:49'!
PASSED!

!testRun: #NonPortableObjectTest #test02ANonPortableObjectCanHaveNoObjectsInside stamp: 'LH 12/10/2020 21:30:49'!
PASSED!

!testRun: #NonPortableObjectTest #test03ANonPortableObjectCanHaveAPortableObject stamp: 'LH 12/10/2020 21:30:49'!
PASSED!

!testRun: #NonPortableObjectTest #test04ANonPortableObjectCanHaveManyPortableObjects stamp: 'LH 12/10/2020 21:30:49'!
PASSED!

!testRun: #NonPortableObjectTest #test05ANonPortableObjectCanNotHaveStageObjectsNotInitializedWith stamp: 'LH 12/10/2020 21:30:49'!
PASSED!

!testRun: #NonPortableObjectTest #test06ANonPortableObjectCanHaveANonPortableObject stamp: 'LH 12/10/2020 21:30:49'!
PASSED!

!testRun: #NonPortableObjectTest #test07ANonPortableObjectHasTheObjectsOfItsNonPortObject stamp: 'LH 12/10/2020 21:30:49'!
PASSED!
!StageObject methodsFor: 'adding' stamp: 'LH 12/10/2020 21:32:29'!
assertCanAddTo: aBackpack 
	"asserts if this StageObject can be added to a backpack"
	^self subclassResponsibility ! !

!methodRemoval: PortableObject #assertCanAddTo: stamp: 'LH 12/10/2020 21:32:42'!
assertCanAddTo: aBackpack

	self subclassResponsibility	!
!StageObject methodsFor: 'queries' stamp: 'LH 12/10/2020 21:34:01'!
quantityOfObjectsInside
	"awnsers the number of StageObjects stored into this object"
	self subclassResponsibility ! !
!StageObject methodsFor: 'testing' stamp: 'LH 12/10/2020 21:34:51'!
hasStageObject: aStageObject 
	"awnsers wether this object contains a StageObject"
	
	self subclassResponsibility.! !

----SNAPSHOT----(10 December 2020 21:35:08) CuisUniversity-4384.image priorSource: 17387215!

----SNAPSHOT----(10 December 2020 21:36:24) CuisUniversity-4384.image priorSource: 17427189!
!PlayableCharacterRoomInteractionTest methodsFor: 'tests for taking objects' stamp: 'LH 12/10/2020 21:45:21'!
test05TakingIntoAnEmptyCellDoesNothing
	|aCharacter roomStageObjects aPortableObject|
	
	aPortableObject := self aPortableObject.
	roomStageObjects := Dictionary new.
	roomStageObjects at: 1@0 put: aPortableObject.
	aCharacter := self aCharacterAt: 0@0 WithinTheRoom: (Room withWidth: 10 andHeight: 10 andObjects: Dictionary).
	
	aCharacter take.
	
	self deny: (aCharacter backpackIncludes: aPortableObject).
	! !

!testRun: #PlayableCharacterRoomInteractionTest #test05TakingIntoAnEmptyCellDoesNothing stamp: 'LH 12/10/2020 21:45:23'!
ERROR!
!PlayableCharacterRoomInteractionTest methodsFor: 'tests for taking objects' stamp: 'LH 12/10/2020 21:45:52' prior: 50876257!
test05TakingIntoAnEmptyCellDoesNothing
	|aCharacter roomStageObjects aPortableObject|
	
	aPortableObject := self aPortableObject.
	roomStageObjects := Dictionary new.
	roomStageObjects at: 1@0 put: aPortableObject.
	aCharacter := self aCharacterAt: 0@0 WithinTheRoom: (Room withWidth: 10 andHeight: 10 andObjects: roomStageObjects ).
	
	aCharacter take.
	
	self deny: (aCharacter backpackIncludes: aPortableObject).
	! !

!testRun: #PlayableCharacterRoomInteractionTest #test05TakingIntoAnEmptyCellDoesNothing stamp: 'LH 12/10/2020 21:45:53'!
ERROR!
!PlayableCharacter methodsFor: 'taking' stamp: 'LH 12/10/2020 21:46:09'!
take
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'taking' stamp: 'LH 12/10/2020 21:46:27' prior: 50876298!
take
	! !

!testRun: #PlayableCharacterRoomInteractionTest #test05TakingIntoAnEmptyCellDoesNothing stamp: 'LH 12/10/2020 21:46:30'!
PASSED!

!testRun: #PlayableCharacterRoomInteractionTest #test01ACharacterCanNotInitializeInACellOutsideTheRoom stamp: 'LH 12/10/2020 21:46:30'!
PASSED!

!testRun: #PlayableCharacterRoomInteractionTest #test02ACharacterCanNotInitializeInACellWithAnObject stamp: 'LH 12/10/2020 21:46:30'!
PASSED!

!testRun: #PlayableCharacterRoomInteractionTest #test03ACharacterCanNotMoveOutsideTheRoom stamp: 'LH 12/10/2020 21:46:30'!
PASSED!

!testRun: #PlayableCharacterRoomInteractionTest #test04ACharacterCanNotMoveIntoAnObject stamp: 'LH 12/10/2020 21:46:30'!
PASSED!

!testRun: #PlayableCharacterRoomInteractionTest #test05TakingIntoAnEmptyCellDoesNothing stamp: 'LH 12/10/2020 21:46:30'!
PASSED!
!PlayableCharacterRoomInteractionTest methodsFor: 'tests for taking objects' stamp: 'LH 12/10/2020 21:48:39'!
test06TakingInFrontOfAPortableObjectBagsItAndRemovesFromRoom
	|aCharacter roomStageObjects aPortableObject aRoom|
	
	aPortableObject := self aPortableObject.
	roomStageObjects := Dictionary new.
	roomStageObjects at: 1@0 put: aPortableObject.
	aCharacter := self aCharacterAt: 0@0 WithinTheRoom: (Room withWidth: 10 andHeight: 10 andObjects: roomStageObjects ).
	
	aCharacter rotateRight.
	aCharacter take.
	
	self assert: (aCharacter backpackIncludes: aPortableObject).
	! !
!PlayableCharacterRoomInteractionTest methodsFor: 'tests for taking objects' stamp: 'LH 12/10/2020 21:49:58' prior: 50876332!
test06TakingInFrontOfAPortableObjectBagsItAndRemovesFromRoom
	|aCharacter roomStageObjects aPortableObject aRoom|
	
	aPortableObject := self aPortableObject.
	roomStageObjects := Dictionary new.
	roomStageObjects at: 1@0 put: aPortableObject.
	aRoom := Room withWidth: 10 andHeight: 10 andObjects: roomStageObjects.
	aCharacter := self aCharacterAt: 0@0 WithinTheRoom: aRoom.
	
	aCharacter rotateRight.
	aCharacter take.
	
	self assert: (aCharacter backpackIncludes: aPortableObject).
	self deny: (aRoom thereIsAnObjectAt: 1@0)
	! !

!testRun: #PlayableCharacterRoomInteractionTest #test06TakingInFrontOfAPortableObjectBagsItAndRemovesFromRoom stamp: 'LH 12/10/2020 21:50:06'!
FAILURE!

!methodRemoval: PlayableCharacterRoomInteractionTest #test06TakingInFrontOfAPortableObjectBagsItAndRemovesFromRoom stamp: 'LH 12/10/2020 21:54:43'!
test06TakingInFrontOfAPortableObjectBagsItAndRemovesFromRoom
	|aCharacter roomStageObjects aPortableObject aRoom|
	
	aPortableObject := self aPortableObject.
	roomStageObjects := Dictionary new.
	roomStageObjects at: 1@0 put: aPortableObject.
	aRoom := Room withWidth: 10 andHeight: 10 andObjects: roomStageObjects.
	aCharacter := self aCharacterAt: 0@0 WithinTheRoom: aRoom.
	
	aCharacter rotateRight.
	aCharacter take.
	
	self assert: (aCharacter backpackIncludes: aPortableObject).
	self deny: (aRoom thereIsAnObjectAt: 1@0)
	!

----QUIT----(10 December 2020 21:54:56) CuisUniversity-4384.image priorSource: 17427283!