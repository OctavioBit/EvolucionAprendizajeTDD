----End fileIn of C:\Users\ebonansea\Downloads\ISW1-2020-2C-2doParcial.st----!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 16:56:26'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 16:56:26'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 16:56:26'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 16:56:26'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 16:56:26'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 16:56:26'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 16:56:26'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 16:56:26'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'eb 12/10/2020 16:56:26'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 16:56:26'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 16:56:29'!
PASSED!

Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'eb 12/10/2020 17:30:09'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: #'ISW1-2020-2C-2doParcial' stamp: 'eb 12/10/2020 17:30:18'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'nil' stamp: 'eb 12/10/2020 17:31:16'!
test01RoomHeightIsAtLeastOne
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:31:33'!
test02RoomWidthIsAtLeastOne
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:34:27' prior: 51036230!
test01RoomHeightIsAtLeastOne
	
	| room |
	
	self 
		should: [ room _ Room withWidht: 1 andHeight: 0. self fail]
		raise: Error - MessageNotUnderstood
		withMessageText: Room heightShouldBeAtLeastOneErrorDescription! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:34:38' prior: 51036238!
test01RoomHeightIsAtLeastOne
		
	self 
		should: [ Room withWidht: 1 andHeight: 0. self fail]
		raise: Error - MessageNotUnderstood
		withMessageText: Room heightShouldBeAtLeastOneErrorDescription! !

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 17:34:43'!
ERROR!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 17:34:43'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'eb 12/10/2020 17:34:52'!
heightShouldBeAtLeastOneErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'eb 12/10/2020 17:35:08' prior: 51036263!
heightShouldBeAtLeastOneErrorDescription
	
	^ 'Height should be at least one'.! !

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 17:35:11'!
ERROR!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 17:35:11'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'eb 12/10/2020 17:35:17'!
withWidht: aSmallInteger andHeight: aSmallInteger2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithWidht: aSmallInteger andHeight: aSmallInteger2 ! !
!Room class methodsFor: 'instance creation' stamp: 'eb 12/10/2020 17:35:36' prior: 51036280!
withWidht: aWidth andHeight: aHeight 
	
	^self new initializeWithWidht: aWidth andHeight: aHeight .! !

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 17:35:41'!
ERROR!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 17:35:41'!
ERROR!

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'eb 12/10/2020 17:35:54'!
Object subclass: #Room
	instanceVariableNames: 'width'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'eb 12/10/2020 17:35:54'!
Object subclass: #Room
	instanceVariableNames: 'width height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'eb 12/10/2020 17:35:54'!
initializeWithWidht: aWidth andHeight: aHeight 
	self shouldBeImplemented.
	width := aWidth.
	height := aHeight.! !
!Room methodsFor: 'initialization' stamp: 'eb 12/10/2020 17:36:00' prior: 51036316!
initializeWithWidht: aWidth andHeight: aHeight 
	
	width := aWidth.
	height := aHeight.! !
!Room methodsFor: 'initialization' stamp: 'eb 12/10/2020 17:36:18'!
initializeWithWidth: aWidth andHeight: aHeight 
	
	width := aWidth.
	height := aHeight.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:36:18' prior: 51036290!
withWidht: aWidth andHeight: aHeight 
	
	^self new initializeWithWidth: aWidth andHeight: aHeight .! !

!methodRemoval: Room #initializeWithWidht:andHeight: stamp: 'eb 12/10/2020 17:36:18'!
initializeWithWidht: aWidth andHeight: aHeight 
	
	width := aWidth.
	height := aHeight.!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 17:36:24'!
FAILURE!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 17:36:25'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'eb 12/10/2020 17:37:21' prior: 51036334!
withWidht: aWidth andHeight: aHeight 

	(aHeight < 1) ifTrue: [ self error: self heightShouldBeAtLeastOneErrorDescription. ].
	
	^self new initializeWithWidth: aWidth andHeight: aHeight .! !

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 17:37:27'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:37:48' prior: 51036234!
test02RoomWidthIsAtLeastOne
	
	self 
		should: [ Room withWidht: 0 andHeight: 1. self fail]
		raise: Error - MessageNotUnderstood
		withMessageText: Room widthShouldBeAtLeastOneErrorDescription! !

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 17:37:50'!
ERROR!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 17:37:50'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'eb 12/10/2020 17:37:59'!
widthShouldBeAtLeastOneErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'eb 12/10/2020 17:38:10' prior: 51036379!
widthShouldBeAtLeastOneErrorDescription
	
	^ 'Width should be at least one'.! !

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 17:38:17'!
FAILURE!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 17:38:17'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'eb 12/10/2020 17:38:37' prior: 51036352!
withWidht: aWidth andHeight: aHeight 

	(aHeight < 1) ifTrue: [ self error: self heightShouldBeAtLeastOneErrorDescription. ].
	(aWidth < 1) ifTrue: [ self error: self widthShouldBeAtLeastOneErrorDescription. ].
	
	^self new initializeWithWidth: aWidth andHeight: aHeight .! !

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 17:38:58'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:40:38'!
test03RoomCouldHaveObjectsOrPlayerInItsCells
	
	self 
		should: [ Room withWidht: 0 andHeight: 1. self fail]
		raise: Error - MessageNotUnderstood
		withMessageText: Room widthShouldBeAtLeastOneErrorDescription! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:42:53'!
test04ObjectsOrPlayerShouldBePutInAValidCell
	
	
		! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:44:08' prior: 51036411!
test03RoomCouldHaveObjectsOrPlayerInItsCells
		
	| room |
	
	room _ Room withWidht: 1 andHeight: 1 .
	
! !

Object subclass: #ISEngineTestsObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #ISEngineTestsObjectFactory category: #'ISW1-2020-2C-2doParcial' stamp: 'eb 12/10/2020 17:44:21'!
Object subclass: #ISEngineTestsObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!ISEngineTestsObjectFactory methodsFor: 'stage objects' stamp: 'eb 12/10/2020 17:45:00'!
defaultPortableObject

	^ PortableObject initializedInstance ! !
!ISEngineTestsObjectFactory methodsFor: 'stage objects' stamp: 'eb 12/10/2020 17:45:16' prior: 51036446!
defaultPortableObject

	^ PortableObject new .! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:45:36' prior: 51036426!
test03RoomCouldHaveObjectsOrPlayerInItsCells
		
	| room |
	
	room _ Room withWidht: 1 andHeight: 1 .
	
! !

!classDefinition: #RoomTest category: #'ISW1-2020-2C-2doParcial' stamp: 'eb 12/10/2020 17:45:56'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:45:54' overrides: 16927572!
setUp
	
	testObjectsFactory _ ISEngineTestsObjectFactory new .! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:47:26' prior: 51036457!
test03RoomCouldHaveObjectsOrPlayerInItsCells
		
	| room  portableObject |
	
	portableObject _ testObjectsFactory defaultPortableObject .
	room _ Room withWidht: 1 andHeight: 1 .
	room put: portableObject at: 0@0.
	
	self assert: room hasOccupiedCellAt: 0@0.
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:47:36' prior: 51036477!
test03RoomCouldHaveObjectsOrPlayerInItsCells
		
	| room  portableObject |
	
	portableObject _ testObjectsFactory defaultPortableObject .
	room _ Room withWidht: 1 andHeight: 1 .
	room put: portableObject at: 0@0.
	
	self assert: (room hasOccupiedCellAt: 0@0).
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:47:49'!
test03RoomCouldHaveStageObjectsOrPlayerInItsCells
		
	| room  portableObject |
	
	portableObject _ testObjectsFactory defaultPortableObject .
	room _ Room withWidht: 1 andHeight: 1 .
	room put: portableObject at: 0@0.
	
	self assert: (room hasOccupiedCellAt: 0@0).
	
! !

!methodRemoval: RoomTest #test03RoomCouldHaveObjectsOrPlayerInItsCells stamp: 'eb 12/10/2020 17:47:49'!
test03RoomCouldHaveObjectsOrPlayerInItsCells
		
	| room  portableObject |
	
	portableObject _ testObjectsFactory defaultPortableObject .
	room _ Room withWidht: 1 andHeight: 1 .
	room put: portableObject at: 0@0.
	
	self assert: (room hasOccupiedCellAt: 0@0).
	
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:47:57'!
test04StageObjectsOrPlayerShouldBePutInAValidCell
	
	
		! !

!methodRemoval: RoomTest #test04ObjectsOrPlayerShouldBePutInAValidCell stamp: 'eb 12/10/2020 17:47:57'!
test04ObjectsOrPlayerShouldBePutInAValidCell
	
	
		!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:48:20'!
test03RoomCouldHaveOccupiedCells
		
	| room  portableObject |
	
	portableObject _ testObjectsFactory defaultPortableObject .
	room _ Room withWidht: 1 andHeight: 1 .
	room put: portableObject at: 0@0.
	
	self assert: (room hasOccupiedCellAt: 0@0).
	
! !

!methodRemoval: RoomTest #test03RoomCouldHaveStageObjectsOrPlayerInItsCells stamp: 'eb 12/10/2020 17:48:20'!
test03RoomCouldHaveStageObjectsOrPlayerInItsCells
		
	| room  portableObject |
	
	portableObject _ testObjectsFactory defaultPortableObject .
	room _ Room withWidht: 1 andHeight: 1 .
	room put: portableObject at: 0@0.
	
	self assert: (room hasOccupiedCellAt: 0@0).
	
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:48:24' prior: 51036533!
test03RoomCouldHaveOccupiedCells
		
	| room portableObject |
	
	portableObject _ testObjectsFactory defaultPortableObject .
	room _ Room withWidht: 1 andHeight: 1 .
	room put: portableObject at: 0@0.
	
	self assert: (room hasOccupiedCellAt: 0@0).
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:49:09'!
test04WhenPuttingSomethingInRoomPositionShouldBeValid
	
	
		! !

!methodRemoval: RoomTest #test04StageObjectsOrPlayerShouldBePutInAValidCell stamp: 'eb 12/10/2020 17:49:09'!
test04StageObjectsOrPlayerShouldBePutInAValidCell
	
	
		!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 17:49:25'!
ERROR!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 17:49:25'!
ERROR!
!Room methodsFor: 'putting' stamp: 'eb 12/10/2020 17:49:43'!
put: aPortableObject at: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'eb 12/10/2020 17:51:11'!
Object subclass: #Room
	instanceVariableNames: 'width height cells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'putting' stamp: 'eb 12/10/2020 17:51:09' prior: 51036583!
put: anObject at: aCell
	
	cells add: aCell -> anObject .! !

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 17:51:18'!
ERROR!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 17:51:18'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'eb 12/10/2020 17:51:30' prior: 51036328!
initializeWithWidth: aWidth andHeight: aHeight 
	
	width := aWidth.
	height := aHeight.
	cells _ Dictionary new .! !

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 17:51:33'!
ERROR!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 17:51:33'!
ERROR!
!Room methodsFor: 'testing' stamp: 'eb 12/10/2020 17:51:43'!
hasOccupiedCellAt: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'eb 12/10/2020 17:52:04' prior: 51036619!
hasOccupiedCellAt: aCell
	
	^ cells keys includes: aCell .! !

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 17:52:07'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 17:52:07'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 17:52:07'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 17:52:07'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 17:52:07'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 17:52:10'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:54:05' prior: 51036567!
test04WhenPuttingSomethingInRoomPositionShouldBeValid
	
	| room portableObject |
	
	portableObject _ testObjectsFactory defaultPortableObject .
	room _ Room withWidht: 1 andHeight: 1 .
	
	self 
		should: [ room put: portableObject at: 1@0. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidCellErrorDescription.
	
	self deny: (room hasOccupiedCellAt: 1@0).
		! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:54:18' prior: 51036648!
test04WhenPuttingSomethingInRoomPositionShouldBeValid
	
	| room portableObject |
	
	portableObject _ testObjectsFactory defaultPortableObject .
	room _ Room withWidht: 1 andHeight: 1 .
	
	self 
		should: [ room put: portableObject at: 1@0. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidCellErrorDescription.
	
	self deny: (room hasOccupiedCellAt: 1@0).
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:54:57'!
m1: portableObject m2: room

	self 
		should: [ room put: portableObject at: 1@0. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidCellErrorDescription.
	
	self deny: (room hasOccupiedCellAt: 1@0)! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:54:57' prior: 51036663!
test04WhenPuttingSomethingInRoomPositionShouldBeValid
	
	| room portableObject |
	
	portableObject _ testObjectsFactory defaultPortableObject .
	room _ Room withWidht: 1 andHeight: 1 .
	
	self m1: portableObject m2: room.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:55:43'!
assertErrorWhenAdding: portableObject to: room at: aCell

	self 
		should: [ room put: portableObject at: 1@0. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidCellErrorDescription.
	
	self deny: (room hasOccupiedCellAt: 1@0)! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:55:48' prior: 51036698!
assertErrorWhenAdding: aPortableObject to: room at: aCell

	self 
		should: [ room put: aPortableObject at: 1@0. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidCellErrorDescription.
	
	self deny: (room hasOccupiedCellAt: 1@0)! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:55:52' prior: 51036709!
assertErrorWhenAdding: aPortableObject to: aRoom at: aCell

	self 
		should: [ aRoom put: aPortableObject at: 1@0. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidCellErrorDescription.
	
	self deny: (aRoom hasOccupiedCellAt: 1@0)! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 17:56:02' prior: 51036720!
assertErrorWhenAdding: aPortableObject to: aRoom at: aCell

	self 
		should: [ aRoom put: aPortableObject at: aCell. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidCellErrorDescription.
	
	self deny: (aRoom hasOccupiedCellAt: aCell)! !

!methodRemoval: RoomTest #m1:m2: stamp: 'eb 12/10/2020 17:56:13'!
m1: portableObject m2: room

	self 
		should: [ room put: portableObject at: 1@0. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidCellErrorDescription.
	
	self deny: (room hasOccupiedCellAt: 1@0)!
!RoomTest methodsFor: 'testing' stamp: 'eb 12/10/2020 17:57:05' prior: 51036688!
test04WhenPuttingSomethingInRoomPositionShouldBeValid
	
	| room portableObject |
	
	portableObject _ testObjectsFactory defaultPortableObject .
	room _ Room withWidht: 1 andHeight: 1 .
	
	self assertErrorWhenAdding: portableObject  to: room at: 1@0.
	self assertErrorWhenAdding: portableObject  to: room at: 0@1.
	! !

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 17:57:06'!
ERROR!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 17:57:06'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'eb 12/10/2020 17:57:18'!
invalidCellErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'eb 12/10/2020 17:57:27' prior: 51036771!
invalidCellErrorDescription
	
	^ 'Invalid cell'.! !
!RoomTest methodsFor: 'testing - private' stamp: 'eb 12/10/2020 17:57:41' prior: 51036731!
assertErrorWhenAdding: aPortableObject to: aRoom at: aCell

	self 
		should: [ aRoom put: aPortableObject at: aCell. self fail.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidCellErrorDescription.
	
	self deny: (aRoom hasOccupiedCellAt: aCell)! !

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 17:57:44'!
FAILURE!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 17:57:44'!
FAILURE!
!Room methodsFor: 'putting' stamp: 'eb 12/10/2020 17:59:05' prior: 51036596!
put: anObject at: aCell

	(aCell x >= width) ifTrue: [ self error: self class invalidCellErrorDescription. ].
	(aCell y >= height ) ifTrue: [ self error: self class invalidCellErrorDescription. ].
	
	cells add: aCell -> anObject .! !

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 17:59:12'!
PASSED!
!RoomTest methodsFor: 'testing' stamp: 'eb 12/10/2020 18:00:02'!
test05WhenPuttingSomethingInRoomPositionShouldBeEmpty
	
	| room portableObject |
	
	portableObject _ testObjectsFactory defaultPortableObject .
	room _ Room withWidht: 1 andHeight: 1 .
	
	self assertErrorWhenAdding: portableObject  to: room at: 1@0.
	self assertErrorWhenAdding: portableObject  to: room at: 0@1.
	! !
!RoomTest methodsFor: 'testing' stamp: 'eb 12/10/2020 18:01:18' prior: 51036813!
test05WhenPuttingSomethingInRoomPositionShouldBeEmpty
	
	| room portableObject |
	
	portableObject _ testObjectsFactory defaultPortableObject .
	room _ Room withWidht: 1 andHeight: 1 .
	room put: portableObject at: 0@0.
	
	self
		should: [ room put: portableObject at: 0@0. self fail. ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room cellIsOccupiedErrorDescription.

	! !

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 18:01:23'!
ERROR!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 18:01:23'!
ERROR!
!Room class methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:01:30'!
cellIsOccupiedErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:01:39' prior: 51036848!
cellIsOccupiedErrorDescription
	
	^ 'Cell is occupied'.! !

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 18:01:49'!
FAILURE!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 18:01:49'!
FAILURE!
!Room methodsFor: 'putting' stamp: 'eb 12/10/2020 18:02:31' prior: 51036800!
put: anObject at: aCell

	(aCell x >= width) ifTrue: [ self error: self class invalidCellErrorDescription. ].
	(aCell y >= height ) ifTrue: [ self error: self class invalidCellErrorDescription. ].
	(cells hasOccupiedCellAt: aCell) ifTrue: [ self error: self class cellIsOccupiedErrorDescription ].
	
	cells add: aCell -> anObject .! !
!Room methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:02:42' prior: 51036865!
put: anObject at: aCell

	(aCell x >= width) ifTrue: [ self error: self class invalidCellErrorDescription. ].
	(aCell y >= height ) ifTrue: [ self error: self class invalidCellErrorDescription. ].
	(cells hasOccupiedCell: aCell) ifTrue: [ self error: self class cellIsOccupiedErrorDescription ].
	
	cells add: aCell -> anObject .! !
!Room methodsFor: 'putting' stamp: 'eb 12/10/2020 18:02:55' prior: 51036879!
put: anObject at: aCell

	(aCell x >= width) ifTrue: [ self error: self class invalidCellErrorDescription. ].
	(aCell y >= height ) ifTrue: [ self error: self class invalidCellErrorDescription. ].
	(self hasOccupiedCell: aCell) ifTrue: [ self error: self class cellIsOccupiedErrorDescription ].
	
	cells add: aCell -> anObject .! !
!Room methodsFor: 'testing' stamp: 'eb 12/10/2020 18:03:10'!
hasOccupiedCell: aCell
	
	^ cells keys includes: aCell .! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:03:10' prior: 51036556!
test03RoomCouldHaveOccupiedCells
		
	| room portableObject |
	
	portableObject _ testObjectsFactory defaultPortableObject .
	room _ Room withWidht: 1 andHeight: 1 .
	room put: portableObject at: 0@0.
	
	self assert: (room hasOccupiedCell: 0@0).
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:03:10' prior: 51036781!
assertErrorWhenAdding: aPortableObject to: aRoom at: aCell

	self 
		should: [ aRoom put: aPortableObject at: aCell. self fail.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidCellErrorDescription.
	
	self deny: (aRoom hasOccupiedCell: aCell)! !

!methodRemoval: Room #hasOccupiedCellAt: stamp: 'eb 12/10/2020 18:03:10'!
hasOccupiedCellAt: aCell
	
	^ cells keys includes: aCell .!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 18:03:22'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 18:03:24'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 18:03:24'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 18:03:24'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 18:03:24'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 18:03:24'!
PASSED!

----SNAPSHOT----(10 December 2020 18:06:07) CuisUniversity-4365.image priorSource: 22513696!
!ISEngineTestsObjectFactory methodsFor: 'playable object' stamp: 'eb 12/10/2020 18:07:54'!
defaultPlayableCharacter
	
	^ PlayableCharacter 
		named: 'Alan Kay' 
		using: self defaultPlayableCharacterBackpack  
		at:  self defaultPlayableCharacterPosition
		heading: self defaultPlayableCharacterHeading! !
!ISEngineTestsObjectFactory methodsFor: 'playable object' stamp: 'eb 12/10/2020 18:08:43'!
defaultPlayableCharacterPosition
	
	^ #North .! !
!ISEngineTestsObjectFactory methodsFor: 'playable object' stamp: 'eb 12/10/2020 18:09:00'!
defaultPlayableCharacterHeading
	
	^ #North .! !
!ISEngineTestsObjectFactory methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:09:00' prior: 51036960!
defaultPlayableCharacter
	
	^ PlayableCharacter 
		named: 'Alan Kay' 
		using: self defaultPlayableCharacterBackpack  
		at:  self defaultPlayableCharacterHeading
		heading: self defaultPlayableCharacterHeading! !

!methodRemoval: ISEngineTestsObjectFactory #defaultPlayableCharacterPosition stamp: 'eb 12/10/2020 18:09:00'!
defaultPlayableCharacterPosition
	
	^ #North .!
!ISEngineTestsObjectFactory methodsFor: 'playable object' stamp: 'eb 12/10/2020 18:09:10'!
defaultPlayableCharacterPosition
	
	^ 0@0 .! !
!ISEngineTestsObjectFactory methodsFor: 'playable object' stamp: 'eb 12/10/2020 18:09:49'!
defaultPlayableCharacterBackpack
	
	^ Backpack containingUpTo: 100 limitingPointsTo: 100.! !

StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'eb 12/10/2020 18:14:07'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

TestCase subclass: #NonPortableObjectTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObjectTest category: #'ISW1-2020-2C-2doParcial' stamp: 'eb 12/10/2020 18:14:20'!
TestCase subclass: #NonPortableObjectTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObjectTest methodsFor: 'no messages' stamp: 'eb 12/10/2020 18:17:25'!
test01NonPortableObjectCouldBeEmpty! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:17:58'!
test01NonPortableObjectCouldHaveOneStageObject! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:18:05'!
test01NonPortableObjectCouldHaveManyStageObjects! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:18:14'!
test02NonPortableObjectCouldHaveOneStageObject! !

!methodRemoval: NonPortableObjectTest #test01NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 18:18:14'!
test01NonPortableObjectCouldHaveOneStageObject!
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:18:20'!
test03NonPortableObjectCouldHaveManyStageObjects! !

!methodRemoval: NonPortableObjectTest #test01NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 18:18:20'!
test01NonPortableObjectCouldHaveManyStageObjects!
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:19:22'!
test03NonPortableObjectCouldHaveNestedContent! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:19:30'!
test04NonPortableObjectCouldHaveNestedContent! !

!methodRemoval: NonPortableObjectTest #test03NonPortableObjectCouldHaveNestedContent stamp: 'eb 12/10/2020 18:19:30'!
test03NonPortableObjectCouldHaveNestedContent!
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:19:48'!
test04NonPortableObjectCouldHaveNestedStageObjects! !

!methodRemoval: NonPortableObjectTest #test04NonPortableObjectCouldHaveNestedContent stamp: 'eb 12/10/2020 18:19:48'!
test04NonPortableObjectCouldHaveNestedContent!
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:20:56'!
test04NonPortableObjectContentIsItsOwnContentPlusItsChildrenContent! !

!methodRemoval: NonPortableObjectTest #test04NonPortableObjectCouldHaveNestedStageObjects stamp: 'eb 12/10/2020 18:20:59'!
test04NonPortableObjectCouldHaveNestedStageObjects!
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:21:35' prior: 51037034!
test01NonPortableObjectCouldBeEmpty

	self assert: NonPortableObject new isEmpty.! !

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 18:21:39'!
ERROR!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 18:21:39'!
ERROR!
!NonPortableObject methodsFor: 'testing' stamp: 'eb 12/10/2020 18:21:51'!
isEmpty
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'testing' stamp: 'eb 12/10/2020 18:21:58' prior: 51037118!
isEmpty
	
	^ true .! !

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 18:22:01'!
PASSED!
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:23:30' prior: 51037049!
test02NonPortableObjectCouldHaveOneStageObject

	| portableObject nonPortableObject |
	
	portableObject _ PortableObject new.
	nonPortableObject _ NonPortableObject with: portableObject.
	
	self deny: nonPortableObject isEmpty .
	self assert: (nonPortableObject contains: portableObject)! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:23:34' prior: 51037130!
test02NonPortableObjectCouldHaveOneStageObject

	| portableObject nonPortableObject |
	
	portableObject _ PortableObject new.
	nonPortableObject _ NonPortableObject with: portableObject.
	
	self deny: nonPortableObject isEmpty .
	self assert: (nonPortableObject contains: portableObject).! !

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 18:23:36'!
ERROR!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 18:23:36'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'eb 12/10/2020 18:23:47'!
with: aPortableObject 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aPortableObject ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'eb 12/10/2020 18:24:01' prior: 51037163!
with: aPortableObject 
.
	^self new initializeWith: aPortableObject ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'eb 12/10/2020 18:24:02' prior: 51037172!
with: aPortableObject 

	^self new initializeWith: aPortableObject ! !

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 18:24:05'!
ERROR!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 18:24:05'!
ERROR!

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'eb 12/10/2020 18:24:16'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight portableObject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'eb 12/10/2020 18:24:16'!
initializeWith: aPortableObject 
	self shouldBeImplemented.
	portableObject := aPortableObject.! !
!NonPortableObject methodsFor: 'initialization' stamp: 'eb 12/10/2020 18:24:20' prior: 51037200!
initializeWith: aPortableObject 
	
	portableObject := aPortableObject.! !

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 18:24:22'!
FAILURE!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 18:24:22'!
FAILURE!
!NonPortableObject methodsFor: 'testing' stamp: 'eb 12/10/2020 18:24:42' prior: 51037122!
isEmpty
	
	^ portableObject isNil.! !
!NonPortableObject methodsFor: 'testing' stamp: 'eb 12/10/2020 18:24:53'!
contains: aPortableObject
	
	^ portableObject = aPortableObject.! !

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 18:25:04'!
PASSED!
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:25:48' prior: 51037143!
test02NonPortableObjectCouldHaveOneStageObject

	| portableObject nonPortableObject |
	
	portableObject _ PointsPortableObject new.
	nonPortableObject _ NonPortableObject with: portableObject.
	
	self deny: nonPortableObject isEmpty .
	self assert: (nonPortableObject contains: portableObject).! !

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 18:25:49'!
PASSED!
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:26:10' prior: 51037234!
test02NonPortableObjectCouldHaveOneStageObject

	| pointsPortableObject nonPortableObject |
	
	pointsPortableObject _ PointsPortableObject new.
	nonPortableObject _ NonPortableObject with: pointsPortableObject.
	
	self deny: nonPortableObject isEmpty .
	self assert: (nonPortableObject contains: pointsPortableObject).! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:27:35' prior: 51037059!
test03NonPortableObjectCouldHaveManyStageObjects

	| pointsPortableObject noPointsPortableObject nonPortableObject |
	
	pointsPortableObject _ PointsPortableObject new.
	noPointsPortableObject _ NoPointsPortableObject new.
	nonPortableObject _ NonPortableObject with: (Bag with: pointsPortableObject with: noPointsPortableObject).
	
	self deny: nonPortableObject isEmpty .
	self assert: (nonPortableObject contains: pointsPortableObject).! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:27:47' prior: 51037265!
test03NonPortableObjectCouldHaveManyStageObjects

	| pointsPortableObject noPointsPortableObject nonPortableObject |
	
	pointsPortableObject _ PointsPortableObject new.
	noPointsPortableObject _ NoPointsPortableObject new.
	nonPortableObject _ NonPortableObject with: (Bag with: pointsPortableObject with: noPointsPortableObject).
	
	self deny: nonPortableObject isEmpty .
	self assert: (nonPortableObject contains: pointsPortableObject).
	self assert: (nonPortableObject contains: noPointsPortableObject).! !

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 18:27:48'!
FAILURE!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 18:27:48'!
FAILURE!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'eb 12/10/2020 18:28:09' prior: 51037178!
with: aStageObjectCollection 

	^self new initializeWith: aStageObjectCollection ! !
!NonPortableObject methodsFor: 'initialization' stamp: 'eb 12/10/2020 18:28:20' prior: 51037207!
initializeWith: aStageObjectCollection 
	
	portableObject := aStageObjectCollection.! !

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'eb 12/10/2020 18:28:24'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:28:24' prior: 51037224!
contains: aPortableObject
	
	^ stageObjects = aPortableObject.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:28:24' prior: 51037220!
isEmpty
	
	^ stageObjects isNil.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:28:24' prior: 51037317!
initializeWith: aStageObjectCollection 
	
	stageObjects := aStageObjectCollection.! !
!NonPortableObject methodsFor: 'testing' stamp: 'eb 12/10/2020 18:28:33' prior: 51037338!
isEmpty
	
	^ stageObjects isEmpty .! !
!NonPortableObject methodsFor: 'testing' stamp: 'eb 12/10/2020 18:28:51' prior: 51037332!
contains: aPortableObject
	
	^ stageObjects includes: aPortableObject.! !
!NonPortableObject methodsFor: 'testing' stamp: 'eb 12/10/2020 18:28:55' prior: 51037354!
contains: aStageObject
	
	^ stageObjects includes: aStageObject.! !

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 18:29:00'!
ERROR!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 18:29:00'!
ERROR!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 18:29:00'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectContentIsItsOwnContentPlusItsChildrenContent stamp: 'eb 12/10/2020 18:29:01'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 18:29:05'!
ERROR!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 18:29:05'!
ERROR!
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:29:51' prior: 51037106!
test01NonPortableObjectCouldBeEmpty

	self assert: (NonPortableObject with: (Bag new) isEmpty).! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:30:04' prior: 51037251!
test02NonPortableObjectCouldHaveOneStageObject

	| pointsPortableObject nonPortableObject |
	
	pointsPortableObject _ PointsPortableObject new.
	nonPortableObject _ NonPortableObject with: (Bag with: pointsPortableObject).
	
	self deny: nonPortableObject isEmpty .
	self assert: (nonPortableObject contains: pointsPortableObject).! !

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 18:30:07'!
ERROR!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 18:30:07'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 18:30:07'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectContentIsItsOwnContentPlusItsChildrenContent stamp: 'eb 12/10/2020 18:30:07'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 18:30:07'!
ERROR!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 18:30:12'!
ERROR!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 18:30:12'!
ERROR!
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:30:24' prior: 51037389!
test01NonPortableObjectCouldBeEmpty

	self assert: (NonPortableObject with: (Bag new)) isEmpty.! !

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 18:30:25'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 18:30:26'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 18:30:28'!
PASSED!
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:32:33' prior: 51037094!
test04NonPortableObjectContentIsItsOwnContentPlusItsChildrenContent

	| pointsPortableObject noPointsPortableObject parentNonPortableObject childNonPortableObject |
	
	pointsPortableObject _ PointsPortableObject new.
	noPointsPortableObject _ NoPointsPortableObject new.
	childNonPortableObject _ NonPortableObject with: (Bag with: pointsPortableObject with: noPointsPortableObject).
	parentNonPortableObject _ NonPortableObject with: (Bag with: childNonPortableObject).
	
	self assert: (Bag with: pointsPortableObject with: noPointsPortableObject)! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:32:47' prior: 51037454!
test04NonPortableObjectContentIsItsOwnContentPlusItsChildrenContent

	| pointsPortableObject noPointsPortableObject parentNonPortableObject childNonPortableObject |
	
	pointsPortableObject _ PointsPortableObject new.
	noPointsPortableObject _ NoPointsPortableObject new.
	childNonPortableObject _ NonPortableObject with: (Bag with: pointsPortableObject with: noPointsPortableObject).
	parentNonPortableObject _ NonPortableObject with: (Bag with: childNonPortableObject).
	
	self assert: (Bag with: pointsPortableObject with: noPointsPortableObject) equals: (parentNonPortableObject portableObjects)! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:33:04' prior: 51037475!
test04NonPortableObjectContentIsItsOwnContentPlusItsChildrenContent

	| pointsPortableObject noPointsPortableObject parentNonPortableObject childNonPortableObject |
	
	pointsPortableObject _ PointsPortableObject new.
	noPointsPortableObject _ NoPointsPortableObject new.
	childNonPortableObject _ NonPortableObject with: (Bag with: pointsPortableObject with: noPointsPortableObject).
	parentNonPortableObject _ NonPortableObject with: (Bag with: childNonPortableObject).
	
	self assert: (Bag with: pointsPortableObject with: noPointsPortableObject) equals: (parentNonPortableObject portableObjects)! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:33:37'!
test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren

	| pointsPortableObject noPointsPortableObject parentNonPortableObject childNonPortableObject |
	
	pointsPortableObject _ PointsPortableObject new.
	noPointsPortableObject _ NoPointsPortableObject new.
	childNonPortableObject _ NonPortableObject with: (Bag with: pointsPortableObject with: noPointsPortableObject).
	parentNonPortableObject _ NonPortableObject with: (Bag with: childNonPortableObject).
	
	self assert: (Bag with: pointsPortableObject with: noPointsPortableObject) equals: (parentNonPortableObject portableObjects)! !

!methodRemoval: NonPortableObjectTest #test04NonPortableObjectContentIsItsOwnContentPlusItsChildrenContent stamp: 'eb 12/10/2020 18:33:37'!
test04NonPortableObjectContentIsItsOwnContentPlusItsChildrenContent

	| pointsPortableObject noPointsPortableObject parentNonPortableObject childNonPortableObject |
	
	pointsPortableObject _ PointsPortableObject new.
	noPointsPortableObject _ NoPointsPortableObject new.
	childNonPortableObject _ NonPortableObject with: (Bag with: pointsPortableObject with: noPointsPortableObject).
	parentNonPortableObject _ NonPortableObject with: (Bag with: childNonPortableObject).
	
	self assert: (Bag with: pointsPortableObject with: noPointsPortableObject) equals: (parentNonPortableObject portableObjects)!
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:33:57' prior: 51037520!
test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren

	| pointsPortableObject 
	noPointsPortableObject parentNonPortableObject childNonPortableObject |
	
	pointsPortableObject _ PointsPortableObject new.
	noPointsPortableObject _ NoPointsPortableObject new.
	childNonPortableObject _ NonPortableObject with: (Bag with: pointsPortableObject with: noPointsPortableObject).
	parentNonPortableObject _ NonPortableObject with: (Bag with: childNonPortableObject).
	
	self assert: (Bag with: pointsPortableObject with: noPointsPortableObject) equals: (parentNonPortableObject portableObjects)! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:34:08' prior: 51037566!
test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren

	| childPointsPortableObject 
	noPointsPortableObject parentNonPortableObject childNonPortableObject |
	
	childPointsPortableObject _ PointsPortableObject new.
	noPointsPortableObject _ NoPointsPortableObject new.
	childNonPortableObject _ NonPortableObject with: (Bag with: childPointsPortableObject with: noPointsPortableObject).
	parentNonPortableObject _ NonPortableObject with: (Bag with: childNonPortableObject).
	
	self assert: (Bag with: childPointsPortableObject with: noPointsPortableObject) equals: (parentNonPortableObject portableObjects)! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:34:58' prior: 51037589!
test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren

	| childPointsPortableObject parentPointsPortableObject noPointsPortableObject parentNonPortableObject childNonPortableObject |
	
	childPointsPortableObject _ PointsPortableObject new.
	noPointsPortableObject _ NoPointsPortableObject new.
	childNonPortableObject _ NonPortableObject with: (Bag with: childPointsPortableObject with: noPointsPortableObject).
	parentNonPortableObject _ NonPortableObject with: (Bag with: childNonPortableObject with: parentPointsPortableObject).
	
	self 
		assert: (Bag with: childPointsPortableObject with: noPointsPortableObject with: parentPointsPortableObject) 
		equals: (parentNonPortableObject portableObjects)! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:35:15' prior: 51037612!
test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren

	| childPointsPortableObject parentPointsPortableObject noPointsPortableObject parentNonPortableObject childNonPortableObject |
	
	childPointsPortableObject _ PointsPortableObject new.
	parentPointsPortableObject _ PointsPortableObject new.
	noPointsPortableObject _ NoPointsPortableObject new.
	childNonPortableObject _ NonPortableObject with: (Bag with: childPointsPortableObject with: noPointsPortableObject).
	parentNonPortableObject _ NonPortableObject with: (Bag with: childNonPortableObject with: parentPointsPortableObject).
	
	self 
		assert: (Bag with: childPointsPortableObject with: noPointsPortableObject with: parentPointsPortableObject) 
		equals: (parentNonPortableObject portableObjects)! !

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 18:35:18'!
ERROR!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 18:35:18'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:35:37'!
portableObjects
	self shouldBeImplemented.! !

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 18:35:39'!
ERROR!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 18:35:39'!
ERROR!
!StageObject methodsFor: 'error handling' stamp: 'eb 12/10/2020 18:35:42' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !

!methodRemoval: StageObject #error: stamp: 'eb 12/10/2020 18:35:55'!
error: aString 
	self shouldBeImplemented.!
!StageObject methodsFor: 'no messages' stamp: 'eb 12/10/2020 18:36:09'!
portableObjects
	
	self shouldBeImplemented .! !
!StageObject methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:36:14' prior: 51037696!
portableObjects
	
	self subclassResponsibility .! !
!PortableObject methodsFor: 'nil' stamp: 'eb 12/10/2020 18:36:35' overrides: 51037701!
portableObjects
	
	^ self .! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:37:15' prior: 51037674 overrides: 51037701!
portableObjects
	
	^ nil ! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:39:06' prior: 51037711 overrides: 51037701!
portableObjects
	
	| portableObjects |
	
	portableObjects _ Bag new.
	
	^ portableObjects. 
	
	! !

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 18:39:13'!
FAILURE!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 18:39:13'!
FAILURE!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:39:58' prior: 51037716 overrides: 51037701!
portableObjects
	
	| portableObjects |
	
	portableObjects _ Bag new.
	stageObjects do: [ :stageObject | portableObjects add: stageObject portableObjects ]
	
	^ portableObjects. 
	
	! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:40:10' prior: 51037732 overrides: 51037701!
portableObjects
	
	| portableObjects |
	
	portableObjects _ Bag new.
	stageObjects do: [ :stageObject | portableObjects add: stageObject portableObjects ].
	
	^ portableObjects. 
	
	! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:40:42' prior: 51037742 overrides: 51037701!
portableObjects
	
	| portableObjects |
	
	portableObjects _ Bag new.
	stageObjects do: [ :stageObject | portableObjects addAll: stageObject portableObjects ].
	
	^ portableObjects. 
	
	! !
!PortableObject methodsFor: 'portable objects' stamp: 'eb 12/10/2020 18:40:54' prior: 51037706 overrides: 51037701!
portableObjects
	
	^ Bag with: self .! !

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 18:41:01'!
PASSED!

----SNAPSHOT----(10 December 2020 18:41:15) CuisUniversity-4365.image priorSource: 22569769!

!classDefinition: #PlayableCharacterTest category: #'ISW1-2020-2C-2doParcial' stamp: 'eb 12/10/2020 18:44:56'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'eb 12/10/2020 18:44:54' overrides: 16927572!
setUp
	
	testObjectsFactory _ ISEngineTestsObjectFactory new .! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'eb 12/10/2020 18:45:22' prior: 51035567!
defaultBackpack

	^ testObjectsFactory defaultPlayableCharacterBackpack .! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 18:45:30'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 18:45:30'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 18:45:30'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 18:45:30'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 18:45:30'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 18:45:30'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 18:45:30'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 18:45:30'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'eb 12/10/2020 18:45:30'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 18:45:30'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - creation' stamp: 'eb 12/10/2020 18:49:37'!
test09_canNotCreatePlayableCharacterOnInvalidRoomCell
! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 18:49:44'!
test10_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !

!methodRemoval: PlayableCharacterTest #test09_canTakePortableObjects stamp: 'eb 12/10/2020 18:49:44'!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 18:49:48'!
test11_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!methodRemoval: PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 18:49:48'!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 18:49:59'!
test12_canNotTakeNonPortableObjects! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 18:50:44'!
test10_canTakePortableObjectsInFrontOfPlayer

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).
	
	self assert: false .! !

!methodRemoval: PlayableCharacterTest #test10_canTakePortableObjects stamp: 'eb 12/10/2020 18:50:46'!
test10_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 18:51:06'!
test12_canNotTakePortableObjectsThatAreNotInFrontOfPlayer! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 18:51:12'!
test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer! !

!methodRemoval: PlayableCharacterTest #test12_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 18:51:12'!
test12_canNotTakePortableObjectsThatAreNotInFrontOfPlayer!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 18:52:06'!
test14_whenTakingAPortableObjectItIsIntoPlayersBackpackAndIsNotInRoomAnymore! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 18:53:18'!
test14_whenPlayerTakesAPortableObjectItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore! !

!methodRemoval: PlayableCharacterTest #test14_whenTakingAPortableObjectItIsIntoPlayersBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 18:53:21'!
test14_whenTakingAPortableObjectItIsIntoPlayersBackpackAndIsNotInRoomAnymore!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 18:55:07'!
test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 18:55:47'!
test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore! !

!methodRemoval: PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 18:55:47'!
test14_whenPlayerTakesAPortableObjectItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 18:56:09'!
test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 18:57:03'!
FAILURE!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjects stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 18:57:03'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 18:57:03'!
FAILURE!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'eb 12/10/2020 18:58:15'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint on: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:58:15' prior: 51037864!
test11_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West on: testsObjectFactory defaultRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:58:15' prior: 51035488!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South on: testsObjectFactory defaultRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:58:15' prior: 51035440!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North on: testsObjectFactory defaultRoom .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:58:15' prior: 51035428!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North on: testsObjectFactory defaultRoom .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:58:15' prior: 51035452!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North on: testsObjectFactory defaultRoom .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:58:15' prior: 51035474!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East on: testsObjectFactory defaultRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:58:15' prior: 51035463!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North on: testsObjectFactory defaultRoom .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:58:15' prior: 51035502!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West on: testsObjectFactory defaultRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!ISEngineTestsObjectFactory methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:58:15' prior: 51036980!
defaultPlayableCharacter
	
	^ PlayableCharacter 
		named: 'Alan Kay' 
		using: self defaultPlayableCharacterBackpack  
		at:  self defaultPlayableCharacterHeading
		heading: self defaultPlayableCharacterHeading on: testsObjectFactory defaultRoom! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:58:15' prior: 51035516!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X on: testsObjectFactory defaultRoom ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:58:15' prior: 51037918!
test10_canTakePortableObjectsInFrontOfPlayer

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West on: testsObjectFactory defaultRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).
	
	self assert: false .! !

!methodRemoval: PlayableCharacter class #named:using:at:heading: stamp: 'eb 12/10/2020 18:58:15'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading !
!ISEngineTestsObjectFactory methodsFor: 'playable object' stamp: 'eb 12/10/2020 18:58:28' prior: 51038305!
defaultPlayableCharacter
	
	^ PlayableCharacter 
		named: 'Alan Kay' 
		using: self defaultPlayableCharacterBackpack  
		at:  self defaultPlayableCharacterHeading
		heading: self defaultPlayableCharacterHeading on: self defaultRoom.! !

!classDefinition: #PlayableCharacterTest category: #'ISW1-2020-2C-2doParcial' stamp: 'eb 12/10/2020 18:58:55'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: 'testsObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:58:55' prior: 51037783 overrides: 16927572!
setUp
	
	testsObjectsFactory _ ISEngineTestsObjectFactory new .! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 18:58:55' prior: 51037788!
defaultBackpack

	^ testsObjectsFactory defaultPlayableCharacterBackpack .! !
!PlayableCharacterTest methodsFor: 'tests - heading north' stamp: 'eb 12/10/2020 18:59:41' prior: 51038233!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North on: testsObjectsFactory defaultRoom .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests - heading north' stamp: 'eb 12/10/2020 18:59:46' prior: 51038219!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North on: testsObjectsFactory defaultRoom .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests - heading north' stamp: 'eb 12/10/2020 18:59:50' prior: 51038247!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North on: testsObjectsFactory defaultRoom .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests - heading north' stamp: 'eb 12/10/2020 18:59:52' prior: 51038276!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North on: testsObjectsFactory defaultRoom .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'tests - moving' stamp: 'eb 12/10/2020 18:59:56' prior: 51038260!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East on: testsObjectsFactory defaultRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests - moving' stamp: 'eb 12/10/2020 18:59:59' prior: 51038203!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South on: testsObjectsFactory defaultRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests - moving' stamp: 'eb 12/10/2020 19:00:01' prior: 51038289!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West on: testsObjectsFactory defaultRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'tests - creation' stamp: 'eb 12/10/2020 19:00:04' prior: 51038317!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X on: testsObjectsFactory defaultRoom ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:00:09' prior: 51038332!
test10_canTakePortableObjectsInFrontOfPlayer

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West on: testsObjectsFactory defaultRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).
	
	self assert: false .! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:00:11' prior: 51038177!
test11_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West on: testsObjectsFactory defaultRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:00:24' prior: 51038509!
test10_canTakePortableObjectsInFrontOfPlayer

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West on: testsObjectsFactory defaultRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 19:00:25'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 19:00:25'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 19:00:25'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 19:00:25'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 19:00:25'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 19:00:25'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 19:00:25'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 19:00:25'!
FAILURE!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 19:00:25'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 19:00:25'!
ERROR!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 19:00:25'!
ERROR!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjects stamp: 'eb 12/10/2020 19:00:25'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:00:25'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:00:25'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 19:00:25'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 19:00:25'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 19:00:30'!
ERROR!
!ISEngineTestsObjectFactory methodsFor: 'playable object' stamp: 'eb 12/10/2020 19:00:59'!
defaultRoom
	
	^ Room withWidht: 10 andHeight: 10.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 19:01:24'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 19:01:24'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 19:01:24'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 19:01:24'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 19:01:24'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 19:01:24'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 19:01:24'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 19:01:24'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 19:01:24'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 19:01:24'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 19:01:24'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjects stamp: 'eb 12/10/2020 19:01:24'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:01:24'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:01:24'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 19:01:24'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 19:01:24'!
PASSED!

----SNAPSHOT----(10 December 2020 19:01:28) CuisUniversity-4365.image priorSource: 22595832!
!ISEngineTestsObjectFactory methodsFor: 'playable object' stamp: 'eb 12/10/2020 19:10:42' prior: 51038637!
defaultRoom
	
	| room |
	
	room _ Room withWidht: 5 andHeight: 5.
	
	^ room.! !
!PlayableCharacterTest methodsFor: 'tests - moving to occupied cell' stamp: 'eb 12/10/2020 19:12:06'!
test17_playerCanNotMoveToOccupiedCell! !
!ISEngineTestsObjectFactory methodsFor: 'playable object' stamp: 'eb 12/10/2020 19:15:26' prior: 51038713!
defaultRoom
	
	| room |
	
	room _ Room withWidht: 5 andHeight: 5.
	room put: self defaultNonPortableObject at: 4@4.
	room put: self defaultPortableObject at: 4@4.
	
	^ room.! !
!ISEngineTestsObjectFactory methodsFor: 'stage objects' stamp: 'eb 12/10/2020 19:15:47'!
defaultNonPortableObject

	^ NonPortableObject with: (Bag with: self defaultPortableObject ) .! !

----SNAPSHOT----(10 December 2020 19:19:46) CuisUniversity-4365.image priorSource: 22625848!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 19:19:55'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 19:19:55'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 19:19:55'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 19:19:55'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 19:19:55'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 19:19:55'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 19:19:55'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 19:19:55'!
FAILURE!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 19:19:55'!
ERROR!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 19:19:55'!
ERROR!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjects stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 19:19:55'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 19:19:55'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:22:37' prior: 51037987!
test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 19:22:39'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 19:22:39'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 19:22:39'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 19:22:39'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 19:22:39'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 19:22:39'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 19:22:39'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 19:22:39'!
FAILURE!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 19:22:39'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 19:22:39'!
ERROR!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 19:22:39'!
ERROR!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjects stamp: 'eb 12/10/2020 19:22:39'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:22:39'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:22:39'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 19:22:39'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 19:22:39'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 19:22:39'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 19:22:41'!
ERROR!
!ISEngineTestsObjectFactory methodsFor: 'playable object' stamp: 'eb 12/10/2020 19:23:49' prior: 51038724!
defaultRoom
	
	| room |
	
	room _ Room withWidht: 5 andHeight: 5.
	room put: self defaultNonPortableObject at: 4@4.
	room put: self defaultPortableObject at: 4@0.
	
	^ room.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjects stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 19:23:52'!
PASSED!

----SNAPSHOT----(10 December 2020 19:23:57) CuisUniversity-4365.image priorSource: 22626817!
!PlayableCharacterTest methodsFor: 'tests - creation' stamp: 'eb 12/10/2020 19:26:11' prior: 51037832!
test09_canNotCreatePlayableCharacterOnInvalidRoomCell

	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 6@6 heading: #North on: testsObjectsFactory defaultRoom ]
		raise: Error
		withMessageText: PlayableCharacter invalidCardinalPointErrorDescription.! !
!PlayableCharacterTest methodsFor: 'tests - creation' stamp: 'eb 12/10/2020 19:26:25' prior: 51039150!
test09_canNotCreatePlayableCharacterOnInvalidRoomCell

	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 6@6 heading: #North on: testsObjectsFactory defaultRoom ]
		raise: Error
		withMessageText: Room invalidCellErrorDescription .! !

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 19:26:26'!
FAILURE!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 19:26:26'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests - creation' stamp: 'eb 12/10/2020 19:26:41' prior: 51039163!
test09_canNotCreatePlayableCharacterOnInvalidRoomCell

	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 6@6 heading: #North on: testsObjectsFactory defaultRoom. self fail ]
		raise: Error
		withMessageText: Room invalidCellErrorDescription .! !

!classDefinition: #PlayableCharacter category: #'ISW1-2020-2C-2doParcial' stamp: 'eb 12/10/2020 19:28:01'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'eb 12/10/2020 19:27:59'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading on: aRoom

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room _ aRoom.! !

!methodRemoval: PlayableCharacter #initializeNamed:using:at:heading: stamp: 'eb 12/10/2020 19:28:04'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'eb 12/10/2020 19:28:14' prior: 51038166!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint on: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading on: aRoom.! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'eb 12/10/2020 19:28:56' prior: 51039223!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint on: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading on: aRoom.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'eb 12/10/2020 19:29:58' prior: 51039204!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading on: aRoom

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room _ aRoom.
	room putPlayer: self at: aPosition.! !

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 19:30:08'!
FAILURE!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 19:30:08'!
FAILURE!

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'eb 12/10/2020 19:31:22'!
Object subclass: #Room
	instanceVariableNames: 'width height cells playerCell'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'putting' stamp: 'eb 12/10/2020 19:31:21'!
putPlayer: aPlayer at: aCell

	self put: aPlayer at: aCell.
	
	playerCell _ aCell.! !

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 19:31:31'!
PASSED!

----SNAPSHOT----(10 December 2020 19:31:43) CuisUniversity-4365.image priorSource: 22639860!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:33:25' prior: 51038551!
test10_canTakePortableObjectsInFrontOfPlayer

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@2 heading: #North on: testsObjectsFactory defaultRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).
	! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:33:47' prior: 51039285!
test10_canTakePortableObjectsInFrontOfPlayer

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: testsObjectsFactory defaultRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).
	! !
!ISEngineTestsObjectFactory methodsFor: 'playable object' stamp: 'eb 12/10/2020 19:34:34' prior: 51038981!
defaultRoom
	
	^ Room withWidht: 5 andHeight: 5.! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:35:28' prior: 51039301!
test10_canTakePortableObjectsInFrontOfPlayer

	| room playableCharacter paper |
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: testsObjectsFactory defaultRoom .
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).
	! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:35:40' prior: 51039322!
test10_canTakePortableObjectsInFrontOfPlayer

	| room playableCharacter paper |
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).
	! !

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 19:35:43'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:37:07' prior: 51038525!
test11_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| room playableCharacter paper |
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 100.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	
	self 
		should: [ playableCharacter take: paper ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: paper) ]
	
	! !

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 19:37:09'!
FAILURE!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 19:37:09'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:37:15' prior: 51039361!
test11_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| room playableCharacter paper |
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 101.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	
	self 
		should: [ playableCharacter take: paper ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: paper) ]
	
	! !

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 19:37:16'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:37:48'!
test12_canNotTakeNonPortableObjectsInFrontOfPlayer! !

!methodRemoval: PlayableCharacterTest #test12_canNotTakeNonPortableObjects stamp: 'eb 12/10/2020 19:37:51'!
test12_canNotTakeNonPortableObjects!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:38:44' prior: 51039418!
test12_canNotTakeNonPortableObjectsInFrontOfPlayer

	| room playableCharacter table |
	
	table _ NonPortableObject new.
	room _ testsObjectsFactory defaultRoom put: table at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:39:45' prior: 51039428!
test12_canNotTakeNonPortableObjectsInFrontOfPlayer

	| room playableCharacter table |
	
	table _ NonPortableObject new.
	room _ testsObjectsFactory defaultRoom put: table at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	
	self 
		should: [ playableCharacter take: table ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakeNonPortableObjectsErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: table) ]! !

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 19:39:47'!
ERROR!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 19:39:47'!
ERROR!
!NonPortableObject methodsFor: 'adding - private' stamp: 'eb 12/10/2020 19:40:06'!
assertCanAddTo: aBackpack 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'adding - private' stamp: 'eb 12/10/2020 19:40:43' prior: 51039471!
assertCanAddTo: aBackpack 
	
	self error: self class canNotAddNonPortableObjectsErrorDescription.! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:40:55' prior: 51039441!
test12_canNotTakeNonPortableObjectsInFrontOfPlayer

	| room playableCharacter table |
	
	table _ NonPortableObject new.
	room _ testsObjectsFactory defaultRoom put: table at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	
	self 
		should: [ playableCharacter take: table ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: NonPortableObject canNotAddNonPortableObjectsErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: table) ]! !

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 19:40:56'!
ERROR!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 19:40:56'!
ERROR!
!NonPortableObject class methodsFor: 'error descriptions' stamp: 'eb 12/10/2020 19:41:12'!
canNotAddNonPortableObjectsErrorDescription
	self shouldBeImplemented.! !
!NonPortableObject class methodsFor: 'error descriptions' stamp: 'eb 12/10/2020 19:41:23' prior: 51039513!
canNotAddNonPortableObjectsErrorDescription
	
	^ 'Can not add non protable objects'.! !

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 19:41:27'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:42:12' prior: 51037951!
test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer

	| room playableCharacter paper |
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	playableCharacter take: paper.! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:43:09' prior: 51039529!
test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer

	| room playableCharacter paper table |
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	playableCharacter take: paper.
	
	self 
		should: [ playableCharacter take: table ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: table) ]! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:43:26' prior: 51039544!
test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer

	| room playableCharacter paper |
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	playableCharacter take: paper.
	
	self 
		should: [ playableCharacter take: paper ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: paper) ]! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:44:05' prior: 51039569!
test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer

	| heading room playableCharacter paper |
	
	heading _ #North.
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	playableCharacter take: paper.
	
	self 
		should: [ playableCharacter take: paper ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: paper) ]! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:44:13' prior: 51039594!
test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer

	| heading room playableCharacter paper |
	
	heading _ #North.
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: heading on: room .
	playableCharacter take: paper.
	
	self 
		should: [ playableCharacter take: paper ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: paper) ]! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:45:08' prior: 51039620!
test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer

	| heading room playableCharacter paper |
	
	heading _ #North.
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: heading on: room .
	playableCharacter take: paper.
	
	self 
		should: [ playableCharacter take: paper ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: paper) ]! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:45:41'!
denyTakingPortableObjectsThatAreNotInFronOfPlayerWhenHeadingTo

	| heading room playableCharacter paper |
	
	heading _ #North.
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: heading on: room .
	playableCharacter take: paper.
	
	self 
		should: [ playableCharacter take: paper ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: paper) ]! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:45:41' prior: 51039646!
test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer

	self denyTakingPortableObjectsThatAreNotInFronOfPlayerWhenHeadingTo! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'eb 12/10/2020 19:45:58'!
denyTakingPortableObjectsThatAreNotInFronOfPlayerWhenHeadingTo: aHeading

	| room playableCharacter paper |
		
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: aHeading on: room .
	playableCharacter take: paper.
	
	self 
		should: [ playableCharacter take: paper ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: paper) ]! !

!methodRemoval: PlayableCharacterTest #denyTakingPortableObjectsThatAreNotInFronOfPlayerWhenHeadingTo stamp: 'eb 12/10/2020 19:46:02'!
denyTakingPortableObjectsThatAreNotInFronOfPlayerWhenHeadingTo

	| heading room playableCharacter paper |
	
	heading _ #North.
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: heading on: room .
	playableCharacter take: paper.
	
	self 
		should: [ playableCharacter take: paper ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: paper) ]!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:46:25' prior: 51039698!
test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer

	self denyTakingPortableObjectsThatAreNotInFronOfPlayerWhenHeadingTo: #North.
	self denyTakingPortableObjectsThatAreNotInFronOfPlayerWhenHeadingTo: #East.
	self denyTakingPortableObjectsThatAreNotInFronOfPlayerWhenHeadingTo: #West.! !

----SNAPSHOT----(10 December 2020 19:46:31) CuisUniversity-4365.image priorSource: 22644183!
!RoomTest methodsFor: 'testing - private' stamp: 'eb 12/10/2020 19:47:03'!
denyAdding: aPortableObject to: aRoom at: aCell

	self 
		should: [ aRoom put: aPortableObject at: aCell. self fail.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidCellErrorDescription.
	
	self deny: (aRoom hasOccupiedCell: aCell)! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 19:47:03' prior: 51036751!
test04WhenPuttingSomethingInRoomPositionShouldBeValid
	
	| room portableObject |
	
	portableObject _ testObjectsFactory defaultPortableObject .
	room _ Room withWidht: 1 andHeight: 1 .
	
	self denyAdding: portableObject  to: room at: 1@0.
	self denyAdding: portableObject  to: room at: 0@1.
	! !

!methodRemoval: RoomTest #assertErrorWhenAdding:to:at: stamp: 'eb 12/10/2020 19:47:03'!
assertErrorWhenAdding: aPortableObject to: aRoom at: aCell

	self 
		should: [ aRoom put: aPortableObject at: aCell. self fail.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidCellErrorDescription.
	
	self deny: (aRoom hasOccupiedCell: aCell)!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 19:47:17'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 19:47:18'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:47:18'!
FAILURE!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:47:18'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 19:47:18'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 19:47:18'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 19:47:18'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 19:47:18'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 19:47:18'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 19:47:18'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 19:47:18'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 19:47:18'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:47:18'!
FAILURE!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 19:47:23'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 19:47:23'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 19:47:23'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 19:47:23'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 19:47:23'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:47:34'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:47:34'!
FAILURE!
!PlayableCharacterTest methodsFor: 'support' stamp: 'eb 12/10/2020 19:47:48' prior: 51039705!
denyTakingPortableObjectsThatAreNotInFronOfPlayerWhenHeadingTo: aHeading

	| room playableCharacter paper |
		
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: aHeading on: room .
	playableCharacter take: paper.
	
	self 
		should: [ playableCharacter take: paper. self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: paper) ]! !

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:48:05'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:48:05'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 19:48:20' prior: 51035802!
take: aPortableObject

	

	backpack add: aPortableObject.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 19:49:35' prior: 51040029!
take: aPortableObject

	(room at: (heading forwardPoint) = aPortableObject) ifFalse: [ self error: self class ].

	backpack add: aPortableObject.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 19:49:51' prior: 51040034!
take: aPortableObject

	(room at: (heading forwardPoint) = aPortableObject) ifFalse: [ self error: self class canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription ].

	backpack add: aPortableObject.! !
!Room methodsFor: 'accessing' stamp: 'eb 12/10/2020 19:50:33' overrides: 16880774!
at: aCell
	
	^ (cells at: aCell) copy .! !
!Room methodsFor: 'accessing' stamp: 'eb 12/10/2020 19:50:40' prior: 51040052 overrides: 16880774!
at: aCell
	
	^ cells at: aCell! !
!Room methodsFor: 'accessing' stamp: 'eb 12/10/2020 19:50:42' prior: 51040057 overrides: 16880774!
at: aCell
	
	^ cells at: aCell.! !

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:50:52'!
ERROR!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:50:52'!
ERROR!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 19:51:41' prior: 51040042!
take: aPortableObject

	((room at: heading forwardPoint) = aPortableObject) ifFalse: [ self error: self class canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription ].

	backpack add: aPortableObject.! !

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:51:48'!
ERROR!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:51:48'!
ERROR!
!Room methodsFor: 'accessing' stamp: 'eb 12/10/2020 19:52:24' prior: 51040062 overrides: 16880774!
at: aCell
	
	^ cells at: aCell ifAbsent: [ nil ].! !

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:52:32'!
ERROR!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:52:32'!
ERROR!
!PlayableCharacter class methodsFor: 'error descriptions' stamp: 'eb 12/10/2020 19:52:48'!
canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'error descriptions' stamp: 'eb 12/10/2020 19:53:09' prior: 51040107!
canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription
	
	^ 'Can not take portable objects that are not in front of player'.! !

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:53:15'!
ERROR!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:53:15'!
ERROR!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:53:41'!
ERROR!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:53:41'!
ERROR!
!PlayableCharacterTest methodsFor: 'support' stamp: 'eb 12/10/2020 19:53:57' prior: 51039994!
denyTakingPortableObjectsThatAreNotInFronOfPlayerWhenHeadingTo: aHeading

	| room playableCharacter paper |
		
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: aHeading on: room .
	
	self 
		should: [ playableCharacter take: paper. self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: paper) ]! !

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 19:54:00'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:55:25' prior: 51038900!
test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore

	| room playableCharacter paper |
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	
	self assert: (room has: paper at: 4@0).
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:55:42' prior: 51040167!
test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore

	| room playableCharacter paperCell paper |
	
	paperCell _ 4@0.
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: paperCell; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	
	self assert: (room has: paper at: 4@0).
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 19:56:07' prior: 51040187!
test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore

	| room playableCharacter paperCell paper |
	
	paperCell _ 4@0.
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: paperCell; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	
	self assert: (room has: paper at: paperCell).
	self deny: (playableCharacter backpackIncludes: paper).
	
	playableCharacter take: paper.
	
	self deny: (room has: paper at: paperCell).
	self assert: (playableCharacter backpackIncludes: paper).! !

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:56:08'!
ERROR!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:56:08'!
ERROR!
!Room methodsFor: 'accessing' stamp: 'eb 12/10/2020 19:56:15'!
has: aNoPointsPortableObject at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'accessing' stamp: 'eb 12/10/2020 19:56:23' prior: 51040242!
has: aStageObject at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'accessing' stamp: 'eb 12/10/2020 19:56:31' prior: 51040247!
has: aStageObject at: aCell 
	self shouldBeImplemented.! !
!Room methodsFor: 'accessing' stamp: 'eb 12/10/2020 19:56:50' prior: 51040252!
has: aStageObject at: aCell 
	
	^ (self at: aCell) = aStageObject.! !

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:57:05'!
ERROR!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:57:05'!
ERROR!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:57:13'!
ERROR!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:57:13'!
ERROR!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:57:29'!
ERROR!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:57:29'!
ERROR!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:58:26'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'eb 12/10/2020 19:59:05'!
moveForwardPosition
	
	^ position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'eb 12/10/2020 19:59:19' prior: 51035788!
moveForward
	
	position := self moveForwardPosition .! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 19:59:40' prior: 51040075!
take: aPortableObject

	((room at: self moveForwardPosition) = aPortableObject) ifFalse: [ self error: self class canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription ].

	backpack add: aPortableObject.! !

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:59:47'!
FAILURE!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 19:59:47'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 20:00:50' prior: 51040309!
take: aPortableObject
	
	| cell |
	
	cell _ self moveForwardPosition.
	
	((room at: cell) = aPortableObject) ifFalse: [ self error: self class canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription ].

	backpack add: aPortableObject.
	room clear: cell.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 20:00:56' prior: 51040330!
take: aPortableObject
	
	| cell |
	
	cell _ self moveForwardPosition.
	
	((room at: cell) = aPortableObject) ifFalse: [ self error: self class canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription ].

	backpack add: aPortableObject.
	
	room clear: cell.! !
!Room methodsFor: 'taking' stamp: 'eb 12/10/2020 20:01:52'!
clear: aCell
	
	cells remove: aCell .! !

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 20:02:01'!
ERROR!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 20:02:01'!
ERROR!
!Room methodsFor: 'taking' stamp: 'eb 12/10/2020 20:02:36' prior: 51040353!
clear: aCell
	
	cells removeKey: aCell .! !

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 20:02:41'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 20:05:29' prior: 51037981!
test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull

	| room playableCharacter paper |
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 20:07:46' prior: 51040378!
test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull

	| room playableCharacter table paper box scissors book |
	
	book _ NoPointsPortableObject named: 'Book' weighing: 100.
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject with: (Bag with: book with: scissors).
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 20:08:12' prior: 51040396!
test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull

	| room playableCharacter table paper box scissors book |
	
	book _ NoPointsPortableObject named: 'Book' weighing: 100.
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject with: (Bag with: book with: scissors).
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject  with: (Bag with: paper with: box).
	
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 20:08:57' prior: 51040421!
test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull

	| room playableCharacter table paper box scissors book |
	
	book _ NoPointsPortableObject named: 'Book' weighing: 100.
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject with: (Bag with: book with: scissors).
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject  with: (Bag with: paper with: box).
	room _ testsObjectsFactory defaultRoom put: table at: 4@2; yourself. 
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #North on: room .
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 20:09:02' prior: 51040448!
test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull

	| room playableCharacter table paper box scissors book |
	
	book _ NoPointsPortableObject named: 'Book' weighing: 100.
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject with: (Bag with: book with: scissors).
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject  with: (Bag with: paper with: box).
	room _ testsObjectsFactory defaultRoom put: table at: 4@2; yourself. 
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #North on: room .
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 20:09:26' prior: 51040475!
test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull

	| room playableCharacter table paper box scissors book |
	
	book _ NoPointsPortableObject named: 'Book' weighing: 100.
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject with: (Bag with: book with: scissors).
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject  with: (Bag with: paper with: box).
	room _ testsObjectsFactory defaultRoom put: table at: 4@2; yourself. 
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #North on: room .
	playableCharacter takeFrom: table.
	
	self assert: (playableCharacter backpackIncludes: paper).! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 20:10:46' prior: 51040502!
test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull

	| room playableCharacter table paper box scissors book |
	
	book _ NoPointsPortableObject named: 'Book' weighing: 100.
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject with: (Bag with: book with: scissors).
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject  with: (Bag with: paper with: box).
	room _ testsObjectsFactory defaultRoom put: table at: 4@2; yourself. 
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #North on: room .
	playableCharacter takeFrom: table.
	
	self deny: (playableCharacter backpackIncludes: book).
	self assert: (playableCharacter backpackIncludes: scissors).
	self deny: (playableCharacter backpackIncludes: box).
	self assert: (playableCharacter backpackIncludes: paper).
	self deny: (playableCharacter backpackIncludes: table).! !

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 20:10:49'!
ERROR!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 20:10:49'!
ERROR!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 20:10:59'!
takeFrom: aNonPortableObject 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 20:11:04' prior: 51040573!
takeFrom: aNonPortableObject 
	
	! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 20:13:32' prior: 51040578!
takeFrom: aNonPortableObject 
	
	| descendingWeightSorting |
	
	descendingWeightSorting  _ [ :aPortableObject :anotherPortableObject | aPortableObject weight < anotherPortableObject weight ].
	
	aNonPortableObject portableObjects asOrderedCollection sort: []
	do: [ :portableObject | ]! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 20:14:35' prior: 51040583!
takeFrom: aNonPortableObject 
	
	| descendingWeightSorting portableObjectsOrderedByWeight |
	
	descendingWeightSorting  _ [ :aPortableObject :anotherPortableObject | aPortableObject weight < anotherPortableObject weight ].
	
	
	
	(aNonPortableObject portableObjects asOrderedCollection) sort: descendingWeightSorting
	do: [ :portableObject | ]! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 20:14:47' prior: 51040596!
takeFrom: aNonPortableObject 
	
	| ascendingWeightSorting portableObjectsOrderedByWeight |
	
	ascendingWeightSorting  _ [ :aPortableObject :anotherPortableObject | aPortableObject weight < anotherPortableObject weight ].
	
	
	
	(aNonPortableObject portableObjects asOrderedCollection) sort: ascendingWeightSorting
	do: [ :portableObject | ]! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 20:16:06' prior: 51040610!
takeFrom: aNonPortableObject 
	
	| ascendingWeightSorting portableObjectsOrderedByWeight |
	
	ascendingWeightSorting  _ [ :aPortableObject :anotherPortableObject | aPortableObject weight < anotherPortableObject weight ].
	portableObjectsOrderedByWeight _ aNonPortableObject portableObjects asOrderedCollection sort: ascendingWeightSorting .
	portableObjectsOrderedByWeight do: [  :aPortableObject | aPortableObject weight < self backpackWeight 
	]! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 20:17:34' prior: 51040624!
takeFrom: aNonPortableObject 
	
	| ascendingWeightSorting portableObjectsOrderedByWeight |
	
	ascendingWeightSorting  _ [ :aPortableObject :anotherPortableObject | aPortableObject weight < anotherPortableObject weight ].
	portableObjectsOrderedByWeight _ aNonPortableObject portableObjects asOrderedCollection sort: ascendingWeightSorting .
	portableObjectsOrderedByWeight do: [  :aPortableObject | 
		backpack add: aPortableObject 
		]! !
!PlayableCharacter methodsFor: 'taking from non portable objects - private' stamp: 'eb 12/10/2020 20:19:08'!
tryTake: aPortableObject

	[ backpack add: aPortableObject ] on: Error do: [] .! !
!PlayableCharacter methodsFor: 'taking from non portable objects - private' stamp: 'eb 12/10/2020 20:19:16' prior: 51040660!
tryTake: aPortableObject

	[ backpack add: aPortableObject ] on: Error do: [ ^self ] .! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 20:19:36' prior: 51040642!
takeFrom: aNonPortableObject 
	
	| ascendingWeightSorting portableObjectsOrderedByWeight |
	
	ascendingWeightSorting  _ [ :aPortableObject :anotherPortableObject | aPortableObject weight < anotherPortableObject weight ].
	portableObjectsOrderedByWeight _ aNonPortableObject portableObjects asOrderedCollection sort: ascendingWeightSorting .
	portableObjectsOrderedByWeight do: [  :aPortableObject | self tryTake: aPortableObject ].! !

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 20:19:55'!
PASSED!

!classDefinition: #PlayableCharacter category: #'ISW1-2020-2C-2doParcial' stamp: 'eb 12/10/2020 20:20:47'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room takeFromNonPortableObjectSelectBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'eb 12/10/2020 20:20:46' prior: 51039246!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading on: aRoom

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room _ aRoom.
	room putPlayer: self at: aPosition.
	takeFromNonPortableObjectSelectBehaviour _ nil .! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 20:21:29'!
ascendingWeightSorting 

 	^ [ :aPortableObject :anotherPortableObject | aPortableObject weight < anotherPortableObject weight ].! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'eb 12/10/2020 20:21:42' prior: 51040706!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading on: aRoom

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room _ aRoom.
	room putPlayer: self at: aPosition.
	takeFromNonPortableObjectSelectBehaviour _ self ascendingWeightSorting .! !
!PlayableCharacter methodsFor: 'taking from non portable objects - private' stamp: 'eb 12/10/2020 20:22:52'!
orderPortableObjects: aPortableObjectsCollection 

 	^ aPortableObjectsCollection asOrderedCollection sort: takeFromNonPortableObjectSelectBehaviour .! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 20:23:34' prior: 51040673!
takeFrom: aNonPortableObject 

	(self orderPortableObjects: (aNonPortableObject portableObjects)) do: [  :aPortableObject | self tryTake: aPortableObject ].
! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 20:24:28' prior: 51040748!
takeFrom: aNonPortableObject 

	^ self takeUntilBackpackIsFull: (self orderPortableObjects: (aNonPortableObject portableObjects)).
! !
!PlayableCharacter methodsFor: 'taking from non portable objects - private' stamp: 'eb 12/10/2020 20:24:47'!
takeUntilBackpackIsFull: xxx

	xxx do: [  :aPortableObject | self tryTake: aPortableObject ].! !
!PlayableCharacter methodsFor: 'taking from non portable objects - private' stamp: 'eb 12/10/2020 20:25:03' prior: 51040765!
takeUntilBackpackIsFull: aPortableObjectsCollectionSortedByWeightAscending

	aPortableObjectsCollectionSortedByWeightAscending do: [  :aPortableObject | self tryTake: aPortableObject ].! !

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 20:25:47'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 20:27:03' prior: 51038001!
test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore

	| room playableCharacter table paper |
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject  with: (Bag with: paper ).
	room _ testsObjectsFactory defaultRoom put: table at: 4@2; yourself. 
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #North on: room .
	playableCharacter takeFrom: table.
	
	self assert: (playableCharacter backpackIncludes: paper).
	self deny: (table backpackIncludes: table).! !
!NonPortableObject methodsFor: 'testing' stamp: 'eb 12/10/2020 20:27:23'!
has: aStageObject
	
	^ stageObjects includes: aStageObject.! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 20:27:23' prior: 51037396!
test02NonPortableObjectCouldHaveOneStageObject

	| pointsPortableObject nonPortableObject |
	
	pointsPortableObject _ PointsPortableObject new.
	nonPortableObject _ NonPortableObject with: (Bag with: pointsPortableObject).
	
	self deny: nonPortableObject isEmpty .
	self assert: (nonPortableObject has: pointsPortableObject).! !
!NonPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 20:27:24' prior: 51037283!
test03NonPortableObjectCouldHaveManyStageObjects

	| pointsPortableObject noPointsPortableObject nonPortableObject |
	
	pointsPortableObject _ PointsPortableObject new.
	noPointsPortableObject _ NoPointsPortableObject new.
	nonPortableObject _ NonPortableObject with: (Bag with: pointsPortableObject with: noPointsPortableObject).
	
	self deny: nonPortableObject isEmpty .
	self assert: (nonPortableObject has: pointsPortableObject).
	self assert: (nonPortableObject has: noPointsPortableObject).! !

!methodRemoval: NonPortableObject #contains: stamp: 'eb 12/10/2020 20:27:24'!
contains: aStageObject
	
	^ stageObjects includes: aStageObject.!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 20:27:39' prior: 51040787!
test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore

	| room playableCharacter table paper |
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject  with: (Bag with: paper ).
	room _ testsObjectsFactory defaultRoom put: table at: 4@2; yourself. 
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #North on: room .
	playableCharacter takeFrom: table.
	
	self assert: (playableCharacter backpackIncludes: paper).
	self deny: (table has: paper).! !

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 20:27:40'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 20:27:40'!
FAILURE!
!PlayableCharacter methodsFor: 'taking from non portable objects - private' stamp: 'eb 12/10/2020 20:28:22' prior: 51040667!
tryTake: aPortableObject

	[ backpack add: aPortableObject ] on: Error do: [ ^self ] .! !
!PlayableCharacter methodsFor: 'taking from non portable objects - private' stamp: 'eb 12/10/2020 20:28:34'!
tryTake: aPortableObject from: aNonPortableObject

	[ backpack add: aPortableObject ] on: Error do: [ ^self ] .! !
!PlayableCharacter methodsFor: 'taking from non portable objects - private' stamp: 'eb 12/10/2020 20:28:53' prior: 51040895!
tryTake: aPortableObject from: aNonPortableObject

	[ 
		backpack add: aPortableObject.
		aNonPortableObject remove: aPortableObject.
	] on: Error do: [ ^self ] .! !

!methodRemoval: PlayableCharacter #tryTake: stamp: 'eb 12/10/2020 20:29:01'!
tryTake: aPortableObject

	[ backpack add: aPortableObject ] on: Error do: [ ^self ] .!
!PlayableCharacter methodsFor: 'taking from non portable objects - private' stamp: 'eb 12/10/2020 20:29:33'!
takeUntilBackpackIsFull: aPortableObjectsCollectionSortedByWeightAscending from: aNonPortableObject

	aPortableObjectsCollectionSortedByWeightAscending do: [  :aPortableObject | self tryTake: aPortableObject from: aNonPortableObject].! !

!methodRemoval: PlayableCharacter #takeUntilBackpackIsFull: stamp: 'eb 12/10/2020 20:29:56'!
takeUntilBackpackIsFull: aPortableObjectsCollectionSortedByWeightAscending

	aPortableObjectsCollectionSortedByWeightAscending do: [  :aPortableObject | self tryTake: aPortableObject ].!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 20:30:04' prior: 51040757!
takeFrom: aNonPortableObject 

	^ self takeUntilBackpackIsFull: (self orderPortableObjects: (aNonPortableObject portableObjects)) from: aNonPortableObject .
! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 20:32:03' prior: 51040853!
test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore

	| room playableCharacter table paper box scissors book |
	
	book _ NoPointsPortableObject named: 'Book' weighing: 100.
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject with: (Bag with: book with: scissors).
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject  with: (Bag with: paper with: box).
	room _ testsObjectsFactory defaultRoom put: table at: 4@2; yourself. 
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #North on: room .
	playableCharacter takeFrom: table.
	
	self deny: (playableCharacter backpackIncludes: book).
	self assert: (box has: book).
	
	self assert: (playableCharacter backpackIncludes: scissors).
	self deny: (box has: scissors).
	
	self assert: (playableCharacter backpackIncludes: paper).
	self deny: (table has: paper).
	
	self assert: (table has: box).! !

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 20:32:05'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 20:32:05'!
FAILURE!
!NonPortableObject methodsFor: 'taking' stamp: 'eb 12/10/2020 20:32:44'!
remove: aPortableObject

	! !
!NonPortableObject methodsFor: 'taking' stamp: 'eb 12/10/2020 20:34:06' prior: 51040993!
remove: aPortableObject

	stageObjects 
		remove: aPortableObject 
		ifAbsent: [ stageObjects do: [ :stageObject | stageObject remove: aPortableObject] ].! !
!PortableObject methodsFor: 'taking' stamp: 'eb 12/10/2020 20:34:55'!
remove: aPortableObject

	^ self .! !

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 20:35:01'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - moving to occupied cell' stamp: 'eb 12/10/2020 20:36:42' prior: 51038719!
test17_playerCanNotMoveToOccupiedCell

	| room playableCharacter paper |
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'eb 12/10/2020 20:39:09'!
denyMovingForwardWhenHeadingTo: aHeading

	| room playableCharacter paper table |
		
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject new .
	
	room _ testsObjectsFactory defaultRoom.
	room put: paper at: 4@0.
	room put: table at: 4@2.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: aHeading on: room .
	
	self 
		should: [ playableCharacter take: paper. self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: paper) ]! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'eb 12/10/2020 20:40:33' prior: 51041032!
denyMovingForwardWhenHeadingTo: aHeading

	| room playableCharacter paper table scissors box |
		
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject new .
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject new .
	
	room _ testsObjectsFactory defaultRoom.
	room put: paper at: 4@0.
	room put: table at: 4@2.
	room put: paper at: 5@1.
	room put: table at: 3@1.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: aHeading on: room .
	
	self 
		should: [ playableCharacter take: paper. self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: paper) ]! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'eb 12/10/2020 20:40:45' prior: 51041058!
denyMovingForwardWhenHeadingTo: aHeading

	| room playableCharacter paper table scissors box |
		
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject new .
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject new .
	
	room _ testsObjectsFactory defaultRoom.
	room put: paper at: 4@0.
	room put: table at: 4@2.
	room put: scissors at: 5@1.
	room put: box at: 3@1.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: aHeading on: room .
	
	self 
		should: [ playableCharacter take: paper. self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: paper) ]! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'eb 12/10/2020 20:41:06' prior: 51041089!
denyMovingForwardWhenHeadingTo: aHeading

	| room playableCharacter paper table scissors box |
		
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject new .
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject new .
	
	room _ testsObjectsFactory defaultRoom.
	room put: paper at: 4@0.
	room put: table at: 4@2.
	room put: scissors at: 5@1.
	room put: box at: 3@1.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: aHeading on: room .
	
	self 
		should: [ playableCharacter moveForward. self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription equals: anError messageText.
			self deny: (playableCharacter backpackIncludes: paper) ]! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'eb 12/10/2020 20:42:15' prior: 51041120!
denyMovingForwardWhenHeadingTo: aHeading

	| room playableCharacter paper table scissors box |
		
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject new .
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject new .
	
	room _ testsObjectsFactory defaultRoom.
	room put: paper at: 4@0.
	room put: table at: 4@2.
	room put: scissors at: 5@1.
	room put: box at: 3@1.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: aHeading on: room .
	
	self 
		should: [ playableCharacter moveForward. self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotMoveToOccupiedPositionErrorDescription equals: anError messageText.
			self deny: (playableCharacter position = 4@1) ]! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'eb 12/10/2020 20:42:45'!
denyMovingWhenHeadingTo: aHeading

	| room playableCharacter paper table scissors box |
		
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject new .
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject new .
	
	room _ testsObjectsFactory defaultRoom.
	room put: paper at: 4@0.
	room put: table at: 4@2.
	room put: scissors at: 5@1.
	room put: box at: 3@1.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: aHeading on: room .
	
	self 
		should: [ playableCharacter moveForward. self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotMoveToOccupiedPositionErrorDescription equals: anError messageText.
			self deny: (playableCharacter position = 4@1) ]! !

!methodRemoval: PlayableCharacterTest #denyMovingForwardWhenHeadingTo: stamp: 'eb 12/10/2020 20:42:45'!
denyMovingForwardWhenHeadingTo: aHeading

	| room playableCharacter paper table scissors box |
		
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject new .
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject new .
	
	room _ testsObjectsFactory defaultRoom.
	room put: paper at: 4@0.
	room put: table at: 4@2.
	room put: scissors at: 5@1.
	room put: box at: 3@1.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: aHeading on: room .
	
	self 
		should: [ playableCharacter moveForward. self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotMoveToOccupiedPositionErrorDescription equals: anError messageText.
			self deny: (playableCharacter position = 4@1) ]!
!PlayableCharacterTest methodsFor: 'support' stamp: 'eb 12/10/2020 20:43:06' prior: 51041181!
denyMovingWhenHeadingTo: aHeading

	| room playableCharacter paper table scissors box |
		
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject new .
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject new .
	
	room _ testsObjectsFactory defaultRoom.
	room put: paper at: 4@0.
	room put: table at: 4@2.
	room put: scissors at: 5@1.
	room put: box at: 3@1.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: aHeading on: room .
	
	self 
		should: [ playableCharacter moveForward. self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotMoveToOccupiedPositionErrorDescription equals: anError messageText.
			self deny: (playableCharacter position = 4@1) ].
		
	self 
		should: [ playableCharacter moveBackward . self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotMoveToOccupiedPositionErrorDescription equals: anError messageText.
			self deny: (playableCharacter position = 4@1) ]! !
!PlayableCharacterTest methodsFor: 'tests - moving to occupied cell' stamp: 'eb 12/10/2020 20:43:49' prior: 51041016!
test17_playerCanNotMoveToOccupiedCell

	self denyMovingWhenHeadingTo: #North.
	self denyMovingWhenHeadingTo: #South.
	self denyMovingWhenHeadingTo: #East.
	self denyMovingWhenHeadingTo: #West.! !

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 20:43:52'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 20:43:52'!
ERROR!
!ISEngineTestsObjectFactory methodsFor: 'playable object' stamp: 'eb 12/10/2020 20:44:26' prior: 51039317!
defaultRoom
	
	^ Room withWidht: 6 andHeight: 6.! !

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 20:44:34'!
FAILURE!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 20:44:34'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 20:44:48'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 20:44:48'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 20:44:48'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 20:44:48'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 20:44:50'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 20:44:50'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 20:44:50'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 20:44:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 20:44:52'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 20:44:52'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 20:44:52'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 20:44:52'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 20:44:52'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 20:44:52'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 20:44:52'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 20:44:53'!
FAILURE!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 20:44:53'!
FAILURE!
!PlayableCharacter class methodsFor: 'error descriptions' stamp: 'eb 12/10/2020 20:45:29'!
canNotMoveToOccupiedPositionErrorDescription
	
	^ 'Can not move to occupied position'.! !
!PlayableCharacter methodsFor: 'moving - private' stamp: 'eb 12/10/2020 20:46:20'!
moveBackwardPosition
	
	^ position - heading forwardPoint ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'eb 12/10/2020 20:46:30' prior: 51035783!
moveBackward
	
	position := self moveBackwardPosition .! !
!PlayableCharacter methodsFor: 'moving' stamp: 'eb 12/10/2020 20:47:32' prior: 51041396!
moveBackward
	
	| targetPosition |
	
	targetPosition _ self moveBackwardPosition.
	self ensureIsEmpty: targetPosition.
	position := targetPosition.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'eb 12/10/2020 20:47:37' prior: 51041401!
moveBackward
	
	| targetPosition |
	targetPosition _ self moveBackwardPosition.
	self ensureIsEmpty: targetPosition.
	position := targetPosition.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'eb 12/10/2020 20:47:44' prior: 51041409!
moveBackward
	
	| targetPosition |
	
	targetPosition _ self moveBackwardPosition.
	self ensureIsEmpty: targetPosition.
	position := targetPosition.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'eb 12/10/2020 20:47:55' prior: 51040304!
moveForward
	
	| targetPosition |
	
	targetPosition _ self moveForwardPosition .
	self ensureIsEmpty: targetPosition.
	position := targetPosition..! !
!PlayableCharacter methodsFor: 'moving - private' stamp: 'eb 12/10/2020 20:48:18'!
ensureIsEmpty: aCell

	room ! !
!PlayableCharacter methodsFor: 'moving - private' stamp: 'eb 12/10/2020 20:48:52' prior: 51041433!
ensureIsEmpty: aCell

	(room hasOccupiedCell: aCell) ifTrue: [ self error: self class canNotMoveToOccupiedPositionErrorDescription ].! !

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 20:48:58'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 20:48:58'!
ERROR!
!PlayableCharacterTest methodsFor: 'support' stamp: 'eb 12/10/2020 20:49:41' prior: 51041241!
denyMovingWhenHeadingTo: aHeading

	| room playableCharacter paper table scissors box |
		
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject new .
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject new .
	
	room _ testsObjectsFactory defaultRoom.
	room put: paper at: 4@0.
	room put: table at: 4@2.
	room put: scissors at: 5@1.
	room put: box at: 3@1.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: aHeading on: room .
	
	self 
		should: [ playableCharacter moveForward. self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotMoveToOccupiedPositionErrorDescription equals: anError messageText.
			self deny: (playableCharacter position = 4@1) ].
		
	self 
		should: [ playableCharacter moveBackward . self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotMoveToOccupiedPositionErrorDescription equals: anError messageText.
			self deny: (playableCharacter isAt: 4@1 heading: aHeading ) ]! !
!PlayableCharacterTest methodsFor: 'support' stamp: 'eb 12/10/2020 20:49:42' prior: 51041453!
denyMovingWhenHeadingTo: aHeading

	| room playableCharacter paper table scissors box |
		
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject new .
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject new .
	
	room _ testsObjectsFactory defaultRoom.
	room put: paper at: 4@0.
	room put: table at: 4@2.
	room put: scissors at: 5@1.
	room put: box at: 3@1.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: aHeading on: room .
	
	self 
		should: [ playableCharacter moveForward. self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotMoveToOccupiedPositionErrorDescription equals: anError messageText.
			self deny: (playableCharacter position = 4@1) ].
		
	self 
		should: [ playableCharacter moveBackward . self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotMoveToOccupiedPositionErrorDescription equals: anError messageText.
			self deny: (playableCharacter isAt: 4@1 heading: aHeading) ]! !

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 20:49:48'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 20:49:48'!
ERROR!
!PlayableCharacterTest methodsFor: 'support' stamp: 'eb 12/10/2020 20:50:05' prior: 51041493!
denyMovingWhenHeadingTo: aHeading

	| room playableCharacter paper table scissors box |
		
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject new .
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject new .
	
	room _ testsObjectsFactory defaultRoom.
	room put: paper at: 4@0.
	room put: table at: 4@2.
	room put: scissors at: 5@1.
	room put: box at: 3@1.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: aHeading on: room .
	
	self 
		should: [ playableCharacter moveForward. self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotMoveToOccupiedPositionErrorDescription equals: anError messageText.
			self deny: (playableCharacter isAt: 4@1 heading: aHeading) ].
		
	self 
		should: [ playableCharacter moveBackward . self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotMoveToOccupiedPositionErrorDescription equals: anError messageText.
			self deny: (playableCharacter isAt: 4@1 heading: aHeading) ]! !

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 20:50:09'!
FAILURE!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 20:50:09'!
FAILURE!
!PlayableCharacterTest methodsFor: 'support' stamp: 'eb 12/10/2020 20:50:24' prior: 51041540!
denyMovingWhenHeadingTo: aHeading

	| room playableCharacter paper table scissors box |
		
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	table _ NonPortableObject new .
	scissors _ NoPointsPortableObject named: 'Scissors' weighing: 10.
	box _ NonPortableObject new .
	
	room _ testsObjectsFactory defaultRoom.
	room put: paper at: 4@0.
	room put: table at: 4@2.
	room put: scissors at: 5@1.
	room put: box at: 3@1.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: aHeading on: room .
	
	self 
		should: [ playableCharacter moveForward. self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotMoveToOccupiedPositionErrorDescription equals: anError messageText.
			self assert: (playableCharacter isAt: 4@1 heading: aHeading) ].
		
	self 
		should: [ playableCharacter moveBackward . self fail. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter canNotMoveToOccupiedPositionErrorDescription equals: anError messageText.
			self assert: (playableCharacter isAt: 4@1 heading: aHeading) ]! !

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 20:50:27'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 20:50:31'!
PASSED!

----SNAPSHOT----(10 December 2020 20:50:42) CuisUniversity-4365.image priorSource: 22659813!

----SNAPSHOT----(10 December 2020 20:54:22) CuisUniversity-4365.image priorSource: 22724381!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 20:54:31'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 20:54:32'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 20:54:32'!
PASSED!
!Room methodsFor: 'accessing' stamp: 'eb 12/10/2020 20:57:48'!
playerCell
	
	^ playerCell .! !

!methodRemoval: Room #playerCell stamp: 'eb 12/10/2020 20:59:10'!
playerCell
	
	^ playerCell .!
!Room methodsFor: 'testing' stamp: 'eb 12/10/2020 20:59:27'!
hasPlayerAt: aCell
	
	^ playerCell = aCell .! !
!PlayableCharacterTest methodsFor: 'tests - moving to free cell' stamp: 'eb 12/10/2020 21:00:18' prior: 51038447!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter room |

	room _ testsObjectsFactory defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East on:  room.

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North).
	self assert: (room hasPlayerAt: 2@2).! !

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:00:33'!
FAILURE!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:00:34'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'eb 12/10/2020 21:00:52' prior: 51041425!
moveForward
	
	| targetPosition |
	
	targetPosition _ self moveForwardPosition .
	self ensureIsEmpty: targetPosition.
	position := targetPosition.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'eb 12/10/2020 21:01:51' prior: 51041988!
moveForward
	
	| targetPosition |
	
	targetPosition _ self moveForwardPosition .
	self ensureIsEmpty: targetPosition.
	position := targetPosition.
! !
!PlayableCharacter methodsFor: 'moving' stamp: 'eb 12/10/2020 21:02:43' prior: 51041996!
moveForward
	
	| targetPosition |
	
	targetPosition _ self moveForwardPosition .
	self ensureIsEmpty: targetPosition.
	position := targetPosition.
	room affectPlayerPositionWith: heading forwardPoint .
! !
!PlayableCharacter methodsFor: 'moving' stamp: 'eb 12/10/2020 21:02:58' prior: 51041417!
moveBackward
	
	| targetPosition |
	
	targetPosition _ self moveBackwardPosition.
	self ensureIsEmpty: targetPosition.
	position := targetPosition.
	room affectPlayerPositionWith: heading  .! !
!PlayableCharacter methodsFor: 'moving' stamp: 'eb 12/10/2020 21:03:24' prior: 51042004!
moveForward
	
	| targetPosition |
	
	targetPosition _ self moveForwardPosition .
	self ensureIsEmpty: targetPosition.
	position := targetPosition.
	room affectPlayerPositionAdding: heading forwardPoint .
! !
!PlayableCharacter methodsFor: 'moving' stamp: 'eb 12/10/2020 21:03:46' prior: 51042014!
moveBackward
	
	| targetPosition |
	
	targetPosition _ self moveBackwardPosition.
	self ensureIsEmpty: targetPosition.
	position := targetPosition.
	room affectPlayerPositionSubtracting: heading  forwardPoint .
! !
!Room methodsFor: 'nil' stamp: 'eb 12/10/2020 21:04:23'!
affectPlayerPositionSubtracting: aPlayerMovement

	playerCell _ playerCell - aPlayerMovement .! !
!Room methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 21:04:36'!
affectPlayerPositionAdding: aPlayerMovement

	playerCell _ playerCell + aPlayerMovement .! !

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:04:54'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - moving to free cell' stamp: 'eb 12/10/2020 21:05:32' prior: 51038463!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter room |

	room _ testsObjectsFactory defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South on: room .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East).
	self assert: (room hasPlayerAt: 1@1).! !

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:05:33'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - moving to free cell' stamp: 'eb 12/10/2020 21:06:21' prior: 51038479!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter room |

	room _ testsObjectsFactory defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West on: room .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South).
	self assert: (room hasPlayerAt: 1@2).! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:06:23'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:06:23'!
PASSED!
!Room methodsFor: 'player position' stamp: 'eb 12/10/2020 21:06:59' prior: 51042048!
affectPlayerPositionAdding: aPlayerMovement
	
	cells removeKey: playerCell.
	playerCell _ playerCell + aPlayerMovement .
	cells removeKey: playerCell.! !
!Room methodsFor: 'player position - private' stamp: 'eb 12/10/2020 21:08:27'!
movePlayerTo: aTargetCell! !
!Room methodsFor: 'player position - private' stamp: 'eb 12/10/2020 21:09:24' prior: 51042177!
movePlayerTo: aTargetCell

	| player |
	
	player _ cells at: playerCell.
	cells removeKey: playerCell.
	cells add: aTargetCell -> player.
	playerCell _ player .! !
!Room methodsFor: 'player position - private' stamp: 'eb 12/10/2020 21:09:36' prior: 51042181!
movePlayerTo: aTargetCell

	| player |
	
	player _ cells at: playerCell.
	cells removeKey: playerCell.
	cells add: aTargetCell -> player.
	playerCell _ aTargetCell .! !
!Room methodsFor: 'player position' stamp: 'eb 12/10/2020 21:09:44' prior: 51042042!
affectPlayerPositionSubtracting: aPlayerMovement

	self movePlayerTo: playerCell - aPlayerMovement .! !
!Room methodsFor: 'player position' stamp: 'eb 12/10/2020 21:09:56' prior: 51042169!
affectPlayerPositionAdding: aPlayerMovement
	
	self movePlayerTo: playerCell + aPlayerMovement .
! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 21:09:57'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 21:09:57'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 21:09:57'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 21:09:57'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 21:09:57'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 21:09:57'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:09:57'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:09:57'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 21:09:57'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 21:09:57'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 21:09:57'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 21:09:57'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 21:09:58'!
PASSED!

----SNAPSHOT----(10 December 2020 21:10:03) CuisUniversity-4365.image priorSource: 22724475!
!PlayableCharacterTest methodsFor: 'tests - creation' stamp: 'eb 12/10/2020 21:12:04'!
test18_canNotCreatePlayableCharacterOnOccupiedRoomCell

	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 6@6 heading: #North on: testsObjectsFactory defaultRoom. self fail ]
		raise: Error
		withMessageText: Room invalidCellErrorDescription .! !
!PlayableCharacterTest methodsFor: 'tests - creation' stamp: 'eb 12/10/2020 21:12:12' prior: 51042371!
test18_canNotCreatePlayableCharacterOnOccupiedRoomCell

	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North on: testsObjectsFactory defaultRoom. self fail ]
		raise: Error
		withMessageText: Room invalidCellErrorDescription .! !

!methodRemoval: ISEngineTestsObjectFactory #defaultNonPortableObject stamp: 'eb 12/10/2020 21:12:48'!
defaultNonPortableObject

	^ NonPortableObject with: (Bag with: self defaultPortableObject ) .!
!ISEngineTestsObjectFactory methodsFor: 'playable object' stamp: 'eb 12/10/2020 21:13:17' prior: 51041298!
defaultRoom
	
	^ (Room withWidht: 6 andHeight: 6) put: self defaultPortableObject at: 0@0 yourself.! !
!ISEngineTestsObjectFactory methodsFor: 'playable object' stamp: 'eb 12/10/2020 21:13:20' prior: 51042402!
defaultRoom
	
	^ (Room withWidht: 6 andHeight: 6) put: self defaultPortableObject at: 0@0; yourself.! !

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:13:26'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:13:26'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests - creation' stamp: 'eb 12/10/2020 21:13:34' prior: 51042383!
test18_canNotCreatePlayableCharacterOnOccupiedRoomCell

	self 
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North on: testsObjectsFactory defaultRoom. self fail ]
		raise: Error
		withMessageText: Room cellIsOccupiedErrorDescription .! !

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:13:36'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 21:19:49'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 21:19:50'!
PASSED!
!Room methodsFor: 'initialization' stamp: 'eb 12/10/2020 21:21:00' prior: 51036607!
initializeWithWidth: aWidth andHeight: aHeight 
	
	width := aWidth.
	height := aHeight.
	cells _ Dictionary new .
	playerCell _ nil.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 21:21:05'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 21:21:05'!
PASSED!
!Room methodsFor: 'player position - private' stamp: 'eb 12/10/2020 21:21:48' prior: 51042190!
movePlayerTo: aTargetCell

	| player |
	
	player _ cells at: playerCell.
	cells removeKey: playerCell.
	cells add: aTargetCell -> player.
	
	self put: player at: aTargetCell .! !
!Room methodsFor: 'player position - private' stamp: 'eb 12/10/2020 21:22:00' prior: 51042771!
movePlayerTo: aTargetCell

	| player |
	
	player _ cells at: playerCell.
	
	cells removeKey: playerCell.
	
	self put: player at: aTargetCell .! !
!Room methodsFor: 'player position - private' stamp: 'eb 12/10/2020 21:22:16' prior: 51042780!
movePlayerTo: aTargetCell

	| player |
	
	player _ cells at: playerCell.
	cells removeKey: playerCell.	
	self put: player at: aTargetCell .! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:22:20'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:22:20'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:22:20'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 21:22:20'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 21:22:20'!
PASSED!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 21:27:06' prior: 51040937!
takeFrom: aNonPortableObject 

	aNonPortableObject assertCanTakeFrom.

	^ self takeUntilBackpackIsFull: (self orderPortableObjects: (aNonPortableObject portableObjects)) from: aNonPortableObject .
! !
!StageObject methodsFor: 'nil' stamp: 'eb 12/10/2020 21:27:23'!
assertCanTakeFrom
	
	self subclassResponsibility .! !
!NonPortableObject methodsFor: 'nil' stamp: 'eb 12/10/2020 21:27:32' overrides: 51042967!
assertCanTakeFrom
	
	^ self .! !
!PortableObject methodsFor: 'nil' stamp: 'eb 12/10/2020 21:27:47' overrides: 51042967!
assertCanTakeFrom
	
	self error: self class canNotTakeFromPortableObject .! !

!methodRemoval: NonPortableObject #assertCanTakeFrom stamp: 'eb 12/10/2020 21:28:48'!
assertCanTakeFrom
	
	^ self .!

!methodRemoval: PortableObject #assertCanTakeFrom stamp: 'eb 12/10/2020 21:28:51'!
assertCanTakeFrom
	
	self error: self class canNotTakeFromPortableObject .!

!methodRemoval: StageObject #assertCanTakeFrom stamp: 'eb 12/10/2020 21:28:54'!
assertCanTakeFrom
	
	self subclassResponsibility .!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:34:25'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:34:25'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:34:25'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:34:25'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:34:25'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:34:25'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:34:25'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:34:25'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:34:25'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:34:25'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:34:25'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:34:25'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:34:25'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:34:25'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:34:25'!
ERROR!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:34:25'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:34:25'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:34:25'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:34:32'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:34:32'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:34:32'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:34:32'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:34:32'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:34:32'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:34:32'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:34:32'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:34:32'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:34:32'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:34:32'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:34:32'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:34:32'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:34:32'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:34:32'!
ERROR!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:34:32'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:34:32'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:34:32'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:34:34'!
ERROR!
!Room methodsFor: 'player position - private' stamp: 'eb 12/10/2020 21:37:11' prior: 51042788!
movePlayerTo: aTargetCell

	| player |
	
	player _ cells at: playerCell.
	cells removeKey: playerCell.	
	self putPlayer: player at: aTargetCell .! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:37:14'!
ERROR!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:37:14'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 21:37:14'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:37:19'!
ERROR!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 21:37:40' prior: 51042958!
takeFrom: aNonPortableObject 

	^ self takeUntilBackpackIsFull: (self orderPortableObjects: (aNonPortableObject portableObjects)) from: aNonPortableObject .
! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 21:37:45'!
PASSED!

----SNAPSHOT----(10 December 2020 21:37:51) CuisUniversity-4365.image priorSource: 22742935!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 21:38:54' prior: 51040342!
take: aStageObject

	aStageObject addToBackpackOf: self .! !
!StageObject methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 21:39:12'!
addToBackpackOf: aPlayableCharacter
	
	self subclassResponsibility .! !
!PortableObject methodsFor: 'adding' stamp: 'eb 12/10/2020 21:39:50' overrides: 51043502!
addToBackpackOf: aPlayableCharacter

	aPlayableCharacter addPortableObject: self .! !

!methodRemoval: PortableObject #assertCanAddTo: stamp: 'eb 12/10/2020 21:40:02'!
assertCanAddTo: aBackpack

	self subclassResponsibility	!

!methodRemoval: NonPortableObject #assertCanAddTo: stamp: 'eb 12/10/2020 21:40:19'!
assertCanAddTo: aBackpack 
	
	self error: self class canNotAddNonPortableObjectsErrorDescription.!
!NonPortableObject methodsFor: 'adding - private' stamp: 'eb 12/10/2020 21:40:22' overrides: 51043502!
addToBackpackOf: aPlayableCharacter

	aPlayableCharacter addPortableObject: self .! !
!NonPortableObject methodsFor: 'adding to backpack' stamp: 'eb 12/10/2020 21:41:07' prior: 51043525 overrides: 51043502!
addToBackpackOf: aPlayableCharacter

	stageObjects do: [ :aStageObject |  aPlayableCharacter take: aStageObject ].! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 21:41:33'!
addPortableObject: aPortableObject! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 21:42:13' prior: 51043539!
addPortableObject: aPortableObject
	
	| cell |
	
	cell _ self moveForwardPosition.
	
	((room at: cell) = aPortableObject) ifFalse: [ self error: self class canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription ].

	backpack add: aPortableObject.
	
	room clear: cell.! !
!Room methodsFor: 'testing' stamp: 'eb 12/10/2020 21:42:56' prior: 51040257!
has: aStageObject at: aCell 
	
	^ (self at: aCell) portableObjects includes: aStageObject.! !
!Room methodsFor: 'testing' stamp: 'eb 12/10/2020 21:43:19' prior: 51043556!
has: aStageObject at: aCell 
	
	^ (self at: aCell) = aStageObject.! !
!Room methodsFor: 'testing' stamp: 'eb 12/10/2020 21:43:42'!
hasPortableObject: aPortableObject at: aCell 
	
	^ (self at: aCell) portableObjects includes: aPortableObject.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 21:44:25' prior: 51043544!
addPortableObject: aPortableObject
	
	| cell |
	
	cell _ self moveForwardPosition.
	
	(room hasPortableObject: aPortableObject at: cell) ifFalse: [ self error: self class canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription ].

	backpack add: aPortableObject.
	
	room clear: cell.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:44:40'!
ERROR!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:44:40'!
ERROR!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 21:44:40'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:45:40'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:45:43'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:45:46'!
ERROR!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:45:46'!
ERROR!
!NonPortableObject methodsFor: 'adding to backpack' stamp: 'eb 12/10/2020 21:47:08' prior: 51043532 overrides: 51043502!
addToBackpackOf: aPlayableCharacter
	
	(stageObjects isEmpty) ifTrue: [ self error: self class canNotAddNonPortableObjectsErrorDescription ].
	stageObjects do: [ :aStageObject |  aPlayableCharacter take: aStageObject ].! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:47:14'!
ERROR!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:47:14'!
ERROR!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 21:47:14'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 21:47:14'!
PASSED!
!NonPortableObject methodsFor: 'adding to backpack' stamp: 'eb 12/10/2020 21:47:45'!
addToBackpackOf2: aPlayableCharacter
	
	(stageObjects isEmpty) ifTrue: [ self error: self class canNotAddNonPortableObjectsErrorDescription ].
	stageObjects do: [ :aStageObject |  aPlayableCharacter take: aStageObject ].! !
!NonPortableObject methodsFor: 'adding to backpack' stamp: 'eb 12/10/2020 21:47:53' prior: 51043765 overrides: 51043502!
addToBackpackOf: aPlayableCharacter
	
	self error: self class canNotAddNonPortableObjectsErrorDescription ! !
!NonPortableObject methodsFor: 'adding to backpack' stamp: 'eb 12/10/2020 21:47:54' prior: 51043948 overrides: 51043502!
addToBackpackOf: aPlayableCharacter
	
	self error: self class canNotAddNonPortableObjectsErrorDescription .! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:47:56'!
ERROR!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 21:47:56'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:47:56'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:48:10'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:48:10'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:48:10'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:48:10'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:48:11'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:48:11'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:48:11'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:48:12'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:48:12'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:48:12'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:48:13'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:48:14'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:48:14'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:48:14'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:48:14'!
ERROR!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:48:14'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:48:14'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:48:14'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:48:14'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:48:17'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:48:19'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:48:20'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:48:21'!
ERROR!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:48:21'!
ERROR!

(self at: aCell)!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:49:28'!
ERROR!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:49:28'!
ERROR!
!Room methodsFor: 'testing' stamp: 'eb 12/10/2020 21:51:30' prior: 51043567!
hasPortableObject: aPortableObject at: aCell

	| cellContent |
	
	cellContent _ self at: aCell.
	
	^ cellContent isNotNil and: [ cellContent portableObjects includes: aPortableObject ].! !

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:51:37'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:51:39'!
ERROR!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:51:39'!
ERROR!
!Room methodsFor: 'testing' stamp: 'eb 12/10/2020 21:52:56' prior: 51044236!
hasPortableObject: aPortableObject at: aCell

	| cellContent |
	
	cellContent _ self at: aCell.
	
	cellContent ifNil: [ ^ false ].
	
	^ cellContent portableObjects includes: aPortableObject.! !

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:53:01'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:53:01'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:53:01'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:53:01'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:53:01'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:53:01'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:53:01'!
PASSED!

!methodRemoval: NonPortableObject #addToBackpackOf2: stamp: 'eb 12/10/2020 21:53:57'!
addToBackpackOf2: aPlayableCharacter
	
	(stageObjects isEmpty) ifTrue: [ self error: self class canNotAddNonPortableObjectsErrorDescription ].
	stageObjects do: [ :aStageObject |  aPlayableCharacter take: aStageObject ].!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 21:54:19'!
takePortableObject: aPortableObject
	
	| cell |
	
	cell _ self moveForwardPosition.
	
	(room hasPortableObject: aPortableObject at: cell) ifFalse: [ self error: self class canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription ].

	backpack add: aPortableObject.
	
	room clear: cell.! !
!PortableObject methodsFor: 'as yet unclassified' stamp: 'eb 12/10/2020 21:54:19' prior: 51043508 overrides: 51043502!
addToBackpackOf: aPlayableCharacter

	aPlayableCharacter takePortableObject: self .! !

!methodRemoval: PlayableCharacter #addPortableObject: stamp: 'eb 12/10/2020 21:54:19'!
addPortableObject: aPortableObject
	
	| cell |
	
	cell _ self moveForwardPosition.
	
	(room hasPortableObject: aPortableObject at: cell) ifFalse: [ self error: self class canNotTakePortableObjectsThatAreNotInFrontOfPlayerErrorDescription ].

	backpack add: aPortableObject.
	
	room clear: cell.!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 21:54:22'!
PASSED!

----SNAPSHOT----(10 December 2020 21:54:29) CuisUniversity-4365.image priorSource: 22778966!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:56:34'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 21:56:35'!
PASSED!

----SNAPSHOT----(10 December 2020 21:56:40) CuisUniversity-4365.image priorSource: 22811212!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 21:57:40'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 21:57:41'!
PASSED!

!classRemoval: #PointsPortableObject stamp: 'eb 12/10/2020 21:57:46'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'eb 12/10/2020 21:57:46'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PortableObject stamp: 'eb 12/10/2020 21:57:46'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NonPortableObject stamp: 'eb 12/10/2020 21:57:46'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #StageObject stamp: 'eb 12/10/2020 21:57:47'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Room stamp: 'eb 12/10/2020 21:57:47'!
Object subclass: #Room
	instanceVariableNames: 'width height cells playerCell'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'eb 12/10/2020 21:57:47'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'eb 12/10/2020 21:57:48'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room takeFromNonPortableObjectSelectBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #ISEngineTestsObjectFactory stamp: 'eb 12/10/2020 21:57:48'!
Object subclass: #ISEngineTestsObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Backpack stamp: 'eb 12/10/2020 21:57:49'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #RoomTest stamp: 'eb 12/10/2020 21:57:49'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'eb 12/10/2020 21:57:49'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: 'testsObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NonPortableObjectTest stamp: 'eb 12/10/2020 21:57:50'!
TestCase subclass: #NonPortableObjectTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #BackpackTest stamp: 'eb 12/10/2020 21:57:50'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

----End fileIn of C:\Users\ebonansea\Desktop\ISW1-2020-2C-2doParcial.st----!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 21:58:22'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 21:58:22'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 21:59:32'!
test19_canNotTakeFromAPortableObject

	| room playableCharacter paper |
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper).
	! !
!PlayableCharacterTest methodsFor: 'tests - taking' stamp: 'eb 12/10/2020 22:00:42' prior: 51046757!
test19_canNotTakeFromAPortableObject

	| room playableCharacter paper |
	
	paper _ NoPointsPortableObject named: 'Paper' weighing: 1.
	room _ testsObjectsFactory defaultRoom put: paper at: 4@0; yourself. 
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 4@1 heading: #South on: room .
	
	self 
		should: [ playableCharacter takeFrom: paper. self fail]
		raise: Error
		withMessageText: PortableObject canNotTakeFromPortableObject.
	
! !

!testRun: #PlayableCharacterTest #test19_canNotTakeFromAPortableObject stamp: 'eb 12/10/2020 22:00:43'!
ERROR!

!testRun: #PlayableCharacterTest #test19_canNotTakeFromAPortableObject stamp: 'eb 12/10/2020 22:00:43'!
ERROR!
!PortableObject class methodsFor: 'error descriptions' stamp: 'eb 12/10/2020 22:01:02'!
canNotTakeFromPortableObject
	self shouldBeImplemented.! !
!PortableObject class methodsFor: 'error descriptions' stamp: 'eb 12/10/2020 22:01:13' prior: 51046799!
canNotTakeFromPortableObject
	
	^ 'Can not take from portable object'.! !

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 22:01:15'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 22:01:15'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 22:01:15'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 22:01:15'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 22:01:15'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 22:01:15'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 22:01:15'!
PASSED!

!testRun: #PlayableCharacterTest #test19_canNotTakeFromAPortableObject stamp: 'eb 12/10/2020 22:01:15'!
FAILURE!

!testRun: #PlayableCharacterTest #test19_canNotTakeFromAPortableObject stamp: 'eb 12/10/2020 22:01:15'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 22:02:20' prior: 51046014!
takeFrom: aStageObject

	^ aStageObject addContentToBackpackOf: self. 

! !
!StageObject methodsFor: 'adding to backpack' stamp: 'eb 12/10/2020 22:02:29'!
addContentToBackpackOf: aPlayableCharacter
	
	self subclassResponsibility .! !
!NonPortableObject methodsFor: 'adding to backpack' stamp: 'eb 12/10/2020 22:03:03' overrides: 51046855!
addContentToBackpackOf: aPlayableCharacter
	
	^ aPlayableCharacter takeUntilBackpackIsFull: (aPlayableCharacter orderPortableObjects: (self portableObjects)) from: self .
! !
!PortableObject methodsFor: 'adding to backpack' stamp: 'eb 12/10/2020 22:03:32' overrides: 51046855!
addContentToBackpackOf: aPlayableCharacter

	self error: self class canNotTakeFromPortableObject .! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #PlayableCharacterTest #test19_canNotTakeFromAPortableObject stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 22:03:35'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 22:03:35'!
PASSED!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'eb 12/10/2020 22:04:38'!
takeFromNonPortableObject: aNonPortableObject

	^ self takeUntilBackpackIsFull: (self orderPortableObjects: (aNonPortableObject portableObjects)) from: aNonPortableObject .
! !
!NonPortableObject methodsFor: 'adding to backpack' stamp: 'eb 12/10/2020 22:04:56' prior: 51046861 overrides: 51046855!
addContentToBackpackOf: aPlayableCharacter
	
	^ aPlayableCharacter takeFromNonPortableObject: self.
! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #NonPortableObjectTest #test01NonPortableObjectCouldBeEmpty stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #NonPortableObjectTest #test02NonPortableObjectCouldHaveOneStageObject stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #NonPortableObjectTest #test03NonPortableObjectCouldHaveManyStageObjects stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #NonPortableObjectTest #test04NonPortableObjectHasItsPortableObjectsAndThoseOfTheirChildren stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canNotCreatePlayableCharacterOnInvalidRoomCell stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canTakePortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canNotTakeNonPortableObjectsInFrontOfPlayer stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canNotTakePortableObjectsThatAreNotInFrontOfPlayer stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test14_whenPlayerTakesAPortableObjectFromRoomItStartsToBeIntoItsBackpackAndIsNotInRoomAnymore stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playerCanTakeAllPortableObjectsInNonPortableObjectsUntilItsBackpackCapacityIsFull stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test16_whenPlayerTakesAPortableObjectFromNonPortableObjectItStartsToBeIntoItsBackpackAndIsNotInNonPortableObjectAnymore stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playerCanNotMoveToOccupiedCell stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test18_canNotCreatePlayableCharacterOnOccupiedRoomCell stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #PlayableCharacterTest #test19_canNotTakeFromAPortableObject stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #RoomTest #test01RoomHeightIsAtLeastOne stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #RoomTest #test02RoomWidthIsAtLeastOne stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #RoomTest #test03RoomCouldHaveOccupiedCells stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #RoomTest #test04WhenPuttingSomethingInRoomPositionShouldBeValid stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

!testRun: #RoomTest #test05WhenPuttingSomethingInRoomPositionShouldBeEmpty stamp: 'eb 12/10/2020 22:04:59'!
PASSED!

----SNAPSHOT----(10 December 2020 22:05:05) CuisUniversity-4365.image priorSource: 22816480!