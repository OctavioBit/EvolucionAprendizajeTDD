----End fileIn of /Users/monteagudo/Downloads/ISW1-2020-2C-2doParcial.st----!

!classRemoval: #Door stamp: 'HG 12/10/2020 10:49:05'!
StageObject subclass: #Door
	instanceVariableNames: 'state key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #OpenedDoorState stamp: 'HG 12/10/2020 10:49:05'!
DoorState subclass: #OpenedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #KeyClosedDoorState stamp: 'HG 12/10/2020 10:49:06'!
DoorState subclass: #KeyClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #ClosedDoorState stamp: 'HG 12/10/2020 10:49:06'!
DoorState subclass: #ClosedDoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #DoorState stamp: 'HG 12/10/2020 10:49:06'!
Object subclass: #DoorState
	instanceVariableNames: 'door'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #DoorTest stamp: 'HG 12/10/2020 10:49:07'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

----End fileIn of /Users/monteagudo/Downloads/ISW1-2020-2C-2doParcial.st----!

!classRemoval: #MarsRoverHeadingWest stamp: 'HG 12/10/2020 10:51:42'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'HG 12/10/2020 10:51:43'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'HG 12/10/2020 10:51:43'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #MarsRoverHeadingEast stamp: 'HG 12/10/2020 10:51:46'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #MarsRoverHeading stamp: 'HG 12/10/2020 10:51:46'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #MarsRover stamp: 'HG 12/10/2020 10:51:46'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head lastMovement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #MarsRoverTest stamp: 'HG 12/10/2020 10:51:47'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #PointsPortableObject stamp: 'HG 12/10/2020 10:51:51'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'HG 12/10/2020 10:51:51'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PortableObject stamp: 'HG 12/10/2020 10:51:51'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #StageObject stamp: 'HG 12/10/2020 10:51:52'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'HG 12/10/2020 10:51:52'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'HG 12/10/2020 10:51:53'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Backpack stamp: 'HG 12/10/2020 10:51:53'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'HG 12/10/2020 10:51:54'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #BackpackTest stamp: 'HG 12/10/2020 10:51:54'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

----End fileIn of /Users/monteagudo/Downloads/ISW1-2020-2C-2doParcial.st----!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 11:57:19'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 11:57:19'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 11:57:19'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 11:57:19'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 11:57:19'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 11:57:19'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 11:57:19'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 11:57:19'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 11:57:19'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 11:57:20'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 11:57:20'!
PASSED!
!PlayableCharacter class methodsFor: 'initialization' stamp: 'HG 12/10/2020 13:28:45' prior: 50926047 overrides: 16883149!
initialize
	Halt
	self initializeHeadings! !
!PlayableCharacter class methodsFor: 'initialization' stamp: 'HG 12/10/2020 13:28:47' prior: 50926318 overrides: 16883149!
initialize
	Halt.
	self initializeHeadings! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 13:28:49'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 13:28:49'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 13:28:49'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 13:28:49'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 13:28:49'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 13:28:49'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 13:28:49'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 13:28:49'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 13:28:49'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 13:28:49'!
PASSED!
!PlayableCharacter class methodsFor: 'initialization' stamp: 'HG 12/10/2020 13:29:01' prior: 50926324 overrides: 16883149!
initialize
	self halt.
	self initializeHeadings! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 13:29:02'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 13:29:02'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 13:29:02'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 13:29:02'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 13:29:02'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 13:29:02'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 13:29:02'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 13:29:02'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 13:29:02'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 13:29:02'!
PASSED!
!PlayableCharacter class methodsFor: 'initialization' stamp: 'HG 12/10/2020 13:29:05' prior: 50926368 overrides: 16883149!
initialize
	self initializeHeadings! !

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 17:26:56'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: #Unknown stamp: 'HG 12/10/2020 17:33:40'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Unknown'!
!RoomTest methodsFor: 'nil' stamp: 'HG 12/10/2020 17:34:48'!
test01
	
	"
	self should: [room _ Room widthSize: 0 heightSize: 0.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | Room invalidSizeSignal = anError messageText.].
		
	"! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 17:35:04' prior: 50926434!
test01
	
	
	"
	self should: [room _ Room widthSize: 0 heightSize: 0.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | Room invalidSizeSignal = anError messageText.].
		
	"! !

!classRemoval: #Room stamp: 'HG 12/10/2020 17:35:47'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Unknown'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 17:36:30' prior: 50926444!
test01
	"
	room _ Room widthSize: 1 heightSize: 1.
	
	
	self should: [room _ Room widthSize: 0 heightSize: 0.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | Room invalidSizeSignal = anError messageText.].
		
	"! !

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 17:38:41'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 17:38:34' prior: 50926459!
test01
	
	| playableCharacter room |
	room _ Room widthSize: 1 heightSize: 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: PlayableCharacterTest defaultBackpack at: 0@0 heading: #North into: room.
	
	self assert: (playableCharacter atRoom: room).
	
	"
	self should: [room _ Room widthSize: 0 heightSize: 0.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | Room invalidSizeSignal = anError messageText.].
		
	"! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:38:54'!
ERROR!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:39:11'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'HG 12/10/2020 17:39:18'!
widthSize: aSmallInteger heightSize: aSmallInteger2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWidthSize: aSmallInteger heightSize: aSmallInteger2 ! !
!Room class methodsFor: 'instance creation' stamp: 'HG 12/10/2020 17:39:43' prior: 50926498!
widthSize: aWidthSize heightSize: aHeigthSize 
	^self new initializeWidthSize: aWidthSize heightSize: aHeigthSize. ! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:39:46'!
ERROR!

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 17:39:56'!
Object subclass: #Room
	instanceVariableNames: 'widthSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 17:39:56'!
Object subclass: #Room
	instanceVariableNames: 'widthSize heigthSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'HG 12/10/2020 17:39:56'!
initializeWidthSize: aWidthSize heightSize: aHeigthSize 
	self shouldBeImplemented.
	widthSize := aWidthSize.
	heigthSize := aHeigthSize.! !
!Room methodsFor: 'initialization' stamp: 'HG 12/10/2020 17:40:14' prior: 50926532!
initializeWidthSize: aWidthSize heightSize: aHeigthSize 
	widthSize := aWidthSize.
	heigthSize := aHeigthSize.! !

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 17:40:26'!
Object subclass: #Room
	instanceVariableNames: 'width heigthSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 17:40:26' prior: 50926540!
initializeWidthSize: aWidthSize heightSize: aHeigthSize 
	width := aWidthSize.
	heigthSize := aHeigthSize.! !

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 17:40:30'!
Object subclass: #Room
	instanceVariableNames: 'width height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 17:40:30' prior: 50926554!
initializeWidthSize: aWidthSize heightSize: aHeigthSize 
	width := aWidthSize.
	height := aHeigthSize.! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:40:35'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 17:40:57' prior: 50926477!
test01
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self assert: (playableCharacter atRoom: room).
	
	"
	self should: [room _ Room widthSize: 0 heightSize: 0.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | Room invalidSizeSignal = anError messageText.].
		
	"! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:40:59'!
ERROR!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'HG 12/10/2020 17:41:08'!
named: aString using: aBackpack at: aPoint heading: aSymbol into: aRoom 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString using: aBackpack at: aPoint heading: aSymbol into: aRoom ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'HG 12/10/2020 17:41:16' prior: 50926598!
named: aString using: aBackpack at: aPoint heading: aSymbol into: aRoom 
	^self new initializeNamed: aString using: aBackpack at: aPoint heading: aSymbol into: aRoom ! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:41:20'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 17:41:56'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 17:41:56'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 17:41:56'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 17:41:56'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 17:41:56'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 17:41:56'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 17:41:56'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 17:41:56'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 17:41:56'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 17:41:56'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:42:04'!
ERROR!

!classDefinition: #PlayableCharacter category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 17:42:10'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name string'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacter category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 17:42:10'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name string point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacter category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 17:42:10'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name string point symbol'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacter category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 17:42:10'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name string point symbol room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 17:42:10'!
initializeNamed: aString using: aBackpack at: aPoint heading: aSymbol into: aRoom 
	self shouldBeImplemented.
	string := aString.
	backpack := aBackpack.
	point := aPoint.
	symbol := aSymbol.
	room := aRoom.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 17:42:41' prior: 50926699!
initializeNamed: aName using: aBackpack at: aPoint heading: aCardinalPoint into: aRoom 
	string := aName.
	backpack := aBackpack.
	point := aPoint.
	symbol := aCardinalPoint.
	room := aRoom.! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:42:42'!
ERROR!
!PlayableCharacter methodsFor: 'accessing' stamp: 'HG 12/10/2020 17:42:56'!
atRoom: aRoom 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'accessing' stamp: 'HG 12/10/2020 17:43:23' prior: 50926720!
atRoom: aRoom 
	^(aRoom = room)! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:43:24'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:43:24'!
PASSED!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'HG 12/10/2020 17:44:29' prior: 50926610!
named: aString using: aBackpack at: aPoint heading: aCardinalPoint into: aRoom 
| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	^self new initializeNamed: aString using: aBackpack at: aPoint heading: newHeading into: aRoom ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'HG 12/10/2020 17:44:37' prior: 50926734!
named: aString using: aBackpack at: aPoint heading: aCardinalPoint into: aRoom 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	^self new initializeNamed: aString using: aBackpack at: aPoint heading: newHeading into: aRoom ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'HG 12/10/2020 17:44:41' prior: 50926745!
named: aString using: aBackpack at: aPoint heading: aCardinalPoint into: aRoom 
	
	| newHeading |
	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aString using: aBackpack at: aPoint heading: newHeading into: aRoom ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'HG 12/10/2020 17:44:54' prior: 50926757!
named: aName using: aBackpack at: aPoint heading: aCardinalPoint into: aRoom 
	
	| newHeading |
	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPoint heading: newHeading into: aRoom ! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 17:47:06' prior: 50925962!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 	

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 17:47:40' prior: 50926709!
initializeNamed: aName using: aBackpack at: aPoint heading: aCardinalPoint into: aRoom 
	string := aName.
	backpack := aBackpack.
	point := aPoint.
	symbol := aCardinalPoint.
	room := aRoom.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 17:47:43' prior: 50926789!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	string := aName.
	backpack := aBackpack.
	point := aPoint.
	symbol := aHeading.
	room := aRoom.! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'HG 12/10/2020 17:48:30' prior: 50926026!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading defaultRoom |

	newHeading := self headingFor: aCardinalPoint.
	defaultRoom := RoomTest defaultRoom.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading into: defaultRoom.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 17:48:32'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 17:48:32'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 17:48:32'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 17:48:32'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 17:48:32'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 17:48:32'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 17:48:32'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 17:48:32'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 17:48:32'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 17:48:32'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 17:48:34'!
ERROR!
!RoomTest methodsFor: 'nil' stamp: 'HG 12/10/2020 17:49:02'!
defaultRoom
	
	^Room widthSize: 1 heightSize: 1.! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:49:03'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'HG 12/10/2020 17:49:06'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'HG 12/10/2020 17:49:08'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'HG 12/10/2020 17:49:08'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'HG 12/10/2020 17:49:08'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'HG 12/10/2020 17:49:08'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'HG 12/10/2020 17:49:08'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'HG 12/10/2020 17:49:08'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'HG 12/10/2020 17:49:08'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'HG 12/10/2020 17:49:08'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'HG 12/10/2020 17:49:08'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'HG 12/10/2020 17:49:08'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'HG 12/10/2020 17:49:08'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'HG 12/10/2020 17:49:08'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'HG 12/10/2020 17:49:08'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'HG 12/10/2020 17:49:08'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'HG 12/10/2020 17:49:08'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'HG 12/10/2020 17:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 17:49:12'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 17:49:12'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 17:49:12'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 17:49:12'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 17:49:12'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 17:49:12'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 17:49:12'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 17:49:12'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 17:49:12'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 17:49:12'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 17:49:12'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 17:49:18'!
ERROR!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'HG 12/10/2020 17:49:34' prior: 50926808!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading defaultRoom |

	newHeading := self headingFor: aCardinalPoint.
	defaultRoom := RoomTest new defaultRoom.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading into: defaultRoom.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 17:49:35'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 17:49:35'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 17:49:35'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 17:49:35'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 17:49:35'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 17:49:35'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 17:49:35'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 17:49:35'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 17:49:35'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 17:49:35'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 17:49:37'!
ERROR!
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 17:50:34' prior: 50926799!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	string := aName.
	backpack := aBackpack.
	point := aPoint.
	heading := aHeading.
	room := aRoom.! !

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 17:50:37'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 17:50:37'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 17:50:37'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 17:50:37'!
FAILURE!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 17:50:37'!
FAILURE!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 17:50:37'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 17:50:37'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 17:50:37'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 17:50:37'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 17:50:37'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 17:50:37'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 17:51:00'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 17:51:00'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 17:51:04'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 17:51:08'!
ERROR!

heading forwardPoint!
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 17:53:50' prior: 50927033!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	string := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.! !

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 17:53:53'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 17:53:53'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 17:53:53'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 17:53:53'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 17:53:53'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 17:53:53'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 17:53:53'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 17:53:53'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 17:53:53'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 17:53:53'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 17:53:53'!
PASSED!

Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name string room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacter category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 17:54:00'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name string room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!methodRemoval: PlayableCharacter #initializeNamed:using:at:heading: stamp: 'HG 12/10/2020 17:54:07'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 	

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading!

Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacter category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 17:54:22'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 17:54:25' prior: 50927100!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 17:54:26'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 17:54:26'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 17:54:26'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 17:54:26'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 17:54:26'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 17:54:26'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 17:54:26'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 17:54:26'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 17:54:26'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 17:54:26'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 17:54:56'!
test02
	
	self should: [ | room |room _ Room widthSize: 0 heightSize: 0.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | Room invalidSizeSignal = anError messageText.].! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 17:55:06' prior: 50927237!
test02
	
	self should: [ Room widthSize: 0 heightSize: 0. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | Room invalidSizeSignal = anError messageText.].! !

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 17:55:09'!
FAILURE!
!Room methodsFor: 'initialization' stamp: 'HG 12/10/2020 17:56:10' prior: 50926568!
initializeWidthSize: aWidthSize heightSize: aHeigthSize 

	(aWidthSize = 0 or: aHeigthSize = 0)
		ifTrue: [self invalidSizeSignal].
	width := aWidthSize.
	height := aHeigthSize.! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:56:16'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 17:56:16'!
ERROR!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 17:56:16'!
ERROR!
!Room methodsFor: 'error handling' stamp: 'HG 12/10/2020 17:56:24'!
invalidSizeSignal
	self shouldBeImplemented.! !
!Room methodsFor: 'error handling' stamp: 'HG 12/10/2020 17:56:41' prior: 50927273!
invalidSizeSignal
	self error: self class invalidSizeErrorDescription.! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:56:42'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 17:56:42'!
ERROR!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 17:56:42'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'HG 12/10/2020 17:57:01'!
invalidSizeErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'HG 12/10/2020 17:57:11' prior: 50927290!
invalidSizeErrorDescription
	^'Invalid Size of Room'.! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:57:12'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 17:57:12'!
ERROR!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 17:57:12'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 17:57:30' prior: 50927247!
test02
	
	self should: [ Room widthSize: 0 heightSize: 0. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | Room new invalidSizeSignal = anError messageText.].! !

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 17:57:31'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 17:57:48' prior: 50927307!
test02
	
	self should: [ Room widthSize: 0 heightSize: 0. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | Room invalidSizeSignal = anError messageText.].! !

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 17:57:48'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 17:58:00' prior: 50927318!
test02
	
	self should: [ Room widthSize: 0 heightSize: 0. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | Room invalidSizeErrorDescription = anError messageText.].! !

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 17:58:01'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:58:01'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 17:58:01'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 17:58:26'!
test03
	
	self should: [ Room widthSize: -2 heightSize: 2. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | Room invalidSizeErrorDescription = anError messageText.].! !

!testRun: #RoomTest #test03 stamp: 'HG 12/10/2020 17:58:28'!
FAILURE!
!Room methodsFor: 'initialization' stamp: 'HG 12/10/2020 17:58:42' prior: 50927258!
initializeWidthSize: aWidthSize heightSize: aHeigthSize 

	(aWidthSize <= 0 or: aHeigthSize <= 0)
		ifTrue: [self invalidSizeSignal].
	width := aWidthSize.
	height := aHeigthSize.! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:58:43'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 17:58:43'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'HG 12/10/2020 17:58:43'!
PASSED!
!Room methodsFor: 'initialization' stamp: 'HG 12/10/2020 17:59:02'!
assertValidWidth: aWidthSize andHeight: aHeigthSize

	^ (aWidthSize <= 0 or: aHeigthSize <= 0)
		ifTrue: [self invalidSizeSignal]! !
!Room methodsFor: 'initialization' stamp: 'HG 12/10/2020 17:59:02' prior: 50927356!
initializeWidthSize: aWidthSize heightSize: aHeigthSize 

	self assertValidWidth: aWidthSize andHeight: aHeigthSize.
	width := aWidthSize.
	height := aHeigthSize.! !
!Room methodsFor: 'initialization' stamp: 'HG 12/10/2020 17:59:04' prior: 50927378!
initializeWidthSize: aWidthSize heightSize: aHeigthSize 

	self assertValidWidth: aWidthSize andHeight: aHeigthSize.
	
	width := aWidthSize.
	height := aHeigthSize.! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 17:59:05'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 17:59:05'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'HG 12/10/2020 17:59:05'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 17:59:21' prior: 50926577!
test01
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self assert: (playableCharacter atRoom: room).
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:00:55'!
test04
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self assert: (playableCharacter atRoom: room).
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:02:44' prior: 50927414!
test04
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	
	self should: [ playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 3@3 heading: #North into: room. ]
		 raise: Error - MessageNotUnderstood 
		 withExceptionDo: [ :anError | anError messageText = Room invalidPositionPlayerInitialization.
			 							   self deny: (playableCharacter atRoom: room)].
	
	
	! !

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:02:46'!
FAILURE!
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:04:24' prior: 50927190!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 

	
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.! !
!Room methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:04:35' prior: 50927386!
initializeWidthSize: aWidthSize heightSize: aHeigthSize 

	self assertValidWidth: aWidthSize andHeight: aHeigthSize.
	
	
	width := aWidthSize.
	height := aHeigthSize.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:04:40' prior: 50927449!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 

	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.! !

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 18:05:03'!
Object subclass: #Room
	instanceVariableNames: 'width height size'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:05:01' prior: 50927458!
initializeWidthSize: aWidthSize heightSize: aHeigthSize 

	self assertValidWidth: aWidthSize andHeight: aHeigthSize.
	size _ aWidthSize@aHeigthSize. 
	
	"
	width := aWidthSize.
	height := aHeigthSize.
	"! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:05:13' prior: 50927467!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 

	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.! !
!Room methodsFor: 'accesing' stamp: 'HG 12/10/2020 18:05:27' overrides: 16880927!
size
	^size.! !
!Room methodsFor: 'accesing' stamp: 'HG 12/10/2020 18:05:31' prior: 50927503 overrides: 16880927!
size
	^size copy.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:06:13' prior: 50927494!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	aRoom size >= aPoint.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:06:14'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 18:06:14'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 18:06:14'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 18:06:14'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 18:06:14'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 18:06:14'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 18:06:14'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 18:06:14'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 18:06:14'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 18:06:14'!
PASSED!
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:06:44' prior: 50927511!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	(aRoom size <= aPoint) ifTrue: [ Room invalidSizeErrorDescription ].
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:06:55' prior: 50927559!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	(aRoom size <= aPoint) ifTrue: [ Room invalidPositionPlayerInitialization. ].
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:06:57'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 18:06:57'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 18:06:57'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 18:06:57'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 18:06:57'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 18:06:57'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 18:06:57'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 18:06:57'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 18:06:57'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 18:06:57'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:07:01'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 18:07:30'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'HG 12/10/2020 18:07:42'!
invalidPositionPlayerInitialization
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'HG 12/10/2020 18:07:51' prior: 50927628!
invalidPositionPlayerInitialization
	^'Invalid Player position initialization'.! !

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 18:07:52'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:07:52'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 18:07:52'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 18:07:52'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 18:07:52'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 18:07:52'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 18:07:52'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 18:07:52'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 18:07:52'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 18:07:52'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 18:07:52'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:07:57'!
FAILURE!
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:09:09' prior: 50927571!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	(aRoom size <= aPoint) ifTrue: [ ^Room invalidPositionPlayerInitialization. ].
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:09:10'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 18:09:10'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 18:09:10'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 18:09:10'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 18:09:10'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 18:09:10'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 18:09:10'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 18:09:10'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 18:09:10'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 18:09:10'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:09:29' prior: 50926862!
defaultRoom
	
	^Room widthSize: 20 heightSize: 20.! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:09:30'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 18:09:30'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'HG 12/10/2020 18:09:30'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:09:30'!
FAILURE!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:09:30'!
FAILURE!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 18:09:40'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:09:40'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 18:09:40'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 18:09:40'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 18:09:40'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 18:09:40'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 18:09:40'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 18:09:40'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 18:09:40'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 18:09:40'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 18:09:40'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:09:44'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:09:44'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 18:09:44'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'HG 12/10/2020 18:09:44'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:09:44'!
FAILURE!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:09:44'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:10:05' prior: 50927428!
test04
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	
	self should: [ playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 3@3 heading: #North into: room. ]
		 raise: Error - MessageNotUnderstood 
		 withExceptionDo: [ :anError | anError messageText = Room invalidPositionPlayerInitialization.
			 							   ].
	
	
	! !

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:10:09'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:10:16' prior: 50927805!
test04
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	
	self should: [ playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 3@3 heading: #North into: room. ]
		 raise: Error - MessageNotUnderstood 
		 withExceptionDo: [ :anError | anError messageText = Room invalidPositionPlayerInitialization. ].
	
	
	! !

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:10:20'!
FAILURE!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:11:26'!
FAILURE!

!methodRemoval: Room #invalidSizeSignal stamp: 'HG 12/10/2020 18:11:36'!
invalidSizeSignal
	self error: self class invalidSizeErrorDescription.!
!Room class methodsFor: 'error messages' stamp: 'HG 12/10/2020 18:12:03'!
invalidPositionPlayerInitializationErrorDescription
	^'Invalid Player position initialization'.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:12:03' prior: 50927684!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	(aRoom size <= aPoint) ifTrue: [ ^Room invalidPositionPlayerInitializationErrorDescription. ].
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:12:03' prior: 50927825!
test04
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	
	self should: [ playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 3@3 heading: #North into: room. ]
		 raise: Error - MessageNotUnderstood 
		 withExceptionDo: [ :anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. ].
	
	
	! !

!methodRemoval: Room class #invalidPositionPlayerInitialization stamp: 'HG 12/10/2020 18:12:03'!
invalidPositionPlayerInitialization
	^'Invalid Player position initialization'.!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:12:09'!
FAILURE!
!Room methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:12:57' prior: 50927371!
assertValidWidth: aWidthSize andHeight: aHeigthSize

	^ (aWidthSize <= 0 or: aHeigthSize <= 0)
		ifTrue: [self invalidSizeErrorDescription ]! !
!Room methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:12:58' prior: 50927894!
assertValidWidth: aWidthSize andHeight: aHeigthSize

	^ (aWidthSize <= 0 or: aHeigthSize <= 0)
		ifTrue: [self invalidSizeErrorDescription]! !
!Room methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:13:03' prior: 50927902!
assertValidWidth: aWidthSize andHeight: aHeigthSize

	^ (aWidthSize <= 0 or: aHeigthSize <= 0)
		ifTrue: [^self invalidSizeErrorDescription]! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:13:11'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:13:11'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 18:13:11'!
ERROR!

!testRun: #RoomTest #test03 stamp: 'HG 12/10/2020 18:13:11'!
ERROR!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:13:11'!
FAILURE!
!Room methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:13:40' prior: 50927910!
assertValidWidth: aWidthSize andHeight: aHeigthSize

	^ (aWidthSize <= 0 or: aHeigthSize <= 0)
		ifTrue: [self invalideSizeSignal. ]! !
!Room methodsFor: 'error handling' stamp: 'HG 12/10/2020 18:13:58'!
invalidSizeSignal
	^self error: self class invalidSizeErrorDescription. ! !
!Room methodsFor: 'error handling' stamp: 'HG 12/10/2020 18:14:12'!
invalidPlayerPositionInitialization
	^self error: self class invalidPositionPlayerInitializationErrorDescription . ! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:14:37' prior: 50927857!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	(aRoom size <= aPoint) ifTrue: [ aRoom invalidSizeSignal. ].
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:14:37'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 18:14:38'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 18:14:38'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 18:14:38'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 18:14:38'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 18:14:38'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 18:14:38'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 18:14:38'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 18:14:38'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 18:14:38'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:14:41'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:14:41'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 18:14:41'!
ERROR!

!testRun: #RoomTest #test03 stamp: 'HG 12/10/2020 18:14:41'!
ERROR!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:14:41'!
PASSED!
!Room methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:14:55' prior: 50927929!
assertValidWidth: aWidthSize andHeight: aHeigthSize

	^ (aWidthSize <= 0 or: aHeigthSize <= 0)
		ifTrue: [self invalidSizeSignal . ]! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:14:56'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 18:14:56'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'HG 12/10/2020 18:14:56'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:14:56'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:21:13' prior: 50927401!
test01
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self assert: (room atPosition: 0@0) equals: PlayableCharacter.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:21:20' prior: 50928024!
test01
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:21:21'!
ERROR!
!Room methodsFor: 'accesing' stamp: 'HG 12/10/2020 18:21:26'!
atPosition: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'accesing' stamp: 'HG 12/10/2020 18:21:34' prior: 50928053!
atPosition: aPoint 
	"
	self shouldBeImplemented.
	"! !
!Room methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:21:53' prior: 50927484!
initializeWidthSize: aWidthSize heightSize: aHeigthSize 

	self assertValidWidth: aWidthSize andHeight: aHeigthSize.
	size _ aWidthSize@aHeigthSize. 
	! !

----SNAPSHOT----(10 December 2020 18:23:21) CuisUniversity-4137.image priorSource: 18679132!
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:25:42' prior: 50927948!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	(aRoom size <= aPoint) ifTrue: [ aRoom invalidSizeSignal. ].
	
	aRoom insertPlayerAtPosition: aPoint.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.
	
	! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:26:04'!
assertValidPoint: aRoom for: aPoint

	^ (aRoom size <= aPoint) ifTrue: [ aRoom invalidSizeSignal. ]! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:26:04' prior: 50928073!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	self assertValidPoint: aRoom for: aPoint.
	
	aRoom insertPlayerAtPosition: aPoint.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:26:10'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 18:26:10'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 18:26:10'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 18:26:10'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 18:26:10'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 18:26:10'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 18:26:10'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 18:26:10'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 18:26:10'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 18:26:10'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:26:18'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 18:26:18'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 18:26:18'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 18:26:18'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 18:26:18'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 18:26:18'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 18:26:18'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 18:26:18'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 18:26:18'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 18:26:18'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:26:19'!
ERROR!
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:26:44' prior: 50928092!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	self assertValidPoint: aRoom for: aPoint.
	
	aRoom insert: self atPosition: aPoint.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:26:45'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 18:26:45'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 18:26:45'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 18:26:45'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 18:26:45'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 18:26:45'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 18:26:45'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 18:26:45'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 18:26:45'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 18:26:45'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:26:47'!
ERROR!
!Room methodsFor: 'positions adding' stamp: 'HG 12/10/2020 18:27:03'!
insert: aPlayableCharacter atPosition: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 18:27:26'!
Object subclass: #Room
	instanceVariableNames: 'width height size positions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'positions adding' stamp: 'HG 12/10/2020 18:27:23' prior: 50928237!
insert: aPlayableCharacter atPosition: aPoint 
	
	positions put: aPlayableCharacter at: aPoint.! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:27:29'!
ERROR!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 18:27:29'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'HG 12/10/2020 18:27:29'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:27:29'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:27:29'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:27:48' prior: 50928062!
initializeWidthSize: aWidthSize heightSize: aHeigthSize 

	self assertValidWidth: aWidthSize andHeight: aHeigthSize.
	size _ aWidthSize@aHeigthSize. 
	positions _ Dictionary new.
	! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:27:49'!
ERROR!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 18:27:49'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'HG 12/10/2020 18:27:49'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:27:49'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:27:49'!
ERROR!
!Room methodsFor: 'positions adding' stamp: 'HG 12/10/2020 18:29:37' prior: 50928251!
insert: aPlayableCharacter atPosition: aPoint 
	
	positions at: aPoint.! !
!Room methodsFor: 'positions adding' stamp: 'HG 12/10/2020 18:30:09' prior: 50928288!
insert: aPlayableCharacter atPosition: aPoint 
	
	positions at: aPoint put: aPlayableCharacter . ! !
!Room methodsFor: 'positions adding' stamp: 'HG 12/10/2020 18:30:10' prior: 50928294!
insert: aPlayableCharacter atPosition: aPoint 
	
	positions at: aPoint put: aPlayableCharacter. ! !

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:30:21'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:30:21'!
FAILURE!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 18:30:21'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'HG 12/10/2020 18:30:21'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:30:21'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:30:21'!
FAILURE!
!Room methodsFor: 'accesing' stamp: 'HG 12/10/2020 18:30:43' prior: 50928057!
atPosition: aPoint 
	
	positions at: aPoint.! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:30:46'!
FAILURE!

(room atPosition: 0@0)!
!Room methodsFor: 'accesing' stamp: 'HG 12/10/2020 18:32:09' prior: 50928319!
atPosition: aPoint 
	
	^positions at: aPoint.! !

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:32:12'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:32:15'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:32:15'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 18:32:15'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'HG 12/10/2020 18:32:15'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:32:15'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:32:28'!
test05
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:32:40' prior: 50928344!
test05
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 3 heightSize: 3.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:32:47' prior: 50928358!
test05
	
	| playableCharacter room defaultBackpack anotherPlayableCharacter |
	room _ Room widthSize: 3 heightSize: 3.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	anotherPlayableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:34:16' prior: 50928372!
test05
	
	| playableCharacter room defaultBackpack anotherPlayableCharacter |
	room _ Room widthSize: 3 heightSize: 3.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ anotherPlayableCharacter := PlayableCharacter named: 'Mario' using: defaultBackpack at: 0@0 heading: #South into: room. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
										self assert: (room atPosition: 0@0) equals: playableCharacter.].
	
	
	! !

!testRun: #RoomTest #test05 stamp: 'HG 12/10/2020 18:34:19'!
FAILURE!
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:35:07'!
insertIn: aPoint atPosition: aRoom

	^ aRoom insert: self atPosition: aPoint! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:35:07' prior: 50928184!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	self assertValidPoint: aRoom for: aPoint.
	
	self insertIn: aPoint atPosition: aRoom.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.
	
	! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:35:15' prior: 50928423!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	self assertValidPoint: aRoom for: aPoint.
	self insertIn: aPoint atPosition: aRoom.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.
	
	! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:36:12' prior: 50928435!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	self assertValidPoint: aRoom for: aPoint.
	((aRoom positions keys) includes: aPoint)
		ifTrue: []
	self insertIn: aPoint atPosition: aRoom.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.
	
	! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:36:25' prior: 50928447!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	self assertValidPoint: aRoom for: aPoint.
	((aRoom positions keys) includes: aPoint)
		ifTrue: [aRoom invalidSizeSignal.].
	self insertIn: aPoint atPosition: aRoom.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:36:26'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 18:36:26'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 18:36:26'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 18:36:26'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 18:36:26'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 18:36:26'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 18:36:26'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 18:36:26'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 18:36:26'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 18:36:26'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:36:30'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 18:36:30'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 18:36:30'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 18:36:30'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 18:36:30'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 18:36:30'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 18:36:30'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 18:36:30'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 18:36:30'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 18:36:30'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:36:31'!
ERROR!
!Room methodsFor: 'accesing' stamp: 'HG 12/10/2020 18:36:36'!
positions
	self shouldBeImplemented.
	^positions! !
!Room methodsFor: 'accesing' stamp: 'HG 12/10/2020 18:36:40' prior: 50928555!
positions
	^positions copy.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:36:42'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 18:36:45'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 18:36:45'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 18:36:45'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 18:36:45'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 18:36:45'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 18:36:45'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 18:36:45'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 18:36:45'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 18:36:45'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 18:36:45'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'HG 12/10/2020 18:36:51'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:36:51'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 18:36:51'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'HG 12/10/2020 18:36:51'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:36:51'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'HG 12/10/2020 18:36:51'!
PASSED!
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:37:18'!
assertNotOccupiedPoint: aRoom at: aPoint

	^ ((aRoom positions keys) includes: aPoint)
		ifTrue: [aRoom invalidSizeSignal.]! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:37:18' prior: 50928461!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	self assertValidPoint: aRoom for: aPoint.
	self assertNotOccupiedPoint: aRoom at: aPoint.
	self insertIn: aPoint atPosition: aRoom.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.
	
	! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 18:37:38' prior: 50928626!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	self assertValidPoint: aRoom for: aPoint.
	self assertNotOccupiedPoint: aRoom at: aPoint.
	
	self insertIn: aPoint atPosition: aRoom.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:39:06' prior: 50928391!
test05
	
	| playableCharacter room defaultBackpack anotherPlayableCharacter |
	room _ Room widthSize: 3 heightSize: 3.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ anotherPlayableCharacter := PlayableCharacter named: 'Mario' using: defaultBackpack at: 0@0 heading: #South into: room. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
										self assert: (room atPosition: 0@0) equals: playableCharacter.
										self deny: (room atPosition: 0@0 = anotherPlayableCharacter). ].
	
	
	! !

!testRun: #RoomTest #test05 stamp: 'HG 12/10/2020 18:39:07'!
ERROR!
!Room methodsFor: 'accesing' stamp: 'HG 12/10/2020 18:39:25' prior: 50928326!
atPosition: aPoint 
	
	^positions at: aPoint ifAbsent: [^nil].! !

!testRun: #RoomTest #test05 stamp: 'HG 12/10/2020 18:39:28'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:39:44' prior: 50928654!
test05
	
	| playableCharacter room defaultBackpack anotherPlayableCharacter |
	room _ Room widthSize: 3 heightSize: 3.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ anotherPlayableCharacter := PlayableCharacter named: 'Mario' using: defaultBackpack at: 0@0 heading: #South into: room. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
										self assert: (room atPosition: 0@0) equals: playableCharacter.
										self deny: (room atPosition: 0@0 equals: anotherPlayableCharacter). ].
	
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:39:52' prior: 50928690!
test05
	
	| playableCharacter room defaultBackpack anotherPlayableCharacter |
	room _ Room widthSize: 3 heightSize: 3.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ anotherPlayableCharacter := PlayableCharacter named: 'Mario' using: defaultBackpack at: 0@0 heading: #South into: room. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
										self assert: (room atPosition: 0@0) equals: playableCharacter.
										self deny: ((room atPosition: 0@0) equals: anotherPlayableCharacter). ].
	
	
	! !

!testRun: #RoomTest #test05 stamp: 'HG 12/10/2020 18:39:53'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:40:26' prior: 50928717!
test05
	
	| playableCharacter room defaultBackpack anotherPlayableCharacter |
	room _ Room widthSize: 3 heightSize: 3.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ anotherPlayableCharacter := PlayableCharacter named: 'Mario' using: defaultBackpack at: 0@0 heading: #South into: room. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
										self assert: (room atPosition: 0@0) equals: playableCharacter.
										self deny: ((room atPosition: 0@0) equals: anotherPlayableCharacter). ].
	
	
	! !

!testRun: #RoomTest #test05 stamp: 'HG 12/10/2020 18:40:27'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:41:17' prior: 50928746!
test05
	
	| playableCharacter room defaultBackpack anotherPlayableCharacter |
	room _ Room widthSize: 3 heightSize: 3.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ anotherPlayableCharacter := PlayableCharacter named: 'Mario' using: defaultBackpack at: 0@0 heading: #South into: room. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
										self assert: (room atPosition: 0@0) equals: playableCharacter.
										self deny: ((room atPosition: 0@0) = anotherPlayableCharacter). ].
	
	
	! !

!testRun: #RoomTest #test05 stamp: 'HG 12/10/2020 18:41:17'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:41:17'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 18:41:17'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'HG 12/10/2020 18:41:17'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:41:17'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'HG 12/10/2020 18:41:17'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'HG 12/10/2020 18:41:40'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:42:21'!
test01PlayableCharacterCanBeInitializedCorrectlyAtValidRoomPosition
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:42:30'!
test01PlayableCharacterCanBeInitializedAtValidRoomPosition
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	! !

!methodRemoval: RoomTest #test01PlayableCharacterCanBeInitializedCorrectlyAtValidRoomPosition stamp: 'HG 12/10/2020 18:42:32'!
test01PlayableCharacterCanBeInitializedCorrectlyAtValidRoomPosition
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	!

!methodRemoval: RoomTest #test01 stamp: 'HG 12/10/2020 18:42:35'!
test01
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 18:42:37'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 18:42:37'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'HG 12/10/2020 18:42:37'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'HG 12/10/2020 18:42:37'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'HG 12/10/2020 18:42:37'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'HG 12/10/2020 18:42:37'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:42:48'!
test02RoomSizeCanNotBeZero
	
	self should: [ Room widthSize: 0 heightSize: 0. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | Room invalidSizeErrorDescription = anError messageText.].! !

!methodRemoval: RoomTest #test02 stamp: 'HG 12/10/2020 18:42:51'!
test02
	
	self should: [ Room widthSize: 0 heightSize: 0. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | Room invalidSizeErrorDescription = anError messageText.].!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:43:02'!
test03RoomSizeShouldBeStrictlyPositive
	
	self should: [ Room widthSize: -2 heightSize: 2. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | Room invalidSizeErrorDescription = anError messageText.].! !

!methodRemoval: RoomTest #test03 stamp: 'HG 12/10/2020 18:43:04'!
test03
	
	self should: [ Room widthSize: -2 heightSize: 2. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | Room invalidSizeErrorDescription = anError messageText.].!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:43:22'!
test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	
	self should: [ playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 3@3 heading: #North into: room. ]
		 raise: Error - MessageNotUnderstood 
		 withExceptionDo: [ :anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. ].
	
	
	! !

!methodRemoval: RoomTest #test04 stamp: 'HG 12/10/2020 18:43:27'!
test04
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	
	self should: [ playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 3@3 heading: #North into: room. ]
		 raise: Error - MessageNotUnderstood 
		 withExceptionDo: [ :anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. ].
	
	
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:43:59'!
test05CanNotOverlapPlayersAtRoomPositions
	
	| playableCharacter room defaultBackpack anotherPlayableCharacter |
	room _ Room widthSize: 3 heightSize: 3.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ anotherPlayableCharacter := PlayableCharacter named: 'Mario' using: defaultBackpack at: 0@0 heading: #South into: room. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
										self assert: (room atPosition: 0@0) equals: playableCharacter.
										self deny: ((room atPosition: 0@0) = anotherPlayableCharacter). ].
	
	
	! !

!methodRemoval: RoomTest #test05 stamp: 'HG 12/10/2020 18:44:01'!
test05
	
	| playableCharacter room defaultBackpack anotherPlayableCharacter |
	room _ Room widthSize: 3 heightSize: 3.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ anotherPlayableCharacter := PlayableCharacter named: 'Mario' using: defaultBackpack at: 0@0 heading: #South into: room. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
										self assert: (room atPosition: 0@0) equals: playableCharacter.
										self deny: ((room atPosition: 0@0) = anotherPlayableCharacter). ].
	
	
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:44:56'!
test06
	
	| playableCharacter room defaultBackpack anotherPlayableCharacter |
	room _ Room widthSize: 3 heightSize: 3.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ anotherPlayableCharacter := PlayableCharacter named: 'Mario' using: defaultBackpack at: 0@0 heading: #South into: room. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
										self assert: (room atPosition: 0@0) equals: playableCharacter.
										self deny: ((room atPosition: 0@0) = anotherPlayableCharacter). ].
	
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:45:27' prior: 50929016!
test06
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 5 heightSize: 5.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:46:21' prior: 50929043!
test06
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 5 heightSize: 5.
	room addStageObjects: Room defaultStageObjects.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:46:28' prior: 50929057!
test06
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 5 heightSize: 5.
	room addStageObjects: room defaultStageObjects.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:47:10' prior: 50929073!
test06
	
	| playableCharacter room defaultBackpack stageObjects |
	room _ Room widthSize: 5 heightSize: 5.
	stageObjects _ Dictionary new.
	stageObjects at: 0@1 put: PortableObject new.
	room addStageObjects: room defaultStageObjects.
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:47:49' prior: 50929089!
test06
	
	| playableCharacter room defaultBackpack stageObjects |
	room _ Room widthSize: 5 heightSize: 5.
	stageObjects _ Dictionary new.

	stageObjects at: 0@1 put: PortableObject new.
	room addStageObjects: room defaultStageObjects.
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:48:30' prior: 50929108!
test06
	
	| playableCharacter room defaultBackpack stageObjects portableObject |
	room _ Room widthSize: 5 heightSize: 5.
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.

	stageObjects at: 0@1 put: PortableObject new.
	room addStageObjects: room defaultStageObjects.
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:48:52' prior: 50929127!
test06
	
	| playableCharacter room defaultBackpack stageObjects portableObject |
	room _ Room widthSize: 5 heightSize: 5.
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	stageObjects at: 0@1 put: portableObject.
	
	room addStageObjects: stageObjects.
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	! !

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 18:48:53'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:49:18' prior: 50929149!
test06
	
	| playableCharacter room defaultBackpack stageObjects portableObject |
	room _ Room widthSize: 5 heightSize: 5.
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	stageObjects at: 0@1 put: portableObject.
	
	room addStageObjects: stageObjects.
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	self assert: (room atPosition: 0@1) equals: (stageObjects at: 0@1).! !

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 18:49:19'!
ERROR!
!Room methodsFor: 'adding' stamp: 'HG 12/10/2020 18:49:29'!
addStageObjects: aDictionary 
	self shouldBeImplemented.! !
!Room methodsFor: 'adding' stamp: 'HG 12/10/2020 18:50:58' prior: 50929197!
addStageObjects: aStageObjectsCollection 
	
	aStageObjectsCollection do: [:aStageObject | positions at: aStageObject key put: aStageObject value ].! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 18:50:58'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 18:50:58'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 18:50:58'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 18:50:58'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoomPositions stamp: 'HG 12/10/2020 18:50:58'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 18:50:58'!
ERROR!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 18:50:58'!
ERROR!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 18:51:28'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 18:51:28'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 18:51:28'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 18:51:28'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoomPositions stamp: 'HG 12/10/2020 18:51:28'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 18:51:28'!
ERROR!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 18:51:28'!
ERROR!
!Room methodsFor: 'adding' stamp: 'HG 12/10/2020 18:52:37' prior: 50929202!
addStageObjects: aStageObjectsCollection 
	
	aStageObjectsCollection keys do: [:aStageObjectPosition | positions at: aStageObjectPosition put: (aStageObjectsCollection at: aStageObjectPosition) ].! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 18:52:39'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 18:52:39'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 18:52:39'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 18:52:39'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoomPositions stamp: 'HG 12/10/2020 18:52:39'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 18:52:39'!
PASSED!
!Room methodsFor: 'adding' stamp: 'HG 12/10/2020 18:52:57' prior: 50929252!
addStageObjects: aStageObjectsCollection 
	
	aStageObjectsCollection keys 
		do: [:aStageObjectPosition | positions at: aStageObjectPosition 
													put: (aStageObjectsCollection at: aStageObjectPosition) ].! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 18:52:58'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 18:52:58'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 18:52:58'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 18:52:58'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoomPositions stamp: 'HG 12/10/2020 18:52:58'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 18:52:58'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:53:18'!
test07
	
	| playableCharacter room defaultBackpack stageObjects portableObject |
	room _ Room widthSize: 5 heightSize: 5.
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	stageObjects at: 0@1 put: portableObject.
	
	room addStageObjects: stageObjects.
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	self assert: (room atPosition: 0@1) equals: (stageObjects at: 0@1).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:55:17' prior: 50929309!
test07
	
	| playableCharacter room defaultBackpack stageObjects portableObject |
	room _ Room widthSize: 5 heightSize: 5.
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	stageObjects at: 0@0 put: portableObject.
	
	room addStageObjects: stageObjects.
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	self assert: (room atPosition: 0@1) equals: (stageObjects at: 0@1).! !

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 18:55:18'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:56:28' prior: 50929332!
test07
	
	| playableCharacter room defaultBackpack stageObjects portableObject |
	room _ Room widthSize: 5 heightSize: 5.
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	stageObjects at: 0@0 put: portableObject.
	
	room addStageObjects: stageObjects.
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	
	self should: [ playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription ].
	
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	self assert: (room atPosition: 0@1) equals: (stageObjects at: 0@1).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:56:46' prior: 50929358!
test07
	
	| playableCharacter room defaultBackpack stageObjects portableObject |
	room _ Room widthSize: 5 heightSize: 5.
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	stageObjects at: 0@0 put: portableObject.
	
	room addStageObjects: stageObjects.
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	
	self should: [ playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
											self assert: (room atPosition: 0@0) equals: (stageObjects at: 0@1). ].
	
! !

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 18:56:49'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 18:56:58' prior: 50929387!
test07
	
	| playableCharacter room defaultBackpack stageObjects portableObject |
	room _ Room widthSize: 5 heightSize: 5.
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	stageObjects at: 0@0 put: portableObject.
	
	room addStageObjects: stageObjects.
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	
	self should: [ playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
											self assert: (room atPosition: 0@0) equals: (stageObjects at: 0@0). ].
	
! !

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoomPositions stamp: 'HG 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 18:57:01'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 18:57:01'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:01:01' prior: 50929416!
test07
	
	| playableCharacter room defaultBackpack stageObjects portableObject |
	room _ Room widthSize: 5 heightSize: 5.
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'Objeto Portable' weighing: 20 worth: 20.
	stageObjects at: 0@0 put: portableObject.
	
	room addStageObjects: stageObjects.
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	
	self should: [ playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
											self assert: (room atPosition: 0@0) equals: (stageObjects at: 0@0). ].
	
! !
!Room methodsFor: 'positions adding' stamp: 'HG 12/10/2020 19:02:29' prior: 50928300!
insert: anObject atPosition: aPoint 
	
	positions at: aPoint put: anObject. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:06:21' prior: 50929467!
test07
	
	| playableCharacter room defaultBackpack stageObjects |
	room _ Room widthSize: 2 heightSize: 2.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [  ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
											self assert: (room atPosition: 0@0) equals: (stageObjects at: 0@0). ].
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:06:56' prior: 50929500!
test07
	
	| playableCharacter room defaultBackpack stageObjects |
	room _ Room widthSize: 2 heightSize: 2.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	playableCharacter moveForward.
	
	self should: [  ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
											self assert: (room atPosition: 0@0) equals: (stageObjects at: 0@0). ].
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:08:09' prior: 50929520!
test07
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 2 heightSize: 2.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	playableCharacter moveForward.
	
	self assert: (playableCharacter isAt: 0@1 heading: #North).
	
	
	"
	self should: [  ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
											self assert: (room atPosition: 0@0) equals: (stageObjects at: 0@0). ].
	
	"! !

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoomPositions stamp: 'HG 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:08:10'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:08:10'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:08:22' prior: 50929541!
test07
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	playableCharacter moveForward.
	
	self assert: (playableCharacter isAt: 0@1 heading: #North).
	
	
	"
	self should: [  ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
											self assert: (room atPosition: 0@0) equals: (stageObjects at: 0@0). ].
	
	"! !

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:08:23'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:08:23'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 19:08:23'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 19:08:23'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 19:08:23'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoomPositions stamp: 'HG 12/10/2020 19:08:23'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:08:23'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:08:23'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:09:11' prior: 50929588!
test07
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self should: [ playableCharacter moveForward ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPlayerMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:09:14'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/10/2020 19:12:19' prior: 50925986!
moveForward

	self assertValidPoint: room for: (position + heading forwardPoint).
	position := position + heading forwardPoint! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:12:20'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:12:20'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:12:20'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:12:20'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:12:20'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:12:20'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:12:20'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:12:20'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:12:20'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:12:20'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:12:31' prior: 50929635!
test07
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self should: [ playableCharacter moveForward ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidSizeErrorDescription . 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:12:32'!
FAILURE!
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:13:28' prior: 50928085!
assertValidPoint: aRoom for: aPoint

	^ (aRoom size < aPoint) ifTrue: [ aRoom invalidSizeSignal. ]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:13:29'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:13:29'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:13:35'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:13:35'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 19:13:35'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 19:13:35'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 19:13:35'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoomPositions stamp: 'HG 12/10/2020 19:13:35'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:13:35'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:13:35'!
FAILURE!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:13:35'!
FAILURE!

aRoom size!

aPoint!
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:14:37' prior: 50929726!
assertValidPoint: aRoom for: aPoint

	^ (aRoom size <=aPoint) ifTrue: [ aRoom invalidSizeSignal. ]! !

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:14:38'!
FAILURE!
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:15:30' prior: 50929799!
assertValidPoint: aRoom for: aPoint

	^ ((aRoom size - 1@1) <=aPoint) ifTrue: [ aRoom invalidSizeSignal. ]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:15:31'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:15:31'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:15:31'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:15:31'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:15:31'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:15:31'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:15:31'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:15:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:15:31'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:15:31'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:15:40'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:15:40'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:15:40'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:15:40'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:15:40'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:15:40'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:15:40'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:15:40'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:15:40'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:15:40'!
ERROR!
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:15:56' prior: 50929808!
assertValidPoint: aRoom for: aPoint

	^ (((aRoom size) - 1@1) <=aPoint) ifTrue: [ aRoom invalidSizeSignal. ]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:15:57'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:15:57'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:15:57'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:15:57'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:15:57'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:15:57'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:15:57'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:15:57'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:15:57'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:15:57'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:15:59'!
ERROR!
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:16:10' prior: 50929891!
assertValidPoint: aRoom for: aPoint

	^ (((aRoom size) - (1@1)) <=aPoint) ifTrue: [ aRoom invalidSizeSignal. ]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:16:11'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:16:11'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:16:11'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:16:11'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:16:11'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:16:11'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:16:11'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:16:11'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:16:11'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:16:11'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:16:16'!
ERROR!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:16:19'!
ERROR!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:16:27'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:16:45' prior: 50929704!
test07
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self should: [ playableCharacter moveForward. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidSizeErrorDescription . 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:16:50' prior: 50929992!
test07
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ playableCharacter moveForward. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidSizeErrorDescription . 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:16:52'!
ERROR!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:16:57'!
ERROR!
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:17:27' prior: 50929940!
assertValidPoint: aRoom for: aPoint

	^ ((aRoom size) - (1@1) <=aPoint) ifTrue: [ aRoom invalidSizeSignal. ]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:17:28'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:17:28'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:17:33'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:17:43' prior: 50930012!
test07
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ playableCharacter moveForward. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidSizeErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:17:45' prior: 50930083!
test07
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ playableCharacter moveForward. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidSizeErrorDescription.  ].
	
	! !

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:17:46'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:17:49' prior: 50930103!
test07
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ playableCharacter moveForward. ]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidSizeErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:18:35'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:18:44' prior: 50930123!
test07
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [playableCharacter moveForward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidSizeErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:18:46'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/10/2020 19:19:17' prior: 50929658!
moveForward

	self assertValidMovementAt: room to: (position + heading forwardPoint).
	position := position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:19:33'!
assertValidMovementAT: aRoom to: aPoint

	^ ((aRoom size) - (1@1) <=aPoint) ifTrue: [ aRoom invalidSizeSignal. ]! !
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:19:37'!
assertValidMovementAt: aRoom to: aPoint

	^ ((aRoom size) - (1@1) <=aPoint) ifTrue: [ aRoom invalidSizeSignal. ]! !

!methodRemoval: PlayableCharacter #assertValidMovementAT:to: stamp: 'HG 12/10/2020 19:19:38'!
assertValidMovementAT: aRoom to: aPoint

	^ ((aRoom size) - (1@1) <=aPoint) ifTrue: [ aRoom invalidSizeSignal. ]!
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:19:45' prior: 50930036!
assertValidPoint: aRoom for: aPoint

	^ (aRoom size <=aPoint) ifTrue: [ aRoom invalidSizeSignal. ]! !
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:19:59' prior: 50930181!
assertValidMovementAt: aRoom to: aPoint

	^ ((aRoom size) - (1@1) <=aPoint) ifTrue: [ aRoom invalidMovementAtRoom. ]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:20:21' prior: 50930145!
test07
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [playableCharacter moveForward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:20:22'!
ERROR!
!Room methodsFor: 'error handling' stamp: 'HG 12/10/2020 19:20:33'!
invalidMovementAtRoom
	self shouldBeImplemented.! !
!Room methodsFor: 'error handling' stamp: 'HG 12/10/2020 19:20:53' prior: 50930231!
invalidMovementAtRoom
	self error: self class invalidMovementErrorDescription. ! !

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:20:54'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'HG 12/10/2020 19:21:01'!
invalidMovementErrorDescription
	self shouldBeImplemented.! !

	^'INVALID MOVEMENT'.!
!Room class methodsFor: 'error messages' stamp: 'HG 12/10/2020 19:21:14' prior: 50930244!
invalidMovementErrorDescription
	^'INVALID MOVEMENT'.! !

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:21:15'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:21:15'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 19:21:15'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 19:21:15'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 19:21:15'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoomPositions stamp: 'HG 12/10/2020 19:21:15'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:21:15'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:21:15'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:21:29'!
test08
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [playableCharacter moveForward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:21:39' prior: 50930278!
test08
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [playableCharacter moveBackward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:21:40'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/10/2020 19:22:01' prior: 50925981!
moveBackward
	
	self assertValidMovementAt: room to: (position + heading forwardPoint).
	position := position - heading forwardPoint ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/10/2020 19:22:27' prior: 50930320!
moveBackward
	
	| dstPoint |
	dstPoint _ position + heading forwardPoint.
	self assertValidMovementAt: room to: dstPoint.
	position := dstPoint.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/10/2020 19:22:41' prior: 50930328!
moveBackward
	
	| dstPoint |
	dstPoint _ position - heading forwardPoint.
	self assertValidMovementAt: room to: dstPoint.
	position := dstPoint.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:22:41'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:22:41'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:22:41'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:22:41'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:22:41'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:22:41'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:22:41'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:22:41'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:22:41'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:22:41'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'HG 12/10/2020 19:22:54' prior: 50930167!
moveForward
	| dstPoint |
	dstPoint _ position + heading forwardPoint.
	self assertValidMovementAt: room to: dstPoint.
	position := dstPoint.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:22:55'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:22:55'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:22:55'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:22:55'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:22:55'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:22:55'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:22:55'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:22:55'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:22:55'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:22:55'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:22:58'!
FAILURE!

(aRoom size) - (1@1) <=aPoint!
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:24:48' prior: 50930202!
assertValidMovementAt: aRoom to: aPoint

	^ (((aRoom size) - (1@1) <=aPoint) or: (aPoint < 0@0)) 
		ifTrue: [ aRoom invalidMovementAtRoom. ]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:24:50'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:24:50'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:24:50'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:24:50'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:24:50'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:24:50'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:24:50'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:24:50'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:24:50'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:24:50'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:25:03'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:25:03'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:25:03'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:25:03'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:25:03'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:25:03'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:25:06'!
ERROR!
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:25:18' prior: 50930431!
assertValidMovementAt: aRoom to: aPoint

	^ (((aRoom size) - (1@1) <= aPoint) or: (aPoint < 0@0)) 
		ifTrue: [ aRoom invalidMovementAtRoom. ]! !
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:25:26' prior: 50930519!
assertValidMovementAt: aRoom to: aPoint

	^ (((aRoom size) - (1@1) <= aPoint) or: (aPoint < (0@0))) 
		ifTrue: [ aRoom invalidMovementAtRoom. ]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:25:27'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:25:27'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:25:27'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:25:27'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:25:27'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:25:27'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:25:27'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:25:27'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:25:27'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:25:27'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:25:31'!
FAILURE!
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:26:42' prior: 50930527!
assertValidMovementAt: aRoom to: aPoint

	^ ((aRoom size) - (1@1) <= aPoint) 
		ifTrue: [ aRoom invalidMovementAtRoom. ]! !
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:27:48' prior: 50930575!
assertValidMovementAt: aRoom to: aPoint
	
	
	^ (((aRoom size) - (1@1) > aPoint) or: (aPoint positive) ) 
		ifFalse: [ aRoom invalidMovementAtRoom. ]
		
		
		! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:27:48'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:27:48'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:27:48'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:27:48'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:27:48'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:27:48'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:27:48'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:27:48'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:27:48'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:27:48'!
PASSED!
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:28:18' prior: 50930582!
assertValidMovementAt: aRoom to: aPoint
	
	
	^ (((aRoom size) - (1@1) > aPoint) or: (aPoint < (0@0)) ) 
		ifFalse: [ aRoom invalidMovementAtRoom. ]
		
		
		! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:28:19'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:28:19'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:28:19'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:28:19'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:28:19'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:28:19'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:28:19'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:28:19'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:28:19'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:28:19'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:28:23'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:28:23'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 19:28:23'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 19:28:23'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 19:28:23'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoomPositions stamp: 'HG 12/10/2020 19:28:23'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:28:23'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:28:23'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:28:23'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:31:15'!
test05CanNotOverlapPlayersAtRoom
	
	| playableCharacter room defaultBackpack anotherPlayableCharacter |
	room _ Room widthSize: 3 heightSize: 3.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ anotherPlayableCharacter := PlayableCharacter named: 'Mario' using: defaultBackpack at: 0@0 heading: #South into: room. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
										self assert: (room atPosition: 0@0) equals: playableCharacter.
										self deny: ((room atPosition: 0@0) = anotherPlayableCharacter). ].
	
	
	! !

!methodRemoval: RoomTest #test05CanNotOverlapPlayersAtRoomPositions stamp: 'HG 12/10/2020 19:31:17'!
test05CanNotOverlapPlayersAtRoomPositions
	
	| playableCharacter room defaultBackpack anotherPlayableCharacter |
	room _ Room widthSize: 3 heightSize: 3.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ anotherPlayableCharacter := PlayableCharacter named: 'Mario' using: defaultBackpack at: 0@0 heading: #South into: room. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
										self assert: (room atPosition: 0@0) equals: playableCharacter.
										self deny: ((room atPosition: 0@0) = anotherPlayableCharacter). ].
	
	
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:31:20' prior: 50930701!
test05CanNotOverlapPlayersAtRoom
	
	| playableCharacter room defaultBackpack anotherPlayableCharacter |
	room _ Room widthSize: 3 heightSize: 3.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ anotherPlayableCharacter := PlayableCharacter named: 'Mario' using: defaultBackpack at: 0@1 heading: #South into: room. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidPositionPlayerInitializationErrorDescription. 
										self assert: (room atPosition: 0@0) equals: playableCharacter.
										self deny: ((room atPosition: 0@0) = anotherPlayableCharacter). ].
	
	
	! !

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 19:31:21'!
FAILURE!
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 19:32:34' prior: 50928640!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	self assertValidPoint: aRoom for: aPoint.
	self assertNotOccupiedPoint: aRoom at: aPoint.
	
	self insertIn: aPoint atPosition: aRoom.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.
	
	! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 19:32:49'!
insertAtPosition: aPoint in: aRoom

	^ aRoom insert: self atPosition: aPoint! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:32:49' prior: 50930787!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	self assertValidPoint: aRoom for: aPoint.
	self assertNotOccupiedPoint: aRoom at: aPoint.
	
	self insertAtPosition: aPoint in: aRoom.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.
	
	! !

!methodRemoval: PlayableCharacter #insertIn:atPosition: stamp: 'HG 12/10/2020 19:32:49'!
insertIn: aPoint atPosition: aRoom

	^ aRoom insert: self atPosition: aPoint!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:32:51'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:32:51'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:32:51'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:32:51'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:32:51'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:32:51'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:32:51'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:32:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:32:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:32:51'!
PASSED!
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 19:34:19' prior: 50930806!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	self assertValidPoint: aRoom for: aPoint.
	self assertNotOccupiedPoint: aRoom at: aPoint.
	
	
	self insertAtPosition: aPoint in: aRoom.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.
	
	! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 19:36:29' prior: 50930863!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	self assertValidPoint: aRoom for: aPoint.
	self assertNotOccupiedPoint: aRoom at: aPoint.
	
	aRoom positions do: [:anOccupantObject | 
					(anOccupantObject isKindOf: PlayableCharacter)
						ifTrue: [^aRoom alreadyPlayerSignal ] ].

	self insertAtPosition: aPoint in: aRoom.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.
	
	! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 19:36:51' prior: 50930877!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	self assertValidPoint: aRoom for: aPoint.
	self assertNotOccupiedPoint: aRoom at: aPoint.
	
	aRoom positions do: [:anOccupantObject | 
					(anOccupantObject isKindOf: PlayableCharacter)
						ifTrue: [aRoom alreadyPlayerSignal ] ].

	self insertAtPosition: aPoint in: aRoom.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.
	
	! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 19:37:03'!
assertOnlyPlayerAt: aRoom

	^ aRoom positions do: [:anOccupantObject | 
					(anOccupantObject isKindOf: PlayableCharacter)
						ifTrue: [aRoom alreadyPlayerSignal ] ]! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 19:37:03' prior: 50930895!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	self assertValidPoint: aRoom for: aPoint.
	self assertNotOccupiedPoint: aRoom at: aPoint.
	
	self assertOnlyPlayerAt: aRoom.

	self insertAtPosition: aPoint in: aRoom.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.
	
	! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'HG 12/10/2020 19:37:06' prior: 50930922!
initializeNamed: aName using: aBackpack at: aPoint heading: aHeading into: aRoom 
	
	self assertValidPoint: aRoom for: aPoint.
	self assertNotOccupiedPoint: aRoom at: aPoint.
	self assertOnlyPlayerAt: aRoom.

	self insertAtPosition: aPoint in: aRoom.
	
	name := aName.
	backpack := aBackpack.
	position := aPoint.
	heading := aHeading.
	room := aRoom.
	
	! !
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:37:16' prior: 50930913!
assertOnlyPlayerAt: aRoom

	^ aRoom positions do: [:anOccupantObject | (anOccupantObject isKindOf: PlayableCharacter)
						ifTrue: [aRoom alreadyPlayerSignal ] ]! !
!Room methodsFor: 'error handling' stamp: 'HG 12/10/2020 19:37:31'!
alreadyPlayerSignal
	^self error: self class invalidAnotherPlayerErrorDescription.! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:37:33'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 19:37:33'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 19:37:33'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 19:37:33'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 19:37:33'!
ERROR!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:37:33'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:37:33'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:37:33'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 19:37:33'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'HG 12/10/2020 19:37:45'!
invalidAnotherPlayerErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'HG 12/10/2020 19:37:52' prior: 50930992!
invalidAnotherPlayerErrorDescription
	^'Another player'.! !

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 19:37:53'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:38:01' prior: 50930756!
test05CanNotOverlapPlayersAtRoom
	
	| playableCharacter room defaultBackpack anotherPlayableCharacter |
	room _ Room widthSize: 3 heightSize: 3.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ anotherPlayableCharacter := PlayableCharacter named: 'Mario' using: defaultBackpack at: 0@1 heading: #South into: room. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | anError messageText = Room invalidAnotherPlayerErrorDescription. 
										self assert: (room atPosition: 0@0) equals: playableCharacter.
										self deny: ((room atPosition: 0@0) = anotherPlayableCharacter). ].
	
	
	! !

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 19:38:02'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:38:02'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 19:38:02'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 19:38:02'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 19:38:02'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 19:38:02'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:38:02'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:38:02'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:38:02'!
PASSED!
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:41:00' prior: 50930629!
assertValidMovementAt: aRoom to: aPoint
	
	
	^ (aRoom assertValidPositionToMove: aPoint) 
		ifFalse: [ aRoom invalidMovementAtRoom. ]
		
		
		! !
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:41:36' prior: 50931058!
assertValidMovementAt: aRoom to: aPoint
	
	^ (aRoom assertValidPositionToMove: aPoint) 
		ifFalse: [ aRoom invalidMovementAtRoom. ]
		
		
		! !
!Room methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:42:32'!
assertValidPositionToMove: aPoint

	^(size - (1@1) > aPoint) or: (aPoint < (0@0)). ! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:42:34'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 19:42:34'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 19:42:34'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 19:42:34'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 19:42:34'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:42:34'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:42:34'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:42:34'!
PASSED!
!Room methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:42:37' prior: 50931073!
assertValidPositionToMove: aPoint
	^(size - (1@1) > aPoint) or: (aPoint < (0@0)). ! !
!Room methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:44:04' prior: 50931102!
assertValidPositionToMove: aPoint
	^(size - (1@1) > aPoint) or: (aPoint < (0@0)) or: (positions keys includes: aPoint). ! !

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:45:03'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:45:03'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 19:45:03'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 19:45:03'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 19:45:03'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 19:45:03'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:45:03'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:45:03'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:45:03'!
PASSED!
!PlayableCharacter methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:45:36' prior: 50931066!
assertValidMovementAt: aRoom to: aPoint
	
	^ (aRoom assertValidPositionToMove: aPoint) 
		ifTrue: [ aRoom invalidMovementAtRoom. ]
		
		
		! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:45:37'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:45:37'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:45:37'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:45:37'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:45:37'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:45:37'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:45:37'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:45:37'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:45:37'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:45:37'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:46:17'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:46:17'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:46:17'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:46:17'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:46:17'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:46:17'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:46:17'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:46:17'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:46:17'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:46:17'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:46:19'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:46:40'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:46:44'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:47:32' prior: 50931108!
assertValidPositionToMove: aPoint
	^(size - (1@1) <= aPoint) or: (aPoint < (0@0)) or: (positions keys includes: aPoint). ! !
!Room methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:47:34' prior: 50931237!
assertValidPositionToMove: aPoint
	^(size - (1@1) < aPoint) or: (aPoint < (0@0)) or: (positions keys includes: aPoint). ! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:47:34'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 19:47:34'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 19:47:34'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 19:47:34'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 19:47:34'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:47:34'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:47:34'!
FAILURE!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:47:34'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 19:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 19:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 19:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 19:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 19:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 19:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 19:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 19:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 19:47:46'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 19:47:46'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:47:51'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:47:51'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 19:47:51'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 19:47:51'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 19:47:51'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 19:47:51'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:47:51'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:47:51'!
FAILURE!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:47:51'!
FAILURE!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:47:58'!
FAILURE!

1@1-(1@1)!

0@0 < 0@1!

0@0 < (0@1)!

0@0 < (0@1) !
!Room methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:53:04' prior: 50931244!
assertValidPositionToMove: aPoint
	^	(size x - 1) < (aPoint x min: 0)
		or: (size y - 1) < (aPoint y min: 0)
		or: (aPoint < (0@0)) 
		or: (positions keys includes: aPoint). ! !
!Room methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:53:08' prior: 50931346!
assertValidPositionToMove: aPoint
	^	(size x - 1) < (aPoint x min: 0)
		or: (size y - 1) < (aPoint y min: 0)
		or: (positions keys includes: aPoint). ! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:53:10'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 19:53:10'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 19:53:10'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 19:53:10'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 19:53:10'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:53:10'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:53:10'!
FAILURE!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:53:10'!
FAILURE!
!Room methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:54:31' prior: 50931355!
assertValidPositionToMove: aPoint
	^	(size x - 1) < aPoint x
		or: (size y - 1) < aPoint y
		or: (size y) < 0
		or: (size x) < 0
		or: (positions keys includes: aPoint). ! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:54:32'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 19:54:32'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 19:54:32'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 19:54:32'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 19:54:32'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:54:32'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:54:32'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:54:32'!
FAILURE!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:54:32'!
FAILURE!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:54:40'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:54:40'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 19:54:40'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 19:54:40'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 19:54:40'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 19:54:40'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:54:40'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:54:40'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:54:40'!
FAILURE!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:54:40'!
FAILURE!
!Room methodsFor: 'assertions' stamp: 'HG 12/10/2020 19:56:12' prior: 50931386!
assertValidPositionToMove: aPoint
	^	(size x - 1) < aPoint x
		or: (size y - 1) < aPoint y
		or: (aPoint x) < 0
		or: (aPoint y) < 0
		or: (positions keys includes: aPoint). ! !

aPoint y!

aPoint y < 0!

aPoint x < 0 true !

aPoint x < 0 !

aRoom assertValidPositionToMove: aPoint!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:57:20'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:57:26'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:57:26'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 19:57:26'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 19:57:26'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 19:57:26'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 19:57:26'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:57:26'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:57:26'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:57:26'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:57:39' prior: 50930298!
test08
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 4 heightSize: 4.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [playableCharacter moveBackward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:57:42' prior: 50931488!
test08
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [playableCharacter moveBackward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:57:48'!
test09
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 5 heightSize: 5.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [playableCharacter moveBackward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:58:00' prior: 50931528!
test09
	
	| playableCharacter room defaultBackpack portableObject stageObjects |
	room _ Room widthSize: 5 heightSize: 5.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	stageObjects at: 0@1 put: portableObject.
	
	room addStageObjects: stageObjects.
	self should: [playableCharacter moveBackward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:58:07' prior: 50931548!
test09
	
	| playableCharacter room defaultBackpack portableObject stageObjects |
	room _ Room widthSize: 5 heightSize: 5.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	stageObjects at: 0@1 put: portableObject.
	
	room addStageObjects: stageObjects.
	
	self should: [playableCharacter moveBackward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:58:30' prior: 50931575!
test09
	
	| playableCharacter room defaultBackpack portableObject stageObjects |
	room _ Room widthSize: 5 heightSize: 5.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@1 heading: #South into: room.
	
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	stageObjects at: 0@0 put: portableObject.
	
	room addStageObjects: stageObjects.
	
	self should: [playableCharacter moveForward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 19:58:41' prior: 50931602!
test09
	
	| playableCharacter room defaultBackpack portableObject stageObjects |
	room _ Room widthSize: 5 heightSize: 5.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@1 heading: #South into: room.
	
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	stageObjects at: 0@0 put: portableObject.
	
	room addStageObjects: stageObjects.
	
	self should: [playableCharacter moveForward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: (stageObjects at: 0@0). ].
	
	! !

!testRun: #RoomTest #test09 stamp: 'HG 12/10/2020 19:58:42'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 19:58:42'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 19:58:42'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 19:58:42'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 19:58:42'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 19:58:42'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 19:58:42'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 19:58:42'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 19:58:42'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'HG 12/10/2020 19:58:42'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:02:27' prior: 50931629!
test09
	
	| playableCharacter room defaultBackpack portableObject stageObjects |
	room _ Room widthSize: 5 heightSize: 5.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@1 heading: #South into: room.
	
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	
	stageObjects at: 0@0 put: portableObject.
	room addStageObjects: stageObjects.
	
	self should: [playableCharacter moveForward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: (stageObjects at: 0@0). ].
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:03:28' prior: 50931684!
test09
	
	| playableCharacter room defaultBackpack portableObject stageObjects |
	room _ Room widthSize: 5 heightSize: 5.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@1 heading: #South into: room.
	
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	
	room insert: portableObject atPosition: 0@0. 
	room addStageObjects: stageObjects.
	
	self should: [playableCharacter moveForward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: (stageObjects at: 0@0). ].
	
	! !

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 20:04:27'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:04:16' prior: 50931712!
test09
	
	| playableCharacter room defaultBackpack portableObject stageObjects nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@1 heading: #South into: room.
	
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20.
	
	room insert: portableObject atPosition: 0@0. 
	room insert: 
	room addStageObjects: stageObjects.
	
	self should: [playableCharacter moveForward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: (stageObjects at: 0@0). ].
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:05:09' prior: 50931748!
test09
	
	| playableCharacter room defaultBackpack portableObject stageObjects nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@1 heading: #South into: room.
	
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20.
	
	room insert: portableObject atPosition: 0@0. 
	
	self should: [room insert: nonPortableObject atPosition: 0@0.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionToInsertObjectErrorDescription. 
											self assert: (room atPosition: 0@0) equals: (stageObjects at: 0@0). ].
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:05:25' prior: 50931780!
test09
	
	| playableCharacter room defaultBackpack portableObject stageObjects nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@1 heading: #South into: room.
	
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20.
	
	room insert: portableObject atPosition: 0@0. 
	
	self should: [room insert: nonPortableObject atPosition: 0@0.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionToInsertObjectErrorDescription. 
											self assert: (room atPosition: 0@0) equals: portableObject. ].
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:05:35' prior: 50931811!
test09
	
	| room portableObject stageObjects nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	stageObjects _ Dictionary new.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20.
	
	room insert: portableObject atPosition: 0@0. 
	
	self should: [room insert: nonPortableObject atPosition: 0@0.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionToInsertObjectErrorDescription. 
											self assert: (room atPosition: 0@0) equals: portableObject. ].
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:05:44' prior: 50931842!
test09
	
	| room portableObject nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20.
	
	room insert: portableObject atPosition: 0@0. 
	
	self should: [room insert: nonPortableObject atPosition: 0@0.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionToInsertObjectErrorDescription. 
											self assert: (room atPosition: 0@0) equals: portableObject. ].
	
	! !

!testRun: #RoomTest #test09 stamp: 'HG 12/10/2020 20:05:45'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'HG 12/10/2020 20:05:54'!
named: aString weighing: aSmallInteger worth: aSmallInteger3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString weighing: aSmallInteger worth: aSmallInteger3 ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'HG 12/10/2020 20:06:20' prior: 50931891!
named: aName weighing: aWeight worth: gamePoints
	
	^ self new initializeNamed: aName weighing: aWeight worth: gamePoints.! !

!testRun: #RoomTest #test09 stamp: 'HG 12/10/2020 20:06:26'!
ERROR!

!testRun: #RoomTest #test09 stamp: 'HG 12/10/2020 20:06:33'!
ERROR!

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 20:06:45'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 20:06:45'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 20:06:45'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight gamePoints_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'HG 12/10/2020 20:06:45'!
initializeNamed: aName weighing: aWeight worth: gamePoints 
	self shouldBeImplemented.
	name := aName.
	weight := aWeight.
	gamePoints_CHANGE_ME := gamePoints.! !
!NonPortableObject methodsFor: 'initialization' stamp: 'HG 12/10/2020 20:06:55' prior: 50931939!
initializeNamed: aName weighing: aWeight worth: gamePoints 
	name := aName.
	weight := aWeight.
	gamePoints_CHANGE_ME := gamePoints.! !

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 20:07:34'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:07:34' prior: 50931948!
initializeNamed: aName weighing: aWeight worth: gamePoints 
	name := aName.
	weight := aWeight.
	points := gamePoints.! !

!testRun: #RoomTest #test09 stamp: 'HG 12/10/2020 20:07:46'!
FAILURE!
!Room methodsFor: 'private -- positions adding' stamp: 'HG 12/10/2020 20:09:02' prior: 50929494!
insert: anObject atPosition: aPoint 
	
	positions at: aPoint 
		ifAbsent: [ positions at: aPoint put: anObject. ].
	^self invalidPositionToInsertSignal.! !

!testRun: #RoomTest #test09 stamp: 'HG 12/10/2020 20:09:06'!
ERROR!
!Room methodsFor: 'error handling' stamp: 'HG 12/10/2020 20:09:12'!
invalidPositionToInsertSignal
	self shouldBeImplemented.! !
!Room methodsFor: 'error handling' stamp: 'HG 12/10/2020 20:09:21' prior: 50931985!
invalidPositionToInsertSignal
	self error: self class invalidPositionToInsertObjectErrorDescription.! !

!testRun: #RoomTest #test09 stamp: 'HG 12/10/2020 20:09:24'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'HG 12/10/2020 20:09:32'!
invalidPositionToInsertObjectErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'HG 12/10/2020 20:09:39' prior: 50931998!
invalidPositionToInsertObjectErrorDescription
	^'Invalid position'.! !

!testRun: #RoomTest #test09 stamp: 'HG 12/10/2020 20:09:40'!
ERROR!

!testRun: #RoomTest #test09 stamp: 'HG 12/10/2020 20:09:49'!
ERROR!
!Room methodsFor: 'private -- positions adding' stamp: 'HG 12/10/2020 20:10:14' prior: 50931975!
insert: anObject atPosition: aPoint 
	
	positions at: aPoint 
		ifAbsent: [ ^positions at: aPoint put: anObject. ].
	^self invalidPositionToInsertSignal.! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:10:15'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:10:15'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:10:15'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:10:15'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:10:15'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 20:10:15'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 20:10:15'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 20:10:15'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'HG 12/10/2020 20:10:15'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'HG 12/10/2020 20:10:21'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:10:21'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:10:21'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:10:21'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:10:21'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:10:21'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 20:10:21'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 20:10:21'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 20:10:21'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'HG 12/10/2020 20:10:21'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:14:06' prior: 50929172!
test06
	
	| playableCharacter room defaultBackpack stageObjects portableObject |
	room _ Room widthSize: 5 heightSize: 5.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	self assert: (room atPosition: 0@1) equals: (stageObjects at: 0@1).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:14:16' prior: 50932076!
test06
	
	| playableCharacter room defaultBackpack  portableObject |
	room _ Room widthSize: 5 heightSize: 5.
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	self assert: (room atPosition: 0@1) equals: portableObject.! !

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 20:14:16'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:14:17'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:14:17'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:14:17'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:14:17'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:14:17'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'HG 12/10/2020 20:14:17'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'HG 12/10/2020 20:14:17'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'HG 12/10/2020 20:14:17'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'HG 12/10/2020 20:14:17'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:14:23' prior: 50932097!
test06
	
	| playableCharacter room defaultBackpack  portableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	self assert: (room atPosition: 0@1) equals: portableObject.! !

!methodRemoval: Room #addStageObjects: stamp: 'HG 12/10/2020 20:14:39'!
addStageObjects: aStageObjectsCollection 
	
	aStageObjectsCollection keys 
		do: [:aStageObjectPosition | positions at: aStageObjectPosition 
													put: (aStageObjectsCollection at: aStageObjectPosition) ].!
!Room methodsFor: 'accesing' stamp: 'HG 12/10/2020 20:14:54' prior: 50928682!
atPosition: aPoint 
	^positions at: aPoint ifAbsent: [^nil].! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:15:59' prior: 50931866!
test09
	
	| room portableObject nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20.
	
	room insert: portableObject atPosition: 0@0. 
	
	self should: [room insert: nonPortableObject atPosition: 0@0.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionToInsertObjectErrorDescription. 
											self assert: (room atPosition: 0@0) equals: portableObject. ].
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:16:02'!
test10
	
	| room portableObject nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20.
	
	room insert: portableObject atPosition: 0@0. 
	
	self should: [room insert: nonPortableObject atPosition: 0@0.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionToInsertObjectErrorDescription. 
											self assert: (room atPosition: 0@0) equals: portableObject. ].
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:16:41'!
test06InsertingObjectsCorrectly
	
	| playableCharacter room defaultBackpack  portableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	self assert: (room atPosition: 0@1) equals: portableObject.! !

!methodRemoval: RoomTest #test06 stamp: 'HG 12/10/2020 20:16:41'!
test06
	
	| playableCharacter room defaultBackpack  portableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	
	self assert: (room atPosition: 0@0) equals: playableCharacter.
	self assert: (room atPosition: 0@1) equals: portableObject.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:17:08'!
test07CanNotMoveForwardOutOfRoomLimit
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [playableCharacter moveForward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !

!methodRemoval: RoomTest #test07 stamp: 'HG 12/10/2020 20:17:08'!
test07
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [playableCharacter moveForward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:17:15'!
test08CanNotMoveBackwardOutOfRoomLimit
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [playableCharacter moveBackward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	! !

!methodRemoval: RoomTest #test08 stamp: 'HG 12/10/2020 20:17:15'!
test08
	
	| playableCharacter room defaultBackpack |
	room _ Room widthSize: 1 heightSize: 1.
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [playableCharacter moveBackward.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidMovementErrorDescription. 
											self assert: (room atPosition: 0@0) equals: playableCharacter. ].
	
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:17:42'!
test09CanNotInsertAPortableObjectAtNonPortableObjectPosition
	
	| room portableObject nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20.
	
	room insert: portableObject atPosition: 0@0. 
	
	self should: [room insert: nonPortableObject atPosition: 0@0.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionToInsertObjectErrorDescription. 
											self assert: (room atPosition: 0@0) equals: portableObject. ].
	
	! !

!methodRemoval: RoomTest #test09 stamp: 'HG 12/10/2020 20:17:42'!
test09
	
	| room portableObject nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20.
	
	room insert: portableObject atPosition: 0@0. 
	
	self should: [room insert: nonPortableObject atPosition: 0@0.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionToInsertObjectErrorDescription. 
											self assert: (room atPosition: 0@0) equals: portableObject. ].
	
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:19:17' prior: 50932202!
test10
	
	| room portableObject nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20 containing: {portableObject}.
	
	room insert: portableObject atPosition: 0@0. 
	
	self should: [room insert: nonPortableObject atPosition: 0@0.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionToInsertObjectErrorDescription. 
											self assert: (room atPosition: 0@0) equals: portableObject. ].
	
	! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'HG 12/10/2020 20:20:16'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'HG 12/10/2020 20:20:16'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'HG 12/10/2020 20:20:16'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'HG 12/10/2020 20:20:16'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'HG 12/10/2020 20:20:16'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'HG 12/10/2020 20:20:16'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'HG 12/10/2020 20:20:16'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'HG 12/10/2020 20:20:16'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'HG 12/10/2020 20:20:16'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'HG 12/10/2020 20:20:16'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'HG 12/10/2020 20:20:16'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'HG 12/10/2020 20:20:16'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'HG 12/10/2020 20:20:16'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'HG 12/10/2020 20:20:16'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'HG 12/10/2020 20:20:17'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'HG 12/10/2020 20:20:17'!
PASSED!

!classDefinition: #NonPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'HG 12/10/2020 20:21:13'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name weight points contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'HG 12/10/2020 20:21:10'!
initializeNamed: aName weighing: aWeight worth: gamePoints containing: aStageObjectCollection
	name := aName.
	weight := aWeight.
	points := gamePoints.
	contents := aStageObjectCollection! !

!methodRemoval: NonPortableObject #initializeNamed:weighing:worth: stamp: 'HG 12/10/2020 20:21:17'!
initializeNamed: aName weighing: aWeight worth: gamePoints 
	name := aName.
	weight := aWeight.
	points := gamePoints.!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:21:30'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'HG 12/10/2020 20:21:53'!
named: aName weighing: aWeight worth: gamePoints containing: aStageObjectCollection
	
	^ self new initializeNamed: aName weighing: aWeight worth: gamePoints containing: aStageObjectCollection.! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:21:54'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:21:54'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:21:54'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:21:54'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:21:54'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 20:21:54'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:21:54'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:21:54'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:21:54'!
ERROR!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:21:54'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:21:54'!
ERROR!

!methodRemoval: NonPortableObject class #named:weighing:worth: stamp: 'HG 12/10/2020 20:22:05'!
named: aName weighing: aWeight worth: gamePoints
	
	^ self new initializeNamed: aName weighing: aWeight worth: gamePoints.!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:22:16'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:22:16'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:22:16'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:22:16'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:22:16'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:22:16'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 20:22:16'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:22:16'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:22:16'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:22:16'!
ERROR!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:22:16'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:22:16'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:22:27' prior: 50932344!
test09CanNotInsertAPortableObjectAtNonPortableObjectPosition
	
	| room portableObject nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20 containing: {}.
	
	room insert: portableObject atPosition: 0@0. 
	
	self should: [room insert: nonPortableObject atPosition: 0@0.]
		  raise: Error - MessageNotUnderstood 
		  withExceptionDo: [:anError | anError messageText = Room invalidPositionToInsertObjectErrorDescription. 
											self assert: (room atPosition: 0@0) equals: portableObject. ].
	
	! !

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:22:28'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:22:28'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:22:28'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:22:28'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:22:28'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:22:28'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 20:22:28'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:22:28'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:22:28'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:22:28'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:22:28'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:23:15' prior: 50932390!
test10
	
	| room portableObject nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20 containing: {portableObject}.
	
	room insert: nonPortableObject atPosition: 0@0. 
	"
	self assert: portableObject 
	"
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:24:36' prior: 50932650!
test10
	
	| room portableObject nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20 containing: {portableObject}.
	
	room insert: nonPortableObject atPosition: 0@0. 
	
	self assert: (room at: 0@0) includes: portableObject.
	self assert: (room at: 0@0) includes: nonPortableObject.
	
	! !

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:24:38'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:25:11' prior: 50932666!
test10
	
	| room portableObject nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20 containing: {portableObject}.
	
	room insert: nonPortableObject atPosition: 0@0. 
	
	self assert: (room atPosition: 0@0) includes: portableObject.
	self assert: (room atPosition: 0@0) includes: nonPortableObject.
	
	! !

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:25:12'!
ERROR!
!Room methodsFor: 'accesing' stamp: 'HG 12/10/2020 20:27:06' prior: 50932175!
atPosition: aPoint 
	^positions at: aPoint ifAbsent: [^nil] roomContent.! !
!Room methodsFor: 'accesing' stamp: 'HG 12/10/2020 20:27:19' prior: 50932706!
atPosition: aPoint 
	^(positions at: aPoint ifAbsent: [^nil]) roomContent.! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:27:20'!
ERROR!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:27:20'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:27:20'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:27:20'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:27:20'!
ERROR!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 20:27:20'!
ERROR!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:27:20'!
ERROR!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:27:20'!
ERROR!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:27:20'!
ERROR!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:27:20'!
ERROR!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:27:27'!
ERROR!
!PlayableCharacter methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:27:33'!
roomContent
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:27:36' prior: 50932752!
roomContent
	^self.! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:27:40'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:27:43'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 20:27:44'!
ERROR!
!PortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:28:04'!
roomContents
	^self.! !

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:28:10'!
ERROR!
!PortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:28:28'!
roomContent
	^self.! !

!methodRemoval: PortableObject #roomContents stamp: 'HG 12/10/2020 20:28:30'!
roomContents
	^self.!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:28:39'!
ERROR!
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:28:54'!
roomContent
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:32:29' prior: 50932785!
roomContent
	
	| content |
	content _ OrderedCollection new.
	content _ contents collect: [:aStageObject | content add: aStageObject roomContent]! !
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:32:43' prior: 50932790!
roomContent
	
	| content |
	content _ OrderedCollection new.
	^contents collect: [:aStageObject | aStageObject roomContent]! !
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:32:57' prior: 50932798!
roomContent
	
	
	^contents collect: [:aStageObject | aStageObject roomContent]! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:33:00'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:33:00'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:33:00'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:33:00'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:33:00'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 20:33:00'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:33:00'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:33:00'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:33:00'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:33:00'!
FAILURE!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:33:00'!
FAILURE!
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:33:17' prior: 50932805!
roomContent
	
	
	^contents collect: [:aStageObject | aStageObject roomContent] add: self.! !
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:33:22' prior: 50932845!
roomContent
	
	
	^(contents collect: [:aStageObject | aStageObject roomContent]) add: self.! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:33:23'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:33:23'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:33:23'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:33:23'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:33:23'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 20:33:23'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:33:23'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:33:23'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:33:23'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:33:23'!
ERROR!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:33:23'!
ERROR!
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:33:28' prior: 50932851!
roomContent
	
	
	^(contents collect: [:aStageObject | aStageObject roomContent]) with: self.! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:33:29'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:33:29'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:33:29'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:33:29'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:33:29'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 20:33:29'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:33:29'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:33:29'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:33:29'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:33:29'!
ERROR!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:33:29'!
ERROR!

positions at: aPoint ifAbsent: [^nil]!

contents collect: [:aStageObject | aStageObject roomContent]!
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:34:23' prior: 50932892!
roomContent
	
	
	^(contents collect: [:aStageObject | aStageObject roomContent]) asOrderedCollection add: self.! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:34:24'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:34:24'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:34:24'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:34:24'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:34:24'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 20:34:24'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:34:24'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:34:24'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:34:24'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:34:24'!
ERROR!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:34:24'!
ERROR!

contents collect: [:aStageObject | aStageObject roomContent]!

^(positions at: aPoint ifAbsent: [^nil]) roomContent!
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:36:53' prior: 50932936!
roomContent
	
	| content |
	content _ (contents collect: [:aStageObject | aStageObject roomContent]).
	content with: self.
	^content.! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:36:54'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:36:54'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:36:54'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:36:54'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:36:54'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 20:36:54'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:36:54'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:36:54'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:36:54'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:36:54'!
ERROR!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:36:54'!
ERROR!
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:37:04' prior: 50932981!
roomContent
	
	| content |
	content _ (contents collect: [:aStageObject | aStageObject roomContent]).
	content asOrderedCollection add: self.
	^content.! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:37:04'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:37:04'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:37:04'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:37:04'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:37:04'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 20:37:04'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:37:04'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:37:04'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:37:04'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:37:04'!
FAILURE!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:37:04'!
FAILURE!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:37:20'!
FAILURE!

content asOrderedCollection!

content asOrderedCollection add: self.!

^(positions at: aPoint ifAbsent: [^nil]) roomContent!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:38:25'!
FAILURE!

content asOrderedCollection add: self.!

content asOrderedCollection add: self; yourself!
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:39:09' prior: 50933023!
roomContent
	
	| content |
	content _ (contents collect: [:aStageObject | aStageObject roomContent]).
	content asOrderedCollection add: self; yourself.
	^content.! !

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:39:11'!
FAILURE!
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:40:25' prior: 50933077!
roomContent
	
	| content |
	content _ (contents collect: [:aStageObject | aStageObject roomContent]).
	content with: self; yourself.
	^content.! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:40:26'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:40:26'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:40:26'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:40:26'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:40:26'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 20:40:26'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:40:26'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:40:26'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:40:26'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:40:26'!
ERROR!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:40:26'!
ERROR!
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:40:31' prior: 50933088!
roomContent
	
	| content |
	content _ (contents collect: [:aStageObject | aStageObject roomContent]).
	content asOrderedCollection add: self; yourself.
	^content.! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:40:32'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:40:32'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:40:32'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:40:32'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:40:32'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 20:40:32'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:40:32'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:40:32'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:40:32'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:40:32'!
FAILURE!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:40:32'!
FAILURE!
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:41:28' prior: 50933130!
roomContent
	
	| content |
	content _ (contents collect: [:aStageObject | aStageObject roomContent]).
	content asOrderedCollection; yourself.
	^content.! !

#(a PointsPortableObject) with: 1!

#(a PointsPortableObject) asOrderedCollection !

#(a PointsPortableObject) asOrderedCollection add: 1!
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:42:49' prior: 50933173!
roomContent
	
	| content |
	content _ (contents collect: [:aStageObject | aStageObject roomContent]) asOrderedCollection.
	content add: self.
	^content.! !

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:43:08'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:43:08'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:43:08'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:43:08'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:43:08'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:43:08'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 20:43:08'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:43:08'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:43:08'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:43:08'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'HG 12/10/2020 20:43:08'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:44:19'!
test10NonPortableObjectContainsNonPortableObjectAtSamePosition
	
	| room portableObject nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20 containing: {portableObject}.
	
	room insert: nonPortableObject atPosition: 0@0. 
	
	self assert: (room atPosition: 0@0) includes: portableObject.
	self assert: (room atPosition: 0@0) includes: nonPortableObject.
	
	! !

!methodRemoval: RoomTest #test10 stamp: 'HG 12/10/2020 20:44:21'!
test10
	
	| room portableObject nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20 containing: {portableObject}.
	
	room insert: nonPortableObject atPosition: 0@0. 
	
	self assert: (room atPosition: 0@0) includes: portableObject.
	self assert: (room atPosition: 0@0) includes: nonPortableObject.
	
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:45:58' prior: 50933228!
test10NonPortableObjectContainsNonPortableObjectAtSamePosition
	
	| room portableObject nonPortableObject childNonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20 containing: {childNonPortableObject}.
	childNonPortableObject _ NonPortableObject named: 'objeto no portable hijo' weighing: 20 worth: 20 containing: {portableObject}.
	portableObject _ PointsPortableObject named: 'objeto portable' weighing: 20 worth: 20.
	
	room insert: nonPortableObject atPosition: 0@0. 
	
	self assert: (room atPosition: 0@0) includes: nonPortableObject.
	self assert: (room atPosition: 0@0) includes: portableObject.
	self assert: (room atPosition: 0@0) includes: childNonPortableObject.
	
	! !

!testRun: #RoomTest #test10NonPortableObjectContainsNonPortableObjectAtSamePosition stamp: 'HG 12/10/2020 20:46:01'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:44:19' prior: 50933266!
test10NonPortableObjectContainsNonPortableObjectAtSamePosition
	
	| room portableObject nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20 containing: {portableObject}.
	
	room insert: nonPortableObject atPosition: 0@0. 
	
	self assert: (room atPosition: 0@0) includes: portableObject.
	self assert: (room atPosition: 0@0) includes: nonPortableObject.
	
	! !

!testRun: #RoomTest #test10NonPortableObjectContainsNonPortableObjectAtSamePosition stamp: 'HG 12/10/2020 20:46:39'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 20:46:39'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 20:46:39'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 20:46:39'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 20:46:39'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 20:46:39'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 20:46:39'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:46:39'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 20:46:39'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 20:46:39'!
PASSED!

!testRun: #RoomTest #test10NonPortableObjectContainsNonPortableObjectAtSamePosition stamp: 'HG 12/10/2020 20:46:39'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:46:44'!
test11
	
	| room portableObject nonPortableObject childNonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20 containing: {childNonPortableObject}.
	childNonPortableObject _ NonPortableObject named: 'objeto no portable hijo' weighing: 20 worth: 20 containing: {portableObject}.
	portableObject _ PointsPortableObject named: 'objeto portable' weighing: 20 worth: 20.
	
	room insert: nonPortableObject atPosition: 0@0. 
	
	self assert: (room atPosition: 0@0) includes: nonPortableObject.
	self assert: (room atPosition: 0@0) includes: portableObject.
	self assert: (room atPosition: 0@0) includes: childNonPortableObject.
	
	! !

!testRun: #RoomTest #test11 stamp: 'HG 12/10/2020 20:46:48'!
ERROR!

!testRun: #RoomTest #test11 stamp: 'HG 12/10/2020 20:47:09'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:49:06' prior: 50933356!
test11
	
	| room portableObject nonPortableObject childNonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objeto portable' weighing: 20 worth: 20.
	childNonPortableObject _ NonPortableObject named: 'objeto no portable hijo' weighing: 20 worth: 20 containing: {portableObject}.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20 containing: {childNonPortableObject}.
	
	room insert: nonPortableObject atPosition: 0@0. 
	
	self assert: (room atPosition: 0@0) includes: nonPortableObject.
	self assert: (room atPosition: 0@0) includes: portableObject.
	self assert: (room atPosition: 0@0) includes: childNonPortableObject.
	
	! !

!testRun: #RoomTest #test11 stamp: 'HG 12/10/2020 20:49:06'!
FAILURE!
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:51:20' prior: 50933186!
roomContent
	
	| content |
	content _ (contents collect: [:aStageObject | aStageObject roomContent]) asOrderedCollection.
	content add: self.
	^content.! !
!NonPortableObject methodsFor: 'accessing' stamp: 'HG 12/10/2020 20:52:29' prior: 50933414!
roomContent
	
	| content |
	content _ (contents collect: [:aStageObject | aStageObject roomContent]) asOrderedCollection.
	content add: self.
	^content.! !

!methodRemoval: RoomTest #test11 stamp: 'HG 12/10/2020 20:56:28'!
test11
	
	| room portableObject nonPortableObject childNonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objeto portable' weighing: 20 worth: 20.
	childNonPortableObject _ NonPortableObject named: 'objeto no portable hijo' weighing: 20 worth: 20 containing: {portableObject}.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20 containing: {childNonPortableObject}.
	
	room insert: nonPortableObject atPosition: 0@0. 
	
	self assert: (room atPosition: 0@0) includes: nonPortableObject.
	self assert: (room atPosition: 0@0) includes: portableObject.
	self assert: (room atPosition: 0@0) includes: childNonPortableObject.
	
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:56:34'!
test11
	
	| room portableObject nonPortableObject |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20 containing: {portableObject}.
	
	room insert: nonPortableObject atPosition: 0@0. 
	
	self assert: (room atPosition: 0@0) includes: portableObject.
	self assert: (room atPosition: 0@0) includes: nonPortableObject.
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:58:14' prior: 50933454!
test11
	
	| room portableObject nonPortableObject defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	nonPortableObject _ NonPortableObject named: 'objeto no portable' weighing: 20 worth: 20 containing: {portableObject}.
	
	room insert: nonPortableObject atPosition: 0@0. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self assert: (room atPosition: 0@0) includes: portableObject.
	self assert: (room atPosition: 0@0) includes: nonPortableObject.
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:58:37' prior: 50933473!
test11
	
	| room portableObject nonPortableObject defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self assert: (room atPosition: 0@0) includes: portableObject.
	self assert: (room atPosition: 0@0) includes: nonPortableObject.
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:59:16' prior: 50933498!
test11
	
	| room portableObject nonPortableObject defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	playableCharacter take: 0@1.
	
	self assert: playableCharacter includes: portableObject.
	self assert: (room atPosition: 0@0) includes: nonPortableObject.
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:59:23' prior: 50933519!
test11
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	playableCharacter take: 0@1.
	
	self assert: playableCharacter includes: portableObject.
	
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 20:59:55' prior: 50933541!
test11
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	playableCharacter take: 0@1.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	
	
	! !

!testRun: #RoomTest #test11 stamp: 'HG 12/10/2020 20:59:56'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 21:00:25' prior: 50933561!
test11
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	playableCharacter take: portableObject.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	
	
	! !

!testRun: #RoomTest #test11 stamp: 'HG 12/10/2020 21:00:26'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 21:00:26'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 21:00:26'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 21:00:26'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 21:00:26'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 21:00:26'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 21:00:26'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 21:00:26'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 21:00:26'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 21:00:26'!
PASSED!

!testRun: #RoomTest #test10NonPortableObjectContainsNonPortableObjectAtSamePosition stamp: 'HG 12/10/2020 21:00:26'!
PASSED!

!testRun: #RoomTest #test11 stamp: 'HG 12/10/2020 21:00:26'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 21:00:44'!
test12
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	playableCharacter take: portableObject.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 21:00:50' prior: 50933641!
test12
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@3. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	playableCharacter take: portableObject.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	
	
	! !

!methodRemoval: RoomTest #test12 stamp: 'HG 12/10/2020 21:01:58'!
test12
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@3. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	playableCharacter take: portableObject.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:02:56'!
test12
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@3. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ playableCharacter take: portableObject.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | anError messageText = playableCharacter canNotTakeNonContiguosObjectSignal ].
	
	
	! !

!methodRemoval: RoomTest #test11 stamp: 'HG 12/10/2020 21:03:06'!
test11
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	playableCharacter take: portableObject.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:03:19'!
test11
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	playableCharacter take: portableObject.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	
	
	
	! !

!testRun: #PlayableCharacterTest #test12 stamp: 'HG 12/10/2020 21:03:28'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'HG 12/10/2020 21:04:56' prior: 50926000!
take: aPortableObject
	((position dist: aPortableObject) < 1) ifFalse: [ ^self canNotTakeNonContiguosObjectSignal].
	backpack add: aPortableObject.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 21:04:57'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 21:04:57'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:04:57'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 21:04:57'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 21:04:57'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 21:04:57'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 21:04:57'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:04:57'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:04:57'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:04:57'!
ERROR!

!testRun: #PlayableCharacterTest #test11 stamp: 'HG 12/10/2020 21:04:57'!
ERROR!

!testRun: #PlayableCharacterTest #test12 stamp: 'HG 12/10/2020 21:04:57'!
ERROR!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'HG 12/10/2020 21:07:07' prior: 50933765!
take: aPortableObject
	
	room assertCanTake: aPortableObject at: position.
	backpack add: aPortableObject.! !

!testRun: #PlayableCharacterTest #test12 stamp: 'HG 12/10/2020 21:07:14'!
ERROR!
!Room methodsFor: 'testing' stamp: 'HG 12/10/2020 21:07:23'!
assertCanTake: aPointsPortableObject at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'HG 12/10/2020 21:07:41' prior: 50933825!
assertCanTake: aPortableObject at: aPoint 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'HG 12/10/2020 21:11:37' prior: 50933817!
take: aPortableObject
	
	room assertCanTake: aPortableObject at: position.
	backpack add: aPortableObject.! !
!Room methodsFor: 'testing' stamp: 'HG 12/10/2020 21:13:18' prior: 50933830!
assertCanTake: aPortableObject at: aPoint 
	
	| objectPosition |
	objectPosition _ positions keyAtValue: aPortableObject.
	^objectPosition 
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'HG 12/10/2020 21:13:29' prior: 50933842!
assertCanTake: aPortableObject at: aPoint 
	
	| objectPosition |
	objectPosition _ positions keyAtValue: aPortableObject.
	^(objectPosition dist: aPoint) < 1.! !

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 21:13:30'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 21:13:30'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 21:13:30'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 21:13:30'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 21:13:30'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 21:13:30'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 21:13:30'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 21:13:30'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 21:13:30'!
PASSED!

!testRun: #RoomTest #test10NonPortableObjectContainsNonPortableObjectAtSamePosition stamp: 'HG 12/10/2020 21:13:30'!
PASSED!

!testRun: #PlayableCharacterTest #test12 stamp: 'HG 12/10/2020 21:13:40'!
FAILURE!

(objectPosition dist: aPoint)!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'HG 12/10/2020 21:15:00' prior: 50933836!
take: aPortableObject
	
	(room assertCanTake: aPortableObject at: position)
		ifFalse:[^self canNotTakeNonContiguosObjectSignal].
	backpack add: aPortableObject.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 21:15:01'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 21:15:01'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:15:01'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 21:15:01'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 21:15:01'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 21:15:01'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 21:15:01'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:15:01'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:15:01'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:15:01'!
ERROR!

!testRun: #PlayableCharacterTest #test11 stamp: 'HG 12/10/2020 21:15:01'!
ERROR!

!testRun: #PlayableCharacterTest #test12 stamp: 'HG 12/10/2020 21:15:01'!
ERROR!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:15:32'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:15:44' prior: 50925727!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:16:06' prior: 50933951!
test09_canTakePortableObjects

	| playableCharacter paper room |
	
	room _ Room widthSize: 5 heightSize: 5.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:16:13' prior: 50925740!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key room |
	
	room _ Room widthSize: 5 heightSize: 5.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!testRun: #PlayableCharacterTest #test11 stamp: 'HG 12/10/2020 21:16:21'!
ERROR!
!PlayableCharacter methodsFor: 'error handling' stamp: 'HG 12/10/2020 21:16:32'!
canNotTakeNonContiguosObjectSignal
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'error handling' stamp: 'HG 12/10/2020 21:16:45' prior: 50934008!
canNotTakeNonContiguosObjectSignal
	self error: self class canNotTakeNonContiguosErrorDescription.! !

!testRun: #PlayableCharacterTest #test11 stamp: 'HG 12/10/2020 21:16:49'!
ERROR!
!PlayableCharacter class methodsFor: 'error messages' stamp: 'HG 12/10/2020 21:17:04'!
canNotTakeNonContiguosErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'error messages' stamp: 'HG 12/10/2020 21:17:17' prior: 50934023!
canNotTakeNonContiguosErrorDescription
	^'Non contiguos Error'.! !

!testRun: #PlayableCharacterTest #test11 stamp: 'HG 12/10/2020 21:17:19'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 21:17:25'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 21:17:25'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:17:25'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 21:17:25'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 21:17:25'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 21:17:25'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 21:17:25'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:17:25'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:17:25'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:17:25'!
ERROR!

!testRun: #PlayableCharacterTest #test11 stamp: 'HG 12/10/2020 21:17:25'!
ERROR!

!testRun: #PlayableCharacterTest #test12 stamp: 'HG 12/10/2020 21:17:25'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:17:29'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 21:17:29'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 21:17:29'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:17:29'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 21:17:29'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 21:17:29'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 21:17:29'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 21:17:29'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:17:29'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:17:29'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:17:29'!
ERROR!

!testRun: #PlayableCharacterTest #test11 stamp: 'HG 12/10/2020 21:17:29'!
ERROR!

!testRun: #PlayableCharacterTest #test12 stamp: 'HG 12/10/2020 21:17:29'!
ERROR!

!testRun: #PlayableCharacterTest #test11 stamp: 'HG 12/10/2020 21:17:31'!
ERROR!
!Room methodsFor: 'testing' stamp: 'HG 12/10/2020 21:18:00' prior: 50933850!
assertCanTake: aPortableObject at: aPoint 
	
	| objectPosition |
	objectPosition _ positions keyAtValue: aPortableObject.
	^(objectPosition dist: aPoint) <= 1.! !

!testRun: #PlayableCharacterTest #test11 stamp: 'HG 12/10/2020 21:18:04'!
PASSED!

!testRun: #PlayableCharacterTest #test12 stamp: 'HG 12/10/2020 21:18:08'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:18:30' prior: 50933700!
test12
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@3. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ playableCharacter take: portableObject.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | anError messageText = PlayableCharacter canNotTakeNonContiguosErrorDescription ].
	
	
	! !

!testRun: #PlayableCharacterTest #test12 stamp: 'HG 12/10/2020 21:18:33'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:18:59' prior: 50933965!
test09_canTakePortableObjects

	| playableCharacter paper room |
	
	room _ Room widthSize: 5 heightSize: 5.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	room insert: paper atPosition: 2@1. 
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:19:08'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:19:15' prior: 50933980!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key room |
	
	room _ Room widthSize: 5 heightSize: 5.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:19:24' prior: 50934190!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key room |
	
	room _ Room widthSize: 5 heightSize: 5.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	room insert: paper atPosition: 2@1. 

	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:19:25'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:19:45' prior: 50934216!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key room |
	
	room _ Room widthSize: 5 heightSize: 5.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	room insert: paper atPosition: 2@1. 
	room insert: key atPosition: 2@3. 

	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:19:45'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:20:03' prior: 50934247!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key room |
	
	room _ Room widthSize: 5 heightSize: 5.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West into: room .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	room insert: paper atPosition: 2@1. 
	room insert: key atPosition: 2@3. 

	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:20:03'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 21:20:03'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 21:20:03'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:20:03'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 21:20:03'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 21:20:03'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:20:04'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test11 stamp: 'HG 12/10/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test12 stamp: 'HG 12/10/2020 21:20:04'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:20:04'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:20:12' prior: 50934170!
test09_canTakePortableObjects

	| playableCharacter paper room |
	
	room _ Room widthSize: 5 heightSize: 5.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West into: room.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	room insert: paper atPosition: 2@1. 
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:20:13'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 21:20:13'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 21:20:13'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:20:13'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 21:20:13'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 21:20:13'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 21:20:13'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 21:20:13'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:20:13'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:20:13'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:20:13'!
PASSED!

!testRun: #PlayableCharacterTest #test11 stamp: 'HG 12/10/2020 21:20:13'!
PASSED!

!testRun: #PlayableCharacterTest #test12 stamp: 'HG 12/10/2020 21:20:13'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:21:24'!
test11CanTakeContiguosObject
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	playableCharacter take: portableObject.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	
	
	
	! !

!methodRemoval: PlayableCharacterTest #test11 stamp: 'HG 12/10/2020 21:21:24'!
test11
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	playableCharacter take: portableObject.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	
	
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:21:39'!
test12CanNotTakeFarAwayObject
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@3. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ playableCharacter take: portableObject.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | anError messageText = PlayableCharacter canNotTakeNonContiguosErrorDescription ].
	
	
	! !

!methodRemoval: PlayableCharacterTest #test12 stamp: 'HG 12/10/2020 21:21:39'!
test12
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@3. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	self should: [ playableCharacter take: portableObject.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | anError messageText = PlayableCharacter canNotTakeNonContiguosErrorDescription ].
	
	
	!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:22:27'!
test13CanNotTakeObjectIfNotHeadingAtCorrectPosition
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #North into: room.
	
	playableCharacter take: portableObject.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	
	
	
	! !

!testRun: #PlayableCharacterTest #test13CanNotTakeObjectIfNotHeadingAtCorrectPosition stamp: 'HG 12/10/2020 21:22:34'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 21:22:34'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 21:22:34'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:22:34'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 21:22:34'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 21:22:34'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 21:22:34'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 21:22:34'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:22:34'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:22:34'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:22:34'!
PASSED!

!testRun: #PlayableCharacterTest #test11CanTakeContiguosObject stamp: 'HG 12/10/2020 21:22:34'!
PASSED!

!testRun: #PlayableCharacterTest #test12CanNotTakeFarAwayObject stamp: 'HG 12/10/2020 21:22:34'!
PASSED!

!testRun: #PlayableCharacterTest #test13CanNotTakeObjectIfNotHeadingAtCorrectPosition stamp: 'HG 12/10/2020 21:22:34'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:22:46' prior: 50934507!
test13CanNotTakeObjectIfNotHeadingAtCorrectPosition
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #East into: room.
	
	playableCharacter take: portableObject.
	
	self assert: (playableCharacter backpackIncludes: portableObject).
	
	
	
	! !

!testRun: #PlayableCharacterTest #test13CanNotTakeObjectIfNotHeadingAtCorrectPosition stamp: 'HG 12/10/2020 21:22:47'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 21:22:47'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 21:22:47'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:22:47'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 21:22:47'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 21:22:47'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 21:22:47'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 21:22:47'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:22:47'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:22:47'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:22:47'!
PASSED!

!testRun: #PlayableCharacterTest #test11CanTakeContiguosObject stamp: 'HG 12/10/2020 21:22:47'!
PASSED!

!testRun: #PlayableCharacterTest #test12CanNotTakeFarAwayObject stamp: 'HG 12/10/2020 21:22:47'!
PASSED!

!testRun: #PlayableCharacterTest #test13CanNotTakeObjectIfNotHeadingAtCorrectPosition stamp: 'HG 12/10/2020 21:22:47'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:23:02' prior: 50934582!
test13CanNotTakeObjectIfNotHeadingAtCorrectPosition
	
	| room portableObject  defaultBackpack playableCharacter |
	room _ Room widthSize: 5 heightSize: 5.
	
	portableObject _ PointsPortableObject named: 'objetoPortable' weighing: 20 worth: 20.
	room insert: portableObject atPosition: 0@1. 
	
	defaultBackpack _ PlayableCharacterTest new defaultBackpack.
	playableCharacter := PlayableCharacter named: 'Luigi' using: defaultBackpack at: 0@0 heading: #East into: room.
	
	self should: [ playableCharacter take: portableObject.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | anError messageText = PlayableCharacter canNotTakeNonContiguosErrorDescription].
	
	
	
	! !

!testRun: #PlayableCharacterTest #test13CanNotTakeObjectIfNotHeadingAtCorrectPosition stamp: 'HG 12/10/2020 21:23:03'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'HG 12/10/2020 21:24:20'!
assertCanTake: aPortableObject at: aPoint facingAt: facingAt  
	
	| objectPosition |
	objectPosition _ positions keyAtValue: aPortableObject.
	^(objectPosition dist: aPoint) <= 1.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 21:24:20' prior: 50933896!
take: aPortableObject
	
	(room assertCanTake: aPortableObject at: position facingAt: #North)
		ifFalse:[^self canNotTakeNonContiguosObjectSignal].
	backpack add: aPortableObject.! !

!methodRemoval: Room #assertCanTake:at: stamp: 'HG 12/10/2020 21:24:20'!
assertCanTake: aPortableObject at: aPoint 
	
	| objectPosition |
	objectPosition _ positions keyAtValue: aPortableObject.
	^(objectPosition dist: aPoint) <= 1.!
!Room methodsFor: 'testing' stamp: 'HG 12/10/2020 21:24:39' prior: 50934685!
assertCanTake: aPortableObject at: aPoint facingAt: aHeading  
	
	| objectPosition |
	objectPosition _ positions keyAtValue: aPortableObject.
	^(objectPosition dist: aPoint) <= 1.! !
!Room methodsFor: 'testing' stamp: 'HG 12/10/2020 21:25:17'!
assertCanTake: aPortableObject at: aPoint   
	
	| objectPosition |
	objectPosition _ positions keyAtValue: aPortableObject.
	^(objectPosition dist: aPoint) <= 1.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'HG 12/10/2020 21:25:17' prior: 50934694!
take: aPortableObject
	
	(room assertCanTake: aPortableObject at: position )
		ifFalse:[^self canNotTakeNonContiguosObjectSignal].
	backpack add: aPortableObject.! !

!methodRemoval: Room #assertCanTake:at:facingAt: stamp: 'HG 12/10/2020 21:25:17'!
assertCanTake: aPortableObject at: aPoint facingAt: aHeading  
	
	| objectPosition |
	objectPosition _ positions keyAtValue: aPortableObject.
	^(objectPosition dist: aPoint) <= 1.!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'HG 12/10/2020 21:26:37' prior: 50934727!
take: aPortableObject
	
	(room assertCanTake: aPortableObject being: self )
		ifFalse:[^self canNotTakeNonContiguosObjectSignal].
	backpack add: aPortableObject.! !
!Room methodsFor: 'testing' stamp: 'HG 12/10/2020 21:28:14'!
assertCanTake: aPortableObject being: aPlayableCharacter   
	
	| objectPosition |
	objectPosition _ positions keyAtValue: aPortableObject.
	aPlayableCharacter reaches: objectPosition.! !

!methodRemoval: Room #assertCanTake:at: stamp: 'HG 12/10/2020 21:28:32'!
assertCanTake: aPortableObject at: aPoint   
	
	| objectPosition |
	objectPosition _ positions keyAtValue: aPortableObject.
	^(objectPosition dist: aPoint) <= 1.!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 21:28:34'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 21:28:34'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 21:28:34'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 21:28:34'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 21:28:34'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 21:28:35'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 21:28:35'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 21:28:35'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 21:28:35'!
PASSED!

!testRun: #RoomTest #test10NonPortableObjectContainsNonPortableObjectAtSamePosition stamp: 'HG 12/10/2020 21:28:35'!
PASSED!

!testRun: #PlayableCharacterTest #test13CanNotTakeObjectIfNotHeadingAtCorrectPosition stamp: 'HG 12/10/2020 21:28:39'!
ERROR!
!PlayableCharacter methodsFor: 'testing' stamp: 'HG 12/10/2020 21:28:48'!
reaches: aPoint 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'testing' stamp: 'HG 12/10/2020 21:29:07' prior: 50934806!
reaches: aPoint 
	| dstPoint |
	dstPoint _ position + heading forwardPoint.! !
!PlayableCharacter methodsFor: 'testing' stamp: 'HG 12/10/2020 21:29:17' prior: 50934811!
reaches: aPoint 
	| dstPoint |
	dstPoint _ position + heading forwardPoint.
	^aPoint = dstPoint.! !

!testRun: #PlayableCharacterTest #test13CanNotTakeObjectIfNotHeadingAtCorrectPosition stamp: 'HG 12/10/2020 21:29:19'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 21:29:19'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 21:29:19'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:29:19'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 21:29:19'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 21:29:19'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 21:29:19'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 21:29:19'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:29:19'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:29:19'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:29:19'!
ERROR!

!testRun: #PlayableCharacterTest #test11CanTakeContiguosObject stamp: 'HG 12/10/2020 21:29:19'!
ERROR!

!testRun: #PlayableCharacterTest #test12CanNotTakeFarAwayObject stamp: 'HG 12/10/2020 21:29:19'!
PASSED!

!testRun: #PlayableCharacterTest #test13CanNotTakeObjectIfNotHeadingAtCorrectPosition stamp: 'HG 12/10/2020 21:29:19'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:29:34' prior: 50934358!
test09_canTakePortableObjects

	| playableCharacter paper room |
	
	room _ Room widthSize: 5 heightSize: 5.
	
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #South into: room.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	room insert: paper atPosition: 2@1. 
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 21:29:35'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 21:29:35'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:29:35'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 21:29:35'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 21:29:35'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 21:29:35'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 21:29:35'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:29:35'!
PASSED!

!testRun: #PlayableCharacterTest #test12CanNotTakeFarAwayObject stamp: 'HG 12/10/2020 21:29:35'!
PASSED!

!testRun: #PlayableCharacterTest #test13CanNotTakeObjectIfNotHeadingAtCorrectPosition stamp: 'HG 12/10/2020 21:29:35'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:29:35'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:29:35'!
ERROR!

!testRun: #PlayableCharacterTest #test11CanTakeContiguosObject stamp: 'HG 12/10/2020 21:29:35'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test12CanNotTakeFarAwayObject stamp: 'HG 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test13CanNotTakeObjectIfNotHeadingAtCorrectPosition stamp: 'HG 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:29:43'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:29:43'!
ERROR!

!testRun: #PlayableCharacterTest #test11CanTakeContiguosObject stamp: 'HG 12/10/2020 21:29:43'!
ERROR!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:29:47'!
ERROR!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:30:48'!
ERROR!
!Room methodsFor: 'testing' stamp: 'HG 12/10/2020 21:31:02' prior: 50934752!
assertCanTake: aPortableObject being: aPlayableCharacter   
	
	| objectPosition |
	objectPosition _ positions keyAtValue: aPortableObject.
	^aPlayableCharacter reaches: objectPosition.! !

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:31:06'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 21:31:06'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 21:31:06'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:31:06'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 21:31:06'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 21:31:06'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 21:31:06'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 21:31:06'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:31:06'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:31:06'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:31:06'!
ERROR!

!testRun: #PlayableCharacterTest #test11CanTakeContiguosObject stamp: 'HG 12/10/2020 21:31:06'!
PASSED!

!testRun: #PlayableCharacterTest #test12CanNotTakeFarAwayObject stamp: 'HG 12/10/2020 21:31:06'!
PASSED!

!testRun: #PlayableCharacterTest #test13CanNotTakeObjectIfNotHeadingAtCorrectPosition stamp: 'HG 12/10/2020 21:31:06'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:31:06'!
ERROR!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:31:10'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 21:31:10'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 21:31:10'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:31:10'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 21:31:10'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 21:31:10'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 21:31:10'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 21:31:10'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:31:10'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:31:10'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:31:10'!
ERROR!

!testRun: #PlayableCharacterTest #test11CanTakeContiguosObject stamp: 'HG 12/10/2020 21:31:10'!
PASSED!

!testRun: #PlayableCharacterTest #test12CanNotTakeFarAwayObject stamp: 'HG 12/10/2020 21:31:10'!
PASSED!

!testRun: #PlayableCharacterTest #test13CanNotTakeObjectIfNotHeadingAtCorrectPosition stamp: 'HG 12/10/2020 21:31:10'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:31:10'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:31:33' prior: 50934279!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key room |
	
	room _ Room widthSize: 5 heightSize: 5.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #North into: room .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	room insert: paper atPosition: 2@1. 
	room insert: key atPosition: 2@3. 

	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:31:33'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:33:43' prior: 50935117!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key room |
	
	room _ Room widthSize: 5 heightSize: 5.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #North into: room .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	room insert: paper atPosition: 2@3.
	playableCharacter rotateRight.
	playableCharacter rotateRight.
	room insert: key atPosition: 2@1. 

	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:33:44'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:34:39' prior: 50935150!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key room |
	
	room _ Room widthSize: 5 heightSize: 5.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #North into: room .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	room insert: paper atPosition: 2@1.
	playableCharacter rotateRight.
	playableCharacter rotateRight.
	room insert: key atPosition: 2@3. 

	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:34:40'!
FAILURE!

room assertCanTake: aPortableObject being: self!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'HG 12/10/2020 21:36:00' prior: 50935185!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key room |
	
	room _ Room widthSize: 5 heightSize: 5.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #North into: room .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	room insert: paper atPosition: 2@3.
	
	room insert: key atPosition: 2@1. 

	playableCharacter take: paper.
	playableCharacter rotateRight.
	playableCharacter rotateRight.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:36:02'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 21:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 21:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 21:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 21:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 21:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 21:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test11CanTakeContiguosObject stamp: 'HG 12/10/2020 21:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test12CanNotTakeFarAwayObject stamp: 'HG 12/10/2020 21:36:06'!
PASSED!

!testRun: #PlayableCharacterTest #test13CanNotTakeObjectIfNotHeadingAtCorrectPosition stamp: 'HG 12/10/2020 21:36:06'!
PASSED!

----SNAPSHOT----(10 December 2020 21:37:02) CuisUniversity-4137.image priorSource: 19085402!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 21:37:22'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 21:37:22'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 21:37:22'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 21:37:22'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 21:37:22'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 21:37:22'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 21:37:22'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 21:37:22'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 21:37:23'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 21:37:23'!
PASSED!

!testRun: #RoomTest #test10NonPortableObjectContainsNonPortableObjectAtSamePosition stamp: 'HG 12/10/2020 21:37:23'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test11CanTakeContiguosObject stamp: 'HG 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test12CanNotTakeFarAwayObject stamp: 'HG 12/10/2020 21:37:26'!
PASSED!

!testRun: #PlayableCharacterTest #test13CanNotTakeObjectIfNotHeadingAtCorrectPosition stamp: 'HG 12/10/2020 21:37:26'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #PlayableCharacterTest #test11CanTakeContiguosObject stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #PlayableCharacterTest #test12CanNotTakeFarAwayObject stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #PlayableCharacterTest #test13CanNotTakeObjectIfNotHeadingAtCorrectPosition stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #RoomTest #test01PlayableCharacterCanBeInitializedAtValidRoomPosition stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #RoomTest #test02RoomSizeCanNotBeZero stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #RoomTest #test03RoomSizeShouldBeStrictlyPositive stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #RoomTest #test04PlayableCharacterCanNotBeInitializedOutOfRoomValidPositions stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #RoomTest #test05CanNotOverlapPlayersAtRoom stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #RoomTest #test06InsertingObjectsCorrectly stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #RoomTest #test07CanNotMoveForwardOutOfRoomLimit stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #RoomTest #test08CanNotMoveBackwardOutOfRoomLimit stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #RoomTest #test09CanNotInsertAPortableObjectAtNonPortableObjectPosition stamp: 'HG 12/10/2020 21:37:29'!
PASSED!

!testRun: #RoomTest #test10NonPortableObjectContainsNonPortableObjectAtSamePosition stamp: 'HG 12/10/2020 21:37:29'!
PASSED!