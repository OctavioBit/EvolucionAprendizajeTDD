----STARTUP---- (10 December 2020 13:32:38) as C:\Users\hanse\Documents\August Facultad\windows64\CuisUniversity-4384.image!


----End fileIn of C:\Users\hanse\Documents\August Facultad\ISW1-2020-2C-2doParcial.st----!

----SNAPSHOT----(10 December 2020 13:34:56) CuisUniversity-4384.image priorSource: 17155564!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'AD 12/10/2020 17:38:37'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AD 12/10/2020 17:43:40'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'nil' stamp: 'AD 12/10/2020 17:43:34'!
test01cantCreateNegativeLengthSizedRoom

	|room|
	
	self should: [room := Room withLength: -1 withHeight: -1]
	raise: Error - MessageNotUnderstood 
       withExceptionDo: [:anError |
			self assert: Room invalidRoomSizeErrorDescription equals: anError messageText ] ! !

!testRun: #RoomTest #test01cantCreateNegativeLengthSizedRoom stamp: 'AD 12/10/2020 17:43:47'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'AD 12/10/2020 17:43:55'!
withLength: aSmallInteger withHeight: aSmallInteger2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithLength: aSmallInteger withHeight: aSmallInteger2 ! !
!Room class methodsFor: 'instance creation' stamp: 'AD 12/10/2020 17:44:36' prior: 50868675!
withLength: aLength withHeight: aHeigth
	
	^self new initializeWithLength: aLength withHeight: aHeigth ! !

!testRun: #RoomTest #test01cantCreateNegativeLengthSizedRoom stamp: 'AD 12/10/2020 17:44:37'!
ERROR!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AD 12/10/2020 17:44:41'!
Object subclass: #Room
	instanceVariableNames: 'length'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AD 12/10/2020 17:44:41'!
Object subclass: #Room
	instanceVariableNames: 'length heigth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'AD 12/10/2020 17:44:41'!
initializeWithLength: aLength withHeight: aHeigth 
	self shouldBeImplemented.
	length := aLength.
	heigth := aHeigth.! !
!Room methodsFor: 'initialization' stamp: 'AD 12/10/2020 17:44:47' prior: 50868710!
initializeWithLength: aLength withHeight: aHeigth 
	
	length := aLength.
	heigth := aHeigth.! !

!testRun: #RoomTest #test01cantCreateNegativeLengthSizedRoom stamp: 'AD 12/10/2020 17:44:48'!
FAILURE!

!testRun: #RoomTest #test01cantCreateNegativeLengthSizedRoom stamp: 'AD 12/10/2020 17:45:06'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'AD 12/10/2020 17:48:17' prior: 50868686!
withLength: aLength withHeight: aHeigth
	
	(aLength and: aHeigth)> 0 ifFalse: [^self error: self invalidRoomSizeErrorDescription].
	^self new initializeWithLength: aLength withHeight: aHeigth ! !

!testRun: #RoomTest #test01cantCreateNegativeLengthSizedRoom stamp: 'AD 12/10/2020 17:48:18'!
ERROR!

!testRun: #RoomTest #test01cantCreateNegativeLengthSizedRoom stamp: 'AD 12/10/2020 17:48:31'!
ERROR!

!testRun: #RoomTest #test01cantCreateNegativeLengthSizedRoom stamp: 'AD 12/10/2020 17:48:40'!
ERROR!

!testRun: #RoomTest #test01cantCreateNegativeLengthSizedRoom stamp: 'AD 12/10/2020 17:48:47'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'AD 12/10/2020 17:49:58' prior: 50868730!
withLength: aLength withHeight: aHeigth
	
	(aLength > 0 and: aHeigth > 0) ifFalse: [^self error: self invalidRoomSizeErrorDescription].
	^self new initializeWithLength: aLength withHeight: aHeigth ! !

!testRun: #RoomTest #test01cantCreateNegativeLengthSizedRoom stamp: 'AD 12/10/2020 17:50:05'!
ERROR!

!testRun: #RoomTest #test01cantCreateNegativeLengthSizedRoom stamp: 'AD 12/10/2020 17:50:05'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'AD 12/10/2020 17:50:12'!
invalidRoomSizeErrorDescription
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeInvalidRoomSizeErrorDescription! !

!testRun: #RoomTest #test01cantCreateNegativeLengthSizedRoom stamp: 'AD 12/10/2020 17:50:23'!
ERROR!

!testRun: #RoomTest #test01cantCreateNegativeLengthSizedRoom stamp: 'AD 12/10/2020 17:50:23'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'AD 12/10/2020 17:51:10' prior: 50868768!
invalidRoomSizeErrorDescription
	
	^'The room you are trying to create has an invalid size'! !

!testRun: #RoomTest #test01cantCreateNegativeLengthSizedRoom stamp: 'AD 12/10/2020 17:51:11'!
FAILURE!

!testRun: #RoomTest #test01cantCreateNegativeLengthSizedRoom stamp: 'AD 12/10/2020 17:51:26'!
FAILURE!

!testRun: #RoomTest #test01cantCreateNegativeLengthSizedRoom stamp: 'AD 12/10/2020 17:52:09'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 17:52:24'!
test01cantCreateNegativeSizedRoom

	|room|
	
	self should: [room := Room withLength: -1 withHeight: -1]
	raise: Error - MessageNotUnderstood 
       withExceptionDo: [:anError |
			self assert: Room invalidRoomSizeErrorDescription equals: anError messageText ] ! !

!methodRemoval: RoomTest #test01cantCreateNegativeLengthSizedRoom stamp: 'AD 12/10/2020 17:52:24'!
test01cantCreateNegativeLengthSizedRoom

	|room|
	
	self should: [room := Room withLength: -1 withHeight: -1]
	raise: Error - MessageNotUnderstood 
       withExceptionDo: [:anError |
			self assert: Room invalidRoomSizeErrorDescription equals: anError messageText ] !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 17:53:21' prior: 50868800!
test01cantCreateNegativeSizedRoom

	|room|
	
	self should: [room := Room withLength: -1 withHeight: -1]
	raise: Error - MessageNotUnderstood 
       withExceptionDo: [:anError |
			self assert: Room invalidRoomSizeErrorDescription equals: anError messageText ].
		
	self should: [room := Room withLength: 0 withHeight: 0]
	raise: Error - MessageNotUnderstood 
       withExceptionDo: [:anError |
			self assert: Room invalidRoomSizeErrorDescription equals: anError messageText ] ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 17:53:40'!
test01cantCreateNegativeOrZeroSizedRoom

	|room|
	
	self should: [room := Room withLength: -1 withHeight: -1]
	raise: Error - MessageNotUnderstood 
       withExceptionDo: [:anError |
			self assert: Room invalidRoomSizeErrorDescription equals: anError messageText ].
		
	self should: [room := Room withLength: 0 withHeight: 0]
	raise: Error - MessageNotUnderstood 
       withExceptionDo: [:anError |
			self assert: Room invalidRoomSizeErrorDescription equals: anError messageText ] ! !

!methodRemoval: RoomTest #test01cantCreateNegativeSizedRoom stamp: 'AD 12/10/2020 17:53:40'!
test01cantCreateNegativeSizedRoom

	|room|
	
	self should: [room := Room withLength: -1 withHeight: -1]
	raise: Error - MessageNotUnderstood 
       withExceptionDo: [:anError |
			self assert: Room invalidRoomSizeErrorDescription equals: anError messageText ].
		
	self should: [room := Room withLength: 0 withHeight: 0]
	raise: Error - MessageNotUnderstood 
       withExceptionDo: [:anError |
			self assert: Room invalidRoomSizeErrorDescription equals: anError messageText ] !

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 17:53:44'!
PASSED!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 17:53:44'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 17:56:02'!
test01youCanPutAnPortableObjectInARoom

	|room portableObject|
	
	room := Room withLength: 3 withHeight: 3.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 17:56:12'!
test02youCanPutAnPortableObjectInARoom

	|room portableObject|
	
	room := Room withLength: 3 withHeight: 3.
	! !

!methodRemoval: RoomTest #test01youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 17:56:17'!
test01youCanPutAnPortableObjectInARoom

	|room portableObject|
	
	room := Room withLength: 3 withHeight: 3.
	!

----End fileIn of C:\Users\hanse\Documents\August Facultad\windows64\Packages\TerseGuide.pck.st----!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:07:43' prior: 50868890!
test02youCanPutAnPortableObjectInARoom

	|room portableObject|
	
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	room := Room withLength: 3 withHeight: 3.
	
	self deny: (room slotIsOccupied: 1@1).
	
	room putAnObject: portableObject at: 1@1.
	self assert: (room slotIsOccupied: 1@1).
	
	"marsRover := MarsRover at: 1@2 heading: #North."
	
	
	 ! !

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:07:44'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:08:00'!
slotIsOccupied: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AD 12/10/2020 18:09:23'!
Object subclass: #Room
	instanceVariableNames: 'length heigth objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:09:19' prior: 50871857!
slotIsOccupied: aSlot
	^objects includes: aSlot! !

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:09:29'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'AD 12/10/2020 18:10:00' prior: 50868717!
initializeWithLength: aLength withHeight: aHeigth 
	
	length := aLength.
	heigth := aHeigth.
	objects  := OrderedCollection new.! !

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:10:05'!
ERROR!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:10:05'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:10:13'!
putAnObject: aNoPointsPortableObject at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'initialization' stamp: 'AD 12/10/2020 18:11:35' prior: 50871878!
initializeWithLength: aLength withHeight: aHeigth 
	
	length := aLength.
	heigth := aHeigth.
	objects  := Dictionary new.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:12:49' prior: 50871891!
putAnObject: anObject at: aSlot

	objects at: aSlot put: anObject.
	! !

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:12:50'!
ERROR!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:13:10'!
FAILURE!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:13:10'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:15:08' prior: 50871870!
slotIsOccupied: aSlot
	^objects at: aSlot isEmpty not.! !

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:15:09'!
ERROR!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:15:24'!
ERROR!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:15:31'!
ERROR!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:15:31'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:15:49' prior: 50871919!
slotIsOccupied: aSlot
	^(objects at: aSlot) isEmpty not.! !

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:15:49'!
ERROR!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:16:36'!
ERROR!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:16:54'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:17:30' prior: 50871937!
slotIsOccupied: aSlot
	^(objects at: aSlot asString) isEmpty not.! !

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:17:37'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:18:24' prior: 50871952!
slotIsOccupied: aSlot
	^objects ! !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:19:06' prior: 50871961!
slotIsOccupied: aSlot
	^objects includesKey: aSlot asString ! !

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:19:11'!
FAILURE!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:19:11'!
FAILURE!

	self deny: (room slotIsOccupied: 1@1).!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:19:50'!
FAILURE!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:19:50'!
FAILURE!

room slotIsOccupied: 1@1!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:20:28' prior: 50871904!
putAnObject: anObject at: aSlot

	objects at: (aSlot asString) put: anObject.
	! !

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:20:29'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:20:32'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:23:44'!
test03youCantPutAnObjectOutOfBounds

	|room portableObject|
	
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	room := Room withLength: 3 withHeight: 3.
	
	self should: [room putAnObject: portableObject at: -1@-1] raise: Error - MessageNotUnderstood withExceptionDo: [].
	
	"marsRover := MarsRover at: 1@2 heading: #North."
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:24:45' prior: 50871997!
test03youCantPutAnObjectOutOfBounds

	|room portableObject|
	
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	room := Room withLength: 3 withHeight: 3.
	
	self should: [room putAnObject: portableObject at: -1@-1]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:anError |
			self assert: Room tryingToPutAnObjectOutOfBoundsErrorDescription equals: anError messageText ].
	
	"marsRover := MarsRover at: 1@2 heading: #North."
	
	
	 ! !

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 18:24:46'!
FAILURE!
!Room class methodsFor: 'error descriptions' stamp: 'AD 12/10/2020 18:25:36'!
tryingToPutAnObjectOutOfBoundsErrorDescription
	
	^'The object must be within room bounds to be able to be put'! !

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 18:25:42'!
FAILURE!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 18:25:42'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:28:13' prior: 50871985!
putAnObject: anObject at: aSlot
	(aSlot x >= 0 and: aSlot y >= 0) ifFalse:[^self error: self tryingToPutAnObjectOutOfBoundsErrorDescription].
	objects at: (aSlot asString) put: anObject.
	! !

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 18:28:14'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:28:24'!
tryingToPutAnObjectOutOfBoundsErrorDescription
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:28:51' prior: 50872057!
tryingToPutAnObjectOutOfBoundsErrorDescription
	^'The object must be within room bounds to be able to be put'! !

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 18:28:52'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:29:15' prior: 50872045!
putAnObject: anObject at: aSlot
	(aSlot x >= 0 and: aSlot y >= 0) ifFalse:[^self error: self class tryingToPutAnObjectOutOfBoundsErrorDescription].
	objects at: (aSlot asString) put: anObject.
	! !

!methodRemoval: Room #tryingToPutAnObjectOutOfBoundsErrorDescription stamp: 'AD 12/10/2020 18:29:20'!
tryingToPutAnObjectOutOfBoundsErrorDescription
	^'The object must be within room bounds to be able to be put'!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 18:29:23'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:29:23'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 18:29:23'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:29:36' prior: 50872011!
test03youCantPutAnObjectOutOfBounds

	|room portableObject|
	
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	room := Room withLength: 3 withHeight: 3.
	
	self should: [room putAnObject: portableObject at: -1@-1]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:anError |
			self assert: Room tryingToPutAnObjectOutOfBoundsErrorDescription equals: anError messageText ].
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:29:41' prior: 50871840!
test02youCanPutAnPortableObjectInARoom

	|room portableObject|
	
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	room := Room withLength: 3 withHeight: 3.
	
	self deny: (room slotIsOccupied: 1@1).
	
	room putAnObject: portableObject at: 1@1.
	self assert: (room slotIsOccupied: 1@1).
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:32:08'!
test04youCantPutAnObjectInAOccupiedSlot

	|room portableObject1 portableObject2|
	
	portableObject1 := NoPointsPortableObject named: 'key' weighing: 1.
	portableObject2 := NoPointsPortableObject named: 'ring' weighing: 1.

	room := Room withLength: 3 withHeight: 3.
	
	room putAnObject: portableObject1 at: 1@1.
	
	self should: [room putAnObject: portableObject2 at: 1@1]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:anError |
			self assert: Room tryingToPutAnObjectInAnOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	 ! !

!testRun: #RoomTest #test04youCantPutAnObjectInAOccupiedSlot stamp: 'AD 12/10/2020 18:32:10'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:34:41' prior: 50872073!
putAnObject: anObject at: aSlot
	(aSlot x >= 0 and: aSlot y >= 0) ifFalse:[^self error: self class tryingToPutAnObjectOutOfBoundsErrorDescription].
	(objects includesKey: aSlot asString) ifTrue:[^ self error: self class tryingToPutAnObjectInAnOccupiedSlotErrorDescription].
	objects at: (aSlot asString) put: anObject.
	! !

!testRun: #RoomTest #test04youCantPutAnObjectInAOccupiedSlot stamp: 'AD 12/10/2020 18:34:43'!
ERROR!
!Room class methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:34:55'!
tryingToPutAnObjectInAnOccupiedSlotErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:35:30' prior: 50872168!
tryingToPutAnObjectInAnOccupiedSlotErrorDescription
	^'Slot is already occupied by a portableObject so you cant put an item here'! !

!testRun: #RoomTest #test04youCantPutAnObjectInAOccupiedSlot stamp: 'AD 12/10/2020 18:35:31'!
PASSED!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 18:35:31'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:35:31'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 18:35:31'!
PASSED!

!testRun: #RoomTest #test04youCantPutAnObjectInAOccupiedSlot stamp: 'AD 12/10/2020 18:35:31'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:36:37'!
test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject

	|room portableObject1 portableObject2|
	
	portableObject1 := NoPointsPortableObject named: 'key' weighing: 1.
	portableObject2 := NoPointsPortableObject named: 'ring' weighing: 1.

	room := Room withLength: 3 withHeight: 3.
	
	room putAnObject: portableObject1 at: 1@1.
	
	self should: [room putAnObject: portableObject2 at: 1@1]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:anError |
			self assert: Room tryingToPutAnObjectInAnOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	 ! !

!methodRemoval: RoomTest #test04youCantPutAnObjectInAOccupiedSlot stamp: 'AD 12/10/2020 18:36:37'!
test04youCantPutAnObjectInAOccupiedSlot

	|room portableObject1 portableObject2|
	
	portableObject1 := NoPointsPortableObject named: 'key' weighing: 1.
	portableObject2 := NoPointsPortableObject named: 'ring' weighing: 1.

	room := Room withLength: 3 withHeight: 3.
	
	room putAnObject: portableObject1 at: 1@1.
	
	self should: [room putAnObject: portableObject2 at: 1@1]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:anError |
			self assert: Room tryingToPutAnObjectInAnOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	 !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'AD 12/10/2020 18:41:37'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:41:02'!
test05youCanPutANonPortableObjectInARoom

	|room nonPortableObject|
	
	nonPortableObject := NonPortableObject named: 'Drawers' containing: {}.
	
	room := Room withLength: 3 withHeight: 3.
	
	self deny: (room slotIsOccupied: 1@1).
	room putAnObject: nonPortableObject at: 1@1.
	self assert: (room slotIsOccupied: 1@1).
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 18:41:42'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'AD 12/10/2020 18:41:52'!
named: aString containing: anArray 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString containing: anArray ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'AD 12/10/2020 18:42:28' prior: 50872264!
named: aString containing: aCollectionOfPortableObjects
	
	^self new initializeNamed: aString containing: aCollectionOfPortableObjects ! !

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 18:42:29'!
ERROR!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'AD 12/10/2020 18:42:33'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'container string'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'AD 12/10/2020 18:42:33'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'container string collectionOfPortableObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'AD 12/10/2020 18:42:33'!
initializeNamed: aString containing: aCollectionOfPortableObjects 
	self shouldBeImplemented.
	string := aString.
	collectionOfPortableObjects := aCollectionOfPortableObjects.! !
!NonPortableObject methodsFor: 'initialization' stamp: 'AD 12/10/2020 18:43:17' prior: 50872303!
initializeNamed: aName containing: aCollectionOfPortableObjects 
	
	string := aName.
	collectionOfPortableObjects := aCollectionOfPortableObjects.! !

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 18:43:18'!
PASSED!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 18:43:18'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 18:43:18'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 18:43:18'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 18:43:18'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 18:43:18'!
PASSED!

StageObject subclass: #NonPortableObject
	instanceVariableNames: 'container name collectionOfPortableObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'AD 12/10/2020 18:43:27'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'container name collectionOfPortableObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'AD 12/10/2020 18:43:32' prior: 50872312!
initializeNamed: aName containing: aCollectionOfPortableObjects 
	
	name := aName.
	collectionOfPortableObjects := aCollectionOfPortableObjects.! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'AD 12/10/2020 18:43:43' prior: 50872274!
named: aName containing: aCollectionOfPortableObjects
	
	^self new initializeNamed: aName containing: aCollectionOfPortableObjects ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:47:15'!
test06youCanPutAPortableObjectInANonPortableObject

	|room nonPortableObject portableObject|
	
	room := Room withLength: 3 withHeight: 3.
	nonPortableObject := NonPortableObject named: 'Drawers' containing: {}.
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	
	room putAnObject: nonPortableObject at: 1@1.
	room putAnObject: portableObject at: 1@1.
	
	self assert: (nonPortableObject contains: portableObject).
	
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 18:47:17'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:48:57' prior: 50872152!
putAnObject: anObject at: aSlot
	(aSlot x >= 0 and: aSlot y >= 0) ifFalse:[^self error: self class tryingToPutAnObjectOutOfBoundsErrorDescription].
	anObject putIn: self.
	(objects includesKey: aSlot asString) ifTrue:[^ self error: self class tryingToPutAnObjectInAnOccupiedSlotErrorDescription].
	objects at: (aSlot asString) put: anObject.
	! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 18:49:00'!
ERROR!
!NoPointsPortableObject methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:49:11'!
putIn: aRoom 
	self shouldBeImplemented.! !
!NoPointsPortableObject methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:50:13' prior: 50872410!
putIn: aRoom 
	aRoom putNonPortableObject: self at: 1@1.! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 18:50:16'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:50:30'!
putNonPortableObject: aNoPointsPortableObject at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:52:48' prior: 50872423!
putNonPortableObject: aNoPointsPortableObject at: aSlot
	(self slotIsOccupied: aSlot) ifTrue:[^self error: self class cantPutNonPortableObjectInOccupiedSlotErrorDescription].
	objects at: (aSlot asString) put: aNoPointsPortableObject.! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 18:52:51'!
ERROR!
!Room class methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:53:06'!
cantPutNonPortableObjectInOccupiedSlotErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:53:32' prior: 50872443!
cantPutNonPortableObjectInOccupiedSlotErrorDescription
	^'Cant put non portable object in an occupied slot'! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 18:53:33'!
ERROR!
!NoPointsPortableObject methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:54:24'!
putIn: aRoom at: aSlot
	aRoom putNonPortableObject: self at: aSlot.! !

!methodRemoval: NoPointsPortableObject #putIn: stamp: 'AD 12/10/2020 18:54:29'!
putIn: aRoom 
	aRoom putNonPortableObject: self at: 1@1.!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:55:12' prior: 50872392!
putAnObject: anObject at: aSlot
	(aSlot x >= 0 and: aSlot y >= 0) ifFalse:[^self error: self class tryingToPutAnObjectOutOfBoundsErrorDescription].
	anObject putIn: self at: aSlot.
	
	"(objects includesKey: aSlot asString) ifTrue:[^ self error: self class tryingToPutAnObjectInAnOccupiedSlotErrorDescription].
	objects at: (aSlot asString) put: anObject.
	"! !
!PortableObject methodsFor: 'adding' stamp: 'AD 12/10/2020 18:55:57'!
putIn: aRoom at: aSlot
	aRoom putNonPortableObject: self at: aSlot.! !

!methodRemoval: NoPointsPortableObject #putIn:at: stamp: 'AD 12/10/2020 18:56:07'!
putIn: aRoom at: aSlot
	aRoom putNonPortableObject: self at: aSlot.!
!NonPortableObject methodsFor: 'initialization' stamp: 'AD 12/10/2020 18:56:19'!
putIn: aRoom at: aSlot
	aRoom putNonPortableObject: self at: aSlot.! !
!PortableObject methodsFor: 'adding' stamp: 'AD 12/10/2020 18:56:26' prior: 50872483!
putIn: aRoom at: aSlot
	aRoom putPortableObject: self at: aSlot.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 18:59:13'!
putPortableObject: aNoPointsPortableObject at: aSlot

	(self slotIsOccupied: aSlot) ifTrue:[(objects at: aSlot asString) putIn: self at: aSlot].
	objects at: (aSlot asString) put: aNoPointsPortableObject.! !
!PortableObject methodsFor: 'adding' stamp: 'AD 12/10/2020 18:59:53'!
putOn: aRoom at: aSlot
	aRoom putPortableObject: self at: aSlot.! !

!methodRemoval: PortableObject #putIn:at: stamp: 'AD 12/10/2020 18:59:53'!
putIn: aRoom at: aSlot
	aRoom putPortableObject: self at: aSlot.!
!NonPortableObject methodsFor: 'initialization' stamp: 'AD 12/10/2020 19:00:09'!
putOn: aRoom at: aSlot
	aRoom putNonPortableObject: self at: aSlot.! !

!methodRemoval: NonPortableObject #putIn:at: stamp: 'AD 12/10/2020 19:00:09'!
putIn: aRoom at: aSlot
	aRoom putNonPortableObject: self at: aSlot.!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:00:20'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:00:42' prior: 50872469!
putAnObject: anObject at: aSlot
	(aSlot x >= 0 and: aSlot y >= 0) ifFalse:[^self error: self class tryingToPutAnObjectOutOfBoundsErrorDescription].
	anObject putOn: self at: aSlot.
	
	"(objects includesKey: aSlot asString) ifTrue:[^ self error: self class tryingToPutAnObjectInAnOccupiedSlotErrorDescription].
	objects at: (aSlot asString) put: anObject.
	"! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:00:46'!
ERROR!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:00:46'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:01:23' prior: 50872503!
putPortableObject: aNoPointsPortableObject at: aSlot

	(self slotIsOccupied: aSlot) ifTrue:[(objects at: aSlot asString) putOn: self at: aSlot].
	objects at: (aSlot asString) put: aNoPointsPortableObject.! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:01:24'!
ERROR!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:01:44'!
ERROR!

----SNAPSHOT----(10 December 2020 19:01:57) CuisUniversity-4384.image priorSource: 17183608!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:03:15' prior: 50872558!
putPortableObject: aNoPointsPortableObject at: aSlot

	(self slotIsOccupied: aSlot) ifTrue:[(objects at: aSlot asString) putIn: self at: aSlot].
	objects at: (aSlot asString) put: aNoPointsPortableObject.! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:03:15'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:03:23'!
putIn: aRoom at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:05:24' prior: 50872578!
putPortableObject: aPortableObject at: aSlot

	(self slotIsOccupied: aSlot) ifTrue:[(objects at: aSlot asString) putIn: aPortableObject].
	objects at: (aSlot asString) put: aPortableObject.! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:05:38'!
ERROR!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:05:38'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:05:49'!
putIn: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:06:10' prior: 50872612!
putIn: aPortableObject 
	container add: aPortableObject ! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:08:55'!
ERROR!

!methodRemoval: NonPortableObject #putIn:at: stamp: 'AD 12/10/2020 19:09:29'!
putIn: aRoom at: aPoint 
	self shouldBeImplemented.!
!NonPortableObject methodsFor: 'initialization' stamp: 'AD 12/10/2020 19:09:56' prior: 50872356!
initializeNamed: aName containing: aCollectionOfPortableObjects 
	
	name := aName.
	collectionOfPortableObjects := OrderedCollection new.
	collectionOfPortableObjects := aCollectionOfPortableObjects.! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:10:00'!
ERROR!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:10:00'!
ERROR!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:10:12'!
ERROR!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:10:54'!
ERROR!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:10:54'!
ERROR!
!NonPortableObject methodsFor: 'initialization' stamp: 'AD 12/10/2020 19:12:27'!
initializeNamed: aName 
	
	name := aName.
	collectionOfPortableObjects := OrderedCollection new.
	! !

!methodRemoval: NonPortableObject #initializeNamed:containing: stamp: 'AD 12/10/2020 19:12:32'!
initializeNamed: aName containing: aCollectionOfPortableObjects 
	
	name := aName.
	collectionOfPortableObjects := OrderedCollection new.
	collectionOfPortableObjects := aCollectionOfPortableObjects.!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'AD 12/10/2020 19:12:59'!
named: aName 
	
	^self new initializeNamed: aName! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:13:14' prior: 50872247!
test05youCanPutANonPortableObjectInARoom

	|room nonPortableObject|
	
	nonPortableObject := NonPortableObject named: 'Drawers'.
	
	room := Room withLength: 3 withHeight: 3.
	
	self deny: (room slotIsOccupied: 1@1).
	room putAnObject: nonPortableObject at: 1@1.
	self assert: (room slotIsOccupied: 1@1).
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 19:13:16'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:13:24' prior: 50872371!
test06youCanPutAPortableObjectInANonPortableObject

	|room nonPortableObject portableObject|
	
	room := Room withLength: 3 withHeight: 3.
	nonPortableObject := NonPortableObject named: 'Drawers' .
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	
	room putAnObject: nonPortableObject at: 1@1.
	room putAnObject: portableObject at: 1@1.
	
	self assert: (nonPortableObject contains: portableObject).
	
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:13:26'!
ERROR!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:13:26'!
ERROR!

StageObject subclass: #NonPortableObject
	instanceVariableNames: 'container name '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'AD 12/10/2020 19:14:01'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'container name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'AD 12/10/2020 19:14:10' prior: 50872658!
initializeNamed: aName 
	
	name := aName.
	container := OrderedCollection new.
	! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:14:15'!
ERROR!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:14:15'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:14:22'!
contains: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:14:50' prior: 50872747!
contains: aPortableObject 
	container includes: aPortableObject ! !

----SNAPSHOT----(10 December 2020 19:14:52) CuisUniversity-4384.image priorSource: 17309553!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:14:54'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:15:15' prior: 50872753!
contains: aPortableObject 
	^container includes: aPortableObject ! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:15:19'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:15:24'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:17:57'!
ERROR!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:17:57'!
ERROR!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:21:50'!
ERROR!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:21:50'!
ERROR!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:21:56'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:25:29' prior: 50872596!
putPortableObject: aPortableObject at: aSlot

	(self slotIsOccupied: aSlot) ifTrue:[(objects at: aSlot asString) insert: aPortableObject inaRoom: self].
	objects at: (aSlot asString) put: aPortableObject.! !
!StageObject methodsFor: 'no messages' stamp: 'AD 12/10/2020 19:26:31'!
insert: aPortableObject inARoom: aRoom

	^self subclassResponsibility ! !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:26:48' prior: 50872798!
putPortableObject: aPortableObject at: aSlot

	(self slotIsOccupied: aSlot) ifTrue:[(objects at: aSlot asString) insert: aPortableObject inARoom: self].
	objects at: (aSlot asString) put: aPortableObject.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:27:34' overrides: 50872807!
insert: aPortableObject inARoom: aRoom

	container add: aPortableObject ! !
!PortableObject methodsFor: 'accessing' stamp: 'AD 12/10/2020 19:29:37' overrides: 50872807!
insert: aPortableObject inARoom: aRoom

	^aRoom  insertPortableObjectInsidePortableObject.! !

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:29:52'!
ERROR!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:29:52'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:30:03'!
insertPortableObjectInsidePortableObject
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:30:49' prior: 50872843!
insertPortableObjectInsidePortableObject
	^self error: self class cantInsertPortableObjectInsidePortableObjectErrorDescription.! !

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:30:52'!
ERROR!
!Room class methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:30:58'!
cantInsertPortableObjectInsidePortableObjectErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:31:24' prior: 50872859!
cantInsertPortableObjectInsidePortableObjectErrorDescription
	^'You cant insert a portable object inside another portable object'! !

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:31:26'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:31:49' prior: 50872197!
test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject

	|room portableObject1 portableObject2|
	
	portableObject1 := NoPointsPortableObject named: 'key' weighing: 1.
	portableObject2 := NoPointsPortableObject named: 'ring' weighing: 1.

	room := Room withLength: 3 withHeight: 3.
	
	room putAnObject: portableObject1 at: 1@1.
	
	self should: [room putAnObject: portableObject2 at: 1@1]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:anError |
			self assert: Room cantInsertPortableObjectInsidePortableObjectErrorDescription equals: anError messageText ].
	
	
	
	
	 ! !

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 19:31:49'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:31:49'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:34:55'!
test07youCantPutANonPortableObjectInAOccupiedSlot

	|room nonPortableObject portableObject|
	
	room := Room withLength: 3 withHeight: 3.
	nonPortableObject := NonPortableObject named: 'Drawers' .
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	room putAnObject: portableObject at: 1@1.
	self should: [room putAnObject: nonPortableObject at: 1@1.]
        raise:  Error - MessageNotUnderstood 
	withExceptionDo: [].
	
	
	
	self assert: (nonPortableObject contains: portableObject).
	
	
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:35:37' prior: 50872923!
test07youCantPutANonPortableObjectInAOccupiedSlot

	|room nonPortableObject portableObject|
	
	room := Room withLength: 3 withHeight: 3.
	nonPortableObject := NonPortableObject named: 'Drawers' .
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	room putAnObject: portableObject at: 1@1.
	
	self should: [room putAnObject: nonPortableObject at: 1@1.]
        raise:  Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: Room cantPutNonPortableObjectInOccupiedSlotErrorDescription equals: anError messageText].
	
	
	
	self assert: (nonPortableObject contains: portableObject).
	
	
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:35:44' prior: 50872943!
test07youCantPutANonPortableObjectInAOccupiedSlot

	|room nonPortableObject portableObject|
	
	room := Room withLength: 3 withHeight: 3.
	nonPortableObject := NonPortableObject named: 'Drawers' .
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	room putAnObject: portableObject at: 1@1.
	
	self should: [room putAnObject: nonPortableObject at: 1@1.]
        raise:  Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: Room cantPutNonPortableObjectInOccupiedSlotErrorDescription equals: anError messageText].
	
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test07youCantPutANonPortableObjectInAOccupiedSlot stamp: 'AD 12/10/2020 19:35:44'!
PASSED!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 19:35:44'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 19:35:44'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 19:35:44'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:35:44'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 19:35:44'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:35:44'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInAOccupiedSlot stamp: 'AD 12/10/2020 19:35:44'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:39:02'!
test08youCanPutANonPortableObjectInANonPortableObject

	|room nonPortableObject1 nonPortableObject2|
	
	room := Room withLength: 3 withHeight: 3.
	nonPortableObject1 := NonPortableObject named: 'Drawers' .
	nonPortableObject2 := NonPortableObject named: 'Drawer'.
	
	room putAnObject: nonPortableObject1 at: 1@1.
	room putAnObject: nonPortableObject2 at: 1@1.
	
	self assert: (nonPortableObject1 contains: nonPortableObject2).
	
	
	
	
	
	
	 ! !

----SNAPSHOT----(10 December 2020 19:39:06) CuisUniversity-4384.image priorSource: 17315427!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:40:16'!
ERROR!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:40:16'!
ERROR!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 19:40:24'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 19:40:24'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 19:40:24'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:40:24'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 19:40:24'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:40:24'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInAOccupiedSlot stamp: 'AD 12/10/2020 19:40:24'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:40:24'!
ERROR!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:40:24'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:42:55' prior: 50872813!
putPortableObject: aPortableObject at: aSlot

	(self slotIsOccupied: aSlot) ifTrue:[^self error: self class cantPutNonPortableObjectInOccupiedSlotErrorDescription].
	objects at: (aSlot asString) put: aPortableObject.
	
	
	! !

!methodRemoval: Room #insertPortableObjectInsidePortableObject stamp: 'AD 12/10/2020 19:43:58'!
insertPortableObjectInsidePortableObject
	^self error: self class cantInsertPortableObjectInsidePortableObjectErrorDescription.!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:44:17'!
insert: aPortableObject 

	container add: aPortableObject ! !

!methodRemoval: NonPortableObject #insert:inARoom: stamp: 'AD 12/10/2020 19:44:20'!
insert: aPortableObject inARoom: aRoom

	container add: aPortableObject !

!methodRemoval: NonPortableObject #putIn: stamp: 'AD 12/10/2020 19:44:25'!
putIn: aPortableObject 
	container add: aPortableObject !
!PortableObject methodsFor: 'accessing' stamp: 'AD 12/10/2020 19:45:27'!
insert: aPortableObject

	^self error: self class cantInsertObjectInsideAPortableObjectErrorDescription.! !

!methodRemoval: PortableObject #insert:inARoom: stamp: 'AD 12/10/2020 19:45:33'!
insert: aPortableObject inARoom: aRoom

	^aRoom  insertPortableObjectInsidePortableObject.!
!StageObject methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:46:03'!
insert: anObject 

	^self subclassResponsibility ! !

!methodRemoval: StageObject #insert:inARoom: stamp: 'AD 12/10/2020 19:46:06'!
insert: aPortableObject inARoom: aRoom

	^self subclassResponsibility !

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 19:46:10'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 19:46:10'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 19:46:10'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:46:10'!
FAILURE!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 19:46:10'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:46:10'!
ERROR!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInAOccupiedSlot stamp: 'AD 12/10/2020 19:46:10'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:46:10'!
ERROR!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:46:26'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:47:59'!
test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject

	|room nonPortableObject portableObject|
	
	room := Room withLength: 3 withHeight: 3.
	nonPortableObject := NonPortableObject named: 'Drawers' .
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	room putAnObject: portableObject at: 1@1.
	
	self should: [room putAnObject: nonPortableObject at: 1@1.]
        raise:  Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: Room cantPutNonPortableObjectInOccupiedSlotErrorDescription equals: anError messageText].
	
	
	
	
	
	
	 ! !

!methodRemoval: RoomTest #test07youCantPutANonPortableObjectInAOccupiedSlot stamp: 'AD 12/10/2020 19:47:59'!
test07youCantPutANonPortableObjectInAOccupiedSlot

	|room nonPortableObject portableObject|
	
	room := Room withLength: 3 withHeight: 3.
	nonPortableObject := NonPortableObject named: 'Drawers' .
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	room putAnObject: portableObject at: 1@1.
	
	self should: [room putAnObject: nonPortableObject at: 1@1.]
        raise:  Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: Room cantPutNonPortableObjectInOccupiedSlotErrorDescription equals: anError messageText].
	
	
	
	
	
	
	 !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:49:54' prior: 50872429!
putNonPortableObject: aNonPortableObject at: aSlot
	(self slotIsOccupied: aSlot) ifTrue:[(objects at: (aSlot asString)) insert: aNonPortableObject ].
	objects at: (aSlot asString) put: aNonPortableObject.! !
!PortableObject class methodsFor: 'nil' stamp: 'AD 12/10/2020 19:51:32'!
cantInsertObjectInsideAPortableObjectErrorDescription

	^'cant Insert Object Inside A PortableObject'! !

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 19:52:20'!
FAILURE!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 19:52:20'!
FAILURE!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 19:52:31'!
FAILURE!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 19:52:31'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:52:58' prior: 50873156!
test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject

	|room nonPortableObject portableObject|
	
	room := Room withLength: 3 withHeight: 3.
	nonPortableObject := NonPortableObject named: 'Drawers' .
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	room putAnObject: portableObject at: 1@1.
	
	self should: [room putAnObject: nonPortableObject at: 1@1.]
        raise:  Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: PortableObject cantInsertObjectInsideAPortableObjectErrorDescription equals: anError messageText].
	
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 19:53:01'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:53:25' prior: 50872877!
test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject

	|room portableObject1 portableObject2|
	
	portableObject1 := NoPointsPortableObject named: 'key' weighing: 1.
	portableObject2 := NoPointsPortableObject named: 'ring' weighing: 1.

	room := Room withLength: 3 withHeight: 3.
	
	room putAnObject: portableObject1 at: 1@1.
	
	self should: [room putAnObject: portableObject2 at: 1@1]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:anError |
			self assert: PortableObject cantInsertObjectInsideAPortableObjectErrorDescription equals: anError messageText ].
	
	
	
	
	 ! !

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:53:27'!
FAILURE!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:53:27'!
FAILURE!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:53:35'!
FAILURE!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:53:42'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:54:09' prior: 50873257!
test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject

	|room portableObject1 portableObject2|
	
	portableObject1 := NoPointsPortableObject named: 'key' weighing: 1.
	portableObject2 := NoPointsPortableObject named: 'ring' weighing: 1.

	room := Room withLength: 3 withHeight: 3.
	
	room putAnObject: portableObject1 at: 1@1.
	
	self should: [room putAnObject: portableObject2 at: 1@1]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:anError |
			self assert: Room cantPutNonPortableObjectInOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	 ! !

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:54:09'!
PASSED!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 19:54:09'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 19:54:09'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 19:54:09'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 19:54:09'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 19:54:09'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:54:09'!
ERROR!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 19:54:09'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:54:09'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 19:54:09'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:54:23' prior: 50873296!
test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject

	|room portableObject1 portableObject2|
	
	portableObject1 := NoPointsPortableObject named: 'key' weighing: 1.
	portableObject2 := NoPointsPortableObject named: 'ring' weighing: 1.

	room := Room withLength: 3 withHeight: 3.
	
	room putAnObject: portableObject1 at: 1@1.
	
	self should: [room putAnObject: portableObject2 at: 1@1]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:anError |
			self assert: Room  equals: anError messageText ].
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 19:59:59' prior: 50872679!
test05youCanPutANonPortableObjectInARoom

	|room nonPortableObject|
	
	nonPortableObject := NonPortableObject named: 'Drawers' containing: {}.
	
	room := Room withLength: 3 withHeight: 3.
	
	self deny: (room slotIsOccupied: 1@1).
	room putAnObject: nonPortableObject at: 1@1.
	self assert: (room slotIsOccupied: 1@1).
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 19:59:59'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'AD 12/10/2020 20:00:40' prior: 50872364!
named: aName containing: aCollectionOfObjects
	
	^self new initializeNamed: aName containing: aCollectionOfObjects ! !

!methodRemoval: NonPortableObject class #named: stamp: 'AD 12/10/2020 20:00:44'!
named: aName 
	
	^self new initializeNamed: aName!
!NonPortableObject methodsFor: 'initialization' stamp: 'AD 12/10/2020 20:01:19'!
initializeNamed: aName containing: aCollectionOfObjects
	
	name := aName.
	container := aCollectionOfObjects .
	
	! !

!methodRemoval: NonPortableObject #initializeNamed: stamp: 'AD 12/10/2020 20:01:24'!
initializeNamed: aName 
	
	name := aName.
	container := OrderedCollection new.
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:02:36' prior: 50872696!
test06youCanPutAPortableObjectInANonPortableObject

	|room nonPortableObject portableObject|
	
	room := Room withLength: 3 withHeight: 3.
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Drawers' containing: {portableObject}.
	
	
	room putAnObject: nonPortableObject at: 1@1.
	
	
	self assert: (nonPortableObject contains: portableObject).
	
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:02:36'!
PASSED!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 20:02:36'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 20:02:36'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 20:02:36'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 20:02:36'!
FAILURE!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 20:02:36'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:02:36'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 20:02:36'!
ERROR!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:02:36'!
ERROR!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:02:40'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:03:53' prior: 50873231!
test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject

	|room nonPortableObject portableObject|
	
	room := Room withLength: 3 withHeight: 3.
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Drawers' containing: {}.
	
	room putAnObject: portableObject at: 1@1.
	
	self should: [room putAnObject: nonPortableObject at: 1@1.]
        raise:  Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: Room cantPutNonPortableObjectInOccupiedSlotErrorDescription equals: anError messageText].
	
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 20:03:53'!
FAILURE!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 20:04:00'!
FAILURE!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 20:04:00'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:04:51' prior: 50873199!
putNonPortableObject: aNonPortableObject at: aSlot
	(self slotIsOccupied: aSlot) ifTrue:[^self error: self class cantPutNonPortableObjectInOccupiedSlotErrorDescription].
	objects at: (aSlot asString) put: aNonPortableObject.! !

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 20:05:01'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 20:05:01'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 20:05:01'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 20:05:01'!
FAILURE!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 20:05:01'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:05:01'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 20:05:01'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:05:01'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:06:10' prior: 50873354!
test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject

	|room portableObject1 portableObject2|
	
	portableObject1 := NoPointsPortableObject named: 'key' weighing: 1.
	portableObject2 := NoPointsPortableObject named: 'ring' weighing: 1.

	room := Room withLength: 3 withHeight: 3.
	
	room putAnObject: portableObject1 at: 1@1.
	
	self should: [room putAnObject: portableObject2 at: 1@1]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:anError |
			self assert: Room cantPutObjectInOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	 ! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:06:26'!
cantPutObjectInOccupiedSlotErrorDescription
	^'Cant put object in an occupied slot'! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:06:38' prior: 50873466!
test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject

	|room nonPortableObject portableObject|
	
	room := Room withLength: 3 withHeight: 3.
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Drawers' containing: {}.
	
	room putAnObject: portableObject at: 1@1.
	
	self should: [room putAnObject: nonPortableObject at: 1@1.]
        raise:  Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: Room cantPutObjectInOccupiedSlotErrorDescription equals: anError messageText].
	
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 20:06:40'!
FAILURE!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 20:06:48'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 20:06:48'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 20:06:48'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 20:06:48'!
FAILURE!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 20:06:48'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:06:48'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 20:06:48'!
FAILURE!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:06:48'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:07:32' prior: 50873014!
test08youCanPutANonPortableObjectInANonPortableObject

	|room nonPortableObject1 nonPortableObject2|
	
	room := Room withLength: 3 withHeight: 3.
	nonPortableObject2 := NonPortableObject named: 'Drawer' containing:{}.
	nonPortableObject1 := NonPortableObject named: 'Drawers' containing:{nonPortableObject2} .
	
	
	room putAnObject: nonPortableObject1 at: 1@1.
	
	
	self assert: (nonPortableObject1 contains: nonPortableObject2).
	
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:07:34'!
PASSED!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 20:07:34'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 20:07:34'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 20:07:34'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 20:07:34'!
FAILURE!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 20:07:34'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:07:34'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 20:07:34'!
FAILURE!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:07:34'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:08:06' prior: 50873073!
putPortableObject: aPortableObject at: aSlot

	(self slotIsOccupied: aSlot) ifTrue:[^self error: self class cantPutObjectInOccupiedSlotErrorDescription].
	objects at: (aSlot asString) put: aPortableObject.
	
	
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:08:12' prior: 50873500!
putNonPortableObject: aNonPortableObject at: aSlot
	(self slotIsOccupied: aSlot) ifTrue:[^self error: self class cantPutObjectInOccupiedSlotErrorDescription].
	objects at: (aSlot asString) put: aNonPortableObject.! !

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 20:08:16'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 20:08:16'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 20:08:16'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 20:08:16'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 20:08:16'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:08:16'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 20:08:16'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:08:16'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:12:27'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AD 12/10/2020 20:14:18'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AD 12/10/2020 20:14:18'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AD 12/10/2020 20:14:18'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AD 12/10/2020 20:14:18'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AD 12/10/2020 20:14:18'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AD 12/10/2020 20:14:18'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AD 12/10/2020 20:14:18'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AD 12/10/2020 20:14:18'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AD 12/10/2020 20:14:18'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AD 12/10/2020 20:14:18'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:30:02'!
test09youCanPutAPlayableCharacterInTheRoom

	|room playableCharacter|
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #North.
	room spawnPlayer: playableCharacter at: 0@0.
	
	
	
	
	
	
	
	
	 ! !

Object subclass: #Room
	instanceVariableNames: 'length heigth objects playerPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AD 12/10/2020 20:30:39'!
Object subclass: #Room
	instanceVariableNames: 'length heigth objects playerPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:32:00' prior: 50873876!
test09youCanPutAPlayableCharacterInTheRoom

	|room playableCharacter|
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #North.
	room spawnPlayer: playableCharacter at: (0@0).
	
	self assert: room playerPosition equals: (0@0).
	
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 20:32:02'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:32:11'!
spawnPlayer: aPlayableCharacter at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:32:38' prior: 50873917!
spawnPlayer: aPlayableCharacter at: aSlot
	playerPosition := aSlot! !

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 20:32:41'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:32:45'!
playerPosition
	self shouldBeImplemented.
	^playerPosition! !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:32:50' prior: 50873931!
playerPosition
	^playerPosition! !

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 20:32:56'!
PASSED!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 20:32:56'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 20:32:56'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 20:32:56'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 20:32:56'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 20:32:56'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:32:56'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 20:32:56'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:32:56'!
PASSED!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 20:32:56'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:35:41'!
test10youCantPutAnObjectOnThePlayersPosition

	|room playableCharacter object|
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #North.
	room spawnPlayer: playableCharacter at: (0@0).
	object := NonPortableObject named: 'Drawer' containing: {}.
	
	self should: [room putAnObject: object at: 0@0] raise: Error withExceptionDo: [].
	
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:36:13' prior: 50873975!
test10youCantPutAnObjectOnThePlayersPosition

	|room playableCharacter object|
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #North.
	room spawnPlayer: playableCharacter at: (0@0).
	object := NonPortableObject named: 'Drawer' containing: {}.
	
	self should: [room putAnObject: object at: 0@0] raise: Error withExceptionDo: [:anError |
			self assert: Room cantPutObjectInOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 20:36:13'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:37:13' prior: 50871965!
slotIsOccupied: aSlot
	^(objects includesKey: aSlot asString) or: (aSlot = playerPosition)! !

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 20:37:14'!
PASSED!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 20:37:14'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 20:37:14'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 20:37:14'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 20:37:14'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 20:37:14'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:37:14'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 20:37:14'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 20:37:14'!
PASSED!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 20:37:14'!
PASSED!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 20:37:14'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/10/2020 20:44:43'!
test11playerCantMoveToWhereThereIsAnObjectInARoom
	| playableCharacter room object|
	
	room:= Room withLength: 3 withHeight: 3.
	object  := NonPortableObject named: 'Drawers' containing: {}.
	room putAnObject: object at: 1@2.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North .
	
	
	self 
		should: [ playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cantMoveToWhereThereIsAnObjectErrorDescription equals: anError messageText.
			 ]
	
	! !

!testRun: #PlayableCharacterTest #test11playerCantMoveToWhereThereIsAnObjectInARoom stamp: 'AD 12/10/2020 20:44:44'!
FAILURE!

Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'AD 12/10/2020 20:46:40'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'AD 12/10/2020 20:47:26'!
putInARoom: aRoom

	room := aRoom! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AD 12/10/2020 20:47:59' prior: 50874059!
test11playerCantMoveToWhereThereIsAnObjectInARoom
	| playableCharacter room object|
	
	room:= Room withLength: 3 withHeight: 3.
	object  := NonPortableObject named: 'Drawers' containing: {}.
	room putAnObject: object at: 1@2.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North .
	playableCharacter putInARoom: room.
	
	self 
		should: [ playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cantMoveToWhereThereIsAnObjectErrorDescription equals: anError messageText.
			 ]
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:59:18'!
test11youCantMoveThePlayerOutOfBounds

	"Tome la decision de que el room se encargue de mover al personaje, dado que es el objeto que mas informacion tiene con respecto de objetos que estan adentro,"

	|room playableCharacter |
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #West.
	room spawnPlayer: playableCharacter at: (0@0).

	
	self should: [room movePlayerForward] raise: Error withExceptionDo: [:anError |
			self assert: Room cantMovePlayerOutOfBoundsErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test11youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 20:59:23'!
ERROR!
!Room class methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:59:31'!
cantMovePlayerOutOfBoundsErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 20:59:51' prior: 50874151!
cantMovePlayerOutOfBoundsErrorDescription
	^'Cant move player out of bounds'! !

!testRun: #RoomTest #test11youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 20:59:52'!
FAILURE!

!testRun: #RoomTest #test11youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:00:03'!
PASSED!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 21:00:03'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:00:03'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 21:00:03'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 21:00:03'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 21:00:03'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:00:03'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 21:00:03'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:00:03'!
PASSED!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:00:03'!
PASSED!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:00:03'!
PASSED!

!testRun: #RoomTest #test11youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:00:03'!
FAILURE!

!testRun: #RoomTest #test11youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:00:03'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:00:28' prior: 50874126!
test11youCantMoveThePlayerOutOfBounds

	"Tome la decision de que el room se encargue de mover al personaje, dado que es el objeto que mas informacion tiene con respecto de objetos que estan adentro,"

	|room playableCharacter |
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #West.
	room spawnPlayer: playableCharacter at: (0@0).

	
	self should: [room movePlayerForward] raise: Error withExceptionDo: [:anError |
			self assert: Room cantMovePlayerOutOfBoundsErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !
!Room methodsFor: 'player movement within room' stamp: 'AD 12/10/2020 21:03:37'!
movePlayerForward

	! !

Object subclass: #Room
	instanceVariableNames: 'length heigth objects player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'AD 12/10/2020 21:03:44'!
Object subclass: #Room
	instanceVariableNames: 'length heigth objects player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:05:25' prior: 50873923!
spawnPlayer: aPlayableCharacter at: aSlot
	(self slotIsOccupied: aSlot) ifTrue: [^self error: self class cantSpawnPlayerOnAOccupiedSlotErrorDescription].
	player := aPlayableCharacter.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:07:23'!
test11youCantSpawnPlayerOnAOccupiedSlot

	"Tome la decision de que el room se encargue de mover al personaje, dado que es el objeto que mas informacion tiene con respecto de objetos que estan adentro,"

	|room playableCharacter object|
	
	room := Room withLength: 3 withHeight: 3.
	object := NonPortableObject named: 'Drawer' containing: {}.
	room putAnObject: object at: 0@0.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #West.
	room spawnPlayer: playableCharacter at: (0@0).

	
	self should: [room spawnPlayer: playableCharacter at: (0@0).] 
	raise: Error 
	withExceptionDo: [:anError |
			self assert: Room  equals: anError messageText ].
	
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:07:54' prior: 50874258!
test11youCantSpawnPlayerOnAOccupiedSlot

	"Tome la decision de que el room se encargue de mover al personaje, dado que es el objeto que mas informacion tiene con respecto de objetos que estan adentro,"

	|room playableCharacter object|
	
	room := Room withLength: 3 withHeight: 3.
	object := NonPortableObject named: 'Drawer' containing: {}.
	room putAnObject: object at: 0@0.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #West.
	room spawnPlayer: playableCharacter at: (0@0).

	
	self should: [room spawnPlayer: playableCharacter at: (0@0).] 
	raise: Error 
	withExceptionDo: [:anError |
			self assert: Room cantSpawnPlayerOnAOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:08:16'!
cantSpawnPlayerOnAOccupiedSlotErrorDescription
	^'Cant spawn a player on an occupied slot'! !

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:08:21'!
ERROR!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:08:21'!
ERROR!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:08:30'!
ERROR!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:08:30'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:09:02' prior: 50874283!
test11youCantSpawnPlayerOnAOccupiedSlot

	"Tome la decision de que el room se encargue de mover al personaje, dado que es el objeto que mas informacion tiene con respecto de objetos que estan adentro,"

	|room playableCharacter object|
	
	room := Room withLength: 3 withHeight: 3.
	object := NonPortableObject named: 'Drawer' containing: {}.
	room putAnObject: object at: 0@0.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #West.
	room spawnPlayer: playableCharacter at: (0@0).

	
	self should: [room spawnPlayer: playableCharacter at: (0@0).] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: Room cantSpawnPlayerOnAOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:09:02'!
ERROR!

self slotIsOccupied: aSlot!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:09:25'!
PASSED!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 21:09:25'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:09:25'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 21:09:25'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 21:09:25'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 21:09:25'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:09:25'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 21:09:25'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:09:25'!
PASSED!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:09:25'!
FAILURE!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:09:25'!
FAILURE!

!testRun: #RoomTest #test11youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:09:25'!
FAILURE!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:09:25'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:09:46' prior: 50874249!
spawnPlayer: aPlayableCharacter at: aSlot
	(self slotIsOccupied: aSlot) ifTrue: [^self error: self class cantSpawnPlayerOnAOccupiedSlotErrorDescription].
	player := aPlayableCharacter.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:09:55'!
test12youCantMoveThePlayerOutOfBounds

	"Tome la decision de que el room se encargue de mover al personaje, dado que es el objeto que mas informacion tiene con respecto de objetos que estan adentro,"

	|room playableCharacter |
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #West.
	room spawnPlayer: playableCharacter at: (0@0).

	
	self should: [room movePlayerForward] raise: Error withExceptionDo: [:anError |
			self assert: Room cantMovePlayerOutOfBoundsErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !

!methodRemoval: RoomTest #test11youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:09:56'!
test11youCantMoveThePlayerOutOfBounds

	"Tome la decision de que el room se encargue de mover al personaje, dado que es el objeto que mas informacion tiene con respecto de objetos que estan adentro,"

	|room playableCharacter |
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #West.
	room spawnPlayer: playableCharacter at: (0@0).

	
	self should: [room movePlayerForward] raise: Error withExceptionDo: [:anError |
			self assert: Room cantMovePlayerOutOfBoundsErrorDescription equals: anError messageText ].
	
	
	
	
	
	 !

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:09:59'!
ERROR!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:09:59'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:10:13' prior: 50874328!
test11youCantSpawnPlayerOnAOccupiedSlot

	"Tome la decision de que el room se encargue de mover al personaje, dado que es el objeto que mas informacion tiene con respecto de objetos que estan adentro,"

	|room playableCharacter object|
	
	room := Room withLength: 3 withHeight: 3.
	object := NonPortableObject named: 'Drawer' containing: {}.
	room putAnObject: object at: 0@0.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #West.

	
	self should: [room spawnPlayer: playableCharacter at: (0@0).] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: Room cantSpawnPlayerOnAOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:10:13'!
PASSED!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 21:10:13'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:10:13'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 21:10:13'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 21:10:13'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 21:10:13'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:10:13'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 21:10:13'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:10:13'!
PASSED!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:10:13'!
FAILURE!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:10:13'!
FAILURE!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:10:13'!
PASSED!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:10:13'!
FAILURE!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:10:24'!
FAILURE!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:10:24'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:11:17' prior: 50873901!
test09youCanPutAPlayableCharacterInTheRoom

	|room playableCharacter|
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #North.
	room spawnPlayer: playableCharacter at: (0@0).
	
	self assert: room player position equals: (0@0).
	
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:11:17'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:11:23'!
player
	self shouldBeImplemented.
	^player! !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:11:26' prior: 50874556!
player
	
	^player! !

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:11:27'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:11:37' prior: 50874540!
test09youCanPutAPlayableCharacterInTheRoom

	|room playableCharacter|
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #North.
	room spawnPlayer: playableCharacter at: (0@0).
	
	self assert: room player  equals: (0@0).
	
	
	
	
	
	
	 ! !
!PlayableCharacter methodsFor: 'rotating' stamp: 'AD 12/10/2020 21:12:01'!
currentPosition
	
	^position ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:12:12' prior: 50874568!
test09youCanPutAPlayableCharacterInTheRoom

	|room playableCharacter|
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #North.
	room spawnPlayer: playableCharacter at: (0@0).
	
	self assert: room player currentPosition  equals: (0@0).
	
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:12:12'!
PASSED!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 21:12:12'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:12:12'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 21:12:12'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 21:12:12'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 21:12:12'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:12:12'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 21:12:12'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:12:12'!
PASSED!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:12:12'!
PASSED!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:12:12'!
FAILURE!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:12:12'!
PASSED!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:12:12'!
FAILURE!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:12:21'!
FAILURE!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:12:21'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:13:26'!
spawnPlayer: aPlayableCharacter 
	(self slotIsOccupied: aPlayableCharacter currentPosition ) ifTrue: [^self error: self class cantSpawnPlayerOnAOccupiedSlotErrorDescription].
	player := aPlayableCharacter.! !

!methodRemoval: Room #spawnPlayer:at: stamp: 'AD 12/10/2020 21:13:36'!
spawnPlayer: aPlayableCharacter at: aSlot
	(self slotIsOccupied: aSlot) ifTrue: [^self error: self class cantSpawnPlayerOnAOccupiedSlotErrorDescription].
	player := aPlayableCharacter.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:13:46' prior: 50874585!
test09youCanPutAPlayableCharacterInTheRoom

	|room playableCharacter|
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #North.
	room spawnPlayer: playableCharacter.
	
	self assert: room player currentPosition  equals: (0@0).
	
	
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:13:51' prior: 50873992!
test10youCantPutAnObjectOnThePlayersPosition

	|room playableCharacter object|
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #North.
	room spawnPlayer: playableCharacter .
	object := NonPortableObject named: 'Drawer' containing: {}.
	
	self should: [room putAnObject: object at: 0@0] raise: Error withExceptionDo: [:anError |
			self assert: Room cantPutObjectInOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:13:57' prior: 50874463!
test11youCantSpawnPlayerOnAOccupiedSlot

	"Tome la decision de que el room se encargue de mover al personaje, dado que es el objeto que mas informacion tiene con respecto de objetos que estan adentro,"

	|room playableCharacter object|
	
	room := Room withLength: 3 withHeight: 3.
	object := NonPortableObject named: 'Drawer' containing: {}.
	room putAnObject: object at: 0@0.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #West.

	
	self should: [room spawnPlayer: playableCharacter.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: Room cantSpawnPlayerOnAOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:14:06' prior: 50874413!
test12youCantMoveThePlayerOutOfBounds

	"Tome la decision de que el room se encargue de mover al personaje, dado que es el objeto que mas informacion tiene con respecto de objetos que estan adentro,"

	|room playableCharacter |
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #West.
	room spawnPlayer: playableCharacter .

	
	self should: [room movePlayerForward] raise: Error withExceptionDo: [:anError |
			self assert: Room cantMovePlayerOutOfBoundsErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 21:14:09'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:14:09'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 21:14:09'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 21:14:09'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 21:14:09'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:14:09'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 21:14:09'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:14:09'!
PASSED!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:14:09'!
PASSED!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:14:09'!
FAILURE!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:14:09'!
PASSED!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:14:09'!
FAILURE!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:14:12'!
FAILURE!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:14:12'!
FAILURE!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:14:28'!
FAILURE!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:14:28'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:15:04' prior: 50874015!
slotIsOccupied: aSlot
	^(objects includesKey: aSlot asString) or: (aSlot = player currentPosition )! !

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:15:05'!
PASSED!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:15:08'!
ERROR!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:15:08'!
ERROR!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:15:24'!
ERROR!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:15:31'!
ERROR!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:15:45'!
ERROR!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:15:45'!
ERROR!

self slotIsOccupied: aPlayableCharacter currentPosition !
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:17:11' prior: 50874650!
spawnPlayer: aPlayableCharacter 
	(self slotIsOccupied: (aPlayableCharacter currentPosition )) ifTrue: [^self error: self class cantSpawnPlayerOnAOccupiedSlotErrorDescription].
	player := aPlayableCharacter.! !

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:17:16'!
ERROR!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:17:16'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:17:47' prior: 50874835!
spawnPlayer: aPlayableCharacter 
	(self slotIsOccupied: (aPlayableCharacter currentPosition) asString) ifTrue: [^self error: self class cantSpawnPlayerOnAOccupiedSlotErrorDescription].
	player := aPlayableCharacter.! !

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:17:50'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:18:12' prior: 50874852!
spawnPlayer: aPlayableCharacter 
	(self slotIsOccupied: aPlayableCharacter currentPosition) ifTrue: [^self error: self class cantSpawnPlayerOnAOccupiedSlotErrorDescription].
	player := aPlayableCharacter.! !

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:18:18'!
ERROR!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:18:18'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:18:39' prior: 50874803!
slotIsOccupied: aSlot
	^(objects includesKey: aSlot asString) or: (aSlot = (player currentPosition asString ))! !

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:18:40'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:19:42'!
spawnPlayer: aPlayableCharacter at: aSlot
	(self slotIsOccupied: aSlot) ifTrue: [^self error: self class cantSpawnPlayerOnAOccupiedSlotErrorDescription].
	player := aPlayableCharacter.! !

!methodRemoval: Room #spawnPlayer: stamp: 'AD 12/10/2020 21:19:49'!
spawnPlayer: aPlayableCharacter 
	(self slotIsOccupied: aPlayableCharacter currentPosition) ifTrue: [^self error: self class cantSpawnPlayerOnAOccupiedSlotErrorDescription].
	player := aPlayableCharacter.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:20:00' prior: 50874668!
test09youCanPutAPlayableCharacterInTheRoom

	|room playableCharacter|
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #North.
	room spawnPlayer: playableCharacter at: 0@0.
	
	self assert: room player currentPosition  equals: (0@0).
	
	
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:20:08' prior: 50874681!
test10youCantPutAnObjectOnThePlayersPosition

	|room playableCharacter object|
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #North.
	room spawnPlayer: playableCharacter at: 0@0.
	object := NonPortableObject named: 'Drawer' containing: {}.
	
	self should: [room putAnObject: object at: 0@0] raise: Error withExceptionDo: [:anError |
			self assert: Room cantPutObjectInOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:20:15' prior: 50874701!
test11youCantSpawnPlayerOnAOccupiedSlot

	"Tome la decision de que el room se encargue de mover al personaje, dado que es el objeto que mas informacion tiene con respecto de objetos que estan adentro,"

	|room playableCharacter object|
	
	room := Room withLength: 3 withHeight: 3.
	object := NonPortableObject named: 'Drawer' containing: {}.
	room putAnObject: object at: 0@0.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #West.

	
	self should: [room spawnPlayer: playableCharacter at: 0@0.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: Room cantSpawnPlayerOnAOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:20:22' prior: 50874726!
test12youCantMoveThePlayerOutOfBounds

	"Tome la decision de que el room se encargue de mover al personaje, dado que es el objeto que mas informacion tiene con respecto de objetos que estan adentro,"

	|room playableCharacter |
	
	room := Room withLength: 3 withHeight: 3.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #West.
	room spawnPlayer: playableCharacter at: 0@0.

	
	self should: [room movePlayerForward] raise: Error withExceptionDo: [:anError |
			self assert: Room cantMovePlayerOutOfBoundsErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 21:20:28'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:20:28'!
ERROR!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 21:20:28'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 21:20:28'!
ERROR!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 21:20:28'!
ERROR!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:20:28'!
ERROR!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 21:20:28'!
ERROR!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:20:28'!
ERROR!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:20:28'!
ERROR!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:20:28'!
ERROR!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:20:28'!
ERROR!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:20:28'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:20:50' prior: 50874881!
slotIsOccupied: aSlot
	^(objects includesKey: aSlot asString) or: (aSlot = player currentPosition)! !

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 21:20:52'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:20:52'!
ERROR!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 21:20:52'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 21:20:52'!
ERROR!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 21:20:52'!
ERROR!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:20:52'!
ERROR!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 21:20:52'!
ERROR!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:20:52'!
ERROR!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:20:52'!
ERROR!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:20:52'!
ERROR!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:20:52'!
ERROR!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:20:52'!
ERROR!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:20:56'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:22:27' prior: 50875032!
slotIsOccupied: aSlot
	^(objects includesKey: aSlot asString) or: (aSlot = player currentPosition ifNil: [^false]).! !

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:22:28'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:23:37' prior: 50875083!
slotIsOccupied: aSlot
	^(objects includesKey: aSlot asString) or: (player ifNil: [^false] ifNotNil: [^aSlot = player currentPosition] ).! !

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:23:38'!
FAILURE!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 21:23:52'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:23:52'!
FAILURE!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 21:23:52'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 21:23:52'!
FAILURE!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 21:23:52'!
FAILURE!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:23:52'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 21:23:52'!
FAILURE!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:23:52'!
PASSED!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:23:52'!
PASSED!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:23:52'!
PASSED!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:23:52'!
FAILURE!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:23:52'!
FAILURE!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:24:08'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:25:11' prior: 50875093!
slotIsOccupied: aSlot
	^(objects includesKey: aSlot asString) .! !

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:25:12'!
PASSED!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:26:10' prior: 50874891!
spawnPlayer: aPlayableCharacter at: aSlot
	(self slotIsOccupied: aSlot) ifTrue: [^self error: self class cantSpawnPlayerOnAOccupiedSlotErrorDescription].
	player := aPlayableCharacter.
	objects at: aPlayableCharacter currentPosition put: aPlayableCharacter .! !

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 21:26:12'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:26:12'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 21:26:12'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 21:26:12'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 21:26:12'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:26:12'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 21:26:12'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:26:12'!
PASSED!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:26:12'!
PASSED!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:26:12'!
FAILURE!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:26:12'!
PASSED!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:26:12'!
FAILURE!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:26:29'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:27:46' prior: 50875149!
slotIsOccupied: aSlot
	^(objects includesKey: aSlot ) .! !

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:27:47'!
PASSED!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:27:52'!
FAILURE!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 21:28:06'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:28:06'!
FAILURE!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 21:28:06'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 21:28:06'!
FAILURE!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 21:28:06'!
FAILURE!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:28:06'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 21:28:06'!
FAILURE!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:28:06'!
PASSED!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:28:06'!
PASSED!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:28:06'!
PASSED!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:28:06'!
FAILURE!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:28:06'!
FAILURE!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:28:10'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:28:39' prior: 50875214!
slotIsOccupied: aSlot
	^(objects includesKey: aSlot asString ) .! !

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:28:40'!
PASSED!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 21:28:43'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:28:43'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 21:28:43'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 21:28:43'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 21:28:43'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:28:43'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 21:28:43'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:28:43'!
PASSED!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:28:43'!
PASSED!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:28:43'!
FAILURE!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:28:43'!
PASSED!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:28:43'!
FAILURE!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:28:46'!
FAILURE!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 21:29:14'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:29:14'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 21:29:14'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 21:29:14'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 21:29:14'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:29:14'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 21:29:14'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:29:14'!
PASSED!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:29:14'!
PASSED!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:29:14'!
FAILURE!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:29:14'!
PASSED!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:29:14'!
FAILURE!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:29:19'!
FAILURE!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:29:19'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:29:51' prior: 50875158!
spawnPlayer: aPlayableCharacter at: aSlot
	(self slotIsOccupied: aSlot) ifTrue: [^self error: self class cantSpawnPlayerOnAOccupiedSlotErrorDescription].
	player := aPlayableCharacter.
	objects at: aPlayableCharacter currentPosition asString put: aPlayableCharacter .! !

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 21:29:54'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:29:54'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 21:29:54'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 21:29:54'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 21:29:54'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:29:54'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 21:29:54'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:29:54'!
PASSED!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:29:54'!
PASSED!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:29:54'!
PASSED!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:29:54'!
PASSED!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:29:54'!
FAILURE!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:29:54'!
FAILURE!

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 21:29:59'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:29:59'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 21:29:59'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 21:29:59'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 21:29:59'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:29:59'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 21:29:59'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:29:59'!
PASSED!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:29:59'!
PASSED!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:29:59'!
PASSED!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:29:59'!
PASSED!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:29:59'!
FAILURE!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:29:59'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:31:21'!
defaultPortableObject
	
	^NoPointsPortableObject named: 'key' weighing: 1.
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:31:35' prior: 50872115!
test02youCanPutAnPortableObjectInARoom

	|room portableObject|
	
	portableObject := self defaultPortableObject.
	room := Room withLength: 3 withHeight: 3.
	
	self deny: (room slotIsOccupied: 1@1).
	
	room putAnObject: portableObject at: 1@1.
	self assert: (room slotIsOccupied: 1@1).
	
	
	
	 ! !

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:31:37'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:31:56'!
createDefaultRoom

	^Room withLength: 3 withHeight: 3.
	
	 ! !

!testRun: #RoomTest #test01cantCreateNegativeOrZeroSizedRoom stamp: 'AD 12/10/2020 21:31:56'!
PASSED!

!testRun: #RoomTest #test02youCanPutAnPortableObjectInARoom stamp: 'AD 12/10/2020 21:31:56'!
PASSED!

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 21:31:56'!
PASSED!

!testRun: #RoomTest #test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject stamp: 'AD 12/10/2020 21:31:56'!
PASSED!

!testRun: #RoomTest #test05youCanPutANonPortableObjectInARoom stamp: 'AD 12/10/2020 21:31:56'!
PASSED!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:31:56'!
PASSED!

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 21:31:56'!
PASSED!

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:31:56'!
PASSED!

!testRun: #RoomTest #test09youCanPutAPlayableCharacterInTheRoom stamp: 'AD 12/10/2020 21:31:56'!
PASSED!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:31:56'!
PASSED!

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:31:56'!
PASSED!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:31:56'!
FAILURE!

!testRun: #RoomTest #test12youCantMoveThePlayerOutOfBounds stamp: 'AD 12/10/2020 21:31:56'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:32:24' prior: 50875477!
test02youCanPutAnPortableObjectInARoom

	|room portableObject|
	
	portableObject := self defaultPortableObject.
	room := self createDefaultRoom.
	
	self deny: (room slotIsOccupied: 1@1).
	
	room putAnObject: portableObject at: 1@1.
	self assert: (room slotIsOccupied: 1@1).
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:32:40' prior: 50872099!
test03youCantPutAnObjectOutOfBounds

	|room portableObject|
	
	portableObject := self defaultPortableObject.
	room := room := self createDefaultRoom.
	
	self should: [room putAnObject: portableObject at: -1@-1]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:anError |
			self assert: Room tryingToPutAnObjectOutOfBoundsErrorDescription equals: anError messageText ].
	
	
	
	
	 ! !

!testRun: #RoomTest #test03youCantPutAnObjectOutOfBounds stamp: 'AD 12/10/2020 21:32:42'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:33:35' prior: 50873539!
test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject

	|room portableObject1 portableObject2|
	
	portableObject1 := self defaultPortableObject.
	portableObject2 := self defaultPortableObject2.

	room := self createDefaultRoom .
	
	room putAnObject: portableObject1 at: 1@1.
	
	self should: [room putAnObject: portableObject2 at: 1@1]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:anError |
			self assert: Room cantPutObjectInOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:34:23'!
defaultPortableObject2

	^NoPointsPortableObject named: 'ring 'weighing: '1'
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:34:33' prior: 50875573!
test04youCantPutAPortableObjectInASlotOccupiedByAnotherPortableObject

	|room portableObject1 portableObject2|
	
	portableObject1 := self defaultPortableObject.
	portableObject2 := self defaultPortableObject2.
	room := self createDefaultRoom .
	
	room putAnObject: portableObject1 at: 1@1.
	
	self should: [room putAnObject: portableObject2 at: 1@1]
	 raise: Error - MessageNotUnderstood
	 withExceptionDo: [:anError |
			self assert: Room cantPutObjectInOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:34:55'!
defaultNonPortableObject

	^NonPortableObject named: 'Drawers' containing: {}.
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:35:17' prior: 50873374!
test05youCanPutANonPortableObjectInARoom

	|room nonPortableObject|
	
	nonPortableObject := self defaultNonPortableObject .
	
	room := self createDefaultRoom.
	
	self deny: (room slotIsOccupied: 1@1).
	room putAnObject: nonPortableObject at: 1@1.
	self assert: (room slotIsOccupied: 1@1).
	
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:36:31'!
defaultNonPortableItemContaining: aCollectionOfObjects

	^NonPortableObject named: 'Drawers' containing: {aCollectionOfObjects}.
	
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:37:16' prior: 50873414!
test06youCanPutAPortableObjectInANonPortableObject

	|room nonPortableObject portableObject|
	
	room := self createDefaultRoom.
	portableObject := self defaultPortableObject .
	nonPortableObject := self defaultNonPortableItemContaining: {portableObject }.
	
	
	room putAnObject: nonPortableObject at: 1@1.
	
	
	self assert: (nonPortableObject contains: portableObject).
	
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:37:16'!
FAILURE!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:37:27'!
FAILURE!

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:37:27'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:37:34' prior: 50875643!
test06youCanPutAPortableObjectInANonPortableObject

	|room nonPortableObject portableObject|
	
	room := self createDefaultRoom.
	portableObject := self defaultPortableObject .
	nonPortableObject := self defaultNonPortableItemContaining: portableObject .
	
	
	room putAnObject: nonPortableObject at: 1@1.
	
	
	self assert: (nonPortableObject contains: portableObject).
	
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test06youCanPutAPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:37:36'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:37:45' prior: 50875669!
test06youCanPutAPortableObjectInANonPortableObject

	|room nonPortableObject portableObject|
	
	room := self createDefaultRoom.
	portableObject := self defaultPortableObject .
	nonPortableObject := self defaultNonPortableItemContaining: portableObject .
	
	room putAnObject: nonPortableObject at: 1@1.
	
	
	self assert: (nonPortableObject contains: portableObject).
	
	
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:39:31'!
checkIfSlotIsOccupiedIn: aRoom for: anObject at: aSlot

self should: [aRoom putAnObject: anObject at: aSlot.]
        raise:  Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: Room cantPutObjectInOccupiedSlotErrorDescription equals: anError messageText].
	
	
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:40:01' prior: 50873566!
test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject

	|room nonPortableObject portableObject|
	
	room := Room withLength: 3 withHeight: 3.
	portableObject := NoPointsPortableObject named: 'key' weighing: 1.
	nonPortableObject := NonPortableObject named: 'Drawers' containing: {}.
	
	room putAnObject: portableObject at: 1@1.
	
	self checkIfSlotIsOccupiedIn: room for:  nonPortableObject at: 1@1.
	
	
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test07youCantPutANonPortableObjectInASlotOccupiedByAPortableObject stamp: 'AD 12/10/2020 21:40:03'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:40:51' prior: 50873620!
test08youCanPutANonPortableObjectInANonPortableObject

	|room nonPortableObject1 nonPortableObject2|
	
	room := self createDefaultRoom .
	nonPortableObject2 := self defaultNonPortableObject .
	nonPortableObject1 := self defaultNonPortableItemContaining: nonPortableObject2 .
	
	
	room putAnObject: nonPortableObject1 at: 1@1.
	
	
	self assert: (nonPortableObject1 contains: nonPortableObject2).
	
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test08youCanPutANonPortableObjectInANonPortableObject stamp: 'AD 12/10/2020 21:40:53'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:41:30'!
createDefaultPlayableCharacter

	^PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #North
	
	
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:41:53' prior: 50874909!
test09youCanPutAPlayableCharacterInTheRoom

	|room playableCharacter|
	
	room := self createDefaultRoom.
	playableCharacter := self createDefaultPlayableCharacter.
	room spawnPlayer: playableCharacter at: 0@0.
	
	self assert: room player currentPosition  equals: (0@0).
	
	
	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:42:57' prior: 50874923!
test10youCantPutAnObjectOnThePlayersPosition

	|room playableCharacter object|
	
	room := self createDefaultRoom .
	playableCharacter := self createDefaultRoom.
	room spawnPlayer: playableCharacter at: 0@0.
	object := self defaultNonPortableObject .
	
	self checkIfSlotIsOccupiedIn: room for: object at: 0@0.
	
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:42:59'!
ERROR!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:42:59'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:43:27' prior: 50875775!
test10youCantPutAnObjectOnThePlayersPosition

	|room playableCharacter object|
	
	room := self createDefaultRoom .
	playableCharacter := self createDefaultRoom.
	room spawnPlayer: playableCharacter at: 0@0.
	object := self defaultNonPortableObject .
	
	self checkIfSlotIsOccupiedIn: room for: object at: 0@0.
	
	self should: [room putAnObject: object at: 0@0] raise: Error withExceptionDo: [:anError |
			self assert: Room cantPutObjectInOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:43:30'!
ERROR!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:43:30'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:43:40' prior: 50875795!
test10youCantPutAnObjectOnThePlayersPosition

	|room playableCharacter object|
	
	room := self createDefaultRoom .
	playableCharacter := self createDefaultRoom.
	room spawnPlayer: playableCharacter at: 0@0.
	object := self defaultNonPortableObject .
	
	
	self should: [room putAnObject: object at: 0@0] raise: Error withExceptionDo: [:anError |
			self assert: Room cantPutObjectInOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:43:41'!
ERROR!

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:43:41'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:44:19' prior: 50875821!
test10youCantPutAnObjectOnThePlayersPosition

	|room playableCharacter object|
	
	room := self createDefaultRoom .
	playableCharacter := self createDefaultPlayableCharacter .
	room spawnPlayer: playableCharacter at: 0@0.
	object := self defaultNonPortableObject .
	
	self checkIfSlotIsOccupiedIn: room for: object at: 0@0.
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test10youCantPutAnObjectOnThePlayersPosition stamp: 'AD 12/10/2020 21:44:21'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:45:30' prior: 50874943!
test11youCantSpawnPlayerOnAOccupiedSlot

	"Tome la decision de que el room se encargue de mover al personaje, dado que es el objeto que mas informacion tiene con respecto de objetos que estan adentro,"

	|room playableCharacter object|
	
	room := self createDefaultRoom .
	object := self defaultNonPortableObject .
	room putAnObject: object at: 0@0.
	playableCharacter := self createDefaultPlayableCharacter.

	
	self should: [room spawnPlayer: playableCharacter at: 0@0.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: Room cantSpawnPlayerOnAOccupiedSlotErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !

!testRun: #RoomTest #test11youCantSpawnPlayerOnAOccupiedSlot stamp: 'AD 12/10/2020 21:45:32'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:46:06' prior: 50874969!
test12youCantMoveThePlayerOutOfBounds

	"Tome la decision de que el room se encargue de mover al personaje, dado que es el objeto que mas informacion tiene con respecto de objetos que estan adentro,"

	|room playableCharacter |
	
	room := self createDefaultRoom.
	playableCharacter := PlayableCharacter named: 'Juan' using: '' at: 0@0 heading: #West.
	room spawnPlayer: playableCharacter at: 0@0.

	
	self should: [room movePlayerForward] raise: Error withExceptionDo: [:anError |
			self assert: Room cantMovePlayerOutOfBoundsErrorDescription equals: anError messageText ].
	
	
	
	
	
	 ! !

!methodRemoval: Room #playerPosition stamp: 'AD 12/10/2020 21:46:47'!
playerPosition
	^playerPosition!
!Room methodsFor: 'player movement within room' stamp: 'AD 12/10/2020 21:48:16' prior: 50874232!
movePlayerForward
	
	
	player moveForward.! !
!Room methodsFor: 'player movement within room' stamp: 'AD 12/10/2020 21:50:13'!
movePlayerBackward
	
	
	player moveBackward.! !

!methodRemoval: PlayableCharacterTest #test11playerCantMoveToWhereThereIsAnObjectInARoom stamp: 'AD 12/10/2020 21:52:11'!
test11playerCantMoveToWhereThereIsAnObjectInARoom
	| playableCharacter room object|
	
	room:= Room withLength: 3 withHeight: 3.
	object  := NonPortableObject named: 'Drawers' containing: {}.
	room putAnObject: object at: 1@2.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #North .
	playableCharacter putInARoom: room.
	
	self 
		should: [ playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: PlayableCharacter cantMoveToWhereThereIsAnObjectErrorDescription equals: anError messageText.
			 ]
	
	!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:56:28' prior: 50875889!
test12youCantMoveThePlayerOutOfBounds

	"Tome la decision de que el room se encargue de mover al personaje, dado que es el objeto que mas informacion tiene con respecto de objetos que estan adentro"
	"Me tomo demasiado tiempo la parte del room y no llegue a hacer la parte de mover al player"
	"Pero la idea era moverlo via los mensajes room movePlayerForward , movePlayerBackward y los de Rotar, y el room valida primero el movimiento dado que tiene conocimiento de
	los objetos dentro del room, y luego los mensajes simplemente consisten en enviarle el mensaje move... o rotate... al player que tengo como variable de instancia"
	"la parte del take probablemente iba a ser similiar, ni llegue a pensarlo"

	
	
	
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'AD 12/10/2020 21:56:44'!
README

	"Tome la decision de que el room se encargue de mover al personaje, dado que es el objeto que mas informacion tiene con respecto de objetos que estan adentro"
	"Me tomo demasiado tiempo la parte del room y no llegue a hacer la parte de mover al player"
	"Pero la idea era moverlo via los mensajes room movePlayerForward , movePlayerBackward y los de Rotar, y el room valida primero el movimiento dado que tiene conocimiento de
	los objetos dentro del room, y luego los mensajes simplemente consisten en enviarle el mensaje move... o rotate... al player que tengo como variable de instancia"
	"la parte del take probablemente iba a ser similiar, ni llegue a pensarlo"

	
	
	
	
	 ! !

----SNAPSHOT----(10 December 2020 21:57:27) CuisUniversity-4384.image priorSource: 17324156!