----STARTUP---- (10 December 2020 15:44:30) as C:\Users\matias\Desktop\CuisUniversity\windows64\CuisUniversity-4384.image!


----End fileIn of C:\Users\matias\Downloads\ISW1-2020-2C-2doParcial.st----!

----End fileIn of C:\Users\matias\Desktop\solucionesIng1\Iteracion3\TusLibros.pck.st----!

----End fileIn of C:\Users\matias\Desktop\solucionesIng1\Iteracion3\TusLibros-80.st----!

!classRemoval: #Door stamp: 'mgp 12/10/2020 15:55:38'!
StageObject subclass: #Door
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Opened stamp: 'mgp 12/10/2020 15:55:39'!
DoorState subclass: #Opened
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #KeyClosed stamp: 'mgp 12/10/2020 15:55:40'!
DoorState subclass: #KeyClosed
	instanceVariableNames: 'key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #Closed stamp: 'mgp 12/10/2020 15:55:41'!
DoorState subclass: #Closed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #DoorState stamp: 'mgp 12/10/2020 15:55:42'!
Object subclass: #DoorState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #DoorTest stamp: 'mgp 12/10/2020 15:55:43'!
TestCase subclass: #DoorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #PointsPortableObject stamp: 'mgp 12/10/2020 15:55:53'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'mgp 12/10/2020 15:55:54'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PortableObject stamp: 'mgp 12/10/2020 15:55:55'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #StageObject stamp: 'mgp 12/10/2020 15:55:56'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'mgp 12/10/2020 15:55:58'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'mgp 12/10/2020 15:55:59'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Backpack stamp: 'mgp 12/10/2020 15:56:01'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'mgp 12/10/2020 15:56:03'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #BackpackTest stamp: 'mgp 12/10/2020 15:56:04'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

----End fileIn of C:\Users\matias\Downloads\ISW1-2020-2C-2doParcial.st----!

0@1!

0@1!

0@1 + 2@2!

(0@1) + (2@2)!

a := 0@1.!

b := a x.!

b := b+1!

b := a x.!

b := b+1 !

a!

----End fileIn of C:\Users\matias\Desktop\solucionesIng1\Portfolio2-Solucion.st----!

----End fileIn of C:\Users\matias\Desktop\solucionesIng1\Portfolio2-Solucion-Tests.st----!

!testRun: #TransferTest #test01TransferWithdrawsFromOriginAccountAndDepositsIntoDestinationAccount stamp: 'mgp 12/10/2020 18:05:22'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredInAccounts stamp: 'mgp 12/10/2020 18:05:22'!
PASSED!

!testRun: #TransferTest #test03CanGoFromWithdrawLegToDepositLeg stamp: 'mgp 12/10/2020 18:05:22'!
PASSED!

!testRun: #TransferTest #test04CanGoFromDepositLegToWithdrawLeg stamp: 'mgp 12/10/2020 18:05:23'!
PASSED!

!testRun: #TransferTest #test05LegsHaveSameTransfer stamp: 'mgp 12/10/2020 18:05:23'!
PASSED!

!testRun: #TransferTest #test06CanNotTransferBetweenSameAccounts stamp: 'mgp 12/10/2020 18:05:23'!
PASSED!

!testRun: #TransferTest #test07CanTransferStrictlyPositiveValuesOnly stamp: 'mgp 12/10/2020 18:05:23'!
PASSED!

!testRun: #TransferTest #test01TransferWithdrawsFromOriginAccountAndDepositsIntoDestinationAccount stamp: 'mgp 12/10/2020 18:05:28'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredInAccounts stamp: 'mgp 12/10/2020 18:05:28'!
PASSED!

!testRun: #TransferTest #test03CanGoFromWithdrawLegToDepositLeg stamp: 'mgp 12/10/2020 18:05:28'!
PASSED!

!testRun: #TransferTest #test04CanGoFromDepositLegToWithdrawLeg stamp: 'mgp 12/10/2020 18:05:28'!
PASSED!

!testRun: #TransferTest #test05LegsHaveSameTransfer stamp: 'mgp 12/10/2020 18:05:28'!
PASSED!

!testRun: #TransferTest #test06CanNotTransferBetweenSameAccounts stamp: 'mgp 12/10/2020 18:05:28'!
PASSED!

!testRun: #TransferTest #test07CanTransferStrictlyPositiveValuesOnly stamp: 'mgp 12/10/2020 18:05:28'!
PASSED!

Bag!

----QUIT----(10 December 2020 19:01:44) CuisUniversity-4384.image priorSource: 17357837!

----STARTUP---- (10 December 2020 17:08:49) as C:\Users\matias\Desktop\CuisUniversity\windows64\CuisUniversity-4384.image!


!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'mgp 12/10/2020 17:34:47'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'mgp 12/10/2020 17:34:47'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'mgp 12/10/2020 17:34:47'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'mgp 12/10/2020 17:34:47'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'mgp 12/10/2020 17:34:47'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'mgp 12/10/2020 17:34:47'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'mgp 12/10/2020 17:34:47'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'mgp 12/10/2020 17:34:47'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'mgp 12/10/2020 17:34:47'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'mgp 12/10/2020 17:34:47'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'mgp 12/10/2020 17:34:48'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'mgp 12/10/2020 17:34:48'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'mgp 12/10/2020 17:34:48'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'mgp 12/10/2020 17:34:48'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'mgp 12/10/2020 17:34:48'!
PASSED!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 17:41:42'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 17:44:55'!
Object subclass: #Room
	instanceVariableNames: 'width height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'no messages' stamp: 'mgp 12/10/2020 17:44:36'!
test01RoomDimensionsCanNotBe0orNegative
	| room |
	room := Room withWidth: 0 andHeight:-1.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 17:47:10' prior: 50881705!
test01RoomDimensionsCanNotBe0orNegative
	| room |
	
	self
		should: [ room := Room withWidth: 0 andHeight:-1. ]
		raise: Error
		withMessageText: Room nonPositiveDimensionsErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 17:47:43' prior: 50881711!
test01RoomDimensionsCanNotBe0orNegative
	self
		should: [Room withWidth: 0 andHeight:-1. ]
		raise: Error
		withMessageText: Room nonPositiveDimensionsErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 17:49:13'!
test01RoomDimensionsCanNotBeNonInteger
	self
		should: [Room withWidth: 0.2 andHeight:-1. ]
		raise: Error
		withMessageText: Room nonIntegerDimensionsErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 17:49:29'!
test02RoomDimensionsCanNotBeNonInteger
	self
		should: [Room withWidth: 0.2 andHeight:-1. ]
		raise: Error
		withMessageText: Room nonIntegerDimensionsErrorDescription.! !

!methodRemoval: RoomTest #test01RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 17:49:29'!
test01RoomDimensionsCanNotBeNonInteger
	self
		should: [Room withWidth: 0.2 andHeight:-1. ]
		raise: Error
		withMessageText: Room nonIntegerDimensionsErrorDescription.!

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 17:49:44'!
ERROR!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 17:49:44'!
ERROR!

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 17:49:50'!
ERROR!
!Room class methodsFor: 'error description' stamp: 'mgp 12/10/2020 17:50:36'!
nonPositiveDimensionsErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error description' stamp: 'mgp 12/10/2020 17:52:46' prior: 50881762!
nonPositiveDimensionsErrorDescription
	^ 'Las dimensiones deben ser positivas'.! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 17:52:53'!
FAILURE!
!Room class methodsFor: 'error description' stamp: 'mgp 12/10/2020 17:53:57'!
nonIntegerDimensionsErrorDescription
	^ 'Las dimensiones deben ser enteros'.! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 17:54:34'!
FAILURE!

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 17:54:34'!
FAILURE!
!Room class methodsFor: 'nil' stamp: 'mgp 12/10/2020 17:55:47'!
withWidth: roomWidth andHeight:roomHeight
	! !
!Room class methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 17:56:49' prior: 50881789!
withWidth: roomWidth andHeight:roomHeight
	^ self new initializeWithWidth: roomWidth  andHeight: roomHeight.
	! !
!Room methodsFor: 'nil' stamp: 'mgp 12/10/2020 17:58:04'!
 initializeWithWidth: roomWidth  andHeight: roomHeight.
	width := roomWidth.
	height := roomHeight .! !
!Room class methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 17:58:40' prior: 50881794!
withWidth: roomWidth andHeight:roomHeight
	
	^ self new initializeWithWidth: roomWidth  andHeight: roomHeight.
	! !
!Room class methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 18:03:01' prior: 50881807!
withWidth: roomWidth andHeight:roomHeight

	| areIntegers arePositive |
	areIntegers  := (roomWidth isInteger) and: (roomHeight isInteger).
	arePositive  := (roomWidth strictlyPositive) and: (roomHeight strictlyPositive).

	areIntegers  ifFalse: [ self signalNonIntegerDimensions ].
	arePositive ifFalse: [ self signalNonPositiveDimensions ].
	
	^ self new initializeWithWidth: roomWidth  andHeight: roomHeight.
	! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 18:03:14'!
FAILURE!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 18:03:14'!
FAILURE!

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 18:03:18'!
FAILURE!
!Room class methodsFor: 'nil' stamp: 'mgp 12/10/2020 18:04:58'!
signalNonPositiveDimensions
	self error: self class maxWeightExceededErrorDescription ! !
!Room class methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 18:05:12'!
signalNonIntegerDimensions
	self error: self class maxWeightExceededErrorDescription ! !
!Room class methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 18:05:43' prior: 50881845!
signalNonIntegerDimensions
	self error: self nonIntegerDimensionsErrorDescription ! !
!Room class methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 18:05:57' prior: 50881839!
signalNonPositiveDimensions
	self error: self nonPositiveDimensionsErrorDescription ! !
!Room class methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 18:06:11' prior: 50881857!
signalNonPositiveDimensions
	^self error: self nonPositiveDimensionsErrorDescription ! !
!Room class methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 18:06:15' prior: 50881851!
signalNonIntegerDimensions
	^self error: self nonIntegerDimensionsErrorDescription ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 18:08:45' prior: 50881720!
test01RoomDimensionsCanNotBe0orNegative
	self
		should: [Room withWidth: 0 andHeight:1 ]
		raise: Error
		withMessageText: Room nonPositiveDimensionsErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 18:09:07' prior: 50881736!
test02RoomDimensionsCanNotBeNonInteger
	self
		should: [Room withWidth: 1 andHeight: 0.5 ]
		raise: Error
		withMessageText: Room nonIntegerDimensionsErrorDescription.! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 18:09:13'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 18:09:13'!
PASSED!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 18:12:33'!
test03RoomStartsEmpty
! !
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 18:14:36' prior: 50881898!
test03RoomStartsEmpty
	| room |
	room := Room withWidth: 2 andHeight: 2.
	{0@0, 0@1, 1@0, 1@1}! !
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 18:17:59' prior: 50881902!
test03RoomStartsEmpty
	| room |
	room := Room withWidth: 2 andHeight: 2.
	self assert: [{0@0, 0@1, 1@0, 1@1} allSatisfy: [:postion | room isPositionEmpty: postion ]]! !

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 18:18:08'!
ERROR!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 18:18:08'!
ERROR!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 18:18:55' prior: 50881908!
test03RoomStartsEmpty
	| room |
	room := Room withWidth: 2 andHeight: 2.
	self assert: [#(0@0, 0@1, 1@0, 1@1) allSatisfy: [:postion | room isPositionEmpty: postion ]]! !

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 18:19:02'!
ERROR!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 18:19:02'!
ERROR!
!Room methodsFor: 'accessing' stamp: 'mgp 12/10/2020 18:19:27'!
isPositionEmpty: aSmallInteger 
	self shouldBeImplemented.! !
!Room methodsFor: 'accessing' stamp: 'mgp 12/10/2020 18:20:29' prior: 50881935!
isPositionEmpty: aPositionToCheck
	^true.! !

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 18:20:34'!
PASSED!

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 18:20:56'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 18:20:56'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 18:20:56'!
PASSED!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 18:25:54'!
test04CanAddObjectToEmptyPosition
	| room aRoomObject |
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	room add: aRoomObject at: 0@0.
	self assert: [room contains: aRoomObject at: 0@0].! !

----SNAPSHOT----(10 December 2020 18:26:03) CuisUniversity-4384.image priorSource: 17599132!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 18:27:10' prior: 50881956!
test04CanAddObjectToEmptyPosition
	| room aRoomObject |
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	room add: aRoomObject at: 0@0.
	self assert: [room contains: aRoomObject at: 0@0].
	self deny: [room isPositionEmpty: 0@0].! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 18:27:17'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 18:27:17'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 18:27:17'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:27:17'!
ERROR!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:27:17'!
ERROR!
!RoomTest methodsFor: 'utilties' stamp: 'mgp 12/10/2020 18:28:07'!
aPortableObject
	self shouldBeImplemented.! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 18:28:20'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 18:28:20'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 18:28:20'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:28:20'!
ERROR!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:28:20'!
ERROR!
!RoomTest methodsFor: 'utilties' stamp: 'mgp 12/10/2020 18:30:56' prior: 50881995!
aPortableObject
	^ NoPointsPortableObject named: 'paper' weighing: 2.! !

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:30:59'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 18:31:37'!
add: aNoPointsPortableObject at: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 18:36:01'!
Object subclass: #Room
	instanceVariableNames: 'width height stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 18:35:51' prior: 50882023!
add: aStageOobject at: position
	self assertPositionIsEmpty: position.
	stageObjects add: aStageOobject at:position.! !

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:36:07'!
ERROR!
!Room methodsFor: 'asserting' stamp: 'mgp 12/10/2020 18:37:12'!
assertPositionIsEmpty: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'asserting' stamp: 'mgp 12/10/2020 18:40:29' prior: 50882045!
assertPositionIsEmpty: position
	[self isPositionEmpty: position] ifFalse: [self error: (self class occupiedPositionErrorDescription)].! !
!Room class methodsFor: 'error description' stamp: 'mgp 12/10/2020 18:41:42'!
occupiedPositionErrorDescription! !
!Room class methodsFor: 'error description' stamp: 'mgp 12/10/2020 18:43:14' prior: 50882057!
occupiedPositionErrorDescription
	^ 'No puede agregarse colocarse objeto a posicion ocupada'.! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 18:43:43'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 18:43:44'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 18:43:44'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:43:44'!
ERROR!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:43:44'!
ERROR!

true!

True!
!Room methodsFor: 'accessing' stamp: 'mgp 12/10/2020 18:45:01' prior: 50881940!
isPositionEmpty: aPositionToCheck
	^True.! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 18:45:34'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 18:45:34'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 18:45:34'!
ERROR!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:45:34'!
ERROR!

0>1!

1>0!
!Room methodsFor: 'accessing' stamp: 'mgp 12/10/2020 18:46:25' prior: 50882084!
isPositionEmpty: aPositionToCheck
	^true.! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 18:46:33'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 18:46:33'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 18:46:33'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:46:33'!
ERROR!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:46:33'!
ERROR!
!Room methodsFor: 'asserting' stamp: 'mgp 12/10/2020 18:47:01' prior: 50882050!
assertPositionIsEmpty: position
	(self isPositionEmpty: position) ifFalse: [self error: (self class occupiedPositionErrorDescription)].! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 18:47:15'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 18:47:15'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 18:47:15'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:47:15'!
ERROR!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:47:15'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'mgp 12/10/2020 18:47:53' prior: 50881800!
initializeWithWidth: roomWidth  andHeight: roomHeight.
	width := roomWidth.
	height := roomHeight .
	stageObjects := Dictionary new.! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 18:48:02'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 18:48:02'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 18:48:02'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:48:03'!
ERROR!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:48:03'!
ERROR!

a := Dictionary new.!
!Room methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 18:49:49' prior: 50882036!
add: aStageOobject at: position
	self assertPositionIsEmpty: position.
	stageObjects at:position put: aStageOobject.! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 18:49:57'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 18:49:57'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 18:49:57'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:49:57'!
ERROR!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:49:57'!
ERROR!
!Room methodsFor: 'accessing' stamp: 'mgp 12/10/2020 18:50:55'!
contains: aNoPointsPortableObject at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'accessing' stamp: 'mgp 12/10/2020 18:51:53' prior: 50882188!
contains: aStageObject at: position 
	stageObjects at:position = aStageObject .! !

a at: 1!
!Room methodsFor: 'accessing' stamp: 'mgp 12/10/2020 18:52:55' prior: 50882193!
contains: aStageObject at: position 
	^stageObjects at:position = aStageObject .! !

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:52:59'!
ERROR!

	| room aRoomObject |!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 18:55:20' prior: 50881969!
test04CanAddObjectToEmptyPosition
	| room aRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	room add: aRoomObject at: 0@0.
	self assert: [room contains: aRoomObject at: 0@0].
	self deny: [room isPositionEmpty: 0@0].! !

	| room aRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	room add: aRoomObject at: 0@0.!

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 18:56:09'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 18:56:09'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 18:56:09'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:56:09'!
ERROR!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:56:09'!
ERROR!

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 18:56:58'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 18:56:58'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 18:56:58'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:56:58'!
ERROR!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:56:59'!
ERROR!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 18:57:20'!
ERROR!

a := Dictionary  new.!

a add: (0@0)->#pepe.!

a keys !
!Room methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 19:01:47' prior: 50882167!
add: aStageOobject at: position
	self assertPositionIsEmpty: position.
	stageObjects add: position->aStageOobject.! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:01:54'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:01:54'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:01:54'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:01:54'!
ERROR!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:01:54'!
ERROR!

a add: 0@0->#pepe.!

a keys!

a at: 0@0!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:03:25' prior: 50882208!
test04CanAddObjectToEmptyPosition
	| room aRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	room add: aRoomObject at: 0@0.
	self assert: [room contains: aRoomObject at: 0@0].
	self deny: [room isPositionEmpty: 0@0].! !

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:03:29'!
ERROR!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:03:29'!
ERROR!

	room add: aRoomObject at: 0@0.!

	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	room add: aRoomObject at: 0@0.!

	room := Room withWidth: 2 andHeight: 2.!

	aRoomObject  := RoomTest aPortableObject.!

	aRoomObject  :=NoPointsPortableObject named: 'paper' weighing: 2.!

	room add: aRoomObject at: 0@0.!

room!

	room contains: aRoomObject at: 0@0!
!Room methodsFor: 'accessing' stamp: 'mgp 12/10/2020 19:07:29' prior: 50882199!
contains: aStageObject at: position 
	^(stageObjects at:position)= aStageObject .! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:07:36'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:07:36'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:07:36'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:07:36'!
ERROR!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:07:36'!
ERROR!

	room contains: aRoomObject at: 0@0!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:08:15' prior: 50882282!
test04CanAddObjectToEmptyPosition
	| room aRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	room add: aRoomObject at: 0@0.
	self assert: (room contains: aRoomObject at: 0@0).
	self deny: [room isPositionEmpty: 0@0].! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:08:45'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:08:46'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:08:46'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:08:47'!
ERROR!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:08:47'!
ERROR!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:09:06' prior: 50882333!
test04CanAddObjectToEmptyPosition
	| room aRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	room add: aRoomObject at: 0@0.
	self assert: (room contains: aRoomObject at: 0@0).
	self deny: (room isPositionEmpty: 0@0).! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:09:11'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:09:11'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:09:11'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:09:11'!
FAILURE!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:09:11'!
FAILURE!
!Room methodsFor: 'accessing' stamp: 'mgp 12/10/2020 19:10:25' prior: 50882101!
isPositionEmpty: aPositionToCheck
	^stageObjects includesKey: aPositionToCheck not.! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:10:30'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:10:30'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:10:31'!
ERROR!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:10:31'!
ERROR!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:11:09' prior: 50881922!
test03RoomStartsEmpty
	| room |
	room := Room withWidth: 2 andHeight: 2.
	self assert: (#(0@0, 0@1, 1@0, 1@1) allSatisfy: [:postion | room isPositionEmpty: postion ])! !

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:11:19'!
ERROR!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:11:19'!
ERROR!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:11:48' prior: 50882405!
test03RoomStartsEmpty
	| room |
	room := Room withWidth: 2 andHeight: 2.
	self assert: [#(0@0, 0@1, 1@0, 1@1) allSatisfy: [:postion | room isPositionEmpty: postion ]]! !
!Room methodsFor: 'accessing' stamp: 'mgp 12/10/2020 19:12:05' prior: 50882387!
isPositionEmpty: aPositionToCheck
	^(stageObjects includesKey: aPositionToCheck) not.! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:12:18'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:12:18'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:12:19'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:12:19'!
PASSED!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:12:59'!
test04CanNotAddObjectToOcuppiedPosition
	| room aRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	room add: aRoomObject at: 0@0.
	self assert: (room contains: aRoomObject at: 0@0).
	self deny: (room isPositionEmpty: 0@0).! !
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:13:54' prior: 50882445!
test04CanNotAddObjectToOcuppiedPosition
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	room add: aRoomObject at: 0@0.
	anotherRoomObject  := self anotherPortableObject.
	self assert: (room contains: aRoomObject at: 0@0).
	self deny: (room isPositionEmpty: 0@0).! !
!RoomTest methodsFor: 'utilties' stamp: 'mgp 12/10/2020 19:14:23'!
anotherPortableObject
	^ NoPointsPortableObject named: 'rock' weighing: 5.! !
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:15:53' prior: 50882457!
test04CanNotAddObjectToOcuppiedPosition
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	room add: aRoomObject at: 0@0.
	anotherRoomObject  := self anotherPortableObject.
	
	self
		should: [room add: anotherRoomObject at: 0@0 ]
		raise: Error
		withMessageText: Room e.	
	
	self assert: (room contains: aRoomObject at: 0@0).
	self deny: (room isPositionEmpty: 0@0).! !
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:16:45' prior: 50882475!
test04CanNotAddObjectToOcuppiedPosition
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	room add: aRoomObject at: 0@0.
	anotherRoomObject  := self anotherPortableObject.
	
	self
		should: [room add: anotherRoomObject at: 0@0 ]
		raise: Error
		withMessageText: Room occupiedPositionErrorDescription.	
	
	self assert: (room contains: aRoomObject at: 0@0).
	self deny: (room isPositionEmpty: 0@0).! !
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:17:08'!
test05CanNotAddObjectToOcuppiedPosition
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	room add: aRoomObject at: 0@0.
	anotherRoomObject  := self anotherPortableObject.
	
	self
		should: [room add: anotherRoomObject at: 0@0 ]
		raise: Error
		withMessageText: Room occupiedPositionErrorDescription.	
	
	self assert: (room contains: aRoomObject at: 0@0).
	self deny: (room isPositionEmpty: 0@0).! !

!methodRemoval: RoomTest #test04CanNotAddObjectToOcuppiedPosition stamp: 'mgp 12/10/2020 19:17:08'!
test04CanNotAddObjectToOcuppiedPosition
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	room add: aRoomObject at: 0@0.
	anotherRoomObject  := self anotherPortableObject.
	
	self
		should: [room add: anotherRoomObject at: 0@0 ]
		raise: Error
		withMessageText: Room occupiedPositionErrorDescription.	
	
	self assert: (room contains: aRoomObject at: 0@0).
	self deny: (room isPositionEmpty: 0@0).!

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:17:12'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:17:12'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:17:12'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:17:12'!
PASSED!

!testRun: #RoomTest #test05CanNotAddObjectToOcuppiedPosition stamp: 'mgp 12/10/2020 19:17:12'!
PASSED!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:19:01'!
test05CanNotAddObjectToInvalidPosition
	| room aRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	self
		should: [room add: aRoomObject at: -1@0 ]
		raise: Error
		withMessageText: Room invalidPositionErrorDescription.	
	
	self assert: (room contains: aRoomObject at: 0@0).
	self deny: (room isPositionEmpty: 0@0).! !
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:19:15' prior: 50882560!
test05CanNotAddObjectToInvalidPosition
	| room aRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	self
		should: [room add: aRoomObject at: -1@0 ]
		raise: Error
		withMessageText: Room invalidPositionErrorDescription.	
	! !
!Room class methodsFor: 'error description' stamp: 'mgp 12/10/2020 19:20:23'!
invalidPositionErrorDescription
	^ 'No puede agregarse objeto a posiciones invalidas'.! !
!Room class methodsFor: 'error description' stamp: 'mgp 12/10/2020 19:20:34' prior: 50882062!
occupiedPositionErrorDescription
	^ 'No puede agregarse objeto a posicion ocupada'.! !
!Room methodsFor: 'asserting' stamp: 'mgp 12/10/2020 19:21:25'!
assertValidPositionToAdd: position
	(self isPositionEmpty: position) ifFalse: [self error: (self class invalidPositionErrorDescription )].! !

----SNAPSHOT----(10 December 2020 19:21:34) CuisUniversity-4384.image priorSource: 17610078!
!Room methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 19:22:14' prior: 50882259!
add: aStageOobject at: position
	self assertValidPositionToAdd: position.
	self assertPositionIsEmpty: position.
	stageObjects add: position->aStageOobject.! !
!Room methodsFor: 'asserting' stamp: 'mgp 12/10/2020 19:22:36'!
assertValidPosition: position
	(self isPositionEmpty: position) ifFalse: [self error: (self class invalidPositionErrorDescription )].! !
!Room methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 19:22:37' prior: 50882607!
add: aStageOobject at: position
	self assertValidPosition: position.
	self assertPositionIsEmpty: position.
	stageObjects add: position->aStageOobject.! !

!methodRemoval: Room #assertValidPositionToAdd: stamp: 'mgp 12/10/2020 19:22:37'!
assertValidPositionToAdd: position
	(self isPositionEmpty: position) ifFalse: [self error: (self class invalidPositionErrorDescription )].!
!Room methodsFor: 'asserting' stamp: 'mgp 12/10/2020 19:24:39' prior: 50882614!
assertValidPosition: position
	| validX validY |
	validX  := position x < width.
	validY  := position y < height.
	(validX and: validY) ifFalse: [self error: (self class invalidPositionErrorDescription )].! !
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:25:01'!
test06CanNotAddObjectToInvalidPosition
	| room aRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	self
		should: [room add: aRoomObject at: -1@0 ]
		raise: Error
		withMessageText: Room invalidPositionErrorDescription.	
	! !

!methodRemoval: RoomTest #test05CanNotAddObjectToInvalidPosition stamp: 'mgp 12/10/2020 19:25:01'!
test05CanNotAddObjectToInvalidPosition
	| room aRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	self
		should: [room add: aRoomObject at: -1@0 ]
		raise: Error
		withMessageText: Room invalidPositionErrorDescription.	
	!

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:25:07'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:25:07'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:25:07'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:25:07'!
PASSED!

!testRun: #RoomTest #test05CanNotAddObjectToOcuppiedPosition stamp: 'mgp 12/10/2020 19:25:07'!
PASSED!

!testRun: #RoomTest #test06CanNotAddObjectToInvalidPosition stamp: 'mgp 12/10/2020 19:25:07'!
FAILURE!

!testRun: #RoomTest #test06CanNotAddObjectToInvalidPosition stamp: 'mgp 12/10/2020 19:25:07'!
FAILURE!

!testRun: #RoomTest #test05CanNotAddObjectToOcuppiedPosition stamp: 'mgp 12/10/2020 19:25:33'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:25:42'!
PASSED!

!testRun: #RoomTest #test06CanNotAddObjectToInvalidPosition stamp: 'mgp 12/10/2020 19:25:50'!
FAILURE!

!testRun: #RoomTest #test06CanNotAddObjectToInvalidPosition stamp: 'mgp 12/10/2020 19:25:50'!
FAILURE!

a Room !

	room add: aRoomObject at: 57@0.!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:27:06' prior: 50882646!
test06CanNotAddObjectToInvalidPosition
	| room aRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	self
		should: [room add: aRoomObject at: 10@0 ]
		raise: Error
		withMessageText: Room invalidPositionErrorDescription.	
	! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:27:11'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:27:11'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:27:11'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:27:11'!
PASSED!

!testRun: #RoomTest #test05CanNotAddObjectToOcuppiedPosition stamp: 'mgp 12/10/2020 19:27:11'!
PASSED!

!testRun: #RoomTest #test06CanNotAddObjectToInvalidPosition stamp: 'mgp 12/10/2020 19:27:11'!
PASSED!
!Room methodsFor: 'asserting' stamp: 'mgp 12/10/2020 19:31:27' prior: 50882637!
assertValidPosition: position
	| validX validY |
	validX  := position x < width and: (position x >= 0).
	validY  := position y < height and: (position y >= 0).
	(validX and: validY) ifFalse: [self error: (self class invalidPositionErrorDescription )].! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:31:50'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:31:50'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:31:50'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:31:50'!
PASSED!

!testRun: #RoomTest #test05CanNotAddObjectToOcuppiedPosition stamp: 'mgp 12/10/2020 19:31:50'!
PASSED!

!testRun: #RoomTest #test06CanNotAddObjectToInvalidPosition stamp: 'mgp 12/10/2020 19:31:50'!
PASSED!

----SNAPSHOT----(10 December 2020 19:33:20) CuisUniversity-4384.image priorSource: 17630477!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:34:42'!
test07CanAddMultipleObjects
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	anotherRoomObject  := self anotherPortableObject.
	room add: aRoomObject at: 0@0.
	room add:anotherRoomObject at: 1@0.
	
	self assert: (room contains: aRoomObject at: 0@0).
	self assert: (room contains: anotherRoomObject at: 1@0).
	
	self deny: (room isPositionEmpty: 0@0).! !
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:35:55' prior: 50882767!
test07CanAddMultipleObjects
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	anotherRoomObject  := self anotherPortableObject.
	room add: aRoomObject at: 0@0.
	room add:anotherRoomObject at: 1@0.
	
	self assert: (room contains: aRoomObject at: 0@0).
	self assert: (room contains: anotherRoomObject at: 1@0).
	self assert: [#(0@1, 1@1) allSatisfy: [:postion | room isPositionEmpty: postion ]].
	
	self deny: (room isPositionEmpty: 0@0).! !
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:36:43' prior: 50882783!
test07CanAddMultipleObjects
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	anotherRoomObject  := self anotherPortableObject.
	room add: aRoomObject at: 0@0.
	room add:anotherRoomObject at: 1@0.
	
	self assert: (room contains: aRoomObject at: 0@0).
	self assert: (room contains: anotherRoomObject at: 1@0).
	self assert: [#(0@1, 1@1) allSatisfy: [:postion | room isPositionEmpty: postion ]].
	self assert: [#(0@0, 1@0) allSatisfy: [:postion | (room isPositionEmpty: postion)  not]].

	self deny: (room isPositionEmpty: 0@0).! !
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:37:02' prior: 50882802!
test07CanAddMultipleObjects
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	anotherRoomObject  := self anotherPortableObject.
	room add: aRoomObject at: 0@0.
	room add:anotherRoomObject at: 1@0.
	
	self assert: (room contains: aRoomObject at: 0@0).
	self assert: (room contains: anotherRoomObject at: 1@0).
	self assert: [#(0@1, 1@1) allSatisfy: [:postion | room isPositionEmpty: postion ]].
	self assert: [#(0@0, 1@0) allSatisfy: [:postion | (room isPositionEmpty: postion)  not]].
! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:37:09'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:37:09'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:37:09'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:37:09'!
PASSED!

!testRun: #RoomTest #test05CanNotAddObjectToOcuppiedPosition stamp: 'mgp 12/10/2020 19:37:09'!
PASSED!

!testRun: #RoomTest #test06CanNotAddObjectToInvalidPosition stamp: 'mgp 12/10/2020 19:37:09'!
PASSED!

!testRun: #RoomTest #test07CanAddMultipleObjects stamp: 'mgp 12/10/2020 19:37:09'!
FAILURE!

!testRun: #RoomTest #test07CanAddMultipleObjects stamp: 'mgp 12/10/2020 19:37:09'!
FAILURE!

	room isPositionEmpty: 0@0!

	true not!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:38:24' prior: 50882824!
test07CanAddMultipleObjects
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	anotherRoomObject  := self anotherPortableObject.
	room add: aRoomObject at: 0@0.
	room add:anotherRoomObject at: 1@0.
	
	self assert: (room contains: aRoomObject at: 0@0).
	self assert: (room contains: anotherRoomObject at: 1@0).
	self assert: [#(0@1, 1@1) allSatisfy: [:postion | room isPositionEmpty: postion ]].
	self assert: [#(0@0, 1@0) allSatisfy: [:postion | room isPositionEmpty: postion  not]].
! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:38:30'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:38:30'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:38:30'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:38:30'!
PASSED!

!testRun: #RoomTest #test05CanNotAddObjectToOcuppiedPosition stamp: 'mgp 12/10/2020 19:38:30'!
PASSED!

!testRun: #RoomTest #test06CanNotAddObjectToInvalidPosition stamp: 'mgp 12/10/2020 19:38:30'!
PASSED!

!testRun: #RoomTest #test07CanAddMultipleObjects stamp: 'mgp 12/10/2020 19:38:30'!
ERROR!

!testRun: #RoomTest #test07CanAddMultipleObjects stamp: 'mgp 12/10/2020 19:38:30'!
ERROR!
!Room methodsFor: 'accessing' stamp: 'mgp 12/10/2020 19:39:35'!
isPositionOccupied: aPositionToCheck
	^(stageObjects includesKey: aPositionToCheck).! !
!Room methodsFor: 'accessing' stamp: 'mgp 12/10/2020 19:39:56' prior: 50882427!
isPositionEmpty: aPositionToCheck
	^(self isPositionOccupied: aPositionToCheck ) not.! !
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:40:18' prior: 50882870!
test07CanAddMultipleObjects
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	anotherRoomObject  := self anotherPortableObject.
	room add: aRoomObject at: 0@0.
	room add:anotherRoomObject at: 1@0.
	
	self assert: (room contains: aRoomObject at: 0@0).
	self assert: (room contains: anotherRoomObject at: 1@0).
	self assert: [#(0@1, 1@1) allSatisfy: [:postion | room isPositionEmpty: postion ]].
	self assert: [#(0@0, 1@0) allSatisfy: [:postion | room isPositionOccupied: postion ]].
! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:40:22'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:40:23'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:40:23'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:40:23'!
PASSED!

!testRun: #RoomTest #test05CanNotAddObjectToOcuppiedPosition stamp: 'mgp 12/10/2020 19:40:23'!
PASSED!

!testRun: #RoomTest #test06CanNotAddObjectToInvalidPosition stamp: 'mgp 12/10/2020 19:40:23'!
PASSED!

!testRun: #RoomTest #test07CanAddMultipleObjects stamp: 'mgp 12/10/2020 19:40:23'!
FAILURE!

!testRun: #RoomTest #test07CanAddMultipleObjects stamp: 'mgp 12/10/2020 19:40:23'!
FAILURE!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:41:00'!
PASSED!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:41:10' prior: 50882926!
test07CanAddMultipleObjects
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	anotherRoomObject  := self anotherPortableObject.
	room add: aRoomObject at: 0@0.
	room add:anotherRoomObject at: 1@0.
	
	self assert: (room contains: aRoomObject at: 0@0).
	self assert: (room contains: anotherRoomObject at: 1@0).
	self assert: [#(0@1, 1@1) allSatisfy: [:postion | room isPositionEmpty: postion ]].
! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:41:13'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:41:13'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:41:13'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:41:13'!
PASSED!

!testRun: #RoomTest #test05CanNotAddObjectToOcuppiedPosition stamp: 'mgp 12/10/2020 19:41:13'!
PASSED!

!testRun: #RoomTest #test06CanNotAddObjectToInvalidPosition stamp: 'mgp 12/10/2020 19:41:13'!
PASSED!

!testRun: #RoomTest #test07CanAddMultipleObjects stamp: 'mgp 12/10/2020 19:41:13'!
PASSED!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:41:49' prior: 50882974!
test07CanAddMultipleObjects
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	anotherRoomObject  := self anotherPortableObject.
	room add: aRoomObject at: 0@0.
	room add:anotherRoomObject at: 1@0.
	
	self assert: (room contains: aRoomObject at: 0@0).
	self assert: (room contains: anotherRoomObject at: 1@0).
	self assert: [#(0@1, 1@1) allSatisfy: [:postion | room isPositionEmpty: postion ]].

! !
!Room methodsFor: 'accessing' stamp: 'mgp 12/10/2020 19:42:44' prior: 50882914!
isPositionOccupied: aPositionToCheck
	^stageObjects includesKey: aPositionToCheck.! !

	room isPositionOccupied: 0@0!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:43:44' prior: 50883013!
test07CanAddMultipleObjects
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	anotherRoomObject  := self anotherPortableObject.
	room add: aRoomObject at: 0@0.
	room add:anotherRoomObject at: 1@0.
	
	self assert: (room contains: aRoomObject at: 0@0).
	self assert: (room contains: anotherRoomObject at: 1@0).
	self assert: [#(0@1, 1@1) allSatisfy: [:postion | room isPositionEmpty: postion ]].
	self assert: [#(0@0, 1@0) allSatisfy: [:postion | room isPositionOccupied: postion ]].


! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:43:50'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:43:50'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:43:50'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:43:50'!
PASSED!

!testRun: #RoomTest #test05CanNotAddObjectToOcuppiedPosition stamp: 'mgp 12/10/2020 19:43:50'!
PASSED!

!testRun: #RoomTest #test06CanNotAddObjectToInvalidPosition stamp: 'mgp 12/10/2020 19:43:50'!
PASSED!

!testRun: #RoomTest #test07CanAddMultipleObjects stamp: 'mgp 12/10/2020 19:43:50'!
FAILURE!

!testRun: #RoomTest #test07CanAddMultipleObjects stamp: 'mgp 12/10/2020 19:43:50'!
FAILURE!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:45:09' prior: 50883038!
test07CanAddMultipleObjects
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	anotherRoomObject  := self anotherPortableObject.
	room add: aRoomObject at: 0@0.
	room add:anotherRoomObject at: 1@0.
	
	self assert: (room contains: aRoomObject at: 0@0).
	self assert: (room contains: anotherRoomObject at: 1@0).
	self assert: [#(0@1, 1@1) allSatisfy: [:postion | room isPositionEmpty: postion ]].

! !

!classDefinition: #NullStageObject category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 19:47:19'!
Object subclass: #NullStageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'accessing' stamp: 'mgp 12/10/2020 19:47:09' prior: 50882311!
contains: aStageObject at: position 
	^(stageObjects at:position ifAbsent: [NullStageObject new.]) = aStageObject .! !

StageObject subclass: #NullStageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NullStageObject category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 19:47:38'!
StageObject subclass: #NullStageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:47:49'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:47:49'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:47:49'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:47:49'!
PASSED!

!testRun: #RoomTest #test05CanNotAddObjectToOcuppiedPosition stamp: 'mgp 12/10/2020 19:47:49'!
PASSED!

!testRun: #RoomTest #test06CanNotAddObjectToInvalidPosition stamp: 'mgp 12/10/2020 19:47:50'!
PASSED!

!testRun: #RoomTest #test07CanAddMultipleObjects stamp: 'mgp 12/10/2020 19:47:50'!
PASSED!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:48:47' prior: 50883083!
test07CanAddMultipleObjects
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	anotherRoomObject  := self anotherPortableObject.
	room add: aRoomObject at: 0@0.
	room add:anotherRoomObject at: 1@0.
	
	self assert: (room contains: aRoomObject at: 0@0).
	self assert: (room contains: anotherRoomObject at: 1@0).
	self assert: [#(0@1, 1@1) allSatisfy: [:postion | room isPositionEmpty: postion ]].
	self assert: (room isPositionOccupied: 1@0).

! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:48:53'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:48:53'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:48:53'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:48:54'!
PASSED!

!testRun: #RoomTest #test05CanNotAddObjectToOcuppiedPosition stamp: 'mgp 12/10/2020 19:48:54'!
PASSED!

!testRun: #RoomTest #test06CanNotAddObjectToInvalidPosition stamp: 'mgp 12/10/2020 19:48:54'!
PASSED!

!testRun: #RoomTest #test07CanAddMultipleObjects stamp: 'mgp 12/10/2020 19:48:54'!
PASSED!
!RoomTest methodsFor: 'testing' stamp: 'mgp 12/10/2020 19:49:20' prior: 50883150!
test07CanAddMultipleObjects
	| room aRoomObject anotherRoomObject | 
	room := Room withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	anotherRoomObject  := self anotherPortableObject.
	room add: aRoomObject at: 0@0.
	room add:anotherRoomObject at: 1@0.
	
	self assert: (room contains: aRoomObject at: 0@0).
	self assert: (room contains: anotherRoomObject at: 1@0).
	self assert: [#(0@1, 1@1) allSatisfy: [:postion | room isPositionEmpty: postion ]].
	self assert: (room isPositionOccupied: 1@0).
	self assert: (room isPositionOccupied: 0@0).


! !

!testRun: #RoomTest #test01RoomDimensionsCanNotBe0orNegative stamp: 'mgp 12/10/2020 19:49:26'!
PASSED!

!testRun: #RoomTest #test02RoomDimensionsCanNotBeNonInteger stamp: 'mgp 12/10/2020 19:49:27'!
PASSED!

!testRun: #RoomTest #test03RoomStartsEmpty stamp: 'mgp 12/10/2020 19:49:27'!
PASSED!

!testRun: #RoomTest #test04CanAddObjectToEmptyPosition stamp: 'mgp 12/10/2020 19:49:27'!
PASSED!

!testRun: #RoomTest #test05CanNotAddObjectToOcuppiedPosition stamp: 'mgp 12/10/2020 19:49:27'!
PASSED!

!testRun: #RoomTest #test06CanNotAddObjectToInvalidPosition stamp: 'mgp 12/10/2020 19:49:27'!
PASSED!

!testRun: #RoomTest #test07CanAddMultipleObjects stamp: 'mgp 12/10/2020 19:49:27'!
PASSED!

----SNAPSHOT----(10 December 2020 19:49:33) CuisUniversity-4384.image priorSource: 17635636!

StageObject subclass: #NoPortableObject
	instanceVariableNames: 'container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NoPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 19:51:52'!
StageObject subclass: #NoPortableObject
	instanceVariableNames: 'container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

TestCase subclass: #NoPortableObjectTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NoPortableObjectTest category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 19:52:37'!
TestCase subclass: #NoPortableObjectTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NoPortableObjectTest methodsFor: 'no messages' stamp: 'mgp 12/10/2020 19:55:02'!
test01NoPortableObjectEmpyHasNoObjects
	| noPortableObject |
	noPortableObject := noPortableObject with: OrderedCollection new.
	self assert: noPortableObject isEmpty.! !
!NoPortableObject methodsFor: 'nil' stamp: 'mgp 12/10/2020 19:57:01'!
isEmpty
	^ container isEmpty.! !

!testRun: #NoPortableObjectTest #test01NoPortableObjectEmpyHasNoObjects stamp: 'mgp 12/10/2020 19:57:12'!
ERROR!

!testRun: #NoPortableObjectTest #test01NoPortableObjectEmpyHasNoObjects stamp: 'mgp 12/10/2020 19:57:12'!
ERROR!
!NoPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 19:57:41' prior: 50883263!
test01NoPortableObjectEmpyHasNoObjects
	| noPortableObject |
	noPortableObject := NoPortableObject with: OrderedCollection new.
	self assert: noPortableObject isEmpty.! !

!testRun: #NoPortableObjectTest #test01NoPortableObjectEmpyHasNoObjects stamp: 'mgp 12/10/2020 19:57:47'!
ERROR!

!testRun: #NoPortableObjectTest #test01NoPortableObjectEmpyHasNoObjects stamp: 'mgp 12/10/2020 19:57:47'!
ERROR!
!NoPortableObject class methodsFor: 'instance creation' stamp: 'mgp 12/10/2020 19:57:59'!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!NoPortableObject class methodsFor: 'instance creation' stamp: 'mgp 12/10/2020 19:58:33' prior: 50883299!
with: containedObjects 
	^self new initializeWith: containedObjects ! !

!testRun: #NoPortableObjectTest #test01NoPortableObjectEmpyHasNoObjects stamp: 'mgp 12/10/2020 19:58:37'!
ERROR!

!classDefinition: #NoPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 19:58:57'!
StageObject subclass: #NoPortableObject
	instanceVariableNames: 'container containedObjects_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NoPortableObject methodsFor: 'initialization' stamp: 'mgp 12/10/2020 19:58:57'!
initializeWith: containedObjects 
	self shouldBeImplemented.
	containedObjects_CHANGE_ME := containedObjects.! !
!NoPortableObject methodsFor: 'initialization' stamp: 'mgp 12/10/2020 19:59:14' prior: 50883326!
initializeWith: containedObjects 
	container := containedObjects.! !

!testRun: #NoPortableObjectTest #test01NoPortableObjectEmpyHasNoObjects stamp: 'mgp 12/10/2020 19:59:18'!
PASSED!

!testRun: #NoPortableObjectTest #test01NoPortableObjectEmpyHasNoObjects stamp: 'mgp 12/10/2020 19:59:24'!
PASSED!

----SNAPSHOT----(10 December 2020 19:59:48) CuisUniversity-4384.image priorSource: 17650629!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 20:02:57'!
Object subclass: #Room
	instanceVariableNames: 'width height roomObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:02:57' prior: 50882622!
add: aStageOobject at: position
	self assertValidPosition: position.
	self assertPositionIsEmpty: position.
	roomObjects add: position->aStageOobject.! !
!Room methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:02:57' prior: 50883031!
isPositionOccupied: aPositionToCheck
	^roomObjects includesKey: aPositionToCheck.! !
!Room methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:02:57' prior: 50882144!
initializeWithWidth: roomWidth  andHeight: roomHeight.
	width := roomWidth.
	height := roomHeight .
	roomObjects := Dictionary new.! !
!Room methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:02:57' prior: 50883109!
contains: aStageObject at: position 
	^(roomObjects at:position ifAbsent: [NullStageObject new.]) = aStageObject .! !

TestCase subclass: #PlayableCharacterTestExtension
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacterTestExtension category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 20:08:49'!
TestCase subclass: #PlayableCharacterTestExtension
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterTestExtension methodsFor: 'nil' stamp: 'mgp 12/10/2020 20:11:45'!
test01CanNotTakeFromEmptyPosition
	"asumo que en caso de realizar take deberia devolverse un error y no simplemente no hacer nada"

	| character |
	
	character := PlayableCharacter 
! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:14:03'!
aCharacter
	| character |
	
	PlayableCharacter named: 2 using: (Backpack containingUpTo: 100 limitingPointsTo:100) aPosition heading: 2 
! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:15:08' prior: 50883408!
aCharacter
	
	
	 PlayableCharacter named: 'Luigi' using: (PlayableCharacterTest defaultBackpack) at: 1@2 heading: #North .
! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:16:07'!
aCharacterAt0riginAndNorth
	 ^PlayableCharacter named: 'Luigi' using: (PlayableCharacterTest defaultBackpack) at: 0@0 heading: #North .
! !

!methodRemoval: PlayableCharacterTestExtension #aCharacter stamp: 'mgp 12/10/2020 20:16:15'!
aCharacter
	
	
	 PlayableCharacter named: 'Luigi' using: (PlayableCharacterTest defaultBackpack) at: 1@2 heading: #North .
!
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:17:59' prior: 50883399!
test01CanNotTakeFromEmptyPosition
	"asumo que en caso de realizar take deberia devolverse un error y no simplemente no hacer nada"

	| character  room|
	
	room := Room withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	room addCharacter: character.
! !
!Room methodsFor: 'asserting' stamp: 'mgp 12/10/2020 20:21:05'!
addCharacter: character
	character addToRoom: self.! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'mgp 12/10/2020 20:21:57'!
addToRoom: room
	room add: self at: position. ! !
!Room methodsFor: 'adding' stamp: 'mgp 12/10/2020 20:23:01'!
addCharacer: character
	character addToRoom: self.! !
!Room methodsFor: 'removing' stamp: 'mgp 12/10/2020 20:24:36'!
removeObjectAt: position
	roomObjects removeKey: position.! !

Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 20:26:45'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'mgp 12/10/2020 20:27:04' prior: 50883456!
addToRoom: aRoom
	aRoom add: self at: position. ! !

Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 20:27:17'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'mgp 12/10/2020 20:28:08' prior: 50883490!
addToRoom: aRoom
	aRoom add: self at: position. 
	room := aRoom.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:30:08'!
updateRoomPositionAfter: aBlock
	room removeObjectAt: position.
	[aBlock] value.
! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:30:43' prior: 50883515!
updateRoomPositionAfter: aBlock
	room removeObjectAt: position.
	[aBlock] value.
	self addToRoom: room.
! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:31:37' prior: 50879369!
moveBackward
	
	self updateRoomPositionAfter: [position := position - heading forwardPoint] ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:32:34' prior: 50879374!
moveForward
	
	self updateRoomPositionAfter:[position := position + heading forwardPoint]! !

Object subclass: #NullRoom
	instanceVariableNames: 'width height roomObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NullRoom category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 20:33:11'!
Object subclass: #NullRoom
	instanceVariableNames: 'width height roomObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NullRoom stamp: 'mgp 12/10/2020 20:33:25'!
Object subclass: #NullRoom
	instanceVariableNames: 'width height roomObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'mgp 12/10/2020 20:35:45' prior: 50879350!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room := nil.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:37:28' prior: 50883521!
updateRoomPositionAfter: aBlock
	room ifNotNil: [room removeObjectAt: position].
	[aBlock] value.
	self addToRoom: room.
! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:38:56' prior: 50883570!
updateRoomPositionAfter: aBlock
	room ifNotNil: [room removeObjectAt: position].
	[aBlock] value.
	room ifNotNil: [self addToRoom: room.]
! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mgp 12/10/2020 20:39:02'!
FAILURE!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mgp 12/10/2020 20:39:02'!
FAILURE!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mgp 12/10/2020 20:39:02'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mgp 12/10/2020 20:39:02'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mgp 12/10/2020 20:39:02'!
FAILURE!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mgp 12/10/2020 20:39:02'!
FAILURE!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mgp 12/10/2020 20:39:02'!
FAILURE!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mgp 12/10/2020 20:39:02'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mgp 12/10/2020 20:39:02'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mgp 12/10/2020 20:39:03'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:39:38' prior: 50883577!
updateRoomPositionAfter: aBlock
	[aBlock] value.
! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mgp 12/10/2020 20:39:43'!
FAILURE!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mgp 12/10/2020 20:39:44'!
FAILURE!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mgp 12/10/2020 20:39:44'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mgp 12/10/2020 20:39:44'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mgp 12/10/2020 20:39:44'!
FAILURE!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mgp 12/10/2020 20:39:44'!
FAILURE!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mgp 12/10/2020 20:39:44'!
FAILURE!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mgp 12/10/2020 20:39:44'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mgp 12/10/2020 20:39:44'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mgp 12/10/2020 20:39:44'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:40:03' prior: 50883534!
moveForward
	
	position := position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:40:18' prior: 50883528!
moveBackward
	
	position := position - heading forwardPoint! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mgp 12/10/2020 20:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mgp 12/10/2020 20:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mgp 12/10/2020 20:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mgp 12/10/2020 20:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mgp 12/10/2020 20:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mgp 12/10/2020 20:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mgp 12/10/2020 20:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mgp 12/10/2020 20:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mgp 12/10/2020 20:40:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mgp 12/10/2020 20:40:31'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:43:10' prior: 50883667!
moveForward
	room removeObjectAt: position.
	position := position + heading forwardPoint
	room add: self at:position.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:43:17' prior: 50883716!
moveForward
	room removeObjectAt: position.
	position := position + heading forwardPoint.
	room add: self at:position.! !

Object subclass: #NullRoom
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NullRoom category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 20:43:41'!
Object subclass: #NullRoom
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NullRoom methodsFor: 'nil' stamp: 'mgp 12/10/2020 20:44:19'!
add: roomObject at: position
! !
!NullRoom methodsFor: 'nil' stamp: 'mgp 12/10/2020 20:44:44'!
removeObjectAt: position! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'mgp 12/10/2020 20:45:10' prior: 50883561!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room := NullRoom new..! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'mgp 12/10/2020 20:45:12' prior: 50883748!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room := NullRoom new.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:45:37' prior: 50883672!
moveBackward
	room removeObjectAt: position.
	position := position - heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:45:58' prior: 50883768!
moveBackward
	room removeObjectAt: position.
	position := position - heading forwardPoint.
	room add: self at:position.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mgp 12/10/2020 20:46:05'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mgp 12/10/2020 20:46:05'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mgp 12/10/2020 20:46:05'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mgp 12/10/2020 20:46:05'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mgp 12/10/2020 20:46:05'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mgp 12/10/2020 20:46:05'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mgp 12/10/2020 20:46:05'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mgp 12/10/2020 20:46:05'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mgp 12/10/2020 20:46:05'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mgp 12/10/2020 20:46:05'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:47:02' prior: 50883623!
updateRoomPositionAfter: aBlock
	room removeObjectAt: position.
	[aBlock] value.
	room add: self at:position.
	
! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:47:40' prior: 50883723!
moveForward
	   self updateRoomPositionAfter: [ position :=  position + heading forwardPoint.]
! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:48:11' prior: 50883774!
moveBackward
	self updateRoomPositionAfter: [position := position - heading forwardPoint.]
! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mgp 12/10/2020 20:48:16'!
FAILURE!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mgp 12/10/2020 20:48:17'!
FAILURE!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mgp 12/10/2020 20:48:17'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mgp 12/10/2020 20:48:17'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mgp 12/10/2020 20:48:17'!
FAILURE!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mgp 12/10/2020 20:48:17'!
FAILURE!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mgp 12/10/2020 20:48:17'!
FAILURE!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mgp 12/10/2020 20:48:17'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mgp 12/10/2020 20:48:17'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mgp 12/10/2020 20:48:17'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:49:16' prior: 50883827!
moveForward
	room removeObjectAt: position.
	position :=  position + heading forwardPoint.
	room add: self at:position.
	! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mgp 12/10/2020 20:49:33' prior: 50883833!
moveBackward
	room removeObjectAt: position.
	position :=  position - heading forwardPoint.
	room add: self at:position.
! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mgp 12/10/2020 20:49:39'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mgp 12/10/2020 20:49:39'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mgp 12/10/2020 20:49:39'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mgp 12/10/2020 20:49:39'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mgp 12/10/2020 20:49:40'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mgp 12/10/2020 20:49:40'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mgp 12/10/2020 20:49:40'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mgp 12/10/2020 20:49:40'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mgp 12/10/2020 20:49:40'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mgp 12/10/2020 20:49:40'!
PASSED!

!classRenamed: #Room as: #ValidRoom stamp: 'mgp 12/10/2020 20:50:03'!
Smalltalk renameClassNamed: #Room as: #ValidRoom!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:50:04' prior: 50882509!
test05CanNotAddObjectToOcuppiedPosition
	| room aRoomObject anotherRoomObject | 
	room := ValidRoom withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	room add: aRoomObject at: 0@0.
	anotherRoomObject  := self anotherPortableObject.
	
	self
		should: [room add: anotherRoomObject at: 0@0 ]
		raise: Error
		withMessageText: ValidRoom occupiedPositionErrorDescription.	
	
	self assert: (room contains: aRoomObject at: 0@0).
	self deny: (room isPositionEmpty: 0@0).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:50:04' prior: 50882705!
test06CanNotAddObjectToInvalidPosition
	| room aRoomObject | 
	room := ValidRoom withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	self
		should: [room add: aRoomObject at: 10@0 ]
		raise: Error
		withMessageText: ValidRoom invalidPositionErrorDescription.	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:50:04' prior: 50881884!
test02RoomDimensionsCanNotBeNonInteger
	self
		should: [ValidRoom withWidth: 1 andHeight: 0.5 ]
		raise: Error
		withMessageText: ValidRoom nonIntegerDimensionsErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:50:04' prior: 50883191!
test07CanAddMultipleObjects
	| room aRoomObject anotherRoomObject | 
	room := ValidRoom withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	anotherRoomObject  := self anotherPortableObject.
	room add: aRoomObject at: 0@0.
	room add:anotherRoomObject at: 1@0.
	
	self assert: (room contains: aRoomObject at: 0@0).
	self assert: (room contains: anotherRoomObject at: 1@0).
	self assert: [#(0@1, 1@1) allSatisfy: [:postion | room isPositionEmpty: postion ]].
	self assert: (room isPositionOccupied: 1@0).
	self assert: (room isPositionOccupied: 0@0).


! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:50:04' prior: 50882419!
test03RoomStartsEmpty
	| room |
	room := ValidRoom withWidth: 2 andHeight: 2.
	self assert: [#(0@0, 0@1, 1@0, 1@1) allSatisfy: [:postion | room isPositionEmpty: postion ]]! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:50:04' prior: 50883440!
test01CanNotTakeFromEmptyPosition
	"asumo que en caso de realizar take deberia devolverse un error y no simplemente no hacer nada"

	| character  room|
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	room addCharacter: character.
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:50:04' prior: 50881875!
test01RoomDimensionsCanNotBe0orNegative
	self
		should: [ValidRoom withWidth: 0 andHeight:1 ]
		raise: Error
		withMessageText: ValidRoom nonPositiveDimensionsErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:50:04' prior: 50882360!
test04CanAddObjectToEmptyPosition
	| room aRoomObject | 
	room := ValidRoom withWidth: 2 andHeight: 2.
	aRoomObject  := self aPortableObject.
	room add: aRoomObject at: 0@0.
	self assert: (room contains: aRoomObject at: 0@0).
	self deny: (room isPositionEmpty: 0@0).! !

Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 20:51:00'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

Room subclass: #ValidRoom
	instanceVariableNames: 'width height roomObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #ValidRoom category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 20:51:27'!
Room subclass: #ValidRoom
	instanceVariableNames: 'width height roomObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

Room subclass: #NullRoom
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NullRoom category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 20:51:40'!
Room subclass: #NullRoom
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:53:40' prior: 50884006!
test01CanNotTakeFromEmptyPosition
	"asumo que en caso de realizar take deberia devolverse un error y no simplemente no hacer nada"

	| character  room|
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	room addCharacter: character.
	self
		should: [character take ]
		raise: Error
		withMessageText: Room noObjectToTakeErrorDescription.
! !
!ValidRoom class methodsFor: 'error description' stamp: 'mgp 12/10/2020 20:56:44'!
noObjectToTakeErrorDescription
	^ 'No hay objetos para tomar'.! !

!methodRemoval: ValidRoom class #noObjectToTakeErrorDescription stamp: 'mgp 12/10/2020 20:57:09'!
noObjectToTakeErrorDescription
	^ 'No hay objetos para tomar'.!
!PlayableCharacter methodsFor: 'nil' stamp: 'mgp 12/10/2020 20:57:28'!
noObjectToTakeErrorDescription
	^ 'No hay objetos para tomar'.! !
!PlayableCharacter methodsFor: 'nil' stamp: 'mgp 12/10/2020 20:58:24'!
signalNoObjectToTake
	self error: self noObjectToTakeErrorDescription .! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 20:59:23' prior: 50884106!
signalNoObjectToTake
	^self error: self noObjectToTakeErrorDescription .! !

----SNAPSHOT----(10 December 2020 20:59:29) CuisUniversity-4384.image priorSource: 17654218!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'mgp 12/10/2020 21:01:46'!
take
	| fowardPosition aPortableObject |
	fowardPosition  := 2
	backpack add: aPortableObject.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'mgp 12/10/2020 21:03:05' prior: 50884120!
take
	| fowardPosition aPortableObject |
	fowardPosition  := position + heading forwardPoint.
	
	backpack add: aPortableObject.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'mgp 12/10/2020 21:04:38' prior: 50884127!
take
	| fowardPosition aPortableObject |
	fowardPosition  := position + heading forwardPoint.
	(room isPositionEmpty: fowardPosition ) ifTrue: self signalNoObjectToTake.
	
	backpack add: aPortableObject.! !
!ValidRoom methodsFor: 'accessing' stamp: 'mgp 12/10/2020 21:07:11'!
objectAt: position
	^ roomObjects at:position ifAbsent: [NullStageObject new.]! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'mgp 12/10/2020 21:08:30' prior: 50884135!
take
	| fowardPosition |
	fowardPosition  := position + heading forwardPoint.
	(room isPositionEmpty: fowardPosition ) ifTrue: self signalNoObjectToTake.
	backpack add: (room objectAt: fowardPosition).! !

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:09:11'!
ERROR!

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:09:11'!
ERROR!
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:10:17' prior: 50883425!
aCharacterAt0riginAndNorth
	| backpack |
	backpack  := PlayableCharacterTest defaul
	 ^PlayableCharacter named: 'Luigi' using: (PlayableCharacterTest defaultBackpack) at: 0@0 heading: #North .
! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:10:49' prior: 50884168!
aCharacterAt0riginAndNorth
	| backpack |
	backpack  := Backpack containingUpTo: 100 limitingPointsTo: 100.
	 ^PlayableCharacter named: 'Luigi' using: backpack at: 0@0 heading: #North .
! !

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:10:54'!
ERROR!

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:10:54'!
ERROR!
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:11:20' prior: 50884076!
test01CanNotTakeFromEmptyPosition
	"asumo que en caso de realizar take deberia devolverse un error y no simplemente no hacer nada"

	| character  room|
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	room addCharacter: character.
	self
		should: [character take ]
		raise: Error
		withMessageText: character noObjectToTakeErrorDescription.
! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:11:28' prior: 50884195!
test01CanNotTakeFromEmptyPosition
	"asumo que en caso de realizar take deberia devolverse un error y no simplemente no hacer nada"

	| character  room|
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	room addCharacter: character.
	self
		should: [character take ]
		raise: Error
		withMessageText: PlayableCharacter noObjectToTakeErrorDescription.
! !

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:11:33'!
ERROR!

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:11:33'!
ERROR!
!PlayableCharacter class methodsFor: 'initialization' stamp: 'mgp 12/10/2020 21:11:58'!
noObjectToTakeErrorDescription
	^ 'No hay objetos para tomar'.! !

!methodRemoval: PlayableCharacter #noObjectToTakeErrorDescription stamp: 'mgp 12/10/2020 21:12:10'!
noObjectToTakeErrorDescription
	^ 'No hay objetos para tomar'.!

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:12:22'!
FAILURE!

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:12:23'!
FAILURE!
!PlayableCharacter class methodsFor: 'nil' stamp: 'mgp 12/10/2020 21:13:02' prior: 50884234!
noObjectToTakeErrorDescription
	^ 'No hay objetos para tomar'.! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:13:17' prior: 50884211!
test01CanNotTakeFromEmptyPosition
	"asumo que en caso de realizar take deberia devolverse un error y no simplemente no hacer nada"

	| character  room|
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	room addCharacter: character.
	self
		should: [character take ]
		raise: Error
		withMessageText: PlayableCharacter noObjectToTakeErrorDescription.
! !

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:13:22'!
FAILURE!

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:13:22'!
FAILURE!
!PlayableCharacter methodsFor: 'exeptions' stamp: 'mgp 12/10/2020 21:14:06' prior: 50884112!
signalNoObjectToTake
	^self error: self class noObjectToTakeErrorDescription .! !

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:14:13'!
PASSED!
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:15:55'!
test02CanTakeFromPositionAhead
	"asumo que en caso de realizar take deberia devolverse un error y no simplemente no hacer nada"

	| character  room portableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	room addCharacter: character.
	portableObject := NoPointsPortableObject named:  4 weighing: 1.
	
	character take.
	! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:16:43' prior: 50884291!
test02CanTakeFromPositionAhead
	"asumo que en caso de realizar take deberia devolverse un error y no simplemente no hacer nada"

	| character  room portableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	room addCharacter: character.
	portableObject := NoPointsPortableObject named: 'rock'  weighing: 1.
	
	character take.
	! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:17:29' prior: 50884307!
test02CanTakeFromPositionAhead
	"asumo que en caso de realizar take deberia devolverse un error y no simplemente no hacer nada"

	| character  room portableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	room addCharacter: character.
	portableObject := NoPointsPortableObject named: 'rock'  weighing: 1.
	room add: portableObject at:0@1.
	
	character take.
	! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:18:04' prior: 50884323!
test02CanTakeFromPositionAhead
	"asumo que en caso de realizar take deberia devolverse un error y no simplemente no hacer nada"

	| character  room portableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	room addCharacter: character.
	portableObject := NoPointsPortableObject named: 'rock'  weighing: 1.
	room add: portableObject at:0@1.
	
	character take.
	character backpackIncludes: portableObject .
	! !

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:18:10'!
PASSED!

!testRun: #PlayableCharacterTestExtension #test02CanTakeFromPositionAhead stamp: 'mgp 12/10/2020 21:18:10'!
ERROR!

!testRun: #PlayableCharacterTestExtension #test02CanTakeFromPositionAhead stamp: 'mgp 12/10/2020 21:18:10'!
ERROR!
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:18:20' prior: 50884340!
test02CanTakeFromPositionAhead
	"asumo que en caso de realizar take deberia devolverse un error y no simplemente no hacer nada"

	| character  room portableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	room addCharacter: character.
	portableObject := NoPointsPortableObject named: 'rock'  weighing: 1.
	room add: portableObject at:1@0.
	
	character take.
	character backpackIncludes: portableObject .
	! !

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:18:34'!
PASSED!

!testRun: #PlayableCharacterTestExtension #test02CanTakeFromPositionAhead stamp: 'mgp 12/10/2020 21:18:34'!
ERROR!

!testRun: #PlayableCharacterTestExtension #test02CanTakeFromPositionAhead stamp: 'mgp 12/10/2020 21:18:34'!
ERROR!
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:19:05' prior: 50884370!
test02CanTakeFromPositionAhead
	"asumo que en caso de realizar take deberia devolverse un error y no simplemente no hacer nada"

	| character  room portableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	portableObject := NoPointsPortableObject named: 'rock'  weighing: 1.
	room add: portableObject at:1@0.
	room addCharacter: character.
	
	character take.
	character backpackIncludes: portableObject .
	! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:19:15' prior: 50884400!
test02CanTakeFromPositionAhead
	"asumo que en caso de realizar take deberia devolverse un error y no simplemente no hacer nada"

	| character  room portableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	portableObject := NoPointsPortableObject named: 'rock'  weighing: 1.
	room add: portableObject at:0@1.
	room addCharacter: character.
	
	character take.
	character backpackIncludes: portableObject .
	! !

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:19:22'!
PASSED!

!testRun: #PlayableCharacterTestExtension #test02CanTakeFromPositionAhead stamp: 'mgp 12/10/2020 21:19:23'!
ERROR!

!testRun: #PlayableCharacterTestExtension #test02CanTakeFromPositionAhead stamp: 'mgp 12/10/2020 21:19:23'!
ERROR!

	fowardPosition  := position + heading forwardPoint.!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mgp 12/10/2020 21:20:38'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mgp 12/10/2020 21:20:39'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mgp 12/10/2020 21:20:39'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mgp 12/10/2020 21:20:39'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mgp 12/10/2020 21:20:39'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mgp 12/10/2020 21:20:39'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mgp 12/10/2020 21:20:39'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mgp 12/10/2020 21:20:40'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mgp 12/10/2020 21:20:40'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mgp 12/10/2020 21:20:40'!
PASSED!

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:20:47'!
PASSED!

!testRun: #PlayableCharacterTestExtension #test02CanTakeFromPositionAhead stamp: 'mgp 12/10/2020 21:20:47'!
ERROR!

!testRun: #PlayableCharacterTestExtension #test02CanTakeFromPositionAhead stamp: 'mgp 12/10/2020 21:20:47'!
ERROR!

	fowardPosition  := position + heading forwardPoint.!

	room isPositionEmpty: fowardPosition!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'mgp 12/10/2020 21:22:42' prior: 50884150!
take
	| fowardPosition isEmpty |
	fowardPosition  := position + heading forwardPoint.
	isEmpty := room isPositionEmpty: fowardPosition.
	isEmpty ifTrue: self signalNoObjectToTake.
	backpack add: (room objectAt: fowardPosition).! !

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:22:50'!
PASSED!

!testRun: #PlayableCharacterTestExtension #test02CanTakeFromPositionAhead stamp: 'mgp 12/10/2020 21:22:50'!
ERROR!

!testRun: #PlayableCharacterTestExtension #test02CanTakeFromPositionAhead stamp: 'mgp 12/10/2020 21:22:50'!
ERROR!

	isEmpty := room isPositionEmpty: fowardPosition.!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'mgp 12/10/2020 21:23:39' prior: 50884502!
take
	| fowardPosition isEmpty |
	fowardPosition  := position + heading forwardPoint.
	isEmpty := room isPositionEmpty: fowardPosition.
	isEmpty ifTrue: [self signalNoObjectToTake].
	backpack add: (room objectAt: fowardPosition).! !

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:23:46'!
PASSED!

!testRun: #PlayableCharacterTestExtension #test02CanTakeFromPositionAhead stamp: 'mgp 12/10/2020 21:23:46'!
PASSED!
!Backpack methodsFor: 'adding' stamp: 'mgp 12/10/2020 21:26:02'!
addPortableObject: aPortableObject
	
	aPortableObject assertCanAddTo: self.
	
	container add: aPortableObject.
	! !
!Backpack methodsFor: 'adding' stamp: 'mgp 12/10/2020 21:26:50' prior: 50879224!
add: stageObject
	
	stageObject addToBackpack: self.
	! !
!PortableObject methodsFor: 'adding' stamp: 'mgp 12/10/2020 21:28:08'!
addToBackpack: backpack
	backpack addPortableObject: self.! !
!Backpack methodsFor: 'adding' stamp: 'mgp 12/10/2020 21:29:30'!
addFromNoPortableObject: aNoPortableObject
	aNoPortableObject addToBackpack:self
	! !
!Backpack methodsFor: 'adding' stamp: 'mgp 12/10/2020 21:32:37'!
addFromStageObjects: stageObjects
	stageObjects do: [:object | object addToBackpack: self]
	! !

!methodRemoval: Backpack #addFromNoPortableObject: stamp: 'mgp 12/10/2020 21:33:15'!
addFromNoPortableObject: aNoPortableObject
	aNoPortableObject addToBackpack:self
	!

StageObject subclass: #NoPortableObject
	instanceVariableNames: 'container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NoPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 21:33:42'!
StageObject subclass: #NoPortableObject
	instanceVariableNames: 'container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:34:18'!
addToBackpack: backpack
	backpack addFromStageObjects: container.! !
!Backpack methodsFor: 'adding' stamp: 'mgp 12/10/2020 21:36:34' prior: 50884563!
addFromStageObjects: stageObjects
	[stageObjects do: [:object | object addToBackpack: self]] on: Error do: [].
	! !
!StageObject methodsFor: 'nil' stamp: 'mgp 12/10/2020 21:37:22'!
addToBackpack
	self subclassResponsibility .! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'mgp 12/10/2020 21:38:10'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'mgp 12/10/2020 21:38:10'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'mgp 12/10/2020 21:38:11'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'mgp 12/10/2020 21:38:11'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'mgp 12/10/2020 21:38:11'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'mgp 12/10/2020 21:38:11'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'mgp 12/10/2020 21:38:11'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'mgp 12/10/2020 21:38:11'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'mgp 12/10/2020 21:38:11'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'mgp 12/10/2020 21:38:11'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'mgp 12/10/2020 21:38:11'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'mgp 12/10/2020 21:38:11'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'mgp 12/10/2020 21:38:11'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'mgp 12/10/2020 21:38:11'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'mgp 12/10/2020 21:38:11'!
PASSED!
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:39:33'!
test03CanTakeFromNoPortableObjectContainingPortable

	| character  room portableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	portableObject := NoPointsPortableObject named: 'rock'  weighing: 1.
	room add: portableObject at:0@1.
	room addCharacter: character.
	
	character take.
	character backpackIncludes: portableObject .
	! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:41:06' prior: 50884659!
test03CanTakeFromNoPortableObjectContainingPortable

	| character  room portableObject noPortableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	portableObject := NoPointsPortableObject named: 'rock'  weighing: 1.
	noPortableObject := NoPortableObject with: (OrderedCollection with: portableObject ).

	room add: portableObject at:0@1.
	room addCharacter: character.
	
	character take.
	character backpackIncludes: portableObject .
	! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:41:17' prior: 50884675!
test03CanTakeFromNoPortableObjectContainingPortable

	| character  room portableObject noPortableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	portableObject := NoPointsPortableObject named: 'rock'  weighing: 1.
	noPortableObject := NoPortableObject with: (OrderedCollection with: portableObject ).

	room add: noPortableObject at:0@1.
	room addCharacter: character.
	
	character take.
	character backpackIncludes: portableObject .
	! !

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:41:23'!
PASSED!

!testRun: #PlayableCharacterTestExtension #test02CanTakeFromPositionAhead stamp: 'mgp 12/10/2020 21:41:23'!
PASSED!

!testRun: #PlayableCharacterTestExtension #test03CanTakeFromNoPortableObjectContainingPortable stamp: 'mgp 12/10/2020 21:41:23'!
PASSED!
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:42:46'!
test04DoesNotContinueAddingAfterExceded

	| character  room portableObject noPortableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	portableObject := NoPointsPortableObject named: 'rock'  weighing: 1.
	noPortableObject := NoPortableObject with: (OrderedCollection with: portableObject ).

	room add: noPortableObject at:0@1.
	room addCharacter: character.
	
	character take.
	character backpackIncludes: portableObject .
	! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:43:35' prior: 50884726!
test04DoesNotContinueAddingAfterExceded

	| character  room portableObject HeavyPortableObject noPortableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	portableObject := NoPointsPortableObject named: 'rock'  weighing: 1.
	portableObject := NoPointsPortableObject named: 'bigRock'  weighing: 1000.

	noPortableObject := NoPortableObject with: (OrderedCollection with: portableObject ).

	room add: noPortableObject at:0@1.
	room addCharacter: character.
	
	character take.
	character backpackIncludes: portableObject .
	! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:44:36' prior: 50884745!
test04DoesNotContinueAddingAfterExceded

	| character  room portableObject HeavyPortableObject noPortableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	portableObject := NoPointsPortableObject named: 'rock'  weighing: 1.
	HeavyPortableObject := NoPointsPortableObject named: 'bigRock'  weighing: 1000.

	noPortableObject := NoPortableObject with: (OrderedCollection with: HeavyPortableObject with: portableObject ).

	room add: noPortableObject at:0@1.
	room addCharacter: character.
	
	character take.
	self deny: (character backpackIncludes: portableObject) .
	! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:44:55' prior: 50884695!
test03CanTakeFromNoPortableObjectContainingPortable

	| character  room portableObject noPortableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	portableObject := NoPointsPortableObject named: 'rock'  weighing: 1.
	noPortableObject := NoPortableObject with: (OrderedCollection with: portableObject ).

	room add: noPortableObject at:0@1.
	room addCharacter: character.
	
	character take.
	self assert: (character backpackIncludes: portableObject ).
	! !
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:45:08' prior: 50884419!
test02CanTakeFromPositionAhead

	| character  room portableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	portableObject := NoPointsPortableObject named: 'rock'  weighing: 1.
	room add: portableObject at:0@1.
	room addCharacter: character.
	
	character take.
	character backpackIncludes: portableObject .
	! !

!testRun: #PlayableCharacterTestExtension #test03CanTakeFromNoPortableObjectContainingPortable stamp: 'mgp 12/10/2020 21:45:18'!
PASSED!

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:45:27'!
PASSED!

!testRun: #PlayableCharacterTestExtension #test02CanTakeFromPositionAhead stamp: 'mgp 12/10/2020 21:45:27'!
PASSED!

!testRun: #PlayableCharacterTestExtension #test03CanTakeFromNoPortableObjectContainingPortable stamp: 'mgp 12/10/2020 21:45:27'!
PASSED!

!testRun: #PlayableCharacterTestExtension #test04DoesNotContinueAddingAfterExceded stamp: 'mgp 12/10/2020 21:45:27'!
PASSED!
!PlayableCharacterTestExtension methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:45:53' prior: 50884811!
test02CanTakeFromPositionAhead

	| character  room portableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	portableObject := NoPointsPortableObject named: 'rock'  weighing: 1.
	room add: portableObject at:0@1.
	room addCharacter: character.
	
	character take.
	self assert: (character backpackIncludes: portableObject) .
	! !
!PlayableCharacterTestExtension methodsFor: 'testing' stamp: 'mgp 12/10/2020 21:46:44' prior: 50884767!
test04DoesNotContinueAddingAfterExceded

	| character  room portableObject HeavyPortableObject noPortableObject |
	
	room := ValidRoom withWidth: 2 andHeight: 2.
	character := self aCharacterAt0riginAndNorth.
	portableObject := NoPointsPortableObject named: 'rock'  weighing: 1.
	HeavyPortableObject := NoPointsPortableObject named: 'bigRock'  weighing: 1000.

	noPortableObject := NoPortableObject with: (OrderedCollection with: HeavyPortableObject with: portableObject ).

	room add: noPortableObject at:0@1.
	room addCharacter: character.
	
	character take.
	self deny: (character backpackIncludes: portableObject) .
	self deny: (character backpackIncludes: HeavyPortableObject) .

	! !

!testRun: #PlayableCharacterTestExtension #test01CanNotTakeFromEmptyPosition stamp: 'mgp 12/10/2020 21:46:54'!
PASSED!

!testRun: #PlayableCharacterTestExtension #test02CanTakeFromPositionAhead stamp: 'mgp 12/10/2020 21:46:54'!
PASSED!

!testRun: #PlayableCharacterTestExtension #test03CanTakeFromNoPortableObjectContainingPortable stamp: 'mgp 12/10/2020 21:46:54'!
PASSED!

!testRun: #PlayableCharacterTestExtension #test04DoesNotContinueAddingAfterExceded stamp: 'mgp 12/10/2020 21:46:54'!
PASSED!

StageObject subclass: #NoPortableObject
	instanceVariableNames: 'container name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NoPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'mgp 12/10/2020 21:48:24'!
StageObject subclass: #NoPortableObject
	instanceVariableNames: 'container name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NoPortableObject methodsFor: 'initialization' stamp: 'mgp 12/10/2020 21:48:40' prior: 50883333!
initializeWith: containedObjects 
	container := containedObjects.
	name := ''.! !
!NoPortableObject class methodsFor: 'instance creation' stamp: 'mgp 12/10/2020 21:49:25'!
with: containedObjects named: objectDescription
	^self new initializeWith: containedObjects named: objectDescription.! !
!NoPortableObject methodsFor: 'initialization' stamp: 'mgp 12/10/2020 21:50:15'!
initializeWith: containedObjects named: objectDescription.
	container := containedObjects.
	name := objectDescription.! !
!Room methodsFor: 'nil' stamp: 'mgp 12/10/2020 21:51:04'!
removeObjectAt: position! !
!Room methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:51:12' prior: 50884936!
removeObjectAt: position
	self subclassResponsibility .! !
!Room methodsFor: 'as yet unclassified' stamp: 'mgp 12/10/2020 21:51:31'!
add: roomObject at: position
	self subclassResponsibility .! !

----SNAPSHOT----(10 December 2020 21:52:33) CuisUniversity-4384.image priorSource: 17678923!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mgp 12/10/2020 21:52:43'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mgp 12/10/2020 21:52:43'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mgp 12/10/2020 21:52:43'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mgp 12/10/2020 21:52:43'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mgp 12/10/2020 21:52:43'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mgp 12/10/2020 21:52:43'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mgp 12/10/2020 21:52:43'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mgp 12/10/2020 21:52:43'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mgp 12/10/2020 21:52:43'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mgp 12/10/2020 21:52:43'!
PASSED!

----SNAPSHOT----(10 December 2020 21:53:41) CuisUniversity-4384.image priorSource: 17705566!

----QUIT----(10 December 2020 21:55:30) CuisUniversity-4384.image priorSource: 17706895!