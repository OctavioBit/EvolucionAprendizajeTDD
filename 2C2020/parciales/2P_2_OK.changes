----STARTUP---- (10 December 2020 12:01:05) as /home/nahuel/Documents/cuisuniversity/CuisUniversity-4384.image!


----End fileIn of /home/nahuel/Downloads/ISW1-2020-2C-2doParcial.st----!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 12:21:41'!
PASSED!

----QUIT----(10 December 2020 13:00:41) CuisUniversity-4384.image priorSource: 17155564!

----STARTUP---- (10 December 2020 16:58:12) as /home/nahuel/Documents/cuisuniversity/CuisUniversity-4384.image!


TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'NNH 12/10/2020 17:29:04'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'no messages' stamp: 'NNH 12/10/2020 17:29:56'!
test01! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:29:59' prior: 50868750!
test01

	! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'NNH 12/10/2020 17:39:29'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:39:21' prior: 50868754!
test01

	| aRoom |
	aRoom := Room forWidth: 10 height: 10.
	
	self assert aRoom width equals: 10.
	self assert aRoom height equals: 10.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:40:00' prior: 50868765!
test01

	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self assert: aRoom width equals: 10.
	self assert: aRoom height equals: 10.! !

!testRun: #RoomTest #test01 stamp: 'NNH 12/10/2020 17:40:06'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'NNH 12/10/2020 17:40:36'!
forWidth: aSmallInteger height: aSmallInteger2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeForWidth: aSmallInteger height: aSmallInteger2 ! !
!Room class methodsFor: 'instance creation' stamp: 'NNH 12/10/2020 17:40:58' prior: 50868783!
forWidth: aWidth height: aHeight
	
	^self new initializeForWidth: aWidth height: aHeight. ! !

!testRun: #RoomTest #test01 stamp: 'NNH 12/10/2020 17:41:01'!
ERROR!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'NNH 12/10/2020 17:41:16'!
Object subclass: #Room
	instanceVariableNames: 'width'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'NNH 12/10/2020 17:41:16'!
Object subclass: #Room
	instanceVariableNames: 'width height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'NNH 12/10/2020 17:41:16'!
initializeForWidth: aWidth height: aHeight 
	self shouldBeImplemented.
	width := aWidth.
	height := aHeight.! !
!Room methodsFor: 'initialization' stamp: 'NNH 12/10/2020 17:41:21' prior: 50868816!
initializeForWidth: aWidth height: aHeight 
	
	width := aWidth.
	height := aHeight.! !

!testRun: #RoomTest #test01 stamp: 'NNH 12/10/2020 17:41:26'!
ERROR!
!Room methodsFor: 'accessing' stamp: 'NNH 12/10/2020 17:41:34'!
width
	self shouldBeImplemented.
	^width! !
!Room methodsFor: 'accessing' stamp: 'NNH 12/10/2020 17:41:38' prior: 50868830!
width
	
	^ width! !

!testRun: #RoomTest #test01 stamp: 'NNH 12/10/2020 17:41:39'!
ERROR!
!Room methodsFor: 'accessing' stamp: 'NNH 12/10/2020 17:41:45'!
height
	self shouldBeImplemented.
	^height! !
!Room methodsFor: 'accessing' stamp: 'NNH 12/10/2020 17:41:49' prior: 50868839!
height
	
	^ height! !

!testRun: #RoomTest #test01 stamp: 'NNH 12/10/2020 17:41:51'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'NNH 12/10/2020 17:41:51'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:43:34'!
test02

	
	
	self should: [ Room forWidth: 0 height: 10 ]
	raise: Error 
	withMessageText: Room widthMustBeAPositiveIntegerErrorDescription
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:43:49' prior: 50868851!
test02
	
	self should: [ Room forWidth: 0 height: 10 ]
	raise: Error 
	withMessageText: Room widthMustBeAPositiveIntegerErrorDescription.
! !

!testRun: #RoomTest #test02 stamp: 'NNH 12/10/2020 17:43:56'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'NNH 12/10/2020 17:44:16'!
widthMustBeAPositiveIntegerErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'NNH 12/10/2020 17:44:41' prior: 50868869!
widthMustBeAPositiveIntegerErrorDescription
	
	^ 'A rooms width must be a positive integer'! !

!testRun: #RoomTest #test02 stamp: 'NNH 12/10/2020 17:44:49'!
FAILURE!
!Room methodsFor: 'initialization' stamp: 'NNH 12/10/2020 17:45:38' prior: 50868823!
initializeForWidth: aWidth height: aHeight 
	
	width := aWidth.
	height := aHeight.! !
!Room class methodsFor: 'instance creation' stamp: 'NNH 12/10/2020 17:45:59' prior: 50868793!
forWidth: aWidth height: aHeight
	
	aWidth < 1 ifTrue: [ self error: self widthMustBeAPositiveIntegerErrorDescription ].

	
	^self new initializeForWidth: aWidth height: aHeight. ! !
!Room class methodsFor: 'instance creation' stamp: 'NNH 12/10/2020 17:46:03' prior: 50868889!
forWidth: aWidth height: aHeight
	
	aWidth < 1 ifTrue: [ self error: self widthMustBeAPositiveIntegerErrorDescription ].
	
	^self new initializeForWidth: aWidth height: aHeight. ! !

!testRun: #RoomTest #test02 stamp: 'NNH 12/10/2020 17:46:14'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'NNH 12/10/2020 17:46:14'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'NNH 12/10/2020 17:46:14'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:46:28'!
test03
	
	self should: [ Room forWidth: 10 height: 0 ]
	raise: Error 
	withMessageText: Room heightMustBeAPositiveIntegerErrorDescription.
! !

!testRun: #RoomTest #test03 stamp: 'NNH 12/10/2020 17:46:31'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'NNH 12/10/2020 17:46:43'!
heightMustBeAPositiveIntegerErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'NNH 12/10/2020 17:46:57' prior: 50868923!
heightMustBeAPositiveIntegerErrorDescription
	
	^ 'A rooms height must be a positive integer'.! !

!testRun: #RoomTest #test03 stamp: 'NNH 12/10/2020 17:46:58'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'NNH 12/10/2020 17:47:15' prior: 50868898!
forWidth: aWidth height: aHeight
	
	aWidth < 1 ifTrue: [ self error: self widthMustBeAPositiveIntegerErrorDescription ].
	aWidth < 1 ifTrue: [ self error: self heightMustBeAPositiveIntegerErrorDescription ].

	
	^self new initializeForWidth: aWidth height: aHeight. ! !

!testRun: #RoomTest #test03 stamp: 'NNH 12/10/2020 17:47:21'!
FAILURE!

!testRun: #RoomTest #test03 stamp: 'NNH 12/10/2020 17:47:21'!
FAILURE!

!testRun: #RoomTest #test03 stamp: 'NNH 12/10/2020 17:47:25'!
FAILURE!

!testRun: #RoomTest #test03 stamp: 'NNH 12/10/2020 17:47:25'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'NNH 12/10/2020 17:47:37' prior: 50868938!
forWidth: aWidth height: aHeight
	
	aWidth < 1 ifTrue: [ self error: self widthMustBeAPositiveIntegerErrorDescription ].
	aHeight < 1 ifTrue: [ self error: self heightMustBeAPositiveIntegerErrorDescription ].

	
	^self new initializeForWidth: aWidth height: aHeight. ! !
!Room class methodsFor: 'instance creation' stamp: 'NNH 12/10/2020 17:48:33' prior: 50868959!
forWidth: aWidth height: aHeight
	
	aWidth < 1 ifTrue: [ self error: self widthMustBeAPositiveIntegerErrorDescription ].
	aHeight < 1 ifTrue: [ self error: self heightMustBeAPositiveIntegerErrorDescription ].

	^self new initializeForWidth: aWidth height: aHeight. ! !

!testRun: #RoomTest #test03 stamp: 'NNH 12/10/2020 17:48:37'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:49:04'!
test04
	
	self should: [ Room forWidth: 0.5 height: 10 ]
	raise: Error 
	withMessageText: Room widthMustBeAPositiveIntegerErrorDescription .
! !

!testRun: #RoomTest #test04 stamp: 'NNH 12/10/2020 17:49:05'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'NNH 12/10/2020 17:49:05'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'NNH 12/10/2020 17:49:05'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'NNH 12/10/2020 17:49:05'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'NNH 12/10/2020 17:49:05'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:49:21' prior: 50868985!
test04
	
	self should: [ Room forWidth: 0.5 height: 10 ]
	raise: Error 
	withMessageText: Room widthMustBeAPositiveIntegerErrorDescription .
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:49:25' prior: 50869004!
test04
	
	self should: [ Room forWidth: 1.5 height: 10 ]
	raise: Error 
	withMessageText: Room widthMustBeAPositiveIntegerErrorDescription .
! !

	self should: [ Room forWidth: 1.5 height: 10 ]!

!testRun: #RoomTest #test04 stamp: 'NNH 12/10/2020 17:49:49'!
FAILURE!

!testRun: #RoomTest #test04 stamp: 'NNH 12/10/2020 17:49:49'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'NNH 12/10/2020 17:50:34' prior: 50868971!
forWidth: aWidth height: aHeight
	
	(aWidth < 1 and: [ aWidth isInteger ]) ifTrue: [ self error: self widthMustBeAPositiveIntegerErrorDescription ].
	aHeight < 1 ifTrue: [ self error: self heightMustBeAPositiveIntegerErrorDescription ].

	^self new initializeForWidth: aWidth height: aHeight. ! !

!testRun: #RoomTest #test04 stamp: 'NNH 12/10/2020 17:50:39'!
FAILURE!

!testRun: #RoomTest #test04 stamp: 'NNH 12/10/2020 17:50:39'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'NNH 12/10/2020 17:51:06' prior: 50869026!
forWidth: aWidth height: aHeight
	
	(aWidth >= 1 and: [ aWidth isInteger ]) ifFalse: [ self error: self widthMustBeAPositiveIntegerErrorDescription ].
	aHeight < 1 ifTrue: [ self error: self heightMustBeAPositiveIntegerErrorDescription ].

	^self new initializeForWidth: aWidth height: aHeight. ! !

!testRun: #RoomTest #test04 stamp: 'NNH 12/10/2020 17:51:10'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:51:24'!
test05
	
	self should: [ Room forWidth: 10 height: 1.5 ]
	raise: Error 
	withMessageText: Room heightMustBeAPositiveIntegerErrorDescription .
! !

!testRun: #RoomTest #test05 stamp: 'NNH 12/10/2020 17:51:25'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'NNH 12/10/2020 17:51:48' prior: 50869043!
forWidth: aWidth height: aHeight
	
	(aWidth >= 1 and: [ aWidth isInteger ]) ifFalse: [ self error: self widthMustBeAPositiveIntegerErrorDescription ].
	(aHeight >= 1 and: [ aHeight isInteger ]) ifFalse: [ self error: self heightMustBeAPositiveIntegerErrorDescription ].

	^self new initializeForWidth: aWidth height: aHeight. ! !

!testRun: #RoomTest #test05 stamp: 'NNH 12/10/2020 17:51:57'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #RoomTest #test02 stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #RoomTest #test03 stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #RoomTest #test04 stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!

!testRun: #RoomTest #test05 stamp: 'NNH 12/10/2020 17:52:01'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:52:49'!
test02RoomShouldNotHaveNonPositiveWidth
	
	self should: [ Room forWidth: 0 height: 10 ]
	raise: Error 
	withMessageText: Room widthMustBeAPositiveIntegerErrorDescription.
! !

!methodRemoval: RoomTest #test02 stamp: 'NNH 12/10/2020 17:52:49'!
test02
	
	self should: [ Room forWidth: 0 height: 10 ]
	raise: Error 
	withMessageText: Room widthMustBeAPositiveIntegerErrorDescription.
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:53:07'!
test03RoomShouldNotHaveNonPositiveHeight
	
	self should: [ Room forWidth: 10 height: 0 ]
	raise: Error 
	withMessageText: Room heightMustBeAPositiveIntegerErrorDescription.
! !

!methodRemoval: RoomTest #test03 stamp: 'NNH 12/10/2020 17:53:07'!
test03
	
	self should: [ Room forWidth: 10 height: 0 ]
	raise: Error 
	withMessageText: Room heightMustBeAPositiveIntegerErrorDescription.
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:53:23'!
test04RoomShouldNotHaveNonIntegerWidth
	
	self should: [ Room forWidth: 1.5 height: 10 ]
	raise: Error 
	withMessageText: Room widthMustBeAPositiveIntegerErrorDescription .
! !

!methodRemoval: RoomTest #test04 stamp: 'NNH 12/10/2020 17:53:23'!
test04
	
	self should: [ Room forWidth: 1.5 height: 10 ]
	raise: Error 
	withMessageText: Room widthMustBeAPositiveIntegerErrorDescription .
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:53:39'!
test05RoomShouldNotHaveNonIntegerHeight
	
	self should: [ Room forWidth: 10 height: 1.5 ]
	raise: Error 
	withMessageText: Room heightMustBeAPositiveIntegerErrorDescription .
! !

!methodRemoval: RoomTest #test05 stamp: 'NNH 12/10/2020 17:53:39'!
test05
	
	self should: [ Room forWidth: 10 height: 1.5 ]
	raise: Error 
	withMessageText: Room heightMustBeAPositiveIntegerErrorDescription .
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:55:06'!
test01ARoomShouldHaveImmutableWidthAndHeight

	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self assert: aRoom width equals: 10.
	self assert: aRoom height equals: 10.! !

!methodRemoval: RoomTest #test01 stamp: 'NNH 12/10/2020 17:55:06'!
test01

	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self assert: aRoom width equals: 10.
	self assert: aRoom height equals: 10.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:55:19'!
test01RoomShouldHaveImmutableWidthAndHeight

	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self assert: aRoom width equals: 10.
	self assert: aRoom height equals: 10.! !

!methodRemoval: RoomTest #test01ARoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 17:55:19'!
test01ARoomShouldHaveImmutableWidthAndHeight

	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self assert: aRoom width equals: 10.
	self assert: aRoom height equals: 10.!

----SNAPSHOT----(10 December 2020 17:55:43) CuisUniversity-4384.image priorSource: 17186590!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 17:57:28'!
test06
	
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:06:50' prior: 50869282!
test06
	
	| aRoom |
	aRoom := Room forWidth: 10 height: 10.
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:09:46' prior: 50869286!
test06
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	aRoom place: 'Scarf' at: 0@0.
	
	self assert: ( aRoom cellContentAt: 0@0 ) equals: 'Scarf'.
	
	 ! !

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:09:58'!
ERROR!

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:09:58'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:10:34'!
place: aString at: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'NNH 12/10/2020 18:12:11'!
Object subclass: #Room
	instanceVariableNames: 'width height contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:12:09' prior: 50869303!
place: aStageObject at: aPosition
	
	contents at: aPosition put: aStageObject! !
!Room methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:12:15' prior: 50869316!
place: aStageObject at: aPosition
	
	contents at: aPosition put: aStageObject.! !

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:12:20'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'NNH 12/10/2020 18:12:43' prior: 50868883!
initializeForWidth: aWidth height: aHeight 
	
	width := aWidth.
	height := aHeight.
	contents := Dictionary new.! !

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:13:18'!
ERROR!

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:13:18'!
ERROR!
!Room methodsFor: 'accessing' stamp: 'NNH 12/10/2020 18:13:38'!
cellContentAt: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'accessing' stamp: 'NNH 12/10/2020 18:13:56' prior: 50869340!
cellContentAt: aPosition
	
	^ contents at: aPosition.! !

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:14:12'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:14:15'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 18:14:15'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 18:14:15'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 18:14:15'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 18:14:15'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 18:14:15'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:14:15'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:16:38'!
test07
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	self should: [ aRoom place: 'Scarf' at: -1@0 ]
	raise: Error
	withMEssageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:16:49' prior: 50869373!
test07
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom place: 'Scarf' at: -1@0 ]
	raise: Error
	withMEssageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 ! !

!testRun: #RoomTest #test07 stamp: 'NNH 12/10/2020 18:17:01'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'NNH 12/10/2020 18:17:13'!
cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'NNH 12/10/2020 18:17:30' prior: 50869395!
cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription
	
	^ 'Cannot place an object outside a rooms boundaries'! !

!testRun: #RoomTest #test07 stamp: 'NNH 12/10/2020 18:17:33'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:18:09' prior: 50869383!
test07
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom place: 'Scarf' at: -1@0 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 ! !

!testRun: #RoomTest #test07 stamp: 'NNH 12/10/2020 18:18:12'!
FAILURE!
!Room methodsFor: 'accessing' stamp: 'NNH 12/10/2020 18:18:53' prior: 50869345!
cellContentAt: aPosition
	
	aPosition x > 0 ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	
	^ contents at: aPosition.! !

!testRun: #RoomTest #test07 stamp: 'NNH 12/10/2020 18:19:01'!
FAILURE!

!testRun: #RoomTest #test07 stamp: 'NNH 12/10/2020 18:19:01'!
FAILURE!
!Room methodsFor: 'accessing' stamp: 'NNH 12/10/2020 18:19:39' prior: 50869422!
cellContentAt: aPosition
		
	^ contents at: aPosition.! !
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 18:19:51' prior: 50869322!
place: aStageObject at: aPosition
	
	aPosition x > 0 ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	
	contents at: aPosition put: aStageObject.! !

!testRun: #RoomTest #test07 stamp: 'NNH 12/10/2020 18:20:13'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:20:28'!
test08
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom place: 'Scarf' at: 0@-1 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 ! !

!testRun: #RoomTest #test08 stamp: 'NNH 12/10/2020 18:20:31'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 18:20:31'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 18:20:31'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 18:20:31'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 18:20:31'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 18:20:31'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:20:31'!
ERROR!

!testRun: #RoomTest #test07 stamp: 'NNH 12/10/2020 18:20:31'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'NNH 12/10/2020 18:20:31'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:20:31'!
ERROR!
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 18:20:53' prior: 50869440!
place: aStageObject at: aPosition
	
	aPosition x > 0 ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	aPosition y > 0 ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].

	
	contents at: aPosition put: aStageObject.! !

!testRun: #RoomTest #test08 stamp: 'NNH 12/10/2020 18:21:16'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 18:21:16'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 18:21:16'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 18:21:16'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 18:21:16'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 18:21:16'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:21:16'!
ERROR!

!testRun: #RoomTest #test07 stamp: 'NNH 12/10/2020 18:21:16'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'NNH 12/10/2020 18:21:16'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:21:16'!
ERROR!

!testRun: #RoomTest #test08 stamp: 'NNH 12/10/2020 18:21:24'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'NNH 12/10/2020 18:21:26'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 18:21:30'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 18:21:30'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 18:21:30'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 18:21:30'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 18:21:30'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:21:30'!
ERROR!

!testRun: #RoomTest #test07 stamp: 'NNH 12/10/2020 18:21:30'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'NNH 12/10/2020 18:21:30'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:21:30'!
ERROR!
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 18:21:49' prior: 50869488!
place: aStageObject at: aPosition
	
	aPosition x >= 0 ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	aPosition y >= 0 ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].

	
	contents at: aPosition put: aStageObject.! !

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 18:21:52'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 18:21:52'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 18:21:52'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 18:21:52'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 18:21:52'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:21:52'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'NNH 12/10/2020 18:21:52'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'NNH 12/10/2020 18:21:52'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:22:10'!
test09
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom place: 'Scarf' at: 10@0 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 ! !

!testRun: #RoomTest #test09 stamp: 'NNH 12/10/2020 18:22:19'!
FAILURE!
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 18:22:56' prior: 50869557!
place: aStageObject at: aPosition
	
	( aPosition x >= 0 and: [ aPosition < width ] ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	aPosition y >= 0 ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].

	
	contents at: aPosition put: aStageObject.! !

!testRun: #RoomTest #test09 stamp: 'NNH 12/10/2020 18:23:00'!
FAILURE!

!testRun: #RoomTest #test09 stamp: 'NNH 12/10/2020 18:23:00'!
FAILURE!
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 18:23:22' prior: 50869605!
place: aStageObject at: aPosition
	
	( aPosition x >= 0 and: [ aPosition x < width ] ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	aPosition y >= 0 ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].

	
	contents at: aPosition put: aStageObject.! !
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 18:23:54' prior: 50869623!
place: aStageObject at: aPosition
	
	( aPosition x between: 0 andNotInclusive: width ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	aPosition y >= 0 ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].

	
	contents at: aPosition put: aStageObject.! !

!testRun: #RoomTest #test09 stamp: 'NNH 12/10/2020 18:24:00'!
FAILURE!

!testRun: #RoomTest #test09 stamp: 'NNH 12/10/2020 18:24:00'!
FAILURE!
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 18:24:22' prior: 50869637!
place: aStageObject at: aPosition
	
	( aPosition x between: 0 and: width ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	aPosition y >= 0 ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].

	
	contents at: aPosition put: aStageObject.! !

!testRun: #RoomTest #test09 stamp: 'NNH 12/10/2020 18:24:26'!
FAILURE!

!testRun: #RoomTest #test09 stamp: 'NNH 12/10/2020 18:24:26'!
FAILURE!
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 18:24:41' prior: 50869655!
place: aStageObject at: aPosition
	
	( aPosition x between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	aPosition y >= 0 ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].

	
	contents at: aPosition put: aStageObject.! !

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 18:24:45'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 18:24:45'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 18:24:45'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 18:24:45'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 18:24:45'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:24:45'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'NNH 12/10/2020 18:24:45'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'NNH 12/10/2020 18:24:45'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'NNH 12/10/2020 18:24:45'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:25:10'!
test10
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom place: 'Scarf' at: 10@0 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:25:19' prior: 50869712!
test10
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom place: 'Scarf' at: 0@10 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 ! !

!testRun: #RoomTest #test10 stamp: 'NNH 12/10/2020 18:25:20'!
FAILURE!
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 18:25:56' prior: 50869673!
place: aStageObject at: aPosition
	
	( aPosition x between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	( aPosition y between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].

	
	contents at: aPosition put: aStageObject.! !

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 18:26:02'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 18:26:02'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 18:26:02'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 18:26:02'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 18:26:02'!
PASSED!

!testRun: #RoomTest #test06 stamp: 'NNH 12/10/2020 18:26:02'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'NNH 12/10/2020 18:26:02'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'NNH 12/10/2020 18:26:02'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'NNH 12/10/2020 18:26:02'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'NNH 12/10/2020 18:26:02'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:27:43'!
test06RoomCellsShouldContainOneObjectPlaced
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	aRoom place: 'Scarf' at: 0@0.
	
	self assert: ( aRoom cellContentAt: 0@0 ) equals: 'Scarf'.
	
	 ! !

!methodRemoval: RoomTest #test06 stamp: 'NNH 12/10/2020 18:27:43'!
test06
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	aRoom place: 'Scarf' at: 0@0.
	
	self assert: ( aRoom cellContentAt: 0@0 ) equals: 'Scarf'.
	
	 !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:28:42'!
test11RoomCellsShouldContainMoreThanOneObjectPlaced
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	aRoom place: 'Scarf' at: 0@0.
	aRoom place: 'Knife' at: 1@0.
	
	self assert: ( aRoom cellContentAt: 0@0 ) equals: 'Scarf'.
	self assert: ( aRoom cellContentAt: 0@0 ) equals: 'Knife'.

	 ! !

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 18:28:43'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:28:55' prior: 50869792!
test11RoomCellsShouldContainMoreThanOneObjectPlaced
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	aRoom place: 'Scarf' at: 0@0.
	aRoom place: 'Knife' at: 1@0.
	
	self assert: ( aRoom cellContentAt: 0@0 ) equals: 'Scarf'.
	self assert: ( aRoom cellContentAt: 1@0 ) equals: 'Knife'.

	 ! !

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 18:28:56'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 18:28:56'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 18:28:56'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 18:28:56'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 18:28:56'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 18:28:56'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 18:28:56'!
PASSED!

!testRun: #RoomTest #test07 stamp: 'NNH 12/10/2020 18:28:56'!
PASSED!

!testRun: #RoomTest #test08 stamp: 'NNH 12/10/2020 18:28:56'!
PASSED!

!testRun: #RoomTest #test09 stamp: 'NNH 12/10/2020 18:28:56'!
PASSED!

!testRun: #RoomTest #test10 stamp: 'NNH 12/10/2020 18:28:56'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 18:28:56'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:29:54'!
test07ShouldNotPlaceAnObjectAtNegativeX
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom place: 'Scarf' at: -1@0 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 ! !

!methodRemoval: RoomTest #test07 stamp: 'NNH 12/10/2020 18:29:54'!
test07
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom place: 'Scarf' at: -1@0 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:30:20'!
test08ShouldNotPlaceAnObjectBeyondMaxWidth
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom place: 'Scarf' at: 0@-1 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 ! !

!methodRemoval: RoomTest #test08 stamp: 'NNH 12/10/2020 18:30:20'!
test08
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom place: 'Scarf' at: 0@-1 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:30:38'!
test09ShouldNotPlaceAnObjectBeyondMaxWidth
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom place: 'Scarf' at: 10@0 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 ! !

!methodRemoval: RoomTest #test09 stamp: 'NNH 12/10/2020 18:30:38'!
test09
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom place: 'Scarf' at: 10@0 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:30:49'!
test08ShouldNotPlaceAnObjectAtNegativeY
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom place: 'Scarf' at: 0@-1 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 ! !

!methodRemoval: RoomTest #test08ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 18:30:49'!
test08ShouldNotPlaceAnObjectBeyondMaxWidth
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom place: 'Scarf' at: 0@-1 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:31:05'!
test10ShouldNotPlaceAnObjectBeyondMaxHeight
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom place: 'Scarf' at: 0@10 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 ! !

!methodRemoval: RoomTest #test10 stamp: 'NNH 12/10/2020 18:31:05'!
test10
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom place: 'Scarf' at: 0@10 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription.

	
	 !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:32:30'!
test12
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	aRoom place: 'Scarf' at: 0@0.
	self should: [ aRoom place: 'Knife' at: 0@0 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOnOccupiedCellErrorDescription .
	

	 ! !

!testRun: #RoomTest #test12 stamp: 'NNH 12/10/2020 18:32:32'!
ERROR!
!Room class methodsFor: 'error descriptions' stamp: 'NNH 12/10/2020 18:32:46'!
cannotPlaceAnObjectOnOccupiedCellErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error descriptions' stamp: 'NNH 12/10/2020 18:33:05' prior: 50869971!
cannotPlaceAnObjectOnOccupiedCellErrorDescription
	
	^ 'Cannot place an object on an already occupied cell' .! !

!testRun: #RoomTest #test12 stamp: 'NNH 12/10/2020 18:33:06'!
FAILURE!
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 18:34:36' prior: 50869734!
place: aStageObject at: aPosition
	
	( aPosition x between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	( aPosition y between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].

	contents at: aPosition ifPresent: [self error: self class cannotPlaceAnObjectOnOccupiedCellErrorDescription ] .
	contents at: aPosition put: aStageObject.! !
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 18:34:49' prior: 50869986!
place: aStageObject at: aPosition
	
	( aPosition x between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	( aPosition y between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	contents at: aPosition ifPresent: [self error: self class cannotPlaceAnObjectOnOccupiedCellErrorDescription ] .
	
	contents at: aPosition put: aStageObject.! !
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 18:36:32' prior: 50870004!
place: aStageObject at: aPosition
	
	( aPosition x between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	( aPosition y between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	contents at: aPosition ifPresent: [self error: self class cannotPlaceAnObjectOnOccupiedCellErrorDescription ] .
	
	contents at: aPosition put: aStageObject.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:38:24'!
test12ShouldNotPlaceAnObjectOnOccupiedOPosition
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	aRoom place: 'Scarf' at: 0@0.
	self should: [ aRoom place: 'Knife' at: 0@0 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOnOccupiedCellErrorDescription .
	

	 ! !

!methodRemoval: RoomTest #test12 stamp: 'NNH 12/10/2020 18:38:24'!
test12
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	aRoom place: 'Scarf' at: 0@0.
	self should: [ aRoom place: 'Knife' at: 0@0 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOnOccupiedCellErrorDescription .
	

	 !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:38:31'!
test12ShouldNotPlaceAnObjectOnOccupiedPosition
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	aRoom place: 'Scarf' at: 0@0.
	self should: [ aRoom place: 'Knife' at: 0@0 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOnOccupiedCellErrorDescription .
	

	 ! !

!methodRemoval: RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedOPosition stamp: 'NNH 12/10/2020 18:38:31'!
test12ShouldNotPlaceAnObjectOnOccupiedOPosition
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	aRoom place: 'Scarf' at: 0@0.
	self should: [ aRoom place: 'Knife' at: 0@0 ]
	raise: Error
	withMessageText: Room cannotPlaceAnObjectOnOccupiedCellErrorDescription .
	

	 !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:46:51'!
test13
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
		
	self assert: ( aRoom cellContentAt: 0@0 ifFreeCell: [ 'Nothing' ] ) equals: 'Nothing'.
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:47:04' prior: 50870085!
test13
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
		
	self assert: ( aRoom cellContentAt: 0@0 ifNothing: [ 'Nothing' ] ) equals: 'Nothing'.
	
	 ! !

!testRun: #RoomTest #test13 stamp: 'NNH 12/10/2020 18:47:15'!
ERROR!
!Room methodsFor: 'accessing' stamp: 'NNH 12/10/2020 18:47:23'!
cellContentAt: aPoint ifNothing: aBlockClosure 
	self shouldBeImplemented.! !
!Room methodsFor: 'accessing' stamp: 'NNH 12/10/2020 18:47:54' prior: 50870103!
cellContentAt: aPosition ifNothing: aClosure 
	
	aClosure value.! !

!testRun: #RoomTest #test13 stamp: 'NNH 12/10/2020 18:47:55'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:48:09' prior: 50870093!
test13
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
		
	self assert: ( aRoom cellContentAt: 0@0 ifNothing: [ ^ 'Nothing' ] ) equals: 'Nothing'.
	
	 ! !

!testRun: #RoomTest #test13 stamp: 'NNH 12/10/2020 18:48:14'!
PASSED!
!Room methodsFor: 'accessing' stamp: 'NNH 12/10/2020 18:49:14' prior: 50870108!
cellContentAt: aPosition ifNothing: aClosure 
	
	^ contents at: aPosition ifAbsent: [ ^ aClosure value ].! !
!Room methodsFor: 'accessing' stamp: 'NNH 12/10/2020 18:49:34' prior: 50869435!
cellContentAt: aPosition
		
	^ self cellContentAt: aPosition ifNothing: [] .! !

!testRun: #RoomTest #test13 stamp: 'NNH 12/10/2020 18:50:36'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 18:50:39'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 18:50:39'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 18:50:39'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 18:50:39'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 18:50:39'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 18:50:39'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 18:50:39'!
PASSED!

!testRun: #RoomTest #test08ShouldNotPlaceAnObjectAtNegativeY stamp: 'NNH 12/10/2020 18:50:39'!
PASSED!

!testRun: #RoomTest #test09ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 18:50:39'!
PASSED!

!testRun: #RoomTest #test10ShouldNotPlaceAnObjectBeyondMaxHeight stamp: 'NNH 12/10/2020 18:50:39'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 18:50:39'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 18:50:39'!
FAILURE!

!testRun: #RoomTest #test13 stamp: 'NNH 12/10/2020 18:50:39'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 18:50:39'!
FAILURE!

!testRun: #RoomTest #test13 stamp: 'NNH 12/10/2020 18:50:50'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 18:50:53'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 18:50:56'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 18:50:58'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 18:51:00'!
FAILURE!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 18:51:00'!
FAILURE!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 18:52:47'!
FAILURE!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 18:52:47'!
FAILURE!
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 18:54:17' prior: 50870022!
place: aStageObject at: aPosition
	
	( aPosition x between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	( aPosition y between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	contents at: aPosition ifPresent: [ self error: self class cannotPlaceAnObjectOnOccupiedCellErrorDescription ] .
	
	contents at: aPosition put: aStageObject.
	! !
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 18:54:39' prior: 50870212!
place: aStageObject at: aPosition
	
	( aPosition x between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	( aPosition y between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	contents at: aPosition ifPresent: [ self error: self class cannotPlaceAnObjectOnOccupiedCellErrorDescription ] .
	
	contents at: aPosition put: aStageObject.
	! !

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 18:54:43'!
FAILURE!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 18:54:43'!
FAILURE!
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 18:55:30' prior: 50870230!
place: aStageObject at: aPosition
	
	( aPosition x between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	( aPosition y between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	( contents includesKey: aPosition ) ifTrue: [ self error: self class cannotPlaceAnObjectOnOccupiedCellErrorDescription ] .
	
	contents at: aPosition put: aStageObject.
	! !

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 18:55:33'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 18:55:33'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 18:55:33'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 18:55:33'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 18:55:33'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 18:55:33'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 18:55:33'!
PASSED!

!testRun: #RoomTest #test08ShouldNotPlaceAnObjectAtNegativeY stamp: 'NNH 12/10/2020 18:55:33'!
PASSED!

!testRun: #RoomTest #test09ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 18:55:33'!
PASSED!

!testRun: #RoomTest #test10ShouldNotPlaceAnObjectBeyondMaxHeight stamp: 'NNH 12/10/2020 18:55:33'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 18:55:33'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 18:55:33'!
PASSED!

!testRun: #RoomTest #test13 stamp: 'NNH 12/10/2020 18:55:33'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:55:45' prior: 50870116!
test13
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
		
	self assert: ( aRoom cellContentAt: 0@0 ifNothing: [ 'Nothing' ] ) equals: 'Nothing'.
	
	 ! !

!testRun: #RoomTest #test13 stamp: 'NNH 12/10/2020 18:55:48'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:57:03'!
test14
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
		
	self assert: ( aRoom cellContentAt: 0@0 ifNothing: [ 'Nothing' ] ) equals: 'Nothing'.
	
	 ! !

!methodRemoval: RoomTest #test14 stamp: 'NNH 12/10/2020 18:57:38'!
test14
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
		
	self assert: ( aRoom cellContentAt: 0@0 ifNothing: [ 'Nothing' ] ) equals: 'Nothing'.
	
	 !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:58:44' prior: 50870316!
test13
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
		
	self assert: ( aRoom cellContentAt: 0@0 ifNothing: [ 'Nothing' ] ) equals: 'Nothing'.
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 18:59:47'!
test14
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	aRoom place: 'Scarf' at: 0@0.
	
	self assert: ( aRoom cellContentAt: 0@0 ifNothing: [ 'Nothing' ] ) equals: 'Scarf'.
	
	 ! !

!testRun: #RoomTest #test14 stamp: 'NNH 12/10/2020 18:59:49'!
PASSED!

TestCase subclass: #StageObjectTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #StageObjectTest category: 'ISW1-2020-2C-2doParcial' stamp: 'NNH 12/10/2020 19:03:45'!
TestCase subclass: #StageObjectTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!StageObjectTest methodsFor: 'nil' stamp: 'NNH 12/10/2020 19:03:55'!
test01
	! !
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 19:09:08' prior: 50870372!
test01
	
	! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'NNH 12/10/2020 19:13:23'!
Object subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 19:14:49' prior: 50870376!
test01
	
	| aBackpack aNonPortableObject |
	aNonPortableObject := NonPortableObject named: 'Box' containing: OrderedCollection new.
	aBackpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	
	self deny: ( aNonPortableObject assertCanAddTo: aBackpack) .! !

StageObject subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'NNH 12/10/2020 19:15:06'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 19:17:45' prior: 50870388!
test01
	
	| aNonPortableObject |
	
	aNonPortableObject := NonPortableObject named: 'Box' containing: OrderedCollection new.
	
	self assert: aNonPortableObject elements isEmpty.! !

!testRun: #StageObjectTest #test01 stamp: 'NNH 12/10/2020 19:17:49'!
ERROR!

!testRun: #StageObjectTest #test01 stamp: 'NNH 12/10/2020 19:18:11'!
ERROR!

!testRun: #StageObjectTest #test01 stamp: 'NNH 12/10/2020 19:18:11'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'NNH 12/10/2020 19:18:27'!
named: aString containing: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString containing: anOrderedCollection ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'NNH 12/10/2020 19:18:51' prior: 50870429!
named: aName containing: aCollectionOfStageObjects 

	^ self new initializeNamed: aName containing: aCollectionOfStageObjects. ! !

!testRun: #StageObjectTest #test01 stamp: 'NNH 12/10/2020 19:18:53'!
ERROR!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'NNH 12/10/2020 19:19:11'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'NNH 12/10/2020 19:19:12'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name collectionOfStageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'NNH 12/10/2020 19:19:12'!
initializeNamed: aName containing: aCollectionOfStageObjects 
	self shouldBeImplemented.
	name := aName.
	collectionOfStageObjects := aCollectionOfStageObjects.! !
!NonPortableObject methodsFor: 'initialization' stamp: 'NNH 12/10/2020 19:19:32' prior: 50870467!
initializeNamed: aName containing: aCollectionOfStageObjects 
	
	name := aName.
	collectionOfStageObjects := aCollectionOfStageObjects.! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'NNH 12/10/2020 19:20:04'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 19:20:04' prior: 50870476!
initializeNamed: aName containing: aCollectionOfStageObjects 
	
	name := aName.
	elements := aCollectionOfStageObjects.! !

!testRun: #StageObjectTest #test01 stamp: 'NNH 12/10/2020 19:20:09'!
ERROR!

!testRun: #StageObjectTest #test01 stamp: 'NNH 12/10/2020 19:20:24'!
ERROR!

!testRun: #StageObjectTest #test01 stamp: 'NNH 12/10/2020 19:20:24'!
ERROR!
!NonPortableObject methodsFor: 'accessing' stamp: 'NNH 12/10/2020 19:20:29'!
elements
	self shouldBeImplemented.
	^elements! !
!NonPortableObject methodsFor: 'accessing' stamp: 'NNH 12/10/2020 19:20:34' prior: 50870507!
elements
	
 	^ elements! !

!testRun: #StageObjectTest #test01 stamp: 'NNH 12/10/2020 19:20:35'!
PASSED!

!testRun: #StageObjectTest #test01 stamp: 'NNH 12/10/2020 19:20:37'!
PASSED!
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 19:25:12'!
test02
	
	| aNonPortableObject |
	
	aNonPortableObject := NonPortableObject named: 'Box' containing: (OrderedCollection with: 'Knife').
	
	self assert: aNonPortableObject elements isEmpty.! !
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 19:25:25' prior: 50870521!
test02
	
	| aNonPortableObject |
	
	aNonPortableObject := NonPortableObject named: 'Box' containing: (OrderedCollection with: 'Knife').
	
	self assert: aNonPortableObject elements equals: {'Knife'}.! !

!testRun: #StageObjectTest #test02 stamp: 'NNH 12/10/2020 19:25:27'!
FAILURE!
!StageObjectTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 19:26:00' prior: 50870531!
test02
	
	| aNonPortableObject |
	
	aNonPortableObject := NonPortableObject named: 'Box' containing: (OrderedCollection with: 'Knife').
	
	self assert: ( aNonPortableObject elements hasEqualElements: {'Knife'} ).! !

!testRun: #StageObjectTest #test02 stamp: 'NNH 12/10/2020 19:26:01'!
PASSED!

!testRun: #StageObjectTest #test01 stamp: 'NNH 12/10/2020 19:26:01'!
PASSED!

!testRun: #StageObjectTest #test02 stamp: 'NNH 12/10/2020 19:26:01'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 19:41:18'!
test11_cannotTakeNonPortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NonPortableObject named: 'Paper' containing: OrderedCollection new.
	
	self should: [ playableCharacter take: paper ]
	raise: Error
	withMessageText: PlayableCharacter cannotAddNonPortableObjectErrorDescription.! !

!testRun: #PlayableCharacterTest #test11_cannotTakeNonPortableObjects stamp: 'NNH 12/10/2020 19:41:23'!
ERROR!

!testRun: #PlayableCharacterTest #test11_cannotTakeNonPortableObjects stamp: 'NNH 12/10/2020 19:41:23'!
ERROR!

!testRun: #PlayableCharacterTest #test11_cannotTakeNonPortableObjects stamp: 'NNH 12/10/2020 19:41:29'!
ERROR!

!testRun: #PlayableCharacterTest #test11_cannotTakeNonPortableObjects stamp: 'NNH 12/10/2020 19:41:29'!
ERROR!

!testRun: #PlayableCharacterTest #test11_cannotTakeNonPortableObjects stamp: 'NNH 12/10/2020 19:41:36'!
ERROR!

!testRun: #PlayableCharacterTest #test11_cannotTakeNonPortableObjects stamp: 'NNH 12/10/2020 19:41:36'!
ERROR!
!PlayableCharacter class methodsFor: 'error handling' stamp: 'NNH 12/10/2020 19:41:48'!
cannotAddNonPortableObjectErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'error handling' stamp: 'NNH 12/10/2020 19:42:12' prior: 50870597!
cannotAddNonPortableObjectErrorDescription
	
	^ 'Cannot add non portable objects to a bag'.! !

!testRun: #PlayableCharacterTest #test11_cannotTakeNonPortableObjects stamp: 'NNH 12/10/2020 19:42:14'!
FAILURE!

!methodRemoval: PlayableCharacter class #cannotAddNonPortableObjectErrorDescription stamp: 'NNH 12/10/2020 19:42:41'!
cannotAddNonPortableObjectErrorDescription
	
	^ 'Cannot add non portable objects to a bag'.!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 19:43:10' prior: 50870560!
test11_cannotTakeNonPortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NonPortableObject named: 'Paper' containing: OrderedCollection new.
	
	self should: [ playableCharacter take: paper ]
	raise: Error
	withMessageText: Backpack cannotAddNonPortableObjectErrorDescription.! !

!testRun: #PlayableCharacterTest #test11_cannotTakeNonPortableObjects stamp: 'NNH 12/10/2020 19:43:40'!
ERROR!

!testRun: #PlayableCharacterTest #test11_cannotTakeNonPortableObjects stamp: 'NNH 12/10/2020 19:43:40'!
ERROR!
!Backpack class methodsFor: 'error messages' stamp: 'NNH 12/10/2020 19:44:00'!
cannotAddNonPortableObjectErrorDescription
	self shouldBeImplemented.! !
!Backpack class methodsFor: 'error messages' stamp: 'NNH 12/10/2020 19:44:14' prior: 50870642!
cannotAddNonPortableObjectErrorDescription
	
	^ 'Cannot add a non portable object to a backpack'! !

!testRun: #PlayableCharacterTest #test11_cannotTakeNonPortableObjects stamp: 'NNH 12/10/2020 19:44:18'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 19:44:30' prior: 50870620!
test11_cannotTakeNonPortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NonPortableObject named: 'Paper' containing: OrderedCollection new.
	
	self should: [ playableCharacter take: paper ]
	raise: Error
	withMessageText: Backpack cannotAddNonPortableObjectErrorDescription.! !

!testRun: #PlayableCharacterTest #test11_cannotTakeNonPortableObjects stamp: 'NNH 12/10/2020 19:45:04'!
FAILURE!
!NonPortableObject methodsFor: 'nil' stamp: 'NNH 12/10/2020 19:46:05'!
assertCanAddTo: aBackpack

	aBackpack assertCanAddNonPortableObject.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 19:50:50' prior: 50870676!
assertCanAddTo: aBackpack

	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 19:51:29'!
test11_canTakeEmptyNonPortableObjectContents

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NonPortableObject named: 'Paper' containing: OrderedCollection new.
	
	self should: [ playableCharacter take: paper ]
	raise: Error
	withMessageText: Backpack cannotAddNonPortableObjectErrorDescription.! !

!methodRemoval: PlayableCharacterTest #test11_cannotTakeNonPortableObjects stamp: 'NNH 12/10/2020 19:51:36'!
test11_cannotTakeNonPortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NonPortableObject named: 'Paper' containing: OrderedCollection new.
	
	self should: [ playableCharacter take: paper ]
	raise: Error
	withMessageText: Backpack cannotAddNonPortableObjectErrorDescription.!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 19:52:15' prior: 50870686!
test11_canTakeEmptyNonPortableObjectContents

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NonPortableObject named: 'Paper' containing: OrderedCollection new.
	
	self assert: ( playableCharacter backpackWeight ) equals: 0.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 19:52:28' prior: 50870717!
test11_canTakeEmptyNonPortableObjectContents

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NonPortableObject named: 'Paper' containing: OrderedCollection new.
	
	
	self assert: ( playableCharacter backpackWeight ) equals: 0.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 19:52:40' prior: 50870731!
test11_canTakeEmptyNonPortableObjectContents

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NonPortableObject named: 'Paper' containing: OrderedCollection new.
	
	playableCharacter take: paper.

	self assert: ( playableCharacter backpackWeight ) equals: 0.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 19:53:24' prior: 50870745!
test11_canTakeEmptyNonPortableObjectContents

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NonPortableObject named: 'Box' containing: OrderedCollection new.
	
	playableCharacter take: paper.

	self assert: ( playableCharacter backpackWeight ) equals: 0.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 19:54:14'!
test12_canTakeContentsOfNonPortableObjectWithOneElement

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NonPortableObject named: 'Box' containing: OrderedCollection new.
	
	playableCharacter take: paper.

	self assert: ( playableCharacter backpackWeight ) equals: 0.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 19:55:51' prior: 50870774!
test12_canTakeContentsOfNonPortableObjectWithOneElement

	| playableCharacter paper box |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: paper ).
	
	playableCharacter take: box.

	self assert: ( playableCharacter backpackIncludes: paper).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 19:56:01' prior: 50870760!
test11_canTakeEmptyNonPortableObjectContents

	| playableCharacter box |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	box := NonPortableObject named: 'Box' containing: OrderedCollection new.
	
	playableCharacter take: box.

	self assert: ( playableCharacter backpackWeight ) equals: 0.! !

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 19:56:07'!
ERROR!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 19:56:07'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 19:57:17' prior: 50870807!
test11_canTakeEmptyNonPortableObjectContents

	| playableCharacter box |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	box := NonPortableObject named: 'Box' containing: OrderedCollection new.
	
	playableCharacter take: box.

	self deny: ( playableCharacter backpackIncludes: box).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 19:57:40' prior: 50870789!
test12_canTakeContentsOfNonPortableObjectWithOneElement

	| playableCharacter paper box |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: paper ).
	
	playableCharacter take: box.

	self assert: ( playableCharacter backpackIncludes: paper).
	self deny: ( playableCharacter backpackIncludes: box).! !

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 19:57:45'!
FAILURE!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 19:57:45'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'NNH 12/10/2020 19:59:46' prior: 50868364!
take: aPortableObject

	aPortableObject isPortable ifTrue: [ backpack add: aPortableObject ]! !
!NonPortableObject methodsFor: 'nil' stamp: 'NNH 12/10/2020 20:00:28'!
isPortable
	
	^ false.! !
!PortableObject methodsFor: 'nil' stamp: 'NNH 12/10/2020 20:00:48'!
isPortable
	
	^ true.! !

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 20:00:57'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 20:01:00'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 20:01:00'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 20:01:13'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 20:01:13'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'NNH 12/10/2020 20:05:30' prior: 50870870!
take: aPortableObject

	aPortableObject isPortable ifTrue: [ backpack add: aPortableObject ] ifFalse: [ aPortableObject elements do: [ :anElement | backpack add: anElement ] ]! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'NNH 12/10/2020 20:05:32' prior: 50870904!
take: aPortableObject

	aPortableObject isPortable ifTrue: [ backpack add: aPortableObject ] ifFalse: [ aPortableObject elements do: [ :anElement | backpack add: anElement ] ].! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 20:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 20:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 20:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 20:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 20:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 20:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 20:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 20:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 20:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 20:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 20:05:39'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 20:05:39'!
PASSED!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'NNH 12/10/2020 20:06:50' prior: 50870913!
take: aPortableObject

	aPortableObject addToBackpack: backpack.! !

!methodRemoval: NonPortableObject #assertCanAddTo: stamp: 'NNH 12/10/2020 20:07:13'!
assertCanAddTo: aBackpack

	!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:08:04'!
addToBackpack: aBackpack
	
	elements do: [:anElement | aBackpack add: anElement ].! !
!PortableObject methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:08:27'!
addToBackpack: aBackpack
	
	aBackpack add: self.! !

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 20:08:39'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #RoomTest #test08ShouldNotPlaceAnObjectAtNegativeY stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #RoomTest #test09ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #RoomTest #test10ShouldNotPlaceAnObjectBeyondMaxHeight stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #RoomTest #test13 stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #RoomTest #test14 stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #StageObjectTest #test01 stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!

!testRun: #StageObjectTest #test02 stamp: 'NNH 12/10/2020 20:08:43'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:12:18'!
test13_canTakeContentsOfNonPortableObjectWithManyElements

	| playableCharacter paper box laser |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	laser := PointsPortableObject named: 'Laser' weighing: 20 worth: 50. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: laser with: paper ).

	playableCharacter take: box.

	self assert: ( playableCharacter backpackIncludes: paper ).
	self assert: ( playableCharacter backpackIncludes: laser ).
	self deny: ( playableCharacter backpackIncludes: box).! !

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 20:12:24'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:13:42'!
test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects

	| playableCharacter paper box laser envelope |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	laser := PointsPortableObject named: 'Laser' weighing: 20 worth: 50. 
	envelope := NonPortableObject named: 'Envelope' containing: ( OrderedCollection with: paper ).
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: laser with: envelope ).

	playableCharacter take: box.

	self assert: ( playableCharacter backpackIncludes: paper ).
	self assert: ( playableCharacter backpackIncludes: laser ).
	self deny: ( playableCharacter backpackIncludes: box ).
	self deny: ( playableCharacter backpackIncludes: envelope ).! !

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 20:13:46'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:15:40' prior: 50870978!
addToBackpack: aBackpack
	
	elements do: [:anElement | anElement addToBackpack: aBackpack ].! !

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 20:15:53'!
PASSED!

!methodRemoval: PortableObject #isPortable stamp: 'NNH 12/10/2020 20:16:56'!
isPortable
	
	^ true.!

!methodRemoval: NonPortableObject #isPortable stamp: 'NNH 12/10/2020 20:17:02'!
isPortable
	
	^ false.!

!classRemoval: #StageObjectTest stamp: 'NNH 12/10/2020 20:17:45'!
TestCase subclass: #StageObjectTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!methodRemoval: NonPortableObject #elements stamp: 'NNH 12/10/2020 20:17:54'!
elements
	
 	^ elements!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #RoomTest #test08ShouldNotPlaceAnObjectAtNegativeY stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #RoomTest #test09ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #RoomTest #test10ShouldNotPlaceAnObjectBeyondMaxHeight stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #RoomTest #test13 stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!

!testRun: #RoomTest #test14 stamp: 'NNH 12/10/2020 20:17:57'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:25:27'!
test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight

	| playableCharacter box wormHole |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	wormHole := PointsPortableObject named: 'Worm Hole' weighing: 110 worth: 10. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: wormHole ).

	self should: [ playableCharacter take: box ]
	raise: Error
	withMessageText: Backpack maxWeightExceededErrorDescription .
! !

!testRun: #PlayableCharacterTest #test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight stamp: 'NNH 12/10/2020 20:25:36'!
PASSED!
!PlayableCharacter methodsFor: 'initialization' stamp: 'NNH 12/10/2020 20:35:32'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading room: aRoom  

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:35:32' prior: 50868390!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading room: Room new ! !

!methodRemoval: PlayableCharacter #initializeNamed:using:at:heading: stamp: 'NNH 12/10/2020 20:35:32'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading!

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'NNH 12/10/2020 20:36:01'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'NNH 12/10/2020 20:36:00' prior: 50871412!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading room: aRoom  

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room := aRoom! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'NNH 12/10/2020 20:36:57'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint room: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading room: Room new ! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:36:57' prior: 50868002!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North room: Room new .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:36:57' prior: 50868078!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X room: Room new ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:36:57' prior: 50868091!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: Room new .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:36:57' prior: 50868050!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South room: Room new .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:36:57' prior: 50867990!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North room: Room new .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:36:57' prior: 50870843!
test12_canTakeContentsOfNonPortableObjectWithOneElement

	| playableCharacter paper box |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: Room new .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: paper ).
	
	playableCharacter take: box.

	self assert: ( playableCharacter backpackIncludes: paper).
	self deny: ( playableCharacter backpackIncludes: box).! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:36:57' prior: 50868036!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East room: Room new .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:36:57' prior: 50871172!
test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects

	| playableCharacter paper box laser envelope |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: Room new .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	laser := PointsPortableObject named: 'Laser' weighing: 20 worth: 50. 
	envelope := NonPortableObject named: 'Envelope' containing: ( OrderedCollection with: paper ).
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: laser with: envelope ).

	playableCharacter take: box.

	self assert: ( playableCharacter backpackIncludes: paper ).
	self assert: ( playableCharacter backpackIncludes: laser ).
	self deny: ( playableCharacter backpackIncludes: box ).
	self deny: ( playableCharacter backpackIncludes: envelope ).! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:36:57' prior: 50868025!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North room: Room new .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:36:57' prior: 50868064!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: Room new .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:36:57' prior: 50871389!
test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight

	| playableCharacter box wormHole |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: Room new .
	wormHole := PointsPortableObject named: 'Worm Hole' weighing: 110 worth: 10. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: wormHole ).

	self should: [ playableCharacter take: box ]
	raise: Error
	withMessageText: Backpack maxWeightExceededErrorDescription .
! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:36:57' prior: 50868104!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: Room new .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:36:57' prior: 50870829!
test11_canTakeEmptyNonPortableObjectContents

	| playableCharacter box |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: Room new .
	box := NonPortableObject named: 'Box' containing: OrderedCollection new.
	
	playableCharacter take: box.

	self deny: ( playableCharacter backpackIncludes: box).! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:36:57' prior: 50871144!
test13_canTakeContentsOfNonPortableObjectWithManyElements

	| playableCharacter paper box laser |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: Room new .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	laser := PointsPortableObject named: 'Laser' weighing: 20 worth: 50. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: laser with: paper ).

	playableCharacter take: box.

	self assert: ( playableCharacter backpackIncludes: paper ).
	self assert: ( playableCharacter backpackIncludes: laser ).
	self deny: ( playableCharacter backpackIncludes: box).! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:36:57' prior: 50868014!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North room: Room new .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !

!methodRemoval: PlayableCharacter class #named:using:at:heading: stamp: 'NNH 12/10/2020 20:36:57'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading room: Room new !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'NNH 12/10/2020 20:37:02' prior: 50871461!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint room: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading room: aRoom! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:37:46'!
defaultRoom

	^ Room forWidth: 10 height: 10.
 ! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:38:07'!
defaultRoomWidth

	^ 10
 ! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:38:10'!
defaultRoomHeight

	^ 10
 ! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 20:38:24' prior: 50871757!
defaultRoom

	^ Room forWidth: self defaultRoomWidth height: self defaultRoomHeight .
 ! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:39:35' prior: 50871530!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North room: self defaultRoom .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:39:44' prior: 50871473!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North room: self defaultRoom .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:39:48' prior: 50871723!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North room: self defaultRoom .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:39:53' prior: 50871609!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North room: self defaultRoom .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:39:58' prior: 50871563!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East room: self defaultRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:40:03' prior: 50871515!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South room: self defaultRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:40:07' prior: 50871622!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: self defaultRoom .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:40:12' prior: 50871486!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X room: self defaultRoom ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:40:16' prior: 50871500!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: self defaultRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:40:22' prior: 50871657!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: self defaultRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:40:26' prior: 50871683!
test11_canTakeEmptyNonPortableObjectContents

	| playableCharacter box |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: self defaultRoom .
	box := NonPortableObject named: 'Box' containing: OrderedCollection new.
	
	playableCharacter take: box.

	self deny: ( playableCharacter backpackIncludes: box).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:40:31' prior: 50871543!
test12_canTakeContentsOfNonPortableObjectWithOneElement

	| playableCharacter paper box |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: self defaultRoom .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: paper ).
	
	playableCharacter take: box.

	self assert: ( playableCharacter backpackIncludes: paper).
	self deny: ( playableCharacter backpackIncludes: box).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:40:41' prior: 50871698!
test13_canTakeContentsOfNonPortableObjectWithManyElements

	| playableCharacter paper box laser |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: self defaultRoom .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	laser := PointsPortableObject named: 'Laser' weighing: 20 worth: 50. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: laser with: paper ).

	playableCharacter take: box.

	self assert: ( playableCharacter backpackIncludes: paper ).
	self assert: ( playableCharacter backpackIncludes: laser ).
	self deny: ( playableCharacter backpackIncludes: box).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:40:46' prior: 50871578!
test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects

	| playableCharacter paper box laser envelope |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: self defaultRoom .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	laser := PointsPortableObject named: 'Laser' weighing: 20 worth: 50. 
	envelope := NonPortableObject named: 'Envelope' containing: ( OrderedCollection with: paper ).
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: laser with: envelope ).

	playableCharacter take: box.

	self assert: ( playableCharacter backpackIncludes: paper ).
	self assert: ( playableCharacter backpackIncludes: laser ).
	self deny: ( playableCharacter backpackIncludes: box ).
	self deny: ( playableCharacter backpackIncludes: envelope ).! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:40:51' prior: 50871637!
test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight

	| playableCharacter box wormHole |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: self defaultRoom .
	wormHole := PointsPortableObject named: 'Worm Hole' weighing: 110 worth: 10. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: wormHole ).

	self should: [ playableCharacter take: box ]
	raise: Error
	withMessageText: Backpack maxWeightExceededErrorDescription .
! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #RoomTest #test08ShouldNotPlaceAnObjectAtNegativeY stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #RoomTest #test09ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #RoomTest #test10ShouldNotPlaceAnObjectBeyondMaxHeight stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #RoomTest #test13 stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!

!testRun: #RoomTest #test14 stamp: 'NNH 12/10/2020 20:40:54'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:45:25'!
test16_shouldNoGoForwardIfRoomWidthExceeded

	| playableCharacter xCoordinateOnTheEdge |

	xCoordinateOnTheEdge := self defaultRoomWidth - 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: xCoordinateOnTheEdge@2 heading: #West room: self defaultRoom .

	self should: [ playableCharacter moveForward ]
	raise: Error
	withMessageText: PlayableCharacter cannotMoveOutsideRoomBoundariesErrorDescription.
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:45:36' prior: 50872196!
test16_shouldNoGoForwardIfRoomWidthExceeded

	| playableCharacter xCoordinateOnTheEdge |

	xCoordinateOnTheEdge := self defaultRoomWidth - 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: xCoordinateOnTheEdge@0 heading: #West room: self defaultRoom .

	self should: [ playableCharacter moveForward ]
	raise: Error
	withMessageText: PlayableCharacter cannotMoveOutsideRoomBoundariesErrorDescription.
! !

!testRun: #PlayableCharacterTest #test16_shouldNoGoForwardIfRoomWidthExceeded stamp: 'NNH 12/10/2020 20:45:37'!
ERROR!
!PlayableCharacter class methodsFor: 'error descriptions' stamp: 'NNH 12/10/2020 20:45:58'!
cannotMoveOutsideRoomBoundariesErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'error descriptions' stamp: 'NNH 12/10/2020 20:46:10' prior: 50872234!
cannotMoveOutsideRoomBoundariesErrorDescription
	
	^ 'Cannot move outside room boundaries'.! !

!testRun: #PlayableCharacterTest #test16_shouldNoGoForwardIfRoomWidthExceeded stamp: 'NNH 12/10/2020 20:46:12'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'NNH 12/10/2020 20:48:01' prior: 50868350!
moveForward
	
	room isInsideRoom: position + heading forwardPoint .
	
	position := position + heading forwardPoint! !
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 20:50:21' prior: 50870255!
place: aStageObject at: aPosition
	
	( aPosition x between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	( aPosition y between: 0 and: width - 1 ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	
	( contents includesKey: aPosition ) ifTrue: [ self error: self class cannotPlaceAnObjectOnOccupiedCellErrorDescription ] .
	
	contents at: aPosition put: aStageObject.
	! !
!Room methodsFor: 'accessing' stamp: 'NNH 12/10/2020 20:51:47'!
isInsideRoom: aPosition
	
	^ true! !
!Room methodsFor: 'accessing' stamp: 'NNH 12/10/2020 20:52:29' prior: 50872275!
isInsideRoom: aPosition
	
	^ ( aPosition x between: 0 and: width - 1 ) and: [ aPosition y between: 0 and: height - 1 ] 
	! !
!Room methodsFor: 'adding' stamp: 'NNH 12/10/2020 20:52:58' prior: 50872257!
place: aStageObject at: aPosition
	
	( self isInsideRoom: aPosition ) ifFalse: [self error: self class cannotPlaceAnObjectOutsideRoomBoundariesErrorDescription ].
	
	( contents includesKey: aPosition ) ifTrue: [ self error: self class cannotPlaceAnObjectOnOccupiedCellErrorDescription ] .
	
	contents at: aPosition put: aStageObject.
	! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:53:29'!
test16_shouldNotGoBeyondRoomBoundaries

	| playableCharacter xCoordinateOnTheEdge |

	xCoordinateOnTheEdge := self defaultRoomWidth - 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: xCoordinateOnTheEdge@0 heading: #West room: self defaultRoom .

	self should: [ playableCharacter moveForward ]
	raise: Error
	withMessageText: PlayableCharacter cannotMoveOutsideRoomBoundariesErrorDescription.
! !

!methodRemoval: PlayableCharacterTest #test16_shouldNoGoForwardIfRoomWidthExceeded stamp: 'NNH 12/10/2020 20:53:29'!
test16_shouldNoGoForwardIfRoomWidthExceeded

	| playableCharacter xCoordinateOnTheEdge |

	xCoordinateOnTheEdge := self defaultRoomWidth - 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: xCoordinateOnTheEdge@0 heading: #West room: self defaultRoom .

	self should: [ playableCharacter moveForward ]
	raise: Error
	withMessageText: PlayableCharacter cannotMoveOutsideRoomBoundariesErrorDescription.
!

!testRun: #PlayableCharacterTest #test16_shouldNotGoBeyondRoomBoundaries stamp: 'NNH 12/10/2020 20:53:58'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'NNH 12/10/2020 20:54:26' prior: 50872250!
moveForward
	
	room isInsideRoom: (position + heading forwardPoint) .
	
	position := position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'NNH 12/10/2020 20:54:58' prior: 50872337!
moveForward
	
	(room isInsideRoom: position + heading forwardPoint) ifFalse: [ self error: self class cannotMoveOutsideRoomBoundariesErrorDescription ].
	
	position := position + heading forwardPoint! !

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 20:55:01'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 20:55:01'!
PASSED!

!testRun: #PlayableCharacterTest #test16_shouldNotGoBeyondRoomBoundaries stamp: 'NNH 12/10/2020 20:55:01'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 20:55:01'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 20:55:01'!
PASSED!

!testRun: #PlayableCharacterTest #test16_shouldNotGoBeyondRoomBoundaries stamp: 'NNH 12/10/2020 20:55:01'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_shouldNotGoBeyondRoomBoundaries stamp: 'NNH 12/10/2020 20:55:07'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_shouldNotGoBeyondRoomBoundaries stamp: 'NNH 12/10/2020 20:55:07'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_shouldNotGoBeyondRoomBoundaries stamp: 'NNH 12/10/2020 20:55:22'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_shouldNotGoBeyondRoomBoundaries stamp: 'NNH 12/10/2020 20:55:22'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:56:09' prior: 50872299!
test16_shouldNotGoBeyondRoomBoundaries

	| playableCharacter xCoordinateOnTheEdge |

	xCoordinateOnTheEdge := self defaultRoomWidth - 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: xCoordinateOnTheEdge@0 heading: #East room: self defaultRoom .

	self should: [ playableCharacter moveForward ]
	raise: Error
	withMessageText: PlayableCharacter cannotMoveOutsideRoomBoundariesErrorDescription.
! !

!testRun: #PlayableCharacterTest #test16_shouldNotGoBeyondRoomBoundaries stamp: 'NNH 12/10/2020 20:56:11'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:56:22'!
test16_shouldNotGoForwardBeyondRoomBoundaries

	| playableCharacter xCoordinateOnTheEdge |

	xCoordinateOnTheEdge := self defaultRoomWidth - 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: xCoordinateOnTheEdge@0 heading: #East room: self defaultRoom .

	self should: [ playableCharacter moveForward ]
	raise: Error
	withMessageText: PlayableCharacter cannotMoveOutsideRoomBoundariesErrorDescription.
! !

!methodRemoval: PlayableCharacterTest #test16_shouldNotGoBeyondRoomBoundaries stamp: 'NNH 12/10/2020 20:56:27'!
test16_shouldNotGoBeyondRoomBoundaries

	| playableCharacter xCoordinateOnTheEdge |

	xCoordinateOnTheEdge := self defaultRoomWidth - 1.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: xCoordinateOnTheEdge@0 heading: #East room: self defaultRoom .

	self should: [ playableCharacter moveForward ]
	raise: Error
	withMessageText: PlayableCharacter cannotMoveOutsideRoomBoundariesErrorDescription.
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:56:51'!
test17_shouldNotGoBackwardBeyondRoomBoundaries

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #East room: self defaultRoom .

	self should: [ playableCharacter moveBackward ]
	raise: Error
	withMessageText: PlayableCharacter cannotMoveOutsideRoomBoundariesErrorDescription.
! !

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 20:56:54'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'NNH 12/10/2020 20:57:12' prior: 50868345!
moveBackward
	
	(room isInsideRoom: position - heading forwardPoint) ifFalse: [ self error: self class cannotMoveOutsideRoomBoundariesErrorDescription ].

	position := position - heading forwardPoint ! !

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 20:57:17'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:57:35' prior: 50872445!
test17_shouldNotGoBackwardBeyondRoomBoundaries

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West room: self defaultRoom .

	self should: [ playableCharacter moveBackward ]
	raise: Error
	withMessageText: PlayableCharacter cannotMoveOutsideRoomBoundariesErrorDescription.
! !

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 20:57:38'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:57:52' prior: 50872477!
test17_shouldNotGoBackwardBeyondRoomBoundaries

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West room: self defaultRoom .

	self should: [ playableCharacter moveBackward ]
	raise: Error
	withMessageText: PlayableCharacter cannotMoveOutsideRoomBoundariesErrorDescription.
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 20:57:57' prior: 50872495!
test17_shouldNotGoBackwardBeyondRoomBoundaries

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North room: self defaultRoom .

	self should: [ playableCharacter moveBackward ]
	raise: Error
	withMessageText: PlayableCharacter cannotMoveOutsideRoomBoundariesErrorDescription.
! !

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test16_shouldNotGoForwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 20:57:59'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 21:00:56'!
test18_roomShouldContainPlayer

	| playableCharacter startingPoint |

	startingPoint := 0@0.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #North room: self defaultRoom .

	self assert: (self defaultRoom cellContentAt: startingPoint) equals: playableCharacter 
! !

!testRun: #PlayableCharacterTest #test18_roomShouldContainPlayer stamp: 'NNH 12/10/2020 21:00:58'!
FAILURE!
!PlayableCharacter methodsFor: 'initialization' stamp: 'NNH 12/10/2020 21:01:30' prior: 50871451!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading room: aRoom  

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room := aRoom.
	room place: self at: position.! !

!testRun: #PlayableCharacterTest #test18_roomShouldContainPlayer stamp: 'NNH 12/10/2020 21:01:35'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_roomShouldContainPlayer stamp: 'NNH 12/10/2020 21:01:35'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 21:02:00' prior: 50872595!
test18_roomShouldContainPlayer

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #North room: self defaultRoom .

	self assert: (self defaultRoom cellContentAt: startingPoint) equals: playableCharacter 
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 21:02:11' prior: 50872630!
test18_roomShouldContainPlayer

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #North room: aRoom .

	self assert: (aRoom cellContentAt: startingPoint) equals: playableCharacter 
! !

!testRun: #PlayableCharacterTest #test18_roomShouldContainPlayer stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test16_shouldNotGoForwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!

!testRun: #PlayableCharacterTest #test18_roomShouldContainPlayer stamp: 'NNH 12/10/2020 21:02:12'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 21:05:43'!
test19_roomShouldContainPlayerWhenItMoves

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #North room: aRoom .
	playableCharacter moveForward.

	self assert: (aRoom cellContentAt: startingPoint ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 
	self assert: (aRoom cellContentAt: startingPoint + 0@1 ) equals: playableCharacter.
! !

!testRun: #PlayableCharacterTest #test19_roomShouldContainPlayerWhenItMoves stamp: 'NNH 12/10/2020 21:05:46'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'NNH 12/10/2020 21:06:36' prior: 50872463!
moveBackward
	
	(room isInsideRoom: position - heading forwardPoint) ifFalse: [ self error: self class cannotMoveOutsideRoomBoundariesErrorDescription ].

	position := position - heading forwardPoint ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:06:50'!
test15
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	aRoom place: 'Scarf' at: 0@0.
	
	self assert: ( aRoom cellContentAt: 0@0 ifNothing: [ 'Nothing' ] ) equals: 'Scarf'.
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:07:27' prior: 50872764!
test15
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	aRoom removeObjectAt: 0@0.
	
	self assert: ( aRoom cellContentAt: 0@0 ifNothing: [ 'Nothing' ] ) equals: 'Nothing'.
	
	 ! !

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:07:42'!
ERROR!

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:07:42'!
ERROR!
!Room methodsFor: 'removing' stamp: 'NNH 12/10/2020 21:08:00'!
removeObjectAt: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'removing' stamp: 'NNH 12/10/2020 21:08:28' prior: 50872786!
removeObjectAt: aPosition
	
	contents remove: aPosition.! !

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:08:29'!
ERROR!

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:08:42'!
ERROR!

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:08:42'!
ERROR!
!Room methodsFor: 'removing' stamp: 'NNH 12/10/2020 21:09:24' prior: 50872791!
removeObjectAt: aPosition
	
	contents removeKey: aPosition.! !

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:09:30'!
ERROR!

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:09:30'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:09:43' prior: 50872773!
test15
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	aRoom place: 'Scarf' at: 0@0.
	aRoom removeObjectAt: 0@0.
	
	self assert: ( aRoom cellContentAt: 0@0 ifNothing: [ 'Nothing' ] ) equals: 'Nothing'.
	
	 ! !

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:09:44'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 21:09:44'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 21:09:44'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 21:09:44'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 21:09:44'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 21:09:44'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 21:09:44'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 21:09:44'!
PASSED!

!testRun: #RoomTest #test08ShouldNotPlaceAnObjectAtNegativeY stamp: 'NNH 12/10/2020 21:09:44'!
PASSED!

!testRun: #RoomTest #test09ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 21:09:44'!
PASSED!

!testRun: #RoomTest #test10ShouldNotPlaceAnObjectBeyondMaxHeight stamp: 'NNH 12/10/2020 21:09:44'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 21:09:44'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 21:09:44'!
PASSED!

!testRun: #RoomTest #test13 stamp: 'NNH 12/10/2020 21:09:44'!
PASSED!

!testRun: #RoomTest #test14 stamp: 'NNH 12/10/2020 21:09:44'!
PASSED!

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:09:44'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:10:26' prior: 50872812!
test15
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	aRoom removeObjectAt: 0@0.
	
	self should: [ aRoom removeObjectAt: 0@0 ]
	raise: Error
	withMessageText: Room cannotRemoveEmptyCellErrorDescription.
	
	 ! !

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:10:29'!
ERROR!
!Room methodsFor: 'removing' stamp: 'NNH 12/10/2020 21:11:28' prior: 50872802!
removeObjectAt: aPosition
	
	contents removeKey: aPosition ifAbsent: [ self error: self class ]. ! !
!Room class methodsFor: 'error descriptions' stamp: 'NNH 12/10/2020 21:12:01'!
cannotRemoveEmptyCellErrorDescription
	
	^ 'Cannot remove an empty cell'! !
!Room methodsFor: 'removing' stamp: 'NNH 12/10/2020 21:12:58' prior: 50872883!
removeObjectAt: aPosition
	
	contents removeKey: aPosition ifAbsent: [ self error: self class cannotRemoveEmptyCellErrorDescription ]. ! !

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:13:02'!
ERROR!

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:13:02'!
ERROR!

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:13:09'!
ERROR!

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:13:09'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:13:15' prior: 50872871!
test15
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom removeObjectAt: 0@0 ]
	raise: Error
	withMessageText: Room cannotRemoveEmptyCellErrorDescription.
	
	 ! !

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:13:20'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test16_shouldNotGoForwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test18_roomShouldContainPlayer stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test19_roomShouldContainPlayerWhenItMoves stamp: 'NNH 12/10/2020 21:13:23'!
FAILURE!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #RoomTest #test08ShouldNotPlaceAnObjectAtNegativeY stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #RoomTest #test09ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #RoomTest #test10ShouldNotPlaceAnObjectBeyondMaxHeight stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #RoomTest #test13 stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #RoomTest #test14 stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:13:23'!
PASSED!

!testRun: #PlayableCharacterTest #test19_roomShouldContainPlayerWhenItMoves stamp: 'NNH 12/10/2020 21:13:23'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'NNH 12/10/2020 21:14:36' prior: 50872755!
moveBackward
	
	(room isInsideRoom: position - heading forwardPoint) ifFalse: [ self error: self class cannotMoveOutsideRoomBoundariesErrorDescription ].

	room removeObjectAt: position.
	
	position := position - heading forwardPoint.
	
	room place: self at: position.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'NNH 12/10/2020 21:14:52' prior: 50872344!
moveForward
	
	(room isInsideRoom: position + heading forwardPoint) ifFalse: [ self error: self class cannotMoveOutsideRoomBoundariesErrorDescription ].
	
	room removeObjectAt: 0@0.
	
	position := position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'NNH 12/10/2020 21:15:21' prior: 50873115!
moveForward
	
	(room isInsideRoom: position + heading forwardPoint) ifFalse: [ self error: self class cannotMoveOutsideRoomBoundariesErrorDescription ].
	
	room removeObjectAt: position.
	
	position := position + heading forwardPoint.
	
	room place: self at: position. ! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 21:15:31'!
test19_roomShouldContainPlayerWhenItMovesForward

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #North room: aRoom .
	playableCharacter moveForward.

	self assert: (aRoom cellContentAt: startingPoint ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 
	self assert: (aRoom cellContentAt: startingPoint + 0@1 ) equals: playableCharacter.
! !

!methodRemoval: PlayableCharacterTest #test19_roomShouldContainPlayerWhenItMoves stamp: 'NNH 12/10/2020 21:15:31'!
test19_roomShouldContainPlayerWhenItMoves

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #North room: aRoom .
	playableCharacter moveForward.

	self assert: (aRoom cellContentAt: startingPoint ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 
	self assert: (aRoom cellContentAt: startingPoint + 0@1 ) equals: playableCharacter.
!

!testRun: #PlayableCharacterTest #test19_roomShouldContainPlayerWhenItMovesForward stamp: 'NNH 12/10/2020 21:15:35'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 21:15:56' prior: 50873137!
test19_roomShouldContainPlayerWhenItMovesForward

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #North room: aRoom .
	playableCharacter moveForward.

	self assert: (aRoom cellContentAt: startingPoint ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 
	self assert: (aRoom cellContentAt: startingPoint + (0@1) ) equals: playableCharacter.
! !

!testRun: #PlayableCharacterTest #test19_roomShouldContainPlayerWhenItMovesForward stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test16_shouldNotGoForwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test18_roomShouldContainPlayer stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!

!testRun: #PlayableCharacterTest #test19_roomShouldContainPlayerWhenItMovesForward stamp: 'NNH 12/10/2020 21:15:58'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 21:16:24'!
test20_roomShouldContainPlayerWhenItMovesBackwards

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #South room: aRoom .
	playableCharacter moveBackward .

	self assert: (aRoom cellContentAt: startingPoint ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 
	self assert: (aRoom cellContentAt: startingPoint + (0@1) ) equals: playableCharacter.
! !

!testRun: #PlayableCharacterTest #test20_roomShouldContainPlayerWhenItMovesBackwards stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test16_shouldNotGoForwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test18_roomShouldContainPlayer stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test19_roomShouldContainPlayerWhenItMovesForward stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!

!testRun: #PlayableCharacterTest #test20_roomShouldContainPlayerWhenItMovesBackwards stamp: 'NNH 12/10/2020 21:16:26'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:20:21'!
test16RoomShouldContainPlayer

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #North room: aRoom .

	self assert: (aRoom cellContentAt: startingPoint) equals: playableCharacter 
	
	 ! !

!testRun: #RoomTest #test16RoomShouldContainPlayer stamp: 'NNH 12/10/2020 21:20:24'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:20:47' prior: 50873377!
test16RoomShouldContainPlayer

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #North room: aRoom .

	self assert: (aRoom cellContentAt: startingPoint) equals: playableCharacter 
	
	 ! !

!testRun: #RoomTest #test16RoomShouldContainPlayer stamp: 'NNH 12/10/2020 21:20:49'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:21:49' prior: 50873394!
test16RoomShouldContainPlayer

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #North room: aRoom .

	self assert: (aRoom cellContentAt: startingPoint) equals: playableCharacter 
	
	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:22:01'!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !

!testRun: #RoomTest #test16RoomShouldContainPlayer stamp: 'NNH 12/10/2020 21:22:04'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:22:30'!
test17RoomShouldContainPlayerWhenItMovesForward

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #North room: aRoom .
	playableCharacter moveForward.

	self assert: (aRoom cellContentAt: startingPoint ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 
	self assert: (aRoom cellContentAt: startingPoint + (0@1) ) equals: playableCharacter.

	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:23:03'!
test18RoomShouldContainPlayerWhenItMovesBackwards

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #South room: aRoom .
	playableCharacter moveBackward .

	self assert: (aRoom cellContentAt: startingPoint ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 
	self assert: (aRoom cellContentAt: startingPoint + (0@1) ) equals: playableCharacter.

	 ! !

!methodRemoval: PlayableCharacterTest #test18_roomShouldContainPlayer stamp: 'NNH 12/10/2020 21:23:12'!
test18_roomShouldContainPlayer

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #North room: aRoom .

	self assert: (aRoom cellContentAt: startingPoint) equals: playableCharacter 
!

!methodRemoval: PlayableCharacterTest #test19_roomShouldContainPlayerWhenItMovesForward stamp: 'NNH 12/10/2020 21:23:15'!
test19_roomShouldContainPlayerWhenItMovesForward

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #North room: aRoom .
	playableCharacter moveForward.

	self assert: (aRoom cellContentAt: startingPoint ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 
	self assert: (aRoom cellContentAt: startingPoint + (0@1) ) equals: playableCharacter.
!

!methodRemoval: PlayableCharacterTest #test20_roomShouldContainPlayerWhenItMovesBackwards stamp: 'NNH 12/10/2020 21:23:19'!
test20_roomShouldContainPlayerWhenItMovesBackwards

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #South room: aRoom .
	playableCharacter moveBackward .

	self assert: (aRoom cellContentAt: startingPoint ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 
	self assert: (aRoom cellContentAt: startingPoint + (0@1) ) equals: playableCharacter.
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:25:12'!
test19RoomShouldNotContainTakenElement

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #South room: aRoom .
	playableCharacter moveBackward .

	self assert: (aRoom cellContentAt: startingPoint ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 
	self assert: (aRoom cellContentAt: startingPoint + (0@1) ) equals: playableCharacter.

	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:26:05' prior: 50873523!
test19RoomShouldNotContainTakenElement

	| playableCharacter startingPoint aRoom paper |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South room: aRoom .
	
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	playableCharacter take: paper.

	self assert: (aRoom cellContentAt: startingPoint ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 
	self assert: (aRoom cellContentAt: startingPoint + (0@1) ) equals: playableCharacter.

	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:26:16' prior: 50873542!
test19RoomShouldNotContainTakenElement

	| playableCharacter aRoom paper |

	aRoom := self defaultRoom.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South room: aRoom .
	
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	playableCharacter take: paper.


	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:26:34' prior: 50873433!
test17RoomShouldContainPlayerWhenItMovesForward

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #North room: aRoom .
	playableCharacter moveForward.

	self assert: (aRoom cellContentAt: startingPoint ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 
	self assert: (aRoom cellContentAt: startingPoint + (0@1) ) equals: playableCharacter.

	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:26:38' prior: 50873452!
test18RoomShouldContainPlayerWhenItMovesBackwards

	| playableCharacter startingPoint aRoom |

	startingPoint := 0@0.
	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: startingPoint heading: #South room: aRoom .
	playableCharacter moveBackward .

	self assert: (aRoom cellContentAt: startingPoint ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 
	self assert: (aRoom cellContentAt: startingPoint + (0@1) ) equals: playableCharacter.

	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:26:41' prior: 50873562!
test19RoomShouldNotContainTakenElement

	| playableCharacter aRoom paper |

	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South room: aRoom .
	
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	playableCharacter take: paper.


	 ! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test16_shouldNotGoForwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test08ShouldNotPlaceAnObjectAtNegativeY stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test09ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test10ShouldNotPlaceAnObjectBeyondMaxHeight stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test13 stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test14 stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test16RoomShouldContainPlayer stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test17RoomShouldContainPlayerWhenItMovesForward stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test18RoomShouldContainPlayerWhenItMovesBackwards stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!

!testRun: #RoomTest #test19RoomShouldNotContainTakenElement stamp: 'NNH 12/10/2020 21:26:44'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:27:52' prior: 50873615!
test19RoomShouldNotContainTakenElement

	| playableCharacter aRoom paper |

	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North room: aRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	aRoom place: paper at: 0@1. 
	
	playableCharacter take: paper.

	

	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:28:42' prior: 50873812!
test19RoomShouldNotContainTakenElement

	| playableCharacter aRoom paper |

	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North room: aRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	aRoom place: paper at: 0@1. 
	
	playableCharacter take: paper.
	
	self assert: (aRoom cellContentAt: 0@1 ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 

	

	 ! !

!testRun: #RoomTest #test19RoomShouldNotContainTakenElement stamp: 'NNH 12/10/2020 21:28:54'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 21:30:15'!
test18_shouldTakeElementInFrontOfPlayer

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North room: self defaultRoom .

	self should: [ playableCharacter moveBackward ]
	raise: Error
	withMessageText: PlayableCharacter cannotMoveOutsideRoomBoundariesErrorDescription.
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 21:30:26' prior: 50873848!
test18_shouldTakeElementInFrontOfPlayer

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: self defaultRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 21:31:05' prior: 50873862!
test18_shouldTakeElementInFrontOfPlayer

	| playableCharacter paper aRoom |


	aRoom := self defaultRoom .
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West room: aRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'NNH 12/10/2020 21:31:47' prior: 50873877!
test18_shouldTakeElementInFrontOfPlayer

	| playableCharacter paper aRoom |


	aRoom := self defaultRoom .
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #North room: aRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	aRoom place: paper at: 2@3. 
	
	playableCharacter takeElementInFront.
	
	self assert: (playableCharacter backpackIncludes: paper)
! !

!testRun: #PlayableCharacterTest #test18_shouldTakeElementInFrontOfPlayer stamp: 'NNH 12/10/2020 21:31:49'!
ERROR!
!PlayableCharacter methodsFor: 'taking' stamp: 'NNH 12/10/2020 21:32:10'!
takeElementInFront
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'taking' stamp: 'NNH 12/10/2020 21:32:55' prior: 50873913!
takeElementInFront
	
	self take: ( room cellContentAt: position + heading forwardPoint )! !

!testRun: #PlayableCharacterTest #test18_shouldTakeElementInFrontOfPlayer stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test16_shouldNotGoForwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test18_shouldTakeElementInFrontOfPlayer stamp: 'NNH 12/10/2020 21:32:57'!
PASSED!

!testRun: #PlayableCharacterTest #test18_shouldTakeElementInFrontOfPlayer stamp: 'NNH 12/10/2020 21:33:04'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:33:20' prior: 50873827!
test19RoomShouldNotContainTakenElement

	| playableCharacter aRoom paper |

	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North room: aRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	aRoom place: paper at: 0@1. 
	
	playableCharacter takeElementInFront.
	
	self assert: (aRoom cellContentAt: 0@1 ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 

	

	 ! !

!testRun: #RoomTest #test19RoomShouldNotContainTakenElement stamp: 'NNH 12/10/2020 21:33:24'!
FAILURE!
!PlayableCharacter methodsFor: 'taking' stamp: 'NNH 12/10/2020 21:34:43' prior: 50873918!
takeElementInFront
	
	| positionInFront |
	positionInFront := position + heading forwardPoint.
	self take: ( room cellContentAt: positionInFront ).
	room removeObjectAt: positionInFront. ! !
!PlayableCharacter methodsFor: 'taking' stamp: 'NNH 12/10/2020 21:35:10' prior: 50874024!
takeElementInFront
	
	| positionInFront |
	
	positionInFront := position + heading forwardPoint.
	self take: ( room cellContentAt: positionInFront ).
	room removeObjectAt: positionInFront. ! !

!testRun: #RoomTest #test19RoomShouldNotContainTakenElement stamp: 'NNH 12/10/2020 21:35:16'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test16_shouldNotGoForwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #PlayableCharacterTest #test18_shouldTakeElementInFrontOfPlayer stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test08ShouldNotPlaceAnObjectAtNegativeY stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test09ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test10ShouldNotPlaceAnObjectBeyondMaxHeight stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test13 stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test14 stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test15 stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test16RoomShouldContainPlayer stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test17RoomShouldContainPlayerWhenItMovesForward stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test18RoomShouldContainPlayerWhenItMovesBackwards stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!

!testRun: #RoomTest #test19RoomShouldNotContainTakenElement stamp: 'NNH 12/10/2020 21:35:19'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:35:41'!
test19RoomShouldNotContainTakenPortableObject

	| playableCharacter aRoom paper |

	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North room: aRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	aRoom place: paper at: 0@1. 
	
	playableCharacter takeElementInFront.
	
	self assert: (aRoom cellContentAt: 0@1 ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 

	

	 ! !

!methodRemoval: RoomTest #test19RoomShouldNotContainTakenElement stamp: 'NNH 12/10/2020 21:35:41'!
test19RoomShouldNotContainTakenElement

	| playableCharacter aRoom paper |

	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North room: aRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	aRoom place: paper at: 0@1. 
	
	playableCharacter takeElementInFront.
	
	self assert: (aRoom cellContentAt: 0@1 ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 

	

	 !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:36:08'!
test13CellHasNothingOnEmptyCell
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
		
	self assert: ( aRoom cellContentAt: 0@0 ifNothing: [ 'Nothing' ] ) equals: 'Nothing'.
	
	 ! !

!methodRemoval: RoomTest #test13 stamp: 'NNH 12/10/2020 21:36:08'!
test13
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
		
	self assert: ( aRoom cellContentAt: 0@0 ifNothing: [ 'Nothing' ] ) equals: 'Nothing'.
	
	 !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:36:45'!
test14CellRetrievesContentOnNonEmptyCell
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	aRoom place: 'Scarf' at: 0@0.
	
	self assert: ( aRoom cellContentAt: 0@0 ifNothing: [ 'Nothing' ] ) equals: 'Scarf'.
	
	 ! !

!methodRemoval: RoomTest #test14 stamp: 'NNH 12/10/2020 21:36:45'!
test14
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	aRoom place: 'Scarf' at: 0@0.
	
	self assert: ( aRoom cellContentAt: 0@0 ifNothing: [ 'Nothing' ] ) equals: 'Scarf'.
	
	 !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:37:02'!
test15ShouldNotRemoveEmptyCell
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom removeObjectAt: 0@0 ]
	raise: Error
	withMessageText: Room cannotRemoveEmptyCellErrorDescription.
	
	 ! !

!methodRemoval: RoomTest #test15 stamp: 'NNH 12/10/2020 21:37:02'!
test15
	
	| aRoom |
	
	aRoom := Room forWidth: 10 height: 10.
	
	self should: [ aRoom removeObjectAt: 0@0 ]
	raise: Error
	withMessageText: Room cannotRemoveEmptyCellErrorDescription.
	
	 !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:37:35'!
test20RoomShouldContainTakenNonPortableObject

	| playableCharacter aRoom paper |

	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North room: aRoom .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	aRoom place: paper at: 0@1. 
	
	playableCharacter takeElementInFront.
	
	self assert: (aRoom cellContentAt: 0@1 ifNothing: [ 'Nothing' ] ) equals: 'Nothing'. 

	

	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:38:36' prior: 50874318!
test20RoomShouldContainTakenNonPortableObject

	| playableCharacter aRoom paper box |

	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North room: aRoom .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: paper ).
	aRoom place: box at: 0@1. 
	
	playableCharacter takeElementInFront.
	
	self assert: (aRoom cellContentAt: 0@1 ifNothing: [ 'Nothing' ] ) equals: box. 

	

	 ! !

!testRun: #RoomTest #test20RoomShouldContainTakenNonPortableObject stamp: 'NNH 12/10/2020 21:38:40'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:42:48' prior: 50874336!
test20RoomShouldContainTakenNonPortableObject

	| playableCharacter aRoom paper box |

	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North room: aRoom .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: paper ).
	aRoom place: box at: 0@1. 
	
	playableCharacter takeElementInFront.
	
	"self assert: (aRoom cellContentAt: 0@1 ifNothing: [ 'Nothing' ] ) equals: box. "

	

	 ! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test16_shouldNotGoForwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #PlayableCharacterTest #test18_shouldTakeElementInFrontOfPlayer stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test08ShouldNotPlaceAnObjectAtNegativeY stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test09ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test10ShouldNotPlaceAnObjectBeyondMaxHeight stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test13CellHasNothingOnEmptyCell stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test14CellRetrievesContentOnNonEmptyCell stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test15ShouldNotRemoveEmptyCell stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test16RoomShouldContainPlayer stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test17RoomShouldContainPlayerWhenItMovesForward stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test18RoomShouldContainPlayerWhenItMovesBackwards stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test19RoomShouldNotContainTakenPortableObject stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!

!testRun: #RoomTest #test20RoomShouldContainTakenNonPortableObject stamp: 'NNH 12/10/2020 21:42:51'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:42:57' prior: 50874361!
test20RoomShouldContainTakenNonPortableObject

	| playableCharacter aRoom paper box |

	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North room: aRoom .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: paper ).
	aRoom place: box at: 0@1. 
	
	playableCharacter takeElementInFront.
	
	self assert: (aRoom cellContentAt: 0@1 ifNothing: [ 'Nothing' ] ) equals: box.

	

	 ! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'NNH 12/10/2020 21:46:59' prior: 50874033!
takeElementInFront
	
	| elementInFront |
	
	elementInFront := room cellContentAt: (position + heading forwardPoint).
	self take: elementInFront.
	elementInFront removeFromRoom: room.! !
!NonPortableObject methodsFor: 'nil' stamp: 'NNH 12/10/2020 21:47:39'!
removeFromRoom: aRoom
	aRoom ! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'NNH 12/10/2020 21:48:28' prior: 50874596!
takeElementInFront
	
	| elementInFront positionInFront |
	
	positionInFront := position + heading forwardPoint.
	elementInFront := room cellContentAt: positionInFront.
	self take: elementInFront.
	elementInFront removeFromRoom: room atPosition: positionInFront.
	elementInFront emptyContents.! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:48:51'!
removeFromRoom: aRoom atPosition: aPosition
! !
!PortableObject methodsFor: 'nil' stamp: 'NNH 12/10/2020 21:49:24'!
removeFromRoom: aRoom atPosition: aPosition
	
	aRoom removeObjectAt: aPosition.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test16_shouldNotGoForwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #PlayableCharacterTest #test18_shouldTakeElementInFrontOfPlayer stamp: 'NNH 12/10/2020 21:49:27'!
ERROR!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test08ShouldNotPlaceAnObjectAtNegativeY stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test09ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test10ShouldNotPlaceAnObjectBeyondMaxHeight stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test13CellHasNothingOnEmptyCell stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test14CellRetrievesContentOnNonEmptyCell stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test15ShouldNotRemoveEmptyCell stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test16RoomShouldContainPlayer stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test17RoomShouldContainPlayerWhenItMovesForward stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test18RoomShouldContainPlayerWhenItMovesBackwards stamp: 'NNH 12/10/2020 21:49:27'!
PASSED!

!testRun: #RoomTest #test19RoomShouldNotContainTakenPortableObject stamp: 'NNH 12/10/2020 21:49:27'!
ERROR!

!testRun: #RoomTest #test20RoomShouldContainTakenNonPortableObject stamp: 'NNH 12/10/2020 21:49:27'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:49:58'!
emptyContents
! !
!PortableObject methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:50:10'!
emptyContents
	! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test16_shouldNotGoForwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #PlayableCharacterTest #test18_shouldTakeElementInFrontOfPlayer stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test08ShouldNotPlaceAnObjectAtNegativeY stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test09ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test10ShouldNotPlaceAnObjectBeyondMaxHeight stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test13CellHasNothingOnEmptyCell stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test14CellRetrievesContentOnNonEmptyCell stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test15ShouldNotRemoveEmptyCell stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test16RoomShouldContainPlayer stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test17RoomShouldContainPlayerWhenItMovesForward stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test18RoomShouldContainPlayerWhenItMovesBackwards stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test19RoomShouldNotContainTakenPortableObject stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!

!testRun: #RoomTest #test20RoomShouldContainTakenNonPortableObject stamp: 'NNH 12/10/2020 21:50:15'!
PASSED!
!NonPortableObject methodsFor: 'accessing' stamp: 'NNH 12/10/2020 21:51:24'!
elements
	
	^ elements .! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:51:44' prior: 50874575!
test20RoomShouldContainTakenNonPortableObject

	| playableCharacter aRoom paper box |

	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North room: aRoom .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: paper ).
	aRoom place: box at: 0@1. 
	
	playableCharacter takeElementInFront.
	
	self assert: (aRoom cellContentAt: 0@1 ifNothing: [ 'Nothing' ] ) equals: box.
	self assert: box elements isEmpty.

	

	 ! !

!testRun: #RoomTest #test20RoomShouldContainTakenNonPortableObject stamp: 'NNH 12/10/2020 21:51:46'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:51:53' prior: 50875028!
test20RoomShouldContainTakenNonPortableObject

	| playableCharacter aRoom paper box |

	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North room: aRoom .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: paper ).
	aRoom place: box at: 0@1. 
	
	playableCharacter takeElementInFront.
	
	self assert: (aRoom cellContentAt: 0@1 ifNothing: [ 'Nothing' ] ) equals: box.
	self assert: box elements size = 1.

	

	 ! !

!testRun: #RoomTest #test20RoomShouldContainTakenNonPortableObject stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test08ShouldNotPlaceAnObjectAtNegativeY stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test09ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test10ShouldNotPlaceAnObjectBeyondMaxHeight stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test13CellHasNothingOnEmptyCell stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test14CellRetrievesContentOnNonEmptyCell stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test15ShouldNotRemoveEmptyCell stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test16RoomShouldContainPlayer stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test17RoomShouldContainPlayerWhenItMovesForward stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test18RoomShouldContainPlayerWhenItMovesBackwards stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test19RoomShouldNotContainTakenPortableObject stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!

!testRun: #RoomTest #test20RoomShouldContainTakenNonPortableObject stamp: 'NNH 12/10/2020 21:51:55'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:52:01' prior: 50875054!
test20RoomShouldContainTakenNonPortableObject

	| playableCharacter aRoom paper box |

	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North room: aRoom .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: paper ).
	aRoom place: box at: 0@1. 
	
	playableCharacter takeElementInFront.
	
	self assert: (aRoom cellContentAt: 0@1 ifNothing: [ 'Nothing' ] ) equals: box.
	self assert: box elements isEmpty .

	

	 ! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:53:17' prior: 50874824!
emptyContents

	elements do: [:anElement | anElement emptyContents ].! !

!classDefinition: #PortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'NNH 12/10/2020 21:53:53'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PortableObject methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:53:51' prior: 50874828!
emptyContents
	
	parent removeElement: self.! !
!PortableObject methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:56:39' prior: 50875183!
emptyContents
	
	"Aqui tengo que eliminarme del Non portable Object que me contiene, si hay tal, pero no tuve tiempo para implementarlo :("
	
	parent removeElement: self.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test16_shouldNotGoForwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #PlayableCharacterTest #test18_shouldTakeElementInFrontOfPlayer stamp: 'NNH 12/10/2020 21:56:42'!
ERROR!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test08ShouldNotPlaceAnObjectAtNegativeY stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test09ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test10ShouldNotPlaceAnObjectBeyondMaxHeight stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test13CellHasNothingOnEmptyCell stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test14CellRetrievesContentOnNonEmptyCell stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test15ShouldNotRemoveEmptyCell stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test16RoomShouldContainPlayer stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test17RoomShouldContainPlayerWhenItMovesForward stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test18RoomShouldContainPlayerWhenItMovesBackwards stamp: 'NNH 12/10/2020 21:56:42'!
PASSED!

!testRun: #RoomTest #test19RoomShouldNotContainTakenPortableObject stamp: 'NNH 12/10/2020 21:56:42'!
ERROR!

!testRun: #RoomTest #test20RoomShouldContainTakenNonPortableObject stamp: 'NNH 12/10/2020 21:56:42'!
ERROR!
!PortableObject methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:56:51' prior: 50875188!
emptyContents
	
	"Aqui tengo que eliminarme del Non portable Object que me contiene, si hay tal, pero no tuve tiempo para implementarlo :("
	
	! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test16_shouldNotGoForwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #PlayableCharacterTest #test18_shouldTakeElementInFrontOfPlayer stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test08ShouldNotPlaceAnObjectAtNegativeY stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test09ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test10ShouldNotPlaceAnObjectBeyondMaxHeight stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test13CellHasNothingOnEmptyCell stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test14CellRetrievesContentOnNonEmptyCell stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test15ShouldNotRemoveEmptyCell stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test16RoomShouldContainPlayer stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test17RoomShouldContainPlayerWhenItMovesForward stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test18RoomShouldContainPlayerWhenItMovesBackwards stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test19RoomShouldNotContainTakenPortableObject stamp: 'NNH 12/10/2020 21:56:53'!
PASSED!

!testRun: #RoomTest #test20RoomShouldContainTakenNonPortableObject stamp: 'NNH 12/10/2020 21:56:53'!
FAILURE!

!testRun: #RoomTest #test20RoomShouldContainTakenNonPortableObject stamp: 'NNH 12/10/2020 21:56:53'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'NNH 12/10/2020 21:57:03' prior: 50875146!
test20RoomShouldContainTakenNonPortableObject

	| playableCharacter aRoom paper box |

	aRoom := Room forWidth: 10 height: 10.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North room: aRoom .
	paper := PointsPortableObject named: 'Paper' weighing: 10 worth: 10. 
	box := NonPortableObject named: 'Box' containing: ( OrderedCollection with: paper ).
	aRoom place: box at: 0@1. 
	
	playableCharacter takeElementInFront.
	
	self assert: (aRoom cellContentAt: 0@1 ifNothing: [ 'Nothing' ] ) equals: box.
	

	

	 ! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test11_canTakeEmptyNonPortableObjectContents stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test12_canTakeContentsOfNonPortableObjectWithOneElement stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test13_canTakeContentsOfNonPortableObjectWithManyElements stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test14_canTakeContentsOfNonPortableObjectContainingNonPortableObjects stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test15_cannotTakeNonPortableWithContentsExceedingBackpackWeight stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test16_shouldNotGoForwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test17_shouldNotGoBackwardBeyondRoomBoundaries stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #PlayableCharacterTest #test18_shouldTakeElementInFrontOfPlayer stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test01RoomShouldHaveImmutableWidthAndHeight stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test02RoomShouldNotHaveNonPositiveWidth stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test03RoomShouldNotHaveNonPositiveHeight stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test04RoomShouldNotHaveNonIntegerWidth stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test05RoomShouldNotHaveNonIntegerHeight stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test06RoomCellsShouldContainOneObjectPlaced stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test07ShouldNotPlaceAnObjectAtNegativeX stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test08ShouldNotPlaceAnObjectAtNegativeY stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test09ShouldNotPlaceAnObjectBeyondMaxWidth stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test10ShouldNotPlaceAnObjectBeyondMaxHeight stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test11RoomCellsShouldContainMoreThanOneObjectPlaced stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test12ShouldNotPlaceAnObjectOnOccupiedPosition stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test13CellHasNothingOnEmptyCell stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test14CellRetrievesContentOnNonEmptyCell stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test15ShouldNotRemoveEmptyCell stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test16RoomShouldContainPlayer stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test17RoomShouldContainPlayerWhenItMovesForward stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test18RoomShouldContainPlayerWhenItMovesBackwards stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test19RoomShouldNotContainTakenPortableObject stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

!testRun: #RoomTest #test20RoomShouldContainTakenNonPortableObject stamp: 'NNH 12/10/2020 21:57:05'!
PASSED!

----SNAPSHOT----(10 December 2020 21:57:18) CuisUniversity-4384.image priorSource: 17204112!

----QUIT----(10 December 2020 21:57:22) CuisUniversity-4384.image priorSource: 17412967!