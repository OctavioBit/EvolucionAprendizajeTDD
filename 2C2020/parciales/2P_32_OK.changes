

----SNAPSHOT----(10 December 2020 17:08:46) Parcial2.image priorSource: 17803270!

----SNAPSHOT----(10 December 2020 17:24:40) Parcial2.image priorSource: 17831176!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 17:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 17:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 17:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 17:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 17:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 17:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 17:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 17:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 17:27:47'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 17:27:47'!
PASSED!

Object subclass: #Room
	instanceVariableNames: 'character objectsLocation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'AS 12/10/2020 17:34:02'!
Object subclass: #Room
	instanceVariableNames: 'character objectsLocation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

TestCase subclass: #RoomTests
	instanceVariableNames: 'character objectsLocation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTests category: #'ISW1-2020-2C-2doParcial' stamp: 'AS 12/10/2020 17:34:27'!
TestCase subclass: #RoomTests
	instanceVariableNames: 'character objectsLocation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTests methodsFor: 'no messages' stamp: 'AS 12/10/2020 17:34:35'!
test01
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 17:36:14' prior: 50888945!
test01
|room|

room := Room withMaxPosition: 5@5.
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 17:38:42' prior: 50888949!
test01
|room|

room := Room withMaxPosition: 5@5.

self assert: room insideLimitsPositionIs: 4@5
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 17:39:07'!
test02
|room|

room := Room withMaxPosition: 5@5.

self assert: room insideLimitsPositionIs: 1@1
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 17:39:12' prior: 50888954!
test01
|room|

room := Room withMaxPosition: 5@5.

self assert: room insideLimitsPositionIs: 5@5
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 17:39:47'!
test03
|room|

room := Room withMaxPosition: 5@5.

self deny: (room insideLimitsPositionIs: 0@1).
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 17:39:53' prior: 50888960!
test02
|room|

room := Room withMaxPosition: 5@5.

self assert: (room insideLimitsPositionIs: 1@1)
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 17:39:58' prior: 50888967!
test01
|room|

room := Room withMaxPosition: 5@5.

self assert: (room insideLimitsPositionIs: 5@5)
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 17:40:12'!
test04
|room|

room := Room withMaxPosition: 5@5.

self deny: (room insideLimitsPositionIs: 1@0).
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 17:40:19'!
test05
|room|

room := Room withMaxPosition: 5@5.

self deny: (room insideLimitsPositionIs: 6@5).
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 17:40:28'!
test06
|room|

room := Room withMaxPosition: 5@5.

self deny: (room insideLimitsPositionIs: 5@6).
! !

!testRun: #RoomTests #test01 stamp: 'AS 12/10/2020 17:41:05'!
ERROR!

!testRun: #RoomTests #test01 stamp: 'AS 12/10/2020 17:41:05'!
ERROR!

!testRun: #RoomTests #test01 stamp: 'AS 12/10/2020 17:41:05'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'AS 12/10/2020 17:41:29'!
withMaxPosition: aPoint 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithMaxPosition: aPoint ! !
!Room class methodsFor: 'instance creation' stamp: 'AS 12/10/2020 17:42:04' prior: 50889018!
withMaxPosition: aPoint 
	^self new initializeWithMaxPosition: aPoint ! !

!testRun: #RoomTests #test01 stamp: 'AS 12/10/2020 17:42:09'!
ERROR!

!testRun: #RoomTests #test01 stamp: 'AS 12/10/2020 17:42:09'!
ERROR!

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'AS 12/10/2020 17:42:22'!
Object subclass: #Room
	instanceVariableNames: 'character objectsLocation point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'AS 12/10/2020 17:42:22'!
initializeWithMaxPosition: aPoint 
	self shouldBeImplemented.
	point := aPoint.! !

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'AS 12/10/2020 17:42:46'!
Object subclass: #Room
	instanceVariableNames: 'character objectsLocation point maxLimit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'AS 12/10/2020 17:42:44' prior: 50889044!
initializeWithMaxPosition: aPoint 
	maxLimit := aPoint.! !

Object subclass: #Room
	instanceVariableNames: 'character objectsLocation maxLimit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: #'ISW1-2020-2C-2doParcial' stamp: 'AS 12/10/2020 17:42:58'!
Object subclass: #Room
	instanceVariableNames: 'character objectsLocation maxLimit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!testRun: #RoomTests #test01 stamp: 'AS 12/10/2020 17:43:12'!
ERROR!

!testRun: #RoomTests #test01 stamp: 'AS 12/10/2020 17:43:12'!
ERROR!

!testRun: #RoomTests #test01 stamp: 'AS 12/10/2020 17:43:12'!
ERROR!
!Room methodsFor: 'fulfill conditions' stamp: 'AS 12/10/2020 17:44:16'!
insideLimitsPositionIs: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'fulfill conditions' stamp: 'AS 12/10/2020 17:45:14' prior: 50889083!
insideLimitsPositionIs: aPoint 
! !
!Room methodsFor: 'fulfill conditions' stamp: 'AS 12/10/2020 17:45:36' prior: 50889088!
insideLimitsPositionIs: aPoint 
	^aPoint x < maxLimit x
! !

!testRun: #RoomTests #test01 stamp: 'AS 12/10/2020 17:45:41'!
FAILURE!

!testRun: #RoomTests #test01 stamp: 'AS 12/10/2020 17:45:41'!
FAILURE!

!testRun: #RoomTests #test01 stamp: 'AS 12/10/2020 17:45:41'!
ERROR!

!testRun: #RoomTests #test02 stamp: 'AS 12/10/2020 17:45:47'!
PASSED!
!Room methodsFor: 'fulfill conditions' stamp: 'AS 12/10/2020 17:45:55' prior: 50889092!
insideLimitsPositionIs: aPoint 
	^aPoint x <= maxLimit x
! !

!testRun: #RoomTests #test01 stamp: 'AS 12/10/2020 17:45:58'!
PASSED!

!testRun: #RoomTests #test02 stamp: 'AS 12/10/2020 17:46:00'!
PASSED!
!Room methodsFor: 'fulfill conditions' stamp: 'AS 12/10/2020 17:47:03' prior: 50889106!
insideLimitsPositionIs: aPoint 
	^(aPoint x <= maxLimit x) and: (aPoint y <= maxLimit y) and: (aPoint y > 0) and: (aPoint y > 0).
! !

!testRun: #RoomTests #test01 stamp: 'AS 12/10/2020 17:47:07'!
PASSED!

!testRun: #RoomTests #test02 stamp: 'AS 12/10/2020 17:47:07'!
PASSED!

!testRun: #RoomTests #test03 stamp: 'AS 12/10/2020 17:47:07'!
FAILURE!

!testRun: #RoomTests #test04 stamp: 'AS 12/10/2020 17:47:07'!
PASSED!

!testRun: #RoomTests #test05 stamp: 'AS 12/10/2020 17:47:07'!
PASSED!

!testRun: #RoomTests #test06 stamp: 'AS 12/10/2020 17:47:07'!
PASSED!

!testRun: #RoomTests #test03 stamp: 'AS 12/10/2020 17:47:07'!
FAILURE!

!testRun: #RoomTests #test03 stamp: 'AS 12/10/2020 17:47:07'!
ERROR!

!testRun: #RoomTests #test01 stamp: 'AS 12/10/2020 17:47:10'!
PASSED!

!testRun: #RoomTests #test02 stamp: 'AS 12/10/2020 17:47:14'!
PASSED!

!testRun: #RoomTests #test03 stamp: 'AS 12/10/2020 17:47:16'!
FAILURE!

!testRun: #RoomTests #test03 stamp: 'AS 12/10/2020 17:47:16'!
FAILURE!

!testRun: #RoomTests #test03 stamp: 'AS 12/10/2020 17:47:16'!
ERROR!
!Room methodsFor: 'fulfill conditions' stamp: 'AS 12/10/2020 17:47:37' prior: 50889116!
insideLimitsPositionIs: aPoint 
	^(aPoint x <= maxLimit x) and: (aPoint y <= maxLimit y) and: (aPoint x > 0) and: (aPoint y > 0).
! !

!testRun: #RoomTests #test01 stamp: 'AS 12/10/2020 17:47:40'!
PASSED!

!testRun: #RoomTests #test02 stamp: 'AS 12/10/2020 17:47:40'!
PASSED!

!testRun: #RoomTests #test03 stamp: 'AS 12/10/2020 17:47:40'!
PASSED!

!testRun: #RoomTests #test04 stamp: 'AS 12/10/2020 17:47:40'!
PASSED!

!testRun: #RoomTests #test05 stamp: 'AS 12/10/2020 17:47:40'!
PASSED!

!testRun: #RoomTests #test06 stamp: 'AS 12/10/2020 17:47:40'!
PASSED!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 17:50:51' prior: 50889005!
test06
|room|

room := Room withMaxPosition: 5@5.



self deny: (room insideLimitsPositionIs: 5@6).
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 17:53:05'!
test07
|room|

room := Room withMaxPosition: 5@5.




! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'AS 12/10/2020 17:53:41'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'AS 12/10/2020 17:53:41'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'AS 12/10/2020 17:53:41'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'AS 12/10/2020 17:53:41'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'AS 12/10/2020 17:53:41'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'AS 12/10/2020 17:53:41'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'AS 12/10/2020 17:53:41'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'AS 12/10/2020 17:53:42'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'AS 12/10/2020 17:53:42'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'AS 12/10/2020 17:53:42'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'AS 12/10/2020 17:53:42'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'AS 12/10/2020 17:53:42'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'AS 12/10/2020 17:53:42'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'AS 12/10/2020 17:53:42'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'AS 12/10/2020 17:53:42'!
PASSED!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 17:54:17' prior: 50889179!
test07
|room|

room := Room withMaxPosition: 5@5.
"
self should: [room  addObject: ]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals:  ]


"

! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 17:59:25' prior: 50889239!
test07
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

self should: [room  addObject: anObject at:  6@5]
	raise: Error withExceptionDo: [ :anError |
			self assert: (anError messageText equals: (Room outsideBoundsError)).
			self deny: (room isObjectAt: 6@5).
			 ].
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 17:59:43' prior: 50889248!
test07
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

self should: [room  addObject: anObject at:  6@5]
	raise: Error withExceptionDo: [ :anError |
			self assert: (anError messageText = (Room outsideBoundsError)).
			self deny: (room isObjectAt: 6@5).
			 ].
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:00:23' prior: 50889263!
test07
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

self should: [room  addObject: anObject at:  6@5]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError).
			self deny: (room isObjectAt: 6@5).
			 ].
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:01:27'!
test08
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  4@5.
self assert: (room isObjectAt: 4@5).
		
		



! !

!testRun: #RoomTests #test07 stamp: 'AS 12/10/2020 18:02:27'!
ERROR!

!testRun: #RoomTests #test07 stamp: 'AS 12/10/2020 18:02:27'!
ERROR!

!testRun: #RoomTests #test07 stamp: 'AS 12/10/2020 18:02:27'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'AS 12/10/2020 18:02:52'!
outsideBoundsError
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'AS 12/10/2020 18:03:23' prior: 50889309!
outsideBoundsError
	^'position outside of bounds of the room'! !

!testRun: #RoomTests #test07 stamp: 'AS 12/10/2020 18:03:28'!
FAILURE!

!testRun: #RoomTests #test07 stamp: 'AS 12/10/2020 18:03:28'!
FAILURE!

!testRun: #RoomTests #test07 stamp: 'AS 12/10/2020 18:03:28'!
ERROR!
!Room methodsFor: 'fulfill conditions' stamp: 'AS 12/10/2020 18:04:47'!
addObject: anObject at:  aPoint 
	
! !
!Room methodsFor: 'fulfill conditions' stamp: 'AS 12/10/2020 18:06:27'!
assertInsideLimitsPositionIs: aPoint 
	(self insideLimitsPositionIs: aPoint) ifFalse:[self error: self class outsideBoundsError ]
! !
!Room methodsFor: 'fulfill conditions' stamp: 'AS 12/10/2020 18:06:30' prior: 50889329!
assertInsideLimitsPositionIs: aPoint 
	(self insideLimitsPositionIs: aPoint) ifFalse:[self error: self class outsideBoundsError ].
! !
!Room methodsFor: 'addingObjects' stamp: 'AS 12/10/2020 18:07:09' prior: 50889325!
addObject: anObject at:  aPoint 

	self assertInsideLimitsPositionIs: aPoint .
	
	
! !

!testRun: #RoomTests #test08 stamp: 'AS 12/10/2020 18:07:13'!
ERROR!

!testRun: #RoomTests #test07 stamp: 'AS 12/10/2020 18:07:13'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'AS 12/10/2020 18:07:51' prior: 50889058!
initializeWithMaxPosition: aPoint 
	maxLimit := aPoint.
	objectsLocation := Dictionary new.! !
!Room methodsFor: 'addingObjects' stamp: 'AS 12/10/2020 18:08:29' prior: 50889343!
addObject: anObject at:  aPoint 

	self assertInsideLimitsPositionIs: aPoint .
	
	objectsLocation at: aPoint put: anObject .
	
	
! !

!testRun: #RoomTests #test07 stamp: 'AS 12/10/2020 18:08:32'!
ERROR!

!testRun: #RoomTests #test07 stamp: 'AS 12/10/2020 18:08:32'!
ERROR!

!testRun: #RoomTests #test07 stamp: 'AS 12/10/2020 18:08:32'!
ERROR!

!testRun: #RoomTests #test07 stamp: 'AS 12/10/2020 18:08:40'!
ERROR!

!testRun: #RoomTests #test07 stamp: 'AS 12/10/2020 18:08:40'!
ERROR!

!testRun: #RoomTests #test07 stamp: 'AS 12/10/2020 18:08:40'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:08:50'!
isObjectAt: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:09:44' prior: 50889379!
isObjectAt: aPoint 
	^objectsLocation  includesKey: aPoint .! !

!testRun: #RoomTests #test07 stamp: 'AS 12/10/2020 18:09:47'!
PASSED!

!testRun: #RoomTests #test08 stamp: 'AS 12/10/2020 18:09:49'!
PASSED!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:14:09' prior: 50889278!
test07
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

self should: [room  addObject: anObject at:  6@5]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError).
			self deny: (room isObjectAt: 6@5).
			 ].
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:14:58'!
test09
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  4@5.
self assert: (room objectAt: 4@5=anObject ).
		
		



! !

!testRun: #RoomTests #test09 stamp: 'AS 12/10/2020 18:15:01'!
ERROR!

!testRun: #RoomTests #test09 stamp: 'AS 12/10/2020 18:15:01'!
ERROR!

!testRun: #RoomTests #test09 stamp: 'AS 12/10/2020 18:15:01'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:15:10'!
objectAt: aFalse 
	self shouldBeImplemented.! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:15:28' prior: 50889408!
test09
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  4@5.
self assert: ((room objectAt: 4@5)=anObject ).
		
		



! !
!Room methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:15:36' prior: 50889425!
objectAt: aPoint
	self shouldBeImplemented.! !
!Room methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:16:10' prior: 50889441!
objectAt: aPoint
	 ^objectsLocation at: aPoint .! !
!Room methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:16:42' prior: 50889446!
objectAt: aPoint
	self assertInsideLimitsPositionIs: aPoint.
	 ^objectsLocation at: aPoint .! !

!testRun: #RoomTests #test09 stamp: 'AS 12/10/2020 18:16:44'!
PASSED!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:17:16'!
test10PickingUpAnObjectRemovesIt
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  4@5.
self assert: ((room objectAt: 4@5)=anObject ).
		
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:18:52'!
test10removingAnObjectRemovesIt
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  4@5.
room  removeAt:  4@5.
self deny: (room isObjectAt: 4@5 ).
		
		



! !

!methodRemoval: RoomTests #test10PickingUpAnObjectRemovesIt stamp: 'AS 12/10/2020 18:18:59'!
test10PickingUpAnObjectRemovesIt
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  4@5.
self assert: ((room objectAt: 4@5)=anObject ).
		
		



!
!Room methodsFor: 'addingObjects' stamp: 'AS 12/10/2020 18:21:28'!
removeAt: aPoint
	self assertInsideLimitsPositionIs: aPoint .
	
	objectsLocation removeKey: aPoint ifAbsent: [self error: self class noObjectInPositionError] .
	
	
! !
!Room class methodsFor: 'error messages' stamp: 'AS 12/10/2020 18:21:51'!
noObjectInPositionError
	^'there is no object to remove in that position'! !

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 18:22:00'!
PASSED!

!testRun: #RoomTests #test10removingAnObjectRemovesIt stamp: 'AS 12/10/2020 18:22:06'!
PASSED!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:22:42'!
test11removingPoisitionWithoutObjectGivesError
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  4@5.
room  removeAt:  4@5.
self deny: (room isObjectAt: 4@5 ).
		
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:24:11' prior: 50889512!
test11removingPoisitionWithoutObjectGivesError
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  5@5.
self should: [room  removeAt:  4@5.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room noObjectInPositionError ).
			 ].
		
		



! !

!testRun: #RoomTests #test11removingPoisitionWithoutObjectGivesError stamp: 'AS 12/10/2020 18:24:12'!
PASSED!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:24:26' prior: 50889525!
test11removingPoisitionWithoutObjectGivesError
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  5@5.
self should: [room  removeAt:  5@5.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room noObjectInPositionError ).
			 ].
		
		



! !

!testRun: #RoomTests #test11removingPoisitionWithoutObjectGivesError stamp: 'AS 12/10/2020 18:24:27'!
FAILURE!

!testRun: #RoomTests #test11removingPoisitionWithoutObjectGivesError stamp: 'AS 12/10/2020 18:24:27'!
FAILURE!

!testRun: #RoomTests #test11removingPoisitionWithoutObjectGivesError stamp: 'AS 12/10/2020 18:24:27'!
ERROR!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:24:33' prior: 50889544!
test11removingPoisitionWithoutObjectGivesError
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  5@5.
self should: [room  removeAt:  4@5.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room noObjectInPositionError ).
			 ].
		
		



! !

----SNAPSHOT----(10 December 2020 18:27:12) Parcial2.image priorSource: 17831259!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:29:36'!
test01upperLightLimitIsDefinedCorrectly
|room|

room := Room withMaxPosition: 5@5.

self assert: (room insideLimitsPositionIs: 5@5)
! !

!methodRemoval: RoomTests #test01 stamp: 'AS 12/10/2020 18:29:36'!
test01
|room|

room := Room withMaxPosition: 5@5.

self assert: (room insideLimitsPositionIs: 5@5)
!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:30:26'!
test02bottomLeftLimitIsDefinedCorrectly
|room|

room := Room withMaxPosition: 5@5.

self assert: (room insideLimitsPositionIs: 1@1)
! !

!methodRemoval: RoomTests #test02 stamp: 'AS 12/10/2020 18:30:26'!
test02
|room|

room := Room withMaxPosition: 5@5.

self assert: (room insideLimitsPositionIs: 1@1)
!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:31:21'!
test03outsideOnLeftIsOutsideOfBounds
|room|

room := Room withMaxPosition: 5@5.

self deny: (room insideLimitsPositionIs: 0@1).
! !

!methodRemoval: RoomTests #test03 stamp: 'AS 12/10/2020 18:31:21'!
test03
|room|

room := Room withMaxPosition: 5@5.

self deny: (room insideLimitsPositionIs: 0@1).
!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:31:56'!
test04outsideOnBottomIsOutsideOfBounds
|room|

room := Room withMaxPosition: 5@5.

self deny: (room insideLimitsPositionIs: 1@0).
! !

!methodRemoval: RoomTests #test04 stamp: 'AS 12/10/2020 18:31:56'!
test04
|room|

room := Room withMaxPosition: 5@5.

self deny: (room insideLimitsPositionIs: 1@0).
!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:32:18'!
test05outsideOnTopIsOutsideOfBounds
|room|

room := Room withMaxPosition: 5@5.

self deny: (room insideLimitsPositionIs: 6@5).
! !

!methodRemoval: RoomTests #test05 stamp: 'AS 12/10/2020 18:32:18'!
test05
|room|

room := Room withMaxPosition: 5@5.

self deny: (room insideLimitsPositionIs: 6@5).
!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:32:37' prior: 50889612!
test03outsideOnLeftIsOutsideOfBounds
|room|

room := Room withMaxPosition: 5@5.

self deny: (room insideLimitsPositionIs: 1@0).
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:32:43' prior: 50889624!
test04outsideOnBottomIsOutsideOfBounds
|room|

room := Room withMaxPosition: 5@5.

self deny: (room insideLimitsPositionIs: 0@1).
! !

!testRun: #RoomTests #test04outsideOnBottomIsOutsideOfBounds stamp: 'AS 12/10/2020 18:32:46'!
PASSED!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:33:06'!
test06outsideOnRightIsOutsideOfBounds
|room|

room := Room withMaxPosition: 5@5.



self deny: (room insideLimitsPositionIs: 5@6).
! !

!methodRemoval: RoomTests #test06 stamp: 'AS 12/10/2020 18:33:06'!
test06
|room|

room := Room withMaxPosition: 5@5.



self deny: (room insideLimitsPositionIs: 5@6).
!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:33:38'!
test07cannotAddObjectOutsideOfBounds
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

self should: [room  addObject: anObject at:  6@5]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError).
			self deny: (room isObjectAt: 6@5).
			 ].
		



! !

!methodRemoval: RoomTests #test07 stamp: 'AS 12/10/2020 18:33:38'!
test07
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

self should: [room  addObject: anObject at:  6@5]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError).
			self deny: (room isObjectAt: 6@5).
			 ].
		



!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:33:57'!
test08canAddObjectInsideOfBounds
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  4@5.
self assert: (room isObjectAt: 4@5).
		
		



! !

!methodRemoval: RoomTests #test08 stamp: 'AS 12/10/2020 18:33:57'!
test08
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  4@5.
self assert: (room isObjectAt: 4@5).
		
		



!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:34:31'!
test09objectFinallyAddedIsTheOneThatWasAdded
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  4@5.
self assert: ((room objectAt: 4@5)=anObject ).
		
		



! !

!methodRemoval: RoomTests #test09 stamp: 'AS 12/10/2020 18:34:31'!
test09
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  4@5.
self assert: ((room objectAt: 4@5)=anObject ).
		
		



!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:35:03'!
test12cannotAddObjectInNotAbailableLocation
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

self should: [room  addObject: anObject at:  6@5]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError).
			self deny: (room isObjectAt: 6@5).
			 ].
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:35:41' prior: 50889749!
test12cannotAddObjectInNotAbailableLocation
|room anObject|

room := Room withMaxPosition: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

room  addObject: anObject at:  4@5.

self should: [room  addObject: anObject at:  4@5]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError).
			self deny: (room isObjectAt: 4@5).
			 ].
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:37:11' prior: 50889765!
test12cannotAddObjectInNotAbailableLocation
|room anObject1 anObject2|

room := Room withMaxPosition: 5@5.

anObject1:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

anObject2:= (PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10).

room  addObject: anObject1 at:  4@5.

self should: [room  addObject: anObject2 at:  4@5]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError).
			self assert: ((room objectAt: 4@5)=anObject1).
			 ].
		



! !

!testRun: #RoomTests #test12cannotAddObjectInNotAbailableLocation stamp: 'AS 12/10/2020 18:37:13'!
FAILURE!

!testRun: #RoomTests #test12cannotAddObjectInNotAbailableLocation stamp: 'AS 12/10/2020 18:37:13'!
FAILURE!

!testRun: #RoomTests #test12cannotAddObjectInNotAbailableLocation stamp: 'AS 12/10/2020 18:37:13'!
ERROR!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:37:35'!
test12cannotAddObjectInNotFreeLocation
|room anObject1 anObject2|

room := Room withMaxPosition: 5@5.

anObject1:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

anObject2:= (PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10).

room  addObject: anObject1 at:  4@5.

self should: [room  addObject: anObject2 at:  4@5]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError).
			self assert: ((room objectAt: 4@5)=anObject1).
			 ].
		



! !

!methodRemoval: RoomTests #test12cannotAddObjectInNotAbailableLocation stamp: 'AS 12/10/2020 18:37:35'!
test12cannotAddObjectInNotAbailableLocation
|room anObject1 anObject2|

room := Room withMaxPosition: 5@5.

anObject1:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

anObject2:= (PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10).

room  addObject: anObject1 at:  4@5.

self should: [room  addObject: anObject2 at:  4@5]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError).
			self assert: ((room objectAt: 4@5)=anObject1).
			 ].
		



!
!Room methodsFor: 'addingObjects' stamp: 'AS 12/10/2020 18:40:14' prior: 50889359!
addObject: anObject at:  aPoint 

	self assertInsideLimitsPositionIs: aPoint .
	
	(objectsLocation includesKey: aPoint )ifTrue:[self error: self class alreadyOcuppiedPositionError].
	
	objectsLocation at: aPoint put: anObject .
	
	
! !
!Room class methodsFor: 'error messages' stamp: 'AS 12/10/2020 18:40:30'!
alreadyOcuppiedPositionError
	^'position already occupied'! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:40:46' prior: 50889812!
test12cannotAddObjectInNotFreeLocation
|room anObject1 anObject2|

room := Room withMaxPosition: 5@5.

anObject1:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

anObject2:= (PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10).

room  addObject: anObject1 at:  4@5.

self should: [room  addObject: anObject2 at:  4@5]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room alreadyOcuppiedPositionError).
			self assert: ((room objectAt: 4@5)=anObject1).
			 ].
		



! !

!testRun: #RoomTests #test12cannotAddObjectInNotFreeLocation stamp: 'AS 12/10/2020 18:40:47'!
PASSED!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:42:27' prior: 50889588!
test01upperLightLimitIsDefinedCorrectly
|room|

room := Room withMaxPosition: 5@5.

self assert: (room insideLimitsPositionIs: 5@5)
! !
!Room methodsFor: 'initialization' stamp: 'AS 12/10/2020 18:42:46'!
initializeWithSize: aPoint 
	maxLimit := aPoint.
	objectsLocation := Dictionary new.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:42:46' prior: 50889027!
withMaxPosition: aPoint 
	^self new initializeWithSize: aPoint ! !

!methodRemoval: Room #initializeWithMaxPosition: stamp: 'AS 12/10/2020 18:42:46'!
initializeWithMaxPosition: aPoint 
	maxLimit := aPoint.
	objectsLocation := Dictionary new.!
!Room class methodsFor: 'instance creation' stamp: 'AS 12/10/2020 18:43:23'!
withSize: aPoint 
	^self new initializeWithSize: aPoint ! !

!methodRemoval: Room class #withSize: stamp: 'AS 12/10/2020 18:43:27'!
withSize: aPoint 
	^self new initializeWithSize: aPoint !
!Room class methodsFor: 'instance creation' stamp: 'AS 12/10/2020 18:43:40'!
withSize: aPoint 
	^self new initializeWithSize: aPoint ! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:43:40' prior: 50889657!
test04outsideOnBottomIsOutsideOfBounds
|room|

room := Room withSize: 5@5.

self deny: (room insideLimitsPositionIs: 0@1).
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:43:40' prior: 50889728!
test09objectFinallyAddedIsTheOneThatWasAdded
|room anObject|

room := Room withSize: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  4@5.
self assert: ((room objectAt: 4@5)=anObject ).
		
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:43:40' prior: 50889600!
test02bottomLeftLimitIsDefinedCorrectly
|room|

room := Room withSize: 5@5.

self assert: (room insideLimitsPositionIs: 1@1)
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:43:40' prior: 50889868!
test12cannotAddObjectInNotFreeLocation
|room anObject1 anObject2|

room := Room withSize: 5@5.

anObject1:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

anObject2:= (PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10).

room  addObject: anObject1 at:  4@5.

self should: [room  addObject: anObject2 at:  4@5]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room alreadyOcuppiedPositionError).
			self assert: ((room objectAt: 4@5)=anObject1).
			 ].
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:43:40' prior: 50889708!
test08canAddObjectInsideOfBounds
|room anObject|

room := Room withSize: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  4@5.
self assert: (room isObjectAt: 4@5).
		
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:43:40' prior: 50889679!
test07cannotAddObjectOutsideOfBounds
|room anObject|

room := Room withSize: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

self should: [room  addObject: anObject at:  6@5]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError).
			self deny: (room isObjectAt: 6@5).
			 ].
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:43:40' prior: 50889892!
test01upperLightLimitIsDefinedCorrectly
|room|

room := Room withSize: 5@5.

self assert: (room insideLimitsPositionIs: 5@5)
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:43:40' prior: 50889636!
test05outsideOnTopIsOutsideOfBounds
|room|

room := Room withSize: 5@5.

self deny: (room insideLimitsPositionIs: 6@5).
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:43:40' prior: 50889470!
test10removingAnObjectRemovesIt
|room anObject|

room := Room withSize: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  4@5.
room  removeAt:  4@5.
self deny: (room isObjectAt: 4@5 ).
		
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:43:40' prior: 50889667!
test06outsideOnRightIsOutsideOfBounds
|room|

room := Room withSize: 5@5.



self deny: (room insideLimitsPositionIs: 5@6).
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:43:40' prior: 50889649!
test03outsideOnLeftIsOutsideOfBounds
|room|

room := Room withSize: 5@5.

self deny: (room insideLimitsPositionIs: 1@0).
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:43:40' prior: 50889570!
test11removingPoisitionWithoutObjectGivesError
|room anObject|

room := Room withSize: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  5@5.
self should: [room  removeAt:  4@5.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room noObjectInPositionError ).
			 ].
		
		



! !

!methodRemoval: Room class #withMaxPosition: stamp: 'AS 12/10/2020 18:43:40'!
withMaxPosition: aPoint 
	^self new initializeWithSize: aPoint !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:43:59' prior: 50889948!
test02bottomLeftLimitIsDefinedCorrectly
|room|

room := Room withSize: 5@5.

self assert: (room insideLimitsPositionIs: 0@0)
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:44:04' prior: 50890003!
test01upperLightLimitIsDefinedCorrectly
|room|

room := Room withSize: 5@5.

self assert: (room insideLimitsPositionIs: 4@4)
! !

!testRun: #RoomTests #test03outsideOnLeftIsOutsideOfBounds stamp: 'AS 12/10/2020 18:44:20'!
PASSED!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:44:25' prior: 50890036!
test03outsideOnLeftIsOutsideOfBounds
|room|

room := Room withSize: 5@5.

self deny: (room insideLimitsPositionIs: 0@-1).
! !

!testRun: #RoomTests #test03outsideOnLeftIsOutsideOfBounds stamp: 'AS 12/10/2020 18:44:27'!
PASSED!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:44:39' prior: 50889929!
test04outsideOnBottomIsOutsideOfBounds
|room|

room := Room withSize: 5@5.

self deny: (room insideLimitsPositionIs: -1@0).
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:44:48' prior: 50890010!
test05outsideOnTopIsOutsideOfBounds
|room|

room := Room withSize: 5@5.

self deny: (room insideLimitsPositionIs: 5@4).
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:44:55' prior: 50890029!
test06outsideOnRightIsOutsideOfBounds
|room|

room := Room withSize: 5@5.



self deny: (room insideLimitsPositionIs: 4@5).
! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:45:15' prior: 50889987!
test07cannotAddObjectOutsideOfBounds
|room anObject|

room := Room withSize: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

self should: [room  addObject: anObject at:  5@4]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError).
			self deny: (room isObjectAt: 5@4).
			 ].
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:45:31' prior: 50889976!
test08canAddObjectInsideOfBounds
|room anObject|

room := Room withSize: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  3@4.
self assert: (room isObjectAt: 3@4).
		
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:45:42' prior: 50889936!
test09objectFinallyAddedIsTheOneThatWasAdded
|room anObject|

room := Room withSize: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  3@4.
self assert: ((room objectAt: 3@4)=anObject ).
		
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:45:56' prior: 50890017!
test10removingAnObjectRemovesIt
|room anObject|

room := Room withSize: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  3@4.
room  removeAt:  3@4.
self deny: (room isObjectAt: 3@4 ).
		
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:46:08' prior: 50890043!
test11removingPoisitionWithoutObjectGivesError
|room anObject|

room := Room withSize: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  4@4.
self should: [room  removeAt:  3@4.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room noObjectInPositionError ).
			 ].
		
		



! !
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:46:22' prior: 50889955!
test12cannotAddObjectInNotFreeLocation
|room anObject1 anObject2|

room := Room withSize: 5@5.

anObject1:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).

anObject2:= (PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10).

room  addObject: anObject1 at:  3@4.

self should: [room  addObject: anObject2 at:  3@4]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room alreadyOcuppiedPositionError).
			self assert: ((room objectAt: 3@4)=anObject1).
			 ].
		



! !
!Room methodsFor: 'fulfill conditions' stamp: 'AS 12/10/2020 18:46:43' prior: 50889152!
insideLimitsPositionIs: aPoint 
	^(aPoint x < maxLimit x) and: (aPoint y < maxLimit y) and: (aPoint x >= 0) and: (aPoint y >= 0).
! !

!testRun: #RoomTests #test01upperLightLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTests #test02bottomLeftLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTests #test03outsideOnLeftIsOutsideOfBounds stamp: 'AS 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTests #test04outsideOnBottomIsOutsideOfBounds stamp: 'AS 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTests #test05outsideOnTopIsOutsideOfBounds stamp: 'AS 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTests #test06outsideOnRightIsOutsideOfBounds stamp: 'AS 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTests #test07cannotAddObjectOutsideOfBounds stamp: 'AS 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTests #test08canAddObjectInsideOfBounds stamp: 'AS 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTests #test09objectFinallyAddedIsTheOneThatWasAdded stamp: 'AS 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTests #test10removingAnObjectRemovesIt stamp: 'AS 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTests #test11removingPoisitionWithoutObjectGivesError stamp: 'AS 12/10/2020 18:46:45'!
PASSED!

!testRun: #RoomTests #test12cannotAddObjectInNotFreeLocation stamp: 'AS 12/10/2020 18:46:45'!
PASSED!

StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NoPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'AS 12/10/2020 18:47:56'!
StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name weight containedObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NoPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'AS 12/10/2020 18:48:39'!
StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name weight containedObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name containedObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NoPortableObject category: #'ISW1-2020-2C-2doParcial' stamp: 'AS 12/10/2020 18:50:19'!
StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name containedObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NoPortableObject class methodsFor: 'no messages' stamp: 'AS 12/10/2020 18:51:25'!
named: aName 
self new intializeNamed: aName.! !
!NoPortableObject methodsFor: 'no messages' stamp: 'AS 12/10/2020 18:51:50'!
intializeNamed: aName
name:=	aName .
containedObjects :=OrderedCollection new.! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 18:53:14'!
addObject: anObject

containedObjects add: anObject .! !

----SNAPSHOT----(10 December 2020 18:54:01) Parcial2.image priorSource: 17853902!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 18:57:11'!
test11_playableCharacterInARoomCannotMoveOutsideOfBounds

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!methodRemoval: PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 18:59:36'!
test11_playableCharacterInARoomCannotMoveOutsideOfBounds

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	!

Object subclass: #PlayableCharacterInARoom
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacterInARoom category: #'ISW1-2020-2C-2doParcial' stamp: 'AS 12/10/2020 18:59:55'!
Object subclass: #PlayableCharacterInARoom
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

PlayableCharacterInARoom class
	instanceVariableNames: 'headings'!

!classDefinition: 'PlayableCharacterInARoom class' category: #'ISW1-2020-2C-2doParcial' stamp: 'AS 12/10/2020 18:59:55'!
PlayableCharacterInARoom class
	instanceVariableNames: 'headings'!
!PlayableCharacterInARoom methodsFor: 'initialization' stamp: 'AS 12/10/2020 18:59:55'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading! !
!PlayableCharacterInARoom methodsFor: 'testing' stamp: 'AS 12/10/2020 18:59:55'!
backpackIncludes: aPortableObject 
	
	^backpack includes: aPortableObject ! !
!PlayableCharacterInARoom methodsFor: 'testing' stamp: 'AS 12/10/2020 18:59:55'!
isAt: aPosition heading: aCardinalPoint

	^position = aPosition and: [ heading cardinalPoint = aCardinalPoint ]! !
!PlayableCharacterInARoom methodsFor: 'moving' stamp: 'AS 12/10/2020 18:59:55'!
moveBackward
	
	position := position - heading forwardPoint ! !
!PlayableCharacterInARoom methodsFor: 'moving' stamp: 'AS 12/10/2020 18:59:55'!
moveForward
	
	position := position + heading forwardPoint! !
!PlayableCharacterInARoom methodsFor: 'rotating' stamp: 'AS 12/10/2020 18:59:55'!
rotateLeft
	
	heading := heading leftHeading! !
!PlayableCharacterInARoom methodsFor: 'rotating' stamp: 'AS 12/10/2020 18:59:55'!
rotateRight
	
	heading := heading rightHeading! !
!PlayableCharacterInARoom methodsFor: 'taking objects' stamp: 'AS 12/10/2020 18:59:55'!
take: aPortableObject

	backpack add: aPortableObject.! !
!PlayableCharacterInARoom class methodsFor: 'heading' stamp: 'AS 12/10/2020 18:59:55'!
headingFor: aCardinalPoint
	
	^headings at: aCardinalPoint ifAbsent: [ self error: self invalidCardinalPointErrorDescription ]! !
!PlayableCharacterInARoom class methodsFor: 'heading' stamp: 'AS 12/10/2020 18:59:55'!
invalidCardinalPointErrorDescription
	
	^'Invalid cardinal point'! !
!PlayableCharacterInARoom class methodsFor: 'instance creation' stamp: 'AS 12/10/2020 18:59:55'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacterInARoom class methodsFor: 'initialization' stamp: 'AS 12/10/2020 18:59:55'!
forHeadingAt: aCardinalPoint leftIs: aLeftCardinalPoint rightIs: aRightCardinalPoint
	
	(headings at: aCardinalPoint) leftHeading: (headings at: aLeftCardinalPoint) rightHeading: (headings at: aRightCardinalPoint).
	! !
!PlayableCharacterInARoom class methodsFor: 'initialization' stamp: 'AS 12/10/2020 18:59:55' overrides: 16883149!
initialize

	self initializeHeadings! !
!PlayableCharacterInARoom class methodsFor: 'initialization' stamp: 'AS 12/10/2020 18:59:55'!
initializeHeadings

	headings := Dictionary new.
	
	(OrderedCollection 
		with: (PlayableCharacterHeading for: #North forwardWith: 0@1 )	
		with: (PlayableCharacterHeading for: #East forwardWith: 1@0 )
		with: (PlayableCharacterHeading for: #South forwardWith: 0@-1 )
		with: (PlayableCharacterHeading for: #West forwardWith: -1@0 ))
			do: [ :heading | headings at: heading cardinalPoint put: heading ].
	
	self 
		forHeadingAt: #North leftIs: #West rightIs: #East;
		forHeadingAt: #South leftIs: #East rightIs: #West;
		forHeadingAt: #East leftIs: #North rightIs: #South;
		forHeadingAt: #West leftIs: #South rightIs: #North.
	! !

Object subclass: #PlayableCharacterInARoom
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacterInARoom category: #'ISW1-2020-2C-2doParcial' stamp: 'AS 12/10/2020 19:00:13'!
Object subclass: #PlayableCharacterInARoom
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

TestCase subclass: #PlayableCharacterInARoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #PlayableCharacterInARoomTest category: #'ISW1-2020-2C-2doParcial' stamp: 'AS 12/10/2020 19:00:25'!
TestCase subclass: #PlayableCharacterInARoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterInARoomTest methodsFor: 'no messages' stamp: 'AS 12/10/2020 19:01:42'!
test1_playableCharacterInARoomCannotMoveOutsideOfBounds

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: aRoom .

	playableCharacter .
	

	
	! !
!PlayableCharacterInARoomTest methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 19:02:51' prior: 50890516!
test1_playableCharacterInARoomCannotMoveOutsideOfBounds

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: aRoom .

	playableCharacter moveForward.
	
	
	

	
	! !
!PlayableCharacterInARoomTest methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 19:05:53' prior: 50890529!
test1_playableCharacterInARoomCannotMoveOutsideOfBounds

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: aRoom .

	playableCharacter moveForward.
	
	self should: [playableCharacter moveForward.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError ).
			self assert: (playableCharacter).
			 ].
	
	

	
	! !
!PlayableCharacterInARoomTest methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 19:06:57' prior: 50890542!
test1_playableCharacterInARoomCannotMoveOutsideOfBounds

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #North in: aRoom .

	playableCharacter moveForward.
	
	self should: [playableCharacter moveForward.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError ).
			self assert: (playableCharacter isAt: 2@2 heading: #North).
			 ].
	
	

	
	! !
!PlayableCharacterInARoom class methodsFor: 'instance creation' stamp: 'AS 12/10/2020 19:07:59'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacterInARoom class methodsFor: 'instance creation' stamp: 'AS 12/10/2020 19:08:31' prior: 50890581!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in: aRoom! !

!methodRemoval: PlayableCharacterInARoom class #named:using:at:heading: stamp: 'AS 12/10/2020 19:08:42'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading !
!PlayableCharacterInARoom methodsFor: 'initialization' stamp: 'AS 12/10/2020 19:09:24'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading in: aRoom

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room:= aRoom! !

!methodRemoval: PlayableCharacterInARoom #initializeNamed:using:at:heading: stamp: 'AS 12/10/2020 19:09:30'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:09:34'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:09:34'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:09:34'!
ERROR!
!PlayableCharacterInARoom methodsFor: 'moving' stamp: 'AS 12/10/2020 19:13:55' prior: 50890404!
moveForward
|destination|
	destination:=(position + heading forwardPoint).
	room assertInsideLimitsPositionIs: destination.
	position := destination .! !

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:14:09'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:14:09'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:14:09'!
ERROR!
!PlayableCharacterInARoomTest methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 19:14:35'!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:14:47'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:14:47'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:14:47'!
ERROR!
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'AS 12/10/2020 19:15:11' prior: 50890561!
test1_playableCharacterInARoomCannotMoveOutsideOfBounds

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #North in: aRoom .

	
	self should: [playableCharacter moveForward.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError ).
			self assert: (playableCharacter isAt: 2@2 heading: #North).
			 ].
	
	

	
	! !

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:15:12'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:15:12'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:15:12'!
ERROR!

----SNAPSHOT----(10 December 2020 19:15:25) Parcial2.image priorSource: 17876856!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:15:29'!
ERROR!
!PlayableCharacterInARoom methodsFor: 'initialization' stamp: 'AS 12/10/2020 19:16:13' prior: 50890613!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading in: aRoom

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room:= aRoom.! !

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:16:17'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:16:17'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:16:17'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:17:11'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 19:17:39'!
PASSED!
!PlayableCharacterInARoomTest methodsFor: 'tests' stamp: 'AS 12/10/2020 19:18:02' prior: 50890685!
test1_playableCharacterInARoomCannotMoveOutsideOfBounds

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacterInARoom named: 'Luigi' using: self defaultBackpack at: 2@2 heading: (#North) in: aRoom .

	
	self should: [playableCharacter moveForward.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError ).
			self assert: (playableCharacter isAt: 2@2 heading: #North).
			 ].
	
	

	
	! !

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:18:03'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:18:03'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:18:03'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:20:18'!
ERROR!

!testRun: #PlayableCharacterInARoomTest #test1_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:23:09'!
ERROR!

!classRemoval: #PlayableCharacterInARoomTest stamp: 'AS 12/10/2020 19:30:24'!
TestCase subclass: #PlayableCharacterInARoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterInARoom stamp: 'AS 12/10/2020 19:30:30'!
Object subclass: #PlayableCharacterInARoom
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 19:30:34'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 19:30:34'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 19:30:34'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 19:30:34'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 19:30:34'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 19:30:34'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 19:30:34'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 19:30:34'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 19:30:34'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 19:30:34'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 19:31:05'!
test11_playableCharacterInARoomCannotMoveOutsideOfBounds

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: (#North) in: aRoom .

	
	self should: [playableCharacter moveForward.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError ).
			self assert: (playableCharacter isAt: 2@2 heading: #North).
			 ].
	
	

	
! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'AS 12/10/2020 19:32:23'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in: aRoom! !

!classDefinition: #PlayableCharacter category: #'ISW1-2020-2C-2doParcial' stamp: 'AS 12/10/2020 19:33:21'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'AS 12/10/2020 19:33:19'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading  in: aRoom

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room:= aRoom.! !

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:33:31'!
FAILURE!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:33:31'!
FAILURE!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:33:31'!
ERROR!
!PlayableCharacter methodsFor: 'initialization' stamp: 'AS 12/10/2020 19:35:14' prior: 50888563!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	self initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading in: (Room withSize: 5@5).! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 19:35:18'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 19:35:18'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 19:35:18'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 19:35:18'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 19:35:18'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 19:35:18'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 19:35:18'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 19:35:18'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 19:35:18'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 19:35:18'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:35:18'!
FAILURE!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:35:18'!
FAILURE!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:35:18'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 19:35:20'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 19:35:21'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 19:35:23'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:35:25'!
FAILURE!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:35:25'!
FAILURE!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:35:25'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'AS 12/10/2020 19:36:14' prior: 50888587!
moveForward
	|destination|
	destination :=position + heading forwardPoint.
	room assertInsideLimitsPositionIs: destination .
	position := destination .! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 19:36:21'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:36:24'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 19:36:49'!
test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: (#South) in: aRoom .

	
	self should: [playableCharacter moveBackward .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError ).
			self assert: (playableCharacter isAt: 2@2 heading: #North).
			 ].
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 19:36:59'!
test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: (#North) in: aRoom .

	
	self should: [playableCharacter moveForward.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError ).
			self assert: (playableCharacter isAt: 2@2 heading: #North).
			 ].
	
	

	
! !

!methodRemoval: PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBounds stamp: 'AS 12/10/2020 19:36:59'!
test11_playableCharacterInARoomCannotMoveOutsideOfBounds

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: (#North) in: aRoom .

	
	self should: [playableCharacter moveForward.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError ).
			self assert: (playableCharacter isAt: 2@2 heading: #North).
			 ].
	
	

	
!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 19:37:01'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 19:37:01'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 19:37:01'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'AS 12/10/2020 19:37:31' prior: 50888582!
moveBackward
	|destination|
	destination :=position - heading forwardPoint.
	room assertInsideLimitsPositionIs: destination .
	position := destination .! !

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 19:37:35'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 19:37:35'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 19:37:35'!
ERROR!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 19:38:19'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 19:38:26'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 19:38:26'!
FAILURE!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 19:38:26'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 19:38:43' prior: 50891010!
test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: (#South) in: aRoom .

	
	self should: [playableCharacter moveBackward .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room outsideBoundsError ).
			self assert: (playableCharacter isAt: 2@2 heading: #South).
			 ].
	
	

	
! !

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 19:38:44'!
PASSED!

----SNAPSHOT----(10 December 2020 19:38:51) Parcial2.image priorSource: 17890087!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 19:41:07'!
test12_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: (#South) in: aRoom .

	
	self should: [playableCharacter moveBackward .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room alreadyOcuppiedPositionError ).
			self assert: (playableCharacter isAt: 2@2 heading: #South).
			 ].
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 19:41:11'!
test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: (#South) in: aRoom .

	
	self should: [playableCharacter moveBackward .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room alreadyOcuppiedPositionError ).
			self assert: (playableCharacter isAt: 2@2 heading: #South).
			 ].
	
	

	
! !

!methodRemoval: PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 19:41:14'!
test12_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: (#South) in: aRoom .

	
	self should: [playableCharacter moveBackward .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room alreadyOcuppiedPositionError ).
			self assert: (playableCharacter isAt: 2@2 heading: #South).
			 ].
	
	

	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 19:41:34' prior: 50891162!
test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	
	self should: [playableCharacter moveBackward .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room alreadyOcuppiedPositionError ).
			self assert: (playableCharacter isAt: 2@2 heading: #South).
			 ].
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 19:42:39' prior: 50891201!
test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#North) in: aRoom .

	
	self should: [playableCharacter moveBackward .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room alreadyOcuppiedPositionError ).
			self assert: (playableCharacter isAt: 1@2 heading: #North).
			 ].
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 19:43:17' prior: 50891220!
test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#North) in: aRoom .

	aRoom addObject:  aRoom at: aRoom
	
	self should: [playableCharacter moveBackward .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room alreadyOcuppiedPositionError ).
			self assert: (playableCharacter isAt: 1@2 heading: #North).
			 ].
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 19:43:19' prior: 50891239!
test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards

	| playableCharacter aRoom|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#North) in: aRoom .

	aRoom addObject:  aRoom at: aRoom.
	
	self should: [playableCharacter moveBackward .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room alreadyOcuppiedPositionError ).
			self assert: (playableCharacter isAt: 1@2 heading: #North).
			 ].
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 19:44:34' prior: 50891259!
test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#North) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.

	aRoom addObject:  anObject at: 1@1.
	
	self should: [playableCharacter moveBackward .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room alreadyOcuppiedPositionError ).
			self assert: (playableCharacter isAt: 1@2 heading: #North).
			 ].
	
	

	
! !

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 19:44:35'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 19:44:35'!
FAILURE!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 19:44:35'!
ERROR!
!Room methodsFor: 'addingObjects' stamp: 'AS 12/10/2020 19:46:26'!
positionIsOcuppiedAt: aPoint
	(objectsLocation includesKey: aPoint )ifTrue:[self error: self class alreadyOcuppiedPositionError].
	

	
! !
!Room methodsFor: 'addingObjects' stamp: 'AS 12/10/2020 19:46:43' prior: 50889853!
addObject: anObject at:  aPoint 

	self assertInsideLimitsPositionIs: aPoint .
	
	self positionIsOcuppiedAt: aPoint .
	
	objectsLocation at: aPoint put: anObject .
	
	
! !

!testRun: #RoomTests #test01upperLightLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 19:46:45'!
PASSED!

!testRun: #RoomTests #test02bottomLeftLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 19:46:45'!
PASSED!

!testRun: #RoomTests #test03outsideOnLeftIsOutsideOfBounds stamp: 'AS 12/10/2020 19:46:45'!
PASSED!

!testRun: #RoomTests #test04outsideOnBottomIsOutsideOfBounds stamp: 'AS 12/10/2020 19:46:45'!
PASSED!

!testRun: #RoomTests #test05outsideOnTopIsOutsideOfBounds stamp: 'AS 12/10/2020 19:46:45'!
PASSED!

!testRun: #RoomTests #test06outsideOnRightIsOutsideOfBounds stamp: 'AS 12/10/2020 19:46:45'!
PASSED!

!testRun: #RoomTests #test07cannotAddObjectOutsideOfBounds stamp: 'AS 12/10/2020 19:46:45'!
PASSED!

!testRun: #RoomTests #test08canAddObjectInsideOfBounds stamp: 'AS 12/10/2020 19:46:45'!
PASSED!

!testRun: #RoomTests #test09objectFinallyAddedIsTheOneThatWasAdded stamp: 'AS 12/10/2020 19:46:45'!
PASSED!

!testRun: #RoomTests #test10removingAnObjectRemovesIt stamp: 'AS 12/10/2020 19:46:45'!
PASSED!

!testRun: #RoomTests #test11removingPoisitionWithoutObjectGivesError stamp: 'AS 12/10/2020 19:46:45'!
PASSED!

!testRun: #RoomTests #test12cannotAddObjectInNotFreeLocation stamp: 'AS 12/10/2020 19:46:45'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'AS 12/10/2020 19:47:04' prior: 50891079!
moveBackward
	|destination|
	destination :=position - heading forwardPoint.
	room assertInsideLimitsPositionIs: destination .
	position := destination .! !
!Room methodsFor: 'fulfill conditions' stamp: 'AS 12/10/2020 19:47:33'!
assertPositionIsOcuppiedAt: aPoint
	(objectsLocation includesKey: aPoint )ifTrue:[self error: self class alreadyOcuppiedPositionError].
	

	
! !
!Room methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 19:47:33' prior: 50891322!
addObject: anObject at:  aPoint 

	self assertInsideLimitsPositionIs: aPoint .
	
	self assertPositionIsOcuppiedAt: aPoint .
	
	objectsLocation at: aPoint put: anObject .
	
	
! !

!methodRemoval: Room #positionIsOcuppiedAt: stamp: 'AS 12/10/2020 19:47:33'!
positionIsOcuppiedAt: aPoint
	(objectsLocation includesKey: aPoint )ifTrue:[self error: self class alreadyOcuppiedPositionError].
	

	
!
!Room methodsFor: 'fulfill conditions' stamp: 'AS 12/10/2020 19:48:17' prior: 50891377!
assertPositionIsOcuppiedAt: aPoint
	(self isObjectAt: aPoint )ifTrue:[self error: self class alreadyOcuppiedPositionError].
	

	
! !

!testRun: #RoomTests #test01upperLightLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 19:48:19'!
PASSED!

!testRun: #RoomTests #test02bottomLeftLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 19:48:19'!
PASSED!

!testRun: #RoomTests #test03outsideOnLeftIsOutsideOfBounds stamp: 'AS 12/10/2020 19:48:19'!
PASSED!

!testRun: #RoomTests #test04outsideOnBottomIsOutsideOfBounds stamp: 'AS 12/10/2020 19:48:19'!
PASSED!

!testRun: #RoomTests #test05outsideOnTopIsOutsideOfBounds stamp: 'AS 12/10/2020 19:48:19'!
PASSED!

!testRun: #RoomTests #test06outsideOnRightIsOutsideOfBounds stamp: 'AS 12/10/2020 19:48:19'!
PASSED!

!testRun: #RoomTests #test07cannotAddObjectOutsideOfBounds stamp: 'AS 12/10/2020 19:48:19'!
PASSED!

!testRun: #RoomTests #test08canAddObjectInsideOfBounds stamp: 'AS 12/10/2020 19:48:19'!
PASSED!

!testRun: #RoomTests #test09objectFinallyAddedIsTheOneThatWasAdded stamp: 'AS 12/10/2020 19:48:19'!
PASSED!

!testRun: #RoomTests #test10removingAnObjectRemovesIt stamp: 'AS 12/10/2020 19:48:19'!
PASSED!

!testRun: #RoomTests #test11removingPoisitionWithoutObjectGivesError stamp: 'AS 12/10/2020 19:48:19'!
PASSED!

!testRun: #RoomTests #test12cannotAddObjectInNotFreeLocation stamp: 'AS 12/10/2020 19:48:19'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'AS 12/10/2020 19:48:43' prior: 50891369!
moveBackward
	|destination|
	destination :=position - heading forwardPoint.
	room assertInsideLimitsPositionIs: destination .
	room assertPositionIsOcuppiedAt: destination .
	position := destination .! !
!Room methodsFor: 'fulfill conditions' stamp: 'AS 12/10/2020 19:49:05'!
assertPositionIsNotOcuppiedAt: aPoint
	(self isObjectAt: aPoint )ifTrue:[self error: self class alreadyOcuppiedPositionError].
	

	
! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 19:49:05' prior: 50891447!
moveBackward
	|destination|
	destination :=position - heading forwardPoint.
	room assertInsideLimitsPositionIs: destination .
	room assertPositionIsNotOcuppiedAt: destination .
	position := destination .! !
!Room methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 19:49:05' prior: 50891385!
addObject: anObject at:  aPoint 

	self assertInsideLimitsPositionIs: aPoint .
	
	self assertPositionIsNotOcuppiedAt: aPoint .
	
	objectsLocation at: aPoint put: anObject .
	
	
! !

!methodRemoval: Room #assertPositionIsOcuppiedAt: stamp: 'AS 12/10/2020 19:49:05'!
assertPositionIsOcuppiedAt: aPoint
	(self isObjectAt: aPoint )ifTrue:[self error: self class alreadyOcuppiedPositionError].
	

	
!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 19:49:10'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 19:49:53'!
test15_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.

	aRoom addObject:  anObject at: 1@1.
	
	self should: [playableCharacter moveForward .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room alreadyOcuppiedPositionError ).
			self assert: (playableCharacter isAt: 1@2 heading: #South).
			 ].
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 19:50:04'!
test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.

	aRoom addObject:  anObject at: 1@1.
	
	self should: [playableCharacter moveForward .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room alreadyOcuppiedPositionError ).
			self assert: (playableCharacter isAt: 1@2 heading: #South).
			 ].
	
	

	
! !

!methodRemoval: PlayableCharacterTest #test15_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 19:50:04'!
test15_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.

	aRoom addObject:  anObject at: 1@1.
	
	self should: [playableCharacter moveForward .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room alreadyOcuppiedPositionError ).
			self assert: (playableCharacter isAt: 1@2 heading: #South).
			 ].
	
	

	
!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 19:50:05'!
FAILURE!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 19:50:05'!
FAILURE!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 19:50:05'!
ERROR!
!PlayableCharacter methodsFor: 'moving' stamp: 'AS 12/10/2020 19:50:18' prior: 50890994!
moveForward
	|destination|
	destination :=position + heading forwardPoint.
	room assertInsideLimitsPositionIs: destination .
	room assertPositionIsNotOcuppiedAt: destination .
	position := destination .! !

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 19:50:24'!
PASSED!

TestCase subclass: #NoPortableObjectTest
	instanceVariableNames: 'name containedObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NoPortableObjectTest category: #'ISW1-2020-2C-2doParcial' stamp: 'AS 12/10/2020 19:52:43'!
TestCase subclass: #NoPortableObjectTest
	instanceVariableNames: 'name containedObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NoPortableObjectTest methodsFor: 'no messages' stamp: 'AS 12/10/2020 19:54:34'!
test01ItReturnsAllObjectsItDirectlyContainedObjectHas
! !
!NoPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 19:58:25'!
test01ItReturnsWeightOfAllObjectsContained
! !

!methodRemoval: NoPortableObjectTest #test01ItReturnsAllObjectsItDirectlyContainedObjectHas stamp: 'AS 12/10/2020 19:58:25'!
test01ItReturnsAllObjectsItDirectlyContainedObjectHas
!
!NoPortableObjectTest methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 19:58:53' prior: 50891611!
test01ItReturnsWeightOfAllObjectsContained


! !

!classRemoval: #NoPortableObjectTest stamp: 'AS 12/10/2020 20:03:19'!
TestCase subclass: #NoPortableObjectTest
	instanceVariableNames: 'name containedObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:04:54'!
test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.

	aRoom addObject:  anObject at: 1@1.
	
	self should: [playableCharacter moveForward .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room alreadyOcuppiedPositionError ).
			self assert: (playableCharacter isAt: 1@2 heading: #South).
			 ].
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:07:10' prior: 50891634!
test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.

	aRoom addObject:  anObject at: 1@1.
	
	self should: [playableCharacter takeInFront.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (PlayableCharacter notObjectToGrabError ).
			 ].
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:08:29' prior: 50891658!
test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.

	aRoom addObject:  anObject at: 1@1.
	
	self should: [playableCharacter takeInFront.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (PlayableCharacter notObjectToGrabError ).
			self deny: (playableCharacter backpackIncludes: anObject )
			 ].
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:09:07' prior: 50891680!
test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.

	aRoom addObject:  anObject at: 1@1.
	
	self should: [playableCharacter takeInFront.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room noObjectInPositionError ) .
			self deny: (playableCharacter backpackIncludes: anObject )
			 ].
	
	

	
! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AS 12/10/2020 20:09:26'!
takeInFront
! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AS 12/10/2020 20:11:56' prior: 50891727!
takeInFront
|object|
	object:= room objectAt: 3@4
! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AS 12/10/2020 20:15:23' prior: 50891731!
takeInFront
|object frontPosition|
	frontPosition :=position + heading forwardPoint.
	(room isObjectAt: frontPosition) ifTrue:[	
	object:= room objectAt: frontPosition.].

	room removeAt: frontPosition.
	
	! !

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:15:37'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:15:37'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:15:37'!
ERROR!

----SNAPSHOT----(10 December 2020 20:15:53) Parcial2.image priorSource: 17903677!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:16:37'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:16:37'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:16:37'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:17:03' prior: 50891704!
test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.

	aRoom addObject:  anObject at: 1@1.
	
	self should: [playableCharacter takeInFront.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room noObjectInPositionError ) .
			
			 ].
	
	

	
! !

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:17:04'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:17:04'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:17:04'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:17:07' prior: 50891778!
test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.

	aRoom addObject:  anObject at: 1@1.
	
	self should: [playableCharacter takeInFront.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room noObjectInPositionError ) .
			self deny: (playableCharacter backpackIncludes: anObject )
			 ].
	
	

	
! !

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:17:54'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:17:54'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:17:54'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:18:51' prior: 50891815!
test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.


	
	self should: [playableCharacter takeInFront.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room noObjectInPositionError ) .
			self deny: (playableCharacter backpackIncludes: anObject )
			 ].
	
	

	
! !

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:18:52'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:19:53'!
test16_playableCharacterGrabsPortablleObjectThatIsInFront

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.

	aRoom addObject:  anObject at: 1@1.
	playableCharacter takeInFront.
	self assert: (playableCharacter backpackIncludes: anObject ).
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:19:54'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:19:54'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:19:54'!
ERROR!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AS 12/10/2020 20:20:27' prior: 50891736!
takeInFront
|object frontPosition|
	frontPosition :=position + heading forwardPoint.
	(room isObjectAt: frontPosition) ifTrue:[	
	object:= room objectAt: frontPosition.].

	room removeAt: frontPosition.
	self take: object .
	
	! !

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:20:29'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:20:29'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:21:28' prior: 50891880!
test16_playableCharacterGrabsPortablleObjectThatIsInFront

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.

	aRoom addObject:  anObject at: 1@1.
	playableCharacter takeInFront.
	self assert: (playableCharacter backpackIncludes: anObject ).
	self deny: (aRoom isObjectAt: 1@1).
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:21:29'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:22:26'!
test17_playableCharacterGrabsObjectsFromNotPortableObject

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.

	aRoom addObject:  anObject at: 1@1.
	playableCharacter takeInFront.
	self assert: (playableCharacter backpackIncludes: anObject ).
	self deny: (aRoom isObjectAt: 1@1).
	
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:22:43'!
test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.


	
	self should: [playableCharacter takeInFront.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room noObjectInPositionError ) .
			self deny: (playableCharacter backpackIncludes: anObject )
			 ].
	
	

	
! !

!methodRemoval: PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:22:43'!
test15_playableCharacterInARoomReturnErrorWhenTryingToGrabObjectWhereThereIsNotOne

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.


	
	self should: [playableCharacter takeInFront.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room noObjectInPositionError ) .
			self deny: (playableCharacter backpackIncludes: anObject )
			 ].
	
	

	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:23:48' prior: 50891954!
test17_playableCharacterGrabsObjectsFromNotPortableObject

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=NoPortableObject named: 'box'.	

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.

	aRoom addObject:  anObject at: 1@1.
	playableCharacter takeInFront.
	self assert: (playableCharacter backpackIncludes: anObject ).
	self deny: (aRoom isObjectAt: 1@1).
	
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:26:35' prior: 50892020!
test17_playableCharacterGrabsObjectsFromNotPortableObject

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'magic-orb' weighing: 20 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	playableCharacter takeInFront.
	self assert: (playableCharacter backpackIncludes: anObject1 ).
	self assert: (aRoom isObjectAt: 1@1).
	
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:27:22' prior: 50892041!
test17_playableCharacterGrabsObjectsFromNotPortableObject

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'magic-orb' weighing: 20 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	playableCharacter takeInFront.
	self assert: (playableCharacter backpackIncludes: anObject4 ).
	self assert: (playableCharacter backpackIncludes: anObject5 ).
	self assert: (playableCharacter backpackIncludes: anObject6 ).
	self assert: (aRoom isObjectAt: 1@1).
	
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:27:50' prior: 50892072!
test17_playableCharacterGrabsObjectsFromNotPortableObject

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'magic-orb' weighing: 20 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	playableCharacter takeInFront.
	
	self assert: (playableCharacter backpackIncludes: anObject4 ).
	self assert: (playableCharacter backpackIncludes: anObject5 ).
	self assert: (playableCharacter backpackIncludes: anObject6 ).
	self assert: (aRoom isObjectAt: 1@1).
	
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:29:18' prior: 50892107!
test17_playableCharacterGrabsObjectsFromNotPortableObject

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'magic-orb' weighing: 20 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 add: anObject2 .
	
	anObject1 add: anObject3 .
	
	anObject2 add: anObject4 .
	
	anObject3 add: anObject5 .
	
	anObject1 add: anObject6 .
	
	playableCharacter takeInFront.
	
	self assert: (playableCharacter backpackIncludes: anObject4 ).
	self assert: (playableCharacter backpackIncludes: anObject5 ).
	self assert: (playableCharacter backpackIncludes: anObject6 ).
	self assert: (aRoom isObjectAt: 1@1).
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:29:28'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:29:28'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:29:28'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:30:37' prior: 50892142!
test17_playableCharacterGrabsObjectsFromNotPortableObject

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'magic-orb' weighing: 20 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	playableCharacter takeInFront.
	
	self assert: (playableCharacter backpackIncludes: anObject4 ).
	self assert: (playableCharacter backpackIncludes: anObject5 ).
	self assert: (playableCharacter backpackIncludes: anObject6 ).
	self assert: (aRoom isObjectAt: 1@1).
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:30:38'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:30:38'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:30:38'!
ERROR!
!NoPortableObject class methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 20:31:08' prior: 50890288!
named: aName 
^self new intializeNamed: aName.! !

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:31:16'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:31:16'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:31:16'!
ERROR!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 20:33:20'!
test10removingAPortableObjectRemovesIt
|room anObject|

room := Room withSize: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  3@4.
room  removeAt:  3@4.
self deny: (room isObjectAt: 3@4 ).
		
		



! !

!methodRemoval: RoomTests #test10removingAnObjectRemovesIt stamp: 'AS 12/10/2020 20:33:20'!
test10removingAnObjectRemovesIt
|room anObject|

room := Room withSize: 5@5.

anObject:= (PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  3@4.
room  removeAt:  3@4.
self deny: (room isObjectAt: 3@4 ).
		
		



!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 20:34:24'!
test13removingANotPortableDoesNothing
|room anObject|

room := Room withSize: 5@5.

anObject:= (NoPointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5).
room  addObject: anObject at:  3@4.
room  removeAt:  3@4.
self assert: (room isObjectAt: 3@4 ).
		
		



! !
!Room methodsFor: 'addingOrRemovingObjects' stamp: 'AS 12/10/2020 20:38:24' prior: 50889492!
removeAt: aPoint
	self assertInsideLimitsPositionIs: aPoint .
	((objectsLocation at: aPoint ifAbsent: [self error: self class noObjectInPositionError]) isKindOf: PortableObject) ifTrue:[
	objectsLocation removeKey: aPoint ]
	
	
! !

!testRun: #RoomTests #test01upperLightLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 20:38:27'!
PASSED!

!testRun: #RoomTests #test02bottomLeftLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 20:38:27'!
PASSED!

!testRun: #RoomTests #test03outsideOnLeftIsOutsideOfBounds stamp: 'AS 12/10/2020 20:38:27'!
PASSED!

!testRun: #RoomTests #test04outsideOnBottomIsOutsideOfBounds stamp: 'AS 12/10/2020 20:38:27'!
PASSED!

!testRun: #RoomTests #test05outsideOnTopIsOutsideOfBounds stamp: 'AS 12/10/2020 20:38:27'!
PASSED!

!testRun: #RoomTests #test06outsideOnRightIsOutsideOfBounds stamp: 'AS 12/10/2020 20:38:27'!
PASSED!

!testRun: #RoomTests #test07cannotAddObjectOutsideOfBounds stamp: 'AS 12/10/2020 20:38:27'!
PASSED!

!testRun: #RoomTests #test08canAddObjectInsideOfBounds stamp: 'AS 12/10/2020 20:38:27'!
PASSED!

!testRun: #RoomTests #test09objectFinallyAddedIsTheOneThatWasAdded stamp: 'AS 12/10/2020 20:38:27'!
PASSED!

!testRun: #RoomTests #test10removingAPortableObjectRemovesIt stamp: 'AS 12/10/2020 20:38:27'!
PASSED!

!testRun: #RoomTests #test11removingPoisitionWithoutObjectGivesError stamp: 'AS 12/10/2020 20:38:27'!
PASSED!

!testRun: #RoomTests #test12cannotAddObjectInNotFreeLocation stamp: 'AS 12/10/2020 20:38:27'!
PASSED!

!testRun: #RoomTests #test13removingANotPortableDoesNothing stamp: 'AS 12/10/2020 20:38:27'!
ERROR!

!testRun: #RoomTests #test13removingANotPortableDoesNothing stamp: 'AS 12/10/2020 20:38:27'!
ERROR!

!testRun: #RoomTests #test13removingANotPortableDoesNothing stamp: 'AS 12/10/2020 20:38:27'!
ERROR!

!testRun: #RoomTests #test02bottomLeftLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 20:38:30'!
PASSED!

!testRun: #RoomTests #test07cannotAddObjectOutsideOfBounds stamp: 'AS 12/10/2020 20:38:31'!
PASSED!

!testRun: #RoomTests #test07cannotAddObjectOutsideOfBounds stamp: 'AS 12/10/2020 20:38:33'!
PASSED!

!testRun: #RoomTests #test12cannotAddObjectInNotFreeLocation stamp: 'AS 12/10/2020 20:38:35'!
PASSED!

!testRun: #RoomTests #test13removingANotPortableDoesNothing stamp: 'AS 12/10/2020 20:38:36'!
ERROR!

!testRun: #RoomTests #test13removingANotPortableDoesNothing stamp: 'AS 12/10/2020 20:38:36'!
ERROR!

!testRun: #RoomTests #test13removingANotPortableDoesNothing stamp: 'AS 12/10/2020 20:38:36'!
ERROR!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 20:38:45' prior: 50892287!
test13removingANotPortableDoesNothing
|room anObject|

room := Room withSize: 5@5.

anObject:= (NoPointsPortableObject named: 'left-handed hammer').
room  addObject: anObject at:  3@4.
room  removeAt:  3@4.
self assert: (room isObjectAt: 3@4 ).
		
		



! !

!testRun: #RoomTests #test13removingANotPortableDoesNothing stamp: 'AS 12/10/2020 20:38:46'!
ERROR!

!testRun: #RoomTests #test13removingANotPortableDoesNothing stamp: 'AS 12/10/2020 20:38:46'!
ERROR!

!testRun: #RoomTests #test13removingANotPortableDoesNothing stamp: 'AS 12/10/2020 20:38:46'!
ERROR!
!RoomTests methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 20:38:58' prior: 50892380!
test13removingANotPortableDoesNothing
|room anObject|

room := Room withSize: 5@5.

anObject:= (NoPortableObject named: 'left-handed hammer').
room  addObject: anObject at:  3@4.
room  removeAt:  3@4.
self assert: (room isObjectAt: 3@4 ).
		
		



! !

!testRun: #RoomTests #test13removingANotPortableDoesNothing stamp: 'AS 12/10/2020 20:38:59'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 20:39:05'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 20:39:05'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 20:39:05'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 20:39:05'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 20:39:05'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 20:39:05'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 20:39:05'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 20:39:05'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 20:39:05'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 20:39:05'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 20:39:05'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 20:39:05'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 20:39:05'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 20:39:05'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:39:05'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:39:05'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:39:05'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:39:05'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:39:05'!
ERROR!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:39:08'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:39:09'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:39:10'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:39:12'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 20:39:13'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:39:31' prior: 50892194!
test17_playableCharacterGrabsObjectsFromNotPortableObject

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'magic-orb' weighing: 20 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	playableCharacter takeInFront.
	

	self assert: (aRoom isObjectAt: 1@1).
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:39:32'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:39:32'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:39:32'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 20:39:35' prior: 50892515!
test17_playableCharacterGrabsObjectsFromNotPortableObject

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'magic-orb' weighing: 20 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	playableCharacter takeInFront.
	
	self assert: (playableCharacter backpackIncludes: anObject4 ).
	self assert: (playableCharacter backpackIncludes: anObject5 ).
	self assert: (playableCharacter backpackIncludes: anObject6 ).
	self assert: (aRoom isObjectAt: 1@1).
	
	
	

	
! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AS 12/10/2020 20:41:11' prior: 50891911!
takeInFront
|object frontPosition|
	frontPosition :=position + heading forwardPoint.
	(room isObjectAt: frontPosition) ifTrue:[	
	object:= room objectAt: frontPosition.
	room removeAt: frontPosition.
	self take: object .
	].


	
	! !

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:41:17'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:41:18'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:41:19'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:41:20'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:41:21'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:41:22'!
PASSED!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AS 12/10/2020 20:45:34' prior: 50888601!
take: aObject
	
	(aObject isKindOf: PortableObject) ifTrue:
	[
		backpack add: aObject.
	]ifFalse:
	[
		backpack addAll: (aObject thingsFitInsideOfBackPack: backpack) .
		
	]

	! !

----SNAPSHOT----(10 December 2020 20:45:42) Parcial2.image priorSource: 17923503!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 20:46:15'!
thingsFitInsideOfBackPack: aBackpack! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 20:49:43' prior: 50892650!
thingsFitInsideOfBackPack: aBackpack



containedObjects do: [:object | object thingsFitInsideOfBackPack: aBackpack].! !
!StageObject methodsFor: 'no messages' stamp: 'AS 12/10/2020 20:49:54'!
thingsFitInsideOfBackPack: aBackpack


self subclassResponsibility .! !
!PortableObject methodsFor: 'accessing' stamp: 'AS 12/10/2020 20:50:59' overrides: 50892662!
thingsFitInsideOfBackPack: aBackpack

^self! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 20:53:12' prior: 50892655 overrides: 50892662!
thingsFitInsideOfBackPack: aBackpack
|objectThatFit|
objectThatFit:=OrderedCollection .

containedObjects do: [:object | objectThatFit addAll: (object thingsFitInsideOfBackPack: aBackpack)].

^objectThatFit .! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AS 12/10/2020 20:54:04' prior: 50892639!
take: aObject	
	backpack addAll: (aObject thingsFitInsideOfBackPack: backpack) .
		

	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 20:54:09'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 20:54:09'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 20:54:09'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 20:54:09'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 20:54:09'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 20:54:09'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 20:54:09'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 20:54:09'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 20:54:09'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 20:54:09'!
ERROR!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 20:54:09'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 20:54:09'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 20:54:09'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 20:54:09'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 20:54:09'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:54:09'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:54:09'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 20:54:15'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 20:54:18'!
ERROR!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 20:54:18'!
ERROR!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 20:54:18'!
ERROR!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 20:55:55'!
ERROR!
!PortableObject methodsFor: 'accessing' stamp: 'AS 12/10/2020 20:57:19' prior: 50892668 overrides: 50892662!
thingsFitInsideOfBackPack: aBackpack
|thingsFIt|
thingsFIt:=OrderedCollection new.
thingsFIt add: self.
^thingsFIt .! !

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 20:57:28'!
ERROR!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 20:57:28'!
ERROR!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 20:57:28'!
ERROR!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AS 12/10/2020 20:59:28' prior: 50892684!
take: aObject	
	(aObject thingsFitInsideOfBackPack: backpack) do: [:object|backpack add: object]
	! !

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 20:59:32'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 20:59:35'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 20:59:37'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 20:59:39'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:59:41'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:59:41'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 20:59:41'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 21:00:10'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 21:00:10'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 21:00:10'!
ERROR!

aObject thingsFitInsideOfBackPack: backpack!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:03:18' prior: 50892674 overrides: 50892662!
thingsFitInsideOfBackPack: aBackpack
|objectThatFit|
objectThatFit:=OrderedCollection new.

containedObjects do: [:object | objectThatFit addAll: (object thingsFitInsideOfBackPack: aBackpack)].

^objectThatFit .! !

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 21:03:24'!
PASSED!

----SNAPSHOT----(10 December 2020 21:03:34) Parcial2.image priorSource: 17951892!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:03:53'!
test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'magic-orb' weighing: 20 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	playableCharacter takeInFront.
	
	self assert: (playableCharacter backpackIncludes: anObject4 ).
	self assert: (playableCharacter backpackIncludes: anObject5 ).
	self assert: (playableCharacter backpackIncludes: anObject6 ).
	self assert: (aRoom isObjectAt: 1@1).
	
	
	

	
! !

!methodRemoval: PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObject stamp: 'AS 12/10/2020 21:03:53'!
test17_playableCharacterGrabsObjectsFromNotPortableObject

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'magic-orb' weighing: 20 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	playableCharacter takeInFront.
	
	self assert: (playableCharacter backpackIncludes: anObject4 ).
	self assert: (playableCharacter backpackIncludes: anObject5 ).
	self assert: (playableCharacter backpackIncludes: anObject6 ).
	self assert: (aRoom isObjectAt: 1@1).
	
	
	

	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:04:38'!
test18_playableCharacterGrabsObjectsFromNotPortableObjectAsLongAsTheyFitInTheBackPack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'magic-orb' weighing: 20 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	playableCharacter takeInFront.
	
	self assert: (playableCharacter backpackIncludes: anObject4 ).
	self assert: (playableCharacter backpackIncludes: anObject5 ).
	self assert: (playableCharacter backpackIncludes: anObject6 ).
	self assert: (aRoom isObjectAt: 1@1).
	
	
	

	
! !
!PortableObject methodsFor: 'accessing' stamp: 'AS 12/10/2020 21:07:40'!
thingsFitInsideOfBackPackAndTheyGetRemoved: aBackpack
|thingsFIt|
thingsFIt:=OrderedCollection new.
thingsFIt add: self.
^thingsFIt .! !
!StageObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:07:40'!
thingsFitInsideOfBackPackAndTheyGetRemoved: aBackpack


self subclassResponsibility .! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:07:40' overrides: 50892990!
thingsFitInsideOfBackPackAndTheyGetRemoved: aBackpack
|objectThatFit|
objectThatFit:=OrderedCollection new.

containedObjects do: [:object | objectThatFit addAll: (object thingsFitInsideOfBackPack: aBackpack)].

^objectThatFit .! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:07:40' prior: 50892795!
take: aObject	
	(aObject thingsFitInsideOfBackPackAndTheyGetRemoved: backpack) do: [:object|backpack add: object]
	! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:07:40' prior: 50892844 overrides: 50892662!
thingsFitInsideOfBackPack: aBackpack
|objectThatFit|
objectThatFit:=OrderedCollection new.

containedObjects do: [:object | objectThatFit addAll: (object thingsFitInsideOfBackPackAndTheyGetRemoved: aBackpack)].

^objectThatFit .! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:07:40' prior: 50892997 overrides: 50892990!
thingsFitInsideOfBackPackAndTheyGetRemoved: aBackpack
|objectThatFit|
objectThatFit:=OrderedCollection new.

containedObjects do: [:object | objectThatFit addAll: (object thingsFitInsideOfBackPackAndTheyGetRemoved: aBackpack)].

^objectThatFit .! !

!methodRemoval: PortableObject #thingsFitInsideOfBackPack: stamp: 'AS 12/10/2020 21:07:40'!
thingsFitInsideOfBackPack: aBackpack
|thingsFIt|
thingsFIt:=OrderedCollection new.
thingsFIt add: self.
^thingsFIt .!

!methodRemoval: StageObject #thingsFitInsideOfBackPack: stamp: 'AS 12/10/2020 21:07:40'!
thingsFitInsideOfBackPack: aBackpack


self subclassResponsibility .!

!methodRemoval: NoPortableObject #thingsFitInsideOfBackPack: stamp: 'AS 12/10/2020 21:07:40'!
thingsFitInsideOfBackPack: aBackpack
|objectThatFit|
objectThatFit:=OrderedCollection new.

containedObjects do: [:object | objectThatFit addAll: (object thingsFitInsideOfBackPackAndTheyGetRemoved: aBackpack)].

^objectThatFit .!

!testRun: #RoomTests #test01upperLightLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 21:07:44'!
PASSED!

!testRun: #RoomTests #test02bottomLeftLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 21:07:44'!
PASSED!

!testRun: #RoomTests #test03outsideOnLeftIsOutsideOfBounds stamp: 'AS 12/10/2020 21:07:44'!
PASSED!

!testRun: #RoomTests #test04outsideOnBottomIsOutsideOfBounds stamp: 'AS 12/10/2020 21:07:44'!
PASSED!

!testRun: #RoomTests #test05outsideOnTopIsOutsideOfBounds stamp: 'AS 12/10/2020 21:07:44'!
PASSED!

!testRun: #RoomTests #test06outsideOnRightIsOutsideOfBounds stamp: 'AS 12/10/2020 21:07:44'!
PASSED!

!testRun: #RoomTests #test07cannotAddObjectOutsideOfBounds stamp: 'AS 12/10/2020 21:07:44'!
PASSED!

!testRun: #RoomTests #test08canAddObjectInsideOfBounds stamp: 'AS 12/10/2020 21:07:44'!
PASSED!

!testRun: #RoomTests #test09objectFinallyAddedIsTheOneThatWasAdded stamp: 'AS 12/10/2020 21:07:44'!
PASSED!

!testRun: #RoomTests #test10removingAPortableObjectRemovesIt stamp: 'AS 12/10/2020 21:07:44'!
PASSED!

!testRun: #RoomTests #test11removingPoisitionWithoutObjectGivesError stamp: 'AS 12/10/2020 21:07:44'!
PASSED!

!testRun: #RoomTests #test12cannotAddObjectInNotFreeLocation stamp: 'AS 12/10/2020 21:07:44'!
PASSED!

!testRun: #RoomTests #test13removingANotPortableDoesNothing stamp: 'AS 12/10/2020 21:07:44'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:07:46'!
FAILURE!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test18_playableCharacterGrabsObjectsFromNotPortableObjectAsLongAsTheyFitInTheBackPack stamp: 'AS 12/10/2020 21:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:07:46'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:07:46'!
ERROR!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 21:07:53'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 21:07:54'!
PASSED!

!testRun: #PlayableCharacterTest #test18_playableCharacterGrabsObjectsFromNotPortableObjectAsLongAsTheyFitInTheBackPack stamp: 'AS 12/10/2020 21:07:56'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 21:07:58'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:07:59'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:07:59'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:07:59'!
ERROR!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 21:08:03'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 21:08:05'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 21:08:06'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 21:08:08'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 21:08:09'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:08:10'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:08:10'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:08:10'!
ERROR!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:08:21'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:08:21'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:08:21'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:08:38' prior: 50891973!
test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.


	
	self should: [playableCharacter takeInFront.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room noObjectInPositionError ) .
			
			 ].
	
	

	
! !

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:08:43'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:08:43'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:08:43'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:08:48' prior: 50893277!
test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.


	
	self should: [playableCharacter takeInFront.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room noObjectInPositionError ) .
			self deny: (playableCharacter backpackIncludes: anObject )
			 ].
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:08:50' prior: 50893314!
test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.


	
	self should: [playableCharacter takeInFront.]
	raise: Error withExceptionDo: [ :anError |
			
			self deny: (playableCharacter backpackIncludes: anObject )
			 ].
	
	

	
! !

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:08:51'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:08:51'!
FAILURE!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:08:52'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:08:55' prior: 50893337!
test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne

	| playableCharacter aRoom anObject|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.


	
	self should: [playableCharacter takeInFront.]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room noObjectInPositionError ) .
			self deny: (playableCharacter backpackIncludes: anObject )
			 ].
	
	

	
! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AS 12/10/2020 21:10:01' prior: 50892603!
takeInFront
|object frontPosition|
	frontPosition :=position + heading forwardPoint.
	(room isObjectAt: frontPosition) ifTrue:[	
	object:= room objectAt: frontPosition.
	self take: object .
	].
	room removeAt: frontPosition.


	
	! !

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 21:10:23'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 21:10:25'!
PASSED!

!testRun: #PlayableCharacterTest #test18_playableCharacterGrabsObjectsFromNotPortableObjectAsLongAsTheyFitInTheBackPack stamp: 'AS 12/10/2020 21:10:25'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:11:01'!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'magic-orb' weighing: 20 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	playableCharacter takeInFront.
	
	self assert: (playableCharacter backpackIncludes: anObject4 ).
	self assert: (playableCharacter backpackIncludes: anObject5 ).
	self assert: (playableCharacter backpackIncludes: anObject6 ).
	self assert: (aRoom isObjectAt: 1@1).
	
	
	

	
! !

!methodRemoval: PlayableCharacterTest #test18_playableCharacterGrabsObjectsFromNotPortableObjectAsLongAsTheyFitInTheBackPack stamp: 'AS 12/10/2020 21:11:01'!
test18_playableCharacterGrabsObjectsFromNotPortableObjectAsLongAsTheyFitInTheBackPack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'magic-orb' weighing: 20 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	playableCharacter takeInFront.
	
	self assert: (playableCharacter backpackIncludes: anObject4 ).
	self assert: (playableCharacter backpackIncludes: anObject5 ).
	self assert: (playableCharacter backpackIncludes: anObject6 ).
	self assert: (aRoom isObjectAt: 1@1).
	
	
	

	
!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:11:43' prior: 50893486!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'magic-orb' weighing: 100 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	playableCharacter takeInFront.
	
	self assert: (playableCharacter backpackIncludes: anObject4 ).
	self assert: (playableCharacter backpackIncludes: anObject5 ).
	self assert: (playableCharacter backpackIncludes: anObject6 ).
	self assert: (aRoom isObjectAt: 1@1).
	
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:11:56' prior: 50893570!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 100 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	playableCharacter takeInFront.
	
	self assert: (playableCharacter backpackIncludes: anObject4 ).
	self assert: (playableCharacter backpackIncludes: anObject5 ).
	self assert: (playableCharacter backpackIncludes: anObject6 ).
	self assert: (aRoom isObjectAt: 1@1).
	
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:12:11' prior: 50893611!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 100 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	playableCharacter takeInFront.
	
	self assert: (playableCharacter backpackIncludes: anObject4 ).
	self assert: (playableCharacter backpackIncludes: anObject5 ).
	self deny: (playableCharacter backpackIncludes: anObject6 ).
	self assert: (aRoom isObjectAt: 1@1).
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:13:47'!
ERROR!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:13:47'!
ERROR!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:13:48'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:15:09' prior: 50893652!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 100 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	playableCharacter takeInFront.
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Room alreadyOcuppiedPositionError ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			 ].
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:15:13'!
ERROR!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:15:13'!
ERROR!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:15:13'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:15:34' prior: 50893707!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 100 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	playableCharacter takeInFront.
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			 ].
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:15:35'!
ERROR!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:15:35'!
ERROR!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:15:35'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:15:43' prior: 50893768!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 100 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			 ].
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:15:44'!
PASSED!
!StageObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:16:47'!
ObjectsContained: aBackpack


self subclassResponsibility .! !
!PortableObject methodsFor: 'accessing' stamp: 'AS 12/10/2020 21:16:47' overrides: 50893879!
ObjectsContained: aBackpack
|thingsFIt|
thingsFIt:=OrderedCollection new.
thingsFIt add: self.
^thingsFIt .! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:16:47' overrides: 50893879!
ObjectsContained: aBackpack
|objectThatFit|
objectThatFit:=OrderedCollection new.

containedObjects do: [:object | objectThatFit addAll: (object thingsFitInsideOfBackPackAndTheyGetRemoved: aBackpack)].

^objectThatFit .! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:16:47' prior: 50893008!
take: aObject	
	(aObject ObjectsContained: backpack) do: [:object|backpack add: object]
	! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:16:47' prior: 50893028 overrides: 50892990!
thingsFitInsideOfBackPackAndTheyGetRemoved: aBackpack
|objectThatFit|
objectThatFit:=OrderedCollection new.

containedObjects do: [:object | objectThatFit addAll: (object ObjectsContained: aBackpack)].

^objectThatFit .! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:16:47' prior: 50893891 overrides: 50893879!
ObjectsContained: aBackpack
|objectThatFit|
objectThatFit:=OrderedCollection new.

containedObjects do: [:object | objectThatFit addAll: (object ObjectsContained: aBackpack)].

^objectThatFit .! !

!methodRemoval: StageObject #thingsFitInsideOfBackPackAndTheyGetRemoved: stamp: 'AS 12/10/2020 21:16:47'!
thingsFitInsideOfBackPackAndTheyGetRemoved: aBackpack


self subclassResponsibility .!

!methodRemoval: PortableObject #thingsFitInsideOfBackPackAndTheyGetRemoved: stamp: 'AS 12/10/2020 21:16:47'!
thingsFitInsideOfBackPackAndTheyGetRemoved: aBackpack
|thingsFIt|
thingsFIt:=OrderedCollection new.
thingsFIt add: self.
^thingsFIt .!

!methodRemoval: NoPortableObject #thingsFitInsideOfBackPackAndTheyGetRemoved: stamp: 'AS 12/10/2020 21:16:47'!
thingsFitInsideOfBackPackAndTheyGetRemoved: aBackpack
|objectThatFit|
objectThatFit:=OrderedCollection new.

containedObjects do: [:object | objectThatFit addAll: (object ObjectsContained: aBackpack)].

^objectThatFit .!
!PortableObject methodsFor: 'accessing' stamp: 'AS 12/10/2020 21:17:10' prior: 50893884 overrides: 50893879!
ObjectsContained: aBackpack
|thingsContained|
thingsContained :=OrderedCollection new.
thingsContained add: self.
^thingsContained .! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:17:56' prior: 50893920 overrides: 50893879!
ObjectsContained: aBackpack
|thingsContained|
thingsContained:=OrderedCollection new.

containedObjects do: [:object | thingsContained addAll: (object ObjectsContained: aBackpack)].

^thingsContained .! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:18:57'!
ObjectsContained
|thingsContained|
thingsContained:=OrderedCollection new.

containedObjects do: [:object | thingsContained addAll: (object ObjectsContained)].

^thingsContained .! !

!methodRemoval: NoPortableObject #ObjectsContained: stamp: 'AS 12/10/2020 21:19:04'!
ObjectsContained: aBackpack
|thingsContained|
thingsContained:=OrderedCollection new.

containedObjects do: [:object | thingsContained addAll: (object ObjectsContained: aBackpack)].

^thingsContained .!
!PortableObject methodsFor: 'accessing' stamp: 'AS 12/10/2020 21:19:15'!
ObjectsContained
|thingsContained|
thingsContained :=OrderedCollection new.
thingsContained add: self.
^thingsContained .! !

!methodRemoval: PortableObject #ObjectsContained: stamp: 'AS 12/10/2020 21:19:20'!
ObjectsContained: aBackpack
|thingsContained|
thingsContained :=OrderedCollection new.
thingsContained add: self.
^thingsContained .!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AS 12/10/2020 21:19:42' prior: 50893902!
take: aObject	
	(aObject ObjectsContained) do: [:object|backpack add: object]
	! !

!testRun: #RoomTests #test01upperLightLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 21:19:46'!
PASSED!

!testRun: #RoomTests #test02bottomLeftLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 21:19:46'!
PASSED!

!testRun: #RoomTests #test03outsideOnLeftIsOutsideOfBounds stamp: 'AS 12/10/2020 21:19:46'!
PASSED!

!testRun: #RoomTests #test04outsideOnBottomIsOutsideOfBounds stamp: 'AS 12/10/2020 21:19:46'!
PASSED!

!testRun: #RoomTests #test05outsideOnTopIsOutsideOfBounds stamp: 'AS 12/10/2020 21:19:46'!
PASSED!

!testRun: #RoomTests #test06outsideOnRightIsOutsideOfBounds stamp: 'AS 12/10/2020 21:19:46'!
PASSED!

!testRun: #RoomTests #test07cannotAddObjectOutsideOfBounds stamp: 'AS 12/10/2020 21:19:46'!
PASSED!

!testRun: #RoomTests #test08canAddObjectInsideOfBounds stamp: 'AS 12/10/2020 21:19:46'!
PASSED!

!testRun: #RoomTests #test09objectFinallyAddedIsTheOneThatWasAdded stamp: 'AS 12/10/2020 21:19:46'!
PASSED!

!testRun: #RoomTests #test10removingAPortableObjectRemovesIt stamp: 'AS 12/10/2020 21:19:46'!
PASSED!

!testRun: #RoomTests #test11removingPoisitionWithoutObjectGivesError stamp: 'AS 12/10/2020 21:19:46'!
PASSED!

!testRun: #RoomTests #test12cannotAddObjectInNotFreeLocation stamp: 'AS 12/10/2020 21:19:46'!
PASSED!

!testRun: #RoomTests #test13removingANotPortableDoesNothing stamp: 'AS 12/10/2020 21:19:46'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:19:48'!
PASSED!

----SNAPSHOT----(10 December 2020 21:21:20) Parcial2.image priorSource: 17958620!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AS 12/10/2020 21:22:29' prior: 50894005!
take: aObject	
	aObject addTo: backpack
	! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:23:18'!
addTo: backpack


containedObjects do: [:object | object addTo: 	backpack ].
! !
!StageObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:23:28'!
addTo: backpack


self subclassResponsibility .! !

!methodRemoval: StageObject #ObjectsContained: stamp: 'AS 12/10/2020 21:23:31'!
ObjectsContained: aBackpack


self subclassResponsibility .!
!PortableObject methodsFor: 'accessing' stamp: 'AS 12/10/2020 21:23:48' overrides: 50894142!
addTo: backpack
backpack add: self.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 21:23:53'!
PASSED!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:23:53'!
PASSED!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:25:13' prior: 50894136 overrides: 50894142!
addTo: backpack


containedObjects do: [:object | object addTo: 	backpack.
					containedObjects remove: object .].
! !

!methodRemoval: NoPortableObject #ObjectsContained stamp: 'AS 12/10/2020 21:25:17'!
ObjectsContained
|thingsContained|
thingsContained:=OrderedCollection new.

containedObjects do: [:object | thingsContained addAll: (object ObjectsContained)].

^thingsContained .!

!methodRemoval: PortableObject #ObjectsContained stamp: 'AS 12/10/2020 21:25:40'!
ObjectsContained
|thingsContained|
thingsContained :=OrderedCollection new.
thingsContained add: self.
^thingsContained .!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 21:25:46'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 21:25:46'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 21:25:46'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 21:25:46'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 21:25:46'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 21:25:46'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 21:25:46'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 21:25:46'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 21:25:46'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 21:25:46'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 21:25:46'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 21:25:46'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 21:25:46'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 21:25:46'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:25:46'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 21:25:46'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 21:25:46'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:25:46'!
FAILURE!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:26:20' prior: 50894232 overrides: 50894142!
addTo: backpack


containedObjects do: [:object | object addTo: 	backpack.
					].
! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 21:26:25'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 21:26:25'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 21:26:25'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 21:26:25'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 21:26:25'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 21:26:25'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 21:26:25'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #RoomTests #test01upperLightLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #RoomTests #test02bottomLeftLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #RoomTests #test03outsideOnLeftIsOutsideOfBounds stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #RoomTests #test04outsideOnBottomIsOutsideOfBounds stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #RoomTests #test05outsideOnTopIsOutsideOfBounds stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #RoomTests #test06outsideOnRightIsOutsideOfBounds stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #RoomTests #test07cannotAddObjectOutsideOfBounds stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #RoomTests #test08canAddObjectInsideOfBounds stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #RoomTests #test09objectFinallyAddedIsTheOneThatWasAdded stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #RoomTests #test10removingAPortableObjectRemovesIt stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #RoomTests #test11removingPoisitionWithoutObjectGivesError stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #RoomTests #test12cannotAddObjectInNotFreeLocation stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #RoomTests #test13removingANotPortableDoesNothing stamp: 'AS 12/10/2020 21:26:26'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 21:26:28'!
PASSED!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:26:28'!
PASSED!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:29:17' prior: 50894330 overrides: 50894142!
addTo: backpack
|iteratableContainedObject|
iteratableContainedObject:=containedObjects copy.
iteratableContainedObject do: [:object | object addTo: 	backpack.
					(object isKindOf: PortableObject) ifTrue: (containedObjects remove: object) .].
! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 21:29:23'!
PASSED!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:29:23'!
PASSED!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:29:37' prior: 50894529 overrides: 50894142!
addTo: backpack
|iteratableContainedObject|
iteratableContainedObject:=containedObjects copy.
containedObjects do: [:object | object addTo: 	backpack.
					(object isKindOf: PortableObject) ifTrue: (containedObjects remove: object) .].
! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 21:29:43'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 21:29:43'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:29:43'!
FAILURE!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'AS 12/10/2020 21:30:00' prior: 50894616 overrides: 50894142!
addTo: backpack
|iteratableContainedObject|
iteratableContainedObject:=containedObjects copy.
iteratableContainedObject do: [:object | object addTo: 	backpack.
					(object isKindOf: PortableObject) ifTrue: (containedObjects remove: object) .].
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:32:20' prior: 50893829!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6 playableCharacter2|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 100 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			
			playableCharacter takeInFront .
			
			
			 ].
	
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:33:11' prior: 50894714!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6 playableCharacter2|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 90 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			
			playableCharacter2 := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .
			playableCharacter2 := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .
			
			
			 ].
	
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:34:08' prior: 50894762!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6 playableCharacter2|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 90 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			
			playableCharacter2 := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .
			playableCharacter2 := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .
				playableCharacter2 takeInFront.
				self assert: (playableCharacter backpackIncludes: anObject6 ).
				self assert: (aRoom isObjectAt: 1@1).
			
			 ].
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:34:09'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:34:09'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:34:09'!
ERROR!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:35:02'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:35:16' prior: 50894817!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6 playableCharacter2|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 90 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			
		
			
			 ].
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:35:19'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:35:19'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:35:19'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:35:37' prior: 50894895!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6 playableCharacter2|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 90 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			
			
			 ].
	
	
	

	
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:36:13' prior: 50894956!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6 playableCharacter2|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 100 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			
			
			 ].
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:36:16'!
PASSED!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:37:25'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:37:48' prior: 50895003!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6 |

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 95 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			
			
			 ].
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:37:52'!
PASSED!

----SNAPSHOT----(10 December 2020 21:38:14) Parcial2.image priorSource: 17999255!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:34:08' prior: 50895059!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6 playableCharacter2|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 90 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			
			playableCharacter2 := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .
			playableCharacter2 := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .
				playableCharacter2 takeInFront.
				self assert: (playableCharacter backpackIncludes: anObject6 ).
				self assert: (aRoom isObjectAt: 1@1).
			
			 ].
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:38:42'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:38:42'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:38:42'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:38:59' prior: 50895113!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6 playableCharacter2|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 90 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			
		
			 ].
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:39:02'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:39:02'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:39:02'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:39:12' prior: 50895186!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6 playableCharacter2|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 100 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			
		
			 ].
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:39:15'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:39:20' prior: 50895247!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6 playableCharacter2|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 95 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			
		
			 ].
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:39:22'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:39:41' prior: 50895299!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6 playableCharacter2|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 95 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			
			playableCharacter2 := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .
			playableCharacter2 := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .
				playableCharacter2 takeInFront.
				self assert: (playableCharacter backpackIncludes: anObject6 ).
				self assert: (aRoom isObjectAt: 1@1).
			
			 ].
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:39:43'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:39:43'!
FAILURE!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:39:43'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:39:55' prior: 50895351!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6 playableCharacter2|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 95 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			
			playableCharacter2 := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .
			playableCharacter2 := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .
				playableCharacter2 takeInFront.
				
				self assert: (aRoom isObjectAt: 1@1).
			
			 ].
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:39:57'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:40:16' prior: 50895424!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6 playableCharacter2|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 95 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			
			playableCharacter2 := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .
			playableCharacter2 := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .
				playableCharacter2 takeInFront.
				self assert: (playableCharacter2 backpackIncludes: anObject6 ).
				self assert: (aRoom isObjectAt: 1@1).
			
			 ].
	
	
	

	
! !

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:40:17'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'AS 12/10/2020 21:40:44'!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpackAndASecondCharacterCanGrabThem

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6 playableCharacter2|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 95 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			
			playableCharacter2 := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .
			playableCharacter2 := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .
				playableCharacter2 takeInFront.
				self assert: (playableCharacter2 backpackIncludes: anObject6 ).
				self assert: (aRoom isObjectAt: 1@1).
			
			 ].
	
	
	

	
! !

!methodRemoval: PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack stamp: 'AS 12/10/2020 21:40:44'!
test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpack

	| playableCharacter aRoom anObject1 anObject2 anObject3 anObject4 anObject5 anObject6 playableCharacter2|

	aRoom := Room withSize: 3@3.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .

	anObject1:=NoPortableObject named: 'boxCase'.	
	anObject2:=NoPortableObject named: 'box1'.	
	anObject3:=NoPortableObject named: 'box2'.	

	anObject4:=PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5.
	
	anObject5:=PointsPortableObject named: 'right-handed hammer' weighing: 5 worth: 10.
	
	anObject6:=PointsPortableObject named: 'Heavy-orb' weighing: 95 worth: 1.

	aRoom addObject:  anObject1 at: 1@1.
	
	anObject1 addObject: anObject2 .
	
	anObject1 addObject: anObject3 .
	
	anObject2 addObject: anObject4 .
	
	anObject3 addObject: anObject5 .
	
	anObject1 addObject: anObject6 .
	
	
	
	
	self should: [playableCharacter takeInFront .]
	raise: Error withExceptionDo: [ :anError |
			self assert: anError messageText equals: (Backpack maxWeightExceededErrorDescription ).
			self assert: (playableCharacter backpackIncludes: anObject4 ).
			self assert: (playableCharacter backpackIncludes: anObject5 ).
			self deny: (playableCharacter backpackIncludes: anObject6 ).
			self assert: (aRoom isObjectAt: 1@1).
			
			playableCharacter2 := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .
			playableCharacter2 := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: (#South) in: aRoom .
				playableCharacter2 takeInFront.
				self assert: (playableCharacter2 backpackIncludes: anObject6 ).
				self assert: (aRoom isObjectAt: 1@1).
			
			 ].
	
	
	

	
!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'AS 12/10/2020 21:44:19' prior: 50893396!
takeInFront
|object frontPosition|
	frontPosition :=position + heading forwardPoint.
	
	(room isObjectAt: frontPosition) ifTrue:[	
	object:= room objectAt: frontPosition.
	self take: object .
	].

	room removeAt: frontPosition.


	
	! !

----SNAPSHOT----(10 December 2020 21:49:04) Parcial2.image priorSource: 18030678!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpackAndASecondCharacterCanGrabThem stamp: 'AS 12/10/2020 21:49:08'!
PASSED!

----SNAPSHOT----(10 December 2020 21:52:26) Parcial2.image priorSource: 18048940!
!NoPortableObject methodsFor: 'initialize' stamp: 'AS 12/10/2020 21:57:13'!
removeIfCorrect: object! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'AS 12/10/2020 22:03:52' prior: 50890909!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	self initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading in: (Room withSize: 5@5).
	"fue agregado para seguir pasando los primeros tests que usaban el character sin mapa"! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'AS 12/10/2020 22:03:59' prior: 50895766!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 
"fue agregado para seguir pasando los primeros tests que usaban el character sin mapa"
	self initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading in: (Room withSize: 5@5).
	! !
!NoPortableObject methodsFor: 'private- adding' stamp: 'AS 12/10/2020 22:04:43'!
remove: object
containedObjects remove: object! !

!methodRemoval: NoPortableObject #removeIfCorrect: stamp: 'AS 12/10/2020 22:04:48'!
removeIfCorrect: object!
!NoPortableObject methodsFor: 'private- adding' stamp: 'AS 12/10/2020 22:05:46'!
getsRemovedBy: noPortableObject
! !
!NoPortableObject methodsFor: 'private- adding' stamp: 'AS 12/10/2020 22:05:59'!
getsRemovedIfCorrectBy: noPortableObject
! !

!methodRemoval: NoPortableObject #getsRemovedBy: stamp: 'AS 12/10/2020 22:05:59'!
getsRemovedBy: noPortableObject
!
!PortableObject methodsFor: 'adding-private' stamp: 'AS 12/10/2020 22:06:48'!
getsRemovedIfCorrectBy: noPortableObject
noPortableObject remove: self.! !
!NoPortableObject methodsFor: 'adding' stamp: 'AS 12/10/2020 22:07:19' prior: 50894703 overrides: 50894142!
addTo: backpack
|iteratableContainedObject|
iteratableContainedObject:=containedObjects copy.
iteratableContainedObject do: [:object | object addTo: 	backpack.
					object getsRemovedIfCorrectBy: self].
! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpackAndASecondCharacterCanGrabThem stamp: 'AS 12/10/2020 22:07:30'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpackAndASecondCharacterCanGrabThem stamp: 'AS 12/10/2020 22:07:31'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpackAndASecondCharacterCanGrabThem stamp: 'AS 12/10/2020 22:07:33'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 22:07:34'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 22:07:34'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 22:07:35'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 22:07:35'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 22:07:35'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 22:07:35'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 22:07:35'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 22:07:35'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 22:07:35'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 22:07:35'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 22:07:35'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 22:07:35'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 22:07:35'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 22:07:35'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 22:07:35'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 22:07:35'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 22:07:35'!
PASSED!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpackAndASecondCharacterCanGrabThem stamp: 'AS 12/10/2020 22:07:35'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test11_playableCharacterInARoomCannotMoveOutsideOfBoundsForwards stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test12_playableCharacterInARoomCannotMoveOutsideOfBoundsbackwards stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test13_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceBackwards stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test14_playableCharacterInARoomCannotMoveIntoOcuppiedSpaceForwards stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test15_playableCharacterInARoomReturnErrorWhenTryingToGrabPortableObjectWhereThereIsNotOne stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test16_playableCharacterGrabsPortablleObjectThatIsInFront stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test17_playableCharacterGrabsObjectsFromNotPortableObjectAndDoesNotRemoveObjectFromRoom stamp: 'AS 12/10/2020 22:07:46'!
PASSED!

!testRun: #PlayableCharacterTest #test18_playableCharacterDoestNotGrabAllObjectsIfTheyDontFitInTheBackpackAndASecondCharacterCanGrabThem stamp: 'AS 12/10/2020 22:07:46'!
PASSED!
!Room methodsFor: 'addingOrRemovingObjects' stamp: 'AS 12/10/2020 22:08:34' prior: 50892299!
removeAt: aPoint
	self assertInsideLimitsPositionIs: aPoint .
	((objectsLocation at: aPoint ifAbsent: [self error: self class noObjectInPositionError]) isKindOf: PortableObject) ifTrue:[
	objectsLocation removeKey: aPoint ]

"No llegue a hacer el doble dispatch aqui"
	
	
! !

!testRun: #RoomTests #test01upperLightLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 22:08:47'!
PASSED!

!testRun: #RoomTests #test02bottomLeftLimitIsDefinedCorrectly stamp: 'AS 12/10/2020 22:08:47'!
PASSED!

!testRun: #RoomTests #test03outsideOnLeftIsOutsideOfBounds stamp: 'AS 12/10/2020 22:08:47'!
PASSED!

!testRun: #RoomTests #test04outsideOnBottomIsOutsideOfBounds stamp: 'AS 12/10/2020 22:08:47'!
PASSED!

!testRun: #RoomTests #test05outsideOnTopIsOutsideOfBounds stamp: 'AS 12/10/2020 22:08:47'!
PASSED!

!testRun: #RoomTests #test06outsideOnRightIsOutsideOfBounds stamp: 'AS 12/10/2020 22:08:47'!
PASSED!

!testRun: #RoomTests #test07cannotAddObjectOutsideOfBounds stamp: 'AS 12/10/2020 22:08:47'!
PASSED!

!testRun: #RoomTests #test08canAddObjectInsideOfBounds stamp: 'AS 12/10/2020 22:08:47'!
PASSED!

!testRun: #RoomTests #test09objectFinallyAddedIsTheOneThatWasAdded stamp: 'AS 12/10/2020 22:08:47'!
PASSED!

!testRun: #RoomTests #test10removingAPortableObjectRemovesIt stamp: 'AS 12/10/2020 22:08:47'!
PASSED!

!testRun: #RoomTests #test11removingPoisitionWithoutObjectGivesError stamp: 'AS 12/10/2020 22:08:47'!
PASSED!

!testRun: #RoomTests #test12cannotAddObjectInNotFreeLocation stamp: 'AS 12/10/2020 22:08:47'!
PASSED!

!testRun: #RoomTests #test13removingANotPortableDoesNothing stamp: 'AS 12/10/2020 22:08:47'!
PASSED!

----SNAPSHOT----(10 December 2020 22:08:50) Parcial2.image priorSource: 18051462!

----SNAPSHOT----(10 December 2020 22:09:06) Parcial2.image priorSource: 18067503!

----SNAPSHOT----(10 December 2020 22:10:06) Parcial2.image priorSource: 18067586!