----STARTUP---- (10 December 2020 12:59:36) as /home/john/Downloads/linux64/CuisUniversity-4384.image!


!classRemoval: #MoveUnsafelyState stamp: 'FS 12/10/2020 12:59:49'!
MarsRoverState subclass: #MoveUnsafelyState
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #MoveSafelyState stamp: 'FS 12/10/2020 12:59:49'!
MarsRoverState subclass: #MoveSafelyState
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #MarsRoverState stamp: 'FS 12/10/2020 12:59:49'!
Object subclass: #MarsRoverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #MarsRoverHeadingWest stamp: 'FS 12/10/2020 12:59:49'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'FS 12/10/2020 12:59:50'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'FS 12/10/2020 12:59:50'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #MarsRoverHeadingEast stamp: 'FS 12/10/2020 12:59:50'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #MarsRoverHeading stamp: 'FS 12/10/2020 12:59:50'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #MarsRover stamp: 'FS 12/10/2020 12:59:51'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head lastCommand groundSensor state safelyExecutedCommands'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #RockType stamp: 'FS 12/10/2020 12:59:51'!
GrountType subclass: #RockType
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #IceGroundType stamp: 'FS 12/10/2020 12:59:52'!
GrountType subclass: #IceGroundType
	instanceVariableNames: 'random'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #EarthGroundType stamp: 'FS 12/10/2020 12:59:52'!
GrountType subclass: #EarthGroundType
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #GrountType stamp: 'FS 12/10/2020 12:59:52'!
Object subclass: #GrountType
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #AllwaysEarthGroundSensor stamp: 'FS 12/10/2020 12:59:52'!
GroundSensor subclass: #AllwaysEarthGroundSensor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #GroundSensor stamp: 'FS 12/10/2020 12:59:53'!
Object subclass: #GroundSensor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

!classRemoval: #MarsRoverTest stamp: 'FS 12/10/2020 12:59:53'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'marsMap randomInteger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-IS1-2Parcial-2c2019'!

----End fileIn of /home/john/Desktop/ISW1-2020-2C-2doParcial.st----!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 13:19:08'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FS 12/10/2020 13:19:57' prior: 50878897!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |
	self halt.
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FS 12/10/2020 13:21:24' prior: 50879549!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |
	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacter class methodsFor: 'initialization' stamp: 'FS 12/10/2020 13:21:38' prior: 50879318 overrides: 16883149!
initialize
		self halt.

	self initializeHeadings! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 13:21:40'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 13:21:40'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 13:21:40'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 13:21:40'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 13:21:40'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 13:21:40'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 13:21:40'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 13:21:40'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 13:21:40'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 13:21:40'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 13:21:45'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 13:21:45'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 13:21:45'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 13:21:45'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 13:21:45'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 13:21:45'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 13:21:45'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 13:21:45'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 13:21:45'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 13:21:45'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 13:21:47'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 13:21:47'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 13:21:47'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 13:21:47'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 13:21:47'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 13:21:47'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 13:21:47'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 13:21:47'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 13:21:47'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 13:21:47'!
PASSED!
!PlayableCharacter class methodsFor: 'initialization' stamp: 'FS 12/10/2020 13:21:53' prior: 50879575 overrides: 16883149!
initialize

	self initializeHeadings! !
!PlayableCharacter class methodsFor: 'initialization' stamp: 'FS 12/10/2020 13:21:56' prior: 50879322!
initializeHeadings
			self halt.

	headings := Dictionary new.
	
	(OrderedCollection 
		with: (PlayableCharacterHeading for: #North forwardWith: 0@1 )	
		with: (PlayableCharacterHeading for: #East forwardWith: 1@0 )
		with: (PlayableCharacterHeading for: #South forwardWith: 0@-1 )
		with: (PlayableCharacterHeading for: #West forwardWith: -1@0 ))
			do: [ :heading | headings at: heading cardinalPoint put: heading ].
	
	self 
		forHeadingAt: #North leftIs: #West rightIs: #East;
		forHeadingAt: #South leftIs: #East rightIs: #West;
		forHeadingAt: #East leftIs: #North rightIs: #South;
		forHeadingAt: #West leftIs: #South rightIs: #North.
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 13:21:57'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 13:21:57'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 13:21:57'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 13:21:57'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 13:21:57'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 13:21:57'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 13:21:57'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 13:21:57'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 13:21:57'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 13:21:57'!
PASSED!
!PlayableCharacter class methodsFor: 'initialization' stamp: 'FS 12/10/2020 13:22:03' prior: 50879701!
initializeHeadings

	headings := Dictionary new.
	
	(OrderedCollection 
		with: (PlayableCharacterHeading for: #North forwardWith: 0@1 )	
		with: (PlayableCharacterHeading for: #East forwardWith: 1@0 )
		with: (PlayableCharacterHeading for: #South forwardWith: 0@-1 )
		with: (PlayableCharacterHeading for: #West forwardWith: -1@0 ))
			do: [ :heading | headings at: heading cardinalPoint put: heading ].
	
	self 
		forHeadingAt: #North leftIs: #West rightIs: #East;
		forHeadingAt: #South leftIs: #East rightIs: #West;
		forHeadingAt: #East leftIs: #North rightIs: #South;
		forHeadingAt: #West leftIs: #South rightIs: #North.
	! !
!PlayableCharacter class methodsFor: 'initialization' stamp: 'FS 12/10/2020 13:24:12' prior: 50879763!
initializeHeadings
	self halt.
	headings := Dictionary new.
	
	(OrderedCollection 
		with: (PlayableCharacterHeading for: #North forwardWith: 0@1 )	
		with: (PlayableCharacterHeading for: #East forwardWith: 1@0 )
		with: (PlayableCharacterHeading for: #South forwardWith: 0@-1 )
		with: (PlayableCharacterHeading for: #West forwardWith: -1@0 ))
			do: [ :heading | headings at: heading cardinalPoint put: heading ].
	
	self 
		forHeadingAt: #North leftIs: #West rightIs: #East;
		forHeadingAt: #South leftIs: #East rightIs: #West;
		forHeadingAt: #East leftIs: #North rightIs: #South;
		forHeadingAt: #West leftIs: #South rightIs: #North.
	! !

----QUIT----(10 December 2020 13:24:23) CuisUniversity-4384.image priorSource: 17500921!

----STARTUP---- (10 December 2020 13:24:27) as /home/john/Downloads/linux64/CuisUniversity-4384.image!

!PlayableCharacter class methodsFor: 'initialization' stamp: 'FS 12/10/2020 13:24:33' prior: 50879786!
initializeHeadings
	headings := Dictionary new.
	
	(OrderedCollection 
		with: (PlayableCharacterHeading for: #North forwardWith: 0@1 )	
		with: (PlayableCharacterHeading for: #East forwardWith: 1@0 )
		with: (PlayableCharacterHeading for: #South forwardWith: 0@-1 )
		with: (PlayableCharacterHeading for: #West forwardWith: -1@0 ))
			do: [ :heading | headings at: heading cardinalPoint put: heading ].
	
	self 
		forHeadingAt: #North leftIs: #West rightIs: #East;
		forHeadingAt: #South leftIs: #East rightIs: #West;
		forHeadingAt: #East leftIs: #North rightIs: #South;
		forHeadingAt: #West leftIs: #South rightIs: #North.
	! !

----QUIT----(10 December 2020 13:41:54) CuisUniversity-4384.image priorSource: 17541059!

----STARTUP---- (10 December 2020 16:55:30) as /home/john/Downloads/linux64/CuisUniversity-4384.image!


!classRemoval: #PointsPortableObject stamp: 'FS 12/10/2020 17:08:46'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'FS 12/10/2020 17:08:47'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PortableObject stamp: 'FS 12/10/2020 17:08:47'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #StageObject stamp: 'FS 12/10/2020 17:08:48'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'FS 12/10/2020 17:08:48'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'FS 12/10/2020 17:08:48'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Backpack stamp: 'FS 12/10/2020 17:08:49'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'FS 12/10/2020 17:08:49'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #BackpackTest stamp: 'FS 12/10/2020 17:08:50'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

----End fileIn of /home/john/Downloads/ISW1-2020-2C-2doParcial (1).st----!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 17:33:15'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 17:38:25'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'nil' stamp: 'FS 12/10/2020 17:38:22'!
test01CannotCreateRoomWithNonPositiveRowSize
	self
		should:[Room withSize:-1 by:2]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidSizeErrorDescription.! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveRowSize stamp: 'FS 12/10/2020 17:38:32'!
ERROR!
!Room class methodsFor: 'error description' stamp: 'FS 12/10/2020 17:38:51'!
invalidSizeErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error description' stamp: 'FS 12/10/2020 17:39:11' prior: 50880810!
invalidSizeErrorDescription
	^'Invalid size when created, must be positive'! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveRowSize stamp: 'FS 12/10/2020 17:39:12'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 17:39:17'!
withSize: aSmallInteger by: aSmallInteger2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithSize: aSmallInteger by: aSmallInteger2 ! !
!Room class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 17:39:46' prior: 50880824!
withSize: xLimit by: yLimit 
	^self new initializeWithSize: xLimit by: yLimit ! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveRowSize stamp: 'FS 12/10/2020 17:39:47'!
ERROR!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 17:40:05'!
Object subclass: #Room
	instanceVariableNames: 'xLimit_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 17:40:05'!
Object subclass: #Room
	instanceVariableNames: 'xLimit_CHANGE_ME yLimit_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'FS 12/10/2020 17:40:05'!
initializeWithSize: xLimit by: yLimit 
	self shouldBeImplemented.
	xLimit_CHANGE_ME := xLimit.
	yLimit_CHANGE_ME := yLimit.! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveRowSize stamp: 'FS 12/10/2020 17:40:59'!
FAILURE!

Object subclass: #Room
	instanceVariableNames: ' '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 17:41:56'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 17:42:22' prior: 50880834!
withSize: aMaxWidth by: aMaxHeight 
	^self new initializeWithSize: aMaxWidth by: aMaxHeight ! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 17:43:08'!
Object subclass: #Room
	instanceVariableNames: 'maxWidth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 17:43:09'!
Object subclass: #Room
	instanceVariableNames: 'maxWidth maxHeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'FS 12/10/2020 17:43:06' prior: 50880858!
initializeWithSize: aMaxWidth by: aMaxHeight 
	self shouldBeImplemented.
	maxWidth  := aMaxWidth.
	maxHeight  := aMaxHeight.! !
!Room class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 17:43:30' prior: 50880880!
withSize: aMaxWidth by: aMaxHeight 
	aMaxWidth positive ifFalse:[self error: self invalidSizeErrorDescription ].
	^self new initializeWithSize: aMaxWidth by: aMaxHeight ! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveRowSize stamp: 'FS 12/10/2020 17:43:30'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 17:43:41'!
test02CannotCreateRoomWithNonPositiveRowSize
	self
		should:[Room withSize: 2 by: -1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidSizeErrorDescription.! !
!Room methodsFor: 'initialization' stamp: 'FS 12/10/2020 17:43:50' prior: 50880901!
initializeWithSize: aMaxWidth by: aMaxHeight 
	maxWidth  := aMaxWidth.
	maxHeight  := aMaxHeight.! !
!Room class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 17:44:02' prior: 50880908!
withSize: aMaxWidth by: aMaxHeight 
	aMaxWidth positive ifFalse:[self error: self invalidSizeErrorDescription ].
	
	aMaxHeight positive ifFalse:[self error: self invalidSizeErrorDescription ].

	^self new initializeWithSize: aMaxWidth by: aMaxHeight ! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveRowSize stamp: 'FS 12/10/2020 17:44:03'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveRowSize stamp: 'FS 12/10/2020 17:44:03'!
PASSED!
!Room class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 17:44:27'!
assertPositiveSizeOf: aMaxHeight

	^ aMaxHeight positive ifFalse:[self error: self invalidSizeErrorDescription ]! !
!Room class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 17:44:27' prior: 50880936!
withSize: aMaxWidth by: aMaxHeight 
	aMaxWidth positive ifFalse:[self error: self invalidSizeErrorDescription ].
	
	self assertPositiveSizeOf: aMaxHeight.

	^self new initializeWithSize: aMaxWidth by: aMaxHeight ! !
!Room class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 17:44:40' prior: 50880961!
withSize: aMaxWidth by: aMaxHeight 
	self assertPositiveSizeOf: aMaxWidth.
	self assertPositiveSizeOf: aMaxHeight.

	^self new initializeWithSize: aMaxWidth by: aMaxHeight ! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveRowSize stamp: 'FS 12/10/2020 17:44:41'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveRowSize stamp: 'FS 12/10/2020 17:44:41'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 17:44:57'!
test02CannotCreateRoomWithNonPositiveHeightSize
	self
		should:[Room withSize: 2 by: -1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidSizeErrorDescription.! !

!methodRemoval: RoomTest #test02CannotCreateRoomWithNonPositiveRowSize stamp: 'FS 12/10/2020 17:44:59'!
test02CannotCreateRoomWithNonPositiveRowSize
	self
		should:[Room withSize: 2 by: -1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidSizeErrorDescription.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 17:45:18' prior: 50880798!
test01CannotCreateRoomWithNonPositiveRowSize
	self
		should:[Room withSize: -1 by: 3 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidSizeErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 17:45:24'!
test01CannotCreateRoomWithNonPositiveWidthSize
	self
		should:[Room withSize: -1 by: 3 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidSizeErrorDescription.! !

!methodRemoval: RoomTest #test01CannotCreateRoomWithNonPositiveRowSize stamp: 'FS 12/10/2020 17:45:25'!
test01CannotCreateRoomWithNonPositiveRowSize
	self
		should:[Room withSize: -1 by: 3 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidSizeErrorDescription.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 17:45:30'!
test03
	self
		should:[Room withSize: 2 by: -1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidSizeErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 17:46:53'!
test03PlayableCharacterStartsAtCorrectPosition
	self
		should:[Room withSize: 2 by: -1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidSizeErrorDescription.! !

!methodRemoval: RoomTest #test03 stamp: 'FS 12/10/2020 17:46:55'!
test03
	self
		should:[Room withSize: 2 by: -1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidSizeErrorDescription.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 17:49:52'!
test03PlayableCharacterStartsAtValidPosition
	self
		should:[Room withSize: 2 by: -1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidSizeErrorDescription.! !

!methodRemoval: RoomTest #test03PlayableCharacterStartsAtCorrectPosition stamp: 'FS 12/10/2020 17:49:54'!
test03PlayableCharacterStartsAtCorrectPosition
	self
		should:[Room withSize: 2 by: -1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidSizeErrorDescription.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 17:50:34' prior: 50881053!
test03PlayableCharacterStartsAtValidPosition
	PlayableCharacter .
	Room withSize: 2 by: -1 ! !
!Room methodsFor: 'nil' stamp: 'FS 12/10/2020 17:51:34'!
defaultPlayableCharacter
	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North! !
!Room methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 17:51:41' prior: 50881076!
defaultPlayableCharacter
	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North! !
!Room methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 17:51:48'!
defaultBackpack
 ! !

Object subclass: #GameObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #GameObjectsFactory category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 17:52:08'!
Object subclass: #GameObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 17:52:20'!
Object subclass: #Room
	instanceVariableNames: 'maxWidth maxHeight testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'nil' stamp: 'FS 12/10/2020 17:52:19'!
setUp
	testObjectFactory _ GameObjectsFactory new.! !
!GameObjectsFactory methodsFor: 'nil' stamp: 'FS 12/10/2020 17:52:28'!
defaultPlayableCharacter
	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North! !
!GameObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 17:52:42'!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !

!classDefinition: #PlayableCharacterTest category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 17:53:05'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 17:53:04' overrides: 16927572!
setUp
	testObjectFactory _ GameObjectsFactory new.! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 17:53:21' prior: 50880270!
defaultBackpack

	^testObjectFactory defaultBackpack ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 17:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 17:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 17:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 17:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 17:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 17:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 17:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 17:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 17:53:22'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 17:53:22'!
PASSED!

!methodRemoval: Room #setUp stamp: 'FS 12/10/2020 17:59:20'!
setUp
	testObjectFactory _ GameObjectsFactory new.!

Object subclass: #Room
	instanceVariableNames: 'maxWidth maxHeight  '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 17:59:24'!
Object subclass: #Room
	instanceVariableNames: 'maxWidth maxHeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!methodRemoval: Room #defaultPlayableCharacter stamp: 'FS 12/10/2020 17:59:26'!
defaultPlayableCharacter
	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North!

!methodRemoval: Room #defaultBackpack stamp: 'FS 12/10/2020 17:59:29'!
defaultBackpack
 !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 17:59:32'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 17:59:32'!
PASSED!

!testRun: #RoomTest #test03PlayableCharacterStartsAtValidPosition stamp: 'FS 12/10/2020 17:59:32'!
ERROR!

!testRun: #RoomTest #test03PlayableCharacterStartsAtValidPosition stamp: 'FS 12/10/2020 17:59:32'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 17:59:38' prior: 50881071!
test03PlayableCharacterStartsAtValidPosition
	PlayableCharacter .
	Room withSize: 2 by: 1 ! !

!testRun: #RoomTest #test03PlayableCharacterStartsAtValidPosition stamp: 'FS 12/10/2020 17:59:39'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 17:59:39'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 17:59:39'!
PASSED!

!testRun: #RoomTest #test03PlayableCharacterStartsAtValidPosition stamp: 'FS 12/10/2020 17:59:39'!
PASSED!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 17:59:53'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 17:59:51' overrides: 16927572!
setUp
	testObjectFactory _ GameObjectsFactory new.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:00:09' prior: 50881226!
test03PlayableCharacterStartsAtValidPosition
	| playableCharacter |
	playableCharacter _ testObjectFactory defaultPlayableCharacter ..
	Room withSize: 2 by: 1 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:00:16' prior: 50881259!
test03PlayableCharacterStartsAtValidPosition
	| playableCharacter |
	playableCharacter _ testObjectFactory defaultPlayableCharacter . 
	Room withSize: 2 by: 1 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:07:04'!
test03PlayableCannotMoveOutOfBoundsBelowTheRoom
	| playableCharacter |
	playableCharacter _ testObjectFactory defaultPlayableCharacter . 
	Room withSize: 3 by: 3 ! !

!methodRemoval: RoomTest #setUp stamp: 'FS 12/10/2020 18:07:19'!
setUp
	testObjectFactory _ GameObjectsFactory new.!

!methodRemoval: RoomTest #test03PlayableCharacterStartsAtValidPosition stamp: 'FS 12/10/2020 18:07:22'!
test03PlayableCharacterStartsAtValidPosition
	| playableCharacter |
	playableCharacter _ testObjectFactory defaultPlayableCharacter . 
	Room withSize: 2 by: 1 !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:07:29' prior: 50881275!
test03PlayableCannotMoveOutOfBoundsBelowTheRoom
	| playableCharacter |
	playableCharacter _ testObjectFactory defaultPlayableCharacter . 
	Room withSize: 3 by: 3 ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 18:07:43'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 18:07:43'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 18:07:43'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 18:07:43'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 18:07:43'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 18:07:43'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 18:07:43'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 18:07:43'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 18:07:43'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 18:07:43'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:08:42' prior: 50881296!
test03PlayableCannotMoveOutOfBoundsBelowTheRoom
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: newRoom .
! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 18:10:46'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:10:46' prior: 50880245!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: (Room withSize: 3 by: 3) .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:10:46' prior: 50880143!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: (Room withSize: 3 by: 3) .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:10:46' prior: 50880219!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X in: (Room withSize: 3 by: 3) ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!GameObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:10:46' prior: 50881117!
defaultPlayableCharacter
	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: (Room withSize: 3 by: 3)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:10:46' prior: 50880166!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: (Room withSize: 3 by: 3) .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:10:46' prior: 50880155!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: (Room withSize: 3 by: 3) .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:10:46' prior: 50880191!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South in: (Room withSize: 3 by: 3) .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:10:46' prior: 50880232!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: (Room withSize: 3 by: 3) .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:10:46' prior: 50880131!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: (Room withSize: 3 by: 3) .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:10:46' prior: 50880177!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East in: (Room withSize: 3 by: 3) .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:10:46' prior: 50880205!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West in: (Room withSize: 3 by: 3) .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !

!methodRemoval: PlayableCharacter class #named:using:at:heading: stamp: 'FS 12/10/2020 18:10:46'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 18:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 18:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 18:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 18:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 18:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 18:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 18:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 18:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 18:10:47'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 18:10:47'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:13:26' prior: 50881343!
test03PlayableCannotMoveOutOfBoundsBelowTheRoom
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsSelectionErrorMessage]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:13:29' prior: 50881578!
test03PlayableCannotMoveOutOfBoundsBelowTheRoom
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !

!testRun: #RoomTest #test03PlayableCannotMoveOutOfBoundsBelowTheRoom stamp: 'FS 12/10/2020 18:13:33'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:13:52'!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !

!testRun: #RoomTest #test03PlayableCannotMoveOutOfBoundsBelowTheRoom stamp: 'FS 12/10/2020 18:13:54'!
FAILURE!

!testRun: #RoomTest #test03PlayableCannotMoveOutOfBoundsBelowTheRoom stamp: 'FS 12/10/2020 18:13:54'!
FAILURE!
!Room class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 18:15:11'!
outOfBoundsErrorDescrpition
	^'out of bounds!!'! !

!testRun: #RoomTest #test03PlayableCannotMoveOutOfBoundsBelowTheRoom stamp: 'FS 12/10/2020 18:15:40'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'FS 12/10/2020 18:16:03' prior: 50880491!
moveForward
	
	| newPosition |
	newPosition _ position + heading forwardPoint.
	
	position := position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'FS 12/10/2020 18:16:11' prior: 50881635!
moveForward
	
	| newPosition |
	newPosition _ position + heading forwardPoint.
	
	position := position + heading forwardPoint! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 18:16:24' prior: 50881354!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in:aRoom! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'FS 12/10/2020 18:16:35'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading in: aRoom

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading! !

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 18:16:46'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'initialization' stamp: 'FS 12/10/2020 18:16:45' prior: 50881661!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading in: aRoom

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room _ aRoom! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 18:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 18:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 18:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 18:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 18:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 18:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 18:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 18:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 18:16:48'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 18:16:48'!
PASSED!

!methodRemoval: PlayableCharacter #initializeNamed:using:at:heading: stamp: 'FS 12/10/2020 18:16:53'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading!
!PlayableCharacter methodsFor: 'moving' stamp: 'FS 12/10/2020 18:21:32' prior: 50881642!
moveForward
	
	| newPosition |
	newPosition _ position + heading forwardPoint.
	room assertIsAValidPossition.
	position := position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'FS 12/10/2020 18:22:54' prior: 50881736!
moveForward
	
	| newPosition |
	newPosition _ position + heading forwardPoint.
	room assertItsInbounds: newPosition.
	position := position + heading forwardPoint! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:23:26'!
test03PlayableCannotMoveForwardsOutOfBoundsBelowTheRoom
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !

!methodRemoval: RoomTest #test03PlayableCannotMoveOutOfBoundsBelowTheRoom stamp: 'FS 12/10/2020 18:23:26'!
test03PlayableCannotMoveOutOfBoundsBelowTheRoom
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:24:08'!
test04PlayableCannotMoveForwardsOutsideTheRoom
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !

!methodRemoval: RoomTest #test04PlayableCannotMoveForwardsOutsideTheRoom stamp: 'FS 12/10/2020 18:24:18'!
test04PlayableCannotMoveForwardsOutsideTheRoom
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:24:47'!
test03PlayableCannotMoveForwardsOutOfBoundsToTheLeft
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:25:06'!
test03PlayableCannotMoveForwardsOutOfBoundsBelow
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !

!methodRemoval: RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelowTheRoom stamp: 'FS 12/10/2020 18:25:08'!
test03PlayableCannotMoveForwardsOutOfBoundsBelowTheRoom
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:25:17' prior: 50881818!
test03PlayableCannotMoveForwardsOutOfBoundsToTheLeft
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:25:19'!
ERROR!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:25:22'!
ERROR!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:25:22'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:25:31'!
assertItsInbounds: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:26:29' prior: 50881896!
assertItsInbounds: aPosition 
	aPosition y >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ]! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:26:30'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:26:30'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:26:30'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:26:30'!
FAILURE!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:26:30'!
FAILURE!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:26:33'!
PASSED!
!Room methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:27:00' prior: 50881901!
assertItsInbounds: aPosition 
	aPosition y >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition x >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ]! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:27:01'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:27:01'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:27:01'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:27:01'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:27:06'!
test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !

!methodRemoval: RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:27:08'!
test03PlayableCannotMoveForwardsOutOfBoundsToTheLeft
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:27:19'!
test05PlayableCannotMoveForwardsOutOfBoundsAbove
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:27:22'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:27:34' prior: 50881986!
test05PlayableCannotMoveForwardsOutOfBoundsAbove
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #North in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:27:36'!
FAILURE!

 self instanceVariablesString!
!Room methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:28:54' prior: 50881929!
assertItsInbounds: aPosition 
	aPosition y >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition x >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition y <= maxWidth ifFalse: [ self error: self class outOfBoundsErrorDescrpition ]! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:28:55'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:28:55'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:28:55'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:28:55'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:28:55'!
FAILURE!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:28:55'!
FAILURE!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 18:29:33'!
Object subclass: #Room
	instanceVariableNames: 'widthLimit maxHeight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:29:33' prior: 50880929!
initializeWithSize: aMaxWidth by: aMaxHeight 
	widthLimit  := aMaxWidth.
	maxHeight  := aMaxHeight.! !
!Room methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:29:33' prior: 50882027!
assertItsInbounds: aPosition 
	aPosition y >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition x >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition y <= widthLimit ifFalse: [ self error: self class outOfBoundsErrorDescrpition ]! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 18:29:40'!
Object subclass: #Room
	instanceVariableNames: 'widthLimit heightLimit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:29:40' prior: 50882068!
initializeWithSize: aMaxWidth by: aMaxHeight 
	widthLimit  := aMaxWidth.
	heightLimit  := aMaxHeight.! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:29:46'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:29:46'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:29:46'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:29:46'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:29:46'!
FAILURE!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:29:46'!
FAILURE!
!Room methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:29:54' prior: 50882074!
assertItsInbounds: aPosition 
	aPosition y >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition x >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition y < widthLimit ifFalse: [ self error: self class outOfBoundsErrorDescrpition ]! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:29:55'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:29:55'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:29:55'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:29:55'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:29:55'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:30:10' prior: 50882006!
test05PlayableCannotMoveForwardsOutOfBoundsAbove
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	self halt.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #North in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !
!Room methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:30:48' prior: 50882121!
assertItsInbounds: aPosition 
	aPosition y >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition x >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition y <= widthLimit ifFalse: [ self error: self class outOfBoundsErrorDescrpition ]! !
!Room methodsFor: 'initialization' stamp: 'FS 12/10/2020 18:30:56' prior: 50882094!
initializeWithSize: aMaxWidth by: aMaxHeight 
	widthLimit  := aMaxWidth -1.
	heightLimit  := aMaxHeight -1.! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:30:57'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:30:57'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:30:57'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:30:57'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:31:02' prior: 50882151!
test05PlayableCannotMoveForwardsOutOfBoundsAbove
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #North in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:31:03'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:31:05'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:31:12'!
test06PlayableCannotMoveForwardsOutOfBoundsToTheRight
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #North in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:31:21' prior: 50882224!
test06PlayableCannotMoveForwardsOutOfBoundsToTheRight
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@0 heading: #East in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !
!Room methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:31:53' prior: 50882168!
assertItsInbounds: aPosition 
	aPosition y >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition x >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition y <= heightLimit ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition x <=  widthLimit ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:31:54'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:31:54'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:31:54'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:31:54'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:31:54'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 18:31:54'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 18:32:13'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:32:30'!
test07BackwardsOutOfBounds 
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@0 heading: #East in: newRoom .
	self
		should:[playableCharacter moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:32:36' prior: 50882298!
test07BackwardsOutOfBounds 
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West in: newRoom .
	self
		should:[playableCharacter moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !

!testRun: #RoomTest #test07BackwardsOutOfBounds stamp: 'FS 12/10/2020 18:32:37'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'FS 12/10/2020 18:33:10' prior: 50880486!
moveBackward
	| newPosition |
	newPosition _ position - heading forwardPoint .
	room assertItsInbounds: newPosition.
	position := position - heading forwardPoint ! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 18:33:11'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 18:33:11'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 18:33:11'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 18:33:11'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 18:33:11'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 18:33:11'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 18:33:11'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 18:33:11'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 18:33:11'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 18:33:11'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 18:33:24'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 18:33:24'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 18:33:24'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 18:33:24'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 18:33:24'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 18:33:24'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 18:33:24'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 18:33:24'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 18:33:24'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 18:33:24'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 18:33:26'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FS 12/10/2020 18:33:44' prior: 50881484!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North in: (Room withSize: 5 by: 5) .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 18:33:45'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FS 12/10/2020 18:33:49' prior: 50881498!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East in: (Room withSize: 5 by: 5) .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 18:33:50'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 18:33:53'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 18:33:54'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 18:33:54'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:33:54'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:33:54'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:33:54'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:33:54'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:33:54'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 18:33:54'!
PASSED!

!testRun: #RoomTest #test07BackwardsOutOfBounds stamp: 'FS 12/10/2020 18:33:54'!
FAILURE!

!testRun: #RoomTest #test07BackwardsOutOfBounds stamp: 'FS 12/10/2020 18:33:54'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'FS 12/10/2020 18:34:09' prior: 50882333!
moveBackward
	| newPosition |
	newPosition _ position - heading forwardPoint .
	room assertItsInbounds: newPosition.
	position := newPosition! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:34:26'!
test07PlayerCannotBackwardsOutOfBounds 
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West in: newRoom .
	self
		should:[playableCharacter moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !

!methodRemoval: RoomTest #test07BackwardsOutOfBounds stamp: 'FS 12/10/2020 18:34:28'!
test07BackwardsOutOfBounds 
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West in: newRoom .
	self
		should:[playableCharacter moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 18:34:29'!
FAILURE!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 18:34:29'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:35:11' prior: 50882585!
test07PlayerCannotBackwardsOutOfBounds 
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #East in: newRoom .
	self
		should:[playableCharacter moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 18:35:11'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:35:11'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:35:11'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:35:11'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:35:11'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:35:11'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 18:35:11'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 18:35:11'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:39:12'!
test08CannotCreateRoomWithOutOfBoundsItems
	|  newRoom items playableCharacter |
	items _ Dictionary new at: 3@3 put: PortableObject .
	newRoom _ Room withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #East in: newRoom .
	self
		should:[playableCharacter moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:40:15' prior: 50882668!
test08CannotCreateRoomWithOutOfBoundsItems
	|  newRoom items playableCharacter portableObject |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.

	items _ Dictionary new at: 3@3 put: PortableObject .
	newRoom _ Room withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #East in: newRoom .
	self
		should:[playableCharacter moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:40:25' prior: 50882687!
test08CannotCreateRoomWithOutOfBoundsItems
	|  newRoom items playableCharacter portableObject |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 3@3 put: portableObject .
	newRoom _ Room withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #East in: newRoom .
	self
		should:[playableCharacter moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition]
! !

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 18:40:27'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:40:52' prior: 50882709!
test08CannotCreateRoomWithOutOfBoundsItems
	|  newRoom items playableCharacter portableObject |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 3@3 put: portableObject .
	self
		should:[ Room withSize: 3 by: 3 with: items.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room itemsOutOfBoundsErrorDescrpition]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:41:01' prior: 50882734!
test08CannotCreateRoomWithOutOfBoundsItems
	|    items playableCharacter portableObject |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 3@3 put: portableObject .
	self
		should:[ Room withSize: 3 by: 3 with: items.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room itemsOutOfBoundsErrorDescrpition]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:41:03' prior: 50882751!
test08CannotCreateRoomWithOutOfBoundsItems
	|   s items playableCharacter portableObject |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 3@3 put: portableObject .
	self
		should:[ Room withSize: 3 by: 3 with: items.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room itemsOutOfBoundsErrorDescrpition]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:41:06' prior: 50882768!
test08CannotCreateRoomWithOutOfBoundsItems
	|    items portableObject |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 3@3 put: portableObject .
	self
		should:[ Room withSize: 3 by: 3 with: items.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room itemsOutOfBoundsErrorDescrpition]
! !
!Room class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 18:41:35'!
withSize: aMaxWidth by: aMaxHeight with: aMapOfItemps
	self assertPositiveSizeOf: aMaxWidth.
	self assertPositiveSizeOf: aMaxHeight.

	^self new initializeWithSize: aMaxWidth by: aMaxHeight ! !
!Room class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 18:41:58' prior: 50882801!
withSize: aMaxWidth by: aMaxHeight with: aMapOfItemps
	self assertPositiveSizeOf: aMaxWidth.
	self assertPositiveSizeOf: aMaxHeight.
	self assertItemsAreInbound: aMapOfItemps.
	^self new initializeWithSize: aMaxWidth by: aMaxHeight ! !
!Room class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 18:42:01' prior: 50882810!
withSize: aMaxWidth by: aMaxHeight with: aMapOfItemps
	self assertPositiveSizeOf: aMaxWidth.
	self assertPositiveSizeOf: aMaxHeight.
	self assertItemsAreInbound: aMapOfItemps.
	
	^self new initializeWithSize: aMaxWidth by: aMaxHeight ! !
!Room class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 18:42:19' prior: 50880971!
withSize: aMaxWidth by: aMaxHeight 
	 

	^self withSize: aMaxWidth by: aMaxHeight with: Dictionary new.! !

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 18:42:25'!
ERROR!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 18:42:25'!
ERROR!
!Room class methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:42:35'!
assertItemsAreInbound: aNoPointsPortableObject 
	self shouldBeImplemented.! !

!methodRemoval: Room class #assertItemsAreInbound: stamp: 'FS 12/10/2020 18:44:14'!
assertItemsAreInbound: aNoPointsPortableObject 
	self shouldBeImplemented.!
!Room class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 18:44:45' prior: 50882821!
withSize: aMaxWidth by: aMaxHeight with: aMapOfItemps
	self assertPositiveSizeOf: aMaxWidth.
	self assertPositiveSizeOf: aMaxHeight.
	self assertItemsAreInbound: aMapOfItemps within: aMaxWidth by: aMaxHeight.
	
	^self new initializeWithSize: aMaxWidth by: aMaxHeight ! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:44:46'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:44:46'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:44:46'!
ERROR!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:44:46'!
ERROR!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:44:46'!
ERROR!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 18:44:46'!
ERROR!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 18:44:46'!
ERROR!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 18:44:46'!
ERROR!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:44:50'!
ERROR!
!Room class methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:44:56'!
assertItemsAreInbound: aDictionary within: aSmallInteger by: aSmallInteger3 
	self shouldBeImplemented.! !
!Room class methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:47:45' prior: 50882898!
assertItemsAreInbound: anItemMap within: aWidth by: aHeight 
	anItemMap keysDo: [ :aPosition |  (aPosition x>= 0) and:( aPosition x<aWidth) 
								and: ((aPosition y>= 0) and:( aPosition y<aHeight) )]! !
!Room class methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:47:56' prior: 50882905!
assertItemsAreInbound: anItemMap within: aWidth by: aHeight 
	| itemMapPositions |
	itemMapPositions _ anItemMap keys.
	anItemMap keysDo: [ :aPosition |  (aPosition x>= 0) and:( aPosition x<aWidth) 
								and: ((aPosition y>= 0) and:( aPosition y<aHeight) )]! !
!Room class methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:48:07' prior: 50882915!
assertItemsAreInbound: anItemMap within: aWidth by: aHeight 
	| itemMapPositions |
	itemMapPositions _ anItemMap keys.
	itemMapPositions allSatisfy: [ :aPosition |  (aPosition x>= 0) and:( aPosition x<aWidth) 
								and: ((aPosition y>= 0) and:( aPosition y<aHeight) )]! !
!Room class methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:48:51' prior: 50882926!
assertItemsAreInbound: anItemMap within: aWidth by: aHeight 
	| itemMapPositions |
	itemMapPositions _ anItemMap keys.
	(itemMapPositions allSatisfy: [ :aPosition |  (aPosition x>= 0) and:( aPosition x<aWidth) 
								and: ((aPosition y>= 0) and:( aPosition y<aHeight) )])
							ifFalse:[self error: self itemsOutOfBoundsErrorDescrpition]! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:48:53'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:48:53'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:48:53'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:48:53'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:48:53'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 18:48:53'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 18:48:53'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 18:48:53'!
ERROR!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 18:48:53'!
ERROR!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:49:20'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 18:49:27'!
ERROR!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 18:49:27'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:49:41' prior: 50882785!
test08CannotCreateRoomWithOutOfBoundsItems
	|    items portableObject |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 3@3 put: portableObject;yourself .
	self
		should:[ Room withSize: 3 by: 3 with: items.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room itemsOutOfBoundsErrorDescrpition]
! !

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 18:49:42'!
ERROR!
!Room class methodsFor: 'error description' stamp: 'FS 12/10/2020 18:49:56'!
itemsOutOfBoundsErrorDescrpition
	self shouldBeImplemented.! !
!Room class methodsFor: 'error description' stamp: 'FS 12/10/2020 18:50:06' prior: 50883012!
itemsOutOfBoundsErrorDescrpition
	^'Items are out of bounds!!'! !

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 18:50:07'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:50:07'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:50:07'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:50:07'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:50:07'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:50:07'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 18:50:07'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 18:50:07'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 18:50:07'!
PASSED!
!Room class methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:52:45'!
position: aPosition isWithin: aWidth by: aHeight 
 	^(aPosition x>= 0) and:( aPosition x<aWidth) 					
					and: ((aPosition y>= 0) and:( aPosition y<aHeight) )
					! !
!Room class methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:53:13' prior: 50882938!
assertItemsAreInbound: anItemMap within: aWidth by: aHeight 
	| itemMapPositions |
	itemMapPositions _ anItemMap keys.
	(itemMapPositions allSatisfy: [ :aPosition | self  position: aPosition isWithin: aWidth by: aHeight ])
							ifFalse:[self error: self itemsOutOfBoundsErrorDescrpition]! !
!Room class methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:53:55'!
Items: aWidth areWithin: itemMapPositions by: aHeight

	^ itemMapPositions allSatisfy: [ :aPosition | self  position: aPosition isWithin: aWidth by: aHeight ]! !
!Room class methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:53:55' prior: 50883061!
assertItemsAreInbound: anItemMap within: aWidth by: aHeight 
	| itemMapPositions |
	itemMapPositions _ anItemMap keys.
	(self Items: aWidth areWithin: itemMapPositions by: aHeight)
							ifFalse:[self error: self itemsOutOfBoundsErrorDescrpition]! !
!Room class methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:54:13' prior: 50883081!
assertItemsAreInbound: anItemMap within: aWidth by: aHeight 
	| itemMapPositions |
	itemMapPositions _ anItemMap keys.
	(self Items: itemMapPositions areWithin:  aWidth by: aHeight)
							ifFalse:[self error: self itemsOutOfBoundsErrorDescrpition]! !
!Room class methodsFor: 'testing' stamp: 'FS 12/10/2020 18:54:40'!
positions: aWidth areWithin: itemMapPositions by: aHeight

	^ itemMapPositions allSatisfy: [ :aPosition | self  position: aPosition isWithin: aWidth by: aHeight ]! !
!Room class methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:54:40' prior: 50883092!
assertItemsAreInbound: anItemMap within: aWidth by: aHeight 
	| itemMapPositions |
	itemMapPositions _ anItemMap keys.
	(self positions: itemMapPositions areWithin:  aWidth by: aHeight)
							ifFalse:[self error: self itemsOutOfBoundsErrorDescrpition]! !

!methodRemoval: Room class #Items:areWithin:by: stamp: 'FS 12/10/2020 18:54:40'!
Items: aWidth areWithin: itemMapPositions by: aHeight

	^ itemMapPositions allSatisfy: [ :aPosition | self  position: aPosition isWithin: aWidth by: aHeight ]!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:54:44'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:54:44'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:54:44'!
ERROR!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:54:44'!
ERROR!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:54:44'!
ERROR!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 18:54:44'!
ERROR!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 18:54:44'!
ERROR!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 18:54:44'!
ERROR!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:54:45'!
ERROR!
!Room class methodsFor: 'testing' stamp: 'FS 12/10/2020 18:55:01' prior: 50883102!
positions: itemMapPositions  areWithin: aWidth  by: aHeight

	^ itemMapPositions allSatisfy: [ :aPosition | self  position: aPosition isWithin: aWidth by: aHeight ]! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:55:02'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:55:02'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:55:02'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:55:02'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:55:02'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 18:55:02'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 18:55:02'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 18:55:02'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:55:57' prior: 50881835!
test03PlayableCannotMoveForwardsOutOfBoundsBelow
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition.
							   self assert playableCharacter isAt: 0@0 heading: #South]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:56:00' prior: 50883197!
test03PlayableCannotMoveForwardsOutOfBoundsBelow
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition.
							   self assert playableCharacter isAt: 0@0 heading: #South ]
! !

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:56:00'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:56:18' prior: 50883216!
test03PlayableCannotMoveForwardsOutOfBoundsBelow
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition.
							   self assert: (playableCharacter isAt: 0@0 heading: #South )]
! !

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:56:18'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:56:18'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:56:18'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:56:18'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:56:18'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:56:18'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 18:56:18'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 18:56:18'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 18:56:18'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:56:29' prior: 50881952!
test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition.
								self assert: (playableCharacter isAt: 0@0 heading: #South )]
! !

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:56:30'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:56:35' prior: 50883288!
test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition.
								self assert: (playableCharacter isAt: 0@0 heading: #West )]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:56:54' prior: 50882201!
test05PlayableCannotMoveForwardsOutOfBoundsAbove
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #North in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition.		
								self assert: (playableCharacter isAt: 0@2 heading: #North )]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:57:03' prior: 50882241!
test06PlayableCannotMoveForwardsOutOfBoundsToTheRight
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@0 heading: #East in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition.
								self assert: (playableCharacter isAt: 2@0 heading: #East )]
! !

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 18:57:04'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:57:04'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:57:04'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:57:04'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:57:04'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:57:04'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 18:57:04'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 18:57:04'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 18:57:04'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 18:57:13' prior: 50882624!
test07PlayerCannotBackwardsOutOfBounds 
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #East in: newRoom .
	self
		should:[playableCharacter moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition.
								self assert: (playableCharacter isAt: 0@0 heading: #East )]
! !

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 18:57:13'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 18:57:13'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 18:57:13'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 18:57:13'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 18:57:13'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 18:57:13'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 18:57:13'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 18:57:13'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 18:57:13'!
PASSED!
!PlayableCharacter methodsFor: 'initialization' stamp: 'FS 12/10/2020 19:02:52' prior: 50881679!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading in: aRoom
	aRoom player: self enteredAt: aPosition.

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room _ aRoom
	! !

Object subclass: #Room
	instanceVariableNames: 'widthLimit heightLimit map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 19:07:37'!
Object subclass: #Room
	instanceVariableNames: 'widthLimit heightLimit map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'nil' stamp: 'FS 12/10/2020 19:08:06'!
player: aPlayer enteredAt: aPosition
	map at: aPosition put: aPlayer.! !
!PlayableCharacter methodsFor: 'moving' stamp: 'FS 12/10/2020 19:08:39' prior: 50882578!
moveBackward
	| newPosition |
	newPosition _ position - heading forwardPoint .
	room movePlayerFrom: position to: newPosition.
	position := newPosition! !
!PlayableCharacter methodsFor: 'moving' stamp: 'FS 12/10/2020 19:08:54' prior: 50881744!
moveForward
	
	| newPosition |
	newPosition _ position + heading forwardPoint.
	room movePlayerFrom: position to: newPosition.
	position := position + heading forwardPoint! !
!PlayableCharacter methodsFor: 'moving' stamp: 'FS 12/10/2020 19:09:00' prior: 50883486!
moveForward
	
	| newPosition |
	newPosition _ position + heading forwardPoint.
	room movePlayerFrom: position to: newPosition.
	position := newPosition! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 19:09:02'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 19:09:02'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 19:09:02'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 19:09:02'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 19:09:02'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 19:09:02'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 19:09:02'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 19:09:02'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 19:09:02'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 19:09:02'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 19:09:05'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'FS 12/10/2020 19:09:58' prior: 50882180!
initializeWithSize: aMaxWidth by: aMaxHeight 
	widthLimit  := aMaxWidth -1.
	heightLimit  := aMaxHeight -1.
	map _ Dictionary new.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 19:10:00'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 19:10:00'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 19:10:00'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 19:10:00'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 19:10:00'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 19:10:00'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 19:10:00'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 19:10:00'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 19:10:00'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 19:10:00'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 19:10:01'!
ERROR!
!Room methodsFor: 'player actions' stamp: 'FS 12/10/2020 19:10:16'!
movePlayerFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!Room methodsFor: 'player actions' stamp: 'FS 12/10/2020 19:11:10' prior: 50883594!
movePlayerFrom: aSourcePoint to: aTargetPoint 
	map removeKey: aSourcePoint.
	map at:aSourcePoint put:aTargetPoint
	! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:11:10'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:11:10'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:11:10'!
FAILURE!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 19:11:10'!
FAILURE!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 19:11:10'!
FAILURE!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 19:11:10'!
FAILURE!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 19:11:10'!
FAILURE!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 19:11:10'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:11:12'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 19:11:20'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 19:11:20'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 19:11:20'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 19:11:20'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 19:11:20'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 19:11:20'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 19:11:20'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 19:11:20'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 19:11:20'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 19:11:20'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 19:11:21'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 19:11:28'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 19:11:55'!
ERROR!
!Room methodsFor: 'player actions' stamp: 'FS 12/10/2020 19:12:55' prior: 50883599!
movePlayerFrom: aSourcePoint to: aTargetPoint 
	| playerToMove |
	playerToMove _ map removeKey: aSourcePoint.
	map at: aTargetPoint put:playerToMove
	! !

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 19:12:57'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 19:13:00'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 19:13:01'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 19:13:01'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 19:13:03'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 19:13:03'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:13:22'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:13:24'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:13:25'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:13:27'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:13:27'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:13:27'!
FAILURE!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 19:13:27'!
FAILURE!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 19:13:27'!
FAILURE!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 19:13:27'!
FAILURE!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 19:13:27'!
FAILURE!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 19:13:27'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:13:29'!
FAILURE!
!Room methodsFor: 'player actions' stamp: 'FS 12/10/2020 19:14:13' prior: 50883687!
movePlayerFrom: aSourcePoint to: aTargetPoint 
	| playerToMove |
	self assertItsInbounds: aTargetPoint.
	playerToMove _ map removeKey: aSourcePoint.
	map at: aTargetPoint put:playerToMove
	! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:14:15'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:14:15'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:14:15'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 19:14:15'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 19:14:15'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 19:14:15'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 19:14:15'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 19:14:15'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:16:10'!
test09CannotPlacePlayerOnOccupiedPosition
	|   items portableObject |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 3@3 put: portableObject; yourself .
	self
		should:[ Room withSize: 3 by: 3 with: items.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room itemsOutOfBoundsErrorDescrpition]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:16:27' prior: 50883827!
test09CannotPlacePlayerOnOccupiedPosition
	|   items portableObject |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 3@3 put: portableObject; yourself .
	Room withSize: 3 by: 3 with: items.
		! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:16:38' prior: 50883843!
test09CannotPlacePlayerOnOccupiedPosition
	|   items portableObject |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	Room withSize: 3 by: 3 with: items.
		! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:18:22' prior: 50883854!
test09CannotPlacePlayerOnOccupiedPosition
	|   items portableObject newRoom |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ Room withSize: 3 by: 3 with: items.
	self should:[PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #East in: newRoom ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: Room cannotPlacePlayerOnOccupiedPosition]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:18:53' prior: 50883865!
test09CannotPlacePlayerOnOccupiedPosition
	|   items portableObject newRoom |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ Room withSize: 3 by: 3 with: items.
	
	self should:[PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #East in: newRoom ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: Room cannotPlacePlayerOnOccupiedPosition]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:19:09' prior: 50883885!
test09CannotPlacePlayerOnOccupiedPosition
	|   items portableObject newRoom |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ Room withSize: 3 by: 3 with: items.
	
	self should:[PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #East in: newRoom ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: Room cannotPlacePlayerOnOccupiedPosition]
	
! !

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:19:09'!
FAILURE!
!Room methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:20:03' prior: 50883472!
player: aPlayer enteredAt: aPosition
	self isFreeAt: aPosition ifFalse:[self error : self class cannotPlacePlayerOnOccupiedPosition].
	
	map at: aPosition put: aPlayer.! !
!Room methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:20:23' prior: 50883928!
player: aPlayer enteredAt: aPosition
	(self isFreeAt: aPosition) ifFalse:[self error : self class cannotPlacePlayerOnOccupiedPosition].
	
	map at: aPosition put: aPlayer.! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:20:28'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:20:28'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:20:28'!
ERROR!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 19:20:28'!
ERROR!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 19:20:28'!
ERROR!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 19:20:28'!
ERROR!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 19:20:28'!
ERROR!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 19:20:28'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:20:28'!
ERROR!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:20:30'!
ERROR!
!Room methodsFor: 'testing' stamp: 'FS 12/10/2020 19:20:41'!
isFreeAt: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'FS 12/10/2020 19:20:53' prior: 50883979!
isFreeAt: aPoint 
	^map includesKey: aPoint.! !

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:20:54'!
ERROR!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:20:58'!
ERROR!
!Room methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:21:36' prior: 50883937!
player: aPlayer enteredAt: aPosition
	(self isFreeAt: aPosition) ifFalse:[self error: self class cannotPlacePlayerOnOccupiedPosition].
	
	map at: aPosition put: aPlayer.! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:21:37'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:21:37'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:21:37'!
ERROR!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 19:21:37'!
ERROR!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 19:21:37'!
ERROR!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 19:21:37'!
ERROR!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 19:21:37'!
ERROR!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 19:21:37'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:21:37'!
ERROR!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:21:39'!
ERROR!
!Room class methodsFor: 'error description' stamp: 'FS 12/10/2020 19:21:47'!
cannotPlacePlayerOnOccupiedPosition
	self shouldBeImplemented.! !
!Room class methodsFor: 'error description' stamp: 'FS 12/10/2020 19:21:57' prior: 50884038!
cannotPlacePlayerOnOccupiedPosition
	^'cannot place player on occupied Position'! !

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:21:58'!
ERROR!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:22:13'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:22:13'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:22:13'!
ERROR!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 19:22:13'!
ERROR!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 19:22:13'!
ERROR!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 19:22:13'!
ERROR!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 19:22:13'!
ERROR!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 19:22:13'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:22:13'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:22:14'!
ERROR!
!Room methodsFor: 'testing' stamp: 'FS 12/10/2020 19:22:30' prior: 50883983!
isFreeAt: aPoint 
	^(map includesKey: aPoint) not.! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:22:32'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:22:32'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:22:32'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 19:22:32'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 19:22:32'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 19:22:32'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 19:22:32'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 19:22:32'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:22:32'!
FAILURE!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:22:32'!
FAILURE!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:22:34'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:22:34'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:22:34'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 19:22:34'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 19:22:34'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 19:22:34'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 19:22:34'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 19:22:34'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:22:34'!
FAILURE!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:22:34'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:22:55' prior: 50883905!
test09CannotPlacePlayerOnOccupiedPosition
	|   items portableObject newRoom |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ Room withSize: 3 by: 3 with: items.
	
	self should:[PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: newRoom ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: Room cannotPlacePlayerOnOccupiedPosition]
	
! !

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:22:56'!
FAILURE!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:23:05'!
FAILURE!

self isFreeAt: aPosition!
!Room methodsFor: 'initialization' stamp: 'FS 12/10/2020 19:23:57'!
initializeWithSize: aMaxWidth by: aMaxHeight with: aMapOfItems
	widthLimit  := aMaxWidth -1.
	heightLimit  := aMaxHeight -1.
	map _ Dictionary new.! !

!methodRemoval: Room #initializeWithSize:by:with: stamp: 'FS 12/10/2020 19:24:04'!
initializeWithSize: aMaxWidth by: aMaxHeight with: aMapOfItems
	widthLimit  := aMaxWidth -1.
	heightLimit  := aMaxHeight -1.
	map _ Dictionary new.!
!Room methodsFor: 'initialization' stamp: 'FS 12/10/2020 19:24:25'!
initializeWithSize: aMaxWidth by: aMaxHeight with: aMapOfItems  
	widthLimit  := aMaxWidth -1.
	heightLimit  := aMaxHeight -1.
	map _ Dictionary new.! !
!Room class methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:24:25' prior: 50882856!
withSize: aMaxWidth by: aMaxHeight with: aMapOfItemps
	self assertPositiveSizeOf: aMaxWidth.
	self assertPositiveSizeOf: aMaxHeight.
	self assertItemsAreInbound: aMapOfItemps within: aMaxWidth by: aMaxHeight.
	
	^self new initializeWithSize: aMaxWidth by: aMaxHeight with: Dictionary new ! !

!methodRemoval: Room #initializeWithSize:by: stamp: 'FS 12/10/2020 19:24:25'!
initializeWithSize: aMaxWidth by: aMaxHeight 
	widthLimit  := aMaxWidth -1.
	heightLimit  := aMaxHeight -1.
	map _ Dictionary new.!
!Room class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 19:24:52' prior: 50884210!
withSize: aMaxWidth by: aMaxHeight with: aMapOfItemps
	self assertPositiveSizeOf: aMaxWidth.
	self assertPositiveSizeOf: aMaxHeight.
	self assertItemsAreInbound: aMapOfItemps within: aMaxWidth by: aMaxHeight.
	
	^self new initializeWithSize: aMaxWidth by: aMaxHeight with: aMapOfItemps! !
!Room methodsFor: 'initialization' stamp: 'FS 12/10/2020 19:25:14' prior: 50884202!
initializeWithSize: aMaxWidth by: aMaxHeight with: aMapOfItems  
	widthLimit  := aMaxWidth -1.
	heightLimit  := aMaxHeight -1.
	map _ aMapOfItems.! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:25:16'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:25:16'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:25:16'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 19:25:16'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 19:25:16'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 19:25:16'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 19:25:16'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 19:25:16'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:25:16'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:25:53' prior: 50884160!
test09CannotPlacePlayerOnOccupiedPosition
	|   items portableObject newRoom |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ Room withSize: 3 by: 3 with: items.
	
	self should:[PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: newRoom ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: Room cannotPlacePlayerOnOccupiedPosition.
							self deny: (newRoom playerHasEnteredTheRoom)
							]
						
	
! !

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:25:55'!
ERROR!
!Room methodsFor: 'testing' stamp: 'FS 12/10/2020 19:26:03'!
playerHasEnteredTheRoom
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'FS 12/10/2020 19:26:16' prior: 50884304!
playerHasEnteredTheRoom
	^false! !

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:26:17'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:26:17'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:26:17'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:26:17'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 19:26:17'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 19:26:17'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 19:26:17'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 19:26:17'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 19:26:17'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:26:17'!
PASSED!
!Room methodsFor: 'testing' stamp: 'FS 12/10/2020 19:28:02'!
aPlayerHasEntered
	^false! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:28:02' prior: 50884280!
test09CannotPlacePlayerOnOccupiedPosition
	|   items portableObject newRoom |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ Room withSize: 3 by: 3 with: items.
	
	self should:[PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: newRoom ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: Room cannotPlacePlayerOnOccupiedPosition.
							self deny: (newRoom aPlayerHasEntered)
							]
						
	
! !

!methodRemoval: Room #playerHasEnteredTheRoom stamp: 'FS 12/10/2020 19:28:02'!
playerHasEnteredTheRoom
	^false!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:28:21' prior: 50883238!
test03PlayableCannotMoveForwardsOutOfBoundsBelow
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition.
							   self assert: (playableCharacter isAt: 0@0 heading: #South ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:28:25' prior: 50883311!
test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition.
								self assert: (playableCharacter isAt: 0@0 heading: #West ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:28:33' prior: 50883330!
test05PlayableCannotMoveForwardsOutOfBoundsAbove
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #North in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition.		
								self assert: (playableCharacter isAt: 0@2 heading: #North ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:28:37' prior: 50883349!
test06PlayableCannotMoveForwardsOutOfBoundsToTheRight
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@0 heading: #East in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition.
								self assert: (playableCharacter isAt: 2@0 heading: #East ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:28:45' prior: 50883399!
test07PlayerCannotBackwardsOutOfBounds 
	| playableCharacter newRoom |
	newRoom _ Room withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #East in: newRoom .
	self
		should:[playableCharacter moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: Room outOfBoundsErrorDescrpition.
								self assert: (playableCharacter isAt: 0@0 heading: #East ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!Room methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:29:17'!
enter: aPlayer at: aPosition
	(self isFreeAt: aPosition) ifFalse:[self error: self class cannotPlacePlayerOnOccupiedPosition].
	
	map at: aPosition put: aPlayer.! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:29:17' prior: 50883449!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading in: aRoom
	aRoom enter: self at: aPosition.

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room _ aRoom
	! !

!methodRemoval: Room #player:enteredAt: stamp: 'FS 12/10/2020 19:29:17'!
player: aPlayer enteredAt: aPosition
	(self isFreeAt: aPosition) ifFalse:[self error: self class cannotPlacePlayerOnOccupiedPosition].
	
	map at: aPosition put: aPlayer.!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 19:29:43'!
Object subclass: #Room
	instanceVariableNames: 'widthLimit heightLimit map aPlayerIsHere'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:29:42' prior: 50884480!
enter: aPlayer at: aPosition
	(self isFreeAt: aPosition) ifFalse:[self error: self class cannotPlacePlayerOnOccupiedPosition].
	aPlayerIsHere _ true.
	map at: aPosition put: aPlayer.! !
!Room methodsFor: 'initialization' stamp: 'FS 12/10/2020 19:29:59' prior: 50884241!
initializeWithSize: aMaxWidth by: aMaxHeight with: aMapOfItems  
	widthLimit  := aMaxWidth -1.
	heightLimit  := aMaxHeight -1.
	map _ aMapOfItems.
	aPlayerIsHere _ false.! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:30:01'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:30:01'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:30:01'!
FAILURE!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 19:30:01'!
FAILURE!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 19:30:01'!
FAILURE!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 19:30:01'!
FAILURE!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 19:30:01'!
FAILURE!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 19:30:01'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:30:01'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:30:02'!
FAILURE!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:30:38'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:30:38'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:30:38'!
FAILURE!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 19:30:38'!
FAILURE!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 19:30:38'!
FAILURE!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 19:30:38'!
FAILURE!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 19:30:38'!
FAILURE!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 19:30:38'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:30:38'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:30:40'!
FAILURE!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:30:51'!
FAILURE!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:30:54'!
FAILURE!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:30:54'!
FAILURE!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:30:59'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'FS 12/10/2020 19:31:21' prior: 50884347!
aPlayerHasEntered
	^aPlayerIsHere ! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:31:22'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:31:22'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:31:22'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 19:31:22'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 19:31:22'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 19:31:22'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 19:31:22'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 19:31:22'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:31:22'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:31:46'!
test10CannotUseRoomWithAlreadyAnotherPlayer
	|   items portableObject newRoom |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ Room withSize: 3 by: 3 with: items.
	
	self should:[PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: newRoom ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: Room cannotPlacePlayerOnOccupiedPosition.
							self deny: (newRoom aPlayerHasEntered)
							]
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:35:59' prior: 50884652!
test10CannotUseRoomWithAlreadyAnotherPlayer
	|   items portableObject newRoom playerMario playerLuigi|
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	newRoom _ Room withSize: 3 by: 3 with: Dictionary new.
	
       playerLuigi _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: newRoom .

	self
		should: [  PlayableCharacter named: 'Mario' using: self defaultBackpack at: 0@0 heading: #East in: newRoom .]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: Room cannotEnterARoomWithAnotherPlayerInIt.
							   self assert: (playerLuigi hasEntered: newRoom) ]
		
	 
	
! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 19:36:45' prior: 50881650!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in:aRoom! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 19:37:45'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading  ! !

!methodRemoval: PlayableCharacter class #named:using:at:heading:in: stamp: 'FS 12/10/2020 19:37:47'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint in: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading in:aRoom!
!PlayableCharacter methodsFor: 'initialization' stamp: 'FS 12/10/2020 19:37:58'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading  

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	 
	! !

!methodRemoval: PlayableCharacter #initializeNamed:using:at:heading:in: stamp: 'FS 12/10/2020 19:38:00'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading in: aRoom
	aRoom enter: self at: aPosition.

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room _ aRoom
	!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 19:38:02'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 19:38:02'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 19:38:02'!
ERROR!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 19:38:02'!
ERROR!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 19:38:02'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 19:38:02'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 19:38:02'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 19:38:02'!
FAILURE!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 19:38:02'!
ERROR!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 19:38:02'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FS 12/10/2020 19:38:11' prior: 50882422!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North  .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FS 12/10/2020 19:38:15' prior: 50881391!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North  .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FS 12/10/2020 19:38:20' prior: 50881440!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North  .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FS 12/10/2020 19:38:24' prior: 50881427!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North   .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FS 12/10/2020 19:38:28' prior: 50882439!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East   .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FS 12/10/2020 19:38:32' prior: 50881453!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South  .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FS 12/10/2020 19:38:38' prior: 50881514!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West   .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FS 12/10/2020 19:38:42' prior: 50881405!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X   ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FS 12/10/2020 19:38:46' prior: 50881469!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West   .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FS 12/10/2020 19:38:50' prior: 50881365!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West   .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 19:38:51'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 19:38:51'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 19:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 19:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 19:38:51'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 19:38:51'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 19:38:51'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 19:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 19:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 19:38:51'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 19:38:52'!
ERROR!
!PlayableCharacter methodsFor: 'nil' stamp: 'FS 12/10/2020 19:39:38'!
enterInto: aRoom
	aRoom enter: self at: position.
	room _ aRoom.
! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 19:39:47'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 19:39:47'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 19:39:47'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 19:39:47'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 19:39:47'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 19:39:47'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 19:39:47'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 19:39:47'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 19:39:47'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 19:39:47'!
PASSED!
!PlayableCharacter methodsFor: 'initialization' stamp: 'FS 12/10/2020 19:40:02' prior: 50884732!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading  

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room _ nil.
	 
	! !

!classRenamed: #Room as: #DelimitedRoom stamp: 'FS 12/10/2020 19:41:11'!
Smalltalk renameClassNamed: #Room as: #DelimitedRoom!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:41:11' prior: 50884439!
test06PlayableCannotMoveForwardsOutOfBoundsToTheRight
	| playableCharacter newRoom |
	newRoom _ DelimitedRoom withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@0 heading: #East in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
								self assert: (playableCharacter isAt: 2@0 heading: #East ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:41:11' prior: 50882993!
test08CannotCreateRoomWithOutOfBoundsItems
	|    items portableObject |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 3@3 put: portableObject;yourself .
	self
		should:[ DelimitedRoom withSize: 3 by: 3 with: items.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom itemsOutOfBoundsErrorDescrpition]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:41:11' prior: 50884460!
test07PlayerCannotBackwardsOutOfBounds 
	| playableCharacter newRoom |
	newRoom _ DelimitedRoom withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #East in: newRoom .
	self
		should:[playableCharacter moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
								self assert: (playableCharacter isAt: 0@0 heading: #East ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:41:11' prior: 50880986!
test02CannotCreateRoomWithNonPositiveHeightSize
	self
		should:[DelimitedRoom withSize: 2 by: -1]
		raise: Error - MessageNotUnderstood 
		withMessageText: DelimitedRoom invalidSizeErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:41:11' prior: 50884397!
test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft
	| playableCharacter newRoom |
	newRoom _ DelimitedRoom withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
								self assert: (playableCharacter isAt: 0@0 heading: #West ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:41:11' prior: 50884674!
test10CannotUseRoomWithAlreadyAnotherPlayer
	|   items portableObject newRoom playerMario playerLuigi|
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	
       playerLuigi _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: newRoom .

	self
		should: [  PlayableCharacter named: 'Mario' using: self defaultBackpack at: 0@0 heading: #East in: newRoom .]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom cannotEnterARoomWithAnotherPlayerInIt.
							   self assert: (playerLuigi hasEntered: newRoom) ]
		
	 
	
! !
!GameObjectsFactory methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:41:11' prior: 50881419!
defaultPlayableCharacter
	^PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #North in: (DelimitedRoom withSize: 3 by: 3)! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:41:11' prior: 50884376!
test03PlayableCannotMoveForwardsOutOfBoundsBelow
	| playableCharacter newRoom |
	newRoom _ DelimitedRoom withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
							   self assert: (playableCharacter isAt: 0@0 heading: #South ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:41:11' prior: 50881013!
test01CannotCreateRoomWithNonPositiveWidthSize
	self
		should:[DelimitedRoom withSize: -1 by: 3 ]
		raise: Error - MessageNotUnderstood 
		withMessageText: DelimitedRoom invalidSizeErrorDescription.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:41:12' prior: 50884418!
test05PlayableCannotMoveForwardsOutOfBoundsAbove
	| playableCharacter newRoom |
	newRoom _ DelimitedRoom withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #North in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.		
								self assert: (playableCharacter isAt: 0@2 heading: #North ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:41:12' prior: 50884351!
test09CannotPlacePlayerOnOccupiedPosition
	|   items portableObject newRoom |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	
	self should:[PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East in: newRoom ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: DelimitedRoom cannotPlacePlayerOnOccupiedPosition.
							self deny: (newRoom aPlayerHasEntered)
							]
						
	
! !

Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 19:41:50'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

Room subclass: #DelimitedRoom
	instanceVariableNames: 'widthLimit heightLimit map aPlayerIsHere'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #DelimitedRoom category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 19:41:55'!
Room subclass: #DelimitedRoom
	instanceVariableNames: 'widthLimit heightLimit map aPlayerIsHere'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

Room subclass: #NullRoom
	instanceVariableNames: ' '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NullRoom category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 19:42:05'!
Room subclass: #NullRoom
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NullRoom methodsFor: 'nil' stamp: 'FS 12/10/2020 19:42:30'!
movePlayerFrom: aSourcePosition to: aTargetPosition! !
!NullRoom methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:42:34' prior: 50885266!
movePlayerFrom: aSourcePosition to: aTargetPosition
! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'FS 12/10/2020 19:42:46' prior: 50885017!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading  

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room _ NullRoom.
	 
	! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'FS 12/10/2020 19:42:49' prior: 50885276!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading  

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading.
	room _ NullRoom new.
	 
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 19:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 19:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 19:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 19:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 19:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 19:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 19:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 19:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 19:42:52'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 19:42:52'!
PASSED!
!Room methodsFor: 'nil' stamp: 'FS 12/10/2020 19:43:27'!
movePlayerFrom: aSourcePosition to: aTargetPosition
	self subclassResponsibility .! !
!NullRoom methodsFor: 'nil' stamp: 'FS 12/10/2020 19:44:13'!
enter: aPlayer at: aPosition
	! !
!Room methodsFor: 'player action' stamp: 'FS 12/10/2020 19:44:58'!
enter: aPlayer at: aPosition
! !
!Room methodsFor: 'player action' stamp: 'FS 12/10/2020 19:45:03' prior: 50885342!
enter: aPlayer at: aPosition
 	self subclassResponsibility ! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'FS 12/10/2020 19:46:58' prior: 50884711!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading  ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:47:25' prior: 50885155!
test03PlayableCannotMoveForwardsOutOfBoundsBelow
	| playableCharacter newRoom |
	newRoom _ DelimitedRoom withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South in: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
							   self assert: (playableCharacter isAt: 0@0 heading: #South ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'FS 12/10/2020 19:48:13' prior: 50884790!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North  .
	
	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:48:42' prior: 50885363!
test03PlayableCannotMoveForwardsOutOfBoundsBelow
	| playableCharacter newRoom |
	newRoom _ DelimitedRoom withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South .
	playableCharacter enterInto: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
							   self assert: (playableCharacter isAt: 0@0 heading: #South ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:48:46' prior: 50885100!
test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft
	| playableCharacter newRoom |
	newRoom _ DelimitedRoom withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West in: newRoom .
	playableCharacter enterInto: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
								self assert: (playableCharacter isAt: 0@0 heading: #West ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:48:51' prior: 50885418!
test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft
	| playableCharacter newRoom |
	newRoom _ DelimitedRoom withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #West  .
	playableCharacter enterInto: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
								self assert: (playableCharacter isAt: 0@0 heading: #West ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:48:55' prior: 50885186!
test05PlayableCannotMoveForwardsOutOfBoundsAbove
	| playableCharacter newRoom |
	newRoom _ DelimitedRoom withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@2 heading: #North   .
	playableCharacter enterInto: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.		
								self assert: (playableCharacter isAt: 0@2 heading: #North ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:49:01' prior: 50885031!
test06PlayableCannotMoveForwardsOutOfBoundsToTheRight
	| playableCharacter newRoom |
	newRoom _ DelimitedRoom withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@0 heading: #East   .
	playableCharacter enterInto: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
								self assert: (playableCharacter isAt: 2@0 heading: #East ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:49:06' prior: 50885069!
test07PlayerCannotBackwardsOutOfBounds 
	| playableCharacter newRoom |
	newRoom _ DelimitedRoom withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #East   .
	playableCharacter enterInto: newRoom .
	self
		should:[playableCharacter moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
								self assert: (playableCharacter isAt: 0@0 heading: #East ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:49:33' prior: 50885207!
test09CannotPlacePlayerOnOccupiedPosition
	|   items portableObject newRoom playableCharacter |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East.
	
	self should:[ playableCharacter enterInto: newRoom . ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: DelimitedRoom cannotPlacePlayerOnOccupiedPosition.
							self deny: (newRoom aPlayerHasEntered)
							]
						
	
! !

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:49:35'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:49:35'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:49:35'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:49:35'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 19:49:35'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 19:49:35'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 19:49:35'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 19:49:35'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 19:49:35'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:49:35'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 19:49:35'!
ERROR!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 19:49:35'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:50:27' prior: 50885121!
test10CannotUseRoomWithAlreadyAnotherPlayer
	|   items portableObject newRoom playerMario playerLuigi|
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	
       playerLuigi _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East .
 	playerMario _ PlayableCharacter named: 'Mario' using: self defaultBackpack at: 0@0 heading: #East.
	playerLuigi enterInto: newRoom .

	self
		should: [ playerMario enterInto: newRoom]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom cannotEnterARoomWithAnotherPlayerInIt.
							   self assert: (playerLuigi hasEntered: newRoom) ]
		
	 
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:50:32' prior: 50885594!
test10CannotUseRoomWithAlreadyAnotherPlayer
	|     portableObject newRoom playerMario playerLuigi|
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	
       playerLuigi _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East .
 	playerMario _ PlayableCharacter named: 'Mario' using: self defaultBackpack at: 0@0 heading: #East.
	playerLuigi enterInto: newRoom .

	self
		should: [ playerMario enterInto: newRoom]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom cannotEnterARoomWithAnotherPlayerInIt.
							   self assert: (playerLuigi hasEntered: newRoom) ]
		
	 
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:50:36' prior: 50885621!
test10CannotUseRoomWithAlreadyAnotherPlayer
	|     portableObject newRoom playerMario playerLuigi|
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	
       playerLuigi _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East .
 	playerMario _ PlayableCharacter named: 'Mario' using: self defaultBackpack at: 0@0 heading: #East.
	playerLuigi enterInto: newRoom .

	self
		should: [ playerMario enterInto: newRoom]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom cannotEnterARoomWithAnotherPlayerInIt.
							   self assert: (playerLuigi hasEntered: newRoom) ]
		
	 
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:50:42' prior: 50885648!
test10CannotUseRoomWithAlreadyAnotherPlayer
	| newRoom playerMario playerLuigi|
	
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	
       playerLuigi _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East .
 	playerMario _ PlayableCharacter named: 'Mario' using: self defaultBackpack at: 0@0 heading: #East.
	playerLuigi enterInto: newRoom .

	self
		should: [ playerMario enterInto: newRoom]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom cannotEnterARoomWithAnotherPlayerInIt.
							   self assert: (playerLuigi hasEntered: newRoom) ]
		
	 
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:51:16' prior: 50885675!
test10CannotUseRoomWithAlreadyAnotherPlayer
	| newRoom playerMario playerLuigi|
	
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	
       playerLuigi _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East .
 	playerMario _ PlayableCharacter named: 'Mario' using: self defaultBackpack at: 0@0 heading: #East.
	playerLuigi enterInto: newRoom .

	self
		should: [ playerMario enterInto: newRoom]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom cannotEnterARoomWithAnotherPlayerInIt.
							   self assert: (playerLuigi hasEntered: newRoom) .
							     self deny: (playerMario hasEntered: newRoom) ]
		
	 
	
! !

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 19:51:18'!
FAILURE!
!DelimitedRoom methodsFor: 'player entry' stamp: 'FS 12/10/2020 19:52:00' prior: 50884516 overrides: 50885346!
enter: aPlayer at: aPosition
	(self isFreeAt: aPosition) ifFalse:[self error: self class cannotPlacePlayerOnOccupiedPosition].
	aPlayerIsHere ifTrue:[self error: self class cannotEnterARoomWithAnotherPlayerInIt].
	
	aPlayerIsHere _ true.
	map at: aPosition put: aPlayer.! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:52:02'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:52:02'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:52:02'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 19:52:02'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 19:52:02'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 19:52:02'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 19:52:02'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 19:52:02'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:52:02'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 19:52:02'!
ERROR!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 19:52:02'!
ERROR!
!DelimitedRoom class methodsFor: 'error description' stamp: 'FS 12/10/2020 19:52:10'!
cannotEnterARoomWithAnotherPlayerInIt
	self shouldBeImplemented.! !
!DelimitedRoom class methodsFor: 'error description' stamp: 'FS 12/10/2020 19:52:23' prior: 50885778!
cannotEnterARoomWithAnotherPlayerInIt
	^' cannot enter the room, a player is alredy in it'! !

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 19:52:24'!
ERROR!
!PlayableCharacter methodsFor: 'testing -- room' stamp: 'FS 12/10/2020 19:52:37'!
hasEntered: aDelimitedRoom 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'testing -- room' stamp: 'FS 12/10/2020 19:52:51' prior: 50885793!
hasEntered: aRoom 
	room = aRoom! !

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 19:52:52'!
ERROR!
!PlayableCharacter methodsFor: 'testing -- room' stamp: 'FS 12/10/2020 19:53:03' prior: 50885798!
hasEntered: aRoom 
	^room = aRoom! !

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 19:53:04'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 19:53:09'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:53:34'!
test11PlayerCannotMoveToOccupiedPosition
	| newRoom playerMario playerLuigi|
	
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	
       playerLuigi _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East .
 	playerMario _ PlayableCharacter named: 'Mario' using: self defaultBackpack at: 0@0 heading: #East.
	playerLuigi enterInto: newRoom .

	self
		should: [ playerMario enterInto: newRoom]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom cannotEnterARoomWithAnotherPlayerInIt.
							   self assert: (playerLuigi hasEntered: newRoom) .
							     self deny: (playerMario hasEntered: newRoom) ]
		
	 
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:54:53'!
test11PlayerCannotMoveForwardToOccupiedPosition
	| newRoom playerMario playerLuigi|
	
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	
       playerLuigi _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East .
 	playerMario _ PlayableCharacter named: 'Mario' using: self defaultBackpack at: 0@0 heading: #East.
	playerLuigi enterInto: newRoom .

	self
		should: [ playerMario enterInto: newRoom]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom cannotEnterARoomWithAnotherPlayerInIt.
							   self assert: (playerLuigi hasEntered: newRoom) .
							     self deny: (playerMario hasEntered: newRoom) ]
		
	 
	
! !

!methodRemoval: RoomTest #test11PlayerCannotMoveToOccupiedPosition stamp: 'FS 12/10/2020 19:54:53'!
test11PlayerCannotMoveToOccupiedPosition
	| newRoom playerMario playerLuigi|
	
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	
       playerLuigi _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East .
 	playerMario _ PlayableCharacter named: 'Mario' using: self defaultBackpack at: 0@0 heading: #East.
	playerLuigi enterInto: newRoom .

	self
		should: [ playerMario enterInto: newRoom]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom cannotEnterARoomWithAnotherPlayerInIt.
							   self assert: (playerLuigi hasEntered: newRoom) .
							     self deny: (playerMario hasEntered: newRoom) ]
		
	 
	
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:55:03'!
test11PlayerCannotMoveToOccupiedPosition
	|   items portableObject newRoom playableCharacter |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North.
	playableCharacter enterInto: newRoom .
	self should:[ playableCharacter moveForward]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: DelimitedRoom cannotPlacePlayerOnOccupiedPosition.
							self deny: (newRoom aPlayerHasEntered)
							]
						
	

	
! !

!methodRemoval: RoomTest #test11PlayerCannotMoveToOccupiedPosition stamp: 'FS 12/10/2020 19:55:06'!
test11PlayerCannotMoveToOccupiedPosition
	|   items portableObject newRoom playableCharacter |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North.
	playableCharacter enterInto: newRoom .
	self should:[ playableCharacter moveForward]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: DelimitedRoom cannotPlacePlayerOnOccupiedPosition.
							self deny: (newRoom aPlayerHasEntered)
							]
						
	

	
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:55:17' prior: 50885843!
test11PlayerCannotMoveForwardToOccupiedPosition
	| newRoom playerMario playerLuigi|
	
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	
       playerLuigi _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East .
 	playerMario _ PlayableCharacter named: 'Mario' using: self defaultBackpack at: 0@0 heading: #East.
	playerLuigi enterInto: newRoom .

	self
		should: [ playerMario moveForward]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom cannotEnterARoomWithAnotherPlayerInIt.
							   self assert: (playerLuigi hasEntered: newRoom) .
							     self deny: (playerMario hasEntered: newRoom) ]
		
	 
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:55:52' prior: 50885528!
test09CannotPlacePlayerOnOccupiedPosition
	|   items portableObject newRoom playableCharacter |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East.
	
	self should:[ playableCharacter enterInto: newRoom . ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: 
							DelimitedRoom cannotPlacePlayerOnOccupiedPosition.
							self deny: (newRoom aPlayerHasEntered)
							]
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:56:22' prior: 50885946!
test11PlayerCannotMoveForwardToOccupiedPosition
	| newRoom playerMario playerLuigi items playableCharacter portableObject |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East.
	
	self should:[ playableCharacter enterInto: newRoom . ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: 
							DelimitedRoom cannotPlacePlayerOnOccupiedPosition.
							self deny: (newRoom aPlayerHasEntered)
							]
	 
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:56:34' prior: 50885997!
test11PlayerCannotMoveForwardToOccupiedPosition
	| newRoom     items playableCharacter portableObject |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East.
	
	self should:[ playableCharacter enterInto: newRoom . ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: 
							DelimitedRoom cannotPlacePlayerOnOccupiedPosition.
							self deny: (newRoom aPlayerHasEntered)
							]
	 
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:57:18' prior: 50886023!
test11PlayerCannotMoveForwardToOccupiedPosition
	| newRoom     items playableCharacter portableObject |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East.
	playableCharacter enterInto: newRoom . 
	
	self should:[ playableCharacter moveForward ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: 
							DelimitedRoom cannotMovePlayerToOccupiedPosition.
							self assert: (playableCharacter isAt: 1@0)
							]
	 
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:57:43' prior: 50886048!
test11PlayerCannotMoveForwardToOccupiedPosition
	| newRoom     items playableCharacter portableObject |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North.
	playableCharacter enterInto: newRoom . 
	
	self should:[ playableCharacter moveForward ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: 
							DelimitedRoom cannotMovePlayerToOccupiedPosition.
							self assert: (playableCharacter isAt: 1@0)
							]
	 
	
! !
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 19:58:16' prior: 50883790 overrides: 50885333!
movePlayerFrom: aSourcePoint to: aTargetPoint 
	| playerToMove |
	self assertItsInbounds: aTargetPoint.
	self assertPositionIsFreeAt: aTargetPoint.
	playerToMove _ map removeKey: aSourcePoint.
	map at: aTargetPoint put:playerToMove
	! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 19:58:19'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 19:58:19'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 19:58:19'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 19:58:19'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 19:58:19'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 19:58:19'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 19:58:19'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 19:58:19'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 19:58:19'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 19:58:19'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 19:58:19'!
ERROR!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 19:58:19'!
ERROR!
!DelimitedRoom methodsFor: 'assertions' stamp: 'FS 12/10/2020 19:58:24'!
assertPositionIsFreeAt: aPoint 
	self shouldBeImplemented.! !
!DelimitedRoom methodsFor: 'assertions' stamp: 'FS 12/10/2020 19:59:03' prior: 50886152!
assertPositionIsFreeAt: aPosition 
	(self isFreeAt: aPosition ) ifFalse:[ self error: self class cannotMovePlayerToOccupiedPosition]! !

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 19:59:07'!
ERROR!
!DelimitedRoom class methodsFor: 'error description' stamp: 'FS 12/10/2020 19:59:15'!
cannotMovePlayerToOccupiedPosition
	self shouldBeImplemented.! !
!DelimitedRoom class methodsFor: 'error description' stamp: 'FS 12/10/2020 19:59:24' prior: 50886168!
cannotMovePlayerToOccupiedPosition
	^' cannot move player into occupied position'! !

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 19:59:26'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:59:41' prior: 50886074!
test11PlayerCannotMoveForwardToOccupiedPosition
	| newRoom     items playableCharacter portableObject |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #North.
	playableCharacter enterInto: newRoom . 
	
	self should:[ playableCharacter moveForward ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: 
							DelimitedRoom cannotMovePlayerToOccupiedPosition.
							self assert: (playableCharacter isAt: 1@0 heading: #North)
							]
	 
	
! !

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 19:59:42'!
PASSED!
!DelimitedRoom methodsFor: 'assertions' stamp: 'FS 12/10/2020 20:00:21'!
assertCanMovePlayerInto: aPosition 
	(self isFreeAt: aPosition ) ifFalse:[ self error: self class cannotMovePlayerToOccupiedPosition]! !
!DelimitedRoom methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:00:21' prior: 50886101 overrides: 50885333!
movePlayerFrom: aSourcePoint to: aTargetPoint 
	| playerToMove |
	self assertItsInbounds: aTargetPoint.
	self assertCanMovePlayerInto: aTargetPoint.
	playerToMove _ map removeKey: aSourcePoint.
	map at: aTargetPoint put:playerToMove
	! !

!methodRemoval: DelimitedRoom #assertPositionIsFreeAt: stamp: 'FS 12/10/2020 20:00:21'!
assertPositionIsFreeAt: aPosition 
	(self isFreeAt: aPosition ) ifFalse:[ self error: self class cannotMovePlayerToOccupiedPosition]!
!DelimitedRoom methodsFor: 'player entry' stamp: 'FS 12/10/2020 20:01:18' prior: 50885729 overrides: 50885346!
enter: aPlayer at: aPosition
	self assertCanMovePlayerInto: aPosition .

	aPlayerIsHere ifTrue:[self error: self class cannotEnterARoomWithAnotherPlayerInIt].
	
	aPlayerIsHere _ true.
	map at: aPosition put: aPlayer.! !
!DelimitedRoom methodsFor: 'player entry' stamp: 'FS 12/10/2020 20:01:31'!
assertRoomIsFree

	^ aPlayerIsHere ifTrue:[self error: self class cannotEnterARoomWithAnotherPlayerInIt]! !
!DelimitedRoom methodsFor: 'player entry' stamp: 'FS 12/10/2020 20:01:31' prior: 50886238 overrides: 50885346!
enter: aPlayer at: aPosition
	self assertCanMovePlayerInto: aPosition .

	self assertRoomIsFree.
	
	aPlayerIsHere _ true.
	map at: aPosition put: aPlayer.! !
!DelimitedRoom methodsFor: 'player entry' stamp: 'FS 12/10/2020 20:01:34' prior: 50886255 overrides: 50885346!
enter: aPlayer at: aPosition
	self assertCanMovePlayerInto: aPosition .
	self assertRoomIsFree.
	
	aPlayerIsHere _ true.
	map at: aPosition put: aPlayer.! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 20:02:11'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 20:02:11'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 20:02:11'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 20:02:11'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 20:02:11'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 20:02:11'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 20:02:11'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 20:02:11'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 20:02:11'!
FAILURE!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 20:02:11'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 20:02:11'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 20:02:11'!
FAILURE!

!methodRemoval: DelimitedRoom class #cannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 20:02:41'!
cannotPlacePlayerOnOccupiedPosition
	^'cannot place player on occupied Position'!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 20:02:48'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 20:02:48'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 20:02:48'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 20:02:48'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 20:02:48'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 20:02:48'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 20:02:48'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 20:02:48'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 20:02:48'!
ERROR!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 20:02:48'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 20:02:48'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 20:02:48'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:02:56' prior: 50885972!
test09CannotPlacePlayerOnOccupiedPosition
	|   items portableObject newRoom playableCharacter |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East.
	
	self should:[ playableCharacter enterInto: newRoom . ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: 
							DelimitedRoom cannotMovePlayerToOccupiedPosition.
							self deny: (newRoom aPlayerHasEntered)
							]
						
	
! !

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 20:02:56'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 20:02:58'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 20:02:58'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 20:02:58'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 20:02:58'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 20:02:58'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 20:02:58'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 20:02:58'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 20:02:58'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 20:02:58'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 20:02:58'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 20:02:58'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:03:04'!
test12 
	 
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:08:49'!
test12PlayerCannotEnterARoomStartingOutOfBounds
	 
	
! !

!methodRemoval: RoomTest #test12 stamp: 'FS 12/10/2020 20:08:51'!
test12 
	 
	
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:09:14' prior: 50886428!
test12PlayerCannotEnterARoomStartingOutOfBounds
	|   items portableObject newRoom playableCharacter |
	
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East.
	
	self should:[ playableCharacter enterInto: newRoom . ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: 
							DelimitedRoom cannotMovePlayerToOccupiedPosition.
							self deny: (newRoom aPlayerHasEntered)
							]
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:09:53' prior: 50886436!
test12PlayerCannotEnterARoomStartingOutOfBounds
	|   items newRoom playableCharacter |
	
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #East.
	
	self should:[ playableCharacter enterInto: newRoom . ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: 
							DelimitedRoom cannotEnterPlayerWhenIsOutOfBounds.
							self deny: (newRoom aPlayerHasEntered)
							]
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:10:07' prior: 50886461!
test12PlayerCannotEnterARoomStartingOutOfBounds
	|   newRoom playableCharacter |
	
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #East.
	
	self should:[ playableCharacter enterInto: newRoom . ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | self assert: anError messageText equals: 
							DelimitedRoom cannotEnterPlayerWhenIsOutOfBounds.
							self deny: (newRoom aPlayerHasEntered)
							]
						
	
! !

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 20:10:13'!
FAILURE!
!DelimitedRoom methodsFor: 'player entry' stamp: 'FS 12/10/2020 20:10:56' prior: 50886264 overrides: 50885346!
enter: aPlayer at: aPosition
	self assertCanMovePlayerInto: aPosition .
	self assertRoomIsFree.
	self assertPlayerIsEnteringInboundsAt: aPosition.
	
	aPlayerIsHere _ true.
	map at: aPosition put: aPlayer.! !
!DelimitedRoom methodsFor: 'assertions' stamp: 'FS 12/10/2020 20:11:30'!
isInbounds: aPosition

	aPosition y >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition x >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition y <= heightLimit ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition x <=  widthLimit ifFalse: [ self error: self class outOfBoundsErrorDescrpition ]! !
!DelimitedRoom methodsFor: 'assertions' stamp: 'FS 12/10/2020 20:11:30' prior: 50882258!
assertItsInbounds: aPosition 
	self isInbounds: aPosition.
! !
!DelimitedRoom methodsFor: 'assertions' stamp: 'FS 12/10/2020 20:11:30' prior: 50886530!
assertItsInbounds: aPosition 
	self isInbounds: aPosition.
! !
!DelimitedRoom methodsFor: 'assertions' stamp: 'FS 12/10/2020 18:31:53' prior: 50886535!
assertItsInbounds: aPosition 
	aPosition y >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition x >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition y <= heightLimit ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition x <=  widthLimit ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
! !

!methodRemoval: DelimitedRoom #isInbounds: stamp: 'FS 12/10/2020 20:12:09'!
isInbounds: aPosition

	aPosition y >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition x >=0 ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition y <= heightLimit ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	aPosition x <=  widthLimit ifFalse: [ self error: self class outOfBoundsErrorDescrpition ]!
!DelimitedRoom methodsFor: 'assertions' stamp: 'FS 12/10/2020 20:13:07'!
isInBounds: aPosition 
	^(aPosition y >=0 and: aPosition x >=0 ) and: (aPosition y <= heightLimit and:aPosition x <=  widthLimit )
	 ! !
!DelimitedRoom methodsFor: 'assertions' stamp: 'FS 12/10/2020 20:13:28' prior: 50886540!
assertItsInbounds: aPosition 
	(self isInBounds: aPosition) ifFalse: [ self error: self class outOfBoundsErrorDescrpition ].
	 
! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 20:13:54'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 20:13:54'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 20:13:54'!
ERROR!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 20:13:54'!
ERROR!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 20:13:54'!
ERROR!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 20:13:54'!
ERROR!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 20:13:54'!
ERROR!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 20:13:54'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 20:13:54'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 20:13:54'!
ERROR!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 20:13:54'!
ERROR!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 20:13:54'!
ERROR!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 20:13:55'!
ERROR!
!DelimitedRoom methodsFor: 'assertions' stamp: 'FS 12/10/2020 20:14:03'!
assertPlayerIsEnteringInboundsAt: aPoint 
	self shouldBeImplemented.! !
!DelimitedRoom methodsFor: 'assertions' stamp: 'FS 12/10/2020 20:14:53' prior: 50886628!
assertPlayerIsEnteringInboundsAt: aPosition 
	(self isInBounds: aPosition) ifFalse: [self error: self class cannotEnterPlayerWhenIsOutOfBounds].! !

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 20:14:54'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 20:14:59'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 20:14:59'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 20:14:59'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 20:14:59'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 20:14:59'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 20:14:59'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 20:14:59'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 20:14:59'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 20:14:59'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 20:14:59'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 20:14:59'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 20:14:59'!
ERROR!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 20:14:59'!
ERROR!
!DelimitedRoom class methodsFor: 'error description' stamp: 'FS 12/10/2020 20:15:07'!
cannotEnterPlayerWhenIsOutOfBounds
	self shouldBeImplemented.! !
!DelimitedRoom class methodsFor: 'error description' stamp: 'FS 12/10/2020 20:15:16' prior: 50886690!
cannotEnterPlayerWhenIsOutOfBounds
	^'cannot enter a player out of bounds'.! !

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 20:15:18'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 20:15:21'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 20:15:21'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:15:44' prior: 50886481!
test12PlayerCannotEnterARoomStartingOutOfBounds
	|   newRoom playableCharacter |
	
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #East.
	
	self should:[ playableCharacter enterInto: newRoom . ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: anError messageText equals: 							DelimitedRoom cannotEnterPlayerWhenIsOutOfBounds.
					self deny: (newRoom aPlayerHasEntered)
							]
						
	
! !
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 20:16:18' prior: 50886220 overrides: 50885333!
movePlayerFrom: aSourcePoint to: aTargetPoint 
	| playerToMove |
	self assertItsInbounds: aTargetPoint.
	self assertCanMovePlayerInto: aTargetPoint.
	
	playerToMove _ map removeKey: aSourcePoint.
	map at: aTargetPoint put:playerToMove
	! !
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 20:17:48' prior: 50886861 overrides: 50885333!
movePlayerFrom: aSourcePoint to: aTargetPoint 
	| playerToMove |
	self assertItsInbounds: aTargetPoint.
	self assertCanMovePlayerInto: aTargetPoint.
	
	playerToMove _ map removeKey: aSourcePoint.
	map at: aTargetPoint put:playerToMove
	! !
!DelimitedRoom methodsFor: 'assertions' stamp: 'FS 12/10/2020 20:18:25'!
assertRoomIsFreeToJoin

	^ aPlayerIsHere ifTrue:[self error: self class cannotEnterARoomWithAnotherPlayerInIt]! !
!DelimitedRoom methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:18:25' prior: 50886506 overrides: 50885346!
enter: aPlayer at: aPosition
	self assertCanMovePlayerInto: aPosition .
	self assertRoomIsFreeToJoin.
	self assertPlayerIsEnteringInboundsAt: aPosition.
	
	aPlayerIsHere _ true.
	map at: aPosition put: aPlayer.! !

!methodRemoval: DelimitedRoom #assertRoomIsFree stamp: 'FS 12/10/2020 20:18:25'!
assertRoomIsFree

	^ aPlayerIsHere ifTrue:[self error: self class cannotEnterARoomWithAnotherPlayerInIt]!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:19:00' prior: 50885396!
test03PlayableCannotMoveForwardsOutOfBoundsBelow
	| playableCharacter newRoom roomWithNoItems |
	roomWithNoItems := DelimitedRoom withSize: 3 by: 3.
	newRoom _ roomWithNoItems .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South .
	playableCharacter enterInto: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
							   self assert: (playableCharacter isAt: 0@0 heading: #South ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 19:48:42' prior: 50886907!
test03PlayableCannotMoveForwardsOutOfBoundsBelow
	| playableCharacter newRoom |
	newRoom _ DelimitedRoom withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South .
	playableCharacter enterInto: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
							   self assert: (playableCharacter isAt: 0@0 heading: #South ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:19:19' prior: 50886931!
test03PlayableCannotMoveForwardsOutOfBoundsBelow
	| playableCharacter newRoom roomWithNoItems |
	roomWithNoItems := DelimitedRoom withSize: 3 by: 3.
	newRoom _ roomWithNoItems .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South .
	playableCharacter enterInto: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
							   self assert: (playableCharacter isAt: 0@0 heading: #South ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:19:28' prior: 50886953!
test03PlayableCannotMoveForwardsOutOfBoundsBelow
	| playableCharacter newRoom roomWithNoItems |
 
	newRoom _ DelimitedRoom withSize: 3 by: 3.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South .
	playableCharacter enterInto: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
							   self assert: (playableCharacter isAt: 0@0 heading: #South ).
								self assert: (newRoom aPlayerHasEntered)]
! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 20:19:31'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 20:19:31'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:19:41'!
roomWithNoItems

	^ DelimitedRoom withSize: 3 by: 3! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:19:41' prior: 50886977!
test03PlayableCannotMoveForwardsOutOfBoundsBelow
	| playableCharacter newRoom roomWithNoItems |
 
	newRoom _ self roomWithNoItems.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #South .
	playableCharacter enterInto: newRoom .
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
							   self assert: (playableCharacter isAt: 0@0 heading: #South ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:22:57'!
playerStartingAt: aPosition heading: aHeading andJoined: aRoom
	| playableCharacter |
 
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: aPosition heading: aHeading .
	playableCharacter enterInto: aRoom .
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:23:46' prior: 50887138!
test03PlayableCannotMoveForwardsOutOfBoundsBelow
	| playableCharacter newRoom roomWithNoItems |
 
	newRoom _ self roomWithNoItems.
	playableCharacter _ self playerStartingAt: 0@0 heading: #South andJoined: newRoom.

	 
	self
		should:[playableCharacter moveForward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
							   self assert: (playableCharacter isAt: 0@0 heading: #South ).
								self assert: (newRoom aPlayerHasEntered)]
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:24:32' prior: 50885506!
test07PlayerCannotBackwardsOutOfBounds 
	| playableCharacter newRoom |
	newRoom _ DelimitedRoom withSize: 3 by: 3 .
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 0@0 heading: #East   .
	playableCharacter enterInto: newRoom .
	self
		should:[playableCharacter moveBackward ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo:[:anError | self assert: anError messageText equals: DelimitedRoom outOfBoundsErrorDescrpition.
								self assert: (playableCharacter isAt: 0@0 heading: #East ).
								self assert: (newRoom aPlayerHasEntered)                             ]
! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 20:24:33'!
ERROR!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 20:24:33'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 20:24:33'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:24:52' prior: 50887160!
playerStartingAt: aPosition heading: aHeading andJoined: aRoom
	| playableCharacter |
 
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: aPosition heading: aHeading .
	playableCharacter enterInto: aRoom .
	^playableCharacter 
	
! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 20:24:53'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 20:24:53'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 20:24:53'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 20:24:53'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 20:24:53'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 20:24:53'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 20:24:53'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 20:24:53'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 20:24:53'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 20:24:53'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 20:24:53'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 20:24:53'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 20:24:55'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 20:24:55'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:25:37'!
test13PlayerCanTakePortableItemsInRoom
	|   newRoom playableCharacter |
	
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #East.
	
	self should:[ playableCharacter enterInto: newRoom . ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: anError messageText equals: 							DelimitedRoom cannotEnterPlayerWhenIsOutOfBounds.
					self deny: (newRoom aPlayerHasEntered)
							]
						
	
! !

StageObject subclass: #NonPortableObjects
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObjects category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 20:26:44'!
StageObject subclass: #NonPortableObjects
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObjects class methodsFor: 'nil' stamp: 'FS 12/10/2020 20:27:47'!
named: aName 
	^self new initializeWith: aName.
! !
!NonPortableObjects methodsFor: 'initialization' stamp: 'FS 12/10/2020 20:28:22'!
initializeWith: aName
	name _ aName.
	stageObjects _ OrderedCollection new.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:28:36'!
test13PlayerCanTakePortableObjectInRoom
	|   newRoom playableCharacter |
	
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #East.
	
	self should:[ playableCharacter enterInto: newRoom . ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: anError messageText equals: 							DelimitedRoom cannotEnterPlayerWhenIsOutOfBounds.
					self deny: (newRoom aPlayerHasEntered)
							]
						
	
! !

!methodRemoval: RoomTest #test13PlayerCanTakePortableItemsInRoom stamp: 'FS 12/10/2020 20:28:38'!
test13PlayerCanTakePortableItemsInRoom
	|   newRoom playableCharacter |
	
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #East.
	
	self should:[ playableCharacter enterInto: newRoom . ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: anError messageText equals: 							DelimitedRoom cannotEnterPlayerWhenIsOutOfBounds.
					self deny: (newRoom aPlayerHasEntered)
							]
						
	
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:30:26'!
test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem
	|   newRoom playableCharacter |
	
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #East.
	
	self should:[ playableCharacter enterInto: newRoom . ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: anError messageText equals: 							DelimitedRoom cannotEnterPlayerWhenIsOutOfBounds.
					self deny: (newRoom aPlayerHasEntered)
							]
						
	
! !

!methodRemoval: RoomTest #test13PlayerCanTakePortableObjectInRoom stamp: 'FS 12/10/2020 20:30:26'!
test13PlayerCanTakePortableObjectInRoom
	|   newRoom playableCharacter |
	
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: Dictionary new.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 3@1 heading: #East.
	
	self should:[ playableCharacter enterInto: newRoom . ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: anError messageText equals: 							DelimitedRoom cannotEnterPlayerWhenIsOutOfBounds.
					self deny: (newRoom aPlayerHasEntered)
							]
						
	
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:31:13' prior: 50887622!
test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@1 heading: #East.
	
	self should:[ playableCharacter enterInto: newRoom . ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: anError messageText equals: 							DelimitedRoom cannotEnterPlayerWhenIsOutOfBounds.
					self deny: (newRoom aPlayerHasEntered)
							]
						
	
! !

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 20:31:19'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:33:43' prior: 50887663!
test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #South.
	
	self should:[ playableCharacter take ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: anError messageText equals: 							DelimitedRoom cannotEnterPlayerWhenIsOutOfBounds.
					self deny: (newRoom aPlayerHasEntered)
							]
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:35:00' prior: 50887692!
test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #South.
	
	self should:[ playableCharacter take ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: anError messageText equals: 							DelimitedRoom cannotTakeItemNotInFrontOfYou.
					self deny: (playableCharacter backpackIncludes: portableObject)
							]
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:35:25' prior: 50887717!
test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #South.
	playableCharacter enterInto: newRoom.
	self should:[ playableCharacter take ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: anError messageText equals: 							DelimitedRoom cannotTakeItemNotInFrontOfYou.
					self deny: (playableCharacter backpackIncludes: portableObject)
							]
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:36:08' prior: 50887743!
test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should:[ playableCharacter take ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: anError messageText equals: 							DelimitedRoom cannotTakeItemNotInFrontOfYou.
					self deny: (playableCharacter backpackIncludes: portableObject)
							]
						
	
! !

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 20:36:14'!
ERROR!
!PlayableCharacter methodsFor: 'actions' stamp: 'FS 12/10/2020 20:36:24'!
take
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'actions' stamp: 'FS 12/10/2020 20:37:08' prior: 50887800!
take
  	room playerTakeItem.! !

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 20:37:15'!
ERROR!
!DelimitedRoom methodsFor: 'player action' stamp: 'FS 12/10/2020 20:37:24'!
playerTakeItem
	self shouldBeImplemented.! !
!DelimitedRoom methodsFor: 'player action' stamp: 'FS 12/10/2020 20:37:48' prior: 50887812!
playerTakeItem
	self error: self class cannotTakeItemNotInFrontOfYou! !

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 20:37:50'!
ERROR!
!DelimitedRoom class methodsFor: 'error description' stamp: 'FS 12/10/2020 20:37:57'!
cannotTakeItemNotInFrontOfYou
	self shouldBeImplemented.! !
!DelimitedRoom class methodsFor: 'error description' stamp: 'FS 12/10/2020 20:38:09' prior: 50887826!
cannotTakeItemNotInFrontOfYou
	^'You cannot take item not directly in front of you!!'! !

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 20:38:10'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 20:38:10'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 20:38:10'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 20:38:10'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 20:38:10'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 20:38:10'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 20:38:10'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 20:38:10'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 20:38:10'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 20:38:10'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 20:38:10'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 20:38:10'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 20:38:10'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 20:38:10'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:40:55'!
test14PlayerCanTakePortableObjectInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should:[ playableCharacter take ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: anError messageText equals: 							DelimitedRoom cannotTakeItemNotInFrontOfYou.
					self deny: (playableCharacter backpackIncludes: portableObject)
							]
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:41:06' prior: 50887886!
test14PlayerCanTakePortableObjectInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should:[ playableCharacter take ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: anError messageText equals: 							DelimitedRoom cannotTakeItemNotInFrontOfYou.
					self deny: (playableCharacter backpackIncludes: portableObject)
							]
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 20:41:10' prior: 50887912!
test14PlayerCanTakePortableObjectInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should:[ playableCharacter take ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: anError messageText equals: 							DelimitedRoom cannotTakeItemNotInFrontOfYou.
					self assert: (playableCharacter backpackIncludes: portableObject)
							]
						
	
! !

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 20:45:12'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'FS 12/10/2020 20:46:14' prior: 50887804!
take
  	room playerTakeItem.! !

!classDefinition: #DelimitedRoom category: 'ISW1-2020-2C-2doParcial' stamp: 'FS 12/10/2020 20:50:51'!
Room subclass: #DelimitedRoom
	instanceVariableNames: 'widthLimit heightLimit map aPlayerIsHere playerPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 20:51:00' prior: 50886873 overrides: 50885333!
movePlayerFrom: aSourcePoint to: aTargetPosition 
	| playerToMove |
	self assertItsInbounds: aTargetPosition.
	self assertCanMovePlayerInto: aTargetPosition.
	
	playerToMove _ map removeKey: aSourcePoint.
	map at: aTargetPosition put:playerToMove.
	playerPosition _ aTargetPosition.
	! !
!DelimitedRoom methodsFor: 'initialization' stamp: 'FS 12/10/2020 20:51:09' prior: 50884525!
initializeWithSize: aMaxWidth by: aMaxHeight with: aMapOfItems  
	widthLimit  := aMaxWidth -1.
	heightLimit  := aMaxHeight -1.
	map _ aMapOfItems.
	aPlayerIsHere _ false.
	playerPosition _ nil.! !
!DelimitedRoom methodsFor: 'player entry' stamp: 'FS 12/10/2020 20:51:23' prior: 50886891 overrides: 50885346!
enter: aPlayer at: aPosition
	self assertCanMovePlayerInto: aPosition .
	self assertRoomIsFreeToJoin.
	self assertPlayerIsEnteringInboundsAt: aPosition.
	
	aPlayerIsHere _ true.
	map at: aPosition put: aPlayer.
	playerPosition _ aPosition! !
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 20:53:05' prior: 50887817!
playerTakeItem
	
	(self playerHasItenInFrotOfHim) ifFalse: [self error: self class cannotTakeItemNotInFrontOfYou]! !
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 20:53:09' prior: 50888015!
playerTakeItem
	
	(self playerHasItemInFrotOfHim) ifFalse: [self error: self class cannotTakeItemNotInFrontOfYou]! !
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 20:53:38'!
playerHasItemInFrotOfHim
	
 ! !
!PlayableCharacter methodsFor: 'testing' stamp: 'FS 12/10/2020 20:54:01'!
heading: aCardinalPoint

	^ [ heading cardinalPoint = aCardinalPoint ]! !
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 20:54:55' prior: 50888029!
playerHasItemInFrotOfHim
	| player |
	player _ map at: playerPosition 
 ! !
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 20:56:55' prior: 50888039!
playerHasItemInFrotOfHim
	| player |
	player _ map at: playerPosition .
	
	(player heading: #South )ifTrue: [ self thereIsAPortableObjectAt: playerPosition - 0@1] .
	(player heading: #North )ifTrue: [ self thereIsAPortableObjectAt: playerPosition + 0@1] .
	(player heading: #East) ifTrue: [ self thereIsAPortableObjectAt: playerPosition + 1@0] .
	(player heading: #West) ifTrue: [ self thereIsAPortableObjectAt: playerPosition - 1@0] .! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 20:56:58'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 20:56:58'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 20:56:58'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 20:56:58'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 20:56:58'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 20:56:58'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 20:56:58'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 20:56:58'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 20:56:58'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 20:56:58'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 20:56:58'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 20:56:58'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 20:56:58'!
FAILURE!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 20:56:58'!
FAILURE!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 20:57:00'!
FAILURE!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 20:57:19'!
FAILURE!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 20:57:19'!
FAILURE!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 20:57:24'!
FAILURE!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 20:57:24'!
FAILURE!
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 20:57:44' prior: 50888022!
playerTakeItem
	
	(self playerHasItemInFrotOfHim) ifFalse: [self error: self class cannotTakeItemNotInFrontOfYou]
	
	! !
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 20:58:38' prior: 50888129!
playerTakeItem
	
	| itemToTakePosition |
	itemToTakePosition _ self calculateItemToTakePosition.
	(self playerHasItemInFrotOfHim) ifFalse: [self error: self class cannotTakeItemNotInFrontOfYou]
	
	! !
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 20:58:49'!
 calculateItemToTakePosition


	
	! !
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 20:59:06' prior: 50888145!
calculateItemToTakePosition
	| player |
	(player heading: #South )ifTrue: [ self thereIsAPortableObjectAt: playerPosition - 0@1] .
	(player heading: #North )ifTrue: [ self thereIsAPortableObjectAt: playerPosition + 0@1] .
	(player heading: #East) ifTrue: [ self thereIsAPortableObjectAt: playerPosition + 1@0] .
	(player heading: #West) ifTrue: [ self thereIsAPortableObjectAt: playerPosition - 1@0] .

	
	! !
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 20:59:34' prior: 50888150!
calculateItemToTakePosition
	| player |
	player _ map at: playerPosition .
	
	(player heading: #South )ifTrue: [^ playerPosition - 0@1] .
	(player heading: #North )ifTrue: [ ^playerPosition + 0@1] .
	(player heading: #East) ifTrue: [ ^playerPosition + 1@0] .
	(player heading: #West) ifTrue: [ ^ playerPosition - 1@0] .

	
	! !

!methodRemoval: DelimitedRoom #playerHasItemInFrotOfHim stamp: 'FS 12/10/2020 20:59:38'!
playerHasItemInFrotOfHim
	| player |
	player _ map at: playerPosition .
	
	(player heading: #South )ifTrue: [ self thereIsAPortableObjectAt: playerPosition - 0@1] .
	(player heading: #North )ifTrue: [ self thereIsAPortableObjectAt: playerPosition + 0@1] .
	(player heading: #East) ifTrue: [ self thereIsAPortableObjectAt: playerPosition + 1@0] .
	(player heading: #West) ifTrue: [ self thereIsAPortableObjectAt: playerPosition - 1@0] .!
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 21:00:13' prior: 50888136!
playerTakeItem
	
	| itemToTakePosition itemToTake |
	itemToTakePosition _ self calculateItemToTakePosition.
	itemToTake _ map at:itemToTakePosition  ifAbsent: [self error: self class cannotTakeItemNotInFrontOfYou].
	
	! !

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:00:25'!
FAILURE!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:00:25'!
FAILURE!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:00:37'!
FAILURE!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:00:37'!
FAILURE!
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 21:01:35' prior: 50888196!
playerTakeItem
	
	| itemToTakePosition itemToTake player |
	itemToTakePosition _ self calculateItemToTakePosition.
	itemToTake _ map at:itemToTakePosition  ifAbsent: [self error: self class cannotTakeItemNotInFrontOfYou].
	
	player _ map at: playerPosition .
	player take: itemToTake
	
	! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:01:37'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:01:37'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:01:37'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:01:37'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:01:37'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:01:37'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:01:37'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:01:37'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:01:37'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:01:37'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:01:37'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:01:37'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:01:37'!
FAILURE!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:01:37'!
FAILURE!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:01:39'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:02:23' prior: 50887770!
test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #South.
	playableCharacter enterInto: newRoom.
	self halt.
	self should:[ playableCharacter take ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: anError messageText equals: 							DelimitedRoom cannotTakeItemNotInFrontOfYou.
					self deny: (playableCharacter backpackIncludes: portableObject)
							]
						
	
! !

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:02:37'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:02:48' prior: 50888286!
test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@0 heading: #South.
	playableCharacter enterInto: newRoom.
	self should:[ playableCharacter take ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: anError messageText equals: 							DelimitedRoom cannotTakeItemNotInFrontOfYou.
					self deny: (playableCharacter backpackIncludes: portableObject)
							]
						
	
! !
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 21:03:00' prior: 50888166!
calculateItemToTakePosition
	| player |
	player _ map at: playerPosition .
	self halt.
	(player heading: #South )ifTrue: [^ playerPosition - 0@1] .
	(player heading: #North )ifTrue: [ ^playerPosition + 0@1] .
	(player heading: #East) ifTrue: [ ^playerPosition + 1@0] .
	(player heading: #West) ifTrue: [ ^ playerPosition - 1@0] .

	
	! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:03:00'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:03:00'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:03:00'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:03:00'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:03:00'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:03:00'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:03:00'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:03:00'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:03:00'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:03:00'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:03:00'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:03:00'!
PASSED!

player heading: #South!
!PlayableCharacter methodsFor: 'testing' stamp: 'FS 12/10/2020 21:03:38' prior: 50888033!
heading: aCardinalPoint

	^   heading cardinalPoint = aCardinalPoint  ! !

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:03:40'!
ERROR!
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 21:03:57' prior: 50888344!
calculateItemToTakePosition
	| player |
	player _ map at: playerPosition .
	self halt.
	(player heading: #South )ifTrue: [^ playerPosition - (0@1)] .
	(player heading: #North )ifTrue: [ ^playerPosition + (0@1)] .
	(player heading: #East) ifTrue: [ ^playerPosition + (1@0)] .
	(player heading: #West) ifTrue: [ ^ playerPosition - (1@0)] .

	
	! !

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:04:14'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:04:17'!
FAILURE!
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 21:05:31' prior: 50888409!
calculateItemToTakePosition
	| player |
	player _ map at: playerPosition .
	(player heading: #South )ifTrue: [^ playerPosition - (0@1)] .
	(player heading: #North )ifTrue: [ ^playerPosition + (0@1)] .
	(player heading: #East) ifTrue: [ ^playerPosition + (1@0)] .
	(player heading: #West) ifTrue: [ ^ playerPosition - (1@0)] .

	
	! !

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:05:32'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:05:40' prior: 50887938!
test14PlayerCanTakePortableObjectInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should:[ playableCharacter take ]
	raise: Error - MessageNotUnderstood
	withExceptionDo:[ :anError | 
					self assert: (playableCharacter backpackIncludes: portableObject)
							]
						
	
! !

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:05:41'!
FAILURE!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:05:48'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:06:22' prior: 50888447!
test14PlayerCanTakePortableObjectInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take.
	playableCharacter backpackIncludes: portableObject
							
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:06:35'!
test15PlayerCanTakePortableNonObjectInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take.
	playableCharacter backpackIncludes: portableObject
							
						
	
! !

!classRenamed: #NonPortableObjects as: #NonPortableObject stamp: 'FS 12/10/2020 21:06:56'!
Smalltalk renameClassNamed: #NonPortableObjects as: #NonPortableObject!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:07:25'!
test15PlayerCanTakeNonPortableNonObjectInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NonPortableObject named: 'armario' .
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take.
	playableCharacter backpackIncludes: portableObject
							
						
	
! !

!methodRemoval: RoomTest #test15PlayerCanTakePortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:07:39'!
test15PlayerCanTakePortableNonObjectInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NoPointsPortableObject named: 'escoba' weighing: 30.
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take.
	playableCharacter backpackIncludes: portableObject
							
						
	
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:07:44'!
test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NonPortableObject named: 'armario' .
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take.
	playableCharacter backpackIncludes: portableObject
							
						
	
! !

!methodRemoval: RoomTest #test15PlayerCanTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:07:45'!
test15PlayerCanTakeNonPortableNonObjectInFrontOfThem
	|   newRoom playableCharacter items portableObject |
	portableObject _ NonPortableObject named: 'armario' .
	items _ Dictionary new at: 1@1 put: portableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take.
	playableCharacter backpackIncludes: portableObject
							
						
	
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:08:04' prior: 50888562!
test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem
	|   newRoom playableCharacter items nonPortableObject |
	nonPortableObject _ NonPortableObject named: 'armario' .
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take.
	playableCharacter backpackIncludes: nonPortableObject
							
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:09:43' prior: 50888602!
test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem
	|   newRoom playableCharacter items nonPortableObject |
	nonPortableObject _ NonPortableObject named: 'armario' .
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should: [playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: 
								Room cannotTakeNonPortableObjectErrorDescription.
								self deny: (playableCharacter backpackIncludes: nonPortableObject)]
							
						
	
! !

!testRun: #RoomTest #test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:09:45'!
ERROR!
!NonPortableObject methodsFor: 'assertions' stamp: 'FS 12/10/2020 21:10:17'!
assertCanAddTo: aBackpack 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'assertions' stamp: 'FS 12/10/2020 21:11:09' prior: 50888652!
assertCanAddTo: aBackpack 
	self error: self class youCantTakeMeOnYourBackpack! !

!testRun: #RoomTest #test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:11:13'!
ERROR!
!NonPortableObject class methodsFor: 'error description' stamp: 'FS 12/10/2020 21:11:27'!
youCantTakeMeOnYourBackpack
	self shouldBeImplemented.! !
!NonPortableObject class methodsFor: 'error description' stamp: 'FS 12/10/2020 21:11:42' prior: 50888667!
youCantTakeMeOnYourBackpack
	^' you cant take me on your backpack, I am too big'! !

!testRun: #RoomTest #test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:11:43'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:11:48' prior: 50888622!
test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem
	|   newRoom playableCharacter items nonPortableObject |
	nonPortableObject _ NonPortableObject named: 'armario' .
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should: [playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: 
								Room youCantTakeMeOnYourBackpack.
								self deny: (playableCharacter backpackIncludes: nonPortableObject)]
							
						
	
! !

!testRun: #RoomTest #test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:11:49'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:11:56' prior: 50888683!
test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem
	|   newRoom playableCharacter items nonPortableObject |
	nonPortableObject _ NonPortableObject named: 'armario' .
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should: [playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: 
								NonPortableObject youCantTakeMeOnYourBackpack.
								self deny: (playableCharacter backpackIncludes: nonPortableObject)]
							
						
	
! !

!testRun: #RoomTest #test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:11:57'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:11:57'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:11:57'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:11:57'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:11:57'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:11:57'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:11:57'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:11:57'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:11:57'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:11:57'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:11:57'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:11:57'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:11:57'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:11:57'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:11:57'!
PASSED!

!testRun: #RoomTest #test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:11:57'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:12:16'!
test16PlayerCannotTakeNonPortableNonObjectInFrontOfThem
	|   newRoom playableCharacter items nonPortableObject |
	nonPortableObject _ NonPortableObject named: 'armario' .
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should: [playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: 
								NonPortableObject youCantTakeMeOnYourBackpack.
								self deny: (playableCharacter backpackIncludes: nonPortableObject)]
							
						
	
! !
!NonPortableObject methodsFor: 'nil' stamp: 'FS 12/10/2020 21:13:14'!
add: aStageObject
	stageObjects add: aStageObject.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:14:39'!
test16PlayerCanTakePortableObjectsInNonPortableObjects
	|   newRoom playableCharacter items nonPortableObject |
	nonPortableObject _ NonPortableObject named: 'armario' .
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should: [playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: 
								NonPortableObject youCantTakeMeOnYourBackpack.
								self deny: (playableCharacter backpackIncludes: nonPortableObject)]
							
						
	
! !

!methodRemoval: RoomTest #test16PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:14:41'!
test16PlayerCannotTakeNonPortableNonObjectInFrontOfThem
	|   newRoom playableCharacter items nonPortableObject |
	nonPortableObject _ NonPortableObject named: 'armario' .
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should: [playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: 
								NonPortableObject youCantTakeMeOnYourBackpack.
								self deny: (playableCharacter backpackIncludes: nonPortableObject)]
							
						
	
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:16:43' prior: 50888826!
test16PlayerCanTakePortableObjectsInNonPortableObjects
	|   newRoom playableCharacter items nonPortableObject key |
	nonPortableObject _ NonPortableObject named: 'armario' .
	key _ NoPointsPortableObject named: 'key' weighing: 5.
	 

	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should: [playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: 
								NonPortableObject youCantTakeMeOnYourBackpack.
								self deny: (playableCharacter backpackIncludes: nonPortableObject)]
							
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:16:56'!
test16PlayerCanTakePortableObjectsWithinNonPortableObjects
	|   newRoom playableCharacter items nonPortableObject key |
	nonPortableObject _ NonPortableObject named: 'armario' .
	key _ NoPointsPortableObject named: 'key' weighing: 5.
	 

	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should: [playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: 
								NonPortableObject youCantTakeMeOnYourBackpack.
								self deny: (playableCharacter backpackIncludes: nonPortableObject)]
							
						
	
! !

!methodRemoval: RoomTest #test16PlayerCanTakePortableObjectsInNonPortableObjects stamp: 'FS 12/10/2020 21:16:56'!
test16PlayerCanTakePortableObjectsInNonPortableObjects
	|   newRoom playableCharacter items nonPortableObject key |
	nonPortableObject _ NonPortableObject named: 'armario' .
	key _ NoPointsPortableObject named: 'key' weighing: 5.
	 

	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should: [playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: 
								NonPortableObject youCantTakeMeOnYourBackpack.
								self deny: (playableCharacter backpackIncludes: nonPortableObject)]
							
						
	
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:17:25' prior: 50888907!
test16PlayerCanTakePortableObjectsWithinNonPortableObjects
	|   newRoom playableCharacter items nonPortableObject key |
	nonPortableObject _ NonPortableObject named: 'armario' .
	key _ NoPointsPortableObject named: 'key' weighing: 5.
	 

	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take .
	self assert: (playableCharacter backpackIncludes: key) 
							
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:17:45' prior: 50888964!
test16PlayerCanTakePortableObjectsWithinNonPortableObjects
	|   newRoom playableCharacter items nonPortableObject key |
	nonPortableObject _ NonPortableObject named: 'armario' .
	key _ NoPointsPortableObject named: 'key' weighing: 5.
	nonPortableObject add: key.

	items _ Dictionary new at: 1@1 put: key; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take .
	self assert: (playableCharacter backpackIncludes: key) 
							
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:18:14' prior: 50888987!
test16PlayerCanTakePortableObjectsWithinNonPortableObjects
	|   newRoom playableCharacter items nonPortableObject key |
	nonPortableObject _ NonPortableObject named: 'armario' .
	key _ NoPointsPortableObject named: 'key' weighing: 5.
	nonPortableObject add: key.

	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take .
	self assert: (playableCharacter backpackIncludes: key) 
							
						
	
! !
!DelimitedRoom methodsFor: 'player actions' stamp: 'FS 12/10/2020 21:19:55' prior: 50888221!
playerTakeItem
	
	| itemToTakePosition itemToTake player |
	itemToTakePosition _ self calculateItemToTakePosition.
	itemToTake _ map at:itemToTakePosition  ifAbsent: [self error: self class cannotTakeItemNotInFrontOfYou].
	
	player _ map at: playerPosition .
	itemToTake beTakenBy: player.
	
	! !
!PortableObject methodsFor: 'nil' stamp: 'FS 12/10/2020 21:20:15'!
beTakenByPlayer: aPlayer
	aPlayer take: self.! !

!testRun: #RoomTest #test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:20:22'!
ERROR!

!testRun: #RoomTest #test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:20:22'!
ERROR!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:20:27'!
ERROR!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:20:27'!
ERROR!
!PortableObject methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:20:40'!
beTakenBy: aPlayer
	aPlayer take: self.! !

!methodRemoval: PortableObject #beTakenByPlayer: stamp: 'FS 12/10/2020 21:20:40'!
beTakenByPlayer: aPlayer
	aPlayer take: self.!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:20:48'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:20:48'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:20:48'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:20:48'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:20:48'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:20:48'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:20:48'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:20:48'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:20:48'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:20:48'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:20:48'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:20:48'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:20:48'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:20:48'!
PASSED!

!testRun: #RoomTest #test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:20:48'!
ERROR!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:20:48'!
ERROR!
!NonPortableObject methodsFor: 'nil' stamp: 'FS 12/10/2020 21:21:10'!
beTakenBy:aPlayer! !
!NonPortableObject methodsFor: 'player taking' stamp: 'FS 12/10/2020 21:21:53' prior: 50889128!
beTakenBy: aPlayer
	stageObjects do:[ :aStageObject | aStageObject beTakenBy: aPlayer ]! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:21:54'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:21:54'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:21:54'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:21:54'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:21:54'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:21:54'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:21:54'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:21:54'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:21:54'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:21:54'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:21:54'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:21:54'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:21:54'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:21:54'!
PASSED!

!testRun: #RoomTest #test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:21:54'!
FAILURE!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:21:54'!
PASSED!

!testRun: #RoomTest #test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:21:54'!
FAILURE!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:22:04'!
PASSED!

!testRun: #RoomTest #test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:22:06'!
FAILURE!

!testRun: #RoomTest #test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:22:06'!
FAILURE!

!testRun: #RoomTest #test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:22:40'!
FAILURE!

!testRun: #RoomTest #test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:22:40'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:23:42'!
test15PlayerDoesntTakeItemsOfEmptyNonPortableObject
	|   newRoom playableCharacter items nonPortableObject |
	nonPortableObject _ NonPortableObject named: 'armario' .
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should: [playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: 
								NonPortableObject youCantTakeMeOnYourBackpack.
								self deny: (playableCharacter backpackIncludes: nonPortableObject)]
							
						
	
! !

!methodRemoval: RoomTest #test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem stamp: 'FS 12/10/2020 21:23:42'!
test15PlayerCannotTakeNonPortableNonObjectInFrontOfThem
	|   newRoom playableCharacter items nonPortableObject |
	nonPortableObject _ NonPortableObject named: 'armario' .
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should: [playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo:[:anError | self assert: anError messageText equals: 
								NonPortableObject youCantTakeMeOnYourBackpack.
								self deny: (playableCharacter backpackIncludes: nonPortableObject)]
							
						
	
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:24:09' prior: 50889216!
test15PlayerDoesntTakeItemsOfEmptyNonPortableObject
	|   newRoom playableCharacter items nonPortableObject |
	nonPortableObject _ NonPortableObject named: 'armario' .
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take .
	self deny: (playableCharacter backpackIncludes: nonPortableObject) 
							
						
	
! !

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:24:10'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:24:10'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:24:10'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:24:10'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:24:10'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:24:10'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:24:10'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:24:10'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:24:10'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:24:10'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:24:10'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:24:10'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:24:10'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:24:10'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:24:10'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:24:10'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:24:10'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:25:13'!
test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull
	|   newRoom playableCharacter items nonPortableObject   sword |
	nonPortableObject _ NonPortableObject named: 'armario' .
	sword _ NoPointsPortableObject named: 'sword' weighing: 75.
	nonPortableObject add: sword.

	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take .
	self assert: (playableCharacter backpackIncludes: sword) 
							
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:25:39' prior: 50889349!
test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull
	|   newRoom playableCharacter items nonPortableObject   sword ballista |
	nonPortableObject _ NonPortableObject named: 'armario' .
	sword _ NoPointsPortableObject named: 'sword' weighing: 75.
	ballista _  NoPointsPortableObject named: 'sword' weighing: 40.
	nonPortableObject add: sword.

	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take .
	self assert: (playableCharacter backpackIncludes: sword) 
							
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:25:50' prior: 50889373!
test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull
	|   newRoom playableCharacter items nonPortableObject   sword ballista |
	nonPortableObject _ NonPortableObject named: 'armario' .
	sword _ NoPointsPortableObject named: 'sword' weighing: 75.
	ballista _  NoPointsPortableObject named: 'sword' weighing: 40.
	nonPortableObject add: sword.
	nonPortableObject add: ballista.
	
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take .
	self assert: (playableCharacter backpackIncludes: sword) 
							
						
	
! !

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:26:10'!
ERROR!
!NonPortableObject methodsFor: 'assertions' stamp: 'FS 12/10/2020 21:27:13' prior: 50888657!
assertCanAddTo: aBackpack 
	self halt.! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:27:15'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:27:15'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:27:15'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:27:15'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:27:15'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:27:15'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:27:15'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:27:15'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:27:15'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:27:15'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:27:15'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:27:15'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:27:15'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:27:15'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:27:15'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:27:15'!
PASSED!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:27:15'!
ERROR!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:27:15'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:27:41' prior: 50889400!
test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull
	|   newRoom playableCharacter items nonPortableObject   sword ballista |
	nonPortableObject _ NonPortableObject named: 'armario' .
	sword _ NoPointsPortableObject named: 'sword' weighing: 75.
	ballista _  NoPointsPortableObject named: 'sword' weighing: 40.
	nonPortableObject add: sword.
	nonPortableObject add: ballista.
	
	self halt.
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take .
	self assert: (playableCharacter backpackIncludes: sword) 
							
						
	
! !

!methodRemoval: NonPortableObject #assertCanAddTo: stamp: 'FS 12/10/2020 21:28:32'!
assertCanAddTo: aBackpack 
	self halt.!
!NonPortableObject methodsFor: 'nil' stamp: 'FS 12/10/2020 21:30:54'!
includes: aStageObject
	stageObjects includes: aStageObject! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:31:33' prior: 50889010!
test16PlayerCanTakePortableObjectsWithinNonPortableObjects
	|   newRoom playableCharacter items nonPortableObject key |
	nonPortableObject _ NonPortableObject named: 'armario' .
	key _ NoPointsPortableObject named: 'key' weighing: 5.
	nonPortableObject add: key.

	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take .
	self assert: (playableCharacter backpackIncludes: key) .
	self deny: (NonPortableObject includes: key)						
						
	
! !

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:31:34'!
ERROR!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:31:52'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:31:52'!
ERROR!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:31:54'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:32:04' prior: 50889537!
test16PlayerCanTakePortableObjectsWithinNonPortableObjects
	|   newRoom playableCharacter items nonPortableObject key |
	nonPortableObject _ NonPortableObject named: 'armario' .
	key _ NoPointsPortableObject named: 'key' weighing: 5.
	nonPortableObject add: key.

	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take .
	self assert: (playableCharacter backpackIncludes: key) .
	self deny: (nonPortableObject includes: key)						
						
	
! !

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:32:13'!
ERROR!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:32:13'!
ERROR!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:32:28' prior: 50889532!
includes: aStageObject
	^stageObjects includes: aStageObject! !

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:32:31'!
FAILURE!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:32:31'!
FAILURE!
!NonPortableObject methodsFor: 'player taking' stamp: 'FS 12/10/2020 21:33:21' prior: 50889132!
beTakenBy: aPlayer
	stageObjects do:[ :aStageObject | aStageObject beTakenBy: aPlayer .
							    stageObjects remove: aStageObject]! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:33:22'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:33:22'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:33:22'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:33:22'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:33:22'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:33:22'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:33:22'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:33:22'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:33:22'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:33:22'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:33:22'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:33:22'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:33:22'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:33:22'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:33:22'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:33:22'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:33:31' prior: 50889501!
test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull
	|   newRoom playableCharacter items nonPortableObject   sword ballista |
	nonPortableObject _ NonPortableObject named: 'armario' .
	sword _ NoPointsPortableObject named: 'sword' weighing: 75.
	ballista _  NoPointsPortableObject named: 'sword' weighing: 40.
	nonPortableObject add: sword.
	nonPortableObject add: ballista.
	
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	playableCharacter take .
	self assert: (playableCharacter backpackIncludes: sword) 
							
						
	
! !

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:33:31'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:33:39'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:33:39'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:33:39'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:33:39'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:33:39'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:33:39'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:33:39'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:33:39'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:33:39'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:33:39'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:33:39'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:33:39'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:33:39'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:33:39'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:33:39'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:33:39'!
PASSED!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:33:39'!
PASSED!
!NonPortableObject methodsFor: 'player taking' stamp: 'FS 12/10/2020 21:34:47' prior: 50889764!
beTakenBy: aPlayer
	| stageObjectsBackup |
	stageObjectsBackup _ stageObjects copy.
	stageObjects do:[ :aStageObject | aStageObject beTakenBy: aPlayer .
							    stageObjects remove: aStageObject]! !
!NonPortableObject methodsFor: 'player taking' stamp: 'FS 12/10/2020 21:34:56' prior: 50889920!
beTakenBy: aPlayer
	| stageObjectsBackup |
	stageObjectsBackup _ stageObjects copy.
	stageObjectsBackup do:[ :aStageObject | aStageObject beTakenBy: aPlayer .
							    stageObjects remove: aStageObject]! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:34:59'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:34:59'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:34:59'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:34:59'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:34:59'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:34:59'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:34:59'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:34:59'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:34:59'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:34:59'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:34:59'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:34:59'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:34:59'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:34:59'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:34:59'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:34:59'!
PASSED!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:34:59'!
ERROR!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:34:59'!
ERROR!
!NonPortableObject methodsFor: 'player taking' stamp: 'FS 12/10/2020 21:35:06' prior: 50889930!
beTakenBy: aPlayer
	| stageObjectsBackup |
	stageObjectsBackup _ stageObjects copy.
	
	stageObjectsBackup do:[ :aStageObject | aStageObject beTakenBy: aPlayer .
							    stageObjects remove: aStageObject]! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:37:29' prior: 50889718!
test16PlayerCanTakePortableObjectsWithinNonPortableObjects
	|   newRoom playableCharacter items nonPortableObject key |
	nonPortableObject _ NonPortableObject named: 'armario' .
	key _ NoPointsPortableObject named: 'key' weighing: 5.
	nonPortableObject add: key.

	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should:[ playableCharacter take ]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: self]
	
	self assert: (playableCharacter backpackIncludes: key) .
	self deny: (nonPortableObject includes: key)						
						
	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:38:13' prior: 50890014!
test16PlayerCanTakePortableObjectsWithinNonPortableObjects
	|   newRoom playableCharacter items nonPortableObject key |
	nonPortableObject _ NonPortableObject named: 'armario' .
	key _ NoPointsPortableObject named: 'key' weighing: 5.
	nonPortableObject add: key.

	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	 playableCharacter take .
	self assert: (playableCharacter backpackIncludes: key) .
	self deny: (nonPortableObject includes: key)						
						
	
! !

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:38:14'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:39:29' prior: 50889828!
test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull
	|   newRoom playableCharacter items nonPortableObject   sword ballista |
	nonPortableObject _ NonPortableObject named: 'armario' .
	sword _ NoPointsPortableObject named: 'sword' weighing: 75.
	ballista _  NoPointsPortableObject named: 'sword' weighing: 40.
	nonPortableObject add: sword.
	nonPortableObject add: ballista.
	
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should:[playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText equals: Backpack maxWeightExceededErrorDescription]
		

	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:40:57' prior: 50890072!
test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull
	|   newRoom playableCharacter items nonPortableObject   sword ballista |
	nonPortableObject _ NonPortableObject named: 'armario' .
	sword _ NoPointsPortableObject named: 'sword' weighing: 75.
	ballista _  NoPointsPortableObject named: 'sword' weighing: 40.
	nonPortableObject add: sword.
	nonPortableObject add: ballista.
	
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should:[playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText equals: Backpack maxWeightExceededErrorDescription.
							self assert: (playableCharacter backpackIncludes: sword).
							self deny: (playableCharacter backpackIncludes: ballista).
							self assert: (nonPortableObject includes: ballista).
							self deny: (nonPortableObject includes: sword)]
		

	
! !

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:40:58'!
PASSED!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:40:58'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:42:11'!
test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects 
	|   newRoom playableCharacter items nonPortableObject   sword ballista anotherBoard board |
	nonPortableObject _ NonPortableObject named: 'armario' .
	board _ NonPortableObject named: 'cajon' .
	anotherBoard _ NonPortableObject named: 'cajon' .

	sword _ NoPointsPortableObject named: 'sword' weighing: 75.
	ballista _  NoPointsPortableObject named: 'sword' weighing: 40.
	nonPortableObject add: sword.
	nonPortableObject add: ballista.
	
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should:[playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText equals: Backpack maxWeightExceededErrorDescription.
							self assert: (playableCharacter backpackIncludes: sword).
							self deny: (playableCharacter backpackIncludes: ballista).
							self assert: (nonPortableObject includes: ballista).
							self deny: (nonPortableObject includes: sword)]
		

	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:44:33' prior: 50890205!
test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects 
	|   newRoom playableCharacter items armario     anotherBoard board fork key |
	armario _ NonPortableObject named: 'armario' .
	board _ NonPortableObject named: 'cajon' .
	anotherBoard _ NonPortableObject named: 'cajon' .

	key _ NoPointsPortableObject named: 'key' weighing: 5.
	fork _  NoPointsPortableObject named: 'fork' weighing: 5.
	board add: key .
	anotherBoard add: fork.
	armario add: board.
	armario add: board.
	
	
	items _ Dictionary new at: 1@1 put: armario; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
       playableCharacter take  .
		 
	self assert: (playableCharacter backpackIncludes: key).
	self assert: (playableCharacter backpackIncludes: fork).
	self deny: (armario includes: fork).
	self deny: (armario includes: key) 
		

	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:44:42' prior: 50890247!
test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects 
	|   newRoom playableCharacter items armario     anotherBoard board fork key |
	armario _ NonPortableObject named: 'armario' .
	board _ NonPortableObject named: 'cajon' .
	anotherBoard _ NonPortableObject named: 'cajon' .

	key _ NoPointsPortableObject named: 'key' weighing: 5.
	fork _  NoPointsPortableObject named: 'fork' weighing: 7.
	board add: key .
	anotherBoard add: fork.
	armario add: board.
	armario add: board.
	
	
	items _ Dictionary new at: 1@1 put: armario; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
       playableCharacter take  .
		 
	self assert: (playableCharacter backpackIncludes: key).
	self assert: (playableCharacter backpackIncludes: fork).
	self deny: (armario includes: fork).
	self deny: (armario includes: key) 
		

	
! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:44:53'!
PASSED!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:44:53'!
FAILURE!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:44:53'!
FAILURE!
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:46:01' prior: 50889751!
includes: aStageObject
	| totalPortableObjects |
	totalPortableObjects _ Collection new.
	totalPortableObjects _ self portableObjectsaddTo: totalPortableObjects! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:46:22' prior: 50890386!
includes: aStageObject
	| totalPortableObjects |
	totalPortableObjects _ Collection new.
	totalPortableObjects _ self portableObjectsaddTo: totalPortableObjects.
	^totalPortableObjects includes: aStageObject.
	! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:46:51'!
 portableObjectsaddTo: portableObjectsCollection.

	 ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:47:02' prior: 50890103!
test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull
	|   newRoom playableCharacter items nonPortableObject   sword ballista |
	nonPortableObject _ NonPortableObject named: 'armario' .
	sword _ NoPointsPortableObject named: 'sword' weighing: 75.
	ballista _  NoPointsPortableObject named: 'armor' weighing: 40.
	nonPortableObject add: sword.
	nonPortableObject add: ballista.
	
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should:[playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText equals: Backpack maxWeightExceededErrorDescription.
							self assert: (playableCharacter backpackIncludes: sword).
							self deny: (playableCharacter backpackIncludes: ballista).
							self assert: (nonPortableObject includes: ballista).
							self deny: (nonPortableObject includes: sword)]
		

	
! !
!NonPortableObject methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:52:49' prior: 50890405!
portableObjectsaddTo: portableObjectsCollection.
	stageObjects do:[:aStageObject | aStageObject portableObjectsaddTo: portableObjectsCollection]

	 ! !
!PortableObject methodsFor: 'accessing' stamp: 'FS 12/10/2020 21:53:12'!
portableObjectsaddTo: portableObjectsCollection.
	 portableObjectsCollection add: self.

	 ! !
!StageObject methodsFor: 'collecting' stamp: 'FS 12/10/2020 21:54:05'!
portableObjectsCollection
	self subclassResponsibility .! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:54:11'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:54:11'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:54:11'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:54:11'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:54:11'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:54:11'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:54:11'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:54:11'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:54:11'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:54:11'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:54:11'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:54:11'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:54:11'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:54:11'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:54:11'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 21:55:00' prior: 50890282!
test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects 
	|   newRoom playableCharacter items armario     anotherBoard board fork key |
	armario _ NonPortableObject named: 'armario' .
	board _ NonPortableObject named: 'cajon' .
	anotherBoard _ NonPortableObject named: 'cajon' .

	key _ NoPointsPortableObject named: 'key' weighing: 5.
	fork _  NoPointsPortableObject named: 'fork' weighing: 7.
	board add: key .
	anotherBoard add: fork.
	armario add: board.
	armario add: anotherBoard.
	
	
	items _ Dictionary new at: 1@1 put: armario; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
       playableCharacter take  .
		 
	self assert: (playableCharacter backpackIncludes: key).
	self assert: (playableCharacter backpackIncludes: fork).
	self deny: (armario includes: fork).
	self deny: (armario includes: key) 
		

	
! !
!NonPortableObject methodsFor: 'testing' stamp: 'FS 12/10/2020 21:55:14' prior: 50890395!
includes: aStageObject
	| totalPortableObjects |
	totalPortableObjects _ Collection new.
	totalPortableObjects _ self portableObjectsaddTo: totalPortableObjects.
	
	^totalPortableObjects includes: aStageObject.
	! !
!NonPortableObject methodsFor: 'testing' stamp: 'FS 12/10/2020 21:55:19' prior: 50890555!
includes: aStageObject
	| totalPortableObjects |
	totalPortableObjects _ Collection new.
	self halt.
	totalPortableObjects _ self portableObjectsaddTo: totalPortableObjects.
	
	^totalPortableObjects includes: aStageObject.
	! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:55:20'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:55:20'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:55:20'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:55:20'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:55:20'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:55:20'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:55:20'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:55:20'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:55:20'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:55:20'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:55:20'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:55:20'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:55:20'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:55:20'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:55:20'!
PASSED!
!NonPortableObject methodsFor: 'testing' stamp: 'FS 12/10/2020 21:56:21' prior: 50890565!
includes: aStageObject
	| totalPortableObjects |
	totalPortableObjects _ Collection new.
	self portableObjectsaddTo: totalPortableObjects.
	
	^totalPortableObjects includes: aStageObject.
	! !

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:56:22'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:56:22'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:56:22'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:56:22'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:56:22'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:56:22'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:56:22'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:56:22'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:56:22'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:56:22'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:56:22'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:56:22'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:56:22'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:56:22'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:56:22'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:56:22'!
ERROR!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:56:22'!
ERROR!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:56:22'!
ERROR!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:56:25'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:56:25'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:56:25'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:56:25'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:56:25'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:56:25'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:56:25'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:56:25'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:56:25'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:56:25'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:56:25'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:56:25'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:56:25'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:56:25'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:56:25'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:56:25'!
ERROR!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:56:25'!
ERROR!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:56:25'!
ERROR!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:56:27'!
ERROR!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:56:27'!
ERROR!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:56:27'!
ERROR!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:56:27'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:56:27'!
ERROR!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:56:27'!
ERROR!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:56:27'!
ERROR!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:56:28'!
ERROR!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:56:28'!
ERROR!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:56:28'!
ERROR!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:56:28'!
ERROR!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:56:28'!
ERROR!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:56:28'!
ERROR!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:56:39'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:56:39'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:56:39'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:56:39'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:56:39'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:56:39'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:56:39'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:56:39'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:56:39'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:56:39'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:56:39'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:56:39'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:56:39'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:56:39'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:56:39'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:56:39'!
ERROR!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:56:39'!
ERROR!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:56:39'!
ERROR!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:56:40'!
ERROR!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:56:59'!
ERROR!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:57:32'!
ERROR!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:57:37'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:57:37'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:57:37'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:57:37'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:57:37'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:57:37'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:57:37'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:57:37'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:57:37'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:57:37'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:57:37'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:57:37'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:57:37'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:57:37'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:57:37'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:57:37'!
ERROR!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:57:37'!
ERROR!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:57:37'!
ERROR!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:57:39'!
ERROR!

 totalPortableObjects!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:58:28'!
ERROR!
!StageObject methodsFor: 'collecting' stamp: 'FS 12/10/2020 21:59:01'!
portableObjectsaddTo: portableObjectsCollection.
! !
!StageObject methodsFor: 'collecting' stamp: 'FS 12/10/2020 21:59:04' prior: 50891172!
portableObjectsaddTo: portableObjectsCollection.
	self subclassResponsibility ! !

!methodRemoval: StageObject #portableObjectsCollection stamp: 'FS 12/10/2020 21:59:05'!
portableObjectsCollection
	self subclassResponsibility .!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:59:10'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:59:10'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:59:10'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:59:10'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:59:10'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:59:10'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:59:10'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:59:10'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:59:10'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:59:10'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:59:10'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:59:10'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:59:10'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:59:10'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:59:10'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:59:10'!
ERROR!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:59:10'!
ERROR!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:59:10'!
ERROR!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:59:12'!
ERROR!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 21:59:43'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 21:59:43'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 21:59:43'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 21:59:43'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 21:59:43'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 21:59:43'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 21:59:43'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 21:59:43'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 21:59:43'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 21:59:43'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 21:59:43'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 21:59:43'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 21:59:43'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 21:59:43'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 21:59:43'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 21:59:43'!
ERROR!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 21:59:43'!
ERROR!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:59:43'!
ERROR!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:59:46'!
ERROR!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 21:59:56'!
ERROR!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 22:00:13'!
ERROR!
!NonPortableObject methodsFor: 'testing' stamp: 'FS 12/10/2020 22:00:22' prior: 50890627!
includes: aStageObject
	| totalPortableObjects |
	totalPortableObjects _ OrderedCollection new.
	self portableObjectsaddTo: totalPortableObjects.
	
	^totalPortableObjects includes: aStageObject.
	! !

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 22:00:23'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 22:00:24'!
PASSED!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 22:00:24'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 22:00:47'!
test19PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackPointsAreFull
	|   newRoom playableCharacter items nonPortableObject   sword ballista |
	nonPortableObject _ NonPortableObject named: 'armario' .
	sword _ NoPointsPortableObject named: 'sword' weighing: 75.
	ballista _  NoPointsPortableObject named: 'armor' weighing: 40.
	nonPortableObject add: sword.
	nonPortableObject add: ballista.
	
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should:[playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText equals: Backpack maxWeightExceededErrorDescription.
							self assert: (playableCharacter backpackIncludes: sword).
							self deny: (playableCharacter backpackIncludes: ballista).
							self assert: (nonPortableObject includes: ballista).
							self deny: (nonPortableObject includes: sword)]
		

	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 22:01:14' prior: 50891354!
test19PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackPointsAreFull
	|   newRoom playableCharacter items nonPortableObject   sword ballista |
	nonPortableObject _ NonPortableObject named: 'armario' .
	sword _ NoPointsPortableObject named: 'gem' weighing: 10 worth: self.
	ballista _  NoPointsPortableObject named: 'gemstone' weighing: 40.
	nonPortableObject add: sword.
	nonPortableObject add: ballista.
	
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should:[playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText equals: Backpack maxWeightExceededErrorDescription.
							self assert: (playableCharacter backpackIncludes: sword).
							self deny: (playableCharacter backpackIncludes: ballista).
							self assert: (nonPortableObject includes: ballista).
							self deny: (nonPortableObject includes: sword)]
		

	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 22:02:11' prior: 50891393!
test19PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackPointsAreFull
	|   newRoom playableCharacter items nonPortableObject       anotherGem gem |
	nonPortableObject _ NonPortableObject named: 'armario' .
	gem _  PointsPortableObject named: 'gem' weighing: 10 worth: 75.
	anotherGem _  PointsPortableObject named: 'gemstone' weighing: 3 worth: 40.
	nonPortableObject add: gem.
	nonPortableObject add: anotherGem.
	
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should:[playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText equals: Backpack maxWeightExceededErrorDescription.
							self assert: (playableCharacter backpackIncludes: gem).
							self deny: (playableCharacter backpackIncludes: anotherGem).
							self assert: (nonPortableObject includes: anotherGem).
							self deny: (nonPortableObject includes: gem)]
		

	
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'FS 12/10/2020 22:02:33' prior: 50891432!
test19PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackPointsAreFull
	|   newRoom playableCharacter items nonPortableObject       anotherGem gem |
	nonPortableObject _ NonPortableObject named: 'armario' .
	gem _  PointsPortableObject named: 'gem' weighing: 10 worth: 75.
	anotherGem _  PointsPortableObject named: 'gemstone' weighing: 3 worth: 40.
	nonPortableObject add: gem.
	nonPortableObject add: anotherGem.
	
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should:[playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText equals: Backpack invalidPointsCapacityErrorDescription.
							self assert: (playableCharacter backpackIncludes: gem).
							self deny: (playableCharacter backpackIncludes: anotherGem).
							self assert: (nonPortableObject includes: anotherGem).
							self deny: (nonPortableObject includes: gem)]
		

	
! !

!testRun: #RoomTest #test19PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackPointsAreFull stamp: 'FS 12/10/2020 22:02:34'!
FAILURE!

!testRun: #RoomTest #test19PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackPointsAreFull stamp: 'FS 12/10/2020 22:03:03'!
FAILURE!

!testRun: #RoomTest #test19PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackPointsAreFull stamp: 'FS 12/10/2020 22:03:03'!
FAILURE!

!testRun: #RoomTest #test19PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackPointsAreFull stamp: 'FS 12/10/2020 22:04:03'!
FAILURE!

!testRun: #RoomTest #test19PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackPointsAreFull stamp: 'FS 12/10/2020 22:04:03'!
FAILURE!

!testRun: #RoomTest #test19PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackPointsAreFull stamp: 'FS 12/10/2020 22:04:09'!
FAILURE!

!methodRemoval: RoomTest #test19PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackPointsAreFull stamp: 'FS 12/10/2020 22:04:25'!
test19PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackPointsAreFull
	|   newRoom playableCharacter items nonPortableObject       anotherGem gem |
	nonPortableObject _ NonPortableObject named: 'armario' .
	gem _  PointsPortableObject named: 'gem' weighing: 10 worth: 75.
	anotherGem _  PointsPortableObject named: 'gemstone' weighing: 3 worth: 40.
	nonPortableObject add: gem.
	nonPortableObject add: anotherGem.
	
	items _ Dictionary new at: 1@1 put: nonPortableObject; yourself .
	newRoom _ DelimitedRoom withSize: 3 by: 3 with: items.
	playableCharacter _ PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.
	playableCharacter enterInto: newRoom.
	
	self should:[playableCharacter take ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText equals: Backpack invalidPointsCapacityErrorDescription.
							self assert: (playableCharacter backpackIncludes: gem).
							self deny: (playableCharacter backpackIncludes: anotherGem).
							self assert: (nonPortableObject includes: anotherGem).
							self deny: (nonPortableObject includes: gem)]
		

	
!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 22:04:28'!
PASSED!

!classRemoval: #PointsPortableObject stamp: 'FS 12/10/2020 22:06:26'!
PortableObject subclass: #PointsPortableObject
	instanceVariableNames: 'points'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NoPointsPortableObject stamp: 'FS 12/10/2020 22:06:26'!
PortableObject subclass: #NoPointsPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PortableObject stamp: 'FS 12/10/2020 22:06:27'!
StageObject subclass: #PortableObject
	instanceVariableNames: 'name weight'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NonPortableObject stamp: 'FS 12/10/2020 22:06:27'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #StageObject stamp: 'FS 12/10/2020 22:06:28'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #NullRoom stamp: 'FS 12/10/2020 22:06:28'!
Room subclass: #NullRoom
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #DelimitedRoom stamp: 'FS 12/10/2020 22:06:28'!
Room subclass: #DelimitedRoom
	instanceVariableNames: 'widthLimit heightLimit map aPlayerIsHere playerPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Room stamp: 'FS 12/10/2020 22:06:29'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterHeading stamp: 'FS 12/10/2020 22:06:29'!
Object subclass: #PlayableCharacterHeading
	instanceVariableNames: 'cardinalPoint forwardPoint rightHeading leftHeading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacter stamp: 'FS 12/10/2020 22:06:30'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #GameObjectsFactory stamp: 'FS 12/10/2020 22:06:30'!
Object subclass: #GameObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #Backpack stamp: 'FS 12/10/2020 22:06:31'!
Object subclass: #Backpack
	instanceVariableNames: 'weightCapacity gamePointsCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #RoomTest stamp: 'FS 12/10/2020 22:06:31'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #PlayableCharacterTest stamp: 'FS 12/10/2020 22:06:32'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classRemoval: #BackpackTest stamp: 'FS 12/10/2020 22:06:32'!
TestCase subclass: #BackpackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

----End fileIn of /home/john/Downloads/linux64/ISW1-2020-2C-2doParcial.st----!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test01CannotCreateRoomWithNonPositiveWidthSize stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test02CannotCreateRoomWithNonPositiveHeightSize stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test03PlayableCannotMoveForwardsOutOfBoundsBelow stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test04PlayableCannotMoveForwardsOutOfBoundsToTheLeft stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test05PlayableCannotMoveForwardsOutOfBoundsAbove stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test06PlayableCannotMoveForwardsOutOfBoundsToTheRight stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test07PlayerCannotBackwardsOutOfBounds stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test08CannotCreateRoomWithOutOfBoundsItems stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test09CannotPlacePlayerOnOccupiedPosition stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test10CannotUseRoomWithAlreadyAnotherPlayer stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test11PlayerCannotMoveForwardToOccupiedPosition stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test12PlayerCannotEnterARoomStartingOutOfBounds stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test13PlayerCannotTakePortableObjectWhenNotInFrontOfThem stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakePortableObjectInFrontOfThem stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test15PlayerDoesntTakeItemsOfEmptyNonPortableObject stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test16PlayerCanTakePortableObjectsWithinNonPortableObjects stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test17PlayerCanTakePortableObjectsWithinNonPortableObjectsUntilBackpackFull stamp: 'FS 12/10/2020 22:06:42'!
PASSED!

!testRun: #RoomTest #test18PlayerCanTakePortableObjectsWithinMultipleLevelNonPortableObjects stamp: 'FS 12/10/2020 22:06:42'!
PASSED!