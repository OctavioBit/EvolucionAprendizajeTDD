----STARTUP---- (10 December 2020 12:19:58) as C:\Users\Administrador\Desktop\Migue\isw1\windows64\CuisUniversity-4384.image!


----End fileIn of C:\Users\Administrador\Desktop\Migue\isw1\segundo parcial\ISW1-2020-2C-2doParcial.st----!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'mf 12/10/2020 12:22:54'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'mf 12/10/2020 12:22:54'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'mf 12/10/2020 12:22:54'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'mf 12/10/2020 12:22:54'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'mf 12/10/2020 12:22:54'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'mf 12/10/2020 12:22:54'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'mf 12/10/2020 12:22:54'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'mf 12/10/2020 12:22:54'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'mf 12/10/2020 12:22:54'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'mf 12/10/2020 12:22:54'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'mf 12/10/2020 12:22:54'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'mf 12/10/2020 12:22:54'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'mf 12/10/2020 12:22:54'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'mf 12/10/2020 12:22:54'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'mf 12/10/2020 12:22:54'!
PASSED!

----STARTUP---- (10 December 2020 12:35:12) as C:\Users\Administrador\Desktop\Migue\isw1\windows64\CuisUniversity-4384.image!


----End fileIn of C:\Users\Administrador\Desktop\Migue\isw1\segundo parcial\ISW1-2020-2C-2doParcial.st----!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mf 12/10/2020 12:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mf 12/10/2020 12:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mf 12/10/2020 12:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mf 12/10/2020 12:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mf 12/10/2020 12:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mf 12/10/2020 12:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mf 12/10/2020 12:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mf 12/10/2020 12:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mf 12/10/2020 12:47:04'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mf 12/10/2020 12:47:04'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'mf 12/10/2020 12:47:09'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'mf 12/10/2020 12:47:09'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'mf 12/10/2020 12:47:09'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'mf 12/10/2020 12:47:09'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'mf 12/10/2020 12:47:09'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'mf 12/10/2020 12:47:09'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'mf 12/10/2020 12:47:09'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'mf 12/10/2020 12:47:09'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mf 12/10/2020 12:47:10'!
PASSED!

----SNAPSHOT----(10 December 2020 16:51:53) CuisUniversity-4384.image priorSource: 17155564!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'mf 12/10/2020 17:34:24'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'mf 12/10/2020 17:37:35'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 17:37:25'!
test01aRoomCantHaveNullRows

	| room |
	
	self should: [ room := Room withRows: 0 withColumns: 10. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveNonStrictlyPositiveCoordinatesErrorDescription.! !
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 17:37:50' prior: 50869721!
test01aRoomCantHaveNullRows

	self should: [ Room withRows: 0 withColumns: 10. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveNonStrictlyPositiveCoordinatesErrorDescription.! !

!testRun: #RoomTest #test01aRoomCantHaveNullRows stamp: 'mf 12/10/2020 17:37:54'!
ERROR!

!testRun: #RoomTest #test01aRoomCantHaveNullRows stamp: 'mf 12/10/2020 17:37:54'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 17:38:12'!
cannotHaveNonStrictlyPositiveCoordinatesErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 17:38:33' prior: 50869746!
cannotHaveNonStrictlyPositiveCoordinatesErrorDescription
	
	^'Cannot have non strictly positive coordinates'.! !

!testRun: #RoomTest #test01aRoomCantHaveNullRows stamp: 'mf 12/10/2020 17:38:36'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'mf 12/10/2020 17:38:45'!
withRows: aSmallInteger withColumns: aSmallInteger2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithRows: aSmallInteger withColumns: aSmallInteger2 ! !
!Room class methodsFor: 'instance creation' stamp: 'mf 12/10/2020 17:39:25' prior: 50869761!
withRows: aNumberOfRows withColumns: aNumberOfColumns
	
	^self new initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns ! !

!testRun: #RoomTest #test01aRoomCantHaveNullRows stamp: 'mf 12/10/2020 17:39:27'!
ERROR!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'mf 12/10/2020 17:39:38'!
Object subclass: #Room
	instanceVariableNames: 'numberOfRows'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'mf 12/10/2020 17:39:38'!
Object subclass: #Room
	instanceVariableNames: 'numberOfRows numberOfColumns'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 17:39:39'!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns 
	self shouldBeImplemented.
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.! !
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 17:39:59' prior: 50869796!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns 
	
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.! !

!testRun: #RoomTest #test01aRoomCantHaveNullRows stamp: 'mf 12/10/2020 17:40:01'!
FAILURE!
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 17:41:05' prior: 50869804!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns 
	
	self assertStrictlyPositiveNumberOfRows: aNumberOfRows andNumberOfColumns: aNumberOfColumns .
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.! !

!testRun: #RoomTest #test01aRoomCantHaveNullRows stamp: 'mf 12/10/2020 17:41:07'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 17:41:16'!
assertStrictlyPositiveNumberOfRows: aSmallInteger andNumberOfColumns: aSmallInteger2 
	self shouldBeImplemented.! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 17:42:28' prior: 50869827!
assertStrictlyPositiveNumberOfRows: aSmallInteger andNumberOfColumns: aSmallInteger2 
	
	aSmallInteger <= 0 ifTrue: [ self error: self class cannotHaveNonStrictlyPositiveCoordinatesErrorDescription ].
	aSmallInteger2 <= 0 ifTrue: [ self error: self class cannotHaveNonStrictlyPositiveCoordinatesErrorDescription ].! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 17:42:38' prior: 50869834!
assertStrictlyPositiveNumberOfRows: aNumberOfRows andNumberOfColumns: aSmallInteger2 
	
	aNumberOfRows <= 0 ifTrue: [ self error: self class cannotHaveNonStrictlyPositiveCoordinatesErrorDescription ].
	aSmallInteger2 <= 0 ifTrue: [ self error: self class cannotHaveNonStrictlyPositiveCoordinatesErrorDescription ].! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 17:42:47' prior: 50869847!
assertStrictlyPositiveNumberOfRows: aNumberOfRows andNumberOfColumns: aNumberOfColumns 
	
	aNumberOfRows <= 0 ifTrue: [ self error: self class cannotHaveNonStrictlyPositiveCoordinatesErrorDescription ].
	aNumberOfColumns <= 0 ifTrue: [ self error: self class cannotHaveNonStrictlyPositiveCoordinatesErrorDescription ].! !

!testRun: #RoomTest #test01aRoomCantHaveNullRows stamp: 'mf 12/10/2020 17:43:00'!
PASSED!

!testRun: #RoomTest #test01aRoomCantHaveNullRows stamp: 'mf 12/10/2020 17:43:05'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 17:43:36'!
test01aRoomCantHaveNonStrictlyPositiveCoordinates

	self should: [ Room withRows: 0 withColumns: 10. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveNonStrictlyPositiveCoordinatesErrorDescription.! !

!methodRemoval: RoomTest #test01aRoomCantHaveNullRows stamp: 'mf 12/10/2020 17:43:36'!
test01aRoomCantHaveNullRows

	self should: [ Room withRows: 0 withColumns: 10. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveNonStrictlyPositiveCoordinatesErrorDescription.!
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 17:43:53'!
test02aRoomCantHaveNonIntegerCoordinates

	self should: [ Room withRows: 0.2 withColumns: 10. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveNonStrictlyPositiveCoordinatesErrorDescription.! !
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 17:44:12' prior: 50869897!
test02aRoomCantHaveNonIntegerCoordinates

	self should: [ Room withRows: 0.2 withColumns: 10. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveNonIntegerCoordinatesErrorDescription.! !

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 17:44:17'!
ERROR!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 17:44:17'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 17:44:35'!
cannotHaveNonIntegerCoordinatesErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 17:44:58' prior: 50869923!
cannotHaveNonIntegerCoordinatesErrorDescription
	
	^'A room cant have non integer coordinates'.! !

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 17:44:59'!
FAILURE!

----End fileIn of C:\Users\Administrador\Desktop\Migue\isw1\windows64\Packages\TerseGuide.pck.st----!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 17:47:44' prior: 50869860!
assertStrictlyPositiveNumberOfRows: aNumberOfRows andNumberOfColumns: aNumberOfColumns 
	
	aNumberOfRows <= 0 ifTrue: [ self error: self class cannotHaveNonStrictlyPositiveCoordinatesErrorDescription ].
	aNumberOfColumns <= 0 ifTrue: [ self error: self class cannotHaveNonStrictlyPositiveCoordinatesErrorDescription ].
	aNumberOfRows isInteger ifFalse: [ self error: self class cannotHaveNonIntegerCoordinatesErrorDescription ].
	aNumberOfColumns isInteger ifFalse: [ self error: self class cannotHaveNonIntegerCoordinatesErrorDescription ].! !

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 17:47:46'!
PASSED!

!testRun: #RoomTest #test01aRoomCantHaveNonStrictlyPositiveCoordinates stamp: 'mf 12/10/2020 17:47:48'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 17:47:48'!
PASSED!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 17:48:50' prior: 50872874!
assertStrictlyPositiveNumberOfRows: aNumberOfRows andNumberOfColumns: aNumberOfColumns 
	
	self assertValidCoordinate: aNumberOfRows ; assertValidCoordinate: aNumberOfColumns.
	aNumberOfRows <= 0 ifTrue: [ self error: self class cannotHaveNonStrictlyPositiveCoordinatesErrorDescription ].
	aNumberOfColumns <= 0 ifTrue: [ self error: self class cannotHaveNonStrictlyPositiveCoordinatesErrorDescription ].
	aNumberOfRows isInteger ifFalse: [ self error: self class cannotHaveNonIntegerCoordinatesErrorDescription ].
	aNumberOfColumns isInteger ifFalse: [ self error: self class cannotHaveNonIntegerCoordinatesErrorDescription ].! !

!testRun: #RoomTest #test01aRoomCantHaveNonStrictlyPositiveCoordinates stamp: 'mf 12/10/2020 17:49:07'!
ERROR!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 17:49:07'!
ERROR!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 17:49:11'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 17:49:17'!
assertValidCoordinate: aSmallFloat64 
	self shouldBeImplemented.! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 17:52:38' prior: 50872936!
assertValidCoordinate: aCoordinate

	(aCoordinate isInteger and: aCoordinate strictlyPositive) ifFalse: [ self error: self class cannotHaveInvalidCoordinates ].
	! !

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 17:52:45'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 17:52:56'!
cannotHaveInvalidCoordinates
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 17:53:13' prior: 50872952!
cannotHaveInvalidCoordinates
	
	^'Room cant have invalid coordinates'.! !
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 17:53:26' prior: 50869878!
test01aRoomCantHaveNonStrictlyPositiveCoordinates

	self should: [ Room withRows: 0 withColumns: 10. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveInvalidCoordinates! !
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 17:53:35' prior: 50869907!
test02aRoomCantHaveNonIntegerCoordinates

	self should: [ Room withRows: 0.2 withColumns: 10. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveInvalidCoordinates .! !

!testRun: #RoomTest #test01aRoomCantHaveNonStrictlyPositiveCoordinates stamp: 'mf 12/10/2020 17:53:37'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 17:53:37'!
PASSED!

!methodRemoval: Room class #cannotHaveNonIntegerCoordinatesErrorDescription stamp: 'mf 12/10/2020 17:53:44'!
cannotHaveNonIntegerCoordinatesErrorDescription
	
	^'A room cant have non integer coordinates'.!

!methodRemoval: Room class #cannotHaveNonStrictlyPositiveCoordinatesErrorDescription stamp: 'mf 12/10/2020 17:53:48'!
cannotHaveNonStrictlyPositiveCoordinatesErrorDescription
	
	^'Cannot have non strictly positive coordinates'.!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 17:54:02' prior: 50872904!
assertStrictlyPositiveNumberOfRows: aNumberOfRows andNumberOfColumns: aNumberOfColumns 
	
	self assertValidCoordinate: aNumberOfRows ; assertValidCoordinate: aNumberOfColumns.! !

!testRun: #RoomTest #test01aRoomCantHaveNonStrictlyPositiveCoordinates stamp: 'mf 12/10/2020 17:54:06'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 17:54:06'!
PASSED!

----SNAPSHOT----(10 December 2020 17:54:17) CuisUniversity-4384.image priorSource: 17217553!
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 17:58:29'!
test03aRoomCanHaveStageObjects
	
	| room aPortableObject |
	aPortableObject := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	room := Room withRows: 10 withColumns: 10 andStageObjects: (Dictionary with: 1@1 -> aPortableObject).
	
	self assert: room includes: aPortableObject at: 1@1.! !
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 17:58:44' prior: 50873018!
test03aRoomCanHaveStageObjects
	
	| room aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	room := Room withRows: 10 withColumns: 10 andStageObjects: (Dictionary with: 1@1 -> aDiamondSword).
	
	self assert: room includes: aDiamondSword at: 1@1.! !

!testRun: #RoomTest #test01aRoomCantHaveNonStrictlyPositiveCoordinates stamp: 'mf 12/10/2020 17:58:48'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 17:58:48'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 17:58:48'!
ERROR!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 17:58:48'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'mf 12/10/2020 17:59:04'!
withRows: aSmallInteger withColumns: aSmallInteger2 andStageObjects: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithRows: aSmallInteger withColumns: aSmallInteger2 andStageObjects: aDictionary ! !
!Room class methodsFor: 'instance creation' stamp: 'mf 12/10/2020 17:59:27' prior: 50873056!
withRows: aNumberOfRows withColumns: aSmallInteger2 andStageObjects: aDictionary 

	^self new initializeWithRows: aNumberOfRows withColumns: aSmallInteger2 andStageObjects: aDictionary ! !
!Room class methodsFor: 'instance creation' stamp: 'mf 12/10/2020 17:59:36' prior: 50873068!
withRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aDictionary 

	^self new initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aDictionary ! !
!Room class methodsFor: 'instance creation' stamp: 'mf 12/10/2020 17:59:51' prior: 50873077!
withRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection 

	^self new initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection ! !

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 17:59:55'!
ERROR!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'mf 12/10/2020 18:00:04'!
Object subclass: #Room
	instanceVariableNames: 'numberOfRows numberOfColumns stageObjectCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 18:00:04'!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection 
	self shouldBeImplemented.
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.
	stageObjectCollection := aStageObjectCollection.! !
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 18:00:13' prior: 50873107!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection 
	
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.
	stageObjectCollection := aStageObjectCollection.! !

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:00:21'!
ERROR!
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 18:00:40' prior: 50873031!
test03aRoomCanHaveStageObjects
	
	| room aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	room := Room withRows: 10 withColumns: 10 andStageObjects: (Dictionary with: 1@1 -> aDiamondSword).
	
	self assert: (room includes: aDiamondSword at: 1@1)! !

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:00:45'!
ERROR!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:00:45'!
ERROR!
!Room methodsFor: 'testing' stamp: 'mf 12/10/2020 18:00:54'!
includes: aPointsPortableObject at: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'mf 12/10/2020 18:01:18' prior: 50873149!
includes: aStageObject at: aCoordinate

	
	! !
!Room methodsFor: 'testing' stamp: 'mf 12/10/2020 18:01:24' prior: 50873154!
includes: aStageObject at: aCoordinate

	^true.
	! !

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:01:27'!
PASSED!
!Room class methodsFor: 'instance creation' stamp: 'mf 12/10/2020 18:02:02' prior: 50869771!
withRows: aNumberOfRows withColumns: aNumberOfColumns
	
	^self withRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: Dictionary new.! !

!methodRemoval: Room #initializeWithRows:withColumns: stamp: 'mf 12/10/2020 18:02:26'!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns 
	
	self assertStrictlyPositiveNumberOfRows: aNumberOfRows andNumberOfColumns: aNumberOfColumns .
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.!
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 18:02:54' prior: 50873118!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection 
	
	self assertValidCoordinate: aNumberOfRows ; assertValidCoordinate: aNumberOfColumns.
	
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.
	stageObjectCollection := aStageObjectCollection.! !

!methodRemoval: Room #assertStrictlyPositiveNumberOfRows:andNumberOfColumns: stamp: 'mf 12/10/2020 18:03:21'!
assertStrictlyPositiveNumberOfRows: aNumberOfRows andNumberOfColumns: aNumberOfColumns 
	
	self assertValidCoordinate: aNumberOfRows ; assertValidCoordinate: aNumberOfColumns.!

!testRun: #RoomTest #test01aRoomCantHaveNonStrictlyPositiveCoordinates stamp: 'mf 12/10/2020 18:03:50'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 18:03:50'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:03:50'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 18:04:06'!
test04aRoomCantHaveStageObjectsOutOfBounds
	
	| room aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	room := Room withRows: 10 withColumns: 10 andStageObjects: (Dictionary with: 1@1 -> aDiamondSword).
	
	self assert: (room includes: aDiamondSword at: 1@1)! !
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 18:05:20' prior: 50873215!
test04aRoomCantHaveStageObjectsOutOfBounds
	
	| aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	self should: [ Room withRows: 10 withColumns: 10 andStageObjects: (Dictionary with: 10@10 -> aDiamondSword) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	! !

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBounds stamp: 'mf 12/10/2020 18:05:28'!
ERROR!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBounds stamp: 'mf 12/10/2020 18:05:28'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 18:05:39'!
invalidDisplayOfStageObjectsErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 18:05:58' prior: 50873249!
invalidDisplayOfStageObjectsErrorDescription
	
	^'The display of stage objects provided was invalid.'! !

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBounds stamp: 'mf 12/10/2020 18:06:00'!
FAILURE!
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 18:06:49' prior: 50873184!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection 
	
	self assertValidCoordinate: aNumberOfRows ; assertValidCoordinate: aNumberOfColumns.
	self assertValidStageObjectsDisplay: aStageObjectCollection.
	
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.
	stageObjectCollection := aStageObjectCollection.! !

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBounds stamp: 'mf 12/10/2020 18:06:51'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:06:57'!
assertValidStageObjectsDisplay: aDictionary 
	self shouldBeImplemented.! !

| dic |
dic := Dictionary with: 1-> 'uno' with: 2 -> 'dos'.

dic allSatisfy: [ :a | a isInteger ] !

| dic |
dic := Dictionary with: 1-> 'uno' with: 2 -> 'dos'.

dic keys allSatisfy: [ :a | a isInteger ] !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:11:13' prior: 50873283!
assertValidStageObjectsDisplay: aStageObjectCollection

	aStageObjectCollection keys allSatisfy: [ :aCoordinate | (self assertValidCoordinate: aCoordinate) and: [ aCoordinate x < numberOfRows and: aCoordinate y < numberOfColumns] ]
	
	! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:11:15' prior: 50873295!
assertValidStageObjectsDisplay: aStageObjectCollection

	aStageObjectCollection keys allSatisfy: [ :aCoordinate | (self assertValidCoordinate: aCoordinate) and: [ aCoordinate x < numberOfRows and: aCoordinate y < numberOfColumns] ].
	
	! !

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBounds stamp: 'mf 12/10/2020 18:11:17'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:12:11'!
assertValidAxialSize: aCoordinate

	(aCoordinate isInteger and: aCoordinate strictlyPositive) ifFalse: [ self error: self class cannotHaveInvalidCoordinates ].
	! !
!Room methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 18:12:11' prior: 50873265!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection 
	
	self assertValidAxialSize: aNumberOfRows ; assertValidAxialSize: aNumberOfColumns.
	self assertValidStageObjectsDisplay: aStageObjectCollection.
	
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.
	stageObjectCollection := aStageObjectCollection.! !
!Room methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 18:12:11' prior: 50873305!
assertValidStageObjectsDisplay: aStageObjectCollection

	aStageObjectCollection keys allSatisfy: [ :aCoordinate | (self assertValidAxialSize: aCoordinate) and: [ aCoordinate x < numberOfRows and: aCoordinate y < numberOfColumns] ].
	
	! !

!methodRemoval: Room #assertValidCoordinate: stamp: 'mf 12/10/2020 18:12:11'!
assertValidCoordinate: aCoordinate

	(aCoordinate isInteger and: aCoordinate strictlyPositive) ifFalse: [ self error: self class cannotHaveInvalidCoordinates ].
	!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:13:01' prior: 50873318!
assertValidAxialSize: anAxialSize

	(anAxialSize isInteger and: anAxialSize strictlyPositive) ifFalse: [ self error: self class cannotHaveInvalidCoordinates ].
	! !

!testRun: #RoomTest #test01aRoomCantHaveNonStrictlyPositiveCoordinates stamp: 'mf 12/10/2020 18:13:12'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 18:13:12'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:13:12'!
ERROR!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBounds stamp: 'mf 12/10/2020 18:13:12'!
ERROR!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:13:15'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:13:51' prior: 50873341!
assertValidStageObjectsDisplay: aStageObjectCollection

	aStageObjectCollection keys allSatisfy: [ :aCoordinate | self assertValidCoordinate: aCoordinate ].
	
	! !

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:13:54'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:14:11'!
assertValidCoordinate: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:16:17' prior: 50873394!
assertValidCoordinate: aCoordinate
	
	(aCoordinate x isInteger and: aCoordinate x strictlyPositive) and: aCoordinate x < numberOfRows.
		! !

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:16:27'!
ERROR!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:16:27'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:17:17' prior: 50873399!
assertValidCoordinate: aCoordinate
	
	((aCoordinate x isInteger and: aCoordinate x strictlyPositive) and: aCoordinate x < numberOfRows ) 
		ifFalse: [ self error: self class invalidDisplayOfStageObjectsErrorDescription ].
		! !

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:17:19'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:17:39' prior: 50873412!
assertValidCoordinate: aCoordinate
	
	((aCoordinate x isInteger and: aCoordinate x strictlyPositive) and: (aCoordinate x) < numberOfRows ) 
		ifFalse: [ self error: self class invalidDisplayOfStageObjectsErrorDescription ].
		! !

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:17:40'!
ERROR!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:17:55'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:19:09' prior: 50873425!
assertValidCoordinate: aCoordinate
	
	((aCoordinate x isInteger and: [aCoordinate x strictlyPositive]) and: [ aCoordinate x < numberOfRows ] )
		ifFalse: [ self error: self class invalidDisplayOfStageObjectsErrorDescription ].
		! !

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:19:11'!
ERROR!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:19:20'!
ERROR!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:19:23'!
ERROR!

aCoordinate x isInteger!

aCoordinate x strictlyPositive!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:20:06'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:20:44' prior: 50873441!
assertValidCoordinate: aCoordinate
	
	((aCoordinate x isInteger and: [aCoordinate x strictlyPositive]) and: [ aCoordinate x < numberOfColumns ] )
		ifFalse: [ self error: self class invalidDisplayOfStageObjectsErrorDescription ].
		! !
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 18:21:37' prior: 50873326!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection 
	
	self assertValidAxialSize: aNumberOfRows ; assertValidAxialSize: aNumberOfColumns.
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.
	
	self assertValidStageObjectsDisplay: aStageObjectCollection.
	stageObjectCollection := aStageObjectCollection.! !

!testRun: #RoomTest #test01aRoomCantHaveNonStrictlyPositiveCoordinates stamp: 'mf 12/10/2020 18:21:42'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 18:21:42'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:21:42'!
ERROR!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBounds stamp: 'mf 12/10/2020 18:21:42'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:21:42'!
ERROR!

aStageObjectCollection keys!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:23:19' prior: 50873383!
assertValidStageObjectsDisplay: aStageObjectCollection

	(aStageObjectCollection keys allSatisfy: [ :aCoordinate | self assertValidCoordinate: aCoordinate ]) 
		ifFalse: [self error : self class invalidDisplayOfStageObjectsErrorDescription ].
	
	! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:23:59' prior: 50873465!
assertValidCoordinate: aCoordinate
	
	^(aCoordinate x isInteger 
	  and: [aCoordinate x strictlyPositive])
	  and: [ aCoordinate x < numberOfColumns ] 
		! !

!testRun: #RoomTest #test01aRoomCantHaveNonStrictlyPositiveCoordinates stamp: 'mf 12/10/2020 18:24:14'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 18:24:14'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:24:14'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBounds stamp: 'mf 12/10/2020 18:24:14'!
ERROR!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBounds stamp: 'mf 12/10/2020 18:24:14'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:24:55' prior: 50873507!
assertValidStageObjectsDisplay: aStageObjectCollection

	(aStageObjectCollection keys allSatisfy: [ :aCoordinate | self assertValidCoordinate: aCoordinate ]) 
		ifFalse: [ self error: self class invalidDisplayOfStageObjectsErrorDescription ].
	
	! !

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:25:08'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBounds stamp: 'mf 12/10/2020 18:25:11'!
PASSED!

!testRun: #RoomTest #test01aRoomCantHaveNonStrictlyPositiveCoordinates stamp: 'mf 12/10/2020 18:25:14'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 18:25:14'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:25:14'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBounds stamp: 'mf 12/10/2020 18:25:14'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 18:25:32'!
test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise
	
	| aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	self should: [ Room withRows: 10 withColumns: 10 andStageObjects: (Dictionary with: 10@10 -> aDiamondSword) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	! !

!methodRemoval: RoomTest #test04aRoomCantHaveStageObjectsOutOfBounds stamp: 'mf 12/10/2020 18:25:32'!
test04aRoomCantHaveStageObjectsOutOfBounds
	
	| aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	self should: [ Room withRows: 10 withColumns: 10 andStageObjects: (Dictionary with: 10@10 -> aDiamondSword) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	!
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 18:25:44'!
test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise
	
	| aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	self should: [ Room withRows: 10 withColumns: 10 andStageObjects: (Dictionary with: 10@10 -> aDiamondSword) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	! !
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 18:25:55' prior: 50873572!
test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise
	
	| aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	self should: [ Room withRows: 10 withColumns: 10 andStageObjects: (Dictionary with: 10@2 -> aDiamondSword) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	! !
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 18:26:01' prior: 50873601!
test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise
	
	| aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	self should: [ Room withRows: 10 withColumns: 10 andStageObjects: (Dictionary with: 1@10 -> aDiamondSword) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	! !

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 18:26:06'!
FAILURE!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 18:26:06'!
FAILURE!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:27:41' prior: 50873518!
assertValidCoordinate: aCoordinate
	
	^ self assertValidCoordinateComponent: aCoordinate x ; assertValidCoordinateComponent: aCoordinate y
		! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:28:22'!
assertValidCoordinateComponent: aCoordinateComponent
	
	^ (aCoordinateComponent isInteger 
	  and: [aCoordinateComponent strictlyPositive])
	  and: [ aCoordinateComponent < numberOfColumns ] 
		! !

!testRun: #RoomTest #test01aRoomCantHaveNonStrictlyPositiveCoordinates stamp: 'mf 12/10/2020 18:28:45'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 18:28:45'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:28:46'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 18:28:46'!
FAILURE!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 18:28:46'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 18:28:46'!
FAILURE!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:31:57' prior: 50873653!
assertValidCoordinate: aCoordinate
	
	^ self assertValidCoordinateX: aCoordinate x ; assertValidCoordinateComponent: aCoordinate y
		! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:32:03' prior: 50873690!
assertValidCoordinate: aCoordinate
	
	^ self assertValidCoordinateX: aCoordinate x ; assertValidCoordinateY: aCoordinate y
		! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:32:20'!
assertValidCoordinateX: aCoordinateComponent
	
	^ (aCoordinateComponent isInteger 
	  and: [aCoordinateComponent strictlyPositive])
	  and: [ aCoordinateComponent < numberOfColumns ] 
		! !

!methodRemoval: Room #assertValidCoordinateComponent: stamp: 'mf 12/10/2020 18:32:20'!
assertValidCoordinateComponent: aCoordinateComponent
	
	^ (aCoordinateComponent isInteger 
	  and: [aCoordinateComponent strictlyPositive])
	  and: [ aCoordinateComponent < numberOfColumns ] 
		!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:32:30'!
assertValidCoordinateY: aCoordinateComponent
	
	^ (aCoordinateComponent isInteger 
	  and: [aCoordinateComponent strictlyPositive])
	  and: [ aCoordinateComponent < numberOfRows ] 
		! !

!testRun: #RoomTest #test01aRoomCantHaveNonStrictlyPositiveCoordinates stamp: 'mf 12/10/2020 18:32:35'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 18:32:35'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:32:35'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 18:32:35'!
FAILURE!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 18:32:35'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 18:32:35'!
FAILURE!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 18:32:49'!
FAILURE!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 18:32:49'!
FAILURE!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 18:32:52'!
PASSED!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:33:13' prior: 50873697!
assertValidCoordinate: aCoordinate
	
	self assertValidCoordinateX: aCoordinate x.
	self assertValidCoordinateY: aCoordinate y
		! !

!testRun: #RoomTest #test01aRoomCantHaveNonStrictlyPositiveCoordinates stamp: 'mf 12/10/2020 18:33:15'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 18:33:15'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:33:15'!
ERROR!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 18:33:15'!
FAILURE!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 18:33:15'!
FAILURE!
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 18:33:56'!
test01aRoomCantHaveNonPositiveCoordinates

	self should: [ Room withRows: 0 withColumns: 10. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveInvalidCoordinates! !

!methodRemoval: RoomTest #test01aRoomCantHaveNonStrictlyPositiveCoordinates stamp: 'mf 12/10/2020 18:33:56'!
test01aRoomCantHaveNonStrictlyPositiveCoordinates

	self should: [ Room withRows: 0 withColumns: 10. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveInvalidCoordinates!
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 18:34:05' prior: 50873785!
test01aRoomCantHaveNonPositiveCoordinates

	self should: [ Room withRows: -1 withColumns: 10. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveInvalidCoordinates! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:34:19' prior: 50873704!
assertValidCoordinateX: aCoordinateComponent
	
	^ (aCoordinateComponent isInteger 
	  and: [aCoordinateComponent positive])
	  and: [ aCoordinateComponent < numberOfColumns ] 
		! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:34:23' prior: 50873721!
assertValidCoordinateY: aCoordinateComponent
	
	^ (aCoordinateComponent isInteger 
	  and: [aCoordinateComponent positive])
	  and: [ aCoordinateComponent < numberOfRows ] 
		! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:34:34' prior: 50873359!
assertValidAxialSize: anAxialSize

	(anAxialSize isInteger and: anAxialSize positive) ifFalse: [ self error: self class cannotHaveInvalidCoordinates ].
	! !
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 18:34:50' prior: 50873475!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection 
	
	self assertValidAxialSize: aNumberOfRows.
	self assertValidAxialSize: aNumberOfColumns.
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.
	
	self assertValidStageObjectsDisplay: aStageObjectCollection.
	stageObjectCollection := aStageObjectCollection.! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 18:35:00'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 18:35:00'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:35:00'!
ERROR!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 18:35:00'!
FAILURE!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 18:35:00'!
FAILURE!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:35:02'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:35:50' prior: 50873761!
assertValidCoordinate: aCoordinate
	
	^( self assertValidCoordinateX: aCoordinate x) and: [ 	self assertValidCoordinateY: aCoordinate y ]
		! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 18:35:53'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 18:35:53'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:35:53'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 18:35:53'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 18:35:53'!
PASSED!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:36:19'!
isValidCoordinateY: aCoordinateComponent
	
	^ (aCoordinateComponent isInteger 
	  and: [aCoordinateComponent positive])
	  and: [ aCoordinateComponent < numberOfRows ] 
		! !
!Room methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 18:36:19' prior: 50873873!
assertValidCoordinate: aCoordinate
	
	^( self assertValidCoordinateX: aCoordinate x) and: [ 	self isValidCoordinateY: aCoordinate y ]
		! !

!methodRemoval: Room #assertValidCoordinateY: stamp: 'mf 12/10/2020 18:36:19'!
assertValidCoordinateY: aCoordinateComponent
	
	^ (aCoordinateComponent isInteger 
	  and: [aCoordinateComponent positive])
	  and: [ aCoordinateComponent < numberOfRows ] 
		!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:36:33'!
isValidCoordinateX: aCoordinateComponent
	
	^ (aCoordinateComponent isInteger 
	  and: [aCoordinateComponent positive])
	  and: [ aCoordinateComponent < numberOfColumns ] 
		! !
!Room methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 18:36:33' prior: 50873906!
assertValidCoordinate: aCoordinate
	
	^( self isValidCoordinateX: aCoordinate x) and: [ 	self isValidCoordinateY: aCoordinate y ]
		! !

!methodRemoval: Room #assertValidCoordinateX: stamp: 'mf 12/10/2020 18:36:33'!
assertValidCoordinateX: aCoordinateComponent
	
	^ (aCoordinateComponent isInteger 
	  and: [aCoordinateComponent positive])
	  and: [ aCoordinateComponent < numberOfColumns ] 
		!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 18:36:45'!
isValidCoordinate: aCoordinate
	
	^( self isValidCoordinateX: aCoordinate x) and: [ 	self isValidCoordinateY: aCoordinate y ]
		! !
!Room methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 18:36:46' prior: 50873542!
assertValidStageObjectsDisplay: aStageObjectCollection

	(aStageObjectCollection keys allSatisfy: [ :aCoordinate | self isValidCoordinate: aCoordinate ]) 
		ifFalse: [ self error: self class invalidDisplayOfStageObjectsErrorDescription ].
	
	! !

!methodRemoval: Room #assertValidCoordinate: stamp: 'mf 12/10/2020 18:36:46'!
assertValidCoordinate: aCoordinate
	
	^( self isValidCoordinateX: aCoordinate x) and: [ 	self isValidCoordinateY: aCoordinate y ]
		!
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 18:38:22'!
test06aRoomCantTwoStageObjectsInSameCell
	
	| aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	self should: [ Room withRows: 10 withColumns: 10 andStageObjects: (Dictionary with: 1@10 -> aDiamondSword) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	! !
!RoomTest methodsFor: 'tests' stamp: 'mf 12/10/2020 18:39:56' prior: 50873969!
test06aRoomCantTwoStageObjectsInSameCell
	
	| aDiamondSword aPickaxe |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	aPickaxe := PointsPortableObject named: 'pickaxe' weighing: 23 worth: 2.
	self should: [ Room withRows: 10 withColumns: 10 andStageObjects: (Dictionary with: 1@3 -> aDiamondSword with: 1@3 -> aPickaxe) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	! !

!testRun: #RoomTest #test06aRoomCantTwoStageObjectsInSameCell stamp: 'mf 12/10/2020 18:39:57'!
FAILURE!

!testRun: #RoomTest #test06aRoomCantTwoStageObjectsInSameCell stamp: 'mf 12/10/2020 18:39:57'!
FAILURE!

aStageObjectCollection keys!

aStageObjectCollection at: 1@3!

aStageObjectCollection at: 1@3!

!methodRemoval: RoomTest #test06aRoomCantTwoStageObjectsInSameCell stamp: 'mf 12/10/2020 18:42:15'!
test06aRoomCantTwoStageObjectsInSameCell
	
	| aDiamondSword aPickaxe |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	aPickaxe := PointsPortableObject named: 'pickaxe' weighing: 23 worth: 2.
	self should: [ Room withRows: 10 withColumns: 10 andStageObjects: (Dictionary with: 1@3 -> aDiamondSword with: 1@3 -> aPickaxe) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 18:42:32'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 18:42:32'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:42:32'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 18:42:32'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 18:42:33'!
PASSED!
!Room methodsFor: 'coordinate management' stamp: 'mf 12/10/2020 18:45:01'!
isValidCoordinateComponentX: aCoordinateComponent
	
	^ (aCoordinateComponent isInteger 
	  and: [aCoordinateComponent positive])
	  and: [ aCoordinateComponent < numberOfColumns ] 
		! !
!Room methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 18:45:02' prior: 50873945!
isValidCoordinate: aCoordinate
	
	^( self isValidCoordinateComponentX: aCoordinate x) and: [ 	self isValidCoordinateY: aCoordinate y ]
		! !

!methodRemoval: Room #isValidCoordinateX: stamp: 'mf 12/10/2020 18:45:02'!
isValidCoordinateX: aCoordinateComponent
	
	^ (aCoordinateComponent isInteger 
	  and: [aCoordinateComponent positive])
	  and: [ aCoordinateComponent < numberOfColumns ] 
		!
!Room methodsFor: 'coordinate management' stamp: 'mf 12/10/2020 18:45:11'!
isValidCoordinateComponentY: aCoordinateComponent
	
	^ (aCoordinateComponent isInteger 
	  and: [aCoordinateComponent positive])
	  and: [ aCoordinateComponent < numberOfRows ] 
		! !
!Room methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 18:45:11' prior: 50874055!
isValidCoordinate: aCoordinate
	
	^( self isValidCoordinateComponentX: aCoordinate x) and: [ 	self isValidCoordinateComponentY: aCoordinate y ]
		! !

!methodRemoval: Room #isValidCoordinateY: stamp: 'mf 12/10/2020 18:45:11'!
isValidCoordinateY: aCoordinateComponent
	
	^ (aCoordinateComponent isInteger 
	  and: [aCoordinateComponent positive])
	  and: [ aCoordinateComponent < numberOfRows ] 
		!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 18:45:16'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 18:45:16'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:45:16'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 18:45:16'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 18:45:16'!
PASSED!
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 18:50:27'!
test06aRoomCanHaveAPlayableCharacter
	
	| backpack |
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 50.
	^PlayableCharacter named: 'Link' using: backpack at: 0@0 heading: #North.
	
	"room := Room withRows: 10 withColumns: 30 andStageObjects: Dictionary new for:@"! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 18:50:48' prior: 50874111!
test06aRoomCanHaveAPlayableCharacter
	
	| backpack |
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 50.
	PlayableCharacter named: 'Link' using: backpack at: 0@0 heading: #North.
	
	"room := Room withRows: 10 withColumns: 30 andStageObjects: Dictionary new for:@"! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 18:51:06'!
playableCharacter

	| backpack |
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 50.
	PlayableCharacter named: 'Link' using: backpack at: 0@0 heading: #North! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 18:51:06' prior: 50874123!
test06aRoomCanHaveAPlayableCharacter
	
	self playableCharacter.
	
	"room := Room withRows: 10 withColumns: 30 andStageObjects: Dictionary new for:@"! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 18:51:26' prior: 50874144!
test06aRoomCanHaveAPlayableCharacter
	
	| link |
	link := self playableCharacter.
	
	"room := Room withRows: 10 withColumns: 30 andStageObjects: Dictionary new for:@"! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 18:51:37' prior: 50874135!
playableCharacter

	| backpack |
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 50.
	^ PlayableCharacter named: 'Link' using: backpack at: 0@0 heading: #North! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 18:53:03' prior: 50874152!
test06aRoomCanHaveAPlayableCharacter
		
	| room |
	room := Room withRows: 10 withColumns: 30 andStageObjects: Dictionary new for: self playableCharacter.
	
	self assert: (room characterIsAt: 0@0 heading: #North).! !

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 18:53:09'!
ERROR!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 18:53:09'!
ERROR!
!Room class methodsFor: 'instance creation' stamp: 'mf 12/10/2020 18:53:16'!
withRows: aSmallInteger withColumns: aSmallInteger2 andStageObjects: aDictionary for: aPlayableCharacter 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithRows: aSmallInteger withColumns: aSmallInteger2 andStageObjects: aDictionary for: aPlayableCharacter ! !
!Room class methodsFor: 'instance creation' stamp: 'mf 12/10/2020 18:53:28' prior: 50874186!
withRows: aSmallInteger withColumns: aSmallInteger2 andStageObjects: aDictionary for: aPlayableCharacter 
	
	^self new initializeWithRows: aSmallInteger withColumns: aSmallInteger2 andStageObjects: aDictionary for: aPlayableCharacter ! !
!Room class methodsFor: 'instance creation' stamp: 'mf 12/10/2020 18:53:39' prior: 50874200!
withRows: aSmallInteger withColumns: aSmallInteger2 andStageObjects: aDictionary for: aPlayableCharacter 
	
	^self new initializeWithRows: aSmallInteger withColumns: aSmallInteger2 andStageObjects: aDictionary for: aPlayableCharacter ! !
!Room class methodsFor: 'instance creation' stamp: 'mf 12/10/2020 18:54:06' prior: 50874211!
withRows: aNumberOfRows withColumns: aSmallInteger2 andStageObjects: aDictionary for: aPlayableCharacter 
	
	^self new initializeWithRows: aNumberOfRows withColumns: aSmallInteger2 andStageObjects: aDictionary for: aPlayableCharacter ! !
!Room class methodsFor: 'instance creation' stamp: 'mf 12/10/2020 18:54:15' prior: 50874222!
withRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aDictionary for: aPlayableCharacter 
	
	^self new initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aDictionary for: aPlayableCharacter ! !
!Room class methodsFor: 'instance creation' stamp: 'mf 12/10/2020 18:54:29' prior: 50874233!
withRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection for: aPlayableCharacter 
	
	^self new initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection for: aPlayableCharacter ! !

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 18:54:35'!
ERROR!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'mf 12/10/2020 18:54:45'!
Object subclass: #Room
	instanceVariableNames: 'numberOfRows numberOfColumns stageObjectCollection playableCharacter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 18:54:45'!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection for: aPlayableCharacter 
	self shouldBeImplemented.
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.
	stageObjectCollection := aStageObjectCollection.
	playableCharacter := aPlayableCharacter.! !
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 18:55:42' prior: 50874267!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection for: aPlayableCharacter 
	
	
	self assertValidAxialSize: aNumberOfRows.
	self assertValidAxialSize: aNumberOfColumns.
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.
	
	self assertValidStageObjectsDisplay: aStageObjectCollection.
	stageObjectCollection := aStageObjectCollection.
	playableCharacter := aPlayableCharacter .! !
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 18:55:48' prior: 50874280!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection for: aPlayableCharacter 
	
	self assertValidAxialSize: aNumberOfRows.
	self assertValidAxialSize: aNumberOfColumns.
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.
	
	self assertValidStageObjectsDisplay: aStageObjectCollection.
	stageObjectCollection := aStageObjectCollection.
	playableCharacter := aPlayableCharacter .! !

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 18:55:49'!
ERROR!
!Room methodsFor: 'testing' stamp: 'mf 12/10/2020 18:56:00'!
characterIsAt: aPoint heading: aSymbol 
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'mf 12/10/2020 18:56:31' prior: 50874317!
characterIsAt: aCoordinate heading: aCardinalPoint 
	
	^ playableCharacter isAt: aCoordinate heading: aCardinalPoint .! !

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 18:56:33'!
PASSED!

!methodRemoval: Room #initializeWithRows:withColumns:andStageObjects: stamp: 'mf 12/10/2020 18:57:08'!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection 
	
	self assertValidAxialSize: aNumberOfRows.
	self assertValidAxialSize: aNumberOfColumns.
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.
	
	self assertValidStageObjectsDisplay: aStageObjectCollection.
	stageObjectCollection := aStageObjectCollection.!
!Room class methodsFor: 'instance creation' stamp: 'mf 12/10/2020 18:57:20' prior: 50873086!
withRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection 

	^self new initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection for: nil.! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 18:57:32'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 18:57:32'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 18:57:32'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 18:57:32'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 18:57:32'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 18:57:32'!
PASSED!
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 18:58:02'!
test06aRoomCantHaveAPlayableCharacterOutOfBounds
		
	| room |
	room := Room withRows: 10 withColumns: 30 andStageObjects: Dictionary new for: self outOfBoundsPlayableCharacter.
	
	self assert: (room characterIsAt: 0@0 heading: #North).! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 18:58:17'!
outOfBoundsPlayableCharacter

	| backpack |
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 50.
	^ PlayableCharacter named: 'Link' using: backpack at: 12@12 heading: #North! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 18:59:02' prior: 50874377!
test06aRoomCantHaveAPlayableCharacterOutOfBounds
		
	self should: [ Room withRows: 10 withColumns: 30 andStageObjects: Dictionary new for: self outOfBoundsPlayableCharacter. ]
	! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 18:59:51' prior: 50874398!
test06aRoomCantHaveAPlayableCharacterOutOfBounds
		
	self should: [ Room withRows: 10 withColumns: 30 andStageObjects: Dictionary new for: self outOfBoundsPlayableCharacter. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room invalidInitialPositionForCharacterErrorDescription.
	! !
!RoomTest methodsFor: 'factory' stamp: 'mf 12/10/2020 19:00:23'!
numberOfRows
	
	^10! !
!RoomTest methodsFor: 'factory' stamp: 'mf 12/10/2020 19:00:28'!
numberOfColumns
	
	^10! !
!RoomTest methodsFor: 'factory' stamp: 'mf 12/10/2020 19:01:00' prior: 50874388!
outOfBoundsPlayableCharacter

	| backpack |
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 50.
	^ PlayableCharacter named: 'Link' using: backpack at: (self numberOfRows + 2 @ 0) heading: #North! !

----SNAPSHOT----(10 December 2020 19:01:36) CuisUniversity-4384.image priorSource: 17323659!
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:02:17' prior: 50873131!
test03aRoomCanHaveStageObjects
	
	| room aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	room := Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: (Dictionary with: 1@1 -> aDiamondSword).
	
	self assert: (room includes: aDiamondSword at: 1@1)! !
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:02:44' prior: 50873616!
test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise
	
	| aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	self should: [ Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: (Dictionary with: 10@2 -> aDiamondSword) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	! !
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:03:01' prior: 50874453!
test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise
	
	| aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	self should: [ Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: (Dictionary with: self numberOfRows @2 -> aDiamondSword) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	! !
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:03:29' prior: 50873631!
test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise
	
	| aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	self should: [ Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: (Dictionary with: 1@self numberOfColumns -> aDiamondSword) ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:03:31'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:03:31'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:03:31'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:03:31'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:03:31'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:03:31'!
PASSED!

!testRun: #RoomTest #test06aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:03:31'!
ERROR!

!testRun: #RoomTest #test06aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:03:31'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 19:03:43'!
invalidInitialPositionForCharacterErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 19:04:00' prior: 50874530!
invalidInitialPositionForCharacterErrorDescription
	
	^'Invalid initial position for playable character'! !

!testRun: #RoomTest #test06aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:04:06'!
FAILURE!
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 19:04:37' prior: 50874407!
test06aRoomCantHaveAPlayableCharacterOutOfBounds
		
	self should: [ Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: Dictionary new for: self outOfBoundsPlayableCharacter. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room invalidInitialPositionForCharacterErrorDescription.
	! !

!testRun: #RoomTest #test06aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:04:40'!
FAILURE!
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 19:05:31' prior: 50874297!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection for: aPlayableCharacter 
	
	self assertValidAxialSize: aNumberOfRows.
	self assertValidAxialSize: aNumberOfColumns.
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.
	
	self assertValidStageObjectsDisplay: aStageObjectCollection.
	stageObjectCollection := aStageObjectCollection.
	
	self assertCharacterInValidPosition: aPlayableCharacter.
	playableCharacter := aPlayableCharacter .! !

!testRun: #RoomTest #test06aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:05:38'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 19:05:43'!
assertCharacterInValidPosition: aPlayableCharacter 
	self shouldBeImplemented.! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 19:07:39' prior: 50874586!
assertCharacterInValidPosition: aPlayableCharacter 
	
	aPlayableCharacter insideRoom: self.! !

!testRun: #RoomTest #test06aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:07:44'!
ERROR!
!PlayableCharacter methodsFor: 'room' stamp: 'mf 12/10/2020 19:08:02'!
insideRoom: aRoom 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'room' stamp: 'mf 12/10/2020 19:08:33' prior: 50874601!
insideRoom: aRoom 
	
	^ aRoom isValidCoordinate: position.! !

!testRun: #RoomTest #test06aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:08:39'!
FAILURE!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 19:09:26' prior: 50874592!
assertCharacterInValidPosition: aPlayableCharacter 
	
	(aPlayableCharacter insideRoom: self) ifFalse: [ self error: self class invalidInitialPositionForCharacterErrorDescription ]! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:09:29'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:09:29'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:09:29'!
ERROR!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:09:29'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:09:29'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:09:29'!
PASSED!

!testRun: #RoomTest #test06aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:09:29'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:09:29'!
ERROR!
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:10:24' prior: 50873803!
test01aRoomCantHaveNonPositiveCoordinates

	self should: [ self roomWithInvalidAxialSize ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveInvalidCoordinates! !
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:10:39' prior: 50874649!
test01aRoomCantHaveNonPositiveCoordinates

	self should: [ self roomWithNonPositiveAxialSize ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveInvalidCoordinates! !
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:10:52' prior: 50872971!
test02aRoomCantHaveNonIntegerCoordinates

	self should: [ self roomWithNonIntegerAxialSize ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveInvalidCoordinates .! !
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:11:28' prior: 50874439!
test03aRoomCanHaveStageObjects
	
	| room aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	room := Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: (Dictionary with: 1@1 -> aDiamondSword) for: 	self playableCharacter .
	
	self assert: (room includes: aDiamondSword at: 1@1)! !
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:11:41' prior: 50874470!
test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise
	
	| aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	self should: [ Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: (Dictionary with: self numberOfRows @2 -> aDiamondSword) for: self playableCharacter ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	! !
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:11:52' prior: 50874487!
test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise
	
	| aDiamondSword |
	aDiamondSword := PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.
	self should: [ Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: (Dictionary with: 1@self numberOfColumns -> aDiamondSword) for: self playableCharacter]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 19:12:00'!
test07aRoomCantHaveAPlayableCharacterOutOfBounds
		
	self should: [ Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: Dictionary new for: self outOfBoundsPlayableCharacter. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room invalidInitialPositionForCharacterErrorDescription.
	! !

!methodRemoval: RoomTest #test06aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:12:00'!
test06aRoomCantHaveAPlayableCharacterOutOfBounds
		
	self should: [ Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: Dictionary new for: self outOfBoundsPlayableCharacter. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room invalidInitialPositionForCharacterErrorDescription.
	!
!RoomTest methodsFor: 'factory' stamp: 'mf 12/10/2020 19:12:59'!
roomWithNonPositiveAxialSize
	
	^ Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: self emptyStageObjects for: self playableCharacter. ! !
!RoomTest methodsFor: 'factory' stamp: 'mf 12/10/2020 19:13:11'!
roomWithNonIntegerAxialSize
	
	^ Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: self emptyStageObjects for: self playableCharacter. ! !
!RoomTest methodsFor: 'factory' stamp: 'mf 12/10/2020 19:13:17' prior: 50874761!
roomWithNonIntegerAxialSize
	
	^ Room withRows: 0.3 withColumns: self numberOfColumns andStageObjects: self emptyStageObjects for: self playableCharacter. ! !
!RoomTest methodsFor: 'factory' stamp: 'mf 12/10/2020 19:13:24' prior: 50874753!
roomWithNonPositiveAxialSize
	
	^ Room withRows: -4 withColumns: self numberOfColumns andStageObjects: self emptyStageObjects for: self playableCharacter. ! !
!RoomTest methodsFor: 'factory' stamp: 'mf 12/10/2020 19:13:43'!
emptyStageObjects
	
	^ Dictionary new.! !
!RoomTest methodsFor: 'factory' stamp: 'mf 12/10/2020 19:13:54'!
emptyStageObjectsCollection
	
	^ Dictionary new.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 19:13:54' prior: 50874777!
roomWithNonPositiveAxialSize
	
	^ Room withRows: -4 withColumns: self numberOfColumns andStageObjects: self emptyStageObjectsCollection for: self playableCharacter. ! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 19:13:54' prior: 50874769!
roomWithNonIntegerAxialSize
	
	^ Room withRows: 0.3 withColumns: self numberOfColumns andStageObjects: self emptyStageObjectsCollection for: self playableCharacter. ! !

!methodRemoval: RoomTest #emptyStageObjects stamp: 'mf 12/10/2020 19:13:54'!
emptyStageObjects
	
	^ Dictionary new.!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:13:59'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:13:59'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:13:59'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:13:59'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:13:59'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:13:59'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:13:59'!
PASSED!
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 19:14:26'!
test08aRoomCantHaveAPlayableAndStageObjectInSameCell
		
	self should: [ Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: Dictionary new for: self outOfBoundsPlayableCharacter. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room invalidInitialPositionForCharacterErrorDescription.
	! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 19:16:28' prior: 50874837!
test08aRoomCantHaveAPlayableAndStageObjectInSameCell
	
	| stageObjectsCollection |
	stageObjectsCollection := Dictionary with: 0@0 -> self portableObject.

	self should: [ Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: Dictionary new for: self playableCharacter. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room playerCannotStandOnStageObjectErrorDescription.
	! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 19:16:43' prior: 50874851!
test08aRoomCantHaveAPlayableAndStageObjectInSameCell
	
	| stageObjectsCollection |
	stageObjectsCollection := Dictionary with: 0@0 -> self portableObject.

	self should: [ Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: stageObjectsCollection for: self playableCharacter. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room playerCannotStandOnStageObjectErrorDescription.
	! !
!RoomTest methodsFor: 'factory' stamp: 'mf 12/10/2020 19:17:28'!
portableObject
	
	^PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.! !
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:17:45' prior: 50874691!
test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise
	
	self should: [ Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: (Dictionary with: self numberOfRows @2 -> self portableObject) for: self playableCharacter ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	! !
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:17:59' prior: 50874709!
test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise
	
	self should: [ Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: (Dictionary with: 1@self numberOfColumns -> self portableObject ) for: self playableCharacter]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	! !
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:18:31' prior: 50874676!
test03aRoomCanHaveStageObjects
	
	| room aDiamondSword |
	aDiamondSword := self portableObject.
	room := Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: (Dictionary with: 1@1 -> aDiamondSword) for: 	self playableCharacter .
	
	self assert: (room includes: aDiamondSword at: 1@1)! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:18:41'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:18:41'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:18:41'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:18:41'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:18:41'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:18:41'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:18:41'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:18:41'!
ERROR!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:18:41'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 19:18:55'!
playerCannotStandOnStageObjectErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 19:19:14' prior: 50874963!
playerCannotStandOnStageObjectErrorDescription
	
	^'Player and stage object cant be in same cell'! !

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:19:16'!
FAILURE!
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 19:20:27' prior: 50874564!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection for: aPlayableCharacter 
	
	self assertValidAxialSize: aNumberOfRows.
	self assertValidAxialSize: aNumberOfColumns.
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.
	
	self assertValidStageObjectsDisplay: aStageObjectCollection.
	stageObjectCollection := aStageObjectCollection.
	
	self assertCharacterInValidPosition: aPlayableCharacter.
	self assertCharacterDoesntStandOnObject: aPlayableCharacter.
	playableCharacter := aPlayableCharacter .! !

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:20:31'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 19:20:35'!
assertCharacterDoesntStandOnObject: aPlayableCharacter 
	self shouldBeImplemented.! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 19:22:02' prior: 50875003!
assertCharacterDoesntStandOnObject: aPlayableCharacter 
	
	(aPlayableCharacter isAtAny: stageObjectCollection keys) ifTrue: [ self error: self class playerCannotStandOnStageObjectErrorDescription ].! !

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:22:04'!
ERROR!
!PlayableCharacter methodsFor: 'testin' stamp: 'mf 12/10/2020 19:22:14'!
isAtAny: anArray 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'testin' stamp: 'mf 12/10/2020 19:22:54' prior: 50875022!
isAtAny: aCollection
	
	^ aCollection anySatisfy: [ :aCoordinate | position = aCoordinate ].
	! !

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:22:55'!
PASSED!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:23:02'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:23:02'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:23:02'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:23:02'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:23:02'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:23:02'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:23:03'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:23:03'!
PASSED!
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 19:23:49'!
cannotHaveInvalidAxialSizesErrorDescription
	
	^'Room cant have invalid coordinates'.! !
!Room methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 19:23:49' prior: 50873830!
assertValidAxialSize: anAxialSize

	(anAxialSize isInteger and: anAxialSize positive) ifFalse: [ self error: self class cannotHaveInvalidAxialSizesErrorDescription ].
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 19:23:49' prior: 50874667!
test02aRoomCantHaveNonIntegerCoordinates

	self should: [ self roomWithNonIntegerAxialSize ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveInvalidAxialSizesErrorDescription .! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 19:23:49' prior: 50874658!
test01aRoomCantHaveNonPositiveCoordinates

	self should: [ self roomWithNonPositiveAxialSize ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveInvalidAxialSizesErrorDescription! !

!methodRemoval: Room class #cannotHaveInvalidCoordinates stamp: 'mf 12/10/2020 19:23:49'!
cannotHaveInvalidCoordinates
	
	^'Room cant have invalid coordinates'.!

----SNAPSHOT----(10 December 2020 19:26:47) CuisUniversity-4384.image priorSource: 17369105!
!PlayableCharacterTest methodsFor: 'tests - in room' stamp: 'mf 12/10/2020 19:31:14'!
test11playableCharacterCanBeInsideRoom
	
	! !

Object subclass: #TestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #TestObjectFactory category: 'ISW1-2020-2C-2doParcial' stamp: 'mf 12/10/2020 19:31:40'!
Object subclass: #TestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest class methodsFor: 'factory' stamp: 'mf 12/10/2020 19:32:03'!
emptyStageObjectsCollection
	
	^ Dictionary new.! !

!methodRemoval: RoomTest #emptyStageObjectsCollection stamp: 'mf 12/10/2020 19:32:03'!
emptyStageObjectsCollection
	
	^ Dictionary new.!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:32:21'!
ERROR!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:32:21'!
ERROR!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:32:21'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:32:21'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:32:21'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:32:21'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:32:21'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:32:21'!
PASSED!
!RoomTest methodsFor: 'factory' stamp: 'mf 12/10/2020 19:32:34'!
emptyStageObjectsCollection
	
	^ Dictionary new.! !

!methodRemoval: RoomTest class #emptyStageObjectsCollection stamp: 'mf 12/10/2020 19:32:34'!
emptyStageObjectsCollection
	
	^ Dictionary new.!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:32:38'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:32:38'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:32:38'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:32:38'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:32:38'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:32:38'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:32:38'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:32:38'!
PASSED!
!TestObjectFactory methodsFor: 'no messages' stamp: 'mf 12/10/2020 19:33:29'!
emptyStageObjectsCollection
	
	^ Dictionary new.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 19:33:40'!
numberOfColumns
	
	^10! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 19:33:47'!
numberOfRows
	
	^10
	! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 19:33:54'!
outOfBoundsPlayableCharacter

	| backpack |
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 50.
	^ PlayableCharacter named: 'Link' using: backpack at: (self numberOfRows + 2 @ 0) heading: #North! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 19:34:09'!
playableCharacter

	| backpack |
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 50.
	^ PlayableCharacter named: 'Link' using: backpack at: 0@0 heading: #North! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 19:34:16'!
portableObject
	
	^PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 19:34:22'!
roomWithNonIntegerAxialSize
	
	^ Room withRows: 0.3 withColumns: self numberOfColumns andStageObjects: self emptyStageObjectsCollection for: self playableCharacter. ! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 19:34:28'!
roomWithNonPositiveAxialSize
	
	^ Room withRows: -4 withColumns: self numberOfColumns andStageObjects: self emptyStageObjectsCollection for: self playableCharacter. ! !

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'mf 12/10/2020 19:35:08'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'setup' stamp: 'mf 12/10/2020 19:35:06'!
setup
	
	factory := TestObjectFactory new.! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:35:11'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:35:11'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:35:11'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:35:11'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:35:11'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:35:11'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:35:11'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:35:11'!
PASSED!
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:35:35' prior: 50875088!
test01aRoomCantHaveNonPositiveCoordinates

	self should: [ factory roomWithNonPositiveAxialSize ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveInvalidAxialSizesErrorDescription! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:35:36'!
ERROR!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:35:36'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:35:36'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:35:37'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:35:37'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:35:37'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:35:37'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:35:37'!
PASSED!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:35:37'!
ERROR!
!RoomTest methodsFor: 'setup' stamp: 'mf 12/10/2020 19:35:51' overrides: 16896425!
initialize
	
	factory := TestObjectFactory new.! !

!methodRemoval: RoomTest #setup stamp: 'mf 12/10/2020 19:35:54'!
setup
	
	factory := TestObjectFactory new.!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:35:56'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:35:56'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:35:56'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:35:56'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:35:56'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:35:56'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:35:56'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:35:57'!
PASSED!
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:36:07' prior: 50875078!
test02aRoomCantHaveNonIntegerCoordinates

	self should: [ factory roomWithNonIntegerAxialSize ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room cannotHaveInvalidAxialSizesErrorDescription .! !
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:36:27' prior: 50874920!
test03aRoomCanHaveStageObjects
	
	| room aDiamondSword |
	aDiamondSword := factory portableObject.
	room := Room withRows: factory numberOfRows withColumns: factory numberOfColumns andStageObjects: (Dictionary with: 1@1 -> aDiamondSword) for: 	factory playableCharacter .
	
	self assert: (room includes: aDiamondSword at: 1@1)! !
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:36:52' prior: 50874890!
test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise
	
	self should: [ Room withRows: factory numberOfRows withColumns: factory numberOfColumns andStageObjects: (Dictionary with: factory numberOfRows @2 -> factory portableObject) for: factory playableCharacter ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	! !
!RoomTest methodsFor: 'tests - room with objects' stamp: 'mf 12/10/2020 19:37:16' prior: 50874905!
test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise
	
	self should: [ Room withRows: factory numberOfRows withColumns: factory numberOfColumns andStageObjects: (Dictionary with: 1@factory numberOfColumns -> factory portableObject ) for: factory playableCharacter]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room invalidDisplayOfStageObjectsErrorDescription.
	! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 19:37:26' prior: 50874170!
test06aRoomCanHaveAPlayableCharacter
		
	| room |
	room := Room withRows: 10 withColumns: 30 andStageObjects: Dictionary new for: factory playableCharacter.
	
	self assert: (room characterIsAt: 0@0 heading: #North).! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 19:37:38' prior: 50874727!
test07aRoomCantHaveAPlayableCharacterOutOfBounds
		
	self should: [ Room withRows: factory numberOfRows withColumns: factory numberOfColumns andStageObjects: Dictionary new for: factory outOfBoundsPlayableCharacter. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room invalidInitialPositionForCharacterErrorDescription.
	! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 19:37:52' prior: 50874868!
test08aRoomCantHaveAPlayableAndStageObjectInSameCell
	
	| stageObjectsCollection |
	stageObjectsCollection := Dictionary with: 0@0 -> factory portableObject.

	self should: [ Room withRows: factory numberOfRows withColumns: factory numberOfColumns andStageObjects: stageObjectsCollection for: factory playableCharacter. ]
		raise: Error - MessageNotUnderstood
		withMessageText: Room playerCannotStandOnStageObjectErrorDescription.
	! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:37:58'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:37:58'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:37:58'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:37:58'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:37:58'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:37:58'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:37:58'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:37:58'!
PASSED!

!methodRemoval: RoomTest #emptyStageObjectsCollection stamp: 'mf 12/10/2020 19:38:01'!
emptyStageObjectsCollection
	
	^ Dictionary new.!

!methodRemoval: RoomTest #numberOfColumns stamp: 'mf 12/10/2020 19:38:01'!
numberOfColumns
	
	^10!

!methodRemoval: RoomTest #numberOfRows stamp: 'mf 12/10/2020 19:38:02'!
numberOfRows
	
	^10!

!methodRemoval: RoomTest #outOfBoundsPlayableCharacter stamp: 'mf 12/10/2020 19:38:02'!
outOfBoundsPlayableCharacter

	| backpack |
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 50.
	^ PlayableCharacter named: 'Link' using: backpack at: (self numberOfRows + 2 @ 0) heading: #North!

!methodRemoval: RoomTest #playableCharacter stamp: 'mf 12/10/2020 19:38:02'!
playableCharacter

	| backpack |
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 50.
	^ PlayableCharacter named: 'Link' using: backpack at: 0@0 heading: #North!

!methodRemoval: RoomTest #portableObject stamp: 'mf 12/10/2020 19:38:02'!
portableObject
	
	^PointsPortableObject named: 'diamond sword' weighing: 10 worth: 5.!

!methodRemoval: RoomTest #roomWithNonIntegerAxialSize stamp: 'mf 12/10/2020 19:38:02'!
roomWithNonIntegerAxialSize
	
	^ Room withRows: 0.3 withColumns: self numberOfColumns andStageObjects: self emptyStageObjectsCollection for: self playableCharacter. !

!methodRemoval: RoomTest #roomWithNonPositiveAxialSize stamp: 'mf 12/10/2020 19:38:02'!
roomWithNonPositiveAxialSize
	
	^ Room withRows: -4 withColumns: self numberOfColumns andStageObjects: self emptyStageObjectsCollection for: self playableCharacter. !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:38:03'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:38:03'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:38:03'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:38:03'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:38:03'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:38:03'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:38:03'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:38:03'!
PASSED!

----SNAPSHOT----(10 December 2020 19:38:11) CuisUniversity-4384.image priorSource: 17390446!

!classDefinition: #PlayableCharacterTest category: 'ISW1-2020-2C-2doParcial' stamp: 'mf 12/10/2020 19:39:17'!
TestCase subclass: #PlayableCharacterTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacterTest methodsFor: 'tests - in room' stamp: 'mf 12/10/2020 19:39:09' prior: 50875106!
test11playableCharacterCanBeInsideRoom
	
	| aPlayableCharacter |
	aPlayableCharacter := factory playableCharacter.
	
	! !
!PlayableCharacterTest methodsFor: 'setup' stamp: 'mf 12/10/2020 19:39:41' overrides: 16896425!
initialize
	
	factory := TestObjectFactory new.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 19:42:56' prior: 50875217!
playableCharacter

	^ PlayableCharacter named: 'Link' using: self defaultBackpack at: 0@0 heading: #North! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:43:01'!
ERROR!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:43:01'!
ERROR!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:43:01'!
ERROR!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:43:01'!
ERROR!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:43:01'!
ERROR!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:43:01'!
ERROR!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:43:01'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:43:01'!
ERROR!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 19:43:20'!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 ! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:43:23'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:43:23'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:43:23'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:43:23'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:43:23'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:43:23'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:43:24'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:43:24'!
PASSED!

!methodRemoval: PlayableCharacterTest #defaultBackpack stamp: 'mf 12/10/2020 19:43:29'!
defaultBackpack

	^ Backpack containingUpTo: 100 limitingPointsTo: 100 !
!PlayableCharacterTest methodsFor: 'tests - pre room' stamp: 'mf 12/10/2020 19:43:36' prior: 50868919!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 1@2 heading: #North .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests - pre room' stamp: 'mf 12/10/2020 19:43:42' prior: 50868931!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 1@2 heading: #North .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests - pre room' stamp: 'mf 12/10/2020 19:43:48' prior: 50868943!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 1@2 heading: #North .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests - pre room' stamp: 'mf 12/10/2020 19:43:53' prior: 50868954!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 1@2 heading: #North .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'tests - pre room' stamp: 'mf 12/10/2020 19:43:59' prior: 50868965!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 1@2 heading: #East .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests - pre room' stamp: 'mf 12/10/2020 19:44:04' prior: 50868979!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 1@2 heading: #South .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests - pre room' stamp: 'mf 12/10/2020 19:44:09' prior: 50868993!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'tests - pre room' stamp: 'mf 12/10/2020 19:44:15' prior: 50869007!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 1@2 heading: #X ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'tests - pre room' stamp: 'mf 12/10/2020 19:44:21' prior: 50869020!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'tests - pre room' stamp: 'mf 12/10/2020 19:44:26' prior: 50869033!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mf 12/10/2020 19:44:49'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mf 12/10/2020 19:44:49'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mf 12/10/2020 19:44:49'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mf 12/10/2020 19:44:49'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mf 12/10/2020 19:44:49'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mf 12/10/2020 19:44:49'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mf 12/10/2020 19:44:49'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mf 12/10/2020 19:44:49'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mf 12/10/2020 19:44:49'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mf 12/10/2020 19:44:49'!
PASSED!

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 19:44:49'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - in room' stamp: 'mf 12/10/2020 19:47:35' prior: 50875573!
test11playableCharacterCanBeInsideRoom
	
	| aPlayableCharacter |
	aPlayableCharacter := factory playableCharacter.
	
	aPlayableCharacter fitInRoom: (factory roomForPlayableCharacter: aPlayableCharacter).
	
	! !
!PlayableCharacterTest methodsFor: 'tests - in room' stamp: 'mf 12/10/2020 19:49:36' prior: 50875845!
test11playableCharacterCanBeInsideRoom
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	aPlayableCharacter fitInRoom: room .
	
	self assert: (aPlayableCharacter isInRoom: room)
	! !

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 19:49:40'!
ERROR!

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 19:49:40'!
ERROR!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 19:49:49'!
emptyRoomForPlayableCharacter: aPlayableCharacter 
	self shouldBeImplemented.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 19:50:49' prior: 50875874!
emptyRoomForPlayableCharacter: aPlayableCharacter 
	
	^Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: self emptyStageObjectsCollection for: aPlayableCharacter.! !

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 19:50:51'!
ERROR!
!PlayableCharacter methodsFor: 'room' stamp: 'mf 12/10/2020 19:51:01'!
fitInRoom: aRoom 
	self shouldBeImplemented.! !

!classDefinition: #PlayableCharacter category: 'ISW1-2020-2C-2doParcial' stamp: 'mf 12/10/2020 19:51:10'!
Object subclass: #PlayableCharacter
	instanceVariableNames: 'position heading backpack name room'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!PlayableCharacter methodsFor: 'room' stamp: 'mf 12/10/2020 19:51:09' prior: 50875893!
fitInRoom: aRoom 
	
	room := aRoom! !

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 19:51:13'!
ERROR!
!PlayableCharacter methodsFor: 'testing' stamp: 'mf 12/10/2020 19:51:23'!
isInRoom: aRoom 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'testing' stamp: 'mf 12/10/2020 19:51:33' prior: 50875915!
isInRoom: aRoom 
	
	room = aRoom.! !

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 19:51:34'!
ERROR!
!PlayableCharacter methodsFor: 'testing' stamp: 'mf 12/10/2020 19:51:55' prior: 50875920!
isInRoom: aRoom 
	
	^room = aRoom.! !

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 19:51:56'!
PASSED!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:51:58'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:51:59'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:51:59'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:51:59'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:51:59'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:51:59'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:51:59'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:51:59'!
PASSED!

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 19:52:06'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - in room' stamp: 'mf 12/10/2020 19:52:18'!
test11playableCharacterCanMoveInsideRoom
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	aPlayableCharacter fitInRoom: room .
	
	self assert: (aPlayableCharacter isInRoom: room)
	! !
!PlayableCharacterTest methodsFor: 'tests - in room' stamp: 'mf 12/10/2020 19:54:30'!
test12playableCharacterCanMoveForwardInsideRoom
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	aPlayableCharacter fitInRoom: room .
	
	aPlayableCharacter moveForward.
	self assert: (aPlayableCharacter isInRoom: room)
	! !

!methodRemoval: PlayableCharacterTest #test11playableCharacterCanMoveInsideRoom stamp: 'mf 12/10/2020 19:54:33'!
test11playableCharacterCanMoveInsideRoom
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	aPlayableCharacter fitInRoom: room .
	
	self assert: (aPlayableCharacter isInRoom: room)
	!
!PlayableCharacterTest methodsFor: 'tests - in room' stamp: 'mf 12/10/2020 19:55:26' prior: 50875855!
test11playableCharacterCanBeInsideRoom
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	
	self assert: (aPlayableCharacter isInRoom: room)
	! !
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 19:55:49' prior: 50874979!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection for: aPlayableCharacter 
	
	self assertValidAxialSize: aNumberOfRows.
	self assertValidAxialSize: aNumberOfColumns.
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.
	
	self assertValidStageObjectsDisplay: aStageObjectCollection.
	stageObjectCollection := aStageObjectCollection.
	
	self assertCharacterInValidPosition: aPlayableCharacter.
	self assertCharacterDoesntStandOnObject: aPlayableCharacter.
	playableCharacter := aPlayableCharacter .
	playableCharacter fitInRoom: self.! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:55:53'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:55:53'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:55:53'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:55:53'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:55:53'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:55:53'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:55:53'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:55:53'!
PASSED!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mf 12/10/2020 19:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mf 12/10/2020 19:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mf 12/10/2020 19:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mf 12/10/2020 19:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mf 12/10/2020 19:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mf 12/10/2020 19:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mf 12/10/2020 19:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mf 12/10/2020 19:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mf 12/10/2020 19:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mf 12/10/2020 19:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 19:55:57'!
PASSED!

!testRun: #PlayableCharacterTest #test12playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 19:55:57'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - in room' stamp: 'mf 12/10/2020 19:57:26' prior: 50875978!
test12playableCharacterCanMoveForwardInsideRoom
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	
	aPlayableCharacter moveForward.
	self assert: (room characterIsAt: 0@1 heading: #North)
	! !

!methodRemoval: PlayableCharacterTest #test12playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 19:57:55'!
test12playableCharacterCanMoveForwardInsideRoom
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	
	aPlayableCharacter moveForward.
	self assert: (room characterIsAt: 0@1 heading: #North)
	!
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 19:58:09'!
test09playableCharacterCanMoveForwardInsideRoom
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	
	aPlayableCharacter moveForward.
	self assert: (room characterIsAt: 0@1 heading: #North)! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 19:58:13'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 19:58:13'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 19:58:13'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 19:58:13'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 19:58:13'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:58:13'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:58:13'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:58:13'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 19:58:13'!
PASSED!
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 19:59:05'!
test09playableCharacterCanRotateInsideRoom
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	
	aPlayableCharacter rotateLeft.
	self assert: (room characterIsAt: 0@0 heading: #West)! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 19:59:13'!
test10playableCharacterCanRotateInsideRoom
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	
	aPlayableCharacter rotateLeft.
	self assert: (room characterIsAt: 0@0 heading: #West)! !

!methodRemoval: RoomTest #test09playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 19:59:14'!
test09playableCharacterCanRotateInsideRoom
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	
	aPlayableCharacter rotateLeft.
	self assert: (room characterIsAt: 0@0 heading: #West)!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 19:59:17'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 19:59:18'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 19:59:18'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 19:59:18'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 19:59:18'!
PASSED!
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 20:01:03'!
test11playableCharacterCantMoveOutOfBounds
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	
	self should: [aPlayableCharacter moveBackward.]
		raise: Error
		withMessageText: Room playableCharacterCannotMoveOutOfBoundsErrorDescription! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 20:01:30'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 20:01:31'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:01:31'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 20:01:31'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 20:01:31'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 20:01:31'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 20:01:31'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 20:01:31'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 20:01:31'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 20:01:31'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:01:31'!
ERROR!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:01:31'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 20:01:43'!
playableCharacterCannotMoveOutOfBoundsErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 20:02:00' prior: 50876285!
playableCharacterCannotMoveOutOfBoundsErrorDescription
	
	^'Playable character cannot move out of room bounds'.! !

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:02:01'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'mf 12/10/2020 20:03:27' prior: 50869274!
moveBackward
	
	self assertMovementIsInRoomBounds: (position - heading forwardPoint).
	position := position - heading forwardPoint ! !

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:03:30'!
FAILURE!
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 20:03:43' prior: 50876231!
test11playableCharacterCantMoveOutOfBounds
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	
	self should: [aPlayableCharacter moveBackward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterCannotMoveOutOfBoundsErrorDescription! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 20:03:47'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 20:03:47'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:03:47'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 20:03:47'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 20:03:47'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 20:03:47'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 20:03:47'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 20:03:47'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 20:03:47'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 20:03:47'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:03:47'!
ERROR!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:03:47'!
ERROR!
!PlayableCharacter methodsFor: 'assertions' stamp: 'mf 12/10/2020 20:03:58'!
assertMovementIsInRoomBounds: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 20:06:05'!
assertCharacterInValidCell: aPlayableCharacter

	self assertCharacterInValidPosition: aPlayableCharacter.
	self assertCharacterDoesntStandOnObject: aPlayableCharacter! !
!Room methodsFor: 'initialization' stamp: 'mf 12/10/2020 20:06:05' prior: 50876015!
initializeWithRows: aNumberOfRows withColumns: aNumberOfColumns andStageObjects: aStageObjectCollection for: aPlayableCharacter 
	
	self assertValidAxialSize: aNumberOfRows.
	self assertValidAxialSize: aNumberOfColumns.
	numberOfRows := aNumberOfRows.
	numberOfColumns := aNumberOfColumns.
	
	self assertValidStageObjectsDisplay: aStageObjectCollection.
	stageObjectCollection := aStageObjectCollection.
	
	self assertCharacterInValidCell: aPlayableCharacter.
	playableCharacter := aPlayableCharacter .
	playableCharacter fitInRoom: self.! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 20:06:36'!
assertCharacterInRoomBounds: aPlayableCharacter 
	
	(aPlayableCharacter insideRoom: self) ifFalse: [ self error: self class invalidInitialPositionForCharacterErrorDescription ]! !
!Room methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 20:06:36' prior: 50876372!
assertCharacterInValidCell: aPlayableCharacter

	self assertCharacterInRoomBounds: aPlayableCharacter.
	self assertCharacterDoesntStandOnObject: aPlayableCharacter! !

!methodRemoval: Room #assertCharacterInValidPosition: stamp: 'mf 12/10/2020 20:06:36'!
assertCharacterInValidPosition: aPlayableCharacter 
	
	(aPlayableCharacter insideRoom: self) ifFalse: [ self error: self class invalidInitialPositionForCharacterErrorDescription ]!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 20:06:39'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 20:06:39'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:06:39'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 20:06:39'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 20:06:39'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 20:06:39'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 20:06:39'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 20:06:39'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 20:06:39'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 20:06:39'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:06:39'!
FAILURE!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:06:39'!
FAILURE!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mf 12/10/2020 20:06:48'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mf 12/10/2020 20:06:48'!
ERROR!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mf 12/10/2020 20:06:48'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mf 12/10/2020 20:06:48'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mf 12/10/2020 20:06:48'!
ERROR!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mf 12/10/2020 20:06:48'!
ERROR!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mf 12/10/2020 20:06:48'!
ERROR!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mf 12/10/2020 20:06:48'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mf 12/10/2020 20:06:48'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mf 12/10/2020 20:06:48'!
PASSED!

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 20:06:48'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:07:02'!
FAILURE!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:07:02'!
FAILURE!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:07:20'!
FAILURE!
!PlayableCharacter methodsFor: 'assertions' stamp: 'mf 12/10/2020 20:09:31' prior: 50876367!
assertMovementIsInRoomBounds: aCoordinate
	
	(room isNotNil and: [ (room assertCharacterInRoomBounds: self) not ]) ifTrue: [ self error: self class playableCharacterCannotMoveOutOfBoundsErrorDescription ].! !

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:09:32'!
ERROR!
!PlayableCharacter methodsFor: 'room' stamp: 'mf 12/10/2020 20:11:18'!
inBoundsOfRoom: aRoom 
	
	^ aRoom isValidCoordinate: position.! !
!Room methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 20:11:18' prior: 50876399!
assertCharacterInRoomBounds: aPlayableCharacter 
	
	(aPlayableCharacter inBoundsOfRoom: self) ifFalse: [ self error: self class invalidInitialPositionForCharacterErrorDescription ]! !

!methodRemoval: PlayableCharacter #insideRoom: stamp: 'mf 12/10/2020 20:11:18'!
insideRoom: aRoom 
	
	^ aRoom isValidCoordinate: position.!
!PlayableCharacter methodsFor: 'room' stamp: 'mf 12/10/2020 20:11:42' prior: 50876530!
inBoundsOfRoom: aRoom 
	
	^ room isValidCoordinate: position.! !
!PlayableCharacter methodsFor: 'room' stamp: 'mf 12/10/2020 20:11:53'!
inBoundsOfRoom 
	
	^ room isValidCoordinate: position.! !
!Room methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 20:11:53' prior: 50876535!
assertCharacterInRoomBounds: aPlayableCharacter 
	
	(aPlayableCharacter inBoundsOfRoom) ifFalse: [ self error: self class invalidInitialPositionForCharacterErrorDescription ]! !

!methodRemoval: PlayableCharacter #inBoundsOfRoom: stamp: 'mf 12/10/2020 20:11:53'!
inBoundsOfRoom: aRoom 
	
	^ room isValidCoordinate: position.!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 20:12:11'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 20:12:11'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:12:11'!
ERROR!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 20:12:11'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 20:12:11'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 20:12:11'!
ERROR!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 20:12:11'!
ERROR!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 20:12:11'!
ERROR!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 20:12:11'!
ERROR!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 20:12:11'!
ERROR!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:12:11'!
ERROR!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:12:42'!
ERROR!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:12:42'!
ERROR!

l!

t!
!PlayableCharacter methodsFor: 'assertions' stamp: 'mf 12/10/2020 20:13:52' prior: 50876517!
assertMovementIsInRoomBounds: aCoordinate
	
	(room isNil not and: [ (room assertCharacterInRoomBounds: self) not ]) ifTrue: [ self error: self class playableCharacterCannotMoveOutOfBoundsErrorDescription ].! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 20:13:56'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 20:13:56'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:13:56'!
ERROR!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 20:13:56'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 20:13:56'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 20:13:56'!
ERROR!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 20:13:56'!
ERROR!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 20:13:56'!
ERROR!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 20:13:56'!
ERROR!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 20:13:56'!
ERROR!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:13:56'!
ERROR!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:14:07'!
ERROR!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 20:14:56'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 20:14:56'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:14:56'!
ERROR!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 20:14:56'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 20:14:56'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 20:14:56'!
ERROR!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 20:14:56'!
ERROR!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 20:14:56'!
ERROR!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 20:14:56'!
ERROR!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 20:14:56'!
ERROR!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:14:56'!
ERROR!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:15:00'!
ERROR!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:15:13'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mf 12/10/2020 20:16:03'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mf 12/10/2020 20:16:03'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mf 12/10/2020 20:16:03'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mf 12/10/2020 20:16:03'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mf 12/10/2020 20:16:03'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mf 12/10/2020 20:16:03'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mf 12/10/2020 20:16:03'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mf 12/10/2020 20:16:03'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mf 12/10/2020 20:16:03'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mf 12/10/2020 20:16:03'!
PASSED!

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 20:16:03'!
ERROR!

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 20:16:03'!
ERROR!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mf 12/10/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mf 12/10/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mf 12/10/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mf 12/10/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mf 12/10/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mf 12/10/2020 20:16:43'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mf 12/10/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mf 12/10/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mf 12/10/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mf 12/10/2020 20:16:44'!
PASSED!

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 20:16:46'!
ERROR!

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 20:16:46'!
ERROR!

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 20:17:06'!
ERROR!

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 20:17:06'!
ERROR!
!PlayableCharacter methodsFor: 'room' stamp: 'mf 12/10/2020 20:18:36'!
inBoundsOfRoom: aRoom 
	
	^ room isValidCoordinate: position.! !
!Room methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 20:18:37' prior: 50876558!
assertCharacterInRoomBounds: aPlayableCharacter 
	
	(aPlayableCharacter inBoundsOfRoom: aRoom) ifFalse: [ self error: self class invalidInitialPositionForCharacterErrorDescription ]! !

!methodRemoval: PlayableCharacter #inBoundsOfRoom stamp: 'mf 12/10/2020 20:18:37'!
inBoundsOfRoom 
	
	^ room isValidCoordinate: position.!
!PlayableCharacter methodsFor: 'room' stamp: 'mf 12/10/2020 20:18:49' prior: 50876805!
inBoundsOfRoom: aRoom 
	
	^ aRoom isValidCoordinate: position.! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mf 12/10/2020 20:18:55'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mf 12/10/2020 20:18:55'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mf 12/10/2020 20:18:55'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mf 12/10/2020 20:18:55'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mf 12/10/2020 20:18:55'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mf 12/10/2020 20:18:55'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mf 12/10/2020 20:18:55'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mf 12/10/2020 20:18:55'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mf 12/10/2020 20:18:55'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mf 12/10/2020 20:18:55'!
PASSED!

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 20:18:55'!
ERROR!

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 20:18:55'!
ERROR!
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 20:19:24' prior: 50876810!
assertCharacterInRoomBounds: aPlayableCharacter 
	
	(aPlayableCharacter inBoundsOfRoom: self) ifFalse: [ self error: self class invalidInitialPositionForCharacterErrorDescription ]! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mf 12/10/2020 20:19:27'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mf 12/10/2020 20:19:27'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mf 12/10/2020 20:19:27'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mf 12/10/2020 20:19:27'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mf 12/10/2020 20:19:27'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mf 12/10/2020 20:19:27'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mf 12/10/2020 20:19:27'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mf 12/10/2020 20:19:27'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mf 12/10/2020 20:19:27'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mf 12/10/2020 20:19:27'!
PASSED!

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 20:19:27'!
PASSED!

----SNAPSHOT----(10 December 2020 20:19:37) CuisUniversity-4384.image priorSource: 17405121!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 20:19:47'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 20:19:47'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:19:47'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 20:19:47'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 20:19:47'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 20:19:47'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 20:19:47'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 20:19:47'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 20:19:47'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 20:19:47'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:19:47'!
ERROR!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:19:47'!
ERROR!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:19:55'!
ERROR!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:19:55'!
ERROR!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:20:04'!
ERROR!
!PlayableCharacter methodsFor: 'assertions' stamp: 'mf 12/10/2020 20:22:32' prior: 50876615!
assertMovementIsInRoomBounds: aCoordinate
	
	(room isNil not and: [ self inBoundsOfCurrentRoom ]) ifTrue: [ self error: self class playableCharacterCannotMoveOutOfBoundsErrorDescription ].! !

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:22:40'!
ERROR!
!PlayableCharacter methodsFor: 'room' stamp: 'mf 12/10/2020 20:22:49'!
inBoundsOfCurrentRoom
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'room' stamp: 'mf 12/10/2020 20:23:00' prior: 50876989!
inBoundsOfCurrentRoom
	
	self inBoundsOfRoom: room! !

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:23:02'!
FAILURE!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 20:23:12'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 20:23:12'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:23:12'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 20:23:12'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 20:23:12'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 20:23:12'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 20:23:12'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 20:23:12'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 20:23:12'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 20:23:12'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:23:12'!
FAILURE!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:23:12'!
FAILURE!
!PlayableCharacter methodsFor: 'assertions' stamp: 'mf 12/10/2020 20:25:02' prior: 50876977!
assertMovementIsInRoomBounds: aCoordinate
	
	(room isNil not and: [ self inBoundsOfCurrentRoom not ]) ifTrue: [ self error: self class playableCharacterCannotMoveOutOfBoundsErrorDescription ].! !

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:25:04'!
ERROR!
!PlayableCharacter methodsFor: 'room' stamp: 'mf 12/10/2020 20:25:47' prior: 50876994!
inBoundsOfCurrentRoom
	
	^self inBoundsOfRoom: room! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 20:25:53'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 20:25:53'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:25:53'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 20:25:54'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 20:25:54'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 20:25:54'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 20:25:54'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 20:25:54'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 20:25:54'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 20:25:54'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:25:54'!
FAILURE!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:25:54'!
FAILURE!

self inBoundsOfCurrentRoom!
!PlayableCharacter methodsFor: 'assertions' stamp: 'mf 12/10/2020 20:27:41' prior: 50877043!
assertMovementIsInRoomBounds: aCoordinate
	
	(room isNil not and: [ (room isValidCoordinate: aCoordinate) not ]) ifTrue: [ self error: self class playableCharacterCannotMoveOutOfBoundsErrorDescription ].! !

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:27:45'!
ERROR!
!PlayableCharacter methodsFor: 'assertions' stamp: 'mf 12/10/2020 20:28:25' prior: 50877102!
assertMovementIsInRoomBounds: aCoordinate
	
	(room isNil not and: [ (room isValidCoordinate: aCoordinate) not ]) ifTrue: [ self error: room class playableCharacterCannotMoveOutOfBoundsErrorDescription ].! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 20:28:30'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 20:28:30'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:28:30'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 20:28:30'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 20:28:30'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 20:28:31'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 20:28:31'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 20:28:31'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 20:28:31'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 20:28:31'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:28:31'!
PASSED!
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 20:28:54'!
test11playableCharacterCantMoveBackwardsOutOfBounds
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	
	self should: [aPlayableCharacter moveBackward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterCannotMoveOutOfBoundsErrorDescription! !

!methodRemoval: RoomTest #test11playableCharacterCantMoveOutOfBounds stamp: 'mf 12/10/2020 20:28:54'!
test11playableCharacterCantMoveOutOfBounds
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	
	self should: [aPlayableCharacter moveBackward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterCannotMoveOutOfBoundsErrorDescription!
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 20:29:06'!
test11playableCharacterCantMoveForwardsOutOfBounds
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	
	self should: [aPlayableCharacter moveBackward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterCannotMoveOutOfBoundsErrorDescription! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 20:29:16'!
test12playableCharacterCantMoveForwardsOutOfBounds
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	
	self should: [aPlayableCharacter moveBackward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterCannotMoveOutOfBoundsErrorDescription! !

!methodRemoval: RoomTest #test11playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 20:29:16'!
test11playableCharacterCantMoveForwardsOutOfBounds
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	
	self should: [aPlayableCharacter moveBackward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterCannotMoveOutOfBoundsErrorDescription!
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 20:29:34' prior: 50877206!
test12playableCharacterCantMoveForwardsOutOfBounds
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	aPlayableCharacter rotateLeft.
	
	self should: [aPlayableCharacter moveBackward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterCannotMoveOutOfBoundsErrorDescription! !

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 20:29:41'!
FAILURE!

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 20:29:41'!
FAILURE!
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 20:30:00' prior: 50877236!
test12playableCharacterCantMoveForwardsOutOfBounds
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	aPlayableCharacter rotateLeft.
	
	self should: [aPlayableCharacter moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterCannotMoveOutOfBoundsErrorDescription! !

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 20:30:05'!
FAILURE!

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 20:30:05'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'mf 12/10/2020 20:30:35' prior: 50869279!
moveForward
	
	self assertMovementIsInRoomBounds: (position + heading forwardPoint).
	position := position + heading forwardPoint! !

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 20:30:37'!
PASSED!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 20:30:39'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 20:30:39'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:30:39'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 20:30:39'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 20:30:39'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 20:30:39'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 20:30:39'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 20:30:39'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 20:30:39'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 20:30:39'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveBackwardsOutOfBounds stamp: 'mf 12/10/2020 20:30:39'!
PASSED!

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 20:30:39'!
PASSED!
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 20:31:08'!
test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory emptyRoomForPlayableCharacter: aPlayableCharacter.
	aPlayableCharacter rotateLeft.
	
	self should: [aPlayableCharacter moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterCannotMoveOutOfBoundsErrorDescription! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 20:31:52' prior: 50877334!
test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory fullRoomForPlayableCharacter: aPlayableCharacter.
	
	self should: [aPlayableCharacter moveForward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterCannotMoveIntoCellOcupiedByStageObjectErrorDescription! !

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:32:00'!
ERROR!

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:32:00'!
ERROR!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 20:32:08'!
fullRoomForPlayableCharacter: aPlayableCharacter 
	self shouldBeImplemented.! !

| b|
b := 0.
10 timesRepeat: [ :a | b := b + a ]!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 20:37:41' prior: 50877375!
fullRoomForPlayableCharacter: aPlayableCharacter 
	| stageObjects |
	stageObjects := Dictionary with: 0@1 -> self portableObject with: 1@0 -> self portableObject .
	^Room withRows: self numberOfRows withColumns: self numberOfColumns andStageObjects: stageObjects for: aPlayableCharacter.! !

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:37:49'!
ERROR!

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:37:49'!
ERROR!
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 20:38:01'!
playableCharacterCannotMoveIntoCellOcupiedByStageObjectErrorDescription
	self shouldBeImplemented.! !
!Room class methodsFor: 'error messages' stamp: 'mf 12/10/2020 20:38:21' prior: 50877403!
playableCharacterCannotMoveIntoCellOcupiedByStageObjectErrorDescription
	
	^'Playable character cannot move into object' ! !

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:38:22'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'mf 12/10/2020 20:39:13' prior: 50877282!
moveForward
	
	self assertMovementIsInRoomBounds: (position + heading forwardPoint).
	self assertMovementDoesntCollideWithObject: (position + heading forwardPoint)..
	position := position + heading forwardPoint! !

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:39:16'!
ERROR!
!PlayableCharacter methodsFor: 'assertions' stamp: 'mf 12/10/2020 20:39:21'!
assertMovementDoesntCollideWithObject: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 20:40:50'!
isCharacterStandingOnObject: aPlayableCharacter

	^ aPlayableCharacter isAtAny: stageObjectCollection keys! !
!Room methodsFor: 'assertions' stamp: 'mf 12/10/2020 20:40:50' prior: 50875009!
assertCharacterDoesntStandOnObject: aPlayableCharacter 
	
	(self isCharacterStandingOnObject: aPlayableCharacter) ifTrue: [ self error: self class playerCannotStandOnStageObjectErrorDescription ].! !
!PlayableCharacter methodsFor: 'assertions' stamp: 'mf 12/10/2020 20:41:59' prior: 50877434!
assertMovementDoesntCollideWithObject: aCoordinate

	(room isNil not and: [ room isCellOccupied: aCoordinate ]) ifTrue: [ self error: room class playableCharacterCannotMoveIntoCellOcupiedByStageObjectErrorDescription ]
	! !

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:42:02'!
ERROR!
!Room methodsFor: 'coordinate management' stamp: 'mf 12/10/2020 20:42:13'!
isCellOccupied: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'coordinate management' stamp: 'mf 12/10/2020 20:43:27' prior: 50877469!
isCellOccupied: aCoordinate
	
	stageObjectCollection keys anySatisfy: [ :aCell | aCell = aCoordinate ].! !
!Room methodsFor: 'coordinate management' stamp: 'mf 12/10/2020 20:43:30' prior: 50877474!
isCellOccupied: aCoordinate
	
	^ stageObjectCollection keys anySatisfy: [ :aCell | aCell = aCoordinate ].! !

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:43:32'!
PASSED!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 20:43:35'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 20:43:35'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:43:35'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 20:43:35'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 20:43:35'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 20:43:35'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 20:43:35'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 20:43:35'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 20:43:35'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 20:43:35'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveBackwardsOutOfBounds stamp: 'mf 12/10/2020 20:43:35'!
PASSED!

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 20:43:35'!
PASSED!

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:43:35'!
PASSED!
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 20:44:13'!
test13playableCharacterCantMoveBackwardsIntoCellOcupiedByStageObject
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory fullRoomForPlayableCharacter: aPlayableCharacter.
	
	aPlayableCharacter rotateLeft.
	self should: [aPlayableCharacter moveBackward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterCannotMoveIntoCellOcupiedByStageObjectErrorDescription! !
!RoomTest methodsFor: 'tests - room with character' stamp: 'mf 12/10/2020 20:44:26'!
test14playableCharacterCantMoveBackwardsIntoCellOcupiedByStageObject
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory fullRoomForPlayableCharacter: aPlayableCharacter.
	
	aPlayableCharacter rotateLeft.
	self should: [aPlayableCharacter moveBackward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterCannotMoveIntoCellOcupiedByStageObjectErrorDescription! !

!methodRemoval: RoomTest #test13playableCharacterCantMoveBackwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:44:26'!
test13playableCharacterCantMoveBackwardsIntoCellOcupiedByStageObject
	
	| aPlayableCharacter room |
	aPlayableCharacter := factory playableCharacter.
	room := factory fullRoomForPlayableCharacter: aPlayableCharacter.
	
	aPlayableCharacter rotateLeft.
	self should: [aPlayableCharacter moveBackward.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Room playableCharacterCannotMoveIntoCellOcupiedByStageObjectErrorDescription!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 20:44:29'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 20:44:29'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:44:29'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 20:44:29'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 20:44:29'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 20:44:29'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 20:44:29'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 20:44:29'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 20:44:29'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 20:44:29'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveBackwardsOutOfBounds stamp: 'mf 12/10/2020 20:44:29'!
PASSED!

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 20:44:29'!
PASSED!

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:44:29'!
PASSED!

!testRun: #RoomTest #test14playableCharacterCantMoveBackwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:44:29'!
FAILURE!

!testRun: #RoomTest #test14playableCharacterCantMoveBackwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:44:29'!
FAILURE!
!PlayableCharacter methodsFor: 'moving' stamp: 'mf 12/10/2020 20:45:03' prior: 50876301!
moveBackward
	
	self assertMovementIsInRoomBounds: (position - heading forwardPoint).
	self assertMovementDoesntCollideWithObject: (position - heading forwardPoint).
	position := position - heading forwardPoint ! !

!testRun: #RoomTest #test14playableCharacterCantMoveBackwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:45:05'!
PASSED!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 20:45:08'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 20:45:08'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:45:08'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 20:45:08'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 20:45:08'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 20:45:08'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 20:45:08'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 20:45:08'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 20:45:09'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 20:45:09'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveBackwardsOutOfBounds stamp: 'mf 12/10/2020 20:45:09'!
PASSED!

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 20:45:09'!
PASSED!

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:45:09'!
PASSED!

!testRun: #RoomTest #test14playableCharacterCantMoveBackwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:45:09'!
PASSED!
!PlayableCharacter methodsFor: 'moving' stamp: 'mf 12/10/2020 20:45:35'!
assertValidMovement

	self assertMovementIsInRoomBounds: (position - heading forwardPoint).
	self assertMovementDoesntCollideWithObject: (position - heading forwardPoint)! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mf 12/10/2020 20:45:35' prior: 50877642!
moveBackward
	
	self assertValidMovement.
	position := position - heading forwardPoint ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mf 12/10/2020 20:46:09'!
assertValidMovement: aNewCoordinate

	self assertMovementIsInRoomBounds: (position - heading forwardPoint).
	self assertMovementDoesntCollideWithObject: (position - heading forwardPoint)! !
!PlayableCharacter methodsFor: 'as yet unclassified' stamp: 'mf 12/10/2020 20:46:09' prior: 50877714!
moveBackward
	
	self assertValidMovement: aNewCoordinate.
	position := position - heading forwardPoint ! !

!methodRemoval: PlayableCharacter #assertValidMovement stamp: 'mf 12/10/2020 20:46:10'!
assertValidMovement

	self assertMovementIsInRoomBounds: (position - heading forwardPoint).
	self assertMovementDoesntCollideWithObject: (position - heading forwardPoint)!
!PlayableCharacter methodsFor: 'moving' stamp: 'mf 12/10/2020 20:46:23' prior: 50877720!
assertValidMovement: aNewCoordinate

	self assertMovementIsInRoomBounds: aNewCoordinate.
	self assertMovementDoesntCollideWithObject: aNewCoordinate! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mf 12/10/2020 20:46:33' prior: 50877730!
moveBackward
	
	self assertValidMovement: position - heading forwardPoint.
	position := position - heading forwardPoint ! !
!PlayableCharacter methodsFor: 'moving' stamp: 'mf 12/10/2020 20:46:49' prior: 50877420!
moveForward
	
	self assertValidMovement: (position + heading forwardPoint).
	position := position + heading forwardPoint! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mf 12/10/2020 20:46:57'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mf 12/10/2020 20:46:57'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mf 12/10/2020 20:46:57'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mf 12/10/2020 20:46:57'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mf 12/10/2020 20:46:57'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mf 12/10/2020 20:46:57'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mf 12/10/2020 20:46:57'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mf 12/10/2020 20:46:57'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mf 12/10/2020 20:46:57'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mf 12/10/2020 20:46:57'!
PASSED!

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 20:46:57'!
PASSED!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 20:47:01'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 20:47:01'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 20:47:01'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 20:47:01'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 20:47:01'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 20:47:01'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 20:47:01'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 20:47:01'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 20:47:01'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 20:47:01'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveBackwardsOutOfBounds stamp: 'mf 12/10/2020 20:47:01'!
PASSED!

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 20:47:01'!
PASSED!

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:47:01'!
PASSED!

!testRun: #RoomTest #test14playableCharacterCantMoveBackwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 20:47:01'!
PASSED!

TestCase subclass: #StageObjectTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #StageObjectTest category: 'ISW1-2020-2C-2doParcial' stamp: 'mf 12/10/2020 20:48:05'!
TestCase subclass: #StageObjectTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'mf 12/10/2020 20:50:16'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 20:49:58'!
test01aNonPortableObjectCanBeEmpty
	
	self assert: NonPortableObject new isEmpty! !

!testRun: #StageObjectTest #test01aNonPortableObjectCanBeEmpty stamp: 'mf 12/10/2020 20:50:20'!
ERROR!

!testRun: #StageObjectTest #test01aNonPortableObjectCanBeEmpty stamp: 'mf 12/10/2020 20:50:20'!
ERROR!
!NonPortableObject methodsFor: 'testing' stamp: 'mf 12/10/2020 20:50:29'!
isEmpty
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'testing' stamp: 'mf 12/10/2020 20:50:34' prior: 50877891!
isEmpty
	
	^true! !

!testRun: #StageObjectTest #test01aNonPortableObjectCanBeEmpty stamp: 'mf 12/10/2020 20:50:42'!
PASSED!

!testRun: #StageObjectTest #test01aNonPortableObjectCanBeEmpty stamp: 'mf 12/10/2020 20:50:44'!
PASSED!
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 20:52:04'!
test02aNonPortableObjectCanStoreAPortableObject
	
	| nonPortable |
	nonPortable := NonPortableObject new.
	nonPortable add: factory portableObject.
	self assert: nonPortable isEmpty not.! !
!StageObjectTest methodsFor: 'setup' stamp: 'mf 12/10/2020 20:52:24' overrides: 16896425!
initialize
	
	factory := TestObjectFactory new.! !

!testRun: #StageObjectTest #test02aNonPortableObjectCanStoreAPortableObject stamp: 'mf 12/10/2020 20:52:29'!
ERROR!

!testRun: #StageObjectTest #test02aNonPortableObjectCanStoreAPortableObject stamp: 'mf 12/10/2020 20:52:29'!
ERROR!
!NonPortableObject methodsFor: 'adding' stamp: 'mf 12/10/2020 20:52:44'!
add: aPointsPortableObject 
	self shouldBeImplemented.! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'mf 12/10/2020 20:53:16'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'storedObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'adding' stamp: 'mf 12/10/2020 20:53:15' prior: 50877926!
add: aStageObject 
	
	storedObjects add: aStageObject! !

!testRun: #StageObjectTest #test02aNonPortableObjectCanStoreAPortableObject stamp: 'mf 12/10/2020 20:53:19'!
ERROR!
!NonPortableObject methodsFor: 'initialization' stamp: 'mf 12/10/2020 20:53:51' overrides: 16896425!
initialize
	
	storedObjects := OrderedCollection new.! !

!testRun: #StageObjectTest #test01aNonPortableObjectCanBeEmpty stamp: 'mf 12/10/2020 20:53:55'!
PASSED!

!testRun: #StageObjectTest #test02aNonPortableObjectCanStoreAPortableObject stamp: 'mf 12/10/2020 20:53:55'!
FAILURE!

!testRun: #StageObjectTest #test02aNonPortableObjectCanStoreAPortableObject stamp: 'mf 12/10/2020 20:53:55'!
FAILURE!
!NonPortableObject methodsFor: 'testing' stamp: 'mf 12/10/2020 20:54:12' prior: 50877895!
isEmpty
	
	^ storedObjects isEmpty.! !
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 20:55:01' prior: 50877905!
test02aNonPortableObjectCanStoreAPortableObject
	
	| nonPortable objectToAdd |
	nonPortable := NonPortableObject new.
	objectToAdd := factory portableObject.
	nonPortable add: objectToAdd .
	self assert: nonPortable isEmpty not.
	self assert: nonPortable includes: objectToAdd.! !

!testRun: #StageObjectTest #test02aNonPortableObjectCanStoreAPortableObject stamp: 'mf 12/10/2020 20:55:03'!
ERROR!

!testRun: #StageObjectTest #test02aNonPortableObjectCanStoreAPortableObject stamp: 'mf 12/10/2020 20:55:03'!
ERROR!
!NonPortableObject methodsFor: 'accessing' stamp: 'mf 12/10/2020 20:55:08'!
includes: aPointsPortableObject 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'accessing' stamp: 'mf 12/10/2020 20:55:29' prior: 50877988!
includes: aStageObject 
	
	^ storedObjects includes: aStageObject! !

!testRun: #StageObjectTest #test02aNonPortableObjectCanStoreAPortableObject stamp: 'mf 12/10/2020 20:55:31'!
PASSED!

!testRun: #StageObjectTest #test01aNonPortableObjectCanBeEmpty stamp: 'mf 12/10/2020 20:55:33'!
PASSED!

!testRun: #StageObjectTest #test02aNonPortableObjectCanStoreAPortableObject stamp: 'mf 12/10/2020 20:55:33'!
PASSED!
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 20:56:06'!
test03aNonPortableObjectIncludesPortableObjectInsideANonPortableObject
	
	| nonPortable objectToAdd |
	nonPortable := NonPortableObject new.
	objectToAdd := factory portableObject.
	nonPortable add: objectToAdd .
	self assert: nonPortable isEmpty not.
	self assert: nonPortable includes: objectToAdd.! !
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 20:57:59' prior: 50878008!
test03aNonPortableObjectIncludesPortableObjectInsideANonPortableObject
	
	| nonPortableRoot nonPortableInside objectToAdd |
	nonPortableRoot := NonPortableObject new.
	nonPortableInside := NonPortableObject new.
	objectToAdd := factory portableObject.
	nonPortableInside add: objectToAdd.
	nonPortableRoot add: nonPortableInside.
	self assert: nonPortableRoot isEmpty not.
	self assert: nonPortableRoot includes: objectToAdd.! !
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 20:58:00' prior: 50878021!
test03aNonPortableObjectIncludesPortableObjectInsideANonPortableObject
	
	| nonPortableRoot nonPortableInside objectToAdd |
	nonPortableRoot := NonPortableObject new.
	nonPortableInside := NonPortableObject new.
	objectToAdd := factory portableObject.
	nonPortableInside add: objectToAdd.
	nonPortableRoot add: nonPortableInside.
	
	self assert: nonPortableRoot isEmpty not.
	self assert: nonPortableRoot includes: objectToAdd.! !

!testRun: #StageObjectTest #test03aNonPortableObjectIncludesPortableObjectInsideANonPortableObject stamp: 'mf 12/10/2020 20:58:02'!
FAILURE!

!testRun: #StageObjectTest #test03aNonPortableObjectIncludesPortableObjectInsideANonPortableObject stamp: 'mf 12/10/2020 20:58:02'!
FAILURE!
!NonPortableObject methodsFor: 'accessing' stamp: 'mf 12/10/2020 21:00:02' prior: 50877993!
includes: aStageObject 
	
	^ storedObjects anySatisfy: [ :anIncludedStageObject | anIncludedStageObject = aStageObject 
		or: [ anIncludedStageObject includes: aStageObject ] ]! !
!PortableObject methodsFor: 'accessing' stamp: 'mf 12/10/2020 21:00:25'!
includes: aStageObject
	
	^false.! !

!testRun: #StageObjectTest #test01aNonPortableObjectCanBeEmpty stamp: 'mf 12/10/2020 21:00:28'!
PASSED!

!testRun: #StageObjectTest #test02aNonPortableObjectCanStoreAPortableObject stamp: 'mf 12/10/2020 21:00:28'!
PASSED!

!testRun: #StageObjectTest #test03aNonPortableObjectIncludesPortableObjectInsideANonPortableObject stamp: 'mf 12/10/2020 21:00:28'!
PASSED!
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 21:01:53'!
test04aNonPortableCanRemoveIncludedPortableObject
	
	| nonPortable objectToAdd |
	nonPortable := NonPortableObject new.
	objectToAdd := factory portableObject.
	nonPortable add: objectToAdd.
	nonPortable remove: objectToAdd.
	
	self assert: nonPortable isEmpty.
	self assert: nonPortable includes: objectToAdd not.! !
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 21:01:59' prior: 50878087!
test04aNonPortableCanRemoveIncludedPortableObject
	
	| nonPortable objectToAdd |
	nonPortable := NonPortableObject new.
	objectToAdd := factory portableObject.
	nonPortable add: objectToAdd.
	nonPortable remove: objectToAdd.
	
	self assert: nonPortable isEmpty.
	self assert: (nonPortable includes: objectToAdd) not.! !
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 21:02:07' prior: 50878038!
test03aNonPortableObjectIncludesPortableObjectInsideANonPortableObject
	
	| nonPortableRoot nonPortableInside objectToAdd |
	nonPortableRoot := NonPortableObject new.
	nonPortableInside := NonPortableObject new.
	objectToAdd := factory portableObject.
	nonPortableInside add: objectToAdd.
	nonPortableRoot add: nonPortableInside.
	
	self assert: nonPortableRoot isEmpty not.
	self assert: (nonPortableRoot includes: objectToAdd).! !
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 21:02:13' prior: 50877969!
test02aNonPortableObjectCanStoreAPortableObject
	
	| nonPortable objectToAdd |
	nonPortable := NonPortableObject new.
	objectToAdd := factory portableObject.
	nonPortable add: objectToAdd .
	self assert: nonPortable isEmpty not.
	self assert: (nonPortable includes: objectToAdd).! !

!testRun: #StageObjectTest #test04aNonPortableCanRemoveIncludedPortableObject stamp: 'mf 12/10/2020 21:02:17'!
ERROR!

!testRun: #StageObjectTest #test04aNonPortableCanRemoveIncludedPortableObject stamp: 'mf 12/10/2020 21:02:17'!
ERROR!
!NonPortableObject methodsFor: 'accessing' stamp: 'mf 12/10/2020 21:02:24'!
remove: aPointsPortableObject 
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'accessing' stamp: 'mf 12/10/2020 21:02:48' prior: 50878149!
remove: aPortableObject 
	
	storedObjects remove: aPortableObject.! !

!testRun: #StageObjectTest #test04aNonPortableCanRemoveIncludedPortableObject stamp: 'mf 12/10/2020 21:02:49'!
PASSED!

!testRun: #StageObjectTest #test04aNonPortableCanRemoveIncludedPortableObject stamp: 'mf 12/10/2020 21:02:50'!
PASSED!
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 21:03:10'!
test05aNonPortableCanRemoveIncludedPortableObjectInsideNonPortableObject
	
	| nonPortable objectToAdd |
	nonPortable := NonPortableObject new.
	objectToAdd := factory portableObject.
	nonPortable add: objectToAdd.
	nonPortable remove: objectToAdd.
	
	self assert: nonPortable isEmpty.
	self assert: (nonPortable includes: objectToAdd) not.! !
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 21:03:42' prior: 50878166!
test05aNonPortableCanRemoveIncludedPortableObjectInsideNonPortableObject
	
	| nonPortableRoot nonPortableInside objectToAdd |
	nonPortableRoot := NonPortableObject new.
	nonPortableInside := NonPortableObject new.
	objectToAdd := factory portableObject.
	nonPortableInside add: objectToAdd.
	nonPortableRoot add: nonPortableInside.
	
	nonPortableRoot remove: objectToAdd.
	
	self assert: (nonPortableRoot includes: objectToAdd) not.! !

!testRun: #StageObjectTest #test05aNonPortableCanRemoveIncludedPortableObjectInsideNonPortableObject stamp: 'mf 12/10/2020 21:03:44'!
ERROR!

!testRun: #StageObjectTest #test05aNonPortableCanRemoveIncludedPortableObjectInsideNonPortableObject stamp: 'mf 12/10/2020 21:03:44'!
ERROR!
!NonPortableObject methodsFor: 'accessing' stamp: 'mf 12/10/2020 21:07:05' prior: 50878154!
remove: aPortableObject 
	
	storedObjects do: 
	[ :aStageObject | (aStageObject = aPortableObject) ifTrue:  [ storedObjects remove: aPortableObject ]
										        ifFalse: [ aStageObject remove: aPortableObject ] ]! !
!NonPortableObject methodsFor: 'accessing' stamp: 'mf 12/10/2020 21:07:54' prior: 50878206!
remove: aPortableObject 
	
	self aPortableObjectContainer remove: aPortableObject! !

!testRun: #StageObjectTest #test05aNonPortableCanRemoveIncludedPortableObjectInsideNonPortableObject stamp: 'mf 12/10/2020 21:07:58'!
ERROR!
!NonPortableObject methodsFor: 'accessing - private' stamp: 'mf 12/10/2020 21:08:12'!
aPortableObjectContainer
	self shouldBeImplemented.! !
!NonPortableObject methodsFor: 'accessing - private' stamp: 'mf 12/10/2020 21:08:20' prior: 50878226!
aPortableObjectContainer
	
	! !
!NonPortableObject methodsFor: 'accessing' stamp: 'mf 12/10/2020 21:08:35' prior: 50878216!
remove: aPortableObject 
	
	self aPortableObjectContainer: aPortableObject remove: aPortableObject! !
!NonPortableObject methodsFor: 'accessing - private' stamp: 'mf 12/10/2020 21:08:53'!
aPortableObjectContainer: aPortableObject
	
	! !

!methodRemoval: NonPortableObject #aPortableObjectContainer stamp: 'mf 12/10/2020 21:08:57'!
aPortableObjectContainer
	
	!
!NonPortableObject methodsFor: 'accessing - private' stamp: 'mf 12/10/2020 21:09:14' prior: 50878241!
aPortableObjectContainer: aPortableObject
	! !
!NonPortableObject methodsFor: 'accessing - private' stamp: 'mf 12/10/2020 21:11:49' prior: 50878250!
aPortableObjectContainer: aPortableObject
	
	^ (storedObjects select: [ :anIncludedStageObject | anIncludedStageObject includes: aPortableObject ]) at: 1! !
!NonPortableObject methodsFor: 'accessing' stamp: 'mf 12/10/2020 21:12:02' prior: 50878235!
remove: aPortableObject 
	
	(self aPortableObjectContainer: aPortableObject) remove: aPortableObject! !

!testRun: #StageObjectTest #test01aNonPortableObjectCanBeEmpty stamp: 'mf 12/10/2020 21:12:06'!
PASSED!

!testRun: #StageObjectTest #test02aNonPortableObjectCanStoreAPortableObject stamp: 'mf 12/10/2020 21:12:06'!
PASSED!

!testRun: #StageObjectTest #test03aNonPortableObjectIncludesPortableObjectInsideANonPortableObject stamp: 'mf 12/10/2020 21:12:06'!
PASSED!

!testRun: #StageObjectTest #test04aNonPortableCanRemoveIncludedPortableObject stamp: 'mf 12/10/2020 21:12:06'!
ERROR!

!testRun: #StageObjectTest #test05aNonPortableCanRemoveIncludedPortableObjectInsideNonPortableObject stamp: 'mf 12/10/2020 21:12:06'!
ERROR!
!NonPortableObject methodsFor: 'accessing' stamp: 'mf 12/10/2020 21:12:56' prior: 50878263!
remove: aPortableObject 
	
	storedObjects remove: aPortableObject 
				ifAbsent: [	 (self aPortableObjectContainer: aPortableObject) remove: aPortableObject ]! !
!PortableObject methodsFor: 'accessing' stamp: 'mf 12/10/2020 21:13:12'!
remove! !
!PortableObject methodsFor: 'accessing' stamp: 'mf 12/10/2020 21:13:34'!
remove: aStageObject! !

!methodRemoval: PortableObject #remove stamp: 'mf 12/10/2020 21:13:34'!
remove!

!testRun: #StageObjectTest #test01aNonPortableObjectCanBeEmpty stamp: 'mf 12/10/2020 21:13:41'!
PASSED!

!testRun: #StageObjectTest #test02aNonPortableObjectCanStoreAPortableObject stamp: 'mf 12/10/2020 21:13:41'!
PASSED!

!testRun: #StageObjectTest #test03aNonPortableObjectIncludesPortableObjectInsideANonPortableObject stamp: 'mf 12/10/2020 21:13:41'!
PASSED!

!testRun: #StageObjectTest #test04aNonPortableCanRemoveIncludedPortableObject stamp: 'mf 12/10/2020 21:13:41'!
PASSED!

!testRun: #StageObjectTest #test05aNonPortableCanRemoveIncludedPortableObjectInsideNonPortableObject stamp: 'mf 12/10/2020 21:13:41'!
PASSED!
!PlayableCharacterTest methodsFor: 'tests - in room' stamp: 'mf 12/10/2020 21:15:34'!
test12playableCharacterCannotTakeNonPortableObject
	
	! !
!PlayableCharacterTest methodsFor: 'tests - in room' stamp: 'mf 12/10/2020 21:17:28' prior: 50878326!
test12playableCharacterCannotTakeNonPortableObject
	
	| playableCharacter house |

	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West .
	house := NonPortableObject named: 'Paper' weighing: 1.
	
	self should: [playableCharacter take: house ]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayableCharacter cannotTakeNonPortableObjectErrorDescription.
	
	self assert: (playableCharacter backpackIncludes: house) not! !

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 21:17:32'!
PASSED!

!testRun: #PlayableCharacterTest #test12playableCharacterCannotTakeNonPortableObject stamp: 'mf 12/10/2020 21:17:32'!
ERROR!

!testRun: #PlayableCharacterTest #test12playableCharacterCannotTakeNonPortableObject stamp: 'mf 12/10/2020 21:17:32'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests - in room' stamp: 'mf 12/10/2020 21:17:48' prior: 50878331!
test12playableCharacterCannotTakeNonPortableObject
	
	| playableCharacter house |

	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West .
	house := NonPortableObject named: 'Paper'.
	
	self should: [playableCharacter take: house ]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayableCharacter cannotTakeNonPortableObjectErrorDescription.
	
	self assert: (playableCharacter backpackIncludes: house) not! !

!testRun: #PlayableCharacterTest #test12playableCharacterCannotTakeNonPortableObject stamp: 'mf 12/10/2020 21:17:50'!
ERROR!

!testRun: #PlayableCharacterTest #test12playableCharacterCannotTakeNonPortableObject stamp: 'mf 12/10/2020 21:17:50'!
ERROR!
!NonPortableObject class methodsFor: 'instance creation' stamp: 'mf 12/10/2020 21:17:55'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!NonPortableObject class methodsFor: 'instance creation' stamp: 'mf 12/10/2020 21:18:02' prior: 50878387!
named: aString 

	^self new initializeNamed: aString ! !

!testRun: #PlayableCharacterTest #test12playableCharacterCannotTakeNonPortableObject stamp: 'mf 12/10/2020 21:18:03'!
ERROR!

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'mf 12/10/2020 21:18:13'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'storedObjects string'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'mf 12/10/2020 21:18:13'!
initializeNamed: aString 
	self shouldBeImplemented.
	string := aString.! !
!NonPortableObject methodsFor: 'initialization' stamp: 'mf 12/10/2020 21:18:15' prior: 50878413!
initializeNamed: aString 
	
	string := aString.! !

!classDefinition: #NonPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'mf 12/10/2020 21:18:29'!
StageObject subclass: #NonPortableObject
	instanceVariableNames: 'storedObjects string name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NonPortableObject methodsFor: 'initialization' stamp: 'mf 12/10/2020 21:18:27' prior: 50878419!
initializeNamed: aName
	
	name := aName! !

!testRun: #PlayableCharacterTest #test12playableCharacterCannotTakeNonPortableObject stamp: 'mf 12/10/2020 21:18:30'!
ERROR!
!PlayableCharacter class methodsFor: 'error messages' stamp: 'mf 12/10/2020 21:18:43'!
cannotTakeNonPortableObjectErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'error messages' stamp: 'mf 12/10/2020 21:19:04' prior: 50878441!
cannotTakeNonPortableObjectErrorDescription
	
	^'Playable character cannot take non portable object'.! !

!testRun: #PlayableCharacterTest #test12playableCharacterCannotTakeNonPortableObject stamp: 'mf 12/10/2020 21:19:06'!
ERROR!
!NonPortableObject methodsFor: 'adding' stamp: 'mf 12/10/2020 21:21:08'!
assertCanAddTo: aBackpack
	
	aBackpack assertCanAddNonPortableObject: self.
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'mf 12/10/2020 21:21:16'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'mf 12/10/2020 21:21:16'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'mf 12/10/2020 21:21:16'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'mf 12/10/2020 21:21:16'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'mf 12/10/2020 21:21:16'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'mf 12/10/2020 21:21:16'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'mf 12/10/2020 21:21:16'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'mf 12/10/2020 21:21:16'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'mf 12/10/2020 21:21:16'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'mf 12/10/2020 21:21:16'!
PASSED!

!testRun: #PlayableCharacterTest #test11playableCharacterCanBeInsideRoom stamp: 'mf 12/10/2020 21:21:16'!
PASSED!

!testRun: #PlayableCharacterTest #test12playableCharacterCannotTakeNonPortableObject stamp: 'mf 12/10/2020 21:21:16'!
ERROR!

!testRun: #PlayableCharacterTest #test12playableCharacterCannotTakeNonPortableObject stamp: 'mf 12/10/2020 21:21:16'!
ERROR!
!Backpack methodsFor: 'assertions' stamp: 'mf 12/10/2020 21:21:30'!
assertCanAddNonPortableObject: aNonPortableObject 
	self shouldBeImplemented.! !
!PlayableCharacterTest methodsFor: 'tests - in room' stamp: 'mf 12/10/2020 21:22:33' prior: 50878361!
test12playableCharacterCannotTakeNonPortableObject
	
	| playableCharacter house |

	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West .
	house := NonPortableObject named: 'Paper'.
	
	self should: [playableCharacter take: house ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Backpack cannotAddNonPortableObjectErrorDescription.
	
	self assert: (playableCharacter backpackIncludes: house) not! !
!Backpack methodsFor: 'assertions' stamp: 'mf 12/10/2020 21:22:59' prior: 50878512!
assertCanAddNonPortableObject: aNonPortableObject 
	
	self error: self class cannotAddNonPortableObjectErrorDescription! !

!testRun: #PlayableCharacterTest #test12playableCharacterCannotTakeNonPortableObject stamp: 'mf 12/10/2020 21:23:01'!
ERROR!
!Backpack class methodsFor: 'error messages' stamp: 'mf 12/10/2020 21:23:10'!
cannotAddNonPortableObjectErrorDescription
	self shouldBeImplemented.! !
!Backpack class methodsFor: 'error messages' stamp: 'mf 12/10/2020 21:23:23' prior: 50878547!
cannotAddNonPortableObjectErrorDescription
	
	^'Cannot add non Portable object'.! !

!testRun: #PlayableCharacterTest #test12playableCharacterCannotTakeNonPortableObject stamp: 'mf 12/10/2020 21:23:26'!
FAILURE!
!PlayableCharacterTest methodsFor: 'tests - in room' stamp: 'mf 12/10/2020 21:23:42' prior: 50878518!
test12playableCharacterCannotTakeNonPortableObject
	
	| playableCharacter house |

	playableCharacter := PlayableCharacter named: 'Luigi' using: factory defaultBackpack at: 2@2 heading: #West .
	house := NonPortableObject named: 'Paper'.
	
	self should: [playableCharacter take: house ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Backpack cannotAddNonPortableObjectErrorDescription .
	
	self assert: (playableCharacter backpackIncludes: house) not! !

!testRun: #PlayableCharacterTest #test12playableCharacterCannotTakeNonPortableObject stamp: 'mf 12/10/2020 21:23:44'!
PASSED!

!methodRemoval: PlayableCharacter class #cannotTakeNonPortableObjectErrorDescription stamp: 'mf 12/10/2020 21:23:49'!
cannotTakeNonPortableObjectErrorDescription
	
	^'Playable character cannot take non portable object'.!

----SNAPSHOT----(10 December 2020 21:24:11) CuisUniversity-4384.image priorSource: 17448723!
!RoomTest methodsFor: 'tests - room with non portable' stamp: 'mf 12/10/2020 21:26:17'!
test15roomIncludesObjectsInsideNonPortableObject
	
	! !
!RoomTest methodsFor: 'tests - room with non portable' stamp: 'mf 12/10/2020 21:27:34' prior: 50878595!
test15roomIncludesObjectsInsideNonPortableObject
	
	| room aNonPortableObject aDiamondSword |
	aNonPortableObject := NonPortableObject name: 'House'.
	
	aDiamondSword := factory portableObject.
	aNonPortableObject add: aDiamondSword.
	
	room := Room withRows: factory numberOfRows withColumns: factory numberOfColumns andStageObjects: (Dictionary with: 1@1 -> aNonPortableObject ) for: 	factory playableCharacter .
	
	self assert: (room includes: aDiamondSword at: 1@1)! !

!testRun: #RoomTest #test15roomIncludesObjectsInsideNonPortableObject stamp: 'mf 12/10/2020 21:27:37'!
ERROR!

!testRun: #RoomTest #test15roomIncludesObjectsInsideNonPortableObject stamp: 'mf 12/10/2020 21:27:37'!
ERROR!
!RoomTest methodsFor: 'tests - room with non portable' stamp: 'mf 12/10/2020 21:27:47' prior: 50878600!
test15roomIncludesObjectsInsideNonPortableObject
	
	| room aNonPortableObject aDiamondSword |
	aNonPortableObject := NonPortableObject named: 'House'.
	
	aDiamondSword := factory portableObject.
	aNonPortableObject add: aDiamondSword.
	
	room := Room withRows: factory numberOfRows withColumns: factory numberOfColumns andStageObjects: (Dictionary with: 1@1 -> aNonPortableObject ) for: 	factory playableCharacter .
	
	self assert: (room includes: aDiamondSword at: 1@1)! !

!testRun: #RoomTest #test15roomIncludesObjectsInsideNonPortableObject stamp: 'mf 12/10/2020 21:27:49'!
PASSED!
!Room methodsFor: 'testing' stamp: 'mf 12/10/2020 21:28:41' prior: 50873158!
includes: aStageObject at: aCoordinate

	^(stageObjectCollection at: aCoordinate) = aStageObject.
	! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 21:28:44'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 21:28:45'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 21:28:45'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 21:28:45'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 21:28:45'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 21:28:45'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 21:28:45'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 21:28:45'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 21:28:45'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 21:28:45'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveBackwardsOutOfBounds stamp: 'mf 12/10/2020 21:28:45'!
PASSED!

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 21:28:45'!
PASSED!

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 21:28:45'!
PASSED!

!testRun: #RoomTest #test14playableCharacterCantMoveBackwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 21:28:45'!
PASSED!

!testRun: #RoomTest #test15roomIncludesObjectsInsideNonPortableObject stamp: 'mf 12/10/2020 21:28:45'!
FAILURE!

!testRun: #RoomTest #test15roomIncludesObjectsInsideNonPortableObject stamp: 'mf 12/10/2020 21:28:45'!
FAILURE!
!NonPortableObject methodsFor: 'initialization' stamp: 'mf 12/10/2020 21:29:41' prior: 50877949 overrides: 16896425!
initialize
	
	! !
!NonPortableObject methodsFor: 'initialization' stamp: 'mf 12/10/2020 21:29:44' prior: 50878433!
initializeNamed: aName
	
	storedObjects := OrderedCollection new.
	name := aName! !

!methodRemoval: NonPortableObject #initialize stamp: 'mf 12/10/2020 21:29:47'!
initialize
	
	!
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 21:30:12' prior: 50877879!
test01aNonPortableObjectCanBeEmpty
	
	self assert: (NonPortableObject named: 'House') isEmpty! !
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 21:30:21' prior: 50878130!
test02aNonPortableObjectCanStoreAPortableObject
	
	| nonPortable objectToAdd |
	nonPortable := (NonPortableObject named: 'House').
	objectToAdd := factory portableObject.
	nonPortable add: objectToAdd .
	self assert: nonPortable isEmpty not.
	self assert: (nonPortable includes: objectToAdd).! !
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 21:30:39' prior: 50878113!
test03aNonPortableObjectIncludesPortableObjectInsideANonPortableObject
	
	| nonPortableRoot nonPortableInside objectToAdd |
	nonPortableRoot := (NonPortableObject named: 'House').
	nonPortableInside := (NonPortableObject named: 'Wardrobe').
	objectToAdd := factory portableObject.
	nonPortableInside add: objectToAdd.
	nonPortableRoot add: nonPortableInside.
	
	self assert: nonPortableRoot isEmpty not.
	self assert: (nonPortableRoot includes: objectToAdd).! !
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 21:30:44' prior: 50878100!
test04aNonPortableCanRemoveIncludedPortableObject
	
	| nonPortable objectToAdd |
	nonPortable := (NonPortableObject named: 'House').
	objectToAdd := factory portableObject.
	nonPortable add: objectToAdd.
	nonPortable remove: objectToAdd.
	
	self assert: nonPortable isEmpty.
	self assert: (nonPortable includes: objectToAdd) not.! !
!StageObjectTest methodsFor: 'tests' stamp: 'mf 12/10/2020 21:30:53' prior: 50878180!
test05aNonPortableCanRemoveIncludedPortableObjectInsideNonPortableObject
	
	| nonPortableRoot nonPortableInside objectToAdd |
	nonPortableRoot := (NonPortableObject named: 'House').
	nonPortableInside := (NonPortableObject named: 'Wardrobe').
	objectToAdd := factory portableObject.
	nonPortableInside add: objectToAdd.
	nonPortableRoot add: nonPortableInside.
	
	nonPortableRoot remove: objectToAdd.
	
	self assert: (nonPortableRoot includes: objectToAdd) not.! !

!testRun: #StageObjectTest #test01aNonPortableObjectCanBeEmpty stamp: 'mf 12/10/2020 21:30:58'!
PASSED!

!testRun: #StageObjectTest #test02aNonPortableObjectCanStoreAPortableObject stamp: 'mf 12/10/2020 21:30:58'!
PASSED!

!testRun: #StageObjectTest #test03aNonPortableObjectIncludesPortableObjectInsideANonPortableObject stamp: 'mf 12/10/2020 21:30:58'!
PASSED!

!testRun: #StageObjectTest #test04aNonPortableCanRemoveIncludedPortableObject stamp: 'mf 12/10/2020 21:30:58'!
PASSED!

!testRun: #StageObjectTest #test05aNonPortableCanRemoveIncludedPortableObjectInsideNonPortableObject stamp: 'mf 12/10/2020 21:30:58'!
PASSED!

!testRun: #RoomTest #test15roomIncludesObjectsInsideNonPortableObject stamp: 'mf 12/10/2020 21:31:17'!
FAILURE!

!testRun: #RoomTest #test15roomIncludesObjectsInsideNonPortableObject stamp: 'mf 12/10/2020 21:31:17'!
FAILURE!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 21:31:21'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 21:31:21'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 21:31:21'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 21:31:21'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 21:31:21'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 21:31:21'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 21:31:21'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 21:31:21'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 21:31:21'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 21:31:21'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveBackwardsOutOfBounds stamp: 'mf 12/10/2020 21:31:21'!
PASSED!

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 21:31:21'!
PASSED!

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 21:31:21'!
PASSED!

!testRun: #RoomTest #test14playableCharacterCantMoveBackwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 21:31:21'!
PASSED!

!testRun: #RoomTest #test15roomIncludesObjectsInsideNonPortableObject stamp: 'mf 12/10/2020 21:31:21'!
FAILURE!

!testRun: #RoomTest #test15roomIncludesObjectsInsideNonPortableObject stamp: 'mf 12/10/2020 21:31:21'!
FAILURE!
!Room methodsFor: 'testing' stamp: 'mf 12/10/2020 21:32:19' prior: 50878646!
includes: aStageObject at: aCoordinate

	^(stageObjectCollection at: aCoordinate) = aStageObject or: [ (stageObjectCollection at: aCoordinate) includes: aStageObject].
	! !

!testRun: #RoomTest #test15roomIncludesObjectsInsideNonPortableObject stamp: 'mf 12/10/2020 21:32:22'!
PASSED!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 21:32:24'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 21:32:24'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 21:32:24'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 21:32:24'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 21:32:24'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 21:32:24'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 21:32:24'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 21:32:24'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 21:32:24'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 21:32:24'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveBackwardsOutOfBounds stamp: 'mf 12/10/2020 21:32:24'!
PASSED!

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 21:32:24'!
PASSED!

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 21:32:24'!
PASSED!

!testRun: #RoomTest #test14playableCharacterCantMoveBackwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 21:32:24'!
PASSED!

!testRun: #RoomTest #test15roomIncludesObjectsInsideNonPortableObject stamp: 'mf 12/10/2020 21:32:24'!
PASSED!
!RoomTest methodsFor: 'tests - character take' stamp: 'mf 12/10/2020 21:37:18'!
test16aCharacterCanTakePortableObjectInRange
	
	| room character object |
	object := factory portableObject.
	character := factory playableCharacter .
	room := Room withRows: factory numberOfRows 
				withColumns: factory numberOfColumns 
				andStageObjects: (Dictionary with: 1@0 ->  object)
				for: character.
	character take: object.
	self assert: (room includes: object at: 1@0) not.! !

!testRun: #RoomTest #test16aCharacterCanTakePortableObjectInRange stamp: 'mf 12/10/2020 21:37:25'!
FAILURE!

!testRun: #RoomTest #test16aCharacterCanTakePortableObjectInRange stamp: 'mf 12/10/2020 21:37:25'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'mf 12/10/2020 21:38:38' prior: 50869293!
take: aPortableObject

	backpack add: aPortableObject.! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'mf 12/10/2020 21:39:27' prior: 50878960!
take: aPortableObject

	backpack add: aPortableObject.
	room isNil not ifTrue: [ room remove: aPortableObject ]! !

!testRun: #RoomTest #test16aCharacterCanTakePortableObjectInRange stamp: 'mf 12/10/2020 21:39:31'!
ERROR!

!testRun: #RoomTest #test16aCharacterCanTakePortableObjectInRange stamp: 'mf 12/10/2020 21:39:31'!
ERROR!
!Room methodsFor: 'object management' stamp: 'mf 12/10/2020 21:41:41'!
remove: aStageObject
	
	stageObjectCollection remove: aStageObject! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 21:41:49'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 21:41:49'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 21:41:49'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 21:41:49'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 21:41:49'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 21:41:49'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 21:41:49'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 21:41:50'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 21:41:50'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 21:41:50'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveBackwardsOutOfBounds stamp: 'mf 12/10/2020 21:41:50'!
PASSED!

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 21:41:50'!
PASSED!

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 21:41:50'!
PASSED!

!testRun: #RoomTest #test14playableCharacterCantMoveBackwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 21:41:50'!
PASSED!

!testRun: #RoomTest #test15roomIncludesObjectsInsideNonPortableObject stamp: 'mf 12/10/2020 21:41:50'!
PASSED!

!testRun: #RoomTest #test16aCharacterCanTakePortableObjectInRange stamp: 'mf 12/10/2020 21:41:50'!
ERROR!

!testRun: #RoomTest #test16aCharacterCanTakePortableObjectInRange stamp: 'mf 12/10/2020 21:41:50'!
ERROR!
!Room methodsFor: 'object management' stamp: 'mf 12/10/2020 21:42:45' prior: 50878978!
remove: aStageObject
	
	stageObjectCollection removeKey: (stageObjectCollection keyAtValue: aStageObject)! !

!testRun: #RoomTest #test16aCharacterCanTakePortableObjectInRange stamp: 'mf 12/10/2020 21:42:46'!
ERROR!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 21:43:08'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 21:43:08'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 21:43:08'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 21:43:08'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 21:43:08'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 21:43:08'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 21:43:08'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 21:43:08'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 21:43:08'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 21:43:08'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveBackwardsOutOfBounds stamp: 'mf 12/10/2020 21:43:08'!
PASSED!

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 21:43:08'!
PASSED!

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 21:43:09'!
PASSED!

!testRun: #RoomTest #test14playableCharacterCantMoveBackwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 21:43:09'!
PASSED!

!testRun: #RoomTest #test15roomIncludesObjectsInsideNonPortableObject stamp: 'mf 12/10/2020 21:43:09'!
PASSED!

!testRun: #RoomTest #test16aCharacterCanTakePortableObjectInRange stamp: 'mf 12/10/2020 21:43:09'!
ERROR!

!testRun: #RoomTest #test16aCharacterCanTakePortableObjectInRange stamp: 'mf 12/10/2020 21:43:09'!
ERROR!

stageObjectCollection keyAtValue: aStageObject!

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 21:44:04'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 21:44:05'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 21:44:05'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 21:44:05'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 21:44:05'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 21:44:05'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 21:44:05'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 21:44:05'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 21:44:05'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 21:44:05'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveBackwardsOutOfBounds stamp: 'mf 12/10/2020 21:44:05'!
PASSED!

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 21:44:05'!
PASSED!

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 21:44:05'!
PASSED!

!testRun: #RoomTest #test14playableCharacterCantMoveBackwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 21:44:05'!
PASSED!

!testRun: #RoomTest #test15roomIncludesObjectsInsideNonPortableObject stamp: 'mf 12/10/2020 21:44:05'!
PASSED!

!testRun: #RoomTest #test16aCharacterCanTakePortableObjectInRange stamp: 'mf 12/10/2020 21:44:05'!
ERROR!

!testRun: #RoomTest #test16aCharacterCanTakePortableObjectInRange stamp: 'mf 12/10/2020 21:44:05'!
ERROR!

!testRun: #RoomTest #test16aCharacterCanTakePortableObjectInRange stamp: 'mf 12/10/2020 21:44:20'!
ERROR!

!testRun: #RoomTest #test16aCharacterCanTakePortableObjectInRange stamp: 'mf 12/10/2020 21:44:20'!
ERROR!
!Room methodsFor: 'testing' stamp: 'mf 12/10/2020 21:45:16' prior: 50878873!
includes: aStageObject at: aCoordinate

	^(stageObjectCollection at: aCoordinate ifAbsent: [ ^false ]) = aStageObject or: [ (stageObjectCollection at: aCoordinate) includes: aStageObject].
	! !

!testRun: #RoomTest #test16aCharacterCanTakePortableObjectInRange stamp: 'mf 12/10/2020 21:45:17'!
PASSED!

!testRun: #RoomTest #test16aCharacterCanTakePortableObjectInRange stamp: 'mf 12/10/2020 21:45:20'!
PASSED!
!RoomTest methodsFor: 'tests - character take' stamp: 'mf 12/10/2020 21:46:52'!
test16aCharacterCannotTakePortableObjectOutOfRange
	
	| room character object |
	object := factory portableObject.
	character := factory playableCharacter .
	room := Room withRows: factory numberOfRows 
				withColumns: factory numberOfColumns 
				andStageObjects: (Dictionary with: 2@0 ->  object)
				for: character.
	self should: [character take: object.]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayableCharacter cannotTakeObjectOutOfRangeErrorDescription.
		
	self assert: (room includes: object at: 2@0)! !
!RoomTest methodsFor: 'tests - character take' stamp: 'mf 12/10/2020 21:47:02'!
test17aCharacterCannotTakePortableObjectOutOfRange
	
	| room character object |
	object := factory portableObject.
	character := factory playableCharacter .
	room := Room withRows: factory numberOfRows 
				withColumns: factory numberOfColumns 
				andStageObjects: (Dictionary with: 2@0 ->  object)
				for: character.
	self should: [character take: object.]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayableCharacter cannotTakeObjectOutOfRangeErrorDescription.
		
	self assert: (room includes: object at: 2@0)! !

!methodRemoval: RoomTest #test16aCharacterCannotTakePortableObjectOutOfRange stamp: 'mf 12/10/2020 21:47:02'!
test16aCharacterCannotTakePortableObjectOutOfRange
	
	| room character object |
	object := factory portableObject.
	character := factory playableCharacter .
	room := Room withRows: factory numberOfRows 
				withColumns: factory numberOfColumns 
				andStageObjects: (Dictionary with: 2@0 ->  object)
				for: character.
	self should: [character take: object.]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayableCharacter cannotTakeObjectOutOfRangeErrorDescription.
		
	self assert: (room includes: object at: 2@0)!

!testRun: #RoomTest #test17aCharacterCannotTakePortableObjectOutOfRange stamp: 'mf 12/10/2020 21:47:03'!
ERROR!

!testRun: #RoomTest #test17aCharacterCannotTakePortableObjectOutOfRange stamp: 'mf 12/10/2020 21:47:03'!
ERROR!
!PlayableCharacter class methodsFor: 'error messages' stamp: 'mf 12/10/2020 21:47:13'!
cannotTakeObjectOutOfRangeErrorDescription
	self shouldBeImplemented.! !
!PlayableCharacter class methodsFor: 'error messages' stamp: 'mf 12/10/2020 21:47:30' prior: 50879262!
cannotTakeObjectOutOfRangeErrorDescription
	
	^'Cannot take an object that is out of range'.! !

!testRun: #RoomTest #test17aCharacterCannotTakePortableObjectOutOfRange stamp: 'mf 12/10/2020 21:47:31'!
FAILURE!
!PlayableCharacter methodsFor: 'taking objects' stamp: 'mf 12/10/2020 21:48:28' prior: 50878965!
take: aPortableObject
	
	self assertPortableObjectInRange: aPortableObject.
	backpack add: aPortableObject.
	room isNil not ifTrue: [ room remove: aPortableObject ]! !

!testRun: #RoomTest #test17aCharacterCannotTakePortableObjectOutOfRange stamp: 'mf 12/10/2020 21:48:32'!
ERROR!
!PlayableCharacter methodsFor: 'assertions' stamp: 'mf 12/10/2020 21:48:37'!
assertPortableObjectInRange: aPointsPortableObject 
	self shouldBeImplemented.! !
!PlayableCharacter methodsFor: 'assertions' stamp: 'mf 12/10/2020 21:50:50' prior: 50879290!
assertPortableObjectInRange: aPointsPortableObject 
	
	room isNil ifFalse: [ room isPortableObject: aPointsPortableObject inRangeOf: position ].! !

!testRun: #RoomTest #test17aCharacterCannotTakePortableObjectOutOfRange stamp: 'mf 12/10/2020 21:50:52'!
ERROR!
!Room methodsFor: 'testing' stamp: 'mf 12/10/2020 21:51:01'!
isPortableObject: aPointsPortableObject inRangeOf: aPoint 
	self shouldBeImplemented.! !
!Room methodsFor: 'testing' stamp: 'mf 12/10/2020 21:54:39' prior: 50879307!
isPortableObject: aPortableObject inRangeOf: aCoordinate
	
	(( (self includes: aPortableObject at: aCoordinate + 0@1) or:
	[self includes: aPortableObject at: aCoordinate + 1@0] ) or:
	[self includes: aPortableObject at: aCoordinate - 1@0] ) or:	
	[self includes: aPortableObject at: aCoordinate - 0@1]
	! !
!Room methodsFor: 'testing' stamp: 'mf 12/10/2020 21:54:47' prior: 50879313!
isPortableObject: aPortableObject inRangeOf: aCoordinate
	
	^ (( (self includes: aPortableObject at: aCoordinate + 0@1) or:
	   [self includes: aPortableObject at: aCoordinate + 1@0] ) or:
	   [self includes: aPortableObject at: aCoordinate - 1@0] ) or:	
	   [self includes: aPortableObject at: aCoordinate - 0@1]
	! !

!testRun: #RoomTest #test17aCharacterCannotTakePortableObjectOutOfRange stamp: 'mf 12/10/2020 21:54:49'!
ERROR!
!Room methodsFor: 'testing' stamp: 'mf 12/10/2020 21:55:07' prior: 50879326!
isPortableObject: aPortableObject inRangeOf: aCoordinate
	
	^ (( (self includes: aPortableObject at: aCoordinate + (0@1)) or:
	   [self includes: aPortableObject at: aCoordinate + (1@0)] ) or:
	   [self includes: aPortableObject at: aCoordinate - (1@0)] ) or:	
	   [self includes: aPortableObject at: aCoordinate - (0@1)]
	! !

!testRun: #RoomTest #test17aCharacterCannotTakePortableObjectOutOfRange stamp: 'mf 12/10/2020 21:55:08'!
FAILURE!
!PlayableCharacter methodsFor: 'assertions' stamp: 'mf 12/10/2020 21:56:24' prior: 50879296!
assertPortableObjectInRange: aPointsPortableObject 
	
	room isNil ifFalse: [ (room isPortableObject: aPointsPortableObject inRangeOf: position) ifFalse:
		[self error: self class cannotTakeObjectOutOfRangeErrorDescription ]].! !

!testRun: #RoomTest #test01aRoomCantHaveNonPositiveCoordinates stamp: 'mf 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test02aRoomCantHaveNonIntegerCoordinates stamp: 'mf 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test03aRoomCanHaveStageObjects stamp: 'mf 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test04aRoomCantHaveStageObjectsOutOfBoundsRowsWise stamp: 'mf 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test05aRoomCantHaveStageObjectsOutOfBoundsColumnsWise stamp: 'mf 12/10/2020 21:56:28'!
PASSED!

!testRun: #RoomTest #test06aRoomCanHaveAPlayableCharacter stamp: 'mf 12/10/2020 21:56:29'!
PASSED!

!testRun: #RoomTest #test07aRoomCantHaveAPlayableCharacterOutOfBounds stamp: 'mf 12/10/2020 21:56:29'!
PASSED!

!testRun: #RoomTest #test08aRoomCantHaveAPlayableAndStageObjectInSameCell stamp: 'mf 12/10/2020 21:56:29'!
PASSED!

!testRun: #RoomTest #test09playableCharacterCanMoveForwardInsideRoom stamp: 'mf 12/10/2020 21:56:29'!
PASSED!

!testRun: #RoomTest #test10playableCharacterCanRotateInsideRoom stamp: 'mf 12/10/2020 21:56:29'!
PASSED!

!testRun: #RoomTest #test11playableCharacterCantMoveBackwardsOutOfBounds stamp: 'mf 12/10/2020 21:56:29'!
PASSED!

!testRun: #RoomTest #test12playableCharacterCantMoveForwardsOutOfBounds stamp: 'mf 12/10/2020 21:56:29'!
PASSED!

!testRun: #RoomTest #test13playableCharacterCantMoveForwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 21:56:29'!
PASSED!

!testRun: #RoomTest #test14playableCharacterCantMoveBackwardsIntoCellOcupiedByStageObject stamp: 'mf 12/10/2020 21:56:29'!
PASSED!

!testRun: #RoomTest #test15roomIncludesObjectsInsideNonPortableObject stamp: 'mf 12/10/2020 21:56:29'!
PASSED!

!testRun: #RoomTest #test16aCharacterCanTakePortableObjectInRange stamp: 'mf 12/10/2020 21:56:29'!
PASSED!

!testRun: #RoomTest #test17aCharacterCannotTakePortableObjectOutOfRange stamp: 'mf 12/10/2020 21:56:29'!
PASSED!
!RoomTest methodsFor: 'tests - character take' stamp: 'mf 12/10/2020 21:57:19'!
test18aCharacterCanTakePortableObjectInsideNonPortableObject
	
	| room character object |
	object := factory portableObject.
	character := factory playableCharacter .
	room := Room withRows: factory numberOfRows 
				withColumns: factory numberOfColumns 
				andStageObjects: (Dictionary with: 2@0 ->  object)
				for: character.
	self should: [character take: object.]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayableCharacter cannotTakeObjectOutOfRangeErrorDescription.
		
	self assert: (room includes: object at: 2@0)! !
!RoomTest methodsFor: 'tests - character take' stamp: 'mf 12/10/2020 21:57:45' prior: 50879429!
test18aCharacterCanTakePortableObjectInsideNonPortableObject
	
	| room character portableObject |
	portableObject := factory portableObject.
	character := factory playableCharacter .
	room := Room withRows: factory numberOfRows 
				withColumns: factory numberOfColumns 
				andStageObjects: (Dictionary with: 2@0 ->  portableObject)
				for: character.
	self should: [character take: portableObject.]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayableCharacter cannotTakeObjectOutOfRangeErrorDescription.
		
	self assert: (room includes: portableObject at: 2@0)! !
!RoomTest methodsFor: 'tests - character take' stamp: 'mf 12/10/2020 21:57:56' prior: 50879449!
test18aCharacterCanTakePortableObjectInsideNonPortableObject
	
	| room character portableObject nonPortableObject |
	portableObject := factory portableObject.
	character := factory playableCharacter .
	room := Room withRows: factory numberOfRows 
				withColumns: factory numberOfColumns 
				andStageObjects: (Dictionary with: 2@0 ->  portableObject)
				for: character.
	self should: [character take: portableObject.]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayableCharacter cannotTakeObjectOutOfRangeErrorDescription.
		
	self assert: (room includes: portableObject at: 2@0)! !
!RoomTest methodsFor: 'tests - character take' stamp: 'mf 12/10/2020 21:58:50' prior: 50879471!
test18aCharacterCanTakePortableObjectInsideNonPortableObject
	
	| room character portableObject nonPortableObject |
	portableObject := factory portableObject.
	nonPortableObject := NonPortableObject named: 'house'.
	nonPortableObject add: portableObject.
	
	character := factory playableCharacter .
	room := Room withRows: factory numberOfRows 
				withColumns: factory numberOfColumns 
				andStageObjects: (Dictionary with: 1@0 ->  nonPortableObject)
				for: character.
	self should: [character take: portableObject.]
		raise: Error - MessageNotUnderstood 
		withMessageText: PlayableCharacter cannotTakeObjectOutOfRangeErrorDescription.
		
	self assert: (room includes: portableObject at: 2@0)! !
!RoomTest methodsFor: 'tests - character take' stamp: 'mf 12/10/2020 21:59:15' prior: 50879493!
test18aCharacterCanTakePortableObjectInsideNonPortableObject
	
	| room character portableObject nonPortableObject |
	portableObject := factory portableObject.
	nonPortableObject := NonPortableObject named: 'house'.
	nonPortableObject add: portableObject.
	
	character := factory playableCharacter .
	room := Room withRows: factory numberOfRows 
				withColumns: factory numberOfColumns 
				andStageObjects: (Dictionary with: 1@0 ->  nonPortableObject)
				for: character.
				
	character take: portableObject.		
	self assert: (room includes: portableObject at: 1@0) not! !
!RoomTest methodsFor: 'tests - character take' stamp: 'mf 12/10/2020 21:59:38' prior: 50879518!
test18aCharacterCanTakePortableObjectInsideNonPortableObject
	
	| room character portableObject nonPortableObject |
	portableObject := factory portableObject.
	nonPortableObject := NonPortableObject named: 'house'.
	nonPortableObject add: portableObject.
	
	character := factory playableCharacter .
	room := Room withRows: factory numberOfRows 
				withColumns: factory numberOfColumns 
				andStageObjects: (Dictionary with: 1@0 ->  nonPortableObject)
				for: character.
				
	character take: portableObject.		
	self assert: (room includes: portableObject at: 1@0) not.
	self assert: (room includes: nonPortableObject at: 1@0)! !

!testRun: #RoomTest #test18aCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'mf 12/10/2020 21:59:41'!
ERROR!

!testRun: #RoomTest #test18aCharacterCanTakePortableObjectInsideNonPortableObject stamp: 'mf 12/10/2020 21:59:41'!
ERROR!
!Room methodsFor: 'object management' stamp: 'mf 12/10/2020 22:02:54' prior: 50879043!
remove: aStageObject
	
	stageObjectCollection removeKey: (stageObjectCollection keyAtValue: aStageObject 
				ifAbsent: [ self positionOfPortableObject: aStageObject ])! !

----SNAPSHOT----(10 December 2020 22:03:07) CuisUniversity-4384.image priorSource: 17502094!

----QUIT----(10 December 2020 22:03:13) CuisUniversity-4384.image priorSource: 17533675!