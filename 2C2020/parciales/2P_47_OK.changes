----STARTUP---- (10 December 2020 14:54:46) as C:\Users\Tink\Desktop\FCEN\Inge 1\CUIS\CuisUniversity-4384.image!


----End fileIn of \Users\Tink\Desktop\ISW1-2020-2C-2doParcial.st----!

TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 17:36:38'!
TestCase subclass: #RoomTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'no messages' stamp: 'MMA 12/10/2020 17:39:56'!
test01
	
	"room := Room withObjects: #().
	backpack := Backpack containingUpTo:  limitingPointsTo: 
	playableCharacter := PlayableCharacter named: 'aName' using:  at:  heading: 
	
	self assert: "! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 17:40:53' prior: 50868656!
test01
	
	"room := Room withObjects: #().
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at:  heading: 
	
	self assert: "! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 17:41:35' prior: 50868666!
test01
	
	"room := Room withObjects: #().
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North
	self assert: "! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 17:44:11'!
Object subclass: #Room
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 17:48:00' prior: 50868676!
test01
	"| room backpack playableCharacter|
	room := Room withSize: 1@1 withStageObjects: #().
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North.
	
	playableCharacter moveForward.
	
	self assert: playableCharacter "! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 17:48:58' prior: 50868693!
test01
	| room backpack playableCharacter|
	room := Room withSize: 1@1 withStageObjects: #().
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North.
	
	playableCharacter moveForward.
	
	self assert: (playableCharacter isAt: 0@1 heading: #North).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 17:49:23' prior: 50868707!
test01
	| room backpack playableCharacter|
	room := Room withSize: 1@1 withStageObjects: #().
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North inRoom: room.
	
	playableCharacter moveForward.
	
	self assert: (playableCharacter isAt: 0@1 heading: #North).! !

!testRun: #RoomTest #test01 stamp: 'MMA 12/10/2020 17:49:29'!
ERROR!
!Room class methodsFor: 'initialization' stamp: 'MMA 12/10/2020 17:49:49'!
withSize: aPoint withStageObjects: anArray 
	self shouldBeImplemented.! !
!Room class methodsFor: 'initialization' stamp: 'MMA 12/10/2020 17:51:26' prior: 50868737!
withSize: aSize withStageObjects: stageObjects 
	^ self new initializeWithSize: aSize andStageObjects: stageObjects! !

!testRun: #RoomTest #test01 stamp: 'MMA 12/10/2020 17:51:30'!
ERROR!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 17:51:39'!
Object subclass: #Room
	instanceVariableNames: 'size'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 17:51:39'!
Object subclass: #Room
	instanceVariableNames: 'size stageObjects_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'MMA 12/10/2020 17:51:39'!
initializeWithSize: aSize andStageObjects: stageObjects 
	self shouldBeImplemented.
	size := aSize.
	stageObjects_CHANGE_ME := stageObjects.! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 17:52:18'!
Object subclass: #Room
	instanceVariableNames: 'size stageObjects_CHANGE_ME objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'MMA 12/10/2020 17:52:16' prior: 50868767!
initializeWithSize: aSize andStageObjects: stageObjects 
	size := aSize.
	objects := stageObjects.! !

!testRun: #RoomTest #test01 stamp: 'MMA 12/10/2020 17:52:21'!
ERROR!
!Room methodsFor: 'initialization' stamp: 'MMA 12/10/2020 17:53:27' prior: 50868783!
initializeWithSize: aSize andStageObjects: aGroupOfStageObjects 
	size := aSize.
	"stageObjects := aGroupOfStageObjects."! !

Object subclass: #Room
	instanceVariableNames: 'size stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 17:53:37'!
Object subclass: #Room
	instanceVariableNames: 'size stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'MMA 12/10/2020 17:53:46' prior: 50868792!
initializeWithSize: aSize andStageObjects: aGroupOfStageObjects 
	size := aSize.
	stageObjects := aGroupOfStageObjects.! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'MMA 12/10/2020 17:54:45'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint inRoom: aRoom
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading inRoom: aRoom! !

!methodRemoval: PlayableCharacter class #named:using:at:heading:inRoom: stamp: 'MMA 12/10/2020 17:55:10'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint inRoom: aRoom
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading inRoom: aRoom!
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'MMA 12/10/2020 17:55:58'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint inRoom: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading ! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 17:55:58' prior: 50868110!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West inRoom: Room .
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 17:55:58' prior: 50867996!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North inRoom: Room .

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 17:55:58' prior: 50868008!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North inRoom: Room .

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 17:55:58' prior: 50868042!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East inRoom: Room .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 17:55:59' prior: 50868020!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North inRoom: Room .

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 17:55:59' prior: 50868070!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West inRoom: Room .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 17:55:59' prior: 50868097!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West inRoom: Room .
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 17:55:59' prior: 50868056!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South inRoom: Room .

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 17:55:59' prior: 50868031!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North inRoom: Room .

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 17:55:59' prior: 50868084!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X inRoom: Room ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !

!methodRemoval: PlayableCharacter class #named:using:at:heading: stamp: 'MMA 12/10/2020 17:55:59'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint 
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading !
!PlayableCharacter methodsFor: 'initialization' stamp: 'MMA 12/10/2020 17:57:21' prior: 50868332!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading! !
!PlayableCharacter methodsFor: 'initialization' stamp: 'MMA 12/10/2020 17:58:14'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading inRoom: aRoom  

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading! !
!PlayableCharacter class methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 17:58:14' prior: 50868840!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint inRoom: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading inRoom: Room ! !

!methodRemoval: PlayableCharacter #initializeNamed:using:at:heading: stamp: 'MMA 12/10/2020 17:58:14'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading!

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'MMA 12/10/2020 17:58:19'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'MMA 12/10/2020 17:58:19'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'MMA 12/10/2020 17:58:19'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'MMA 12/10/2020 17:58:19'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'MMA 12/10/2020 17:58:19'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'MMA 12/10/2020 17:58:19'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'MMA 12/10/2020 17:58:19'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'MMA 12/10/2020 17:58:19'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'MMA 12/10/2020 17:58:19'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'MMA 12/10/2020 17:58:19'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'MMA 12/10/2020 18:00:47'!
PASSED!

!testRun: #RoomTest #test01 stamp: 'MMA 12/10/2020 18:00:47'!
PASSED!

----End fileIn of C:\Users\Tink\Desktop\FCEN\Inge 1\CUIS\Packages\TerseGuide.pck.st----!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:05:19' prior: 50868721!
test01
	| room backpack playableCharacter stageObjects|
	stageObjects := Dictionary new; add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> 0@1.
	room := Room withSize: 2@2 withStageObjects: stageObjects.
	
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North inRoom: room.
	
	playableCharacter moveForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !

!testRun: #RoomTest #test01 stamp: 'MMA 12/10/2020 18:05:21'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:05:29' prior: 50872030!
test01
	| room backpack playableCharacter stageObjects|
	stageObjects := Dictionary new; add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: 2@2 withStageObjects: stageObjects.
	
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North inRoom: room.
	
	playableCharacter moveForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !

!testRun: #RoomTest #test01 stamp: 'MMA 12/10/2020 18:05:30'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:05:46' prior: 50872051!
test01
	| room backpack playableCharacter stageObjects|
	stageObjects := Dictionary new.
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: 2@2 withStageObjects: stageObjects.
	
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North inRoom: room.
	
	playableCharacter moveForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !

!testRun: #RoomTest #test01 stamp: 'MMA 12/10/2020 18:05:48'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:06:22'!
test01PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room backpack playableCharacter stageObjects|
	stageObjects := Dictionary new.
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: 2@2 withStageObjects: stageObjects.
	
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North inRoom: room.
	
	playableCharacter moveForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !

!methodRemoval: RoomTest #test01 stamp: 'MMA 12/10/2020 18:06:26'!
test01
	| room backpack playableCharacter stageObjects|
	stageObjects := Dictionary new.
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: 2@2 withStageObjects: stageObjects.
	
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North inRoom: room.
	
	playableCharacter moveForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:06:35' prior: 50872093!
test01PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room backpack playableCharacter stageObjects|
	
	stageObjects := Dictionary new.
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: 2@2 withStageObjects: stageObjects.
	
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North inRoom: room.
	
	playableCharacter moveForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !
!PlayableCharacter class methodsFor: 'instance creation' stamp: 'MMA 12/10/2020 18:09:46'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading! !

!methodRemoval: PlayableCharacter class #named:using:at:heading:inRoom: stamp: 'MMA 12/10/2020 18:09:50'!
named: aName using: aBackpack at: aPosition heading: aCardinalPoint inRoom: aRoom  
	
	| newHeading |

	newHeading := self headingFor: aCardinalPoint.
	
	^self new initializeNamed: aName using: aBackpack at: aPosition heading: newHeading inRoom: Room !
!PlayableCharacter methodsFor: 'initialization' stamp: 'MMA 12/10/2020 18:10:00'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading 

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading! !

!methodRemoval: PlayableCharacter #initializeNamed:using:at:heading:inRoom: stamp: 'MMA 12/10/2020 18:10:19'!
initializeNamed: aName using: aBackpack at: aPosition heading: aMarsRoverHeading inRoom: aRoom  

	name := aName.
	backpack := aBackpack.
	position := aPosition.
	heading := aMarsRoverHeading!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:11:23' overrides: 16927572!
setUp
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:12:02' prior: 50872193 overrides: 16927572!
setUp
	"stageObjects := Dictionary new.
	
	"! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:12:21' prior: 50872197 overrides: 16927572!
setUp
	"stageObjects := Dictionary new.
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	
	"! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:12:34' prior: 50872203 overrides: 16927572!
setUp
	"stageObjects := Dictionary new.
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North inRoom: room.

	"! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:13:29' prior: 50872211 overrides: 16927572!
setUp
	"stageObjects := Dictionary new.
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North."! !

TestCase subclass: #RoomTest
	instanceVariableNames: 'stageObjects '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

TestCase subclass: #RoomTest
	instanceVariableNames: 'objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 18:14:46'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'objects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:15:43' prior: 50872132!
test01PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room|
	
	"stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: 2@2 withStageObjects: stageObjects.
	
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North inRoom: room.
	
	playableCharacter moveForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North)."! !

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 18:16:17'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'objects stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 18:16:19'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'objects stageObjects backpack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 18:16:22'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'objects stageObjects backpack playableCharacter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:16:16' prior: 50872249!
test01PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room|
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: 2@2 withStageObjects: stageObjects.
	
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North inRoom: room.
	
	playableCharacter moveForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:16:46' prior: 50872293!
test01PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: 2@2 withStageObjects: stageObjects.
	
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North inRoom: room.
	
	playableCharacter moveForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:17:14' prior: 50872222 overrides: 16927572!
setUp
	stageObjects := Dictionary new.
	backpack := Backpack containingUpTo: 50 limitingPointsTo: 50.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:17:22' prior: 50872312!
test01PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: 2@2 withStageObjects: stageObjects.
	playableCharacter moveForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !

!testRun: #RoomTest #test01PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 18:18:34'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:18:53' prior: 50872331 overrides: 16927572!
setUp
	stageObjects := Dictionary new.
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North.! !

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 18:19:25'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'objects stageObjects backpack playableCharacter aPortableObject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:19:35' prior: 50872359 overrides: 16927572!
setUp
	stageObjects := Dictionary new.
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North.
	"aPortableObject := Porta"! !

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 18:19:56'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'objects stageObjects backpack playableCharacter aPortableObject aPointsPortableObject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:19:54' prior: 50872379 overrides: 16927572!
setUp
	stageObjects := Dictionary new.
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North.
	aPointsPortableObject := PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10! !

TestCase subclass: #RoomTest
	instanceVariableNames: 'objects stageObjects backpack playableCharacter aPointsPortableObject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 18:20:02'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'objects stageObjects backpack playableCharacter aPointsPortableObject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:20:43' prior: 50872400 overrides: 16927572!
setUp
	stageObjects := Dictionary new.
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North.
	aPointsPortableObject := PointsPortableObject named: 'anObjectName' weighing: 10 worth: 10! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:21:17' prior: 50872341!
test01PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: 2@2 withStageObjects: stageObjects forPlayer: playableCharacter .
	room moveForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:21:42' prior: 50872442!
test01PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: 2@2 withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room moveForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 18:22:04'!
Object subclass: #Room
	instanceVariableNames: 'size stageObjects player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'MMA 12/10/2020 18:22:02'!
initializeWithSize: aSize andStageObjects: aGroupOfStageObjects forPlayer: aPlayableCharacter
	size := aSize.
	stageObjects := aGroupOfStageObjects.
	player := aPlayableCharacter.! !

!methodRemoval: Room #initializeWithSize:andStageObjects: stamp: 'MMA 12/10/2020 18:22:19'!
initializeWithSize: aSize andStageObjects: aGroupOfStageObjects 
	size := aSize.
	stageObjects := aGroupOfStageObjects.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:22:39' prior: 50872456!
test01PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room moveForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !
!Room class methodsFor: 'initialization' stamp: 'MMA 12/10/2020 18:23:01'!
withSize: aSize withStageObjects: stageObjects forPlayer: aPlayableCharacter
	^ self new initializeWithSize: aSize andStageObjects: stageObjects forPlayer: aPlayableCharacter! !

!methodRemoval: Room class #withSize:withStageObjects: stamp: 'MMA 12/10/2020 18:23:03'!
withSize: aSize withStageObjects: stageObjects 
	^ self new initializeWithSize: aSize andStageObjects: stageObjects!

!testRun: #RoomTest #test01PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 18:23:09'!
ERROR!

!testRun: #RoomTest #test01PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 18:23:35'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:23:52' prior: 50872493!
test01PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !

!testRun: #RoomTest #test01PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 18:24:01'!
ERROR!
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 18:24:15'!
movePlayableCharacterForward
	self shouldBeImplemented.! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 18:24:27' prior: 50872546!
movePlayableCharacterForward
	player moveForward ! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 18:24:36' prior: 50872551!
movePlayableCharacterForward
	"player moveForward "! !

!testRun: #RoomTest #test01PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 18:24:40'!
PASSED!

!testRun: #RoomTest #test01PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 18:24:40'!
PASSED!
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 18:26:18' prior: 50872556!
movePlayableCharacterForward
	self validateMovingForward.
	player moveForward.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:27:12'!
test02PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !

!methodRemoval: RoomTest #test01PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 18:27:12'!
test01PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:27:30'!
test01PlayerCanNotMoveOutOfRoom
	| room |
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:27:53' prior: 50872602!
test01PlayerCanNotMoveOutOfRoom
	| room |
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	room movePlayableCharacterForward.

	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:30:15' prior: 50872616!
test01PlayerCanNotMoveOutOfRoom
	| room |
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementError.! !
!Room class methodsFor: 'initialization' stamp: 'MMA 12/10/2020 18:30:51'!
invalidMovementError
	^'invalid movement'! !

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:31:26'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:31:48' prior: 50872631!
test01PlayerCanNotMoveOutOfRoom
	| room |
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementError.! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 18:32:30'!
validateMovingForward
	player ! !

Object subclass: #Room
	instanceVariableNames: 'size stageObjects player playerPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #Room category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 18:33:15'!
Object subclass: #Room
	instanceVariableNames: 'size stageObjects player playerPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!Room methodsFor: 'initialization' stamp: 'MMA 12/10/2020 18:33:33' prior: 50872477!
initializeWithSize: aSize andStageObjects: aGroupOfStageObjects forPlayer: aPlayableCharacter
	size := aSize.
	stageObjects := aGroupOfStageObjects.
	player := aPlayableCharacter.
	playerPosition := 0@0.! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 18:35:17' prior: 50872568!
movePlayableCharacterForward
	self error: self class invalidMovementMessage 
	
	
	"self validateMovingForward.
	player moveForward."! !
!Room class methodsFor: 'initialization' stamp: 'MMA 12/10/2020 18:35:26'!
invalidMovementMessage
	^'invalid movement'! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:35:26' prior: 50872654!
test01PlayerCanNotMoveOutOfRoom
	| room |
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.! !

!methodRemoval: Room class #invalidMovementError stamp: 'MMA 12/10/2020 18:35:26'!
invalidMovementError
	^'invalid movement'!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:35:53' prior: 50872573!
test02PlayerCanNotMoveWhenDestinyPositionIsOccupied
	"| room |
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North)."! !

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:35:56'!
ERROR!
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 18:36:57' prior: 50872695!
movePlayableCharacterForward
	self validateMovingForward.
	player moveForward
	"playerPosition ."! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 18:37:50' prior: 50872743!
movePlayableCharacterForward
	self validateMovingForward.
	player moveForward.
	playerPosition := playerPosition + (0@1).! !

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:37:54'!
FAILURE!

!testRun: #RoomTest #test02PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 18:37:55'!
PASSED!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:37:55'!
FAILURE!
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 18:39:41' prior: 50872668!
validateMovingForward
	"playerPosition +"! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 18:41:36' prior: 50872766!
validateMovingForward
	playerPosition x < size x - 1 ifFalse: [self error: self class invalidMovementMessage ]! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 18:41:38' prior: 50872770!
validateMovingForward
	playerPosition x < size x - 1 ifFalse: [self error: self class invalidMovementMessage]! !

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:41:45'!
ERROR!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:41:45'!
ERROR!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:41:57'!
ERROR!
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 18:42:26' prior: 50872777!
validateMovingForward
	playerPosition x < (size x - 1) ifFalse: [self error: self class invalidMovementMessage]! !

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:42:29'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:42:53'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:42:53'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:43:51'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:43:51'!
FAILURE!

playerPosition x!

playerPosition x!

size x - 1!

size x - 1!

playerPosition!

playerPosition!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:45:23'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:45:40'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:45:40'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:46:10'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:46:10'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:46:29'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:46:32'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:46:32'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:46:51'!
FAILURE!
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 18:47:33' prior: 50872792!
validateMovingForward
	(playerPosition x < (size x - 1)) ifFalse: [self error: self class invalidMovementMessage]! !

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:47:37'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:47:37'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:47:59' prior: 50872707!
test01PlayerCanNotMoveOutOfRoom
	| room |
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.! !

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:48:01'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:48:01'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:48:07'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:48:07'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:49:31' prior: 50872857!
test01PlayerCanNotMoveOutOfRoom
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.! !

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:49:33'!
FAILURE!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:49:33'!
FAILURE!
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 18:50:33' prior: 50872844!
validateMovingForward
	(playerPosition y < (size y - 1)) ifFalse: [self error: self class invalidMovementMessage]! !

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:50:36'!
PASSED!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:50:37'!
PASSED!

!testRun: #RoomTest #test02PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 18:50:37'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:50:51'!
test01PlayerCanNotMoveOutOfRoomVertically
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.! !

!methodRemoval: RoomTest #test01PlayerCanNotMoveOutOfRoom stamp: 'MMA 12/10/2020 18:50:53'!
test01PlayerCanNotMoveOutOfRoom
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:51:33'!
test02PlayerCanNotMoveOutOfRoomHorizontally
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:51:41'!
test0nPlayerCanNotMoveWhenDestinyPositionIsOccupied
	"| room |
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North)."! !

!methodRemoval: RoomTest #test02PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 18:51:41'!
test02PlayerCanNotMoveWhenDestinyPositionIsOccupied
	"| room |
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North)."!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:52:37' prior: 50872941!
test02PlayerCanNotMoveOutOfRoomHorizontally
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	playableCharacter .
	
	room movePlayableCharacterForward.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 18:53:12' prior: 50872982!
test02PlayerCanNotMoveOutOfRoomHorizontally
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	playableCharacter rotateLeft.
	
	room movePlayableCharacterForward.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 18:54:35' prior: 50872902!
validateMovingForward
	
	(playerPosition y < (size y - 1)) ifFalse: [self error: self class invalidMovementMessage]! !
!PlayableCharacter methodsFor: 'taking objects' stamp: 'MMA 12/10/2020 18:57:41'!
facingPoint

	! !

!methodRemoval: PlayableCharacter #facingPoint stamp: 'MMA 12/10/2020 18:58:55'!
facingPoint

	!
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 19:00:09'!
playerFacingPoint
	! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 19:00:15' prior: 50873021!
playerFacingPoint
	player ! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 19:00:57' prior: 50873025!
playerFacingPoint
	player! !
!PlayableCharacter methodsFor: 'testing' stamp: 'MMA 12/10/2020 19:01:15'!
heading
	^heading.! !
!PlayableCharacter methodsFor: 'testing' stamp: 'MMA 12/10/2020 19:01:37'!
cardinalPoint
	^heading cardinalPoint.! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 19:01:51' prior: 50873029!
playerFacingPoint
	player cardinalPoint! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 19:02:58' prior: 50873041!
playerFacingPoint
	(player cardinalPoint = #North) ifTrue: [^0@1.]! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 19:04:05' prior: 50873045!
playerFacingPoint
	(player cardinalPoint = #North) ifTrue: [^0@1].
	(player cardinalPoint = #South) ifTrue: [^0@-1].
	(player cardinalPoint = #East) ifTrue: [^1@0].
	(player cardinalPoint = #West) ifTrue: [^-1@0].! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 19:04:57' prior: 50873008!
validateMovingForward
	| destiny |
	destiny := playerPosition + self playerFacingPoint.
	(playerPosition y < (size y - 1)) ifFalse: [self error: self class invalidMovementMessage]! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 19:06:45' prior: 50873060!
validateMovingForward
	| destiny |
	destiny := playerPosition + self playerFacingPoint.
	
	(destiny y between: 0 and: size y - 1) ifFalse: [self error: self class invalidMovementMessage]
	
	"(playerPosition y < (size y - 1)) ifFalse: [self error: self class invalidMovementMessage]"! !

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoomVertically stamp: 'MMA 12/10/2020 19:07:05'!
PASSED!

!testRun: #RoomTest #test02PlayerCanNotMoveOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:07:29'!
FAILURE!
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 19:07:55' prior: 50873069!
validateMovingForward
	| destiny |
	destiny := playerPosition + self playerFacingPoint.
	
	(destiny y between: 0 and: size y - 1) ifFalse: [self error: self class invalidMovementMessage].
	
	(destiny x between: 0 and: size x - 1) ifFalse: [self error: self class invalidMovementMessage].! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 19:08:12' prior: 50873088!
validateMovingForward
	| destiny |
	destiny := playerPosition + self playerFacingPoint.
	
	(destiny y between: 0 and: size y - 1) ifFalse: [self error: self class invalidMovementMessage].
	
	(destiny x between: 0 and: size x - 1) ifFalse: [self error: self class invalidMovementMessage].
	
	"sacar codigo repetido si queda tiempo"! !

!testRun: #RoomTest #test02PlayerCanNotMoveOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:08:17'!
ERROR!

!testRun: #RoomTest #test02PlayerCanNotMoveOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:08:17'!
ERROR!

!testRun: #RoomTest #test02PlayerCanNotMoveOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:08:20'!
ERROR!

!testRun: #RoomTest #test02PlayerCanNotMoveOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:08:20'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:08:35' prior: 50872995!
test02PlayerCanNotMoveOutOfRoomHorizontally
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	playableCharacter rotateLeft.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.! !

!testRun: #RoomTest #test02PlayerCanNotMoveOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:08:37'!
PASSED!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoomVertically stamp: 'MMA 12/10/2020 19:08:40'!
PASSED!

!testRun: #RoomTest #test02PlayerCanNotMoveOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:08:40'!
PASSED!

!testRun: #RoomTest #test0nPlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:08:40'!
PASSED!
!Room class methodsFor: 'initialization' stamp: 'MMA 12/10/2020 19:09:47' prior: 50872506!
withSize: aSize withStageObjects: stageObjects forPlayer: aPlayableCharacter
	
	self validateSize.
	^ self new initializeWithSize: aSize andStageObjects: stageObjects forPlayer: aPlayableCharacter! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:10:50'!
test03CanNotCreateRoomWithZeroSize
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	playableCharacter rotateLeft.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:11:48' prior: 50873162!
test03CanNotCreateRoomWithZeroSize

	self should: [Room withSize: (0@0) withStageObjects: #() forPlayer: playableCharacter.] raise: Error withMessageText: Room invalidSize.
! !
!Room class methodsFor: 'initialization' stamp: 'MMA 12/10/2020 19:12:01'!
invalidSizeMessage
	^'invalid size'! !

!testRun: #RoomTest #test03CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:12:06'!
ERROR!

!testRun: #RoomTest #test03CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:12:06'!
ERROR!

!testRun: #RoomTest #test03CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:12:10'!
ERROR!

!testRun: #RoomTest #test03CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:12:10'!
ERROR!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:12:26' prior: 50873174!
test03CanNotCreateRoomWithZeroSize

	self should: [Room withSize: (0@0) withStageObjects: #() forPlayer: playableCharacter.] raise: Error withMessageText: Room invalidSizeMessage.
! !

!testRun: #RoomTest #test03CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:12:27'!
FAILURE!
!Room class methodsFor: 'initialization' stamp: 'MMA 12/10/2020 19:12:57' prior: 50873153!
withSize: aSize withStageObjects: stageObjects forPlayer: aPlayableCharacter
	
	self validateSize: aSize.
	^ self new initializeWithSize: aSize andStageObjects: stageObjects forPlayer: aPlayableCharacter! !
!Room class methodsFor: 'initialization' stamp: 'MMA 12/10/2020 19:13:41'!
validateSize: aSize
	(aSize x = 0 or: [aSize y = 0]) ifTrue: self class invalidSizeMessage.! !

!testRun: #RoomTest #test03CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:13:45'!
FAILURE!

!testRun: #RoomTest #test03CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:13:45'!
FAILURE!
!Room class methodsFor: 'initialization' stamp: 'MMA 12/10/2020 19:14:13' prior: 50873220!
validateSize: aSize
	(aSize x = 0 or: [aSize y = 0]) ifTrue: [self error: self class invalidSizeMessage].! !

!testRun: #RoomTest #test03CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:14:19'!
FAILURE!

!testRun: #RoomTest #test03CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:14:19'!
FAILURE!
!Room class methodsFor: 'initialization' stamp: 'MMA 12/10/2020 19:15:19' prior: 50873233!
validateSize: aSize
	(aSize x = 0 or: [aSize y = 0]) ifTrue: [self error: self invalidSizeMessage].! !

!testRun: #RoomTest #test03CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:15:26'!
PASSED!

!testRun: #RoomTest #test01PlayerCanNotMoveOutOfRoomVertically stamp: 'MMA 12/10/2020 19:15:29'!
PASSED!

!testRun: #RoomTest #test02PlayerCanNotMoveOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:15:29'!
PASSED!

!testRun: #RoomTest #test03CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:15:30'!
PASSED!

!testRun: #RoomTest #test0nPlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:15:30'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:15:42'!
test03CanNotCreateRoomWithNegativeSize

	self should: [Room withSize: (-1@-1) withStageObjects: #() forPlayer: playableCharacter.] raise: Error withMessageText: Room invalidSizeMessage.
! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:16:01'!
test01CanNotCreateRoomWithZeroSize

	self should: [Room withSize: (0@0) withStageObjects: #() forPlayer: playableCharacter.] raise: Error withMessageText: Room invalidSizeMessage.
! !

!methodRemoval: RoomTest #test03CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:16:01'!
test03CanNotCreateRoomWithZeroSize

	self should: [Room withSize: (0@0) withStageObjects: #() forPlayer: playableCharacter.] raise: Error withMessageText: Room invalidSizeMessage.
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:16:07'!
test02CanNotCreateRoomWithNegativeSize

	self should: [Room withSize: (-1@-1) withStageObjects: #() forPlayer: playableCharacter.] raise: Error withMessageText: Room invalidSizeMessage.
! !

!methodRemoval: RoomTest #test03CanNotCreateRoomWithNegativeSize stamp: 'MMA 12/10/2020 19:16:07'!
test03CanNotCreateRoomWithNegativeSize

	self should: [Room withSize: (-1@-1) withStageObjects: #() forPlayer: playableCharacter.] raise: Error withMessageText: Room invalidSizeMessage.
!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:16:12'!
test03PlayerCanNotMoveOutOfRoomVertically
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.! !

!methodRemoval: RoomTest #test01PlayerCanNotMoveOutOfRoomVertically stamp: 'MMA 12/10/2020 19:16:12'!
test01PlayerCanNotMoveOutOfRoomVertically
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:16:19'!
test04PlayerCanNotMoveOutOfRoomHorizontally
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	playableCharacter rotateLeft.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.! !

!methodRemoval: RoomTest #test02PlayerCanNotMoveOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:16:19'!
test02PlayerCanNotMoveOutOfRoomHorizontally
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	playableCharacter rotateLeft.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.!
!Room class methodsFor: 'initialization' stamp: 'MMA 12/10/2020 19:16:34' prior: 50873246!
validateSize: aSize
	(aSize x <= 0 or: [aSize y <= 0]) ifTrue: [self error: self invalidSizeMessage].! !

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'MMA 12/10/2020 19:16:39'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:16:43'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'MMA 12/10/2020 19:16:43'!
PASSED!

!testRun: #RoomTest #test03PlayerCanNotMoveOutOfRoomVertically stamp: 'MMA 12/10/2020 19:16:43'!
PASSED!

!testRun: #RoomTest #test04PlayerCanNotMoveOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:16:43'!
PASSED!

!testRun: #RoomTest #test0nPlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:16:43'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:17:54' prior: 50872429 overrides: 16927572!
setUp
	stageObjects := Dictionary new.
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPointsPortableObject := PointsPortableObject named: 'anObjectName' weighing: 10 worth: 10.
	
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:18:27'!
test05PlayerCanNotMoveWhenDestinyPositionIsOccupied
	"| room |
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North)."! !

!methodRemoval: RoomTest #test0nPlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:18:28'!
test0nPlayerCanNotMoveWhenDestinyPositionIsOccupied
	"| room |
	
	stageObjects add: (PointsPortableObject named: 'ObjectName' weighing: 10 worth: 10) -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North)."!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:20:03' prior: 50873400!
test05PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !
!Room methodsFor: 'initialization' stamp: 'MMA 12/10/2020 19:22:48' prior: 50872686!
initializeWithSize: aSize andStageObjects: aGroupOfStageObjects forPlayer: aPlayableCharacter
	size := aSize.
	stageObjects := aGroupOfStageObjects.
	player := aPlayableCharacter.
	playerPosition := 0@0.
	! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:23:40'!
test03PlayerCanNotMoveForwardOutOfRoomVertically
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.! !

!methodRemoval: RoomTest #test03PlayerCanNotMoveOutOfRoomVertically stamp: 'MMA 12/10/2020 19:23:40'!
test03PlayerCanNotMoveOutOfRoomVertically
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:23:46'!
test04PlayerCanNotMoveForwardOutOfRoomHorizontally
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	playableCharacter rotateLeft.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.! !

!methodRemoval: RoomTest #test04PlayerCanNotMoveOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:23:46'!
test04PlayerCanNotMoveOutOfRoomHorizontally
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	playableCharacter rotateLeft.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:23:54'!
test07PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !

!methodRemoval: RoomTest #test05PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:23:54'!
test05PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:24:30'!
test05PlayerCanNotMoveBackwardOutOfRoomVertically
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	self should: [room movePlayableCharacterBackward] raise: Error withMessageText: Room invalidMovementMessage.! !

!testRun: #RoomTest #test05PlayerCanNotMoveBackwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:24:47'!
FAILURE!
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 19:25:30'!
movePlayableCharacterBackward
	self validateMovingForward.
	player moveForward.
	playerPosition := playerPosition + self playerFacingPoint.! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 19:25:43' prior: 50872749!
movePlayableCharacterForward
	self validateMovingForward.
	player moveForward.
	playerPosition := playerPosition + self playerFacingPoint.! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 19:25:57' prior: 50873539!
movePlayableCharacterBackward
	self validateMovingBackward.
	player moveBackward.
	playerPosition := playerPosition + self playerFacingPoint.! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 19:26:39'!
validateMovingBackward
	| destiny |
	destiny := playerPosition - self playerFacingPoint.
	
	(destiny y between: 0 and: size y - 1) ifFalse: [self error: self class invalidMovementMessage].
	
	(destiny x between: 0 and: size x - 1) ifFalse: [self error: self class invalidMovementMessage].
	
	"sacar codigo repetido si queda tiempo"! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 19:26:56' prior: 50873553!
movePlayableCharacterBackward
	self validateMovingBackward.
	player moveBackward.
	playerPosition := playerPosition - self playerFacingPoint.! !

!testRun: #RoomTest #test05PlayerCanNotMoveBackwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:26:59'!
PASSED!

!testRun: #RoomTest #test04PlayerCanNotMoveForwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:27:01'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:27:32'!
test05PlayerCanNotMoveBackwardOutOfRoomHorizontally
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	playableCharacter rotateRight.
	
	self should: [room movePlayableCharacterBackward] raise: Error withMessageText: Room invalidMovementMessage.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:27:56'!
test06PlayerCanNotMoveBackwardOutOfRoomHorizontally
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	playableCharacter rotateRight.
	
	self should: [room movePlayableCharacterBackward] raise: Error withMessageText: Room invalidMovementMessage.! !

!methodRemoval: RoomTest #test05PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:27:56'!
test05PlayerCanNotMoveBackwardOutOfRoomHorizontally
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	playableCharacter rotateRight.
	
	self should: [room movePlayableCharacterBackward] raise: Error withMessageText: Room invalidMovementMessage.!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:28:10'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:28:10'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'MMA 12/10/2020 19:28:10'!
PASSED!

!testRun: #RoomTest #test03PlayerCanNotMoveForwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:28:10'!
PASSED!

!testRun: #RoomTest #test04PlayerCanNotMoveForwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:28:10'!
PASSED!

!testRun: #RoomTest #test05PlayerCanNotMoveBackwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:28:10'!
PASSED!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:28:10'!
PASSED!

!testRun: #RoomTest #test07PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:28:10'!
FAILURE!

!testRun: #RoomTest #test07PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:28:10'!
FAILURE!

!testRun: #RoomTest #test05PlayerCanNotMoveBackwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:28:21'!
PASSED!

!testRun: #RoomTest #test04PlayerCanNotMoveForwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:28:23'!
PASSED!

!testRun: #RoomTest #test03PlayerCanNotMoveForwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:28:24'!
PASSED!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:28:26'!
PASSED!

!testRun: #RoomTest #test07PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:28:28'!
FAILURE!

!testRun: #RoomTest #test07PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:28:28'!
FAILURE!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:28:32'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:29:23' prior: 50873600!
test06PlayerCanNotMoveBackwardOutOfRoomHorizontally
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	playableCharacter rotateRight.
	
	room movePlayableCharacterForward.
	room movePlayableCharacterBackward.
	
	self should: [room movePlayableCharacterBackward] raise: Error withMessageText: Room invalidMovementMessage.! !

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:29:26'!
PASSED!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:29:33' prior: 50873682!
test06PlayerCanNotMoveBackwardOutOfRoomHorizontally
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	playableCharacter rotateRight.
	
	room movePlayableCharacterForward.
	
	self should: [room movePlayableCharacterBackward] raise: Error withMessageText: Room invalidMovementMessage.! !

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:29:34'!
FAILURE!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:29:34'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:29:57'!
test08PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !

!methodRemoval: RoomTest #test07PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:29:57'!
test07PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:30:12'!
test07PlayerCanNotMoveOutOfRoomAfterManyMovements

	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	playableCharacter rotateRight.
	
	room movePlayableCharacterForward.
	
	self should: [room movePlayableCharacterBackward] raise: Error withMessageText: Room invalidMovementMessage.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:30:36' prior: 50873748!
test07PlayerCanNotMoveOutOfRoomAfterManyMovements

	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	room movePlayableCharacterBackward.
	
	self should: [room movePlayableCharacterBackward] raise: Error withMessageText: Room invalidMovementMessage.! !

!testRun: #RoomTest #test07PlayerCanNotMoveOutOfRoomAfterManyMovements stamp: 'MMA 12/10/2020 19:30:45'!
PASSED!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:30:47'!
FAILURE!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:30:47'!
FAILURE!

!testRun: #RoomTest #test05PlayerCanNotMoveBackwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:30:52'!
PASSED!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:30:54'!
FAILURE!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:30:54'!
FAILURE!

!testRun: #RoomTest #test08PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:31:06'!
FAILURE!

!testRun: #RoomTest #test08PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:31:06'!
FAILURE!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:31:09'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'MMA 12/10/2020 19:31:09'!
PASSED!

!testRun: #RoomTest #test03PlayerCanNotMoveForwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:31:09'!
PASSED!

!testRun: #RoomTest #test04PlayerCanNotMoveForwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:31:09'!
PASSED!

!testRun: #RoomTest #test05PlayerCanNotMoveBackwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:31:09'!
PASSED!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:31:09'!
FAILURE!

!testRun: #RoomTest #test07PlayerCanNotMoveOutOfRoomAfterManyMovements stamp: 'MMA 12/10/2020 19:31:09'!
PASSED!

!testRun: #RoomTest #test08PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:31:09'!
FAILURE!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:31:12'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:32:08' prior: 50873701!
test06PlayerCanNotMoveBackwardOutOfRoomHorizontally
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	playableCharacter rotateRight.
	
	self should: [room movePlayableCharacterBackward] raise: Error withMessageText: Room invalidMovementMessage.! !
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:32:39' prior: 50873475!
test04PlayerCanNotMoveForwardOutOfRoomHorizontally
	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	playableCharacter rotateLeft.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:34:19' prior: 50868877!
test01_forwardWhenHeadingNorthIncrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North.

	playableCharacter moveForward.

	self assert: (playableCharacter isAt: 1@3 heading: #North)! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'MMA 12/10/2020 19:34:21'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'MMA 12/10/2020 19:34:23'!
ERROR!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'MMA 12/10/2020 19:34:23'!
ERROR!
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:34:31' prior: 50868890!
test02_backwardWhenHeadingNorthDecrementsYCoordinate

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North.

	playableCharacter moveBackward.

	self assert: (playableCharacter isAt: 1@1 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:34:36' prior: 50868918!
test03_rotateRightWhenHeadingNorthHeadsEast

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North.

	playableCharacter rotateRight.

	self assert: (playableCharacter isAt: 1@2 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:34:45' prior: 50868975!
test04_rotateLeftWhenHeadingNorthHeadsWest

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #North.

	playableCharacter rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #West)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:34:50' prior: 50868903!
test05_movingWhenHeadingEastWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #East.

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 2@2 heading: #North)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:34:55' prior: 50868960!
test06_movingWhenHeadingSouthWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #South.

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@1 heading: #East)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:34:58' prior: 50868931!
test07_movingWhenHeadingWestWorksAsExpected

	| playableCharacter |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West.

	playableCharacter
		moveForward;
		moveForward;
		moveBackward;
		rotateRight;
		rotateLeft;
		rotateLeft.

	self assert: (playableCharacter isAt: 1@2 heading: #South)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:35:04' prior: 50868988!
test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid

	self
		should: [PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 1@2 heading: #X]
		raise: Error
		withExceptionDo: [:anError |
			self assert: PlayableCharacter invalidCardinalPointErrorDescription equals: anError messageText ]! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:35:08' prior: 50868946!
test09_canTakePortableObjects

	| playableCharacter paper |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West.
	paper := NoPointsPortableObject named: 'Paper' weighing: 1.
	
	playableCharacter take: paper.
	
	self assert: (playableCharacter backpackIncludes: paper)! !
!PlayableCharacterTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:35:13' prior: 50868851!
test10_canNotTakeMoreObjectsThanTheBackpackCanCarry

	| playableCharacter paper key |

	playableCharacter := PlayableCharacter named: 'Luigi' using: self defaultBackpack at: 2@2 heading: #West.
	paper := NoPointsPortableObject named: 'Paper' weighing: 100.
	key := NoPointsPortableObject named: 'Key' weighing: 1.
	
	playableCharacter take: paper.
	self 
		should: [ playableCharacter take: key ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: Backpack maxWeightExceededErrorDescription equals: anError messageText.
			self assert: (playableCharacter backpackIncludes: paper).
			self deny: (playableCharacter backpackIncludes: key) ]
	
	! !

!testRun: #PlayableCharacterTest #test01_forwardWhenHeadingNorthIncrementsYCoordinate stamp: 'MMA 12/10/2020 19:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test02_backwardWhenHeadingNorthDecrementsYCoordinate stamp: 'MMA 12/10/2020 19:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test03_rotateRightWhenHeadingNorthHeadsEast stamp: 'MMA 12/10/2020 19:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test04_rotateLeftWhenHeadingNorthHeadsWest stamp: 'MMA 12/10/2020 19:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test05_movingWhenHeadingEastWorksAsExpected stamp: 'MMA 12/10/2020 19:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test06_movingWhenHeadingSouthWorksAsExpected stamp: 'MMA 12/10/2020 19:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test07_movingWhenHeadingWestWorksAsExpected stamp: 'MMA 12/10/2020 19:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test08_canNotCreatePlayableCharacterWhenHeadingIsNotValid stamp: 'MMA 12/10/2020 19:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test09_canTakePortableObjects stamp: 'MMA 12/10/2020 19:35:16'!
PASSED!

!testRun: #PlayableCharacterTest #test10_canNotTakeMoreObjectsThanTheBackpackCanCarry stamp: 'MMA 12/10/2020 19:35:16'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:35:22'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'MMA 12/10/2020 19:35:22'!
PASSED!

!testRun: #RoomTest #test03PlayerCanNotMoveForwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:35:22'!
PASSED!

!testRun: #RoomTest #test04PlayerCanNotMoveForwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:35:22'!
PASSED!

!testRun: #RoomTest #test05PlayerCanNotMoveBackwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:35:22'!
PASSED!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:35:22'!
PASSED!

!testRun: #RoomTest #test07PlayerCanNotMoveOutOfRoomAfterManyMovements stamp: 'MMA 12/10/2020 19:35:22'!
PASSED!

!testRun: #RoomTest #test08PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:35:22'!
FAILURE!

!testRun: #RoomTest #test08PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:35:22'!
FAILURE!
!RoomTest methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 19:37:07' prior: 50873722!
test08PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	
	self assert: (playableCharacter isAt: 0@0 heading: #North).! !
!Room methodsFor: 'accessing - private' stamp: 'MMA 12/10/2020 19:38:40'!
occupiedPositions
	^ stageObjects keys.! !
!Room methodsFor: 'validation' stamp: 'MMA 12/10/2020 19:39:57' prior: 50873100!
validateMovingForward
	| destiny |
	destiny := playerPosition + self playerFacingPoint.
	
	(destiny y between: 0 and: size y - 1) ifFalse: [self error: self class invalidMovementMessage].
	(destiny x between: 0 and: size x - 1) ifFalse: [self error: self class invalidMovementMessage].
	
	"sacar codigo repetido si queda tiempo"! !
!Room methodsFor: 'validation' stamp: 'MMA 12/10/2020 19:40:04' prior: 50873560!
validateMovingBackward
	| destiny |
	destiny := playerPosition - self playerFacingPoint.
	
	(destiny y between: 0 and: size y - 1) ifFalse: [self error: self class invalidMovementMessage].
	(destiny x between: 0 and: size x - 1) ifFalse: [self error: self class invalidMovementMessage].
	
	"sacar codigo repetido si queda tiempo"! !
!Room methodsFor: 'validation' stamp: 'MMA 12/10/2020 19:43:26' prior: 50874101!
validateMovingForward
	| destiny |
	destiny := playerPosition + self playerFacingPoint.
	
	(destiny y between: 0 and: size y - 1) ifFalse: [self error: self class invalidMovementMessage].
	(destiny x between: 0 and: size x - 1) ifFalse: [self error: self class invalidMovementMessage].
	(destiny in: self occupiedPositions) ifTrue: [self error: self class invalidMovementMessage].
	
	"sacar codigo repetido si queda tiempo"! !
!Room methodsFor: 'validation' stamp: 'MMA 12/10/2020 19:44:24' prior: 50874127!
validateMovingForward
	| destiny |
	destiny := playerPosition + self playerFacingPoint.
	
	(destiny y between: 0 and: size y - 1) ifFalse: [self error: self class invalidMovementMessage].
	(destiny x between: 0 and: size x - 1) ifFalse: [self error: self class invalidMovementMessage].
	(self occupiedPositions includes: destiny) ifTrue: [self error: self class invalidMovementMessage].
	
	"sacar codigo repetido si queda tiempo"! !

!testRun: #RoomTest #test08PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:44:59'!
FAILURE!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:45:33' prior: 50874085!
test08PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.! !

!testRun: #RoomTest #test08PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:45:38'!
FAILURE!

!testRun: #RoomTest #test08PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:45:38'!
FAILURE!

!testRun: #RoomTest #test08PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:45:44'!
FAILURE!

!testRun: #RoomTest #test08PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:45:44'!
FAILURE!

!testRun: #RoomTest #test08PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:46:03'!
FAILURE!

a := Dictionary new.!

a add: 'kk' -> (0@1).!

a keys!

a keys includes: 'kk'!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:48:13' prior: 50874163!
test08PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.
	
	! !
!Room methodsFor: 'accessing - private' stamp: 'MMA 12/10/2020 19:48:26' prior: 50874097!
occupiedPositions
	^ stageObjects values.! !

a values !

a values includes: (0@1).!

a values includes: (0@0).!

!testRun: #RoomTest #test08PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:49:02'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:49:02'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'MMA 12/10/2020 19:49:03'!
PASSED!

!testRun: #RoomTest #test03PlayerCanNotMoveForwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:49:03'!
ERROR!

!testRun: #RoomTest #test04PlayerCanNotMoveForwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:49:03'!
PASSED!

!testRun: #RoomTest #test05PlayerCanNotMoveBackwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:49:03'!
PASSED!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:49:03'!
PASSED!

!testRun: #RoomTest #test07PlayerCanNotMoveOutOfRoomAfterManyMovements stamp: 'MMA 12/10/2020 19:49:03'!
ERROR!

!testRun: #RoomTest #test08PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:49:03'!
PASSED!

!testRun: #RoomTest #test03PlayerCanNotMoveForwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:49:31'!
ERROR!

!testRun: #RoomTest #test03PlayerCanNotMoveForwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:49:31'!
ERROR!

!testRun: #RoomTest #test03PlayerCanNotMoveForwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:49:43'!
ERROR!

!testRun: #RoomTest #test03PlayerCanNotMoveForwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:49:54'!
ERROR!

!testRun: #RoomTest #test03PlayerCanNotMoveForwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:49:54'!
ERROR!
!Room methodsFor: 'accessing - private' stamp: 'MMA 12/10/2020 19:51:12' prior: 50874210!
occupiedPositions
	stageObjects isEmpty ifTrue: [^#()].
	^ stageObjects values.! !

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 19:51:20'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'MMA 12/10/2020 19:51:20'!
PASSED!

!testRun: #RoomTest #test03PlayerCanNotMoveForwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:51:20'!
PASSED!

!testRun: #RoomTest #test04PlayerCanNotMoveForwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:51:20'!
PASSED!

!testRun: #RoomTest #test05PlayerCanNotMoveBackwardOutOfRoomVertically stamp: 'MMA 12/10/2020 19:51:20'!
PASSED!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 19:51:20'!
PASSED!

!testRun: #RoomTest #test07PlayerCanNotMoveOutOfRoomAfterManyMovements stamp: 'MMA 12/10/2020 19:51:20'!
PASSED!

!testRun: #RoomTest #test08PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:51:20'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:52:18'!
test08PlayerCanNotMoveForwardWhenDestinyPositionIsOccupied
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.
	
	! !
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:52:27'!
test09PlayerCanNotMoveBackwardWhenDestinyPositionIsOccupied
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.
	
	! !

!methodRemoval: RoomTest #test08PlayerCanNotMoveWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:52:27'!
test08PlayerCanNotMoveWhenDestinyPositionIsOccupied
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.
	
	!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:53:20' prior: 50874312!
test09PlayerCanNotMoveBackwardWhenDestinyPositionIsOccupied
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	playableCharacter rotateLeft; rotateLeft.
	
	self should: [room movePlayableCharacterBackward] raise: Error withMessageText: Room invalidMovementMessage.
	
	! !
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:53:35' prior: 50873762!
test07PlayerCanNotMoveOutOfRoomAfterManyMovements

	| room |
	room := Room withSize: (2@2) withStageObjects: #() forPlayer: playableCharacter.
	
	room movePlayableCharacterForward; movePlayableCharacterBackward.
	
	self should: [room movePlayableCharacterBackward] raise: Error withMessageText: Room invalidMovementMessage.! !

!testRun: #RoomTest #test07PlayerCanNotMoveOutOfRoomAfterManyMovements stamp: 'MMA 12/10/2020 19:53:37'!
PASSED!

!testRun: #RoomTest #test09PlayerCanNotMoveBackwardWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:53:57'!
FAILURE!

!testRun: #RoomTest #test09PlayerCanNotMoveBackwardWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:53:57'!
FAILURE!
!Room methodsFor: 'validation' stamp: 'MMA 12/10/2020 19:54:15' prior: 50874114!
validateMovingBackward
	| destiny |
	destiny := playerPosition - self playerFacingPoint.
	
	(destiny y between: 0 and: size y - 1) ifFalse: [self error: self class invalidMovementMessage].
	(destiny x between: 0 and: size x - 1) ifFalse: [self error: self class invalidMovementMessage].
	(self occupiedPositions includes: destiny) ifTrue: [self error: self class invalidMovementMessage].
	
	"sacar codigo repetido si queda tiempo"! !

!testRun: #RoomTest #test09PlayerCanNotMoveBackwardWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 19:54:24'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:55:37'!
test10PlayerCanNotMoveWhenDestinyPositionIsOccupiedAfterManyMovements
	| room |
	stageObjects add: aPointsPortableObject -> (1@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	playableCharacter rotateLeft; rotateLeft.
	
	self should: [room movePlayableCharacterBackward] raise: Error withMessageText: Room invalidMovementMessage.
	
	! !
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:56:21' prior: 50874399!
test10PlayerCanNotMoveWhenDestinyPositionIsOccupiedAfterManyMovements
	| room |
	stageObjects add: aPointsPortableObject -> (1@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	playableCharacter rotateRight.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.
	
	! !

!testRun: #RoomTest #test10PlayerCanNotMoveWhenDestinyPositionIsOccupiedAfterManyMovements stamp: 'MMA 12/10/2020 19:56:25'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:57:14'!
test11
	| room |
	stageObjects add: aPointsPortableObject -> (1@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room movePlayableCharacterForward.
	playableCharacter rotateRight.
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.
	
	! !
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 19:59:55' prior: 50874433!
test11
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	
	self should: [room movePlayableCharacterForward] raise: Error withMessageText: Room invalidMovementMessage.
	
	! !
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:01:31' prior: 50874447!
test11
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room 
	
	"assertar que el portable esta en la mochila"
	"assertar que el portable desaparecio del mapa"
	
	! !
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:02:15' prior: 50874459!
test11
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	"room takeItem"
	
	"assertar que el portable esta en la mochila"
	"assertar que el portable desaparecio del mapa"
	
	! !
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:07:23' prior: 50874471!
test11
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	"self assert: das."
	self deny: (room occupiedPositions includes: 0@1).
	
	! !
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:09:05' prior: 50874483!
test11
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	self deny: (room occupiedPositions includes: 0@1).
	
	! !

!testRun: #RoomTest #test11 stamp: 'MMA 12/10/2020 20:09:18'!
ERROR!
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 20:09:36'!
takeItemForPlayableCharacter
	self shouldBeImplemented.! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 20:10:00' prior: 50874510!
takeItemForPlayableCharacter
	player.! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 20:12:41' prior: 50874515!
takeItemForPlayableCharacter
	player take: self objectInFrontOfPlayableCharacter.! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 20:17:27'!
objectInFrontOfPlayableCharacter
	^ stageObjects keyAtValue: (playerPosition + self playerFacingPoint) ifAbsent: [self error: self class noObjectToTake].! !
!Room class methodsFor: 'initialization' stamp: 'MMA 12/10/2020 20:17:54'!
noObjectToTakeMessage
	^'There is no object to take in front of character.'! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 20:18:07' prior: 50874524!
objectInFrontOfPlayableCharacter
	^ stageObjects keyAtValue: (playerPosition + self playerFacingPoint) ifAbsent: [self error: self class noObjectToTakeMessage].! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 20:18:18' prior: 50874537!
objectInFrontOfPlayableCharacter
	^ stageObjects keyAtValue: (playerPosition + self playerFacingPoint) 
	ifAbsent: [self error: self class noObjectToTakeMessage].! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 20:18:22' prior: 50874545!
objectInFrontOfPlayableCharacter
	^ stageObjects keyAtValue: (playerPosition + self playerFacingPoint) 
	ifAbsent: [self error: self class noObjectToTakeMessage].! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 20:18:29' prior: 50874553!
objectInFrontOfPlayableCharacter
	^ stageObjects 
		keyAtValue: (playerPosition + self playerFacingPoint) 
		ifAbsent: [self error: self class noObjectToTakeMessage].! !

!testRun: #RoomTest #test11 stamp: 'MMA 12/10/2020 20:18:38'!
FAILURE!

!testRun: #RoomTest #test11 stamp: 'MMA 12/10/2020 20:18:38'!
FAILURE!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:18:53' prior: 50874495!
test11
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	"self deny: (room occupiedPositions includes: 0@1)."
	
	! !

!testRun: #RoomTest #test11 stamp: 'MMA 12/10/2020 20:18:55'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:19:00' prior: 50874574!
test11
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	self deny: (room occupiedPositions includes: 0@1).
	
	! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 20:20:20' prior: 50874519!
takeItemForPlayableCharacter
	player take: self objectInFrontOfPlayableCharacter.
	stageObjects removeKey: #e ifAbsent: [].! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 20:21:10' prior: 50874603!
takeItemForPlayableCharacter
	player take: self objectInFrontOfPlayableCharacter.
	stageObjects removeKey: self objectInFrontOfPlayableCharacter ifAbsent: [self error: self class noObjectToTakeMessage].! !

!testRun: #RoomTest #test11 stamp: 'MMA 12/10/2020 20:21:16'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:21:23' prior: 50874590!
test11
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	self deny: (room occupiedPositions includes: 0@1).! !
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:22:00'!
test11PlayerCanTakeAPortableObjectCorrectly
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	self deny: (room occupiedPositions includes: 0@1).! !

!methodRemoval: RoomTest #test11 stamp: 'MMA 12/10/2020 20:22:06'!
test11
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	self deny: (room occupiedPositions includes: 0@1).!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:25:56'!
test12PlayerCanTakeManyPortableObjectsCorrectly
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	stageObjects add: aPointsPortableObject -> (1@0).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	playableCharacter rotateRight.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	self deny: (room occupiedPositions includes: 0@1).! !
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:26:12' prior: 50874661!
test12PlayerCanTakeManyPortableObjectsCorrectly
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	stageObjects add: aPointsPortableObject -> (1@0).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	playableCharacter rotateRight.
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	self deny: (room occupiedPositions includes: 0@1).! !

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 20:27:49'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'objects stageObjects backpack playableCharacter aPointsPortableObject anotherPointsPortableObject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:27:47' prior: 50874678!
test12PlayerCanTakeManyPortableObjectsCorrectly
	| room |
	stageObjects add: aPointsPortableObject -> (0@1).
	stageObjects add: anotherPointsPortableObject -> (1@0).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	playableCharacter rotateRight.
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: anotherPointsPortableObject).
	self deny: (room occupiedPositions includes: 1@0).! !
!RoomTest methodsFor: 'setUp' stamp: 'MMA 12/10/2020 20:28:14' prior: 50873388 overrides: 16927572!
setUp
	stageObjects := Dictionary new.
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPointsPortableObject := PointsPortableObject named: 'anObjectName' weighing: 10 worth: 10.
	anotherPointsPortableObject := PointsPortableObject named: 'anotherObjectName' weighing: 15 worth: 20.
	
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North.! !

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 20:28:22'!
PASSED!

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 20:28:22'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'MMA 12/10/2020 20:28:22'!
PASSED!

!testRun: #RoomTest #test03PlayerCanNotMoveForwardOutOfRoomVertically stamp: 'MMA 12/10/2020 20:28:22'!
PASSED!

!testRun: #RoomTest #test04PlayerCanNotMoveForwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 20:28:22'!
PASSED!

!testRun: #RoomTest #test05PlayerCanNotMoveBackwardOutOfRoomVertically stamp: 'MMA 12/10/2020 20:28:23'!
PASSED!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 20:28:23'!
PASSED!

!testRun: #RoomTest #test07PlayerCanNotMoveOutOfRoomAfterManyMovements stamp: 'MMA 12/10/2020 20:28:23'!
PASSED!

!testRun: #RoomTest #test08PlayerCanNotMoveForwardWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 20:28:23'!
PASSED!

!testRun: #RoomTest #test09PlayerCanNotMoveBackwardWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 20:28:23'!
PASSED!

!testRun: #RoomTest #test10PlayerCanNotMoveWhenDestinyPositionIsOccupiedAfterManyMovements stamp: 'MMA 12/10/2020 20:28:23'!
PASSED!

!testRun: #RoomTest #test11PlayerCanTakeAPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:28:23'!
PASSED!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 20:28:23'!
PASSED!

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 20:30:27'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'objects stageObjects backpack playableCharacter aPointsPortableObject anotherPointsPortableObject aNoPortableObject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:30:25'!
test13PlayerCanTakeFromANoPortableObjectCorrectly
	| room |
	stageObjects add: aNoPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: anotherPointsPortableObject).
	self assert: (room occupiedPositions includes: 1@0).! !
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:31:13' prior: 50874799!
test13PlayerCanTakeFromANoPortableObjectCorrectly
	| room |
	stageObjects add: aNoPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	self assert: (room occupiedPositions includes: 1@0).! !
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:31:59' prior: 50874814!
test13PlayerCanTakeFromANoPortableObjectCorrectly
	| room |
	stageObjects add: aNoPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	aNoPortableObject save: aPointsPortableObject.
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	self assert: (room occupiedPositions includes: 1@0).! !

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:32:12'!
ERROR!

----SNAPSHOT----(10 December 2020 20:32:20) CuisUniversity-4384.image priorSource: 17155766!

!classDefinition: #NoPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 20:35:38'!
StageObject subclass: #NoPortableObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'setUp' stamp: 'MMA 12/10/2020 20:35:16' prior: 50874726 overrides: 16927572!
setUp
	stageObjects := Dictionary new.
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPointsPortableObject := PointsPortableObject named: 'anObjectName' weighing: 10 worth: 10.
	anotherPointsPortableObject := PointsPortableObject named: 'anotherObjectName' weighing: 15 worth: 20.
	aNoPortableObject := NoPortableObject named: 'aNoPortableObjectName' cointaining: aPointsPortableObject.
	
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North.! !
!NoPortableObject class methodsFor: 'nil' stamp: 'MMA 12/10/2020 20:36:29'!
named: aName cointaining: aStageObject.
	^ self new initializeWithName: aName containing: aStageObject.! !

!classDefinition: #NoPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 20:37:32'!
StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #NoPortableObject category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 20:37:34'!
StageObject subclass: #NoPortableObject
	instanceVariableNames: 'name stageObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NoPortableObject methodsFor: 'no messages' stamp: 'MMA 12/10/2020 20:37:27'!
initializeWithName: aName containing: aStageObject
	name := aName.
	stageObjects := OrderedCollection new; add: aStageObject.! !

Object subclass: #StageObject
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

Object subclass: #StageObject
	instanceVariableNames: 'name1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #StageObject category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 20:38:46'!
Object subclass: #StageObject
	instanceVariableNames: 'name1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!

!classDefinition: #StageObject category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 20:39:06'!
Object subclass: #StageObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 20:40:02' prior: 50874902!
initializeWithName: aName containing: aStageObject
	name := aName.
	stageObjects := OrderedCollection new.
	stageObjects add: aStageObject.! !

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 20:40:03'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'MMA 12/10/2020 20:40:04'!
PASSED!

!testRun: #RoomTest #test03PlayerCanNotMoveForwardOutOfRoomVertically stamp: 'MMA 12/10/2020 20:40:04'!
PASSED!

!testRun: #RoomTest #test04PlayerCanNotMoveForwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 20:40:04'!
PASSED!

!testRun: #RoomTest #test05PlayerCanNotMoveBackwardOutOfRoomVertically stamp: 'MMA 12/10/2020 20:40:04'!
PASSED!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 20:40:04'!
PASSED!

!testRun: #RoomTest #test07PlayerCanNotMoveOutOfRoomAfterManyMovements stamp: 'MMA 12/10/2020 20:40:04'!
PASSED!

!testRun: #RoomTest #test08PlayerCanNotMoveForwardWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 20:40:04'!
PASSED!

!testRun: #RoomTest #test09PlayerCanNotMoveBackwardWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 20:40:04'!
PASSED!

!testRun: #RoomTest #test10PlayerCanNotMoveWhenDestinyPositionIsOccupiedAfterManyMovements stamp: 'MMA 12/10/2020 20:40:04'!
PASSED!

!testRun: #RoomTest #test11PlayerCanTakeAPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:40:04'!
PASSED!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 20:40:04'!
PASSED!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:40:04'!
ERROR!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:40:04'!
ERROR!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 20:40:10'!
PASSED!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:44:07'!
ERROR!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:44:27' prior: 50874829!
test13PlayerCanTakeFromANoPortableObjectCorrectly
	| room |
	stageObjects add: aNoPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	self assert: (room occupiedPositions includes: 1@0).! !
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:44:42' prior: 50875004!
test13PlayerCanTakeFromANoPortableObjectCorrectly
	| room |
	stageObjects add: aNoPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	self assert: (room occupiedPositions includes: 0@1).! !

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:44:44'!
ERROR!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 20:46:17'!
toBeTakenByPlayableCharacterIn: aRoom! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 20:48:32' prior: 50874610!
takeItemForPlayableCharacter
	player take: self objectInFrontOfPlayableCharacter.
	stageObjects removeKey: self objectInFrontOfPlayableCharacter ifAbsent: [self error: self class noObjectToTakeMessage].
	
	self objectInFrontOfPlayableCharacter toBeTakenByPlayableCharacterIn: self.! !
!PortableObject methodsFor: 'accessing' stamp: 'MMA 12/10/2020 20:48:58'!
toBeTakenByPlayableCharacterIn: aRoom
	! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 20:49:13' prior: 50875041!
takeItemForPlayableCharacter
	"player take: self objectInFrontOfPlayableCharacter.
	stageObjects removeKey: self objectInFrontOfPlayableCharacter ifAbsent: [self error: self class noObjectToTakeMessage]."
	
	self objectInFrontOfPlayableCharacter toBeTakenByPlayableCharacterIn: self.! !
!PortableObject methodsFor: 'accessing' stamp: 'MMA 12/10/2020 20:50:34' prior: 50875053!
toBeTakenByPlayableCharacterIn: aRoom
	aRoom player take: self.
	aRoom removePortableObject: self.! !
!Room methodsFor: 'accessing - private' stamp: 'MMA 12/10/2020 20:50:48'!
player
	^player ! !
!Room methodsFor: 'accessing - private' stamp: 'MMA 12/10/2020 20:50:55' prior: 50875075!
player
	^player! !
!Room methodsFor: 'accessing - private' stamp: 'MMA 12/10/2020 20:51:23'!
removePortableObject: aPortableObject
	! !
!Room methodsFor: 'accessing - private' stamp: 'MMA 12/10/2020 20:52:09' prior: 50875082!
removePortableObject: aPortableObject
	stageObjects removeKey: aPortableObject ifAbsent: [self error: self class noObjectToTakeMessage].! !

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 20:52:15'!
PASSED!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 20:52:37' prior: 50875037!
toBeTakenByPlayableCharacterIn: aRoom
	! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 20:52:48' prior: 50875099!
toBeTakenByPlayableCharacterIn: aRoom
	stageObjects ! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 20:53:24' prior: 50875104!
toBeTakenByPlayableCharacterIn: aRoom
	stageObjects toBeTakenByPlayableCharacterIn: aRoom! !

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 20:53:36'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'MMA 12/10/2020 20:53:36'!
PASSED!

!testRun: #RoomTest #test03PlayerCanNotMoveForwardOutOfRoomVertically stamp: 'MMA 12/10/2020 20:53:36'!
PASSED!

!testRun: #RoomTest #test04PlayerCanNotMoveForwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 20:53:36'!
PASSED!

!testRun: #RoomTest #test05PlayerCanNotMoveBackwardOutOfRoomVertically stamp: 'MMA 12/10/2020 20:53:36'!
PASSED!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 20:53:36'!
PASSED!

!testRun: #RoomTest #test07PlayerCanNotMoveOutOfRoomAfterManyMovements stamp: 'MMA 12/10/2020 20:53:36'!
PASSED!

!testRun: #RoomTest #test08PlayerCanNotMoveForwardWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 20:53:36'!
PASSED!

!testRun: #RoomTest #test09PlayerCanNotMoveBackwardWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 20:53:36'!
PASSED!

!testRun: #RoomTest #test10PlayerCanNotMoveWhenDestinyPositionIsOccupiedAfterManyMovements stamp: 'MMA 12/10/2020 20:53:36'!
PASSED!

!testRun: #RoomTest #test11PlayerCanTakeAPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:53:36'!
PASSED!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 20:53:37'!
PASSED!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:53:37'!
ERROR!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:53:37'!
ERROR!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 20:53:43'!
PASSED!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:53:45'!
ERROR!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:53:45'!
ERROR!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 20:54:13' prior: 50874939!
initializeWithName: aName containing: aStageObject
	name := aName.
	"stageObjects := OrderedCollection new.
	stageObjects add: aStageObject."
	! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 20:54:20' prior: 50875176!
initializeWithName: aName containing: aStageObject
	name := aName.
	"stageObjects := OrderedCollection new.
	stageObjects add: aStageObject."
	stageObjects := aStageObject! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 20:54:21' prior: 50875184!
initializeWithName: aName containing: aStageObject
	name := aName.
	"stageObjects := OrderedCollection new.
	stageObjects add: aStageObject."
	stageObjects := aStageObject.! !

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:54:25'!
ERROR!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:54:25'!
ERROR!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:54:47'!
ERROR!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:54:47'!
ERROR!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 20:55:40' prior: 50875193!
initializeWithName: aName containing: aStageObject
	name := aName.
	stageObjects := OrderedCollection new.
	stageObjects add: aStageObject.! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 20:57:24' prior: 50875109!
toBeTakenByPlayableCharacterIn: aRoom
	stageObjects do: [:aStageObject | aStageObject toBeTakenByPlayableCharacterIn: aRoom].! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 20:57:31' prior: 50875224!
toBeTakenByPlayableCharacterIn: aRoom

	stageObjects do: [:aStageObject | aStageObject toBeTakenByPlayableCharacterIn: aRoom].! !
!PortableObject methodsFor: 'accessing' stamp: 'MMA 12/10/2020 20:57:39' prior: 50875069!
toBeTakenByPlayableCharacterIn: aRoom

	aRoom player take: self.
	aRoom removePortableObject: self.! !

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:57:45'!
ERROR!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:57:45'!
ERROR!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 20:58:54' prior: 50875216!
initializeWithName: aName containing: aStageObject
	name := aName.
	stageObjects := OrderedCollection with: aStageObject.! !

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:58:59'!
ERROR!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:58:59'!
ERROR!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 20:59:09'!
PASSED!

!testRun: #RoomTest #test11PlayerCanTakeAPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:59:11'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:59:21' prior: 50875019!
test13PlayerCanTakeFromANoPortableObjectCorrectly
	| room |
	stageObjects add: aNoPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	"self assert: (playableCharacter backpackIncludes: aPointsPortableObject)."
	self assert: (room occupiedPositions includes: 0@1).! !

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:59:23'!
ERROR!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:59:23'!
ERROR!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:59:32' prior: 50875274!
test13PlayerCanTakeFromANoPortableObjectCorrectly
	| room |
	stageObjects add: aNoPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	"self assert: (room occupiedPositions includes: 0@1)."! !

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:59:34'!
ERROR!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:59:34'!
ERROR!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:59:37'!
ERROR!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 20:59:37'!
ERROR!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 20:59:43' prior: 50875296!
test13PlayerCanTakeFromANoPortableObjectCorrectly
	| room |
	stageObjects add: aNoPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	self assert: (room occupiedPositions includes: 0@1).! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 21:00:02' prior: 50875057!
takeItemForPlayableCharacter
	
	self objectInFrontOfPlayableCharacter toBeTakenByPlayableCharacterIn: self.! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 21:00:06' prior: 50875340!
takeItemForPlayableCharacter
	
	self objectInFrontOfPlayableCharacter toBeTakenByPlayableCharacterIn: self.! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 21:00:13' prior: 50875346!
takeItemForPlayableCharacter
	
	self objectInFrontOfPlayableCharacter toBeTakenByPlayableCharacterIn: self.! !

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 21:00:25'!
ERROR!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 21:00:25'!
ERROR!

----SNAPSHOT----(10 December 2020 21:01:26) CuisUniversity-4384.image priorSource: 17382322!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 21:02:16' prior: 50875325!
test13PlayerCanTakeFromANoPortableObjectCorrectly
	| room |
	stageObjects add: aNoPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	self assert: (room occupiedPositions includes: 0@1).! !
!StageObject methodsFor: 'no messages' stamp: 'MMA 12/10/2020 21:03:38'!
toBeTakenByPlayableCharacterIn: aRoom
	self subclassResponsibility.! !
!Room methodsFor: 'accessing - private' stamp: 'MMA 12/10/2020 21:06:26' prior: 50875087!
removePortableObject: aPortableObject
	"stageObjects removeKey: aPortableObject ifAbsent: [self error: self class noObjectToTakeMessage]."! !

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 21:06:29'!
PASSED!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:06:31'!
FAILURE!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:06:31'!
FAILURE!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:06:37'!
FAILURE!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:06:37'!
FAILURE!
!Room methodsFor: 'accessing - private' stamp: 'MMA 12/10/2020 21:07:26' prior: 50875388!
removePortableObject: aPortableObject
	stageObjects removeKey: aPortableObject ifAbsent: [self error: self class noObjectToTakeMessage].! !
!Room methodsFor: 'accessing - private' stamp: 'MMA 12/10/2020 21:07:48'!
removeNoPortableObject: aNoPortableObject
! !
!Room methodsFor: 'accessing - private' stamp: 'MMA 12/10/2020 21:08:15'!
remove: aStageObject
	aStageObject toBeRemovedIn: self.! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 21:09:39' prior: 50875352!
takeItemForPlayableCharacter
	|item|
	item := self objectInFrontOfPlayableCharacter.
	item toBeTakenByPlayableCharacterIn: self.
	! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 21:09:45' prior: 50875429!
takeItemForPlayableCharacter
	|item|
	item := self objectInFrontOfPlayableCharacter.
	item toBeTakenByPlayableCharacterIn: self.
	item 
	! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 21:10:09' prior: 50875436!
takeItemForPlayableCharacter
	|item|
	item := self objectInFrontOfPlayableCharacter.
	item toBeTakenByPlayableCharacterIn: self.
	self remove: item. 
	! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 21:10:18' prior: 50875443!
takeItemForPlayableCharacter
	|item|
	item := self objectInFrontOfPlayableCharacter.
	
	item toBeTakenByPlayableCharacterIn: self.
	self remove: item. 
	! !
!Room methodsFor: 'operations' stamp: 'MMA 12/10/2020 21:10:28' prior: 50875451!
takeItemForPlayableCharacter
	|item|
	item := self objectInFrontOfPlayableCharacter.
	
	item toBeTakenByPlayableCharacterIn: self.
	self remove: item.
	! !
!PortableObject methodsFor: 'accessing' stamp: 'MMA 12/10/2020 21:10:54'!
toBeRemovedIn: aRoom
	! !
!PortableObject methodsFor: 'accessing' stamp: 'MMA 12/10/2020 21:11:16' prior: 50875467!
toBeRemovedIn: aRoom
	aRoom removePortableObject: self.! !

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:11:21'!
ERROR!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:11:21'!
ERROR!
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 21:12:33'!
toBeRemovedIn: aRoom
! !

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 21:12:38'!
ERROR!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 21:12:38'!
ERROR!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:12:40'!
ERROR!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:12:41'!
ERROR!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:12:47'!
ERROR!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:12:47'!
ERROR!

stageObjects!

aPortableObject!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:14:50'!
ERROR!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:14:50'!
ERROR!

stageObjects keys includes: aPortableObject !

stageObjects keys!

aPortableObject !

aPortableObject !

aPortableObject !

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:17:16'!
ERROR!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:17:16'!
ERROR!
!Room methodsFor: 'accessing - private' stamp: 'MMA 12/10/2020 21:19:11' prior: 50875413!
removePortableObject: aPortableObject
	stageObjects removeKey: aPortableObject "ifAbsent: [self error: self class noObjectToTakeMessage]".! !

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:19:15'!
ERROR!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:19:15'!
ERROR!
!PortableObject methodsFor: 'accessing' stamp: 'MMA 12/10/2020 21:20:02' prior: 50875239 overrides: 50875382!
toBeTakenByPlayableCharacterIn: aRoom

	aRoom player take: self.
	"aRoom removePortableObject: self."! !
!Room methodsFor: 'accessing - private' stamp: 'MMA 12/10/2020 21:20:12' prior: 50875527!
removePortableObject: aPortableObject
	stageObjects removeKey: aPortableObject ifAbsent: [self error: self class noObjectToTakeMessage].! !

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:20:15'!
PASSED!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 21:20:17'!
PASSED!
!PortableObject methodsFor: 'accessing' stamp: 'MMA 12/10/2020 21:20:24' prior: 50875542 overrides: 50875382!
toBeTakenByPlayableCharacterIn: aRoom

	aRoom player take: self.! !

!methodRemoval: Room #removeNoPortableObject: stamp: 'MMA 12/10/2020 21:20:35'!
removeNoPortableObject: aNoPortableObject
!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 21:20:41'!
PASSED!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 21:21:25'!
test14PlayerCanTakeManyObjectsFromANoPortableObjectCorrectly
	| room |
	stageObjects add: aNoPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	self assert: (room occupiedPositions includes: 0@1).! !

!classDefinition: #RoomTest category: 'ISW1-2020-2C-2doParcial' stamp: 'MMA 12/10/2020 21:22:00'!
TestCase subclass: #RoomTest
	instanceVariableNames: 'objects stageObjects backpack playableCharacter aPointsPortableObject anotherPointsPortableObject aNoPortableObject aBigNoPortableObject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-2doParcial'!
!RoomTest methodsFor: 'tests' stamp: 'MMA 12/10/2020 21:21:58' prior: 50875576!
test14PlayerCanTakeManyObjectsFromANoPortableObjectCorrectly
	| room |
	stageObjects add: aBigNoPortableObject -> (0@1).
	room := Room withSize: (2@2) withStageObjects: stageObjects forPlayer: playableCharacter.
	
	room takeItemForPlayableCharacter.
	
	self assert: (playableCharacter backpackIncludes: aPointsPortableObject).
	self assert: (playableCharacter backpackIncludes: anotherPointsPortableObject).
	self assert: (room occupiedPositions includes: 0@1).! !
!RoomTest methodsFor: 'setUp' stamp: 'MMA 12/10/2020 21:22:45' prior: 50874860 overrides: 16927572!
setUp
	stageObjects := Dictionary new.
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	aPointsPortableObject := PointsPortableObject named: 'anObjectName' weighing: 10 worth: 10.
	anotherPointsPortableObject := PointsPortableObject named: 'anotherObjectName' weighing: 15 worth: 20.
	aNoPortableObject := NoPortableObject named: 'aNoPortableObjectName' cointaining: aPointsPortableObject.
	aBigNoPortableObject := NoPortableObject named: 'aNoPortableObjectName' cointaining: aPointsPortableObject.
	aBigNoPortableObject add: anotherPointsPortableObject.
	
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North.! !
!RoomTest methodsFor: 'setUp' stamp: 'MMA 12/10/2020 21:23:00' prior: 50875621 overrides: 16927572!
setUp
	stageObjects := Dictionary new.
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	
	aPointsPortableObject := PointsPortableObject named: 'anObjectName' weighing: 10 worth: 10.
	anotherPointsPortableObject := PointsPortableObject named: 'anotherObjectName' weighing: 15 worth: 20.
	
	aNoPortableObject := NoPortableObject named: 'aNoPortableObjectName' cointaining: aPointsPortableObject.
	
	aBigNoPortableObject := NoPortableObject named: 'aNoPortableObjectName' cointaining: aPointsPortableObject.
	aBigNoPortableObject add: anotherPointsPortableObject.
	
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North.! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 21:23:34'!
add: aStageObject
	
! !
!NoPortableObject methodsFor: 'as yet unclassified' stamp: 'MMA 12/10/2020 21:23:51' prior: 50875670!
add: aStageObject
	stageObjects add: aStageObject.! !
!RoomTest methodsFor: 'setUp' stamp: 'MMA 12/10/2020 21:24:53' prior: 50875646 overrides: 16927572!
setUp
	stageObjects := Dictionary new.
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	
	aPointsPortableObject := PointsPortableObject named: 'anObjectName' weighing: 10 worth: 10.
	anotherPointsPortableObject := PointsPortableObject named: 'anotherObjectName' weighing: 15 worth: 20.
	
	aNoPortableObject := NoPortableObject named: 'aNoPortableObjectName' cointaining: aPointsPortableObject.
	
	aBigNoPortableObject := NoPortableObject named: 'aNoPortableObjectName' cointaining: aPointsPortableObject.
	aBigNoPortableObject add: anotherPointsPortableObject.
	
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North.! !
!RoomTest methodsFor: 'setUp' stamp: 'MMA 12/10/2020 21:25:21' prior: 50875679 overrides: 16927572!
setUp
	stageObjects := Dictionary new.
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	
	aPointsPortableObject := PointsPortableObject named: 'anObjectName' weighing: 10 worth: 10.
	anotherPointsPortableObject := PointsPortableObject named: 'anotherObjectName' weighing: 15 worth: 20.
	
	aNoPortableObject := NoPortableObject named: 'aNoPortableObjectName' cointaining: aPointsPortableObject.
	
	aBigNoPortableObject := NoPortableObject named: 'aNoPortableObjectName' cointaining: aNoPortableObject.
	aBigNoPortableObject add: anotherPointsPortableObject.
	
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North.! !

!testRun: #RoomTest #test14PlayerCanTakeManyObjectsFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 21:25:34'!
PASSED!
!RoomTest methodsFor: 'setUp' stamp: 'MMA 12/10/2020 21:28:54' prior: 50875704 overrides: 16927572!
setUp
	stageObjects := Dictionary new.
	backpack := Backpack containingUpTo: 100 limitingPointsTo: 100.
	
	aPointsPortableObject := PointsPortableObject named: 'anObjectName' weighing: 10 worth: 10.
	anotherPointsPortableObject := PointsPortableObject named: 'anotherObjectName' weighing: 15 worth: 20.
	
	aNoPortableObject := NoPortableObject named: 'aNoPortableObjectName' cointaining: aPointsPortableObject.
	
	aBigNoPortableObject := NoPortableObject named: 'aBigNoPortableObjectName' cointaining: aNoPortableObject.
	aBigNoPortableObject add: anotherPointsPortableObject.
	
	playableCharacter := PlayableCharacter named: 'aName' using: backpack at: 0@0 heading: #North.! !

!testRun: #RoomTest #test01CanNotCreateRoomWithZeroSize stamp: 'MMA 12/10/2020 21:29:10'!
PASSED!

!testRun: #RoomTest #test02CanNotCreateRoomWithNegativeSize stamp: 'MMA 12/10/2020 21:29:10'!
PASSED!

!testRun: #RoomTest #test03PlayerCanNotMoveForwardOutOfRoomVertically stamp: 'MMA 12/10/2020 21:29:10'!
PASSED!

!testRun: #RoomTest #test04PlayerCanNotMoveForwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 21:29:10'!
PASSED!

!testRun: #RoomTest #test05PlayerCanNotMoveBackwardOutOfRoomVertically stamp: 'MMA 12/10/2020 21:29:10'!
PASSED!

!testRun: #RoomTest #test06PlayerCanNotMoveBackwardOutOfRoomHorizontally stamp: 'MMA 12/10/2020 21:29:10'!
PASSED!

!testRun: #RoomTest #test07PlayerCanNotMoveOutOfRoomAfterManyMovements stamp: 'MMA 12/10/2020 21:29:10'!
PASSED!

!testRun: #RoomTest #test08PlayerCanNotMoveForwardWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 21:29:10'!
PASSED!

!testRun: #RoomTest #test09PlayerCanNotMoveBackwardWhenDestinyPositionIsOccupied stamp: 'MMA 12/10/2020 21:29:10'!
PASSED!

!testRun: #RoomTest #test10PlayerCanNotMoveWhenDestinyPositionIsOccupiedAfterManyMovements stamp: 'MMA 12/10/2020 21:29:10'!
PASSED!

!testRun: #RoomTest #test11PlayerCanTakeAPortableObjectCorrectly stamp: 'MMA 12/10/2020 21:29:10'!
PASSED!

!testRun: #RoomTest #test12PlayerCanTakeManyPortableObjectsCorrectly stamp: 'MMA 12/10/2020 21:29:10'!
PASSED!

!testRun: #RoomTest #test13PlayerCanTakeFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 21:29:10'!
PASSED!

!testRun: #RoomTest #test14PlayerCanTakeManyObjectsFromANoPortableObjectCorrectly stamp: 'MMA 12/10/2020 21:29:10'!
PASSED!

----SNAPSHOT----(10 December 2020 21:29:19) CuisUniversity-4384.image priorSource: 17398864!